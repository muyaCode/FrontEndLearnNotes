import{_ as a,C as p,c as s,o as n,ah as t,j as l,G as u,a as e,w as h}from"./chunks/framework.DqD713j2.js";const k=JSON.parse('{"title":"源码原理解析学习指导","description":"","frontmatter":{},"headers":[],"relativePath":"Document/框架源码原理实现解析/源码原理解析学习指导.md","filePath":"Document/框架源码原理实现解析/源码原理解析学习指导.md","lastUpdated":1750954157000}'),c={name:"Document/框架源码原理实现解析/源码原理解析学习指导.md"};function m(d,i,g,b,f,_){const r=p("setting"),o=p("router-link");return n(),s("div",null,[i[23]||(i[23]=t("",28)),l("ul",null,[i[7]||(i[7]=t("",8)),l("li",null,[i[6]||(i[6]=l("p",null,"5.2 权限组件和权限指令",-1)),l("ul",null,[l("li",null,[i[4]||(i[4]=l("p",null,"权限组件",-1)),l("ul",null,[i[1]||(i[1]=l("li",null,[l("p",null,"1.components组件:Authorized.vue"),l("ul",null,[l("li",null,'import { check } from "../utils/auth "; export default { props: { authority: { type: Array, required: true } }, render (h, context) { const { props, scopedSlots } = context; return check(props.authority) ? scopedSlots.default() : null; } }')])],-1)),i[2]||(i[2]=l("li",null,[l("p",null,"2.把组件注册到全局main.js"),l("ul",null,[l("li",null,'// 顶部导入 import Authorized from "./components/Authorized" // 注册到全局 Vue.component(‘Authorized’, Authorized);')])],-1)),l("li",null,[i[0]||(i[0]=l("p",null,"3.使用权限组件",-1)),l("ul",null,[l("li",null,[u(r)])])]),i[3]||(i[3]=l("li",null,[l("p",null,"优点"),l("ul",null,[l("li",null,"比较灵活")])],-1))])]),i[5]||(i[5]=t("",1))])]),i[8]||(i[8]=t("",6))]),i[24]||(i[24]=t("",3)),l("ul",null,[i[21]||(i[21]=t("",7)),l("li",null,[i[20]||(i[20]=l("p",null,"vue-router源码解析",-1)),l("ul",null,[i[19]||(i[19]=t("",3)),l("li",null,[i[18]||(i[18]=l("p",null,"手写router路由 (简单思路)",-1)),l("ul",null,[i[17]||(i[17]=l("li",null,[l("p",null,"需求分析"),l("ul",null,[l("li",null,[l("p",null,"作为一个插件存在：实现vue-router类和install方法")]),l("li",null,[l("p",null,"实现两个全局组件：router-view用于显示匹配组件内容，router-link用于跳转")]),l("li",null,[l("p",null,"监控url变化：监听hashchange或者popstate事件")]),l("li",null,[l("p",null,"响应最新url：创建一个响应式的属性current，当它改变时获取对应组件并显示")])])],-1)),l("li",null,[i[16]||(i[16]=l("p",null,"源码实现 src\\krouter",-1)),l("ul",null,[i[13]||(i[13]=l("li",null,[l("p",null,"index.js应用路由"),l("ul",null,[l("li",null,`import Vue from 'vue' import VueRouter from './kvue-router' import Home from '../views/Home.vue' // 1.应用插件 Vue.use(VueRouter) const routes = [ { path: '/', name: 'home', component: Home }, { path: '/about', name: 'about', // route level code-splitting // this generates a separate chunk (about.[hash].js) for this route // which is lazy-loaded when the route is visited. component: () => import(/* webpackChunkName: "about" */ '../views/About.vue') } ] // 2.创建实例 const router = new VueRouter({ mode: 'history', base: process.env.BASE_URL, routes }) export default router`)])],-1)),i[14]||(i[14]=l("li",null,[l("p",null,"krouter-router.js实现"),l("ul",null,[l("li",null,"import Link from './krouter-link' import View from './krouter-view' let Vue; // 1.实现一个插件：挂载$router class KVueRouter { constructor(options) { this.$options = options console.log(this.$options); // 需要创建响应式的current属性 // 利用Vue提供的defineReactive做响应化 // 这样将来current变化的时候，依赖的组件会重新render Vue.util.defineReactive(this, 'current', '/') // this.app = new Vue({ // data() { // return { // current: '/' // } // } // }) // 监控url变化 window.addEventListener('hashchange', this.onHashChange.bind(this)) window.addEventListener('load', this.onHashChange.bind(this)) // 创建一个路由映射表 this.routeMap = {} options.routes.forEach(route => { this.routeMap[route.path] = route }) } onHashChange() { console.log(window.location.hash); this.current = window.location.hash.slice(1) } } KVueRouter.install = function (_Vue) { // 保存构造函数，在KVueRouter里面使用 Vue = _Vue; // 挂载$router // 怎么获取根实例中的router选项 Vue.mixin({ beforeCreate() { // 确保根实例的时候才执行 if (this.$options.router) { Vue.prototype.$router = this.$options.router } } }) // 任务2：实现两个全局组件router-link和router-view Vue.component('router-link', Link) Vue.component('router-view', View) } export default KVueRouter")])],-1)),l("li",null,[i[12]||(i[12]=l("p",null,"krouter-link.js实现",-1)),l("ul",null,[l("li",null,[i[10]||(i[10]=e("export default { props: { to: { type: String, required: true }, }, render(h) { // abc // ")),u(o,{to:"/about"},{default:h(()=>i[9]||(i[9]=[e("xxx")])),_:1,__:[9]}),i[11]||(i[11]=e(" // h(tag, data, children) console.log(this.$slots); return h('a', { attrs: { href: '#' + this.to } }, this.$slots.default) // return {this.$slots.default} } }"))])])]),i[15]||(i[15]=l("li",null,[l("p",null,"krouter-view.js实现"),l("ul",null,[l("li",null,"export default { render(h) { //获取path对应的component const {routeMap, current} = this.$router; console.log(routeMap,current); const component = routeMap[current].component || null; return h(component) } }")])],-1))])])])])])]),i[22]||(i[22]=t("",3))]),i[25]||(i[25]=t("",10))])}const y=a(c,[["render",m]]);export{k as __pageData,y as default};
