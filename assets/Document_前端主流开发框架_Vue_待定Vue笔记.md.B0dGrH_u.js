import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端主流开发框架/Vue/待定Vue笔记.md","filePath":"Document/前端主流开发框架/Vue/待定Vue笔记.md","lastUpdated":1750954157000}'),o={name:"Document/前端主流开发框架/Vue/待定Vue笔记.md"};function e(t,s,r,c,B,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h2 id="问题解决方案" tabindex="-1">问题解决方案 <a class="header-anchor" href="#问题解决方案" aria-label="Permalink to &quot;问题解决方案&quot;">​</a></h2><h3 id="_1-vue-数据变化视图不更新-vue-文档-深入响应式原理" tabindex="-1">1.Vue 数据变化视图不更新 (vue 文档：深入响应式原理) <a class="header-anchor" href="#_1-vue-数据变化视图不更新-vue-文档-深入响应式原理" aria-label="Permalink to &quot;1.Vue 数据变化视图不更新 (vue 文档：深入响应式原理)&quot;">​</a></h3><p><a href="https://v2.cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noreferrer">深入响应式原理 — Vue.js (vuejs.org)</a></p><h4 id="_1-数组修改下标值或者长度-视图不更新" tabindex="-1">1.数组修改下标值或者长度，视图不更新 <a class="header-anchor" href="#_1-数组修改下标值或者长度-视图不更新" aria-label="Permalink to &quot;1.数组修改下标值或者长度，视图不更新&quot;">​</a></h4><ul><li><p>问题描述</p><ul><li><p>在 vue2 中 用数组下标修改值时 或者 新增对象 Key 值时 ，这样 vue 的 devsrve 函数是监听不到数据的变化的所以就会导致数据更新视图未更新</p></li><li><p>数组利用下标修改值 (错误示范)</p><ul><li>this.arr[0] = &quot;列表 0&quot; <ul><li>// !错误的 这样是不响应的</li></ul></li></ul></li><li><p>修改数组的长度 (错误示范)</p><ul><li>this.arr.length = newLength <ul><li>// !错误的 这样是不响应的</li></ul></li></ul></li></ul></li><li><p>解决方案</p><ul><li><p>① 可以利用 vue 的 this.$set() 或 Vue.set(vm.obj,&#39;key&#39;,&#39;value&#39;) || vm.$set(vm.items, indexOfItem, newValue)方法</p><ul><li><p>数据</p><ul><li>data: { arr: [&quot;列表 1&quot;, &#39;列表 2&#39;], newObj: { a: &quot;123&quot; } },</li></ul></li><li><p>方法</p><ul><li><p>this.$set(this.arr, 0, &quot;列表 0&quot;)</p></li><li><p>this.$set(目标数据, &quot;目标数据的下标或者 key 值&quot;, &quot;所赋予的值&quot;)</p></li></ul></li></ul></li><li><p>② 可以利用 vue 对数组重写的 splice 方法</p><ul><li><p>数据</p><ul><li>data: { arr: [&quot;列表 1&quot;, &#39;列表 2&#39;], newObj: { a: &quot;123&quot; } },</li></ul></li><li><p>方法</p><ul><li><p>this.arr.splice(0, 1, &quot;列表 0&quot;)</p></li><li><p>this.arr.splice(开始下标, 删除的个数, &quot;替换的内容&quot;)</p></li></ul></li><li><p>数组更新检测： 其他数组变异方法</p><ul><li><p>push()</p></li><li><p>pop()</p></li><li><p>shift()</p></li><li><p>unshift()</p></li><li><p>splice()</p></li><li><p>sort()</p></li><li><p>reverse()</p></li><li><p>push()，pop()，splice()，sort()，reverse()可被 vue 检测到</p></li><li><p>filter(), concat(), slice()</p><ul><li><p>这些不会改变原始数组，但总是返回一个新数组。</p></li><li><p>当使用非变异方法时，可以用新数组替换旧数组</p></li></ul></li></ul></li></ul></li><li><p>③ 重新声明一个变量深拷贝一下当前这个数组然后重新赋值即可</p><ul><li><p>数据</p><ul><li>data: { arr: [&quot;列表 1&quot;, &#39;列表 2&#39;], newObj: { a: &quot;123&quot; } },</li></ul></li><li><p>方法</p><ul><li>methods: { upDateData() { let newArr = JSON.parse(JSON.stringify(this.arr)) newArr[0] = &quot;列表 0&quot; this.arr = newArr } }</li></ul></li></ul></li></ul></li></ul><h4 id="_2-对象新增-key-值-视图不更新" tabindex="-1">2.对象新增 key 值，视图不更新 <a class="header-anchor" href="#_2-对象新增-key-值-视图不更新" aria-label="Permalink to &quot;2.对象新增 key 值，视图不更新&quot;">​</a></h4><ul><li><p>错误代码示例</p><ul><li><p>对象新增 key 值时，视图不更新</p></li><li><p>数据</p><ul><li>data: { arr: [&quot;列表 1&quot;, &#39;列表 2&#39;], newObj: { a: &quot;123&quot; } },</li></ul></li><li><p>方法</p><ul><li>this.newObj.b=&quot;456&quot; <ul><li>这样给对象新加 key 值得方式是不响应的</li></ul></li></ul></li></ul></li><li><p>解决方案</p><ul><li><p>① 利用 this.$set() 或 Vue.set(vm.obj,&#39;key&#39;,&#39;value&#39;)</p><ul><li><p>数据</p><ul><li>data: { arr: [&quot;列表 1&quot;, &#39;列表 2&#39;], newObj: { a: &quot;123&quot; } },</li></ul></li><li><p>方法</p><ul><li><p>this.$set(this.newObj, &quot;b&quot;, &quot;456&quot;)</p></li><li><p>this.$set(目标数据, &quot;目标数据的下标或者 key 值&quot;, &quot;所赋予的值&quot;)</p></li></ul></li></ul></li><li><p>② 重新声明一个变量深拷贝一下当前这个数组然后重新赋值即可</p><ul><li><p>数据</p><ul><li>data: { arr: [&quot;列表 1&quot;, &#39;列表 2&#39;], newObj: { a: &quot;123&quot; } },</li></ul></li><li><p>方法</p><ul><li>methods: { upDateData() { let copyObj = JSON.parse(JSON.stringify(this.newObj)) copyObj.b = &quot;456&quot; this.newObj = copyObj } }</li></ul></li></ul></li><li><p>③ 可以利用 ES6 的 Object.assign()方法</p><ul><li><p>数据</p><ul><li>data: { arr: [&quot;列表 1&quot;, &#39;列表 2&#39;], newObj: { a: &quot;123&quot; } },</li></ul></li><li><p>方法</p><ul><li><p>this.newObj = Object.assign({}, this.newObj, { b: &quot;456&quot; })</p></li><li><p>参数</p><ul><li><p>Object.assign(target, ...sources)</p></li><li><p>参数：</p></li><li><p>target---&gt;目标对象</p></li><li><p>source---&gt;源对象</p><ul><li>可以是...多个对象</li></ul></li><li><p>返回值：</p></li><li><p>target，即目标对象</p></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="_3-异步更新队列-视图不能实时更新" tabindex="-1">3.异步更新队列，视图不能实时更新 <a class="header-anchor" href="#_3-异步更新队列-视图不能实时更新" aria-label="Permalink to &quot;3.异步更新队列，视图不能实时更新&quot;">​</a></h4><ul><li><p>问题描述</p><ul><li><p>数据第一次获取到了，也渲染了，但是第二次之后数据只有在再一次渲染页面的时候更新，并不能实时更新。</p></li><li><p>Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。</p></li></ul></li><li><p>解决方案</p><ul><li><p>① 利用 Vue.nextTick(callback) 或 this.$nextTick(callback)</p><ul><li><p>说明</p><ul><li><p>callback 回调函数在 DOM 更新完成后就会调用</p></li><li><p>$nextTick()返回一个 Promise 对象，所以可以使用新的 ES2016 async/await 语法完成相同的事情：</p></li></ul></li><li><p>使用例子</p><ul><li>this.$nextTick(()=&gt;{ this.name = this.arr })</li></ul></li></ul></li></ul></li></ul><h3 id="_2-vue-多层循环-动态改变数据后渲染的很慢或者不渲染-v-for-更新数据不重新渲染页面" tabindex="-1">2.vue 多层循环，动态改变数据后渲染的很慢或者不渲染 (v-for 更新数据不重新渲染页面) <a class="header-anchor" href="#_2-vue-多层循环-动态改变数据后渲染的很慢或者不渲染-v-for-更新数据不重新渲染页面" aria-label="Permalink to &quot;2.vue 多层循环，动态改变数据后渲染的很慢或者不渲染 (v-for 更新数据不重新渲染页面)&quot;">​</a></h3><ul><li><p>在 Vue 组件中，在 mounted 阶段调用了一个函数去请求异步数据，将返回结果赋给 data 里面的值却失败了，赋值完 console.log()出来明明是有值的，但页面却没有更新过来</p><ul><li>在函数中赋值完成以后，只要执行 this.$forceUpdate()去强制刷新数据</li></ul></li><li><p>this.$forceUpdate();</p><ul><li><p>强制刷新，解决页面不会重新渲染的问题</p></li><li><p>官方解释：迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。</p></li></ul></li><li><p>如果是在（element-ui）下拉菜单中下拉框选择后绑定值改变，显示不变也可以如下代码这样写：</p><ul><li><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">el-select</span></span>
<span class="line"><span style="color:#D19A66;">	v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">reqdata</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">coupon_code</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#D19A66;">	class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;w160&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#D19A66;">change</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">$forceupdate</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">&quot;</span></span>
<span class="line"><span style="color:#D19A66;">	placeholder</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;请选择订单类型&quot;</span></span>
<span class="line"><span style="color:#D19A66;">	size</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;small&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;  &lt;el-option  v-for=&quot;(item,index) in orderlist&quot;  :key=&quot;index&quot;  :label=&quot;item.name&quot;  :value=&quot;item.id&quot;&gt;  &lt;/el-option&gt; &lt;/</span><span style="color:#E06C75;">el-select</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li></li></ul></li></ul><h3 id="_3-组件通信" tabindex="-1">3.组件通信 <a class="header-anchor" href="#_3-组件通信" aria-label="Permalink to &quot;3.组件通信&quot;">​</a></h3><ul><li><p>父传子</p><ul><li><p>父组件通过属性名传递数据，子组件通过 props 进行接收数据</p></li><li><p>父组件传输的标签里的属性定义</p><ul><li><p>传输的属性和状态</p><ul><li><p>传输的属性</p><ul><li>myname=&quot;myname&quot;</li></ul></li><li><p>动态绑定 传输的状态</p><ul><li>:myshow=&quot;myshow&quot;</li></ul></li></ul></li><li><p>代码</p><ul><li><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">navbar</span><span style="color:#D19A66;"> mynamea</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myname&quot;</span><span style="color:#ABB2BF;"> :</span><span style="color:#D19A66;">myshowa</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">myshow</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">navbar</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li></li><li><p>data(){ return { myname:&#39;zhangsan&#39;, myshow:true } }</p></li></ul></li></ul></li><li><p>子组件接收父组件传输的属性(二选一)</p><ul><li><p>props:[&quot;mynamea&quot;,&quot;myshowa&quot;] ,</p></li><li><p>props:{ mynamea:String, myshowa:Boolean }</p></li><li><p>代码</p><ul><li></li><li><p>​ Vue.component(&quot;navbar&quot;,{ // 接受父组件传来的属性 // props:[&quot;myname&quot;,&quot;myshow&quot;] , // 接受父组件传来的状态 props:{ myname:String, myshow:Boolean } })</p></li></ul></li></ul></li></ul></li><li><p>事件机制 子传父</p><ul><li><p>子组件 通过 触发事件 的方式向父组件传递数据</p><ul><li><p>1.触发事件</p><ul><li></li></ul></li><li><p>2.事件</p><ul><li>methods:{ handleClick(){ this.$emit(&#39;onup&#39;,父组件的事件); } }</li></ul></li></ul></li><li><p>父组件 通过 监听事件 的方式来接收数据</p><ul><li><p>1.子组件中的自定义事件的监听</p><ul><li><code>&lt;子组件 @onup=&quot;handlechange&quot;&gt;&lt;/子组件&gt;</code></li></ul></li><li><p>2.数据定义和监听的代码</p><ul><li><p>data(){ return { msg:&#39;&#39;, } }</p></li><li><p>methods:{ // 父组件事件的回调子组件 handleChange(value){ this.msg= value; } }</p></li></ul></li></ul></li></ul></li><li><p>子组件调用父组件的方法</p><ul><li><p>1.直接在子组件中通过 this.$parent.event 来调用父组件的方法</p></li><li><p>2.在子组件里用$emit 向父组件触发一个事件，父组件监听这个事件</p><ul><li><p>子组件</p><ul><li>Enlarge text</li><li>$emit(&#39;在父组件调用子组件时的属性：enlarge-text&#39;, &#39;向父组件传值&#39;)</li></ul></li><li><p>父组件</p><ul><li><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">blog-post</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">enlarge-text</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">postfontsize</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> $event</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">blog-post</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><ul><li>$event <ul><li>子组件的$emit()第二个参数的值</li></ul></li></ul></li><li><p>@enlarge-text=&quot;&quot;换成方法</p><ul><li><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">blog-post</span><span style="color:#D19A66;"> v-on</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">enlarge-text</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E06C75;">onenlargetext</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">blog-post</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>methods: { onEnlargeText: function (enlargeAmount) { this.postFontSize += enlargeAmount } }</p><ul><li>enlargeAmount 就是子组件的$emit()第二个参数的值</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>vue 的 ref 实现组件通信 父子相互传</p><ul><li><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">child</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mychild&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">//子组件 Vue.component(&quot;child&quot;,{ template:\` child \`, data(){ return {</span></span>
<span class="line"><span style="color:#ABB2BF;">childname:&quot;子组件的状态&quot; } }, methods:{ add(data){</span></span>
<span class="line"><span style="color:#ABB2BF;">console.log(&quot;子组件的方法&quot;,data) } } }) var vm = new Vue({ el:&quot;#box&quot;, data:{</span></span>
<span class="line"><span style="color:#ABB2BF;">}, methods: { handleAdd(){ console.log(&quot;1111&quot;,this.$refs.mychild.childname)</span></span>
<span class="line"><span style="color:#ABB2BF;">this.$refs.mychild.add(&quot;孩子听话&quot;); } }, })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li></li><li><p>定义</p><ul><li><p>元素上自定义</p><ul><li>ref=&quot;mytext&quot;</li></ul></li><li><p>父组件上</p><ul><li>methods: { handleAdd(){ console.log(&quot;1111&quot;,this.$refs.mychild.childname) this.$refs.mychild.add(&quot;孩子听话&quot;); } <ul><li>this.$refs.mychild.拿到原生 DOM 节点</li></ul></li></ul></li></ul></li><li><p>应用场景</p><ul><li><ol><li>ref 放在标签上， 拿到的是原生节点</li></ol></li><li><ol start="2"><li>ref 放在组件上， 拿到的是组件对象</li></ol></li></ul></li></ul></li><li><p>中央(中间人)事件总线通信 多层组件通信</p><ul><li><p>两个父组件里的组件，找到相同的父级的父级...</p></li><li><p>a.$on(eventName)</p><ul><li>监听事件</li></ul></li><li><p>引入组件</p><ul><li>import bus form &quot;@/bus&quot;</li></ul></li><li><p>代码例子</p><ul><li><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">weixinauthor</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">weixinauthor</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">weixinuser</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">weixinuser</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">import bus form &quot;@/bus&quot; //空vue实例 就是中央事件总线 var bus = new Vue();</span></span>
<span class="line"><span style="color:#ABB2BF;">Vue.component(&quot;weixinauthor&quot;,{ template:\` 我是一个微信公众号作者 发布 \`,</span></span>
<span class="line"><span style="color:#ABB2BF;">methods:{ handleClick(){</span></span>
<span class="line"><span style="color:#ABB2BF;">bus.$emit(&quot;weixinmessage&quot;,this.$refs.mytext.value) } } })</span></span>
<span class="line"><span style="color:#ABB2BF;">Vue.component(&quot;weixinuser&quot;,{ // 合适的位置先 订阅好 bus.$on template:\`</span></span>
<span class="line"><span style="color:#ABB2BF;">我是一个微信用户 \`, mounted(){ bus.$on(&quot;weixinmessage&quot;,(data)=&gt;{</span></span>
<span class="line"><span style="color:#ABB2BF;">console.log(&quot;收到推送了&quot;,data) }) console.log(&quot;生命周期函数-当前组件的dom</span></span>
<span class="line"><span style="color:#ABB2BF;">创建完成之后 就会调用&quot;) } }) new Vue({ el:&quot;#box&quot; })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li></li></ul></li><li><p>代码解析</p><ul><li><p>定义事件总线</p><ul><li>//空 vue 实例 就是中央事件总线 var bus = new Vue();</li></ul></li><li><p>两个组件调用</p><ul><li><p>推送</p><ul><li>methods:{ handleClick(){ bus.$emit(&quot;weixinmessage&quot;,this.$refs.mytext.value) }</li></ul></li><li><p>接收</p><ul><li>mounted(){ bus.$on(&quot;weixinmessage&quot;,(data)=&gt;{ console.log(&quot;收到推送了&quot;,data) }) console.log(&quot;生命周期函数-当前组件的 dom 创建完成之后 就会调用&quot;) }</li></ul></li></ul></li></ul></li></ul></li><li><p>Vue 组件间通信 的 6 种方式</p><ul><li><p>1.props / $emit 适用 父子组件通信</p></li><li><p>2.ref 与 parent /children 适用 父子组件通信</p><ul><li><p>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</p></li><li><p>parent /children：访问父 / 子实例</p></li></ul></li><li><p>3.EventBus （emit /on） 适用于 父子、隔代、兄弟组件通信</p><ul><li>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件。</li></ul></li><li><p>4.attrs/listeners 适用于 隔代组件通信</p><ul><li><p>attrs&quot; 传入内部组件。通常配合 inheritAttrs 选项一起使用。</p></li><li><p>listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=&quot;listeners&quot; 传入内部组件</p></li></ul></li><li><p>5.provide / inject 适用于 隔代组件通信</p><ul><li>祖先组件中通过 provider 来提供变量，然后在子孙组件中通过 inject 来注入变量。provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。</li></ul></li><li><p>6.Vuex 适用于 父子、隔代、兄弟组件通信</p><ul><li><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p></li><li><p>状态</p><ul><li><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p></li><li><p>改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p></li></ul></li></ul></li></ul></li><li><p>Vue2 组件通信方法</p><ul><li><p>非父子组件通信时</p><ul><li><p>bus</p></li><li><p>vuex</p></li><li><p>Vue.observable()</p><ul><li><p><a href="https://cn.vuejs.org/v2/api/#Vue-observable" target="_blank" rel="noreferrer">https://cn.vuejs.org/v2/api/#Vue-observable</a></p></li><li><p>vue2.6 发布的一个新的 api</p></li><li><p>可以处理简单的跨组件共享数据状态的问题 ，可以说是个精简版的 vuex</p></li><li><p>例子</p><ul><li><p>定义</p><ul><li><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">// /store/store.js import Vue from &#39;vue</span><span style="color:#ABB2BF;"> //</span></span>
<span class="line"><span style="color:#ABB2BF;">创建state对象，使用observable让state对象可响应 export let state =</span></span>
<span class="line"><span style="color:#ABB2BF;">Vue.observable({ name: &#39;张三&#39;, &#39;age&#39;: 38 }) // 创建对应的方法 export</span></span>
<span class="line"><span style="color:#ABB2BF;">let mutations = { changeName(name) { state.name = name },</span></span>
<span class="line"><span style="color:#ABB2BF;">setAge(age) { state.age = age } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li></li></ul></li><li><p>使用</p><ul><li><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	姓名：{{ name }} 年龄：{{ age }} 改变姓名 改变年龄</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">import { state, mutations } from &#39;@/store export default { //</span></span>
<span class="line"><span style="color:#ABB2BF;">在计算属性中拿到值 computed: { name() { return state.name }, age() {</span></span>
<span class="line"><span style="color:#ABB2BF;">return state.age } }, // 调用mutations里面的方法，更新数据 methods:</span></span>
<span class="line"><span style="color:#ABB2BF;">{ changeName: mutations.changeName, setAge: mutations.setAge } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="vue3-组件通信方法" tabindex="-1">Vue3 组件通信方法 <a class="header-anchor" href="#vue3-组件通信方法" aria-label="Permalink to &quot;Vue3 组件通信方法&quot;">​</a></h3><h2 id="vue-前后端交互" tabindex="-1">Vue 前后端交互 <a class="header-anchor" href="#vue-前后端交互" aria-label="Permalink to &quot;Vue 前后端交互&quot;">​</a></h2><h3 id="http-协议" tabindex="-1">HTTP 协议 <a class="header-anchor" href="#http-协议" aria-label="Permalink to &quot;HTTP 协议&quot;">​</a></h3><p>网络协议，其实也就是前后端商量好的沟通准则。服务器要能读得懂客户端的请求，客户端也要懂服务器的响应，那么他们之间就需要一个协议</p><p>常见的网络协议</p><ul><li><p>TCP</p></li><li><p>HTTP</p></li><li><p>HTTPS</p></li><li><p>FTP</p></li></ul><p>三次握手和四次挥手</p><ul><li>HTTP 基于 TCP，是面向连接的协议，建立连接要通过三次握手，断开连接要经过四次挥手</li></ul><p>http 协议的构成</p><ul><li><p>请求</p><ul><li><p>请求头</p><ul><li><p>Request Header</p><ul><li><p>Requst URL</p></li><li><p>Requst Method</p></li><li><p>Query String Parameters</p></li></ul></li></ul></li><li><p>请求体</p><ul><li>Request Body</li></ul></li></ul></li><li><p>响应</p><ul><li><p>响应头</p><ul><li><p>Response Header</p></li><li><p>Content-Type</p></li></ul></li><li><p>响应体</p><ul><li>Response Body</li></ul></li><li><p>响应数据</p></li></ul></li></ul><h3 id="location-对象方法" tabindex="-1">location 对象方法 <a class="header-anchor" href="#location-对象方法" aria-label="Permalink to &quot;location 对象方法&quot;">​</a></h3><ul><li><p>location.assign()</p><ul><li>跟 href 一样，可以跳转页面(也称为重定向页面) 可以后退返回原页面</li></ul></li><li><p>location.replace()</p><ul><li>可以跳转，但不能退回原页面</li></ul></li><li><p>location.reload()</p><ul><li>重新加载页面，相当于刷新按钮或者 f5，如果参数为 true 强制刷新 ctrl+f5</li></ul></li></ul><h3 id="前端鉴权" tabindex="-1">前端鉴权 <a class="header-anchor" href="#前端鉴权" aria-label="Permalink to &quot;前端鉴权&quot;">​</a></h3><p><a href="https://juejin.cn/post/6844903864458543111" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903864458543111</a></p><h4 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h4><h5 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h5><ul><li>存于客户端，由于 http 协议是无状态的，只要客户端与服务端数据交换完，就会断掉链接，如果再请求 就再次链接，而服务器是无法保存这种链接的状态，只有不停地链接、断链接，所以需要 cookie 来做一个身份认证，再次请求的时候服务器会根据这个身份 id 进行用户判断。</li></ul><h5 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h5><ul><li><p>cookie 是不可跨域的</p></li><li><p>在 http 请求中携带，会在服务器和客户端间传递，所以 cookie 会有大小限制，不能超过 4k，而且存在在设定的 path 下。</p></li></ul><h5 id="封装-cookie" tabindex="-1">封装 cookie <a class="header-anchor" href="#封装-cookie" aria-label="Permalink to &quot;封装 cookie&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> Cookie</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//分装获取的方法 Cookie.get(&#39;name&#39;)</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> cookiestr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cookie</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//读取本地的cookie</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> list</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cookiestr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;; &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> list</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> kvs</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> list</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;=&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">kvs</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> kvs</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">//查询是否存在 存在返回 否则返回null</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//封装写入cookie的方法 包括内容、有效期、路径，是否安全传输</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">expires</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> expires</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;number&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> expires</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			expires</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">expires</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">expires</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E06C75;">				expires</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">				d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setDate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDate</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> expires</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">				expires</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> d</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">expires</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> expires</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			expires</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//cookie的写入 用json字符串形式 调用的时候用Cookie.set(&#39;name&#39;,&#39;zhangsan&#39;,&#39;/&#39;)</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cookie</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E06C75;">			key</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">			&quot;=&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E06C75;">			value</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">			&quot;;&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#ABB2BF;">			(</span><span style="color:#E06C75;">expires</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;expires=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> expires</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;;&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#ABB2BF;">			(</span><span style="color:#E06C75;">path</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;path=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;;&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h4 id="session" tabindex="-1">Session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;Session&quot;">​</a></h4><h4 id="token-验证-jwt" tabindex="-1">Token 验证(JWT) <a class="header-anchor" href="#token-验证-jwt" aria-label="Permalink to &quot;Token 验证(JWT)&quot;">​</a></h4><h4 id="oauth-开放授权" tabindex="-1">OAuth(开放授权) <a class="header-anchor" href="#oauth-开放授权" aria-label="Permalink to &quot;OAuth(开放授权)&quot;">​</a></h4><h4 id="html5-本地存储" tabindex="-1">HTML5 本地存储 <a class="header-anchor" href="#html5-本地存储" aria-label="Permalink to &quot;HTML5 本地存储&quot;">​</a></h4><h5 id="sessionstorage" tabindex="-1">sessionStorage <a class="header-anchor" href="#sessionstorage" aria-label="Permalink to &quot;sessionStorage&quot;">​</a></h5><p>是用户从打开当前会话窗口到关闭会话窗这一段时间有效，关闭之后存的数据就会被删除</p><p>示例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;alice&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> username</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>遍历属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> storage</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sessionStorage</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> length</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> storage</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=-</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">storage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">key</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">),</span><span style="color:#E5C07B;">storage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="localstorage" tabindex="-1">localStorage <a class="header-anchor" href="#localstorage" aria-label="Permalink to &quot;localStorage&quot;">​</a></h5><p>localStorage 会一直存在浏览器中 除非人工清除 方法同上</p><p>示例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;alice&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> username</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>遍历属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> storage</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">localStorage</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> length</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> storage</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=-</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">storage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">key</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">),</span><span style="color:#E5C07B;">storage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="ajax" tabindex="-1">Ajax <a class="header-anchor" href="#ajax" aria-label="Permalink to &quot;Ajax&quot;">​</a></h3><h4 id="ajax-特点特性" tabindex="-1">Ajax 特点特性 <a class="header-anchor" href="#ajax-特点特性" aria-label="Permalink to &quot;Ajax 特点特性&quot;">​</a></h4><ul><li><p>Ajax 是一套 API 核心提供的类型：XMLHttpRequest</p></li><li><p>优点</p><ul><li><p>不需要插件支持（一般浏览器且默认开启 JavaScript 即可）</p></li><li><p>用户体验极佳（不刷新页面即可获取可更新的数据）</p></li><li><p>提升 Web 程序的性能（在传递数据方面做到按需发送，不必整体提交）</p></li><li><p>减轻服务器和带宽的负担（将服务器的一些操作转移到客户端）</p></li></ul></li><li><p>缺点</p><ul><li><p>前进、后退的功能被破坏（因为 Ajax 永远在当前页，不会记录前后页面）</p></li><li><p>搜索引擎的支持度不够（因为搜索引擎爬虫还不能理解 JS 引起变化数据的内容）</p></li></ul></li></ul><h4 id="ajax-应用场景" tabindex="-1">Ajax 应用场景 <a class="header-anchor" href="#ajax-应用场景" aria-label="Permalink to &quot;Ajax 应用场景&quot;">​</a></h4><ul><li><p>1.页面上拉加载更多数据</p></li><li><p>2.列表数据无刷新分页</p></li><li><p>3.表单项离开焦点数据验证： 验证邮箱和用户名唯一性</p></li><li><p>4.搜索框提示文章提示文字列表</p></li><li><p>5.省市区三级联动</p></li></ul><h4 id="ajax-状态码和-http-状态码" tabindex="-1">Ajax 状态码和 HTTP 状态码 <a class="header-anchor" href="#ajax-状态码和-http-状态码" aria-label="Permalink to &quot;Ajax 状态码和 HTTP 状态码&quot;">​</a></h4><ul><li><p>Ajax 状态码</p><ul><li><p>0 - 4 五种状态</p><ul><li><p>0 实例对象 代理（xhr）被创建，代表初始化状态，请求对象</p></li><li><p>1 open() 方法已经被调用，建立了连接</p></li><li><p>2 send() 方法已经被调用，已经接收到了响应报文的响应头，但还没有拿到体</p></li><li><p>3 正在下载(加载)响应报文的响应体，有可能响应体为空，也有可能不完整</p></li><li><p>4 代表最终的完成，整个响应报文已经完整下载，可以直接使用 responseText</p></li></ul></li></ul></li><li><p>HTTP 状态码</p><ul><li><p>表示连接继续</p><ul><li>100 ~ 199</li></ul></li><li><p>表示各种意义上的成功</p><ul><li>200 ~ 299</li></ul></li><li><p>表示重定向</p><ul><li>300 ~ 399</li></ul></li><li><p>表示各种客户端错误</p><ul><li>400 ~ 499</li></ul></li><li><p>表示各种服务端错误</p><ul><li>500 ~ 599</li></ul></li></ul></li></ul><h4 id="同步和异步" tabindex="-1">同步和异步 <a class="header-anchor" href="#同步和异步" aria-label="Permalink to &quot;同步和异步&quot;">​</a></h4><p>同步（sync）</p><ul><li>JS 是单线程语言，对于拿到的程序，一行一行的执行，上面的执行为完成，就等待。</li></ul><p>异步（async）</p><ul><li><p>定时器函数 (就是异步执行的函数)</p><ul><li><p>setTimeout(()=&gt;{})</p></li><li><p>异步代码总是在同步之后执行</p></li></ul></li></ul><h4 id="ajax-基础-封装" tabindex="-1">Ajax 基础+封装 <a class="header-anchor" href="#ajax-基础-封装" aria-label="Permalink to &quot;Ajax 基础+封装&quot;">​</a></h4><h5 id="ajax-数据交互-工作步骤" tabindex="-1">Ajax 数据交互 工作步骤 <a class="header-anchor" href="#ajax-数据交互-工作步骤" aria-label="Permalink to &quot;Ajax 数据交互 工作步骤&quot;">​</a></h5><ul><li><p>1.准备页面请求，创建 XMLHttpRequest 对象</p></li><li><p>2.使用 XMLHttpRequest 对象的 open（）和 send（）方法发送资源请求给服务器</p></li><li><p>3.后台计算</p></li><li><p>4.onreadystatechange 函数，状态改变时发送数据回客户端，使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性获得服务器的响应</p></li></ul><h5 id="代码请求" tabindex="-1">代码请求 <a class="header-anchor" href="#代码请求" aria-label="Permalink to &quot;代码请求&quot;">​</a></h5><h6 id="get-请求" tabindex="-1">get 请求 <a class="header-anchor" href="#get-请求" aria-label="Permalink to &quot;get 请求&quot;">​</a></h6><p>1.创建一个 XMLHttpRequest 实例对象</p><ul><li><p>var xhr = new XMLHttpRequest()</p><p>2.调用 open 方法打开连接</p></li><li><p>xhr.open(method,&#39;url&#39;,true)</p></li><li><p>open 方法有三个参数</p><ul><li><p>method</p><ul><li><p>请求的方法</p><ul><li><p>&quot;GET&quot;</p></li><li><p>&quot;POST&quot;</p></li></ul></li></ul></li><li><p>url</p><ul><li>请求的 url 地址</li></ul></li><li><p>true 参数异步布尔值</p><ul><li>是否异步</li></ul></li></ul><p>3.发送请求(回车键或者点击访问发送请求)</p></li><li><p>xhr.send()</p><p>4.监听状态的改变</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 判断状态值 ， 0 -4 五种状态，4代表最终的完成</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 判断状态码</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      var</span><span style="color:#E06C75;"> resp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">      document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span></span>
<span class="line"><span style="color:#98C379;">        编号: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">        标题: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><p>xhr.onreadystatechange =function(){}</p><ul><li><p>等价于监听事件</p><ul><li><p>xhr.addEventListener(&#39;onreadystatechange&#39;,function(){})</p></li><li><p>xhr.onload = function () {}</p><ul><li><p>onload 是 HTML5 中提供的 XMLHttpRequest v2.0 定义的</p></li><li><p>有兼容性问题，低版本 IE 不兼容</p></li><li><p>不需要判断 Ajax 的 readyState0-4 状态值</p></li><li><p>只被调用一次，执行效率较高</p></li></ul></li></ul></li><li><p>AJAX API 采用事件的机制（通知的感觉）</p></li><li><p>这个事件在响应时和 xhr 状态改变就触发</p></li><li><p>被调用多次</p></li></ul></li><li><p>this.readyState</p><ul><li><p>Ajax 状态码</p><ul><li><p>0 - 4 五种状态</p><ul><li><p>0 实例对象 代理（xhr）被创建，代表初始化状态，请求对象</p></li><li><p>1 open() 方法已经被调用，建立了连接</p></li><li><p>2 send() 方法已经被调用，已经接收到了响应报文的响应头，但还没有拿到体</p></li><li><p>3 正在下载(加载)响应报文的响应体，有可能响应体为空，也有可能不完整</p></li><li><p>4 代表最终的完成，整个响应报文已经完整下载，可以直接使用 responseText</p></li></ul></li></ul></li><li><p>this 指向 xhr，xhr 是全局变量,this 直接指向 xhr，寻找运行更快</p></li></ul></li><li><p>this.status</p><ul><li><p>HTTP 状态码</p><ul><li><p>表示连接继续</p><ul><li>100 ~ 199</li></ul></li><li><p>表示各种意义上的成功</p><ul><li>200 ~ 299</li></ul></li><li><p>表示重定向</p><ul><li>300 ~ 399</li></ul></li><li><p>表示各种客户端错误</p><ul><li>400 ~ 499</li></ul></li><li><p>表示各种服务端错误</p><ul><li>500 ~ 599</li></ul></li></ul></li></ul></li><li><p>this.statusText</p><ul><li>获取响应状态描述</li></ul></li><li><p>JSON.parse(xhr.responseText)</p><ul><li><p>获取服务端响应的内容体</p><ul><li><p>xhr.responseText</p><ul><li>得到的数据</li></ul></li><li><p>xhr.response</p></li></ul></li><li><p>JSON.parse()</p><ul><li>内置对象 JSON 解析数据</li></ul></li></ul><p>5.当网络中断时无法发送 Ajax 请求的方法</p></li><li><p>xhr.onerror = function(){ alert(&#39;网络中断，无法发送 Ajax 请求&#39;) }</p></li></ul><p>完整代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sendMsg</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 1. 创建一个XMLHttpRequest对象</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 2. 调用open方法打开连接</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // open方法有三个参数：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   1. 请求的method</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   2. 请求的url</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //   3. 是否异步，默认值为true，一般这个参数可以不传</span></span>
<span class="line"><span style="color:#E5C07B;">  xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;get&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;./data.php?id=1&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 3. 发送请求</span></span>
<span class="line"><span style="color:#E5C07B;">  xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 4. 监听状态的改变</span></span>
<span class="line"><span style="color:#E5C07B;">  xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 判断状态值 ， 0 -4 五种状态，4代表最终的完成</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 判断状态码</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 解析JSON</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> resp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 循环遍历数据</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">          var</span><span style="color:#E06C75;"> liElement</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;li&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">          liElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span></span>
<span class="line"><span style="color:#E5C07B;">          liElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">id</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 注册点击事件</span></span>
<span class="line"><span style="color:#E5C07B;">          listElement</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">liElement</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 监听点击事件</span></span>
<span class="line"><span style="color:#E5C07B;">          liElement</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // TODO: 通过AJAX操作获取服务端对应数据的信息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 如何获取当前被点击元素对应的数据的ID</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // console.log(this.id)</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;"> xhr1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">            xhr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;users.php?id=&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">            xhr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">            xhr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">              if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#C678DD;">              var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">              alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h6 id="post-请求" tabindex="-1">post 请求 <a class="header-anchor" href="#post-请求" aria-label="Permalink to &quot;post 请求&quot;">​</a></h6><p>可以设置请求头和传参</p><p>xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;)</p><ul><li>设置请求头</li></ul><p>xhr.send(&#39;name=zhangsan&amp;age=18&#39;)</p><ul><li><p>send()传参</p><ul><li>里面参数可以传请求体，如果为 null 的话就什么都不传</li></ul><p>1.创建一个 XMLHttpRequest 实例对象</p></li><li><p>var xhr = new XMLHttpRequest()</p><p>2.调用 open 方法打开连接</p></li><li><p>xhr.open(method,&#39;url&#39;,true)</p></li><li><p>open 方法有三个参数</p><ul><li><p>method</p><ul><li><p>请求的方法</p><ul><li><p>&quot;GET&quot;</p></li><li><p>&quot;POST&quot;</p></li></ul></li></ul></li><li><p>url</p><ul><li>请求的 url 地址</li></ul></li><li><p>true 参数 为 是否 async 异步 ，默认为 true</p><ul><li><p>同步模式 ajax 操作会有楞等的情况</p></li><li><p>在于 send 方法会不会出现等待情况</p></li></ul></li></ul><p>3.设置请求头(请求参数格式的类型)</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 设置请求头的</span></span>
<span class="line"><span style="color:#E06C75;">content</span><span style="color:#56B6C2;">-</span><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> xhr</span><span style="color:#ABB2BF;">.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>格式</p><ul><li><p>application/x-www-form-urlencoded</p><ul><li>urlencoded 数据格式</li></ul></li><li><p>application/json</p><ul><li>json 数据格式</li></ul></li></ul></li></ul></li><li><p>post 请求必须设置</p><p>4.发送请求(回车键或者点击访问发送请求)</p></li><li><p>xhr.send()</p><ul><li><p>里面参数可以传请求体，如果为 null 的话就什么都不传</p></li><li><p>获取全部响应头</p><ul><li><p>this.getAllResponseHeaders()</p><ul><li><p>date</p></li><li><p>server</p></li><li><p>connection</p></li><li><p>....</p></li></ul></li></ul></li><li><p>设置请求头</p><ul><li>xhr.setRequestHeader(&#39;Content-Type&#39;, &#39;application/x-www-form-urlencoded&#39;) <ul><li>请求头名,值</li></ul></li></ul></li><li><p>以 urlencoded 格式 设置请求体参数</p><ul><li>xhr.send(&#39;key1=value1&amp;key2=value2&#39;)</li></ul></li></ul><p>5.监听状态的改变</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 判断状态值 ， 0 -4 五种状态，4代表最终的完成</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 判断状态码</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      var</span><span style="color:#E06C75;"> resp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">      document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span></span>
<span class="line"><span style="color:#98C379;">        编号: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">        标题: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><p>xhr.onreadystatechange =function(){}</p><ul><li><p>等价于监听事件</p><ul><li><p>xhr.addEventListener(&#39;onreadystatechange&#39;,function(){})</p></li><li><p>xhr.onload = function () {}</p><ul><li><p>onload 是 HTML5 中提供的 XMLHttpRequest v2.0 定义的</p></li><li><p>有兼容性问题，低版本 IE 不兼容</p></li><li><p>不需要判断 Ajax 的 readyState0-4 状态值</p></li><li><p>只被调用一次，执行效率较高</p></li></ul></li></ul></li><li><p>AJAX API 采用事件的机制（通知的感觉）</p></li><li><p>这个事件在响应时和 xhr 状态改变就触发</p></li><li><p>被调用多次</p></li></ul></li><li><p>this.readyState</p><ul><li><p>Ajax 状态码</p><ul><li><p>0 - 4 五种状态</p><ul><li><p>0 实例对象 代理（xhr）被创建，代表初始化状态，请求对象</p></li><li><p>1 open() 方法已经被调用，建立了连接</p></li><li><p>2 send() 方法已经被调用，已经接收到了响应报文的响应头，但还没有拿到体</p></li><li><p>3 正在下载(加载)响应报文的响应体，有可能响应体为空，也有可能不完整</p></li><li><p>4 代表最终的完成，整个响应报文已经完整下载，可以直接使用 responseText</p></li></ul></li></ul></li><li><p>this 指向 xhr，xhr 是全局变量,this 直接指向 xhr，寻找运行更快</p></li></ul></li><li><p>this.status</p><ul><li><p>HTTP 状态码</p><ul><li><p>表示连接继续</p><ul><li>100 ~ 199</li></ul></li><li><p>表示各种意义上的成功</p><ul><li>200 ~ 299</li></ul></li><li><p>表示重定向</p><ul><li>300 ~ 399</li></ul></li><li><p>表示各种客户端错误</p><ul><li>400 ~ 499</li></ul></li><li><p>表示各种服务端错误</p><ul><li>500 ~ 599</li></ul></li></ul></li></ul></li><li><p>this.statusText</p><ul><li>获取响应状态描述</li></ul></li><li><p>this.getResponseHeader(&#39;Content‐Type&#39;)</p><ul><li>获取响应头数据格式</li></ul></li><li><p>this.getAllResponseHeader()</p><ul><li>全部响应头</li></ul></li><li><p>this.response</p><ul><li><p>获取服务端响应的内容体</p><ul><li>与 this.responseText 获取到的是一样的数据</li></ul></li><li><p>得到的结果会根据 this.responseType 的变化而变化</p><ul><li><p>当设置 this.responseType = &quot;json&quot; 的值时</p><ul><li><p>this.responseText 这个属性就会没有了</p></li><li><p>兼容性 IE10+</p></li></ul></li></ul></li></ul></li><li><p>this.responseText</p><ul><li><p>获取服务端响应的内容体</p><ul><li>与 this.response 获取到的是一样的数据</li></ul></li><li><p>永远获取的是字符串格式的响应体</p></li></ul></li><li><p>JSON.parse(xhr.responseText)</p><ul><li>JSON.parse() <ul><li>JSON 解析 xhr.responseText 得到的数据</li></ul></li></ul><p>6.当网络中断时无法发送 Ajax 请求的方法</p></li><li><p>xhr.onerror = function(){ alert(&#39;网络中断，无法发送 Ajax 请求&#39;) }</p></li></ul><p>完整代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sendMsg</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里method传post</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;post&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;./data.php&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置请求头的content-type</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setRequestHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;application/x-www-form-urlencoded&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name=zhangsan&amp;age=18&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> resp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span></span>
<span class="line"><span style="color:#98C379;">            姓名：</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">            年龄：</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">            余额：</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">money</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">            \`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h6 id="get-和-post-的不同" tabindex="-1">get 和 post 的不同 <a class="header-anchor" href="#get-和-post-的不同" aria-label="Permalink to &quot;get 和 post 的不同&quot;">​</a></h6><p>post 请求要设置请求头(请求参数格式的类型)</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 设置请求头的content-type</span></span>
<span class="line"><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setRequestHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;application/x-www-form-urlencoded&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p>格式</p><ul><li><p>application/x-www-form-urlencoded</p><ul><li>urlencoded 数据格式</li></ul></li><li><p>application/json</p><ul><li>json 数据格式</li></ul></li></ul></li></ul></li><li><p>post 请求必须设置</p></li></ul><p>get 请求不能提交 json 对象数据格式。 传统网站的表单提交也不支持 json 对象数据格式</p><h5 id="封装-ajax" tabindex="-1">封装 ajax <a class="header-anchor" href="#封装-ajax" aria-label="Permalink to &quot;封装 ajax&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> util</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">query</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">isJson</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			url</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> &quot;?&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> query</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				url</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">=</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&amp;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 取出最后多余的 &amp;</span></span>
<span class="line"><span style="color:#E06C75;">			url</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> url</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					var</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> isJson</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">					callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	post</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">query</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">isJson</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果有参数，把参数拼接起来</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> query</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				str</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">=</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&amp;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 取出最后多余的 &amp;</span></span>
<span class="line"><span style="color:#E06C75;">			str</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;post&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setRequestHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;application/x-www-form-urlencoded&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					var</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> isJson</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">					callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 传对象参数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// params: object ： { method, url, query, callback, isJson }</span></span>
<span class="line"><span style="color:#61AFEF;">	ajax</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">params</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;get&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> &quot;?&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">=</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&amp;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#E5C07B;">				params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> params</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">url</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// post</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					str</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">=</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&amp;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#E06C75;">				str</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;post&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setRequestHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;application/x-www-form-urlencoded&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					var</span><span style="color:#E06C75;"> resp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isJson</span></span>
<span class="line"><span style="color:#C678DD;">						?</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">						:</span><span style="color:#E5C07B;"> xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">					params</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br></div></div><h5 id="调用封装的-ajax" tabindex="-1">调用封装的 ajax <a class="header-anchor" href="#调用封装的-ajax" aria-label="Permalink to &quot;调用封装的 ajax&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sendMsg</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	util</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;./data.php&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#D19A66;">		true</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	util</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;./data2.php&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#D19A66;">		true</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	util</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;post&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./data.php&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		query</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		callback</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		isJson</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h5 id="ajax-接口调用数据实战" tabindex="-1">Ajax 接口调用数据实战 <a class="header-anchor" href="#ajax-接口调用数据实战" aria-label="Permalink to &quot;Ajax 接口调用数据实战&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 列表接口：https://api.apiopen.top/getJoke</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 详情接口：https://api.apiopen.top/getSingleJoke?sid=段子id</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 页面以开始就查询段子列表</span></span>
<span class="line"><span style="color:#E5C07B;">util</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;https://api.apiopen.top/getJoke&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">	null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 拼接li字符串显示在ul里</span></span>
<span class="line"><span style="color:#E5C07B;">		resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			html</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> \`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    \${</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">    查看作者</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#wrap&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> html</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#D19A66;">	true</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 事件委托给button添加事件</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#wrap&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tagName</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;BUTTON&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 从按钮的自定义属性上取到sid</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> sid</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;data-id&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		util</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;https://api.apiopen.top/getSingleJoke&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#E06C75;">				sid</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">sid</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 找到父级li，插入作者信息</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				target</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parentNode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#D19A66;">			true</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h5 id="模板引擎的使用" tabindex="-1">模板引擎的使用 <a class="header-anchor" href="#模板引擎的使用" aria-label="Permalink to &quot;模板引擎的使用&quot;">​</a></h5><ul><li><p>模板引擎实际上就是一个 API，模板引擎有很多种，使用方式大同小异，目的为了可以更容易的将数据渲染到 HTML 中</p></li><li><p>artTemplate</p><ul><li><a href="https://aui.github.io/art-template/" target="_blank" rel="noreferrer">https://aui.github.io/art-template/</a></li></ul></li></ul><h6 id="使用步骤" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤" aria-label="Permalink to &quot;使用步骤&quot;">​</a></h6><ul><li><ol><li>选择一个模板引擎</li></ol></li><li><ol start="2"><li>下载模板引擎 JS 文件</li></ol></li><li><ol start="3"><li>引入到页面中</li></ol></li><li><ol start="4"><li>准备一个模板</li></ol></li><li><ol start="5"><li>准备一个数据</li></ol></li><li><ol start="6"><li>通过模板引擎的 JS 提供的一个函数将模板和数据整合得到渲染结果 HTML</li></ol></li><li><ol start="7"><li>将渲染结果的 HTML 设置到 默认元素</li></ol></li></ul><p>代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">  &lt;!--</span></span>
<span class="line"><span style="color:#E06C75;">    script</span><span style="color:#E06C75;"> 标签的特点是</span></span>
<span class="line"><span style="color:#D19A66;">    1.</span><span style="color:#E06C75;"> innerhtml</span><span style="color:#E06C75;"> 永远不会显示在界面上</span></span>
<span class="line"><span style="color:#D19A66;">    2.</span><span style="color:#E06C75;"> 如果</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> 不等于</span><span style="color:#ABB2BF;"> text/javascript 的话，内部的内容不会作为 javascript 执行</span></span>
<span class="line"><span style="color:#ABB2BF;">  --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    {{each comments}}</span></span>
<span class="line"><span style="color:#56B6C2;">    &lt;!--</span><span style="color:#E06C75;"> each</span><span style="color:#E06C75;"> 内部</span><span style="color:#E06C75;"> $value</span><span style="color:#E06C75;"> 拿到的是当前被遍历的那个元素</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">tr</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">td</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{$value.</span><span style="color:#E06C75;">author</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">td</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">td</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{$value.</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">td</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">td</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{$value.</span><span style="color:#E06C75;">created</span><span style="color:#ABB2BF;">}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">td</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">tr</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    {{</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">each</span><span style="color:#ABB2BF;">}}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">    xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;test.php&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">    xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#C678DD;">      var</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 模板所需数据</span></span>
<span class="line"><span style="color:#C678DD;">      var</span><span style="color:#E06C75;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">comments</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 借助模板引擎的API 渲染数据</span></span>
<span class="line"><span style="color:#C678DD;">      var</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> template</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;tmpl&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 字符串添加到标签里</span></span>
<span class="line"><span style="color:#E5C07B;">     document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;demo&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> html</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 1. 选择一个模板引擎</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //  https://github.com/tj/consolidate.js#supported-template-engines</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 2. 下载模板引擎JS文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 3. 引入到页面中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 4. 准备一个模板</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 5. 准备一个数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 6. 通过模板引擎的JS提供的一个函数将模板和数据整合得到渲染结果HTML</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 7. 将渲染结果的HTML 设置到 默认元素的 innerHTML 中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // var tmpl = &#39;{{if user}}{{user.name}}{{/if}}&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 为什么不在JS变量中写模板？</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 1. 如果将模板写到JS中，维护不方便，不能换行，没有着色</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 为什么使用script标记</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 1. script不会显示在界面</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h5 id="formdata-对象-表单提交" tabindex="-1">FormData 对象 表单提交 <a class="header-anchor" href="#formdata-对象-表单提交" aria-label="Permalink to &quot;FormData 对象 表单提交&quot;">​</a></h5><p>作用</p><ul><li><p>ajax 请求需要传递参数而参数又比较多的时候使用：参数值的获取和参数格式的拼接</p></li><li><p>1.模拟 HTML 表单，相当于将 HTML 表单映射成表单对象，自动 将表单对象中的数据拼接成请求参数的格式</p></li><li><p>2.异步上传二进制文件：图片文件、视频文件等等</p></li></ul><p>使用</p><ul><li><p>1.准备 HTML 表单</p><ul><li>​</li></ul></li><li><p>2.将 HTML 表单转化为 formData 对象</p><ul><li>var form= document.getElementById(&#39;from&#39;); var formData = new FormData(form);</li></ul></li><li><p>3.提交表单对象</p><ul><li><p>xhr.send(formData);</p></li><li><p>xhr.open(&#39;post&#39;,&#39;url&#39;);</p><ul><li>请求方法一定要为 post</li></ul></li></ul></li></ul><p>实例方法</p><ul><li><p>1.get 获取表单对象中指定属性的值</p><ul><li>formData.get(&#39;key&#39;);</li></ul></li><li><p>2.set 设置(改变)表单对象中指定属性的值</p><ul><li><p>formData.set(&#39;key&#39;,&#39;value&#39;);</p></li><li><p>如果设置的表单属性不存在，将会创建这个表单属性并赋值；如果设置的表单属性存在，将会覆盖原有的值</p></li></ul></li><li><p>3.delete 删除表单对象中属性的值</p><ul><li>formData.delete(&#39;key&#39;);</li></ul></li><li><p>4.append 向表单对象中追加属性值</p><ul><li>formData.append(&#39;key&#39;,&#39;value&#39;);</li></ul></li><li><p>set 方法和 append 方法的区别</p><ul><li>在属性名已存在的情况下，set 会覆盖已有键名的值，append 会保留两个值</li></ul></li></ul><p>查看其它方法</p><ul><li><p>var formdata = new FormData(); console.log(formdata);</p></li><li><p>1.二进制文件的上传+进度条+图片即时预览</p><ul><li><p>1.标签</p><ul><li></li><li></li><li><p>0%</p></li></ul></li><li><p>2.代码</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;file&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> imgBox</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;imgBox&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> progressBar</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;progressBar&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onchange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建空表单对象</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> formData</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FormData</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将用户选择的二进制文件追加到表单对象中</span></span>
<span class="line"><span style="color:#E5C07B;">	formData</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;attrName&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">files</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 配置ajax对象，请求方式必须是post</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;post&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;url&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">formData</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onload</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 动态创建img表单</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> img</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;img&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 给图片设置src属性</span></span>
<span class="line"><span style="color:#E5C07B;">			img</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 请求到的属性地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当图片加载完成后</span></span>
<span class="line"><span style="color:#E5C07B;">			img</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onload</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// img图片添加到imgBox的div盒子里</span></span>
<span class="line"><span style="color:#E5C07B;">				imgBox</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">img</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 文件上传进度展示</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">upload</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onprogress</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当前上传文件大小/文件总大小 再将结果转换文百分数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将结果赋值给进度条的宽度属性</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">loaded</span><span style="color:#56B6C2;"> /</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">total</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 100</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;%&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将百分比设置结果</span></span>
<span class="line"><span style="color:#E5C07B;">		progressBar</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">width</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将百分比写在在进度条标签显示中</span></span>
<span class="line"><span style="color:#E5C07B;">		progressBar</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 文件上传图片即时预览</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><ul><li><p>this.files[0]</p><ul><li>file 的属性</li></ul></li><li><p>xhr.upload.onprogress</p><ul><li>文件上传触发 onprogress 过程事件</li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="promise" tabindex="-1">promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;promise&quot;">​</a></h4><p>ES6 新增的对象</p><ul><li>只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li></ul><p>三种状态</p><ul><li><p>Pending 进行中</p></li><li><p>Resolved(Fulfilled) 已完成</p></li><li><p>Rejected 已失败</p></li></ul><p>作用</p><ul><li>把异步代码写成同步形式</li></ul><p>封装+调用例子：</p><p>Promise 的封装</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 基于promise的get请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// return new Promise</span></span>
<span class="line"><span style="color:#E06C75;"> fetch</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">query</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">isJson</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      url</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> &#39;?&#39;</span></span>
<span class="line"><span style="color:#C678DD;">      for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> query</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        url</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">=</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&amp;\`</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#E06C75;">      url</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> url</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      var</span><span style="color:#E06C75;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">      xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;get&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">      xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">      xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;"> resp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> isJson</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span></span>
<span class="line"><span style="color:#61AFEF;">            resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">          } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            reject</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ul><li><p>封装解析</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">     return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">          ……</span></span>
<span class="line"><span style="color:#ABB2BF;">     })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在then里处理成功</span></span>
<span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">     ……</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><p>new Promise()</p><ul><li>实例</li></ul></li><li><p>then 里处理</p></li></ul></li></ul></li><li><p>调用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 发送请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sendMsg</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 把异步代码写成同步形式，不用传回调函数了，而是在then里处理成功</span></span>
<span class="line"><span style="color:#E06C75;">	util</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;./data.php&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#E06C75;">				id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#D19A66;">			true</span></span>
<span class="line"><span style="color:#ABB2BF;">		)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ul><h4 id="fetch" tabindex="-1">fetch <a class="header-anchor" href="#fetch" aria-label="Permalink to &quot;fetch&quot;">​</a></h4><p>​ ES6 获取资源接口的原生方法</p><ul><li><p>此 XMLHttpRequest 更好用，但是兼容性一般</p></li><li><p>使用方法会返回一个 promise，避免了回调，不会因为状态吗错误而 reject</p></li></ul><h5 id="方法详解" tabindex="-1">方法详解 <a class="header-anchor" href="#方法详解" aria-label="Permalink to &quot;方法详解&quot;">​</a></h5><h6 id="get" tabindex="-1">GET <a class="header-anchor" href="#get" aria-label="Permalink to &quot;GET&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://example.com/movies.json&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">myJson</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">muJson</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h6 id="post" tabindex="-1">POST <a class="header-anchor" href="#post" aria-label="Permalink to &quot;POST&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;aaa&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	body</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">	method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;POST&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">myJson</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">muJson</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 列表接口：https://api.apiopen.top/getJoke</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 详情接口：https://api.apiopen.top/getSingleJoke?sid=段子id</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 页面以开始就查询段子列表</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// fetch方法，在then里来写成功之后的逻辑</span></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;https://api.apiopen.top/getJoke&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> resp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 拼接li字符串显示在ul里</span></span>
<span class="line"><span style="color:#E5C07B;">		resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			html</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> \`</span></span>
<span class="line"><span style="color:#98C379;">            </span></span>
<span class="line"><span style="color:#C678DD;">              \${</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">              查看作者</span></span>
<span class="line"><span style="color:#98C379;">            </span></span>
<span class="line"><span style="color:#98C379;">          \`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#wrap&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> html</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 事件委托给button添加事件</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#wrap&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tagName</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;BUTTON&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 从按钮的自定义属性上取到sid</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> sid</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;data-id&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`https://api.apiopen.top/getSingleJoke?sid=</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">sid</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> resp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			})</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 找到父级li，插入作者信息</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				target</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parentNode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;aaa&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	body</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">	method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;POST&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">myJson</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">muJson</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h4 id="jquery-ajax-代码实战" tabindex="-1">jQuery Ajax 代码实战 <a class="header-anchor" href="#jquery-ajax-代码实战" aria-label="Permalink to &quot;jQuery Ajax 代码实战&quot;">​</a></h4><p>方法参考</p><ul><li><p><a href="http://www.jquery123.com/category/ajax/" target="_blank" rel="noreferrer">http://www.jquery123.com/category/ajax/</a></p></li><li><p><a href="http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp" target="_blank" rel="noreferrer">http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp</a></p></li></ul><h5 id="ajax-1" tabindex="-1">$.ajax <a class="header-anchor" href="#ajax-1" aria-label="Permalink to &quot;$.ajax&quot;">​</a></h5><p>参数详解</p><ul><li><p>url：请求地址</p></li><li><p>type：请求方法，默认为 get</p></li><li><p>dataType: 服务端响应数据类型</p><ul><li><p>get</p></li><li><p>post</p></li><li><p>jsonp</p></li></ul></li><li><p>contentType：请求体内容类型，默认 application/x-www-form-urlencoded</p></li><li><p>data：需要传递到服务端的数据，如果 GET 则通过 URL 传递，如果 POST 则通过请求体传递</p><ul><li><p>GET</p></li><li><p>POST</p></li></ul></li><li><p>timeout：请求超时时间</p></li><li><p>beforeSend：请求发起之前触发</p></li><li><p>success：请求成功之后触发（响应状态码 200）</p></li><li><p>error：请求失败触发</p></li><li><p>complete：请求完成触发（不管成功与否）</p></li></ul><p>表单内容传参数</p><ul><li><p>1.serialize()方法</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#from&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;submit&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> params</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> $</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#form&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">serialize</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>return false; <ul><li>阻止表单默认提交的行为</li></ul></li></ul></li><li><p>将表单中的数据自动拼接成字符串类型的参数</p></li></ul></li><li><p>2.函数方法： 将表单中用户输入的内容转换成对象类型</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> serializeObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 处理结果对象</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 表单中用户输入的内容</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> params</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">serializeArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(params);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 循环数组，将数组转换为对象类型</span></span>
<span class="line"><span style="color:#E5C07B;">	$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">each</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		result</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将处理的结果返回到函数</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul></li><li><p>代码例子</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// var params = {name:&#39;zs&#39;,age:20};</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">      url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;time.php&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">// 可以省略域名，浏览器自动填写</span></span>
<span class="line"><span style="color:#E06C75;">      type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;get&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 向服务器发送的请求参数</span></span>
<span class="line"><span style="color:#ABB2BF;">      data：{</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;zs&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // data：&#39;name=zs&amp;age=20&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // data：JSON.stringify(params) ,// 定义的参数先转换再传值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 在所有发送请求的操作（open, send）之前执行</span></span>
<span class="line"><span style="color:#61AFEF;">      beforeSend</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">xhr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;beforeSend&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 请求成功调用</span></span>
<span class="line"><span style="color:#61AFEF;">      success</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 隐藏 loading</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 只有请求成功（状态码为200）才会执行这个函数</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 请求失败调用</span></span>
<span class="line"><span style="color:#61AFEF;">      error</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">xhr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 隐藏 loading</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 只有请求不正常（状态码不为200）才会执行</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;error&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      },</span></span>
<span class="line"><span style="color:#61AFEF;">      complete</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">xhr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 不管是成功还是失败都是完成，都会执行这个 complete 函数</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;complete&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">xhr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 指定参数的格式类型</span></span>
<span class="line"><span style="color:#E06C75;">      contentType</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;application/x-www-form-urlencoded&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div></li></ul></li><li><p>$.ajax 方法发送 jsonp 请求</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	dataType</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jsonp&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 传递函数名字callback的参数名称</span></span>
<span class="line"><span style="color:#E06C75;">	jsonp</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cb&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 指定函数名称</span></span>
<span class="line"><span style="color:#E06C75;">	jsonCallback</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;fnName&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 成功后</span></span>
<span class="line"><span style="color:#61AFEF;">	success</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) {},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="get-1" tabindex="-1">$.get <a class="header-anchor" href="#get-1" aria-label="Permalink to &quot;$.get&quot;">​</a></h5><ul><li>$.get(&#39;json.php&#39;, { id: 1 }, function (res) { console.log(res) })</li></ul><h5 id="post-1" tabindex="-1">$.post <a class="header-anchor" href="#post-1" aria-label="Permalink to &quot;$.post&quot;">​</a></h5><ul><li>$.post(&#39;json.php&#39;, { id: 1 }, function (res) { console.log(res) })</li></ul><h5 id="getjson" tabindex="-1">$.getJSON <a class="header-anchor" href="#getjson" aria-label="Permalink to &quot;$.getJSON&quot;">​</a></h5><ul><li>$.getJSON(&#39;json.php&#39;, { id: 1 }, function (res) { console.log(res) })</li></ul><h5 id="todo-list-案例" tabindex="-1">Todo LIst 案例 <a class="header-anchor" href="#todo-list-案例" aria-label="Permalink to &quot;Todo LIst 案例&quot;">​</a></h5><h5 id="jquery-中的-ajax-全局事件处理" tabindex="-1">JQuery 中的 Ajax 全局事件处理 <a class="header-anchor" href="#jquery-中的-ajax-全局事件处理" aria-label="Permalink to &quot;JQuery 中的 Ajax 全局事件处理&quot;">​</a></h5><ul><li><p><a href="http://www.jquery123.com/category/ajax/global-ajax-event-handlers/" target="_blank" rel="noreferrer">http://www.jquery123.com/category/ajax/global-ajax-event-handlers/</a></p></li><li><p>全局事件</p><ul><li><p>$(document).on(&#39;ajaxStart&#39;,function(){})</p><ul><li>当请求开始发送时触发</li></ul></li><li><p>$(document).on(&#39;ajaxComplete&#39;,function(){})</p><ul><li>当请求完成时触发</li></ul></li></ul></li><li><p>使用例子</p><ul><li>进度条加载</li></ul></li></ul><h4 id="浏览器同源策略-跨域" tabindex="-1">浏览器同源策略 跨域 <a class="header-anchor" href="#浏览器同源策略-跨域" aria-label="Permalink to &quot;浏览器同源策略 跨域&quot;">​</a></h4><h5 id="概念-1" tabindex="-1">概念 <a class="header-anchor" href="#概念-1" aria-label="Permalink to &quot;概念&quot;">​</a></h5><ul><li><p>必须协议、域名、端口号三者完全一致才叫同源，只有同源的地址才可以相互通过 AJAX 的方式请求。</p></li><li><p>浏览器安全策略，非同源数据不能直接互相访问</p></li></ul><h5 id="跨域方法" tabindex="-1">跨域方法 <a class="header-anchor" href="#跨域方法" aria-label="Permalink to &quot;跨域方法&quot;">​</a></h5><h6 id="corss-跨域资源共享-客户端设置" tabindex="-1">CORSS 跨域资源共享 (客户端设置) <a class="header-anchor" href="#corss-跨域资源共享-客户端设置" aria-label="Permalink to &quot;CORSS 跨域资源共享 (客户端设置)&quot;">​</a></h6><ul><li><p>客户端-后端设置响应头，允许跨域</p></li><li><p>允许访问的网址</p><ul><li>.header(&#39;Access-Control-Allow-Origin&#39;,‘*’); <ul><li>*指所有网址，可以改成指定的网址</li></ul></li></ul></li><li><p>允许使用访问的方法</p><ul><li>.header(&#39;Access-Control-Allow-Methods&#39;,&#39;get,post&#39;); <ul><li>get,post 指两种方法都可以，也可以单指定 post 或者 get 方法</li></ul></li></ul></li></ul><h6 id="jsonp-跨域-绕过跨域同源-调用第三方网站的接口" tabindex="-1">JSONP 跨域(绕过跨域同源) (调用第三方网站的接口) <a class="header-anchor" href="#jsonp-跨域-绕过跨域同源-调用第三方网站的接口" aria-label="Permalink to &quot;JSONP 跨域(绕过跨域同源) (调用第三方网站的接口)&quot;">​</a></h6><ul><li><p>借助于 script 标签发送跨域请求的技巧</p><ul><li>标签传的值都是 GET 方式</li></ul></li><li><p>原理</p><ul><li><p>通过 script 标签请求一个服务端的 PHP 文件</p></li><li><p>这个文件返回的结果是一段 JS，作用是调用我们事先定义好的一个函数</p></li><li><p>从而将服务端想要给客户端发过去的数据发送给客户端</p></li></ul></li><li><p>代码例子</p><ul><li><p>PHP 服务端</p><ul><li><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 在 JSON 格式的字符串外面包裹了一个函数的调用，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回的结果就变成了一段 JS 代码 echo &quot;fn({$json})&quot;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li><li><p>封装 jsonp 函数</p><ul><li><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> jsonp</span><span style="color:#ABB2BF;">(options){</span></span>
<span class="line"><span style="color:#E5C07B;">  var</span><span style="color:#ABB2BF;"> script </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;script&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 拼接字符串的变量</span></span>
<span class="line"><span style="color:#E5C07B;">  var</span><span style="color:#ABB2BF;"> parmas </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">var</span><span style="color:#ABB2BF;"> attr in options</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">data){</span></span>
<span class="line"><span style="color:#ABB2BF;">    parmas </span><span style="color:#56B6C2;">+=</span><span style="color:#98C379;"> &#39;&amp;&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> attr </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;=&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">data[attr];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 定义参数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 定义随机函数名，防止多个请求会被覆盖替换</span></span>
<span class="line"><span style="color:#E5C07B;">  var</span><span style="color:#ABB2BF;"> random</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">  var</span><span style="color:#ABB2BF;"> fnName </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;myJsonp&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> random;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //options.success函数用window.[变量]变为全局作用域下函数</span></span>
<span class="line"><span style="color:#ABB2BF;">  window[fnName ]</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">success;</span></span>
<span class="line"><span style="color:#ABB2BF;">  script</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">src </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">url </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;?callback=fnName&#39;</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//拼接参数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 开始发起请求</span></span>
<span class="line"><span style="color:#ABB2BF;">  document</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(script);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 为script标签添加onload加载事件</span></span>
<span class="line"><span style="color:#ABB2BF;">  script</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">onload </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 移除script标签</span></span>
<span class="line"><span style="color:#ABB2BF;">    document</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeChild</span><span style="color:#ABB2BF;">(script);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li></ul></li><li><p>客户端实时调用发送</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">btn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">	jsonp</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		success</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 请求成功后返回的</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 相当于请求的回调</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li></ul></li><li><p>腾讯天气 接口调用案例</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li></li></ul></li></ul><h5 id="两种方法调用" tabindex="-1">两种方法调用 <a class="header-anchor" href="#两种方法调用" aria-label="Permalink to &quot;两种方法调用&quot;">​</a></h5><h6 id="服务端" tabindex="-1">服务端 <a class="header-anchor" href="#服务端" aria-label="Permalink to &quot;服务端&quot;">​</a></h6><p>PHP 服务端</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 如果客户端采用的是 script 标记对我发送的请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 一定要返回一段 JavaScript</span></span>
<span class="line"><span style="color:#56B6C2;">header</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Content-Type: application/javascript&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">$result</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> json_encode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">$callback_name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> $_GET</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;callback&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;typeof {</span><span style="color:#E06C75;">$callback_name</span><span style="color:#98C379;">} === &#39;function&#39; &amp;&amp; {</span><span style="color:#E06C75;">$callback_name</span><span style="color:#98C379;">}({</span><span style="color:#E06C75;">$result</span><span style="color:#98C379;">})&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h6 id="客户端-jsonp-封装和调用" tabindex="-1">客户端 jsonp 封装和调用 <a class="header-anchor" href="#客户端-jsonp-封装和调用" aria-label="Permalink to &quot;客户端 jsonp 封装和调用&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> jsonp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">params</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> funcName</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;jsonp_&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">substr</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> params</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> tempArr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> params</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> params</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">			tempArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E06C75;">		params</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tempArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&amp;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> script</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;script&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	script</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> url</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;?&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> params</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;&amp;callback=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> funcName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">	window</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">funcName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		delete</span><span style="color:#E06C75;"> window</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">funcName</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>调用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">jsonp</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost/jsonp/server.php&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;"> }, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">jsonp</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost/jsonp/server.php&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;"> }, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="cookie-登录跨域" tabindex="-1">cookie 登录跨域 <a class="header-anchor" href="#cookie-登录跨域" aria-label="Permalink to &quot;cookie 登录跨域&quot;">​</a></h5><ul><li><p>当使用 Ajax 技术发送跨域请求时，默认情况下不会再请求中携带 cookie 信息</p></li><li><p>解决方案 ：xhr.withCredentials：让跨域登录功能携带 cookie 信息，默认值为 flase</p></li><li><p>客户端设置</p><ul><li>.header(&#39;Access-Control-Allow-Credentials&#39;,true) <ul><li>允许客户端发送请求时携带 cookie</li></ul></li></ul></li><li><p>服务端请求时.open()之后设置</p><ul><li>xhr.withCredentials = true;</li></ul></li></ul><h4 id="axios" tabindex="-1">Axios <a class="header-anchor" href="#axios" aria-label="Permalink to &quot;Axios&quot;">​</a></h4><ul><li><p>易用、简洁且高效的 http 库</p></li><li><p>文档</p><ul><li><p><a href="http://www.axios-js.com/" target="_blank" rel="noreferrer">http://www.axios-js.com/</a></p></li><li><p><a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noreferrer">http://www.axios-js.com/zh-cn/docs/</a></p></li></ul></li></ul><h4 id="服务端返回的-json-数据处理" tabindex="-1">服务端返回的 JSON 数据处理 <a class="header-anchor" href="#服务端返回的-json-数据处理" aria-label="Permalink to &quot;服务端返回的 JSON 数据处理&quot;">​</a></h4><h5 id="概念-2" tabindex="-1">概念 <a class="header-anchor" href="#概念-2" aria-label="Permalink to &quot;概念&quot;">​</a></h5><ul><li>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 它基于 ECMAScript 的一个子集。相比于 XML，json 易于人阅读和编写，同时也易于机器解析和生成，目前数据传递基本上都使用 json。</li></ul><h5 id="结构" tabindex="-1">结构 <a class="header-anchor" href="#结构" aria-label="Permalink to &quot;结构&quot;">​</a></h5><ul><li><p>对象</p><ul><li>var data =[&quot;张三&quot;,18,&quot;男&quot;];</li></ul></li><li><p>数组</p><ul><li>var person ={&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18,&quot;sex&quot;:&quot;男&quot;};</li></ul></li><li><p>组合</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> persons</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul></li></ul><h5 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-label="Permalink to &quot;格式&quot;">​</a></h5><ul><li><p>数据在键值对中</p></li><li><p>数据由逗号分隔</p></li><li><p>花括号保存对象</p></li><li><p>方括号保存数组</p></li><li><p>json 字符串转换成 json 对象</p><ul><li><p>JSON.parse()</p></li><li><p>将 json 字符串转换为 json 对象</p><ul><li><code>{&quot;name&quot;:&quot;zs&quot;}</code> 转换成 <code>{name:&quot;zs&quot;}</code> 对象格式</li></ul></li></ul></li></ul><h5 id="json-对象转换成-json-字符串" tabindex="-1">json 对象转换成 json 字符串 <a class="header-anchor" href="#json-对象转换成-json-字符串" aria-label="Permalink to &quot;json 对象转换成 json 字符串&quot;">​</a></h5><ul><li>JSON.stringify()</li></ul><h5 id="将-json-对象转换成-json-字符串" tabindex="-1">将 json 对象转换成 json 字符串 <a class="header-anchor" href="#将-json-对象转换成-json-字符串" aria-label="Permalink to &quot;将 json 对象转换成 json 字符串&quot;">​</a></h5><ul><li><code>{name:&quot;zs&quot;}</code> 转换成 <code>{&quot;name&quot;:&quot;zs&quot;}</code> 对象格式</li></ul><h5 id="请求参数拼接" tabindex="-1">请求参数拼接 <a class="header-anchor" href="#请求参数拼接" aria-label="Permalink to &quot;请求参数拼接&quot;">​</a></h5><ul><li><code>var params = &#39;username=&#39; + nameValue + &#39;&amp;password=&#39; + passwordValue</code></li></ul><h5 id="json-封装-scroll" tabindex="-1">JSON 封装 Scroll <a class="header-anchor" href="#json-封装-scroll" aria-label="Permalink to &quot;JSON 封装 Scroll&quot;">​</a></h5><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 获取滚动的头部距离和左边距离</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * scroll().top scroll().left</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@returns</span><span style="color:#E5C07B;font-style:italic;"> {*}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> scroll</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pageYOffset</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			top</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pageYOffset</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			left</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pageXOffset</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">compatMode</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;CSS1Compat&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// W3C</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			top</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			left</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollLeft</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		top</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		left</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollLeft</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onscroll</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">scroll</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">top</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div></li></ul><h5 id="数组和字符串操作方法" tabindex="-1">数组和字符串操作方法 <a class="header-anchor" href="#数组和字符串操作方法" aria-label="Permalink to &quot;数组和字符串操作方法&quot;">​</a></h5><h6 id="数组操作方法" tabindex="-1">数组操作方法 <a class="header-anchor" href="#数组操作方法" aria-label="Permalink to &quot;数组操作方法&quot;">​</a></h6><ul><li><p>array.concat(value, ...)</p><ul><li>连接数组</li></ul></li><li><p>Array.join( )</p><ul><li>将数组元素连接起来以构建一个字符串</li></ul></li><li><p>Array.length</p><ul><li>数组的长度</li></ul></li><li><p>Array.pop( )</p><ul><li>删除并返回数组的最后一个元素</li></ul></li><li><p>Array.push( )</p><ul><li>给数组添加元素</li></ul></li><li><p>Array.reverse( )</p><ul><li>颠倒数组中元素的顺序</li></ul></li><li><p>Array.shift( )</p><ul><li>将元素移出数组</li></ul></li><li><p>Array.slice( )</p><ul><li>返回数组的一部分</li></ul></li><li><p>Array.sort( )</p><ul><li>对数组元素进行排序</li></ul></li><li><p>Array.splice( )</p><ul><li>插入、删除或替换数组的元素</li></ul></li><li><p>Array.toLocaleString( )</p><ul><li>把数组转换成局部字符串</li></ul></li><li><p>Array.toString( )</p><ul><li>将数组转换成一个字符串</li></ul></li><li><p>Array.unshift( )</p><ul><li>在数组头部插入一个元素</li></ul></li></ul><h6 id="字符串操作方法" tabindex="-1">字符串操作方法 <a class="header-anchor" href="#字符串操作方法" aria-label="Permalink to &quot;字符串操作方法&quot;">​</a></h6><ul><li><p>String.charAt( )</p><ul><li>返回字符串中的第 n 个字符</li></ul></li><li><p>String.charCodeAt( )</p><ul><li>返回字符串中的第 n 个字符的代码</li></ul></li><li><p>String.concat( )</p><ul><li>连接字符串</li></ul></li><li><p>String.fromCharCode( )</p><ul><li>从字符编码创建—个字符串</li></ul></li><li><p>String.indexOf( )</p><ul><li>检索字符串</li></ul></li><li><p>String.lastIndexOf( )</p><ul><li>从后向前检索一个字符串</li></ul></li><li><p>String.length</p><ul><li>字符串的长度</li></ul></li><li><p>String.localeCompare( )</p><ul><li>用本地特定的顺序来比较两个字符串</li></ul></li><li><p>String.match( )</p><ul><li>找到一个或多个正则表达式的匹配</li></ul></li><li><p>String.replace( )</p><ul><li>替换一个与正则表达式匹配的子串</li></ul></li><li><p>String.search( )</p><ul><li>检索与正则表达式相匹配的子串</li></ul></li><li><p>String.slice( )</p><ul><li>抽取一个子串</li></ul></li><li><p>String.split( )</p><ul><li>将字符串分割成字符串数组</li></ul></li><li><p>String.substr( )</p><ul><li>抽取一个子串</li></ul></li><li><p>String.substring( )</p><ul><li>返回字符串的一个子串</li></ul></li><li><p>String.toLocaleLowerCase( )</p><ul><li>把字符串转换小写</li></ul></li><li><p>String.toLocaleUpperCase( )</p><ul><li>将字符串转换成大写</li></ul></li><li><p>String.toLowerCase( )</p><ul><li>将字符串转换成小写</li></ul></li><li><p>String.toString( )</p><ul><li>返回字符串</li></ul></li><li><p>String.toUpperCase( )</p><ul><li>将字符串转换成大写</li></ul></li><li><p>String.valueOf( )</p><ul><li>返回字符串</li></ul></li></ul><h4 id="restful-风格-的-api" tabindex="-1">RESTful 风格 的 API <a class="header-anchor" href="#restful-风格-的-api" aria-label="Permalink to &quot;RESTful 风格 的 API&quot;">​</a></h4><p>设计请求的规范</p><ul><li><p>GET</p><ul><li><p>获取用户列表数据</p><ul><li><a href="http://www.inianan.com/users" target="_blank" rel="noreferrer">http://www.inianan.com/users</a></li></ul></li><li><p>获取用户 ID 为 1 的用户信息</p><ul><li><a href="http://www.inianan.com/users/1" target="_blank" rel="noreferrer">http://www.inianan.com/users/1</a></li></ul></li></ul></li><li><p>POST</p><ul><li>创建(添加)用户数据数据 <ul><li><a href="http://www.inianan.com/users" target="_blank" rel="noreferrer">http://www.inianan.com/users</a></li></ul></li></ul></li><li><p>PUT</p><ul><li>修改(更新)用户 ID 为 1 的用户信息 <ul><li><a href="http://www.inianan.com/users/1" target="_blank" rel="noreferrer">http://www.inianan.com/users/1</a></li></ul></li></ul></li><li><p>DELETE</p><ul><li>删除用户 ID 为 1 的用户信息 <ul><li><a href="http://www.inianan.com/users/1" target="_blank" rel="noreferrer">http://www.inianan.com/users/1</a></li></ul></li></ul></li></ul><h3 id="xml-基础" tabindex="-1">XML 基础 <a class="header-anchor" href="#xml-基础" aria-label="Permalink to &quot;XML 基础&quot;">​</a></h3><ul><li><p>可扩展标记性语言，作用是传输和存储数据(基本被淘汰的语言，只是基础了解)</p><ul><li>兼容性问题</li></ul></li><li><p>XML DOM 文档对象原型 API</p></li></ul><h3 id="真机调试" tabindex="-1">真机调试 <a class="header-anchor" href="#真机调试" aria-label="Permalink to &quot;真机调试&quot;">​</a></h3><ul><li><p>Chrome + Android / Safari + iOS</p></li><li><p>Fiddler / Charles</p></li><li><p>Weinre, Spy-Debugger,vConsole</p></li></ul><h3 id="接口测试" tabindex="-1">接口测试 <a class="header-anchor" href="#接口测试" aria-label="Permalink to &quot;接口测试&quot;">​</a></h3><ul><li><p>Restful API</p><ul><li><p>定义</p><ul><li><p>表现层状态转移</p></li><li><p>REpresentational State Transfer</p><ul><li>应用接口</li></ul></li></ul></li><li><p>特点</p><ul><li><p>客户端 - 服务器</p><ul><li>通过用户界面，让数据与存储分开，通过简化服务器组件来实现跨多平台的应用</li></ul></li><li><p>无状态，可缓存</p><ul><li>C -&gt; S 包含理解请求所需的所有信息</li></ul></li><li><p>统一接口</p></li><li><p>分层系统</p></li><li><p>按需代码(可选)</p></li></ul></li><li><p>常见接口测试工具</p><ul><li><p>客户端</p><ul><li><p>Postman</p></li><li><p>Postwoman</p></li><li><p>DOClever</p></li></ul></li><li><p>抓包 proxy</p><ul><li><p>Charles</p></li><li><p>fiddler</p></li></ul></li><li><p>插件类</p><ul><li><p>DHC</p></li><li><p>Postman</p></li><li><p>REST client</p></li></ul></li></ul></li></ul></li><li><p>Mock 数据</p><ul><li><p>虚拟的数据，虚拟的测试数据</p></li><li><p>作用</p><ul><li><p>效率开发</p></li><li><p>模拟交互与全过程</p></li><li><p>全量数据测试极端情况</p></li></ul></li><li><p>mockjs</p><ul><li><p>Github 下载</p></li><li><p>函数定义测试代码例子</p></li></ul></li><li><p>常用工具</p><ul><li><p>平台类</p><ul><li><p>DOClever</p><ul><li>项目管理平台</li></ul></li><li><p>Yapi</p><ul><li>项目接口管理平台</li></ul></li><li><p>EasyMock</p></li><li><p>RAP2</p></li><li><p>Swagger</p></li></ul></li><li><p>终端类</p><ul><li><p>Postman</p><ul><li>接口测试工具</li></ul></li><li><p>SoapUI</p></li><li><p>DOClever</p></li></ul></li><li><p>插件类</p><ul><li><p>Postman</p></li><li><p>DHC</p></li><li><p>REST client</p></li></ul></li></ul></li><li><p>Mock 数据开发流程</p><ul><li><p>1.前端定义接口</p></li><li><p>2.完成静态页面</p></li><li><p>3.完成 UI 交互</p></li><li><p>4.对接真实接口</p></li><li><p>5.页面/逻辑测试</p></li><li><p>6.线上部署</p></li></ul></li></ul></li><li><p>本地安装 接口测试工具</p><ul><li><p>doclever 下载安装</p></li><li><p>docker-compose 安装配置</p></li></ul></li><li><p>性能测试</p><ul><li><p>工具</p><ul><li><p>JSPerf</p></li><li><p>YSlow</p></li><li><p>PageSpeed</p></li><li><p>接口压测</p><ul><li>AB/Jmeter/tcpcopy/siege/load runner</li></ul></li></ul></li><li><p>优化原则</p></li></ul></li></ul><h3 id="前后端交互模式" tabindex="-1">前后端交互模式 <a class="header-anchor" href="#前后端交互模式" aria-label="Permalink to &quot;前后端交互模式&quot;">​</a></h3><h4 id="传统-url" tabindex="-1">传统 URL <a class="header-anchor" href="#传统-url" aria-label="Permalink to &quot;传统 URL&quot;">​</a></h4><h4 id="restful-形式-url" tabindex="-1">Restful 形式 URL <a class="header-anchor" href="#restful-形式-url" aria-label="Permalink to &quot;Restful 形式 URL&quot;">​</a></h4><h5 id="http-请求方式" tabindex="-1">HTTP 请求方式 <a class="header-anchor" href="#http-请求方式" aria-label="Permalink to &quot;HTTP 请求方式&quot;">​</a></h5><ul><li><p>GET</p><ul><li>查询</li></ul></li><li><p>POST</p><ul><li>添加</li></ul></li><li><p>PUT</p><ul><li>修改</li></ul></li><li><p>DELETE</p><ul><li>删除</li></ul></li></ul><h5 id="符合规制的-url-地址" tabindex="-1">符合规制的 URL 地址 <a class="header-anchor" href="#符合规制的-url-地址" aria-label="Permalink to &quot;符合规制的 URL 地址&quot;">​</a></h5><ul><li><p><a href="http://www.hello.com/books" target="_blank" rel="noreferrer">http://www.hello.com/books</a></p><ul><li>GET</li></ul></li><li><p><a href="http://www.hello.com/books" target="_blank" rel="noreferrer">http://www.hello.com/books</a></p><ul><li>POST</li></ul></li><li><p><a href="http://www.hello.com/books/123" target="_blank" rel="noreferrer">http://www.hello.com/books/123</a></p><ul><li>PUT</li></ul></li><li><p><a href="http://www.hello.com/books/123" target="_blank" rel="noreferrer">http://www.hello.com/books/123</a></p><ul><li>DELETE</li></ul></li></ul><h3 id="promise-用法" tabindex="-1">Promise 用法 <a class="header-anchor" href="#promise-用法" aria-label="Permalink to &quot;Promise 用法&quot;">​</a></h3><h4 id="概念作用" tabindex="-1">概念作用 <a class="header-anchor" href="#概念作用" aria-label="Permalink to &quot;概念作用&quot;">​</a></h4><ul><li><p>主要解决异步深层嵌套的问题</p></li><li><p>promise 提供了简洁的 API 使得异步操作更加容易</p></li></ul><h4 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//2. 这里用于实现异步任务  setTimeout</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> flag</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">flag</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//3. 正常情况</span></span>
<span class="line"><span style="color:#61AFEF;">			resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//4. 异常情况</span></span>
<span class="line"><span style="color:#61AFEF;">			reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;出错了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  5 Promise实例生成以后，可以用then方法指定resolved状态和reject状态的回调函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">info</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li>resolve(&#39;情况正常无内鬼&#39;)</li><li>reject(&#39;出错了&#39;);</li></ul><p>使用 new 来构建一个 Promise Promise 的构造函数接收一个参数，是函数，并且传入两个参数： resolve，reject，分别表示异步操作执行成功后的回调函数 和 异步操作执行失败后的回调函数</p><h4 id="基于-promise-发送-ajax-请求" tabindex="-1">基于 Promise 发送 Ajax 请求 <a class="header-anchor" href="#基于-promise-发送-ajax-请求" aria-label="Permalink to &quot;基于 Promise 发送 Ajax 请求&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> queryData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     //  1.1 创建一个Promise实例</span></span>
<span class="line"><span style="color:#C678DD;">      var</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 4</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            # </span><span style="color:#D19A66;">1.2</span><span style="color:#E06C75;"> 处理正常的情况</span></span>
<span class="line"><span style="color:#61AFEF;">            resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">            # </span><span style="color:#D19A66;">1.3</span><span style="color:#E06C75;"> 处理异常情况</span></span>
<span class="line"><span style="color:#61AFEF;">            reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;服务器错误&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#E5C07B;">        xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;get&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      });</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;"># </span><span style="color:#E06C75;">注意</span><span style="color:#ABB2BF;">：  </span><span style="color:#E06C75;">这里需要开启一个服务</span></span>
<span class="line"><span style="color:#ABB2BF;"># </span><span style="color:#E06C75;">在then方法中</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">你也可以直接return数据而不是Promise对象</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">在后面的then中就可以接收到数据了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="调用" tabindex="-1">调用 <a class="header-anchor" href="#调用" aria-label="Permalink to &quot;调用&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">queryData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/data&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.4 想要继续链式编程下去 需要 return</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> queryData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/data1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> queryData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/data2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="then-参数中的函数返回值" tabindex="-1">then 参数中的函数返回值 <a class="header-anchor" href="#then-参数中的函数返回值" aria-label="Permalink to &quot;then 参数中的函数返回值&quot;">​</a></h4><p>1.返回 Promise 实例对象</p><ul><li><p>返回的该实例对象会调用下一个 then</p><p>2.返回普通值</p></li><li><p>返回的普通值会直接传递给下一个 then，通过 then 参数中函数的参数接收该值</p></li></ul><p>调用实例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">queryData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/data&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> queryData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/data1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">				resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;hello&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="promise-基本-api" tabindex="-1">Promise 基本 API <a class="header-anchor" href="#promise-基本-api" aria-label="Permalink to &quot;Promise 基本 API&quot;">​</a></h4><h5 id="promise-实例-api" tabindex="-1">Promise 实例 API <a class="header-anchor" href="#promise-实例-api" aria-label="Permalink to &quot;Promise 实例 API&quot;">​</a></h5><h6 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h6><ul><li><p>.then()</p><ul><li>- 得到异步任务正确的结果</li></ul></li><li><p>.catch()</p><ul><li>- 获取异常信息</li></ul></li><li><p>.finally()</p><ul><li><p>- 成功与否都会执行（不是正式标准）</p></li><li><p>不是标准，但有浏览器的支持</p></li></ul></li></ul><h6 id="_1-实例封装" tabindex="-1">1.实例封装 <a class="header-anchor" href="#_1-实例封装" aria-label="Permalink to &quot;1.实例封装&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// resolve(123);</span></span>
<span class="line"><span style="color:#61AFEF;">			reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h6 id="_2-实例调用" tabindex="-1">2.实例调用 <a class="header-anchor" href="#_2-实例调用" aria-label="Permalink to &quot;2.实例调用&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">finally</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;finished&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">finally</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;finished&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h5 id="promise-对象-api" tabindex="-1">Promise 对象 API <a class="header-anchor" href="#promise-对象-api" aria-label="Permalink to &quot;Promise 对象 API&quot;">​</a></h5><h5 id="对象方法" tabindex="-1">对象方法 <a class="header-anchor" href="#对象方法" aria-label="Permalink to &quot;对象方法&quot;">​</a></h5><ul><li><p>xxx.all()</p><ul><li>Promise.all<code>方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个promise，该项会被用</code>Promise.resolve\`转换为一个 promise)。它的状态由这三个 promise 实例决定</li></ul></li><li><p>xxx.race()</p><ul><li>Promise.race<code>方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为</code>fulfilled<code>或</code>rejected\`），p 的状态就跟着改变。并把第一个改变状态的 promise 的返回值，传给 p 的回调函数</li></ul></li></ul><h5 id="_1-对象方法封装" tabindex="-1">1.对象方法封装 <a class="header-anchor" href="#_1-对象方法封装" aria-label="Permalink to &quot;1.对象方法封装&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> queryData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 4</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 处理正常的情况</span></span>
<span class="line"><span style="color:#61AFEF;">				resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 处理异常情况</span></span>
<span class="line"><span style="color:#61AFEF;">				reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;服务器错误&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h5 id="_2-对象方法调用" tabindex="-1">2.对象方法调用 <a class="header-anchor" href="#_2-对象方法调用" aria-label="Permalink to &quot;2.对象方法调用&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> queryData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/a1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> queryData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/a2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p3</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> queryData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/a3&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p3</span><span style="color:#ABB2BF;">]).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//   all 中的参数  [p1,p2,p3]   和 返回的结果一 一对应[&quot;HELLO TOM&quot;, &quot;HELLO JERRY&quot;, &quot;HELLO SPIKE&quot;]</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//[&quot;HELLO TOM&quot;, &quot;HELLO JERRY&quot;, &quot;HELLO SPIKE&quot;]</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">race</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p3</span><span style="color:#ABB2BF;">]).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 由于p1执行较快，Promise的then()将获得结果&#39;P1&#39;。p2,p3仍在继续执行，但执行结果将被丢弃。</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &quot;HELLO TOM&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="接口调用-fetch" tabindex="-1">接口调用-fetch <a class="header-anchor" href="#接口调用-fetch" aria-label="Permalink to &quot;接口调用-fetch&quot;">​</a></h3><h4 id="概念-3" tabindex="-1">概念 <a class="header-anchor" href="#概念-3" aria-label="Permalink to &quot;概念&quot;">​</a></h4><ul><li><p>Fetch API 是新的 ajax 解决方案 Fetch 会返回 Promise</p></li><li><p>fetch 不是 ajax 的进一步封装，而是原生 js，没有使用 XMLHttpRequest 对象</p></li></ul><h4 id="fetch-api-基本用法" tabindex="-1">Fetch API 基本用法 <a class="header-anchor" href="#fetch-api-基本用法" aria-label="Permalink to &quot;Fetch API 基本用法&quot;">​</a></h4><p>语法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用.text()返回promise对象</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">ret</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 这里才是最终的数据</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>实例调用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/fdata&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// text()方法属于fetchAPI的一部分，它返回一个Promise实例对象，用于获取后台返回的数据</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//   在这个then里面我们能拿到最终的数据</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="fetch-api-中-的请求参数传递" tabindex="-1">fetch API 中 的请求参数传递 <a class="header-anchor" href="#fetch-api-中-的请求参数传递" aria-label="Permalink to &quot;fetch API 中 的请求参数传递&quot;">​</a></h4><h5 id="方法和作用" tabindex="-1">方法和作用 <a class="header-anchor" href="#方法和作用" aria-label="Permalink to &quot;方法和作用&quot;">​</a></h5><ul><li><p>HTTP 协议，它给我们提供了很多的方法，如 POST，GET，DELETE，UPDATE，PATCH 和 PUT</p></li><li><p>1- 默认的是 GET 请求</p></li><li><p>2- 需要在 options 对象中 指定对应的 method method:请求使用的方法</p></li><li><p>3- post 和 普通 请求的时候 需要在 options 中 设置 请求头 headers 和 body</p></li></ul><h5 id="_1-传统-url-传参" tabindex="-1">1.传统 URL 传参 <a class="header-anchor" href="#_1-传统-url-传参" aria-label="Permalink to &quot;1.传统 URL 传参&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.1 GET参数传递 - 传统URL  通过url  ？ 的形式传参</span></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/books?id=123&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// get 请求可以省略不写 默认的是GET</span></span>
<span class="line"><span style="color:#E06C75;">	method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 它返回一个Promise实例对象，用于获取后台返回的数据</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 在这个then里面我们能拿到最终的数据</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="_2-restful-形式的-url-传参" tabindex="-1">2.restful 形式的 URL 传参 <a class="header-anchor" href="#_2-restful-形式的-url-传参" aria-label="Permalink to &quot;2.restful 形式的 URL 传参&quot;">​</a></h5><p>1.GET 请求</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.2  GET参数传递  restful形式的URL  通过/ 的形式传递参数  即  id = 456 和id后台的配置有关</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/books/456&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// get 请求可以省略不写 默认的是GET</span></span>
<span class="line"><span style="color:#E06C75;">	method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>2.DELETE 请求</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 2.1  DELETE请求方式参数传递      删除id  是  id=789</span></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/books/789&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;delete&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>3.POST 请求</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  3 POST请求传参</span></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://localhost:3000/books&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">    method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;post&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    # </span><span style="color:#D19A66;">3.1</span><span style="color:#E06C75;">  传递数据</span></span>
<span class="line"><span style="color:#E06C75;">    body</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;uname=lisi&amp;pwd=123&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 3.2  设置请求头</span></span>
<span class="line"><span style="color:#E06C75;">    headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">        &#39;Content-Type&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;application/x-www-form-urlencoded&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  POST请求传参</span></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://localhost:3000/books&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">        method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;post&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        body</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">            uname</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;张三&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            pwd</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;456&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }),</span></span>
<span class="line"><span style="color:#E06C75;">        headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">            &#39;Content-Type&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;application/json&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>4.PUT 请求</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  PUT请求传参     修改id 是 123 的</span></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/books/123&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;put&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	body</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		uname</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		pwd</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;789&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#E06C75;">	headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">		&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;application/json&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="fetchapi-中-响应结果格式" tabindex="-1">fetchAPI 中 响应结果格式 <a class="header-anchor" href="#fetchapi-中-响应结果格式" aria-label="Permalink to &quot;fetchAPI 中 响应结果格式&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/json&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// return data.json();</span><span style="color:#7F848E;font-style:italic;">   //  将获取到的数据使用 json 转换对象</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">  //  将获取到的数据 转换成字符串</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(data.uname)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(typeof data)</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">uname</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="接口调用-axios" tabindex="-1">接口调用-Axios <a class="header-anchor" href="#接口调用-axios" aria-label="Permalink to &quot;接口调用-Axios&quot;">​</a></h3><h4 id="概念和作用" tabindex="-1">概念和作用 <a class="header-anchor" href="#概念和作用" aria-label="Permalink to &quot;概念和作用&quot;">​</a></h4><ul><li><p>- 基于 promise 用于浏览器和 node.js 的 http 客户端</p></li><li><p>- 支持浏览器和 node.js</p></li><li><p>- 支持 promise</p></li><li><p>- 能拦截请求和响应</p></li><li><p>- 自动转换 JSON 数据</p></li><li><p>- 能转换请求和响应数据</p></li></ul><h4 id="axios-基础用法" tabindex="-1">axios 基础用法 <a class="header-anchor" href="#axios-基础用法" aria-label="Permalink to &quot;axios 基础用法&quot;">​</a></h4><h5 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h5><h6 id="get-和-delete-请求传递参数" tabindex="-1">get 和 delete 请求传递参数 <a class="header-anchor" href="#get-和-delete-请求传递参数" aria-label="Permalink to &quot;get 和 delete 请求传递参数&quot;">​</a></h6><ul><li><p>通过传统的 url 以 ? 的形式传递参数</p></li><li><p>restful 形式传递参数</p></li><li><p>通过 params 形式传递参数</p></li></ul><h6 id="post-和-put-请求传递参数" tabindex="-1">post 和 put 请求传递参数 <a class="header-anchor" href="#post-和-put-请求传递参数" aria-label="Permalink to &quot;post 和 put 请求传递参数&quot;">​</a></h6><ul><li><p>通过选项传递参数</p></li><li><p>通过 URLSearchParams 传递参数</p></li></ul><h5 id="用法例子" tabindex="-1">用法例子 <a class="header-anchor" href="#用法例子" aria-label="Permalink to &quot;用法例子&quot;">​</a></h5><h6 id="_1-发送-get-请求" tabindex="-1">1.发送 get 请求 <a class="header-anchor" href="#_1-发送-get-请求" aria-label="Permalink to &quot;1.发送 get 请求&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1. 发送get 请求</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/adata&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ret</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 拿到 ret 是一个对象      所有的对象都存在 ret 的data 属性里面</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 注意data属性是固定的用法，用于获取后台的实际数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(ret.data)</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h6 id="_2-get-请求传递参数" tabindex="-1">2.get 请求传递参数 <a class="header-anchor" href="#_2-get-请求传递参数" aria-label="Permalink to &quot;2.get 请求传递参数&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 2.1  通过传统的url  以 ? 的形式传递参数</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/axios?id=123&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ret</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.2  restful 形式传递参数</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/axios/123&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ret</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.3  通过params  形式传递参数</span></span>
<span class="line"><span style="color:#E06C75;">axios</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/axios&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		params</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">789</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ret</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h6 id="_3-axios-delete-请求传参" tabindex="-1">3.axios delete 请求传参 <a class="header-anchor" href="#_3-axios-delete-请求传参" aria-label="Permalink to &quot;3.axios delete 请求传参&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 3 axios delete 请求传参     传参的形式和 get 请求一样</span></span>
<span class="line"><span style="color:#E06C75;">axios</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">delete</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/axios&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		params</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">111</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ret</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h6 id="_4-axios-的-post-请求" tabindex="-1">4.axios 的 post 请求 <a class="header-anchor" href="#_4-axios-的-post-请求" aria-label="Permalink to &quot;4.axios 的 post 请求&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 4.1  通过选项传递参数</span></span>
<span class="line"><span style="color:#E06C75;">axios</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/axios&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		uname</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		pwd</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ret</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 4.2  通过 URLSearchParams  传递参数</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> params</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> URLSearchParams</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;uname&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;pwd&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;111&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/axios&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ret</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h6 id="_5-axios-put-请求传参" tabindex="-1">5.axios put 请求传参 <a class="header-anchor" href="#_5-axios-put-请求传参" aria-label="Permalink to &quot;5.axios put 请求传参&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 5  axios put 请求传参   和 post 请求一样</span></span>
<span class="line"><span style="color:#E06C75;">axios</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/axios/123&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		uname</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		pwd</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ret</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="axios-全局配置" tabindex="-1">axios 全局配置 <a class="header-anchor" href="#axios-全局配置" aria-label="Permalink to &quot;axios 全局配置&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 配置公共的请求头</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">defaults</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">baseURL</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;https://api.example.com&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 配置 超时时间</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">defaults</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">timeout</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2500</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 配置公共的请求头</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">defaults</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">common</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;Authorization&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> AUTH_TOKEN</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"># </span><span style="color:#E06C75;">配置公共的</span><span style="color:#E06C75;"> post</span><span style="color:#E06C75;"> 的</span><span style="color:#E06C75;"> Content</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">Type</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">defaults</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">post</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;Content-Type&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;application/x-www-form-urlencoded&#39;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="axios-拦截器" tabindex="-1">axios 拦截器 <a class="header-anchor" href="#axios-拦截器" aria-label="Permalink to &quot;axios 拦截器&quot;">​</a></h4><h5 id="请求拦截器" tabindex="-1">请求拦截器 <a class="header-anchor" href="#请求拦截器" aria-label="Permalink to &quot;请求拦截器&quot;">​</a></h5><p>请求拦截器的作用是在请求发送前进行一些操作</p><p>例如在每个请求体里加上 token，统一做了处理如果以后要改也非常容易</p><p>代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1. 请求拦截器</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">interceptors</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">config</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.1  任何请求都会经过这一步   在发送请求之前做些什么</span></span>
<span class="line"><span style="color:#E5C07B;">		config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mytoken</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;nihao&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.2  这里一定要return   否则配置不成功</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> config</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.3 对请求错误做点什么</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>响应拦截器的作用是在接收到响应后进行一些操作</p><p>例如在服务器返回登录状态失效，需要重新登录的时候，跳转到登录页</p><p>代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 2. 响应拦截器</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">interceptors</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.1  在接收响应做些什么</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.2 对响应错误做点什么</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="接口的跨域请求样式" tabindex="-1">接口的跨域请求样式 <a class="header-anchor" href="#接口的跨域请求样式" aria-label="Permalink to &quot;接口的跨域请求样式&quot;">​</a></h4><p>在 Request Headers 下面，有一些请求需要的字段，请求的时候需要配置相关字段才能跨域,一个个来试相关的请求字段配置 headers:{}</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">axios</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;https://project.com/getdata&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			字段名1</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;值&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			字段名2</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;值&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="vue-axios-库" tabindex="-1">vue-Axios 库 <a class="header-anchor" href="#vue-axios-库" aria-label="Permalink to &quot;vue-Axios 库&quot;">​</a></h4><ul><li><p>易用、简洁且高效的 http 库</p><ul><li><p>使用 ES6 新增对象 Promise 管理异步，告别传统 callback 方式</p></li><li><p>Vue 常用 Ajax 库</p></li></ul></li><li><p>文档</p><ul><li><p><a href="http://www.axios-js.com/" target="_blank" rel="noreferrer">http://www.axios-js.com/</a></p></li><li><p><a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noreferrer">http://www.axios-js.com/zh-cn/docs/</a></p></li></ul></li><li><p>安装</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> axios</span><span style="color:#98C379;"> vue-axios</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>main.js 入口文件引用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> axios</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;axios&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> VueAxios</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;vue-axios&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">VueAxios</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">axios</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">api</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">api</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">api</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><h3 id="接口调用-async-await" tabindex="-1">接口调用-async/await <a class="header-anchor" href="#接口调用-async-await" aria-label="Permalink to &quot;接口调用-async/await&quot;">​</a></h3><h4 id="概念和作用-1" tabindex="-1">概念和作用 <a class="header-anchor" href="#概念和作用-1" aria-label="Permalink to &quot;概念和作用&quot;">​</a></h4><ul><li><p>async/await 是 ES8 引入的新语法，可以更加方便的进行异步操作</p></li><li><p>async/await 让异步代码看起来、表现起来更像同步代码</p></li></ul><h4 id="使用详解" tabindex="-1">使用详解 <a class="header-anchor" href="#使用详解" aria-label="Permalink to &quot;使用详解&quot;">​</a></h4><ul><li><p>async 作为一个关键字放到函数前面</p><ul><li>任何一个<code>async</code>函数都会隐式返回一个<code>promise</code></li></ul></li><li><p>await 关键字只能在使用<code>async</code>定义的函数里 ：调用接口的前面使用</p><ul><li><p>await 后面可以直接跟一个 Promise 实例对象</p></li><li><p>await 函数不能单独使用</p></li></ul></li></ul><h4 id="配合使用" tabindex="-1">配合使用 <a class="header-anchor" href="#配合使用" aria-label="Permalink to &quot;配合使用&quot;">​</a></h4><p>配合 Promise 使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> queryData</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 1.2 await关键字只能在使用async定义的函数中使用      await后面可以直接跟一个 Promise实例对象</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">			resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;nihao&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(ret.data)</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1.3 任何一个async函数都会隐式返回一个promise   我们可以使用then 进行链式编程</span></span>
<span class="line"><span style="color:#61AFEF;">queryData</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>配合 Axios 使用 (处理多个异步请求)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 2.async    函数处理多个异步函数</span></span>
<span class="line"><span style="color:#E5C07B;">axios</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">defaults</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">baseURL</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;http://localhost:3000&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> queryData</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 2.1  添加await之后 当前的await 返回结果之后才会执行后面的代码</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> info</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;async1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 2.2  让异步代码看起来、表现起来更像同步代码</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;async2?info=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> info</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> ret</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">queryData</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,305)]))}const F=n(o,[["render",e]]);export{u as __pageData,F as default};
