import{_ as a,c as o,o as r,ah as t}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"Node脚本开发","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node/Node脚本开发.md","filePath":"Document/Node/Node脚本开发.md","lastUpdated":1750954157000}'),s={name:"Document/Node/Node脚本开发.md"};function h(l,e,d,n,i,c){return r(),o("div",null,e[0]||(e[0]=[t('<h1 id="node脚本开发" tabindex="-1">Node脚本开发 <a class="header-anchor" href="#node脚本开发" aria-label="Permalink to &quot;Node脚本开发&quot;">​</a></h1><p><a href="https://juejin.cn/post/7368385859018817563" target="_blank" rel="noreferrer">使用 NodeJs 编写一个脚本实现 markdown 转 pdf 🤪🤪🤪 - 掘金 (juejin.cn)</a></p><h2 id="【node-js】写一个数据自动整理成表格的脚本" tabindex="-1">【Node.js】写一个数据自动整理成表格的脚本 <a class="header-anchor" href="#【node-js】写一个数据自动整理成表格的脚本" aria-label="Permalink to &quot;【Node.js】写一个数据自动整理成表格的脚本&quot;">​</a></h2><p><a href="https://github.com/CatsAndMice/blog/issues/41" target="_blank" rel="noreferrer">【Node.js】写一个数据自动整理成表格的脚本 · Issue #41 · CatsAndMice/blog (github.com)</a></p><h2 id="node-js操作dom-轻松hold住简单爬虫" tabindex="-1">Node.js操作Dom ，轻松hold住简单爬虫 <a class="header-anchor" href="#node-js操作dom-轻松hold住简单爬虫" aria-label="Permalink to &quot;Node.js操作Dom ，轻松hold住简单爬虫&quot;">​</a></h2><p><a href="https://github.com/CatsAndMice/blog/issues/40" target="_blank" rel="noreferrer">Node.js操作Dom ，轻松hold住简单爬虫 · Issue #40 · CatsAndMice/blog (github.com)</a></p><h2 id="【node-js】ssh2-js-shell一套组合拳下来-一年要花2080分钟做的工作竟然节省到52分钟" tabindex="-1">【Node.js】ssh2.js+Shell一套组合拳下来，一年要花2080分钟做的工作竟然节省到52分钟 <a class="header-anchor" href="#【node-js】ssh2-js-shell一套组合拳下来-一年要花2080分钟做的工作竟然节省到52分钟" aria-label="Permalink to &quot;【Node.js】ssh2.js+Shell一套组合拳下来，一年要花2080分钟做的工作竟然节省到52分钟&quot;">​</a></h2><p><a href="https://github.com/CatsAndMice/blog/issues/42" target="_blank" rel="noreferrer">【Node.js】ssh2.js+Shell一套组合拳下来，一年要花2080分钟做的工作竟然节省到52分钟～ · Issue #42 · CatsAndMice/blog (github.com)</a></p><h1 id="node脚本开发框架" tabindex="-1">Node脚本开发框架 <a class="header-anchor" href="#node脚本开发框架" aria-label="Permalink to &quot;Node脚本开发框架&quot;">​</a></h1><h2 id="zx-简化-node-js-shell-脚本的工具" tabindex="-1">ZX：简化 Node.js Shell 脚本的工具 <a class="header-anchor" href="#zx-简化-node-js-shell-脚本的工具" aria-label="Permalink to &quot;ZX：简化 Node.js Shell 脚本的工具&quot;">​</a></h2><p>Google 出品，方便 Node 开发者快速写 Shell 脚本的工具或者框架，封装了child_process，但是更加好用，比 execa 还更加友好。</p><p>GitHub：<a href="https://github.com/google/zx" target="_blank" rel="noreferrer">https://github.com/google/zx</a></p><p>文档：<a href="https://google.github.io/zx/getting-started" target="_blank" rel="noreferrer">开始使用 |谷歌/ZX (google.github.io)</a></p><h2 id="execa" tabindex="-1">execa： <a class="header-anchor" href="#execa" aria-label="Permalink to &quot;execa：&quot;">​</a></h2><p>GitHub：<a href="https://github.com/sindresorhus/execa" target="_blank" rel="noreferrer">https://github.com/sindresorhus/execa</a></p><p>Execa 在脚本、应用程序或库中运行命令。与 shell 不同，它针对编程使用<a href="https://github.com/sindresorhus/execa/blob/main/docs/bash.md" target="_blank" rel="noreferrer">进行了优化</a>。建立在<a href="https://nodejs.org/api/child_process.html" target="_blank" rel="noreferrer"><code>child_process</code></a>核心模块之上。</p>',16)]))}const p=a(s,[["render",h]]);export{b as __pageData,p as default};
