import{_ as e,c as a,o as n,ah as o}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"Koa-响应(Response)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Koa框架/Koa-响应(Response).md","filePath":"Document/Node后端框架开发/Koa框架/Koa-响应(Response).md","lastUpdated":1750954157000}'),l={name:"Document/Node后端框架开发/Koa框架/Koa-响应(Response).md"};function p(t,s,r,c,i,d){return n(),a("div",null,s[0]||(s[0]=[o(`<h1 id="koa-响应-response" tabindex="-1">Koa-响应(Response) <a class="header-anchor" href="#koa-响应-response" aria-label="Permalink to &quot;Koa-响应(Response)&quot;">​</a></h1><p>Koa <code>Response</code> 对象是在 node 的原生响应对象之上的抽象，提供了诸多对 HTTP 服务器开发有用的功能。</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="response-header" tabindex="-1">response.header <a class="header-anchor" href="#response-header" aria-label="Permalink to &quot;response.header&quot;">​</a></h3><p>响应头对象。</p><h3 id="response-headers" tabindex="-1">response.headers <a class="header-anchor" href="#response-headers" aria-label="Permalink to &quot;response.headers&quot;">​</a></h3><p>响应头对象。别名是 <code>response.header</code>。</p><h3 id="response-socket" tabindex="-1">response.socket <a class="header-anchor" href="#response-socket" aria-label="Permalink to &quot;response.socket&quot;">​</a></h3><p>响应套接字。 作为 <code>request.socket</code> 指向 net.Socket 实例。</p><h3 id="response-status" tabindex="-1">response.status <a class="header-anchor" href="#response-status" aria-label="Permalink to &quot;response.status&quot;">​</a></h3><p>获取响应状态。默认情况下，<code>response.status</code> 设置为 <code>404</code> 而不是像 node 的 <code>res.statusCode</code> 那样默认为 <code>200</code>。</p><h3 id="response-status-1" tabindex="-1">response.status= <a class="header-anchor" href="#response-status-1" aria-label="Permalink to &quot;response.status=&quot;">​</a></h3><p>通过数字代码设置响应状态：</p><ul><li>100 &quot;continue&quot;</li><li>101 &quot;switching protocols&quot;</li><li>102 &quot;processing&quot;</li><li>200 &quot;ok&quot;</li><li>201 &quot;created&quot;</li><li>202 &quot;accepted&quot;</li><li>203 &quot;non-authoritative information&quot;</li><li>204 &quot;no content&quot;</li><li>205 &quot;reset content&quot;</li><li>206 &quot;partial content&quot;</li><li>207 &quot;multi-status&quot;</li><li>208 &quot;already reported&quot;</li><li>226 &quot;im used&quot;</li><li>300 &quot;multiple choices&quot;</li><li>301 &quot;moved permanently&quot;</li><li>302 &quot;found&quot;</li><li>303 &quot;see other&quot;</li><li>304 &quot;not modified&quot;</li><li>305 &quot;use proxy&quot;</li><li>307 &quot;temporary redirect&quot;</li><li>308 &quot;permanent redirect&quot;</li><li>400 &quot;bad request&quot;</li><li>401 &quot;unauthorized&quot;</li><li>402 &quot;payment required&quot;</li><li>403 &quot;forbidden&quot;</li><li>404 &quot;not found&quot;</li><li>405 &quot;method not allowed&quot;</li><li>406 &quot;not acceptable&quot;</li><li>407 &quot;proxy authentication required&quot;</li><li>408 &quot;request timeout&quot;</li><li>409 &quot;conflict&quot;</li><li>410 &quot;gone&quot;</li><li>411 &quot;length required&quot;</li><li>412 &quot;precondition failed&quot;</li><li>413 &quot;payload too large&quot;</li><li>414 &quot;uri too long&quot;</li><li>415 &quot;unsupported media type&quot;</li><li>416 &quot;range not satisfiable&quot;</li><li>417 &quot;expectation failed&quot;</li><li>418 &quot;I&#39;m a teapot&quot;</li><li>422 &quot;unprocessable entity&quot;</li><li>423 &quot;locked&quot;</li><li>424 &quot;failed dependency&quot;</li><li>426 &quot;upgrade required&quot;</li><li>428 &quot;precondition required&quot;</li><li>429 &quot;too many requests&quot;</li><li>431 &quot;request header fields too large&quot;</li><li>500 &quot;internal server error&quot;</li><li>501 &quot;not implemented&quot;</li><li>502 &quot;bad gateway&quot;</li><li>503 &quot;service unavailable&quot;</li><li>504 &quot;gateway timeout&quot;</li><li>505 &quot;http version not supported&quot;</li><li>506 &quot;variant also negotiates&quot;</li><li>507 &quot;insufficient storage&quot;</li><li>508 &quot;loop detected&quot;</li><li>510 &quot;not extended&quot;</li><li>511 &quot;network authentication required&quot;</li></ul><p><strong>注意</strong>: 不用太在意记住这些字符串, 如果你写错了,可以查阅这个列表随时更正.</p><p>由于 <code>response.status</code> 默认设置为 <code>404</code>，因此发送没有 body 且状态不同的响应的操作如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 或其他任何状态</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 204</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="response-message" tabindex="-1">response.message <a class="header-anchor" href="#response-message" aria-label="Permalink to &quot;response.message&quot;">​</a></h3><p>获取响应的状态消息. 默认情况下, <code>response.message</code> 与 <code>response.status</code> 关联.</p><h3 id="response-message-1" tabindex="-1">response.message= <a class="header-anchor" href="#response-message-1" aria-label="Permalink to &quot;response.message=&quot;">​</a></h3><p>将响应的状态消息设置为给定值。</p><h3 id="response-length" tabindex="-1">response.length= <a class="header-anchor" href="#response-length" aria-label="Permalink to &quot;response.length=&quot;">​</a></h3><p>将响应的 Content-Length 设置为给定值。</p><h3 id="response-length-1" tabindex="-1">response.length <a class="header-anchor" href="#response-length-1" aria-label="Permalink to &quot;response.length&quot;">​</a></h3><p>以数字返回响应的 Content-Length，或者从<code>ctx.body</code>推导出来，或者<code>undefined</code>。</p><h3 id="response-body" tabindex="-1">response.body <a class="header-anchor" href="#response-body" aria-label="Permalink to &quot;response.body&quot;">​</a></h3><p>获取响应主体。</p><h3 id="response-body-1" tabindex="-1">response.body= <a class="header-anchor" href="#response-body-1" aria-label="Permalink to &quot;response.body=&quot;">​</a></h3><p>将响应体设置为以下之一：</p><ul><li><code>string</code> 写入</li><li><code>Buffer</code> 写入</li><li><code>Stream</code> 管道</li><li><code>Object</code> || <code>Array</code> JSON-字符串化</li><li><code>null</code> 无内容响应</li></ul><p>如果 <code>response.status</code> 未被设置, Koa 将会自动设置状态为 <code>200</code> 或 <code>204</code>。</p><p>Koa 没有防范作为响应体的所有内容 - 函数没有有意义地序列化，返回布尔值可能会根据您的应用程序而有意义。并且当错误生效时，它可能无法正常工作 错误的属性无法枚举。 我们建议在您的应用中添加中间件，以确定每个应用的正文类型。 示例中间件可能是：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;object&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;某些开发错误&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h4><p>Content-Type 默认为 <code>text/html</code> 或 <code>text/plain</code>, 同时默认字符集是 utf-8。Content-Length 字段也是如此。</p><h4 id="buffer" tabindex="-1">Buffer <a class="header-anchor" href="#buffer" aria-label="Permalink to &quot;Buffer&quot;">​</a></h4><p>Content-Type 默认为 <code>application/octet-stream</code>, 并且 Content-Length 字段也是如此。</p><h4 id="stream" tabindex="-1">Stream <a class="header-anchor" href="#stream" aria-label="Permalink to &quot;Stream&quot;">​</a></h4><p>Content-Type 默认为 <code>application/octet-stream</code>。</p><p>每当流被设置为响应主体时，<code>.onerror</code> 作为侦听器自动添加到 <code>error</code> 事件中以捕获任何错误。此外，每当请求关闭（甚至过早）时，流都将被销毁。如果你不想要这两个功能，请勿直接将流设为主体。例如，当将主体设置为代理中的 HTTP 流时，你可能不想要这样做，因为它会破坏底层连接。</p><p>参阅: <a href="https://github.com/koajs/koa/pull/612" target="_blank" rel="noreferrer">https://github.com/koajs/koa/pull/612</a> 获取更多信息。</p><p>以下是流错误处理的示例，而不会自动破坏流：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> PassThrough</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;stream&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">PassThrough</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#E06C75;font-style:italic;"> ctx</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> someHTTPStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;error&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onerror</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">pipe</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">PassThrough</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h4><p>Content-Type 默认为 <code>application/json</code>. 这包括普通的对象 <code>{ foo: &#39;bar&#39; }</code> 和数组 <code>[&#39;foo&#39;, &#39;bar&#39;]</code>。</p><h3 id="response-get-field" tabindex="-1">response.get(field) <a class="header-anchor" href="#response-get-field" aria-label="Permalink to &quot;response.get(field)&quot;">​</a></h3><p>不区分大小写获取响应头字段值 <code>field</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> etag</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ETag&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="response-has-field" tabindex="-1">response.has(field) <a class="header-anchor" href="#response-has-field" aria-label="Permalink to &quot;response.has(field)&quot;">​</a></h3><p>如果当前在响应头中设置了由名称标识的消息头，则返回 <code>true</code>. 消息头名称匹配不区分大小写.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> rateLimited</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;X-RateLimit-Limit&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="response-set-field-value" tabindex="-1">response.set(field, value) <a class="header-anchor" href="#response-set-field-value" aria-label="Permalink to &quot;response.set(field, value)&quot;">​</a></h3><p>设置响应头 <code>field</code> 到 <code>value</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Cache-Control&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;no-cache&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="response-append-field-value" tabindex="-1">response.append(field, value) <a class="header-anchor" href="#response-append-field-value" aria-label="Permalink to &quot;response.append(field, value)&quot;">​</a></h3><p>用值 <code>val</code> 附加额外的消息头 <code>field</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Link&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&lt;http://127.0.0.1/&gt;&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="response-set-fields" tabindex="-1">response.set(fields) <a class="header-anchor" href="#response-set-fields" aria-label="Permalink to &quot;response.set(fields)&quot;">​</a></h3><p>用一个对象设置多个响应头<code>fields</code>:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#98C379;">  &#39;Etag&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;1234&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">  &#39;Last-Modified&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">date</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这将委托给 <a href="https://nodejs.org/dist/latest/docs/api/http.html#http_request_setheader_name_value" target="_blank" rel="noreferrer">setHeader</a> ，它通过指定的键设置或更新消息头，并且不重置整个消息头。</p><h3 id="response-remove-field" tabindex="-1">response.remove(field) <a class="header-anchor" href="#response-remove-field" aria-label="Permalink to &quot;response.remove(field)&quot;">​</a></h3><p>删除消息头 <code>field</code>。</p><h3 id="response-type" tabindex="-1">response.type <a class="header-anchor" href="#response-type" aria-label="Permalink to &quot;response.type&quot;">​</a></h3><p>获取响应 <code>Content-Type</code>, 不含 &quot;charset&quot; 等参数。</p><blockquote><p>译者注: 这里其实是只获取 <em>mime-type</em>, 详见<a href="https://github.com/koajs/koa/blob/eda27608f7d39ede86d7b402aae64b1867ce31c6/lib/response.js#L371" target="_blank" rel="noreferrer">源码及其注释</a></p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> ct</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;image/png&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="response-type-1" tabindex="-1">response.type= <a class="header-anchor" href="#response-type-1" aria-label="Permalink to &quot;response.type=&quot;">​</a></h3><p>设置响应 <code>Content-Type</code> 通过 mime 字符串或文件扩展名。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;text/plain; charset=utf-8&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;image/png&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;.png&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;png&#39;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意: 在适当的情况下为你选择 <code>charset</code>, 比如 <code>response.type = &#39;html&#39;</code> 将默认是 &quot;utf-8&quot;. 如果你想覆盖 <code>charset</code>, 使用 <code>ctx.set(&#39;Content-Type&#39;, &#39;text/html&#39;)</code> 将响应头字段设置为直接值。</p><h3 id="response-is-types" tabindex="-1">response.is(types...) <a class="header-anchor" href="#response-is-types" aria-label="Permalink to &quot;response.is(types...)&quot;">​</a></h3><p>非常类似 <code>ctx.request.is()</code>. 检查响应类型是否是所提供的类型之一。这对于创建操纵响应的中间件特别有用。</p><p>例如, 这是一个中间件，可以削减除流之外的所有HTML响应。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> minify</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html-minifier&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pipe</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isBuffer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">)) </span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> minify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="response-redirect-url-alt" tabindex="-1">response.redirect(url, [alt]) <a class="header-anchor" href="#response-redirect-url-alt" aria-label="Permalink to &quot;response.redirect(url, [alt])&quot;">​</a></h3><p>执行 [302] 重定向到 <code>url</code>.</p><p>字符串 “back” 是特别提供 Referrer 支持的，当 Referrer 不存在时，使用 <code>alt</code> 或 “/”。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redirect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;back&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redirect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;back&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;/index.html&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redirect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/login&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redirect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://google.com&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>要更改 “302” 的默认状态，只需在该调用之前或之后给 <code>status</code> 赋值。要变更主体请在此调用之后:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 301</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redirect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/cart&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;Redirecting to shopping cart&#39;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="response-attachment-filename-options" tabindex="-1">response.attachment([filename], [options]) <a class="header-anchor" href="#response-attachment-filename-options" aria-label="Permalink to &quot;response.attachment([filename], [options])&quot;">​</a></h3><p>将 <code>Content-Disposition</code> 设置为 “附件” 以指示客户端提示下载。(可选)指定下载的 <code>filename</code> 和部分 <a href="https://github.com/jshttp/content-disposition#options" target="_blank" rel="noreferrer">参数</a>。</p><h3 id="response-headersent" tabindex="-1">response.headerSent <a class="header-anchor" href="#response-headersent" aria-label="Permalink to &quot;response.headerSent&quot;">​</a></h3><p>检查是否已经发送了一个响应头。 用于查看客户端是否可能会收到错误通知。</p><h3 id="response-lastmodified" tabindex="-1">response.lastModified <a class="header-anchor" href="#response-lastmodified" aria-label="Permalink to &quot;response.lastModified&quot;">​</a></h3><p>将 <code>Last-Modified</code> 消息头返回为 <code>Date</code>, 如果存在。</p><h3 id="response-lastmodified-1" tabindex="-1">response.lastModified= <a class="header-anchor" href="#response-lastmodified-1" aria-label="Permalink to &quot;response.lastModified=&quot;">​</a></h3><p>将 <code>Last-Modified</code> 消息头设置为适当的 UTC 字符串。您可以将其设置为 <code>Date</code> 或日期字符串。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">lastModified</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="response-etag" tabindex="-1">response.etag= <a class="header-anchor" href="#response-etag" aria-label="Permalink to &quot;response.etag=&quot;">​</a></h3><p>设置包含 <code>&quot;</code> 包裹的 ETag 响应， 请注意，没有相应的 <code>response.etag</code> getter。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">etag</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> crypto</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createHash</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;md5&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">digest</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hex&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="response-vary-field" tabindex="-1">response.vary(field) <a class="header-anchor" href="#response-vary-field" aria-label="Permalink to &quot;response.vary(field)&quot;">​</a></h3><p>设置 <code>field</code> 的 <code>vary</code>。</p><h3 id="response-flushheaders" tabindex="-1">response.flushHeaders() <a class="header-anchor" href="#response-flushheaders" aria-label="Permalink to &quot;response.flushHeaders()&quot;">​</a></h3><p>刷新任何设置的消息头，然后是主体(body)。</p>`,97)]))}const y=e(l,[["render",p]]);export{u as __pageData,y as default};
