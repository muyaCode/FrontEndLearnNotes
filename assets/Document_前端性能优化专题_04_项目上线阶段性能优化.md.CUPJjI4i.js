import{_ as n,c as a,o as e,ah as p}from"./chunks/framework.DqD713j2.js";const d=JSON.parse('{"title":"项目上线阶段性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端性能优化专题/04_项目上线阶段性能优化.md","filePath":"Document/前端性能优化专题/04_项目上线阶段性能优化.md","lastUpdated":1750954157000}'),l={name:"Document/前端性能优化专题/04_项目上线阶段性能优化.md"};function t(o,s,r,c,i,b){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="项目上线阶段性能优化" tabindex="-1">项目上线阶段性能优化 <a class="header-anchor" href="#项目上线阶段性能优化" aria-label="Permalink to &quot;项目上线阶段性能优化&quot;">​</a></h1><h2 id="前端性能优化定位" tabindex="-1">前端性能优化定位 <a class="header-anchor" href="#前端性能优化定位" aria-label="Permalink to &quot;前端性能优化定位&quot;">​</a></h2><h3 id="性能优化的意义" tabindex="-1">性能优化的意义 <a class="header-anchor" href="#性能优化的意义" aria-label="Permalink to &quot;性能优化的意义&quot;">​</a></h3><h4 id="_1-性能是留住用户很重要的一环" tabindex="-1">1. 性能是留住用户很重要的一环 <a class="header-anchor" href="#_1-性能是留住用户很重要的一环" aria-label="Permalink to &quot;1. 性能是留住用户很重要的一环&quot;">​</a></h4><ul><li><p><strong>pinterest</strong> 重建了他们的页面以实现性能，使感知等待时间减少了 <strong>40％</strong>，从而将搜索引擎流量和注册量提高了 <strong>15％</strong>。</p></li><li><p>通过将平均页面加载时间减少 850 毫秒，<strong>COOK</strong> 发现他们能够将转化率提高 7％，将跳出率降低 7％，并将每个页面的页面数量增加 10％。</p></li><li><p><strong>BBC</strong> 发现，他们在网站加载的每<strong>一秒钟</strong>内就会损失 <strong>10％</strong> 的用户。</p></li><li><p><strong>DoubleClick by Google</strong> 发现，如果网页加载时间超过 <strong>3</strong> 秒，则会有 <strong>53％</strong> 的用户放弃移动网站的访问。</p></li></ul><h4 id="_2-性能是改善转换率至关重要的一环" tabindex="-1">2. 性能是改善转换率至关重要的一环 <a class="header-anchor" href="#_2-性能是改善转换率至关重要的一环" aria-label="Permalink to &quot;2. 性能是改善转换率至关重要的一环&quot;">​</a></h4><ul><li>对于 <strong>Mobify</strong>，主页加载速度每减少 100 毫秒，基于会话的转换增加 1.11％，平均年收入增加近 <strong>380,000</strong> 美元。此外，结账页面加载速度减少 100 毫秒，基于会话的转换增加了 1.55％，从而使年均收入增长近 <strong>530,000</strong> 美元</li><li><strong>DoubleClick</strong> 发现在 5 秒内加载网站的发布商的广告收入是在 19 秒内加载的网站的<strong>两倍</strong>。. 当 <strong>AutoAnything</strong> 将页面加载时间缩短一半时，他们的销售额增长了 <strong>12-13％</strong>。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0842e36a5f134aee8acf2327bf44b473~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="09.png"></p><h3 id="用户角度的性能标准是什么" tabindex="-1">用户角度的性能标准是什么 <a class="header-anchor" href="#用户角度的性能标准是什么" aria-label="Permalink to &quot;用户角度的性能标准是什么&quot;">​</a></h3><h4 id="著名的-2-5-8-原则" tabindex="-1">著名的 2-5-8 原则 <a class="header-anchor" href="#著名的-2-5-8-原则" aria-label="Permalink to &quot;著名的 2-5-8 原则&quot;">​</a></h4><ul><li><p>当用户能够在 2 秒以内得到响应时，会感觉系统的响应很快；</p></li><li><p>当用户在 2-5 秒之间得到响应时，会感觉系统的响应速度还可以；</p></li><li><p>当用户在 5-8 秒以内得到响应时，会感觉系统的响应速度很慢，但是还可以接受；</p></li><li><p>而当用户在超过 8 秒后仍然无法得到响应时，会感觉系统糟透了，或者认为系统已经失去响应，而选择离开这个 Web 站点，或者发起第二次请求。</p></li></ul><p><strong>综上所述：一个网站的性能好坏是留住用户和实现变现的基础</strong></p><blockquote><p>而我们的目标就是力争 1s，保住 2s</p></blockquote><p>1s 的差距，看似微乎其微，但这 1s，浏览器实际上可以做非常多的事情 接下来让我们来看看如何对一个网站进行性能分析</p><h3 id="常见网站性能指标" tabindex="-1">常见网站性能指标 <a class="header-anchor" href="#常见网站性能指标" aria-label="Permalink to &quot;常见网站性能指标&quot;">​</a></h3><ol><li><strong>FP 白屏（First Paint Time ）</strong>： 从页面开始加载到浏览器中检测到渲染（任何渲染）时被触发（例如背景改变，样式应用等）</li></ol><blockquote><p>白屏时间过长，会让用户认为我们的页面不能用或者可用性差</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab8e2f96a2474955adbccde56794340e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="15.jpg"></p><ol start="2"><li><p><strong>FCP 首屏（first contentful paint ）</strong>：从页面开始加载到页面内容的任何部分呈现在屏幕上的时间。 （关注的焦点是内容，这个度量可以知道用户什么时候收到有用的信息（文本，图像等）） <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d72e9f440f84ad2aaed4913b43c891c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="16.jpg"></p></li><li><p><strong>FMP 首次有效绘制（First Meaningful Paint ）</strong>： 表示页面的“主要内容”，开始出现在屏幕上的时间点，这项指标因页面逻辑而异，因此上不存在任何规范。（<strong>只是记录了加载体验的最开始</strong>。如果页面显示的是启动图片或者 loading 动画，这个时刻对用用户而言没有意义）</p></li><li><p><strong>LCP（Largest Contentful Paint ）</strong>：LCP 指标代表的是<strong>视窗最大可见图片或者文本块的渲染时间</strong>。 （可以帮助我们捕获更多的首次渲染之后的加载性能，但这项指标过于复杂，而且很难解释，也经常出错，没办法确定主要内容什么时候加载完。）</p></li><li><p><strong>长任务（Long Task）</strong>：当一个任务执行时间超过 50ms 时消耗到的任务 （50ms 阈值是从 RAIL 模型总结出来的结论，这个是 google 研究用户感知得出的结论，类似用户的感知/耐心的阈值，超过这个阈值的任务，用户会感知到页面的卡顿）</p></li><li><p><strong>TTI （Time To Internative）</strong>：从页面开始到它的主要子资源加载到能够快速地响应用户输入的时间。（没有耗时长任务）</p></li><li><p><strong>首次输入延时 FID （first Input Delay）</strong>：从用户第一次与页面交互到浏览器实际能够开始处理事件的时间。（点击，输入，按键） <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dce9ea573604e9b9ed6812a04e6d5fb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="19.jpg"></p></li><li><p><strong>总阻塞时间 TBT（total blocking time ）</strong>： 衡量从 FCP 到 TTI 之间主线程被阻塞时长的总和。</p></li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb39066d4c8747e388da89780a314a05~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="20.jpg"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48348e5f687743538ab9752802469f7b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="21.jpg"></p><ol start="9"><li><p><strong>DCL （DOMContentLoaded）</strong>：当 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，无需等待样式，图像和子框架的完成加载。</p></li><li><p><strong>L（onLoaded）</strong>：当依赖的资源，全部加载完毕之后才会触发</p></li><li><p><strong>CLS(Cumulative Layout Shift)</strong>: 是所有布局偏移分数的汇总，凡是在页面完整生命周期内预料之外的布局偏移都包括。布局偏移发生在任意时间，当一个可见元素改变了它的位置，从一个渲染帧到下一个</p></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7b36aead632469da1e7a8e648152724~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="webvitals02.jpg"></p><blockquote><p>思考 ==<strong><a href="https://blog.csdn.net/zhw0596/article/details/87900292" target="_blank" rel="noreferrer">$.ready 和 window.onLoad 有什么区别？</a></strong>==</p></blockquote><p>上面介绍了 11 种性能指标 大家没必要搞懂每一个指标的定义 我们来看看我们需要关注的<strong>核心的几个性能指标</strong></p><h3 id="google-web-vitals-使用者体验量化" tabindex="-1"><a href="https://zhuanlan.zhihu.com/p/149662237" target="_blank" rel="noreferrer">Google Web Vitals - 使用者体验量化</a> <a class="header-anchor" href="#google-web-vitals-使用者体验量化" aria-label="Permalink to &quot;[Google Web Vitals - 使用者体验量化](https://zhuanlan.zhihu.com/p/149662237)&quot;">​</a></h3><p>web-vitals: Google 于 2020 年 5 年 5 日提出了新的使用者体验量化方式，推出 Web Vitals 是简化这个学习的曲线，大家只要观注 Web Vitals 指标表现即可；</p><p><strong>web-vitals 集成了 5 个指标的 api,核心指标有 3 个；</strong></p><ul><li><strong>LCP</strong> 显示最大内容元素所需时间 (衡量网站初次载入速度)</li><li><strong>FID</strong> 首次输入延迟时间 (衡量网站互动顺畅程度)</li><li><strong>CLS</strong> 累计版面配置移转 (衡量网页元件视觉稳定性)</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ebffac1d1464e78a4f73a2b3063662c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="webvitals04.jpg"></p><div class="language-javaScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javaScript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;module&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    import </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">getCLS</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getFID</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">getFCP</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">getTTFB</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getLCP</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> from &#39;https://unpkg.com/web-vitals?module&#39;;</span></span>
<span class="line"><span style="color:#ABB2BF;">    getCLS(console.log);</span></span>
<span class="line"><span style="color:#ABB2BF;">    getFID(console.log);</span></span>
<span class="line"><span style="color:#ABB2BF;">    getLCP(console.log);</span></span>
<span class="line"><span style="color:#ABB2BF;">    getFCP(console.log);</span></span>
<span class="line"><span style="color:#ABB2BF;">    getTTFB(console.log);</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们可以直接引用测定方法 打印出这几个关键指标</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/649e8fdaa25b4102a46326fb9775002f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="lighthouse02.jpg"></p><p>到此为止 我们知道了<code>LCP</code> <code>FID</code> <code>CLS</code> 这三大指标是比较核心的 但是如果我们想知道更多的<strong>性能指标测定方式</strong> 我们该怎么做呢 我们接着看</p><h3 id="performance-api" tabindex="-1">Performance API <a class="header-anchor" href="#performance-api" aria-label="Permalink to &quot;Performance API&quot;">​</a></h3><p><code>Performance</code> 是一个浏览器全局对象，提供了一组 API 用于编程式地获取程序在某些节点的性能数据。它包含一组高精度时间定义，以及配套的相关方法。我们可以直接在浏览器控制台打印<code>window.performance</code> 结果如下</p><div class="language-javaScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javaScript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取 performance 数据</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> performance</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // memory 是非标准属性，只在 Chrome 有</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 我有多少内存</span></span>
<span class="line"><span style="color:#E06C75;">    memory</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        usedJSHeapSize</span><span style="color:#ABB2BF;">:  </span><span style="color:#D19A66;">16100000</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// JS 对象（包括V8引擎内部对象）占用的内存，一定小于 totalJSHeapSize</span></span>
<span class="line"><span style="color:#E06C75;">        totalJSHeapSize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">35100000</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 可使用的内存</span></span>
<span class="line"><span style="color:#E06C75;">        jsHeapSizeLimit</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">793000000</span><span style="color:#7F848E;font-style:italic;"> // 内存大小限制</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 我从哪里来？</span></span>
<span class="line"><span style="color:#E06C75;">    navigation</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        redirectCount</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 如果有重定向的话，页面通过几次重定向跳转而来</span></span>
<span class="line"><span style="color:#E06C75;">        type</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#7F848E;font-style:italic;">           // 0   即 TYPE_NAVIGATENEXT 正常进入的页面（非刷新、非重定向等）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                          // 1   即 TYPE_RELOAD       通过 window.location.reload() 刷新的页面</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                          // 2   即 TYPE_BACK_FORWARD 通过浏览器的前进后退按钮进入的页面（历史记录）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                          // 255 即 TYPE_UNDEFINED    非以上方式进入的页面</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  核心时间相关</span></span>
<span class="line"><span style="color:#E06C75;">    timing</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 在同一个浏览器上下文中，前一个网页（与当前页面不一定同域）unload 的时间戳，如果无前一个网页 unload ，则与 fetchStart 值相等</span></span>
<span class="line"><span style="color:#E06C75;">        navigationStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112691935</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0</span></span>
<span class="line"><span style="color:#E06C75;">        unloadEventStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 和 unloadEventStart 相对应，返回前一个网页 unload 事件绑定的回调函数执行完毕的时间戳</span></span>
<span class="line"><span style="color:#E06C75;">        unloadEventEnd</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0</span></span>
<span class="line"><span style="color:#E06C75;">        redirectStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0</span></span>
<span class="line"><span style="color:#E06C75;">        redirectEnd</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前</span></span>
<span class="line"><span style="color:#E06C75;">        fetchStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112692155</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // DNS 域名查询开始的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</span></span>
<span class="line"><span style="color:#E06C75;">        domainLookupStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112692155</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // DNS 域名查询完成的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</span></span>
<span class="line"><span style="color:#E06C75;">        domainLookupEnd</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112692155</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // HTTP（TCP） 开始建立连接的时间，如果是持久连接，则与 fetchStart 值相等</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接开始的时间</span></span>
<span class="line"><span style="color:#E06C75;">        connectStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112692155</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 注意如果在传输层发生了错误且重新建立连接，则这里显示的是新建立的连接完成的时间</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 注意这里握手结束，包括安全连接建立完成、SOCKS 授权通过</span></span>
<span class="line"><span style="color:#E06C75;">        connectEnd</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112692155</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // HTTPS 连接开始的时间，如果不是安全连接，则值为 0</span></span>
<span class="line"><span style="color:#E06C75;">        secureConnectionStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 连接错误重连时，这里显示的也是新建立连接的时间</span></span>
<span class="line"><span style="color:#E06C75;">        requestStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112692158</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存</span></span>
<span class="line"><span style="color:#E06C75;">        responseStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112692686</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存</span></span>
<span class="line"><span style="color:#E06C75;">        responseEnd</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112692687</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件</span></span>
<span class="line"><span style="color:#E06C75;">        domLoading</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112692690</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源</span></span>
<span class="line"><span style="color:#E06C75;">        domInteractive</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112693093</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // DOM 解析完成后，网页内资源加载开始的时间</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 在 DOMContentLoaded 事件抛出前发生</span></span>
<span class="line"><span style="color:#E06C75;">        domContentLoadedEventStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112693093</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）</span></span>
<span class="line"><span style="color:#E06C75;">        domContentLoadedEventEnd</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112693101</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件</span></span>
<span class="line"><span style="color:#E06C75;">        domComplete</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112693214</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // load 事件发送给文档，也即 load 回调函数开始执行的时间</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 注意如果没有绑定 load 事件，值为 0</span></span>
<span class="line"><span style="color:#E06C75;">        loadEventStart</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112693214</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // load 事件的回调函数执行完毕的时间</span></span>
<span class="line"><span style="color:#E06C75;">        loadEventEnd</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1441112693215</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 按照字母排序</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // connectEnd: 1441112692155,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // connectStart: 1441112692155,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // domComplete: 1441112693214,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // domContentLoadedEventEnd: 1441112693101,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // domContentLoadedEventStart: 1441112693093,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // domInteractive: 1441112693093,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // domLoading: 1441112692690,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // domainLookupEnd: 1441112692155,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // domainLookupStart: 1441112692155,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // fetchStart: 1441112692155,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // loadEventEnd: 1441112693215,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // loadEventStart: 1441112693214,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // navigationStart: 1441112691935,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // redirectEnd: 0,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // redirectStart: 0,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // requestStart: 1441112692158,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // responseEnd: 1441112692687,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // responseStart: 1441112692686,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // secureConnectionStart: 0,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // unloadEventEnd: 0,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // unloadEventStart: 0</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br></div></div><p>先来一张图解释下页面加载的几个<strong>关键时刻</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9af6c24b2a34f75970aaaad14098d98~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="01.jpg"></p><h4 id="使用-performance-timing-信息简单计算出网页性能数据" tabindex="-1">使用 <code>performance.timing</code> 信息简单计算出<strong>网页性能数据</strong> <a class="header-anchor" href="#使用-performance-timing-信息简单计算出网页性能数据" aria-label="Permalink to &quot;使用 \`performance.timing\` 信息简单计算出**网页性能数据**&quot;">​</a></h4><ul><li><p>FP：responseStart - navigationStart</p></li><li><p>重定向耗时：redirectEnd - redirectStart</p></li><li><p>DNS 查询耗时：domainLookupEnd - domainLookupStart</p></li><li><p>TCP 链接耗时：connectEnd - connectStart</p></li><li><p>HTTP 请求耗时：responseEnd - responseStart</p></li><li><p>解析 dom 树耗时：domComplete - domInteractive</p></li><li><p>DOM ready 时间：domContentLoadedEventEnd - navigationStart</p></li><li><p>onload：loadEventEnd - navigationStart</p></li></ul><h4 id="使用performance-getentries-获取所有资源请求的时间数据" tabindex="-1">使用<code>performance.getEntries()</code>获取所有资源请求的时间数据 <a class="header-anchor" href="#使用performance-getentries-获取所有资源请求的时间数据" aria-label="Permalink to &quot;使用\`performance.getEntries()\`获取所有资源请求的时间数据&quot;">​</a></h4><p>获取所有资源请求的时间数据,这个函数返回一个按 startTime 排序的对象数组</p><p>我们直接面板输出一下。 <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bea2e534d5a14550ae903af1b7cd578c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="11.png"></p><h4 id="使用performance-getentriesbyname-name-获取特定名称的时间数据" tabindex="-1">使用<code>performance.getEntriesByName(name)</code>获取特定名称的时间数据 <a class="header-anchor" href="#使用performance-getentriesbyname-name-获取特定名称的时间数据" aria-label="Permalink to &quot;使用\`performance.getEntriesByName(name)\`获取特定名称的时间数据&quot;">​</a></h4><blockquote><p>比如面试过程非常喜欢问的 FCP 首屏时间如何计算呢</p></blockquote><p>我们可以通过 <code>getEntriesByName(name)</code>提供的 api 去获取 FCP 数据</p><p>FCP = performance.getEntriesByName<a href="./0">&quot;first-contentful-paint&quot;</a>.startTime - navigationStart</p><h4 id="使用performance-now-精确计算程序执行时间" tabindex="-1">使用<code>performance.now()</code>精确计算程序执行时间 <a class="header-anchor" href="#使用performance-now-精确计算程序执行时间" aria-label="Permalink to &quot;使用\`performance.now()\`精确计算程序执行时间&quot;">​</a></h4><p><code>performance.now</code>方法返回当前网页自从<code>performance.timing.navigationStart</code>到当前时间之间的<strong>微秒数</strong>（毫秒的千分之一）。也就是说，它的精度可以达到 100 万分之一秒。</p><p>那么我们可以通过两次调用 最后计算出 js 某种操作的精确耗时</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> performance</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">doTasks</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 这里是耗时操作</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> end</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> performance</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;耗时：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">end</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> start</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;微秒。&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="使用performance-mark以及performance-measure手动测量性能" tabindex="-1">使用<code>performance.mark</code>以及<code>performance.measure</code>手动测量性能 <a class="header-anchor" href="#使用performance-mark以及performance-measure手动测量性能" aria-label="Permalink to &quot;使用\`performance.mark\`以及\`performance.measure\`手动测量性能&quot;">​</a></h4><p>这块具体的代码示例 建议大家可以直接访问<a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark" title="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark" target="_blank" rel="noreferrer">这里</a>去查看</p><p>咱们如果想<strong>自定义</strong>搜集性能数据指标 做前端的<strong>性能监控系统</strong> 那么这两个 api 是非常给力的</p><p>ok 上面介绍了一系列的代码层面去搜集和测定咱们前端性能指标的方法 那有一些同学可能就会问 可不可以不要看这么多的计算公式 头都大了 有木有那种一看就明白 <strong>更简单</strong>的方案 那么接下来介绍的就是使用<strong>工具</strong>在本地如何分析自己网站的性能</p><h3 id="google-performance-面板" tabindex="-1">Google performance 面板 <a class="header-anchor" href="#google-performance-面板" aria-label="Permalink to &quot;Google performance 面板&quot;">​</a></h3><p>哈哈 大家别慌 虽然这个也叫 performance 但是这里指的是咱们浏览器的<strong>performance 面板工具</strong></p><h4 id="整体结构" tabindex="-1">整体结构 <a class="header-anchor" href="#整体结构" aria-label="Permalink to &quot;整体结构&quot;">​</a></h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/439dfe1cfc4144ccbdf98a06a135f764~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-150213.png"></p><p>我们第一眼可能会被这些花花绿绿的色块吓到 咱们别怕 一点点带大家分析</p><p>从上到下分别为 4 个区域</p><p>1：工具条，包含录制，刷新页面分析，清除结果等一系列操作</p><p>2：总览图，高度概括随时间线的变动，包括 FPS，CPU，NET</p><p>3：火焰图，从不同的角度分析框选区域 。例如：Network，Frames, Interactions, Main 等</p><p>4：总体报告：精确到毫秒级的分析，以及按调用层级，事件分类的整理</p><h4 id="工具条区域" tabindex="-1">工具条区域 <a class="header-anchor" href="#工具条区域" aria-label="Permalink to &quot;工具条区域&quot;">​</a></h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/895daed773974d90a7d9f3e596aaf138~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="24.png"></p><p>上面红框从左到右 咱们把鼠标放上去可以看到几个英文单词</p><ul><li>record 记录浏览器运行中的某一个时间段的表现</li><li>reload page 用于记录网页从最开始的加载到所有资源加载完成这个过程的性能表现。点击之后，页面会自动重新加载</li><li>Screenshots 屏幕快照，显示动态加载的页面图片</li><li>memory 查看多种内存占用变化</li></ul><p>现在我们可以打开任意一个网站 点击第二个按钮 reload page 开始分析</p><h4 id="总览区域" tabindex="-1">总览区域 <a class="header-anchor" href="#总览区域" aria-label="Permalink to &quot;总览区域&quot;">​</a></h4><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/321864679a78400b8d2d8763e7cac40e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-150848.png"></p><p><strong>1. FPS</strong>: 全称 Frames Per Second，表示每秒传输帧数，是速度单位，用来分析动画的一个主要性能指标。1fps = 0.304 meter/sec(米/秒)。如上图所示，绿色竖线越高，FPS 越高。 红色表示长时间帧，可能出现卡顿掉帧。</p><ul><li><strong>不同帧的体验</strong>：</li><li>帧率能够达到 50 ～ 60 FPS 的动画将会相当流畅，让人倍感舒适；</li><li>帧率在 30 ～ 50 FPS 之间的动画，因各人敏感程度不同，舒适度因人而异；</li><li>帧率在 30 FPS 以下的动画，让人感觉到明显的卡顿和不适感； 帧率波动很大的动画，亦会使人感觉到卡顿。</li></ul><p><strong>2. CPU</strong>：CPU 资源。此面积图指示消耗 CPU 资源的事件类型。 图中颜色分别为（与<strong>总体报告</strong>中的 Summary 颜色数据表示一致）：</p><ul><li>蓝色(Loading)：表示网络通信和 HTML 解析时间。</li><li>黄色(Scripting)：表示 JavaScript 执行时间。</li><li>紫色(Rendering)：表示样式计算和布局（重排）时间。</li><li>绿色(Painting)：表示重绘时间。</li><li>灰色(other)：表示其它事件花费的时间。</li><li>白色(Idle)：表示空闲时间。</li></ul><p><strong>3. NET</strong>：每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间）</p><h4 id="火焰图" tabindex="-1">火焰图 <a class="header-anchor" href="#火焰图" aria-label="Permalink to &quot;火焰图&quot;">​</a></h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d3be3011d1f43b1bb4576a7053d8f1d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-151346.png"></p><ol><li><p>Network：表示每个服务器资源的加载情况。</p></li><li><p>Frames：表示每幅帧的运行情况，这里可以和上面总览的 FPS 结合来看</p></li><li><p>Timings：</p></li></ol><ul><li>DCL（DOMContentLoaded）表示 HTML 文档加载完成事件。当初始 HTML 文档完全加载并解析之后触发，无需等待样式、图片、子 frame 结束。作为明显的对比，load 事件是当个页面完全被加载时才触发。</li><li>FP（First Paint）首屏绘制，页面刚开始渲染的时间。</li><li>FCP（First ContentfulPaint）首屏内容绘制，首次绘制任何文本，图像，非空白 canvas 或 SVG 的时间点。</li><li>FMP（First MeaningfulPaint）首屏有意义的内容绘制，这个“有意义”没有权威的规定，本质上是通过一种算法来猜测某个时间点可能是 FMP。有的理解为是最大元素绘制的时间，即同 LCP（Largest ContentfulPaint）。其中 FP、FCP、FMP 是同一条虚线，三者时间不一致。比如首次渲染过后，有可能出现 JS 阻塞，这种情况下 FCP 就会大于 FP。</li><li>L（Onload）页面所有资源加载完成事件。</li><li>LCP（Largest Contentful Paint ）最大内容绘制，页面上尺寸最大的元素绘制时间。</li></ul><blockquote><p>细心的同学可能已经发现了 这里的指标就是对应我们前面提到的<strong>性能指标</strong> 所以可以直接在 performance 面板来看到网页的几个核心指标的数值</p></blockquote><ol start="4"><li><p>Main：记录了渲染进程中主线程的执行记录，点击 main 可以看到某个任务执行的具体情况 是我们<strong>分析具体函数耗时</strong>最常看的面板 <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79cc964834f54328976eaa08cdd6900f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-153209.png"></p><p>首先，面板中会有很多的 Task，如果是耗时长的 Task，其右上角会<strong>标红</strong>，这个时候，我们可以选中标红的 Task，然后放大，看其具体的耗时点。</p><p>放大后，这里可以看到都在做哪些操作，哪些函数耗时了多少,这里代码有压缩，看到的是压缩后的函数名。然后我们点击一下某个函数，在面板最下面，就会出现代码的信息，是哪个函数，耗时多少，在哪个文件上的第几行等。</p><p>这样我们就很方便地<strong>定位到耗时函数</strong> 然后去针对性优化</p></li><li><p>Compositor 合成线程的执行记录，用来记录 html 绘制阶段 (Paint)结束后的图层合成操作</p></li><li><p>Raster 光栅化线程池，用来让 GPU 执行光栅化的任务</p></li><li><p>GPU 可以直观看到何时启动 GPU 加速</p></li><li><p>Memory 选项，在勾选后，就会显示折线图 <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/540a4ebc8ab14b5193a162eef4456da0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-154730.png"> 通过该图我们可以看到页面中的内存使用的情况，比如 JS Heap(堆)，如果曲线一直在增长，则说明存在内存泄露，如果相当长的一段时间，内存曲线都是没有下降的，这里是有发生内存泄露的可能的。</p></li></ol><p>其实在火焰图这块 我们主要关心上诉的 <strong>1234</strong> 核心的点就够了 另外如果想分析<strong>内存泄漏</strong> 可以勾选 <strong>memory</strong> 选项</p><h4 id="总体报告" tabindex="-1">总体报告 <a class="header-anchor" href="#总体报告" aria-label="Permalink to &quot;总体报告&quot;">​</a></h4><h5 id="summary-表示各指标时间占用统计报表" tabindex="-1">Summary：表示各指标时间占用统计报表 <a class="header-anchor" href="#summary-表示各指标时间占用统计报表" aria-label="Permalink to &quot;Summary：表示各指标时间占用统计报表&quot;">​</a></h5><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c018bec8dde14b3f86f06742f0913144~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-155126.png"></p><p>这里的颜色代表的意思和<strong>总览区域里面的 cpu</strong>颜色一样的意思 大家不清楚的可以往上翻一下</p><blockquote><p>这里一般来说，需要着重关注的有两个：一是黄色的区域，代表脚本执行时间，另一个是紫色的渲染时间</p></blockquote><p>1.Loading 事件</p><table tabindex="0"><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Parse HTML</td><td>浏览器解析 HTML</td></tr><tr><td>Finish Loading</td><td>网络请求完成</td></tr><tr><td>Receive Data</td><td>请求的响应数据到达事件，如果响应数据很大（拆包），可能会多次触发该事件</td></tr><tr><td>Receive Response</td><td>响应头报文到达时触发</td></tr><tr><td>Send Request</td><td>发送网络请求时触发</td></tr></tbody></table><ol start="2"><li>Scripting 事件</li></ol><table tabindex="0"><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>AnimationFrameFired</td><td>一个定义好的动画帧发生并开始回调处理时触发</td></tr><tr><td>Cancel Animation Frame</td><td>取消一个动画帧时触发</td></tr><tr><td>GC Event</td><td>垃圾回收时触发</td></tr><tr><td>DOMContentLoaded</td><td>当页面中的 DOM 内容加载并解析完毕时触发</td></tr><tr><td>Evaluate Script</td><td>A script was evaluated.</td></tr><tr><td>Event</td><td>JS 事件</td></tr><tr><td>Function Call</td><td>浏览器进入 JS 引擎时触发</td></tr><tr><td>Install Timer</td><td>创建计时器（调用 setTimeout()和 setInterval()）时触发</td></tr><tr><td>Request Animation Frame</td><td>A requestAnimationFrame() call scheduled a new frame</td></tr><tr><td>Remove Timer</td><td>清除计时器触发</td></tr><tr><td>Time</td><td>调用 console.time() 触发</td></tr><tr><td>Time End</td><td>调用 console.timeEnd() 触发</td></tr><tr><td>Timer Fired</td><td>定时器激活回调后触发</td></tr><tr><td>XHR Ready State Change</td><td>当一个异步请求为就绪状态后触发</td></tr><tr><td>XHR Load</td><td>当一个异步请求完成加载后触发</td></tr></tbody></table><p>3.Rendering 事件</p><table tabindex="0"><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Invalidate layout</td><td>当 DOM 更改导致页面布局失效时触发</td></tr><tr><td>Layout</td><td>页面布局计算执行时触发</td></tr><tr><td>Recalculate style</td><td>Chrome 重新计算元素样式时触发</td></tr><tr><td>Scroll</td><td>内嵌的视窗滚动时触发</td></tr></tbody></table><p>4.Painting 事件</p><table tabindex="0"><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Composite Layers</td><td>Chrome 的渲染引擎完成图片层合并时触发</td></tr><tr><td>Image Decode</td><td>一个图片资源完成解码后触发</td></tr><tr><td>Image Resize</td><td>一个图片被修改尺寸后触发</td></tr><tr><td>Paint</td><td>合并后的层被绘制到对应显示区域后触发</td></tr></tbody></table><p>5.Stystem: 系统用时</p><p>6.Idle: 空闲时间</p><h5 id="bottom-up-表示事件时长排序列表-倒序" tabindex="-1">Bottom-Up：表示事件时长排序列表（倒序） <a class="header-anchor" href="#bottom-up-表示事件时长排序列表-倒序" aria-label="Permalink to &quot;Bottom-Up：表示事件时长排序列表（倒序）&quot;">​</a></h5><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce77591e156a48c58a55d1de83e27ee0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-155339.png"></p><p>这里有两列时间数据，一是&quot;Self Time&quot;代表任务<strong>自身执行</strong>所消耗的时间，二是&quot;Total Time&quot;代表此任务及其调用的附属子任务<strong>一共消耗</strong>的时间。这两列数据各有不同的用处，可以按自己的需求决定按哪列数据作为排序字段。</p><p>在 Activity 的右侧，部分还带有 Source Map 链接，点击之后可以定位到相应操作对应的<strong>代码</strong>。使用它可以比较方便地<strong>定位到具体的代码</strong>。</p><h5 id="call-tree-表示事件调用顺序列表" tabindex="-1">Call tree：表示事件调用顺序列表 <a class="header-anchor" href="#call-tree-表示事件调用顺序列表" aria-label="Permalink to &quot;Call tree：表示事件调用顺序列表&quot;">​</a></h5><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5623e2224fde4a059858edfe6ec0a80e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-155349.png"> Call Tree 中的内容，在 Bottom-Up 中也能看到，无明显的区别。</p><h5 id="event-log-表示事件发生的顺序列表" tabindex="-1">Event Log：表示事件发生的顺序列表 <a class="header-anchor" href="#event-log-表示事件发生的顺序列表" aria-label="Permalink to &quot;Event Log：表示事件发生的顺序列表&quot;">​</a></h5><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba5c9e07b4114c828fe7fee49f265458~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-155402.png"> Event Log 中的内容，是按顺序记录的事件日志，数据比较多。常见的优化级别中一般用不到它。如果是比较大型的应用，打开它可能会直接导致 Chrome 卡死。</p><p>ok 到这里想必大家对 performance 面板的调试都已经学会了 大家可以一边看文章一边打开自己的网站看看 是否有一些性能问题 当然除了 performance 我们还有一个更加<strong>便捷</strong>的工具 它自动帮我们分析好了性能 还给出了<strong>优化建议</strong></p><h3 id="lighthouse" tabindex="-1">lighthouse <a class="header-anchor" href="#lighthouse" aria-label="Permalink to &quot;lighthouse&quot;">​</a></h3><p>先来介绍 <strong>lighthouse 工具</strong>，目前官方提供了 google devtools、google 插件、npm cli 方式应用。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6ba17d59bbe4f61868aa6780e16654c~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-160622.png"></p><p>我们选择 Generate report 开始分析吧！先来看看结果 一睹为快 <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3038a1afecd240c1ace35750e31d8126~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-161425.png"></p><p>我们发现 lighthouse 和 performance <strong>区别还挺大</strong>滴，为啥呢？ <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04e745e5e9c34a449534946d3136b926~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-161324.png"></p><p>原来 lighthouse 默认进行了<strong>节流处理</strong>。我们可以不勾选节流同时也直接点击 view trace 生成对应 performance 面板的数据。 <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e88062b1e3a04a579221929c282b1209~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="WX20220107-161900.png"></p><p>lighthouse 主要针对 <strong>5 个方面</strong>做了分析。</p><h4 id="performance-性能" tabindex="-1">Performance 性能 <a class="header-anchor" href="#performance-性能" aria-label="Permalink to &quot;Performance 性能&quot;">​</a></h4><p>列出了 FCP、SP、LCP、TTI、TBI、CLS 六个指标。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/085d8c51011d4742a37a71d21f3642fe~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="lighthouse03.jpg"></p><p>同时也提供可<strong>优化</strong>方案 <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51692957fff34fc4b6072c4cccb897ef~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="lighthouse04.jpg"></p><h4 id="accessibility-可访问性" tabindex="-1">Accessibility 可访问性 <a class="header-anchor" href="#accessibility-可访问性" aria-label="Permalink to &quot;Accessibility 可访问性&quot;">​</a></h4><p>可访问性：指无障碍设计，也称为网站可达性。是指所创建的网站对所有用户都可用/可访问，不管用户的生理/身体能力如何、不管用户是以何种方式访问网站。 <img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb0d08b6f53542dc9dd932047b2cf33a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="lighthouse05.jpg"></p><h4 id="best-practice-最佳实践" tabindex="-1">Best Practice 最佳实践 <a class="header-anchor" href="#best-practice-最佳实践" aria-label="Permalink to &quot;Best Practice 最佳实践&quot;">​</a></h4><p>实际应用中，网站的安全问题 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eafbb13287d84bdf8840ac006cd3132b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="lighthouse06.jpg"></p><h4 id="seo-搜索引擎优化" tabindex="-1">SEO 搜索引擎优化 <a class="header-anchor" href="#seo-搜索引擎优化" aria-label="Permalink to &quot;SEO 搜索引擎优化&quot;">​</a></h4><p>搜索引擎优化，是一种利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名 <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7ba09a2f5514aeeb42ab81dee58095f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="lighthouse07.jpg"></p><h4 id="progressive-web-app-轻应用-离线应用" tabindex="-1">Progressive Web App 轻应用-离线应用 <a class="header-anchor" href="#progressive-web-app-轻应用-离线应用" aria-label="Permalink to &quot;Progressive Web App 轻应用-离线应用&quot;">​</a></h4><p>PWA： 运用现代的 Web API 以及传统的渐进式增强策略来创建跨平台 Web 应用程序。这些应用无处不在、功能丰富，使其具有与原生应用相同的用户体验优势;</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54ad5d80d05b4170900e5c14d989fa76~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="lighthouse08.jpg"></p><p><a href="https://segmentfault.com/a/1190000014639473" target="_blank" rel="noreferrer">如何上手搭建简易版 PWA</a></p><p>那可能有的小伙伴说 我没有浏览器环境还可以使用 lighthouse 来测试性能吗 答案是 当然可以</p><p>我们再来用 <strong>npm cli</strong> 去实现 lighthouse 吧</p><h3 id="node-cli-lighthouse" tabindex="-1">node cli lighthouse <a class="header-anchor" href="#node-cli-lighthouse" aria-label="Permalink to &quot;node cli lighthouse&quot;">​</a></h3><p>项目安装 lighthouse</p><div class="language-less line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">npm </span><span style="color:#E06C75;">i</span><span style="color:#C678DD;"> -</span><span style="color:#E06C75;">g</span><span style="color:#C678DD;"> lighthouse</span></span>
<span class="line"><span style="color:#C678DD;">lighthouse https:</span><span style="color:#7F848E;font-style:italic;">//www.taobao.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>结果</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec2c6ad928af4a51a9442fa63c7bc37d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="error01.jpg"></p><p><a href="https://github.com/GoogleChrome/chrome-launcher/issues/214" target="_blank" rel="noreferrer">有小伙伴也遇到相同问题</a> <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb82914283f147c49ab887116ca3701d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="lighthouse09.jpg"></p><p>我们可以看到解决方案：需要在 <strong>powerShell</strong> 命令下执行</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">$env:CHROME_PATH = (Get-Process -Name chrome)[0].Path</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><a href="https://www.zhihu.com/question/43134881" target="_blank" rel="noreferrer">powerShell、cmd、bash 有什么区别呢？</a></p><p>总结一句话就是：<strong>powerShell 它将旧的 CMD 功能与具有内置系统管理功能的 scripting/cmdlet 指令集结合在一起，它就是最强呀！</strong></p><p>最后让我们来看看 cli 中 lighthouse 支持哪些命令</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">lighthouse</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;">help</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 命令太多，介绍常用的几个</span></span>
<span class="line"><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">output</span><span style="color:#7F848E;font-style:italic;">             // 文档报告输出支持html、json、csv，默认html；</span></span>
<span class="line"><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">view</span><span style="color:#7F848E;font-style:italic;">               // 数据分析结束后以html展示</span></span>
<span class="line"><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">only</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">categories</span><span style="color:#7F848E;font-style:italic;">    // 分析类别包括“accessibility, best-practices, performance, pwa, seo”</span></span>
<span class="line"><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">throttling</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">method</span><span style="color:#7F848E;font-style:italic;">  // 限流方式：provide当前设备环境，devtools开发模式，simulate模拟手机</span></span>
<span class="line"><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">form</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">factor</span><span style="color:#7F848E;font-style:italic;">        // 支持设备，mobile，desktop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>咱们这篇文章详细地介绍了<strong>前端性能定位</strong>相关的技术 从意义到性能 api 最后到性能工具的使用 整体<strong>难度偏高</strong> 需要大家配合<strong>实际操作</strong>练习 其实性能优化从来就<strong>不是纸上谈兵</strong> 咱们一定要自己亲自动手 具体的问题具体去分析和解决 不断地总结网页的性能问题和优化建议 选择<strong>最适合</strong>的优化方案 而且无论是在面试还是实际工作中 性能优化的话题都是<strong>核心点</strong> 咱们熟练掌握了<strong>性能瓶颈</strong>分析的方法才能帮助我们更好的去<strong>对症治疗</strong></p>`,146)]))}const u=n(l,[["render",t]]);export{d as __pageData,u as default};
