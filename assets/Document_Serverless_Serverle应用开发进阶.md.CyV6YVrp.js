import{_ as e,c as a,o as l,ah as n}from"./chunks/framework.DqD713j2.js";const r="/FrontEndLearnNotes/assets/%E5%87%BD%E6%95%B0%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.CP-31tn5.jpg",i="/FrontEndLearnNotes/assets/%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E6%88%AA%E5%9B%BE.DNOn4ZzS.jpg",p="/FrontEndLearnNotes/assets/%E5%8D%95%E5%AE%9E%E4%BE%8B%E5%A4%9A%E5%B9%B6%E5%8F%91.DyZAp2Vn.jpg",o="/FrontEndLearnNotes/assets/%E5%8D%95%E5%AE%9E%E4%BE%8B%E5%8D%95%E5%B9%B6%E5%8F%91.B5RlO-zv.jpg",t="/FrontEndLearnNotes/assets/%E9%80%9A%E8%BF%87%E5%AD%90%E8%B4%A6%E5%8F%B7%E3%80%81%E8%A7%92%E8%89%B2%E5%92%8C%E6%9D%83%E9%99%90%E7%AD%96%E7%95%A5%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%BA%91%E4%B8%8A%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6.DHT0CjkR.jpg",c="/FrontEndLearnNotes/assets/%E8%A7%92%E8%89%B2%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83.B3ovhFj_.jpg",u="/FrontEndLearnNotes/assets/%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1%E5%AD%98%E5%82%A8%E5%87%BD%E6%95%B0%E7%9A%84%E6%97%A5%E5%BF%97.BuN9aVA1.jpg",h="/FrontEndLearnNotes/assets/%E8%A7%92%E8%89%B2%E6%89%AE%E6%BC%94.EJkT8ubJ.jpg",d="/FrontEndLearnNotes/assets/%E8%A7%92%E8%89%B2%E8%B4%9F%E8%B4%A3%E8%A6%81%E7%82%B9.Ck8nG2L6.jpg",b="/FrontEndLearnNotes/assets/%E4%B8%B0%E5%AF%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E6%BA%90.C_BlMLLy.jpg",B="/FrontEndLearnNotes/assets/%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E6%97%A0%E6%95%88.CQ9ZTvGi.jpg",v="/FrontEndLearnNotes/assets/%E6%94%BB%E5%87%BB%E9%80%BB%E8%BE%91%EF%BC%9A%E6%81%B6%E6%84%8F%E4%B8%8A%E4%BC%A0%E5%A4%A7%E9%87%8F%E6%96%87%E4%BB%B6.C8Me0se1.jpg",E="/FrontEndLearnNotes/assets/%E9%80%9A%E8%BF%87API%E7%BD%91%E5%85%B3%E7%A1%AE%E4%BF%9DAPI%E5%AE%89%E5%85%A8.2ngsfq0P.jpg",A="/FrontEndLearnNotes/assets/%E5%8D%95%E5%AE%9E%E4%BE%8B%E5%A4%9A%E5%B9%B6%E5%8F%91%E6%88%90%E6%9C%AC.DKVlPDv3.jpg",m="/FrontEndLearnNotes/assets/%E9%A2%84%E7%95%99%E8%B5%84%E6%BA%90.DtOg5YNt.jpg",q="/FrontEndLearnNotes/assets/%E5%BA%94%E7%94%A8%E8%BF%9B%E7%A8%8B%E6%98%AF%E6%8C%81%E7%BB%AD%E8%BF%90%E8%A1%8C%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84.CwCpaD8a.jpg",y="/FrontEndLearnNotes/assets/%E7%94%A8%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93%E5%81%9A%E7%BC%93%E5%AD%98.CZYCYT-l.jpg",S="/FrontEndLearnNotes/assets/%E4%BC%A0%E7%BB%9F%E5%BA%94%E7%94%A8%E8%AF%BB%E5%8F%96%E7%A3%81%E7%9B%98%E6%95%B0%E6%8D%AE.hQSPUWV4.jpg",F="/FrontEndLearnNotes/assets/%E4%BC%A0%E7%BB%9F%E5%BA%94%E7%94%A8%E7%BB%9F%E4%B8%80%E6%8E%A5%E5%85%A5.zauU6hrT.jpg",j=JSON.parse('{"title":"Serverle 应用开发进阶","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Serverless/Serverle应用开发进阶.md","filePath":"Document/Serverless/Serverle应用开发进阶.md","lastUpdated":1750954157000}'),P={name:"Document/Serverless/Serverle应用开发进阶.md"};function C(f,s,g,_,k,x){return l(),a("div",null,s[0]||(s[0]=[n('<h1 id="serverle-应用开发进阶" tabindex="-1">Serverle 应用开发进阶 <a class="header-anchor" href="#serverle-应用开发进阶" aria-label="Permalink to &quot;Serverle 应用开发进阶&quot;">​</a></h1><h2 id="_1-性能优化-serverle-应用的性能提升" tabindex="-1">1.性能优化：Serverle 应用的性能提升 <a class="header-anchor" href="#_1-性能优化-serverle-应用的性能提升" aria-label="Permalink to &quot;1.性能优化：Serverle 应用的性能提升&quot;">​</a></h2><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>Serverless 自动弹性伸缩的特性让应用具备了无限扩展的能力，但基于 FaaS 的实现也带来了一个很大的副作用，即冷启动</p><p><strong>冷启动是代码在处理业务功能之前的额外开销</strong></p><p>Serverless 的性能优化的核心就是：<strong>减少冷启动</strong></p><ul><li>深入理解冷启动</li><li>如何优化 Serverless 的性能</li></ul><h3 id="深入理解冷启动" tabindex="-1">深入理解冷启动 <a class="header-anchor" href="#深入理解冷启动" aria-label="Permalink to &quot;深入理解冷启动&quot;">​</a></h3><ul><li>链路追踪</li><li>压测</li></ul><p>深入理解冷启动，是优化 Serverless 应用性能的前提</p><p><img src="'+r+'" alt="函数的启动过程示意图"></p><p>图中可以看出：冷启动需要经过多个步骤，耗时比较长</p><p>通过链路追踪功能，可以检测冷启动耗时，有以下工具</p><ul><li>AWS 的 X-Ray</li><li>阿里云的链路追踪</li><li>Lambda</li><li>函数计算</li></ul><p>函数计算链路追踪截图</p><p><img src="'+i+'" alt="函数计算链路追踪截图"></p><ul><li>InvokeFunction：函数执行总时间</li><li>ClodStart：是函数冷启动时间</li><li>PrepareCode：是函数冷启动过程中下载代码或下载自定义镜像的时间</li><li>Runtimelnitialize：是执行环境启动的时间包括启动容器和函数运行环境</li><li>Invocation：是执行函数的时间</li></ul><h4 id="什么时候函数是冷启动或者热启动呢" tabindex="-1">什么时候函数是冷启动或者热启动呢? <a class="header-anchor" href="#什么时候函数是冷启动或者热启动呢" aria-label="Permalink to &quot;什么时候函数是冷启动或者热启动呢?&quot;">​</a></h4><p>函数第一次执行的时候一定是冷启动，但后面的请求不一定都是热启动这与触发函数执行的事件是串行还是并行有关</p><p>在接口请求抓包拦截器中（如），对一个接口发起请求 100 次，这种属于串型请求，在请求结果中可以看到，第一个请求最长时间，后面时间就短了，所有第一个请求是冷启动，后面的请求都属于热启动</p><p>如果同时对 10 个并行访问 100 次，那么前 10 个请求都是冷启动，请求时间较长，后面的请求便是热启动</p><h4 id="业务例子" tabindex="-1">业务例子 <a class="header-anchor" href="#业务例子" aria-label="Permalink to &quot;业务例子&quot;">​</a></h4><ul><li>团购订餐业务，可能在每天中午、晚上流量突增</li><li>促销活动，在活动开始前流量突增</li><li>社交软件，遇到重大新闻时流量突增</li></ul><p>流量突增就意味着 FaaS 平台不得不添加更多的实例来支持更大的并发，并且新增实例时都会有冷启动，这就对用户体验有较大影响了</p><h3 id="如何优化-serverless-的性能" tabindex="-1">如何优化 Serverless 的性能 <a class="header-anchor" href="#如何优化-serverless-的性能" aria-label="Permalink to &quot;如何优化 Serverless 的性能&quot;">​</a></h3><h4 id="_1-避免函数冷启动" tabindex="-1">1.避免函数冷启动 <a class="header-anchor" href="#_1-避免函数冷启动" aria-label="Permalink to &quot;1.避免函数冷启动&quot;">​</a></h4><ul><li>对函数进行预热 <ul><li>预热就是指你通过定时任务，在真实请求到来之前，对函数发起请求使函数提前初始化</li><li>是否使用预热的方案，既要考虑业务场景，也要平衡性能和成本如果你的应用对延迟要求很高，比如秒杀业务，就可以使用预热功能.</li></ul></li><li>使用预留资源 <ul><li>此外有些 FaaS 平台 (比如函数计算) 也提供了预留资源的功能，可以为你的函数实例持续保留</li></ul></li></ul><h4 id="_2-减小代码体积" tabindex="-1">2.减小代码体积 <a class="header-anchor" href="#_2-减小代码体积" aria-label="Permalink to &quot;2.减小代码体积&quot;">​</a></h4><p>函数冷启动的第一个步骤就是下载代码</p><p>减少代码体积，可以避免引入不必要的依赖、不要加载不需要的代码对 SDK 进行精简、对代码进行压缩，甚至只构建需要执行的代码</p><h4 id="_3-提升函数吞吐量" tabindex="-1">3.提升函数吞吐量 <a class="header-anchor" href="#_3-提升函数吞吐量" aria-label="Permalink to &quot;3.提升函数吞吐量&quot;">​</a></h4><p>大多 FaaS 都支持了单实例多并发</p><p><img src="'+p+'" alt="单实例多并发"></p><p>单实例单并发图例</p><p><img src="'+o+'" alt="单实例单并发"></p><p>单实例多并发图例</p><p>![单实例多并发 (2)](.\\img\\单实例多并发 (2).jpg)</p><h4 id="_4-选择合适的编程语言" tabindex="-1">4.选择合适的编程语言 <a class="header-anchor" href="#_4-选择合适的编程语言" aria-label="Permalink to &quot;4.选择合适的编程语言&quot;">​</a></h4><p>冷启动耗时：</p><p>Java 比 Node.js、Python 等耗时要多</p><p>选择冷启动时间短的编程语言，可以大幅提升应用性能</p><p>有人测试过</p><ul><li>函数计算中：PHP 冷启动最快 Node.js、Python 次之，Java 最慢</li><li>Java 冷启动耗时：大约是 Nodeis 或 PHP 的三倍，Node.js、Python、PHP 的冷启动耗时基本在 1s 内</li><li>随着内存增加，冷启动耗时逐渐缩短</li></ul><h5 id="新的性能优化方案" tabindex="-1">新的性能优化方案 <a class="header-anchor" href="#新的性能优化方案" aria-label="Permalink to &quot;新的性能优化方案&quot;">​</a></h5><p>尽量选择 Node.is、Pvthon、PHP 等冷启动耗时短的语言编程</p><p>为函数设置合适的内存，内存越大，冷启动耗时越短，但成本也越高。所以要设置一个合适的内存</p><h3 id="性能优化总结" tabindex="-1">性能优化总结 <a class="header-anchor" href="#性能优化总结" aria-label="Permalink to &quot;性能优化总结&quot;">​</a></h3><p>Serverless 应用的性能优化，主要是围绕冷启动进行的，也可以针对代码运行时进行优化</p><h4 id="serverless-性能优化的一些实践方案" tabindex="-1">Serverless 性能优化的一些实践方案 <a class="header-anchor" href="#serverless-性能优化的一些实践方案" aria-label="Permalink to &quot;Serverless 性能优化的一些实践方案&quot;">​</a></h4><ul><li>1.提前给函数预热</li><li>2.使用预留资源</li><li>3.减小代码体积减少不必要的依赖</li><li>4.执行上下文重用</li><li>5.为函数设置并发</li><li>6.选择冷启动耗时少的编程语言</li><li>7.为函数设置合适的内存</li></ul><h2 id="_2-访问控制-授权访问其他云服务" tabindex="-1">2.访问控制：授权访问其他云服务 <a class="header-anchor" href="#_2-访问控制-授权访问其他云服务" aria-label="Permalink to &quot;2.访问控制：授权访问其他云服务&quot;">​</a></h2><h3 id="前言-1" tabindex="-1">前言 <a class="header-anchor" href="#前言-1" aria-label="Permalink to &quot;前言&quot;">​</a></h3><ul><li>1.权限问题：直接使用具有 AdministratorAccess 权限的访问凭证去部署应用甚至管理云资源这是非常不安全的</li><li>2.当企业规模逐渐变大，企业中有不同角色的成员，为了云上资源的安全性，你就需要为不同角色配置不同权限，限制不同成员能够访问的云资源</li></ul><p>对于访问控制，各个云厂商都有相应的产品</p><ul><li>aws-IAM：AWS Identity and Access Management</li><li>阿里云-RAM：Resource Access Management</li></ul><p>不同云厂商的实现细节可能有所差异，但工作原理基本一致</p><h3 id="访问控制的工作原理" tabindex="-1">访问控制的工作原理 <a class="header-anchor" href="#访问控制的工作原理" aria-label="Permalink to &quot;访问控制的工作原理&quot;">​</a></h3><p>如果你是一个云产品的架构师，那你要怎么设计一个访问控制系统，实现这样几个很常见的需求呢?</p><h4 id="分权" tabindex="-1">分权 <a class="header-anchor" href="#分权" aria-label="Permalink to &quot;分权&quot;">​</a></h4><p>如何使不同成员拥有不同的权限?</p><p>比如运维同学才能购买云产品，Serverless 开发同学只能使用 Serverless 产品而不能购买，财务同学只能使用费用中心查看账单等</p><h4 id="云服务授权" tabindex="-1">云服务授权 <a class="header-anchor" href="#云服务授权" aria-label="Permalink to &quot;云服务授权&quot;">​</a></h4><p>如何使云服务能够访问某个云资源?</p><p>比如只允许函数计算读对象存储中的文件，而不能删除或创建</p><h4 id="跨账号授权" tabindex="-1">跨账号授权 <a class="header-anchor" href="#跨账号授权" aria-label="Permalink to &quot;跨账号授权&quot;">​</a></h4><p>如何使其他账号能够访问你的云资源?</p><p>比如某个大型企业有两个云账号其中一个云账号 A 是用来开发生产的，另一个 B 用于审计，存储所有日志那么 A 如何使用 B 里面的日志?</p><h4 id="通过子账号、角色和权限策略来实现云上的访问控制" tabindex="-1">通过子账号、角色和权限策略来实现云上的访问控制 <a class="header-anchor" href="#通过子账号、角色和权限策略来实现云上的访问控制" aria-label="Permalink to &quot;通过子账号、角色和权限策略来实现云上的访问控制&quot;">​</a></h4><p><img src="'+t+'" alt="通过子账号、角色和权限策略来实现云上的访问控制"></p><h5 id="子账号创建完成后-有两种使用方式" tabindex="-1">子账号创建完成后，有两种使用方式 <a class="header-anchor" href="#子账号创建完成后-有两种使用方式" aria-label="Permalink to &quot;子账号创建完成后，有两种使用方式&quot;">​</a></h5><ul><li>控制台访问：通过子账号登录控制台管理云资源</li><li>编程访问：在代码中使用子账号的 AK 来调用云产品的 AP 进而管理云资源</li></ul><p>当我们资源数量越来越多时通常会通过编程的方式来使用和管理云资源</p><h5 id="_1-不安全-administratoraccess-子账号-ak" tabindex="-1">1.不安全：AdministratorAccess ==&gt; 子账号 AK <a class="header-anchor" href="#_1-不安全-administratoraccess-子账号-ak" aria-label="Permalink to &quot;1.不安全：AdministratorAccess ==&gt; 子账号 AK&quot;">​</a></h5><h5 id="_2-角色授权-角色是一个虚拟用户-必须被某个具体用户-子账号、云服务等-扮演使用-可以通过添加权限策略为角色授权同时创建角色时-需要指定角色能够被谁扮演-即角色的可信实体" tabindex="-1">2.角色授权：角色是一个虚拟用户，必须被某个具体用户 (子账号、云服务等) 扮演使用，可以通过添加权限策略为角色授权同时创建角色时，需要指定角色能够被谁扮演，即角色的可信实体 <a class="header-anchor" href="#_2-角色授权-角色是一个虚拟用户-必须被某个具体用户-子账号、云服务等-扮演使用-可以通过添加权限策略为角色授权同时创建角色时-需要指定角色能够被谁扮演-即角色的可信实体" aria-label="Permalink to &quot;2.角色授权：角色是一个虚拟用户，必须被某个具体用户 (子账号、云服务等) 扮演使用，可以通过添加权限策略为角色授权同时创建角色时，需要指定角色能够被谁扮演，即角色的可信实体&quot;">​</a></h5><p><img src="'+c+`" alt="角色用户授权"></p><p>基于角色扮演的方式，你就可以实现<strong>云服务授权</strong>和<strong>跨账号授权</strong>了</p><h5 id="_3-通过权限策略给用户或角色授权" tabindex="-1">3.通过权限策略给用户或角色授权 <a class="header-anchor" href="#_3-通过权限策略给用户或角色授权" aria-label="Permalink to &quot;3.通过权限策略给用户或角色授权&quot;">​</a></h5><p>JSON 字符串授权，通过以下</p><ul><li>系统策略</li><li>云服务权限 =&gt; 自定义策略</li></ul><p>阿里云 AdministratorAccess 的权限策略</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;Statement&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;Action&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;Effect&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Allow&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;Resource&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;*&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;Version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>只读 OSS 的系统权限策略 AliyunOSSReadOnlyAccess 配置</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;Statement&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;Action&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;oss:Get*&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;oss:List*&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;Effect&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Allow&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;Resource&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;*&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;Version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="访问控制的场景案例" tabindex="-1">访问控制的场景案例 <a class="header-anchor" href="#访问控制的场景案例" aria-label="Permalink to &quot;访问控制的场景案例&quot;">​</a></h3><h4 id="使用最小权限的子账号部署函数" tabindex="-1">使用最小权限的子账号部署函数 <a class="header-anchor" href="#使用最小权限的子账号部署函数" aria-label="Permalink to &quot;使用最小权限的子账号部署函数&quot;">​</a></h4><p>为什么要限制权限呢?</p><p>如果给开发同学的 AK 权限过大开发者不小心的操作就很可能会对其他正在运行的云服务造成验证影响比如不小心删除了数据库</p><p>建议专门为 Serverless 应用开发创建一个子账号</p><p>![专门为 Serverless 应用开发创建一个子账号](.\\img\\专门为 Serverless 应用开发创建一个子账号.jpg)</p><p>自定义策略</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;Statement&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#E06C75;">         &quot;Effect&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Allow&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            &quot;Action&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">                &quot;fc:GetService&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">                &quot;fc:UpdateService&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">            ],</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;Resource&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">                &quot;acs:fc:cn-beijing:*:services/serverless-app&#39;</span></span>
<span class="line"><span style="color:#98C379;">            ]</span></span>
<span class="line"><span style="color:#98C379;">        },</span></span>
<span class="line"><span style="color:#98C379;">        {</span></span>
<span class="line"><span style="color:#98C379;">            &quot;</span><span style="color:#FFFFFF;">Effect</span><span style="color:#98C379;">&quot;:&quot;</span><span style="color:#FFFFFF;">Allow</span><span style="color:#98C379;">&quot;,</span></span>
<span class="line"><span style="color:#98C379;">            &quot;</span><span style="color:#FFFFFF;">Action</span><span style="color:#98C379;">&quot;: [</span></span>
<span class="line"><span style="color:#98C379;">                &quot;</span><span style="color:#FFFFFF;">fc:*</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#98C379;">            ],</span></span>
<span class="line"><span style="color:#98C379;">            &quot;</span><span style="color:#FFFFFF;">Resource</span><span style="color:#98C379;">&quot;: [</span></span>
<span class="line"><span style="color:#98C379;">                &quot;</span><span style="color:#FFFFFF;">acs:fc:cn-beijing:*:services/serverless-app/functions</span><span style="color:#7F848E;font-style:italic;">/*&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            ]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    ],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &quot;Version&quot;: &quot;1&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>有些开发框架，它们允许你通过 YAML 去配置其他云服务并且在你部署时会自动帮你创建或更新这些服务</p><h4 id="使用日志服务存储函数的日志" tabindex="-1">使用日志服务存储函数的日志 <a class="header-anchor" href="#使用日志服务存储函数的日志" aria-label="Permalink to &quot;使用日志服务存储函数的日志&quot;">​</a></h4><p><img src="`+u+'" alt="使用日志服务存储函数的日志"></p><p>创建 RAM 角色</p><p>![创建 RAM 角色](.\\img\\创建 RAM 角色.jpg)</p><h4 id="在-a-账号的函数中访问-b-账号的-oss-文件可以通过角色扮演来实现第三个场景" tabindex="-1">在 A 账号的函数中访问 B 账号的 OSS 文件可以通过角色扮演来实现第三个场景 <a class="header-anchor" href="#在-a-账号的函数中访问-b-账号的-oss-文件可以通过角色扮演来实现第三个场景" aria-label="Permalink to &quot;在 A 账号的函数中访问 B 账号的 OSS 文件可以通过角色扮演来实现第三个场景&quot;">​</a></h4><p>创建场景略...</p><p>图例</p><p><img src="'+h+'" alt="角色扮演"></p><p>代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="授权访问其他云服务总结" tabindex="-1">授权访问其他云服务总结 <a class="header-anchor" href="#授权访问其他云服务总结" aria-label="Permalink to &quot;授权访问其他云服务总结&quot;">​</a></h3><p>介绍了云上访问控制的基本工作原理，以及在实际开发中的场景案例</p><h4 id="云上的访问控制" tabindex="-1">云上的访问控制 <a class="header-anchor" href="#云上的访问控制" aria-label="Permalink to &quot;云上的访问控制&quot;">​</a></h4><ul><li>云厂商主要通过主账号、角色、权限策略等方式来实现云上资源的访问控制</li><li>通过访问控制，能实现分权、云服务授权、跨账号授权等云上资源管控需求</li><li>实际工作中，对于用户访问权限要遵循最小授权原则</li></ul><h2 id="_3-安全生产-提高-serverle-应用的安全性" tabindex="-1">3.安全生产：提高 Serverle 应用的安全性 <a class="header-anchor" href="#_3-安全生产-提高-serverle-应用的安全性" aria-label="Permalink to &quot;3.安全生产：提高 Serverle 应用的安全性&quot;">​</a></h2><h3 id="前言-2" tabindex="-1">前言 <a class="header-anchor" href="#前言-2" aria-label="Permalink to &quot;前言&quot;">​</a></h3><h4 id="安全问题" tabindex="-1">安全问题 <a class="header-anchor" href="#安全问题" aria-label="Permalink to &quot;安全问题&quot;">​</a></h4><p>Serverless 是否安全取决于怎么去做虽然本质上应用会更安全但这建立在你正确地进行架构设计、代码实现的基础上</p><p>希望你能提高安全意识，掌握这份安全生产指导手册</p><p>Serverless 安全问题</p><ul><li>Serverless 安全面临的挑战</li><li>Serverless 安全的主要风险</li><li>如何提升 Serverless 的安全性</li></ul><h3 id="serverless-安全面临的挑战" tabindex="-1">Serverless 安全面临的挑战 <a class="header-anchor" href="#serverless-安全面临的挑战" aria-label="Permalink to &quot;Serverless 安全面临的挑战&quot;">​</a></h3><h4 id="从软件开发的角度来看" tabindex="-1">从软件开发的角度来看 <a class="header-anchor" href="#从软件开发的角度来看" aria-label="Permalink to &quot;从软件开发的角度来看&quot;">​</a></h4><p>提供 Serverless 服务的云厂商</p><ul><li><p>专注产品功能的实现</p></li><li><p>无须为服务和操作系统安装安全补丁</p></li><li><p>完全不用考虑底层服务器操作系统以及软件运行环境</p></li></ul><p><img src="'+d+'" alt="角色负责要点"></p><h4 id="面对的挑战" tabindex="-1">面对的挑战 <a class="header-anchor" href="#面对的挑战" aria-label="Permalink to &quot;面对的挑战&quot;">​</a></h4><ul><li>攻击面越来越广 <ul><li>由于 Serverless 中函数的数据来自多种数据源，这就极大增加了攻击面，特别是当数据源消息结构非常复杂时，传统的 Web 防火墙方式就很难对数据进行校验</li></ul></li><li>攻击方式越来越复杂 <ul><li>除了传统的 DDoS 攻击、数据注入等攻击方式，Serverless 还面临着事件注入、流程劫持等新的攻击方式</li></ul></li><li>可观测性不足 <ul><li>因为 Serverless 对开发者来说是屏蔽了底层基础设施，且应用是由分布式的函数组成，所以 Serverless 应用的可观测性比传统应用更复杂</li></ul></li><li>传统安全测试方法不适用 <ul><li>当 Serverless 应用依赖了第三方服务或云服务，虽然在单元测试时这些依赖可以被模拟，但进行安全测试却不能模拟</li><li>传统的安全测试工具对 Serverless 应用也不适用 <ul><li>DAST：主要是扫描 HTTP 接口进行安全测试</li><li>SAST：这类工具主要是通过分析代码语法、结构、接口、控制流等来检测程序等漏洞</li><li>IAST：这类工具通过将流量代理到测试服务器等方式进而可以得到更高的准确率、更低的误报率</li></ul></li></ul></li><li>传统安全防护方案不兼容 <ul><li>基于 Serverless 应用，没有办法访问物理机和虚拟机，所以，没有办法考虑传统的安全层，比如端点防护，web 防火墙等。大多数传统安全防护方案与 Serverless 架构不兼容</li></ul></li></ul><h3 id="serverless-安全的主要风险" tabindex="-1">Serverless 安全的主要风险 <a class="header-anchor" href="#serverless-安全的主要风险" aria-label="Permalink to &quot;Serverless 安全的主要风险&quot;">​</a></h3><table tabindex="0"><thead><tr><th>1.函数事件注入</th><th>2.身份认证无效</th><th>3.应用配置不安全</th><th>4.用户或角色权限过高</th><th>5.函数日志和监控能力不足</th></tr></thead><tbody><tr><td>6.第三方依赖不安全</td><td>7.敏感信息泄漏</td><td>8.DDoS 和资损</td><td>9.函数执行流程操纵</td><td>10.错误处理不当</td></tr></tbody></table><ul><li><p>函数事件注入</p><ul><li>数据注入是最常见的安全风险不过在传统应用中，这些数据注入都是用户输入的数据而 Serverless 应用的数据并不局限于用户输入</li><li><img src="'+b+'" alt="丰富的数据源"></li></ul></li><li><p>身份认证无效</p><ul><li>Serverless 架构的应用是由几十甚至上百个函数组成，每个函数实现特定的业务功能，这些函数组合完成整体业务逻辑。一些函数可能会公开其 Web API，需要进行身份认证。另一些则可能只允许内部调用，所以不用进行身份认证</li><li><img src="'+B+`" alt="身份认证无效"></li></ul></li><li><p>应用配置不安全</p><ul><li>在云上运行的应用，尤其是 Serverless 应用，经常会使用到很多应用配置</li><li>另外你还会基于配置来实现环境区分、功能开关等逻辑</li><li>对于配置中心或存放应用配置的云存储授权不当，这很可能造成应用敏感信息泄露，或没有权限的用户不小心修改配置导致应用无法运行</li></ul></li><li><p>用户或角色权限过高</p><ul><li>Serverless 应用应该秉持最小权限的原则，也就是仅给函数提供其执行时所必需的权限</li><li>很多开发者或团队为了方便，就为函数设置了统一的较大的权限，如果一个应用中函数权限过高，那单个函数的漏洞就可能造成系统级灾难</li></ul></li><li><p>函数日志和监控能力不足</p><ul><li>虽然云厂商都对函数提供了日志和监控功能，但这些工具都很新，提供的能力也有限，要想利用这些工具来可视化 Serverless 架构的运行情况还非常困难</li><li><strong>函数日志和监控能力的不足</strong>，就会导致面临攻击时，你就很难针对 Serverless 攻击进行报警，也很难通过日志去分析、排查并解决问题</li></ul></li><li><p>第三方依赖不安全</p><ul><li>很多时候为了完成业务逻辑，函数就要依赖第三方软件包、开源库，甚至通过 API 调用第三方远程 Web 服务如果函数的第三方依赖不安全，也很可能导致函数不安全</li></ul></li><li><p>敏感信息泄露</p><ul><li>随着应用规模和复杂性的增长，应用需要维护越来越多的敏感信息</li><li>比如访问凭证 (AccessKevld、AccessKeySecret 和 SecrityToken)、数据库密码、加密密钥等</li><li>常见的错误做法是:把这些敏感信息简单地放在项目配置文件中，随代码一起上传</li></ul></li><li><p>DDoS 和资损</p><ul><li><p>DDoS 几乎成了每个暴露在互联网上的服务面临的主要风险之一比如大量恶意运行函数造成资损</p></li><li><p>如这一段解析出漏洞数据的代码：攻击者对这段函数发起大量请求，这段函数执行不完，便会被强制停止，执行太多次，费用也会增加</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">spotText</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从 Content-Type 中获取 boundary 属性</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> boundary</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getValuelgnoringKeyCase</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">		event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">headers</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;Content-Type&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	).</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;=&quot;</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 根据 boundary 从消息体中解析数据</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#61AFEF;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E5C07B;">		event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isBase64Encoded</span></span>
<span class="line"><span style="color:#C678DD;">			?</span><span style="color:#E5C07B;"> Buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;base64&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;binary&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			:</span><span style="color:#E5C07B;"> event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RegExp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">boundary</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> item</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/Content-Disposition/</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ul></li><li><p>函数执行流程操纵</p><ul><li>通过操纵函数执行流程，攻击者可以破坏应用逻辑 并且还可以利用该方式绕过访问控制、提升用户权限、甚至发起 DDoS 攻击 Serverless 应用是由很多离散的函数组成，这些函数按特定顺序编排到一起，形成整体应用</li><li>攻击逻辑：恶意上传大量文件 <img src="`+v+'" alt="攻击逻辑：恶意上传大量文件"></li></ul></li><li><p>异常错误处理不当</p><ul><li>由于 Serverless 的调试方式还比较有限 所以很多开发者喜欢直接在 FaaS 平台上打印函数运行时的日志，以及长的错误信息 如果一些敏感信息没有被清除，可能导致敏感信息泄露在日志中 或日志中记录了详细的错误堆栈，暴露代码的漏洞</li></ul></li></ul><h3 id="serverless-安全总结" tabindex="-1">Serverless 安全总结 <a class="header-anchor" href="#serverless-安全总结" aria-label="Permalink to &quot;Serverless 安全总结&quot;">​</a></h3><ul><li>在云上运行的应用，云厂商负责计算、网络、存储等底层资源的安全性应用所有者负责应用本身的安全性</li><li>Serverless 安全性面临的主要挑战是:越来越多的攻击面、越来越复杂的攻击方式可观测性不足以及传统安全测试方法和防护方案不适用于 Serverless 架构</li><li>对于 Serverless 架构的安全风险需要深入理解，才能更好地规避</li></ul><h3 id="如何提升-serverless-的安全性" tabindex="-1">如何提升 Serverless 的安全性 <a class="header-anchor" href="#如何提升-serverless-的安全性" aria-label="Permalink to &quot;如何提升 Serverless 的安全性&quot;">​</a></h3><h4 id="一、正确编程-减少应用的代码泄漏" tabindex="-1">一、正确编程，减少应用的代码泄漏 <a class="header-anchor" href="#一、正确编程-减少应用的代码泄漏" aria-label="Permalink to &quot;一、正确编程，减少应用的代码泄漏&quot;">​</a></h4><ul><li>1.不要相信任何用户输入 <ul><li>由于 Serverless 应用的攻击面更多，攻击手段更复杂所以你永远不要相信任何输入，也不能对输入进行有效性假设</li></ul></li><li>2.使用安全的第三方依赖 <ul><li>维护项目的依赖及版本</li><li>扫描依赖项找出并去掉存在漏洞的版本</li><li>删除不必要的依赖</li><li>仅从可信赖的资源中使用第三方依赖</li><li>将不推荐使用的依赖更新到最新版本</li></ul></li><li>3.可以从一些公开的安全漏洞披露平台中浏览某个依赖有没有安全漏洞 <ul><li>Nodejs 模块中的已知漏洞</li><li>Java 中的已知漏洞</li><li>Python 相关技术中的已知漏洞</li></ul></li><li>4.正确地处理程序异常 <ul><li>对于生产环境中的代码，需要避免打印冗长的错误信息</li><li>建议你只为用户提供简单的错误消息</li><li>不要显示有关任何内部实现的堆栈或环境变量的详细信息</li></ul></li><li>5.通过 API 网关确保 API 安全 <ul><li>使用 Serverless 最常见的场景之一就是构建 API</li><li><img src="'+E+'" alt="通过API网关确保API安全"></li></ul></li></ul><h4 id="二、正确的使用访问控制" tabindex="-1">二、正确的使用访问控制 <a class="header-anchor" href="#二、正确的使用访问控制" aria-label="Permalink to &quot;二、正确的使用访问控制&quot;">​</a></h4><p>访问控制是使用云产品时非常重要的功能，尤其是在规模比较大的团队中，访问控制可以用来限制不同用户能够操作的资源</p><p>1.为用户和角色配置最小的权限</p><ul><li><p>为了减少访问凭证泄漏带来的风险，建议你使用访问控制来管理每个函数具有的权限，并确保每个函数都有且仅有运行时所需要的最小权限，也可以使用一些开源的工具来保证函数的最小权限</p><p>2.使用临时访问凭证</p></li><li><p>当使用代码对云产品进行编程访问时，就会用到访问凭证在 Serverless 函数中，建议你尽可能使用临时访问凭证而不是直接在代码中配置固定的访问凭证</p></li></ul><p>固定访问凭证代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>临时访问凭证代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="三、增强数据安全防护" tabindex="-1">三、增强数据安全防护 <a class="header-anchor" href="#三、增强数据安全防护" aria-label="Permalink to &quot;三、增强数据安全防护&quot;">​</a></h4><h5 id="_1-对云上的数据进行加密" tabindex="-1">1.对云上的数据进行加密 <a class="header-anchor" href="#_1-对云上的数据进行加密" aria-label="Permalink to &quot;1.对云上的数据进行加密&quot;">​</a></h5><p>云上的数据主要有两部分:云上存储的数据;云上传输的数据为了避免中间人攻击，导致传输过程中的数据泄漏建议你使用 TLS 协议对函数通信、网络请求等传输数据进行加密</p><h5 id="_2-对应用配置进行加密" tabindex="-1">2.对应用配置进行加密 <a class="header-anchor" href="#_2-对应用配置进行加密" aria-label="Permalink to &quot;2.对应用配置进行加密&quot;">​</a></h5><p>几乎每个应用都会有很多配置这些信息会在不同的应用、代码、环境变量中进行传输只要其中有一个环节有漏洞，就会导致数据泄漏一定要避免在代码中定义明文配置，要对这些配置进行加密</p><p>如何对配置进行加密</p><ul><li>AWS Secrets Manager</li><li>阿里云密钥管理服务</li><li>Azure 密钥保管库</li><li>Google Cloud KMS</li></ul><h5 id="_3-使用-serverless-相关的身份认证服务" tabindex="-1">3.使用 Serverless 相关的身份认证服务 <a class="header-anchor" href="#_3-使用-serverless-相关的身份认证服务" aria-label="Permalink to &quot;3.使用 Serverless 相关的身份认证服务&quot;">​</a></h5><p>为了避免没有权限的用户访问数据你也需要对访问请求进行身份认证</p><h6 id="serverless-相关运行身份验证功能" tabindex="-1">Serverless 相关运行身份验证功能 <a class="header-anchor" href="#serverless-相关运行身份验证功能" aria-label="Permalink to &quot;Serverless 相关运行身份验证功能&quot;">​</a></h6><ul><li>AWS Cognito 或单点登录</li><li>AWS API Gateway</li><li>阿里云 API 网关</li><li>腾讯云 API 网关</li><li>Azure 应用服务身份认证和授权</li><li>Google Firebase 身份认证</li></ul><h4 id="四-提升应用可观测性" tabindex="-1">四.提升应用可观测性 <a class="header-anchor" href="#四-提升应用可观测性" aria-label="Permalink to &quot;四.提升应用可观测性&quot;">​</a></h4><p>由于 Serverless 应用可观测性不足，遇到安全攻击可能难以第一时间发现，发现安全问题也难以快速定位并恢复，所以导致 Serverless 面临着比传统应用更大的安全风险</p><h5 id="_1-记录函数日志并设置报警" tabindex="-1">1.记录函数日志并设置报警 <a class="header-anchor" href="#_1-记录函数日志并设置报警" aria-label="Permalink to &quot;1.记录函数日志并设置报警&quot;">​</a></h5><p>Serverless 屏蔽了底层机器需要将日志输出到统一的日志存储服务，这样才能更方便查看问题</p><p>强烈建议针对云账号的账单设置报警，尽可能避免预期外的费用</p><h5 id="_2-使用配置审计监控资源的配置变化" tabindex="-1">2.使用配置审计监控资源的配置变化 <a class="header-anchor" href="#_2-使用配置审计监控资源的配置变化" aria-label="Permalink to &quot;2.使用配置审计监控资源的配置变化&quot;">​</a></h5><p>由于 Serverless 函数是在云上运行的，函数本身就有很多配置；函数依赖的云服务也有很多配置，一旦某个配置发生变化，很可能对应用运行造成影响。</p><p>建议使用云厂商提供的配置审计功能来检测云资源的配置变化</p><h6 id="基于配置审计-持续监控的规则" tabindex="-1">基于配置审计，持续监控的规则 <a class="header-anchor" href="#基于配置审计-持续监控的规则" aria-label="Permalink to &quot;基于配置审计，持续监控的规则&quot;">​</a></h6><ul><li>检测函数是否通过控制台创建</li><li>检测使用同一个角色的多个函数</li><li>检测配置了多个不同触发器的函数</li><li>检测使用通配符(*)权限的函数</li></ul><h5 id="_3-使用操作审计记录云上所有操作事件" tabindex="-1">3.使用操作审计记录云上所有操作事件 <a class="header-anchor" href="#_3-使用操作审计记录云上所有操作事件" aria-label="Permalink to &quot;3.使用操作审计记录云上所有操作事件&quot;">​</a></h5><p>如果某个用户误删或恶意删除了某个资源，你要及时收到报警并处理，尽可能避免影响变大</p><p>这时你就可以使用云厂商的操作审计服务了</p><h3 id="serverless-安全生产总结" tabindex="-1">Serverless 安全生产总结 <a class="header-anchor" href="#serverless-安全生产总结" aria-label="Permalink to &quot;Serverless 安全生产总结&quot;">​</a></h3><h4 id="_1-serverless-安全面临的挑战" tabindex="-1">1.Serverless 安全面临的挑战 <a class="header-anchor" href="#_1-serverless-安全面临的挑战" aria-label="Permalink to &quot;1.Serverless 安全面临的挑战&quot;">​</a></h4><ul><li>攻击面越来越广</li><li>攻击方式越来越复杂</li><li>可观测性不在</li><li>传统安全测试方法不适用</li><li>传统安全防护方案不适用</li></ul><h4 id="_2-serverless-安全的主要风险" tabindex="-1">2.Serverless 安全的主要风险 <a class="header-anchor" href="#_2-serverless-安全的主要风险" aria-label="Permalink to &quot;2.Serverless 安全的主要风险&quot;">​</a></h4><ul><li>函数事件注入</li><li>身份认证无效</li><li>应用配置不安全</li><li>用户或角色权限过高</li><li>函数日志和监控能力不足</li><li>第三方依赖不安全</li><li>敏感信息泄漏</li><li>DDoS 和资损失</li><li>函数执行流程操纵</li><li>异常处理不当</li></ul><h4 id="_3-如何提升-serverless-的安全性" tabindex="-1">3.如何提升 Serverless 的安全性 <a class="header-anchor" href="#_3-如何提升-serverless-的安全性" aria-label="Permalink to &quot;3.如何提升 Serverless 的安全性&quot;">​</a></h4><h5 id="减少应用代码漏洞" tabindex="-1">减少应用代码漏洞 <a class="header-anchor" href="#减少应用代码漏洞" aria-label="Permalink to &quot;减少应用代码漏洞&quot;">​</a></h5><ul><li>不要相信任何输入</li><li>使用安全的第三方依赖</li><li>正确处理程序异常</li><li>通过 API 网关确保 API 安全</li></ul><h5 id="正确使用访问控制" tabindex="-1">正确使用访问控制 <a class="header-anchor" href="#正确使用访问控制" aria-label="Permalink to &quot;正确使用访问控制&quot;">​</a></h5><ul><li>为用户和角色配置最小权限</li><li>使用临时访问凭证</li></ul><h5 id="增强数据安全防护" tabindex="-1">增强数据安全防护 <a class="header-anchor" href="#增强数据安全防护" aria-label="Permalink to &quot;增强数据安全防护&quot;">​</a></h5><ul><li>对云上数据进行加密</li><li>对应用配置进行加密</li><li>使用 Serverless 相关的身份认证服务</li></ul><h5 id="提升应用可观测性" tabindex="-1">提升应用可观测性 <a class="header-anchor" href="#提升应用可观测性" aria-label="Permalink to &quot;提升应用可观测性&quot;">​</a></h5><ul><li>记录函数日志并配置报警</li><li>使用配置审计监控资源的配置变化</li><li>使用操作审计记录云上所有操作事件</li></ul><h2 id="_4-成本管理优化-serverless-应用的成本优化" tabindex="-1">4.成本管理优化：Serverless 应用的成本优化 <a class="header-anchor" href="#_4-成本管理优化-serverless-应用的成本优化" aria-label="Permalink to &quot;4.成本管理优化：Serverless 应用的成本优化&quot;">​</a></h2><h3 id="前言-3" tabindex="-1">前言 <a class="header-anchor" href="#前言-3" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>Serverless 应用的成本</p><ul><li>分析</li><li>优化</li><li>控制</li></ul><p>对技术 Leader 来说，在进行技术选型时，除了考虑技术架构、稳定性等，更需要考虑成本</p><h3 id="serverless-应用的成本分析" tabindex="-1">Serverless 应用的成本分析 <a class="header-anchor" href="#serverless-应用的成本分析" aria-label="Permalink to &quot;Serverless 应用的成本分析&quot;">​</a></h3><h4 id="函数一小时的费用比云服务器一小时的费用大约要高-2-5-倍" tabindex="-1">函数一小时的费用比云服务器一小时的费用大约要高 2.5 倍？ <a class="header-anchor" href="#函数一小时的费用比云服务器一小时的费用大约要高-2-5-倍" aria-label="Permalink to &quot;函数一小时的费用比云服务器一小时的费用大约要高 2.5 倍？&quot;">​</a></h4><p>大多数 FaaS 都是按照函数执行<strong>次数</strong>和函数执行<strong>消耗的内存</strong>来收费的</p><ul><li>执行次数：1.3 元/百万次</li><li>执行时间(按量付费) ：0.0110592 元/1GB-秒</li></ul><p>假设函数在一小时内只运行一次消耗内存是 1GB，函数运行时间为 1 小时</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">0.00000133</span><span style="color:#98C379;"> +</span><span style="color:#D19A66;"> 60</span><span style="color:#E5C07B;"> *</span><span style="color:#D19A66;"> 60</span><span style="color:#E5C07B;"> *</span><span style="color:#D19A66;"> 0.000110592</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 0.398元</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>存在两个误区：</p><ul><li>Serverless 的收费包含了应用的系统管理功能 <ul><li>Serverless 函数则可以完全利用分配的 CPU 和内存</li></ul></li><li>Serverless 的函数并不是持续运行的 <ul><li>函数每次只会运行几十毫秒到几百毫秒，不运行时不收费所以实际产生的费用可能要便宜得多</li></ul></li></ul><p>而云服务是按照时间长度统一收费</p><p>假设你的网站每天处理 10 万个请求，每个请求处理时间大约为 100ms，每个函需要 1G 内存</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">0.00000133*100000</span><span style="color:#98C379;"> +</span><span style="color:#D19A66;"> 0.1</span><span style="color:#E5C07B;"> *</span><span style="color:#D19A66;"> 0.000110592</span><span style="color:#E5C07B;"> *</span><span style="color:#D19A66;"> 100000</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">*</span><span style="color:#D19A66;"> 30</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 37.16元</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>所以 Serverless 的价格要比传统 Serverful 便宜很多</p><ul><li>大型企业中除 20%的核心应用外，剩余 80% 的都是中长尾应用</li><li>这些应用平均 QPS 远远低于 1，甚至一天也没有几个用户访问</li><li>但传统的 Serverful 架构中又不得不为这些应用准备至少 2 台服务器</li><li>使用 Serverless 则可以极大节省这部分成本</li></ul><h4 id="使用-serverless-都能极大降低成本" tabindex="-1">使用 Serverless 都能极大降低成本 <a class="header-anchor" href="#使用-serverless-都能极大降低成本" aria-label="Permalink to &quot;使用 Serverless 都能极大降低成本&quot;">​</a></h4><ul><li>Financial Engines：使用 AWS LambdaServerless--成本降低 90%</li><li>微博：使用阿里云函数计算--成本降低 35%</li><li>世纪联华：使用阿里云函数计算--成本降低 40%</li></ul><p>使用 Serverless 你不用再为空闲服务器付费，也不用担心不可预测的负载，所以 Serverless 能大幅降低成本</p><h4 id="使用一些云厂商提供的或开源的-serverless-成本计算器" tabindex="-1">使用一些云厂商提供的或开源的 Serverless 成本计算器 <a class="header-anchor" href="#使用一些云厂商提供的或开源的-serverless-成本计算器" aria-label="Permalink to &quot;使用一些云厂商提供的或开源的 Serverless 成本计算器&quot;">​</a></h4><ul><li>阿里云函数成本计算器</li><li>aws 成本计算器</li><li>Serverless costs calculator</li></ul><h4 id="serverless-这种用多少花多少的收费模式带来的缺点" tabindex="-1">Serverless 这种用多少花多少的收费模式带来的缺点 <a class="header-anchor" href="#serverless-这种用多少花多少的收费模式带来的缺点" aria-label="Permalink to &quot;Serverless 这种用多少花多少的收费模式带来的缺点&quot;">​</a></h4><p>很难预测具体会产生多少费用，云厂商通常也提供了<strong>预付费模式</strong>来解决这个问题</p><h3 id="serverless-应用的成本优化" tabindex="-1">Serverless 应用的成本优化 <a class="header-anchor" href="#serverless-应用的成本优化" aria-label="Permalink to &quot;Serverless 应用的成本优化&quot;">​</a></h3><p>Serverless 应用是按照代码执行次数、执行时间进行收费</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">性能</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 时间</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 成本</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_1-为函数设置超时时间" tabindex="-1">1.为函数设置超时时间 <a class="header-anchor" href="#_1-为函数设置超时时间" aria-label="Permalink to &quot;1.为函数设置超时时间&quot;">​</a></h4><p>避免函数因为异常而无限制地运行下去，导致成本的上升，比如设置 10 秒</p><h4 id="_2-为函数分配合适的内存" tabindex="-1">2.为函数分配合适的内存 <a class="header-anchor" href="#_2-为函数分配合适的内存" aria-label="Permalink to &quot;2.为函数分配合适的内存&quot;">​</a></h4><p>函数收费是按照 GB 每秒来收费的，所以内存越高，费用越高但通常内存越高，函数运行速度又更快</p><p>128 MB -- 200ms == 0.0000040948 元</p><p>1024 MB -- 20ms == 0.00000247784 元</p><h4 id="_3-减少函数的冷启动耗时" tabindex="-1">3.减少函数的冷启动耗时 <a class="header-anchor" href="#_3-减少函数的冷启动耗时" aria-label="Permalink to &quot;3.减少函数的冷启动耗时&quot;">​</a></h4><p>函数的冷启动会直接增加函数的执行时间，并且这部分时间是你的业务逻辑之外的耗时，所以减少函数的冷启动时间，可以帮你节省一大笔费用</p><p>具体看上面：性能优化--冷启动相关</p><h4 id="_4-减少外部慢-api-调用" tabindex="-1">4.减少外部慢 API 调用 <a class="header-anchor" href="#_4-减少外部慢-api-调用" aria-label="Permalink to &quot;4.减少外部慢 API 调用&quot;">​</a></h4><p>通常调用外部 API 会涉及网络请求，如果外部 API 比较慢，函数执行过程就会阻塞，从而导致函数执行耗时增加，进而增加成本</p><p>依赖第三方 Oauth 进行身份认证 ==&gt; 就近选择 OAuth 服务</p><h4 id="_5-为函数实例设置并发" tabindex="-1">5.为函数实例设置并发 <a class="header-anchor" href="#_5-为函数实例设置并发" aria-label="Permalink to &quot;5.为函数实例设置并发&quot;">​</a></h4><p>不仅能提升函数性能，还能节省函数成本</p><p>单实例单并发成本</p><p>![单实例单并发 成本](.\\img\\单实例单并发 成本.jpg)</p><p>单实例多并发成本</p><p><img src="'+A+'" alt="单实例多并发成本"></p><h4 id="_6-选择合适的计费方式" tabindex="-1">6.选择合适的计费方式 <a class="header-anchor" href="#_6-选择合适的计费方式" aria-label="Permalink to &quot;6.选择合适的计费方式&quot;">​</a></h4><p>目前绝大部分 FaaS 平台都支持按量付费和预付费，可以根据应用特点选择合适的付费方式</p><h5 id="降低成本" tabindex="-1">降低成本 <a class="header-anchor" href="#降低成本" aria-label="Permalink to &quot;降低成本&quot;">​</a></h5><p>应用流量一直很高且比较平稳对延迟也比较敏感 ==&gt; 预留模式 ==&gt; 极大减少冷启动</p><p>日常测试或离线处理数据时函数可能是临时大量执行 ==&gt; 按量付费 ==&gt; 保持较高的资源利用率</p><p>预留资源图</p><p><img src="'+m+'" alt="预留资源"></p><h3 id="serverless-应用的成本控制" tabindex="-1">Serverless 应用的成本控制 <a class="header-anchor" href="#serverless-应用的成本控制" aria-label="Permalink to &quot;Serverless 应用的成本控制&quot;">​</a></h3><p>很难理解云厂商提供的账单，里面经常会有一些预期之外的费用，基于 Serverless 架构，账单变得动态起来，费用难以预测</p><h4 id="为什么-serverless-账单难以预测呢" tabindex="-1">为什么 Serverless 账单难以预测呢？ <a class="header-anchor" href="#为什么-serverless-账单难以预测呢" aria-label="Permalink to &quot;为什么 Serverless 账单难以预测呢？&quot;">​</a></h4><ul><li>应用是弹性的，很难预测函数到底要执行多少次</li><li>应用通常不仅仅包含 FaaS 的费用，还有其他组合使用的云产品的费用而这些费用可能比 Faas 的成本还高</li></ul><p>在前面的成本分析中，之所以没有把 FaaS 之外的成本包含在内，是因为基于 Serverful 的架构，也可能需要使用到这些产品</p><h4 id="serverelss-应用的成本" tabindex="-1">Serverelss 应用的成本 <a class="header-anchor" href="#serverelss-应用的成本" aria-label="Permalink to &quot;Serverelss 应用的成本&quot;">​</a></h4><ul><li>FaaS</li><li>事件源的成本和相关服务成本</li></ul><h4 id="如何控制成本" tabindex="-1">如何控制成本 <a class="header-anchor" href="#如何控制成本" aria-label="Permalink to &quot;如何控制成本&quot;">​</a></h4><h5 id="成本预测" tabindex="-1">成本预测 <a class="header-anchor" href="#成本预测" aria-label="Permalink to &quot;成本预测&quot;">​</a></h5><p>成本预测主要就是根据以往的数据预测未来的成本</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">月末费用</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 当前费用</span><span style="color:#E5C07B;"> *</span><span style="color:#ABB2BF;"> (每月/今天的天数)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="成本监控" tabindex="-1">成本监控 <a class="header-anchor" href="#成本监控" aria-label="Permalink to &quot;成本监控&quot;">​</a></h5><p>就像我们使用监控来观测程序是否正常运行一样，Serverless 应用的成本监控也非常重要</p><p>由于函数被恶意攻击最终产生了大量费用，直到月底收到账单通知才发现</p><ul><li>可以基于 Serverless 开发一个简单的成本监控程序</li><li>也可以使用一些第三方的成本分析和成本监控平台</li></ul><h3 id="成本优化总结" tabindex="-1">成本优化总结 <a class="header-anchor" href="#成本优化总结" aria-label="Permalink to &quot;成本优化总结&quot;">​</a></h3><p>Serverless 应用的 成本</p><ul><li>分析</li><li>优化</li><li>控制</li></ul><p>基于 Serverless 架构，不用再为闲置的服务器付费，只为实际使用的资源付费就可以了；</p><p>同时还可以通过提高 Serverelss 应用的性能，进一步优化成本；</p><ul><li>Serverless 应用的成本包括 FaaS 中函数执行的成本以及函数所依赖的触发器、数据源和 BaaS 服务的成本</li><li>Serverless 中函数按照执行次数和执行时间进行收费因此能大幅降低成本</li><li>可以通过提升 Serverless 函数的性能来优化成本</li></ul><h2 id="_5-系统迁移-传统项目如何迁移到-serverless" tabindex="-1">5.系统迁移：传统项目如何迁移到 Serverless <a class="header-anchor" href="#_5-系统迁移-传统项目如何迁移到-serverless" aria-label="Permalink to &quot;5.系统迁移：传统项目如何迁移到 Serverless&quot;">​</a></h2><h3 id="前言-4" tabindex="-1">前言 <a class="header-anchor" href="#前言-4" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>Serverless 有很多优点可以让你不用关心运维、按量付费节省成本...</p><p>Serverless 是一项新的技术，和传统开发方式区别很大，迁移成本也很大</p><p>基于 Serverless 应用是由 FaaS 和 BaaS 组成，传统应用要想迁移到 Serverless 架构上，就要进行相关的改造</p><p>这一节，带你了解怎么把传统 Web 服务进行 Serverless 改造，知道自己的应用适不适合迁移到 Serverless 架构、具体怎么实现以及迁移过程中有哪些需要注意的地方</p><h3 id="传统应用应该如何迁移到-serverless" tabindex="-1">传统应用应该如何迁移到 Serverless <a class="header-anchor" href="#传统应用应该如何迁移到-serverless" aria-label="Permalink to &quot;传统应用应该如何迁移到 Serverless&quot;">​</a></h3><p>应用进程是持续运行在服务器上的</p><p><img src="'+q+'" alt="应用进程是持续运行在服务器上的"></p><ul><li>同一个服务器上的内存可以共享，所以传统应用通常可以在内存中缓存数据，以便提升计算性能</li><li>基于 Serverless 架构的应用，内存缓存通常没有意义传统应用迁移到 Serverless 架构面临的第一个改造点就是内存缓存问题</li></ul><h3 id="_1-在-serverless-架构的应用中一般用缓存数据库做缓存" tabindex="-1">1.在 Serverless 架构的应用中一般用缓存数据库做缓存 <a class="header-anchor" href="#_1-在-serverless-架构的应用中一般用缓存数据库做缓存" aria-label="Permalink to &quot;1.在 Serverless 架构的应用中一般用缓存数据库做缓存&quot;">​</a></h3><p>在传统应用中(尤其分布式应用)，大部分时候我们也会使用缓存数据库因为服务器和服务器之间，也无法共享内存，所以内存缓存也仅作用于当前服务器处理的所有请求</p><p><img src="'+y+'" alt="用缓存数据库做缓存"></p><h3 id="_2-缓存数据带来的第二个改造点-就是身份认证" tabindex="-1">2.缓存数据带来的第二个改造点，就是身份认证 <a class="header-anchor" href="#_2-缓存数据带来的第二个改造点-就是身份认证" aria-label="Permalink to &quot;2.缓存数据带来的第二个改造点，就是身份认证&quot;">​</a></h3><p>身份认证是传统应用迁移到 Serverless 的第二个改造点</p><p>1.基于 cookie-session 的认证方式通常是把身份信息保存在服务端的 session 中</p><ul><li><p>现在大部分 cookie-session 的身份认证会将 session 存储在缓存数据库，这样就降低了迁移成本</p><p>2.一些传统应用可能还会对磁盘有很多读写操作</p></li><li><p>部署传统应用的磁盘是直接挂载到服务器上的所以就算应用重启了，服务器和磁盘也依旧存在</p></li></ul><p>Serverless 函数运行在 FaaS 平台上</p><p>函数运行时只会有一个临时目录的读写权限，一旦运行环境被释放，该临时目录也会被释放，所以磁盘数据无法持续存储</p><h4 id="对于有读写磁盘需求的应用-应该如何迁移到-serverless-架构呢" tabindex="-1">对于有读写磁盘需求的应用,应该如何迁移到 Serverless 架构呢? <a class="header-anchor" href="#对于有读写磁盘需求的应用-应该如何迁移到-serverless-架构呢" aria-label="Permalink to &quot;对于有读写磁盘需求的应用,应该如何迁移到 Serverless 架构呢?&quot;">​</a></h4><ul><li>可以为 Serverless 函数挂载一个持久存储只要不释放数据可以永久保存</li><li>不同函数可以共用同一个持久化存储这样不同函数就可以读写同一份数据</li><li>计算和存储分离了，这样更利于应用扩缩容</li></ul><p>传统应用读取磁盘数据</p><p><img src="'+S+'" alt="传统应用读取磁盘数据"></p><p>Serverless 应用使用持久化存储读写数据</p><p>![Serverless 应用使用持久化存储读写数据](.\\img\\Serverless 应用使用持久化存储读写数据.jpg)</p><h3 id="_3-使用-api-网关做统一接入是架构上的改造-应用代码也需要改造" tabindex="-1">3.使用 API 网关做统一接入是架构上的改造，应用代码也需要改造 <a class="header-anchor" href="#_3-使用-api-网关做统一接入是架构上的改造-应用代码也需要改造" aria-label="Permalink to &quot;3.使用 API 网关做统一接入是架构上的改造，应用代码也需要改造&quot;">​</a></h3><p>传统应用统一接入</p><p><img src="'+F+'" alt="传统应用统一接入"></p><p>Serverless 应用基于 API 网关实现统一接入</p><p>![Serverless 应用基于API 网关实现统一接入](.\\img\\Serverless 应用基于 API 网关实现统一接入.jpg)</p><p>将传统 Web 服务 Serverless 化是传统应用迁移到 Serverless 架构的又一个改造点</p><h4 id="web-服务-serverless-化" tabindex="-1">Web 服务 Serverless 化 <a class="header-anchor" href="#web-服务-serverless-化" aria-label="Permalink to &quot;Web 服务 Serverless 化&quot;">​</a></h4><p>将 Web 服务 Serverless 化的核心工作就是开发一个适配层，通过适配层将函数的事件对象转化为标准的 Web 请求</p><p>流程图示例</p><p>![事件对象转化为标准的 Web 请求](.\\img\\事件对象转化为标准的 Web 请求.jpg)</p><p>传统 Web 框架 Serverless 化比较麻烦的地方就在于：你需要完全理解 Web 框架 和 Serverless 函数事件的每个参数</p><p>所以各个云厂商为方便用户开发，也提供了依赖包</p><ul><li>阿里云函数计算提供的：@webserverless/fc-express</li><li>腾讯云云函数提供的：tencent-serverless-http</li></ul><p>步骤：</p><ul><li>创建一个自定义 HTTP Server</li><li>将事件对象转换为 HTTP 请求参数，并转发到自定义的 HTTP Server</li><li>将 HTTP 响应转换为函数返回值</li></ul><p>![Web 服务 Serverless 化步骤图例](.\\img\\Web 服务 Serverless 化步骤图例.jpg)</p><h5 id="自定义运行时服务化" tabindex="-1">自定义运行时服务化 <a class="header-anchor" href="#自定义运行时服务化" aria-label="Permalink to &quot;自定义运行时服务化&quot;">​</a></h5><p>前面自定义运行原理时那一节</p><p>学习了如何实现一个自定义运行时，其中自定义运行时的原理：本质上也是在函数中实现一个 HTTP 服务</p><p>传统 Web 服务 Serverless 化的原理与自定义运行时的原理是非常类似的，因此基于自定义运行时，可以轻松的将传统 web 服务 Serverless 化，这样就不用开发适配层</p><p>自定义运行时，有两种方式</p><ul><li>1.在函数中直接创建 HTTP 服务</li><li>2.通过 Docker 镜像启动一个 HTTP 服务</li></ul><h3 id="传统-web-服务-serverless-化总结" tabindex="-1">传统 Web 服务 Serverless 化总结 <a class="header-anchor" href="#传统-web-服务-serverless-化总结" aria-label="Permalink to &quot;传统 Web 服务 Serverless 化总结&quot;">​</a></h3><ul><li>1.通过适配层，由适配层将事件对象转换为标准 Web 请求</li><li>2.通过自定义运行时，在函数中创建一个 HTTP 服务该 HTTP 服务将函数事件处理后转发给传统 Web 服务</li><li>3.通过自定义运行时，将传统 Web 服务构建为自定义镜像</li></ul><p>这一节学习了怎么把传统应用迁移到 Serverless</p><ul><li>传统应用迁移到 Serverless，想要考虑内存缓存、身份认证、持久化存储、Web 服务 Serverless 化等改造点</li><li>如果一个应用本身就是分布式部署的，且在架构上是计算和存储分离的，则比较容易迁移到 Serverless</li><li>Web 服务 Serverless 化主要原理是实现一个自定义 HTTP 服务，通过该 HTTP 服务处理事件对象和 Web 请求的差异</li><li>通过实现适配层和自定义运行时等方案实现 Web 服务 Serverless 化</li></ul><p>作业：开发一个简单的 Express.js 应用，将其部署到 Serverless 平台上</p>',300)]))}const T=e(P,[["render",C]]);export{j as __pageData,T as default};
