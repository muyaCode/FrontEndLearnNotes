import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const F=JSON.parse('{"title":"Express 实战开发","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Express框架/Express实战开发.md","filePath":"Document/Node后端框架开发/Express框架/Express实战开发.md","lastUpdated":1750954157000}'),e={name:"Document/Node后端框架开发/Express框架/Express实战开发.md"};function o(r,s,t,c,B,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="express-实战开发" tabindex="-1">Express 实战开发 <a class="header-anchor" href="#express-实战开发" aria-label="Permalink to &quot;Express 实战开发&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/s/-VamCCMrRJtBjICnJ2SW4A" target="_blank" rel="noreferrer">Express + Node.js 手册 (qq.com)</a></p><h2 id="express-实战开发项目地址" tabindex="-1">Express 实战开发项目地址 <a class="header-anchor" href="#express-实战开发项目地址" aria-label="Permalink to &quot;Express 实战开发项目地址&quot;">​</a></h2><p>express-demo：<a href="https://github.com/muyaCode/express-dome" target="_blank" rel="noreferrer">https://github.com/muyaCode/express-dome</a></p><h2 id="_1-express-项目初始化启动" tabindex="-1">1.express 项目初始化启动 <a class="header-anchor" href="#_1-express-项目初始化启动" aria-label="Permalink to &quot;1.express 项目初始化启动&quot;">​</a></h2><p>app.js：</p><p>服务器监听、静态资源处理、ejs 模板引擎加载、路由处理方式示例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1）.导入express</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> userRouter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./router/user&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 导入user的路由方法userRouter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2）.调用express方法, 创建服务端实例对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理静态资源</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">static</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;public&quot;</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 处理动态资源</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1.告诉express动态资源存储在什么地方</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;views&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;views&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.告诉express动态网页使用的是什么模板引擎</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;view engine&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;ejs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.监听请求, 返回渲染之后的动态网页</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 注意点: express给请求对象和响应对象添加了很多自定义的方法</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;index&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ejs模板引擎加载成功&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过express处理路由方式一</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">app.get(&#39;/api/goods/list&#39;, (req, res, next)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    res.end(&#39;it666.list.get&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">app.get(&#39;/api/user/login&#39;, (req, res, next)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 注意点: 响应对象的json方法是express给响应对象扩展的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         这个方法会自动将对象转换成字符串之后返回</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         这个方法还会自动帮助我们设置响应头</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    res.json({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        name:&#39;lnj&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        age:33,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        method: &#39;get&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">app.post(&#39;/api/goods/detail&#39;, (req, res, next)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    res.end(&#39;it666.detail.post&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">app.post(&#39;/api/user/register&#39;, (req, res, next)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    res.json({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        name:&#39;lnj&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        age:33,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        method: &#39;post&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过express处理路由方式二：使用导入的user路由模块的路由方法userRouter</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &#39;/api/user&#39;是路由前置</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">userRouter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3）.告诉服务端需要监听哪一个端口</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express服务启动成功&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;localhost:3000&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><h2 id="_2-express-应用级别路由的使用-处理请求参数" tabindex="-1">2.express 应用级别路由的使用-处理请求参数 <a class="header-anchor" href="#_2-express-应用级别路由的使用-处理请求参数" aria-label="Permalink to &quot;2.express 应用级别路由的使用-处理请求参数&quot;">​</a></h2><p>app.js：</p><p>1.app.路由方法(&#39;/路由前缀&#39;, () =&gt; {})，如：app.post()，app.get()</p><p>2.application/json 类型和 application/x-www-form-urlencoded 表单类型的请求数据的解析</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1）.导入express</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2）.调用express方法, 创建服务端实例对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理静态资源</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">static</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;public&quot;</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理动态资源</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1.告诉express动态资源存储在什么地方</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;views&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;views&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.告诉express动态网页使用的是什么模板引擎</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;view engine&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;ejs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.监听请求, 返回渲染之后的动态网页</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 注意点: express给请求对象和影响对象添加了很多自定义的方法</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;index&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;www.it666.com&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * express应用级别路由的使用和数据解析</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/get&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// express会将get的请求参数转换成对象之后, 放到请求对象的query属性中</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 告诉express能够解析 application/json类型的请求参数</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 告诉express能够解析 表单类型的请求参数 application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">urlencoded</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">extended</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> }));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// express会将解析之后, 转换成对象的post请求参数放到请求对象的body属性中</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/post&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3）.告诉服务端需要监听哪一个端口</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express服务启动成功&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;localhost:3000&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>可以使用接口请求工具（postman、Apifox）输入地址测试请求：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">localhost:3000/post</span></span>
<span class="line"><span style="color:#61AFEF;">localhost:3000/get?name</span><span style="color:#98C379;">=555</span><span style="color:#ABB2BF;">&amp;</span><span style="color:#E06C75;">pwd</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">123456</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_3-express-应用级别路由的使用-处理-cookie" tabindex="-1">3.express 应用级别路由的使用-处理 Cookie <a class="header-anchor" href="#_3-express-应用级别路由的使用-处理-cookie" aria-label="Permalink to &quot;3.express 应用级别路由的使用-处理 Cookie&quot;">​</a></h2><p>app.js：</p><p>1.在上面的代码的基础上，使用 cookie-parser 库，设置和获取 Cookie</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// cookie解析库</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cookieParser</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cookie-parser&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 之前的代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理cookie</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/setCookie&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cookie</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;username&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;lnj&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">httpOnly</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">maxAge</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cookieParser</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/getCookie&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cookies</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3）.告诉服务端需要监听哪一个端口</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express服务启动成功&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;localhost:3000&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>可以使用接口请求工具（postman、Apifox）输入地址测试请求：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 设置Cookie</span></span>
<span class="line"><span style="color:#61AFEF;">localhost:3000/setCookie</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 获取Cookie，打印在编辑器的终端</span></span>
<span class="line"><span style="color:#61AFEF;">localhost:3000/getCookie</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_4-express-next-方法" tabindex="-1">4.express-next 方法 <a class="header-anchor" href="#_4-express-next-方法" aria-label="Permalink to &quot;4.express-next 方法&quot;">​</a></h2><h3 id="next-方法使用示例-next-是否继续往下执行下面的方法" tabindex="-1">next()方法使用示例：next()是否继续往下执行下面的方法 <a class="header-anchor" href="#next-方法使用示例-next-是否继续往下执行下面的方法" aria-label="Permalink to &quot;next()方法使用示例：next()是否继续往下执行下面的方法&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.导入express</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> userRouter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./router/user&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cookieParser</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cookie-parser&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.调用express方法, 创建服务端实例对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// express-next方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">1.use既可以处理没有路由地址的请求, 也可以处理有路由地址请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">2.use既可以处理get请求, 也可以处理post请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">3.在处理请求的时候是从上至下的判断的, 哪一个先满足就哪一个来处理</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">4.如果在处理请求的回调函数中没有调用next方法, 那么处理完之后就不会继续往下判断了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">5.如果在处理请求的回调函数中调用了next方法,那么处理完之后还会继续往下判断</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;use1 没有路由地址&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;use2 有路由地址&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get1 /api&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get2 /api/user&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;post1 /api&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;post2 /api/user&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.告诉服务端需要监听哪一个端口</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;listen ok&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>可以使用接口请求工具（postman、Apifox）输入地址测试请求：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 测试app.use的应用级别的路由：看看两个方法，哪个先执行</span></span>
<span class="line"><span style="color:#61AFEF;">localhost:3000/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 测试/api，get和post方法都切换测试一遍</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 回到编辑器看终端打印输出什么，哪个方法先执行</span></span>
<span class="line"><span style="color:#61AFEF;">localhost:3000/api</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 测试/api/user，get和post方法都切换测试一遍</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 回到编辑器看终端打印输出什么，哪个方法先执行</span></span>
<span class="line"><span style="color:#61AFEF;">localhost:3000/api/user</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="结合之前代码使用例子-说明" tabindex="-1">结合之前代码使用例子+说明： <a class="header-anchor" href="#结合之前代码使用例子-说明" aria-label="Permalink to &quot;结合之前代码使用例子+说明：&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.导入express</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> userRouter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./router/user&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cookieParser</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cookie-parser&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> createError</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http-errors&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.调用express方法, 创建服务端实例对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">默认情况下会从上至下的匹配路由处理方法, 一旦匹配到了就会执行,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">执行完毕之后如果没有调用next就停止,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">执行完毕之后如果调用了next就继续向下匹配</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// next方法正确打开姿势</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">通过next方法, 我们可以将同一个请求的多个业务逻辑拆分到不同的方法中处理</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">这样可以提升代码的可读性和可维护性, 以及保证代码的单一性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;/api/user/info&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;验证用户是否登陆&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;用户已经登陆, 可以查看用户信息&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.告诉服务端需要监听哪一个端口</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;listen ok&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="_5-express-处理错误" tabindex="-1">5.express-处理错误 <a class="header-anchor" href="#_5-express-处理错误" aria-label="Permalink to &quot;5.express-处理错误&quot;">​</a></h2><p>app.js 内：在上面代码的基础上添加，使用 http-errors 库</p><p>使用前先安装：<code>npm i http-errors</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.导入express</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> createError</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http-errors&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.调用express方法, 创建服务端实例对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// express错误处理</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user/login&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;login&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user/register&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;register&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">由于在处理请求的时候会从上至下的匹配</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">由于前面的处理方法都没有调用next方法, 所以处理完了就不会再继续向下匹配了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">由于use没有指定路由地址, 由于use既可以处理get请求, 又可以处理post请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">所以只要前面的路由都没有匹配到, 就会执行下面的use</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">createError</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">404</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 打印错误</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 输出错误到网页上</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.告诉服务端需要监听哪一个端口</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;listen ok&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>可以在浏览器中输入没有定义的路由地址，如：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">localhost:3000/api/user/xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>res.end(err.status, err.message)，这句代码会输出到网页上，为：<code>404 Not Found</code></p><h2 id="_6-express-中间件" tabindex="-1">6..express-中间件 <a class="header-anchor" href="#_6-express-中间件" aria-label="Permalink to &quot;6..express-中间件&quot;">​</a></h2><h3 id="app-js" tabindex="-1">app.js： <a class="header-anchor" href="#app-js" aria-label="Permalink to &quot;app.js：&quot;">​</a></h3><p>app.get/post()方法，里面接收三个参数的回调函数：<code>(req, res, next) =&gt; {}</code>，就是 express 的中间件</p><p>三个参数：</p><ul><li>request 请求对象</li><li>response 响应对象</li><li>next 函数</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.导入express</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> createError</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http-errors&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.调用express方法, 创建服务端实例对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;/api/user/info&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;验证用户是否登陆&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;用户已经登陆, 可以查看用户信息&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lnj&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">66</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user/info&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;验证用户是否登陆&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user/info&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;用户已经登陆, 可以查看用户信息&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lnj&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">66</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.告诉服务端需要监听哪一个端口</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;listen ok&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="中间件说明" tabindex="-1">中间件说明 <a class="header-anchor" href="#中间件说明" aria-label="Permalink to &quot;中间件说明&quot;">​</a></h3><h4 id="_1-什么是中间件" tabindex="-1">1.什么是中间件? <a class="header-anchor" href="#_1-什么是中间件" aria-label="Permalink to &quot;1.什么是中间件?&quot;">​</a></h4><ul><li>中间件的本质就是一个函数, 这个函数接收 3 个参数 request 请求对象、response 响应对象、next 函数</li><li>当请求进来，会从第一个中间件开始进行匹配。如果匹配则进入，如果不匹配，则向后依次对比匹配</li></ul><h4 id="_2-中间件的作用" tabindex="-1">2.中间件的作用? <a class="header-anchor" href="#_2-中间件的作用" aria-label="Permalink to &quot;2.中间件的作用?&quot;">​</a></h4><ul><li>将一个请求的处理过程，分发到多个环节中，目的效率高，便于维护。即每个环节专门干一件事</li></ul><h4 id="_3-中间件的分类" tabindex="-1">3.中间件的分类 <a class="header-anchor" href="#_3-中间件的分类" aria-label="Permalink to &quot;3.中间件的分类&quot;">​</a></h4><ol><li><p>应用级别中间件 绑定到 app 实例上的中间件 例如: app.get / app.post</p></li><li><p>路由级别中间件 绑定到 router 实例上的中间件 例如: router.get / router.post</p></li><li><p>错误处理中间件</p><ol><li><p>与其他中间件函数的定义基本相同</p></li><li><p>不同之处在于错误处理函数多了一个变量：err，即它有 4 个变量：err, req, res, next</p></li></ol></li><li><p>内置中间件</p><ol><li><p>express.static()</p></li><li><p>express.json()</p></li><li><p>express.urlencoded()</p></li><li><p>...</p></li></ol></li><li><p>第三方中间件</p><ol><li><p>cookie-parser</p></li><li><p>...</p></li></ol></li></ol><h2 id="监听请求里的对象" tabindex="-1">监听请求里的对象 <a class="header-anchor" href="#监听请求里的对象" aria-label="Permalink to &quot;监听请求里的对象&quot;">​</a></h2><h3 id="request-对象" tabindex="-1">Request 对象 <a class="header-anchor" href="#request-对象" aria-label="Permalink to &quot;Request 对象&quot;">​</a></h3><p>request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ul><li><p>req.app</p><ul><li>当callback为外部文件时，用req.app访问express的实例</li></ul></li><li><p>req.baseUrl</p><ul><li>获取路由当前安装的URL路径</li></ul></li><li><p>req.body / req.cookies</p><ul><li>获得「请求主体」/ Cookies</li></ul></li><li><p>req.fresh / req.stale</p><ul><li>判断请求是否还「新鲜」</li></ul></li><li><p>req.hostname / req.ip</p><ul><li>获取主机名和IP地址</li></ul></li><li><p>req.originalUrl</p><ul><li>获取原始请求URL</li></ul></li><li><p>req.params</p><ul><li>获取路由的parameters</li></ul></li><li><p>req.path</p><ul><li>获取请求路径</li></ul></li><li><p>req.protocol</p><ul><li>获取协议类型</li></ul></li><li><p>req.query</p><ul><li>获取URL的查询参数串</li></ul></li><li><p>req.route</p><ul><li>获取当前匹配的路由</li></ul></li><li><p>req.subdomains</p><ul><li>获取子域名</li></ul></li><li><p>req.accepts()</p><ul><li>检查可接受的请求的文档类型</li></ul></li><li><p>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages</p><ul><li>返回指定字符集的第一个可接受字符编码</li></ul></li><li><p>req.get()</p><ul><li>获取指定的HTTP请求头</li></ul></li><li><p>req.is()</p><ul><li>判断请求头Content-Type的MIME类型</li></ul></li></ul><h3 id="response-对象" tabindex="-1">Response 对象 <a class="header-anchor" href="#response-对象" aria-label="Permalink to &quot;Response 对象&quot;">​</a></h3><p>response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><ul><li><p>res.send()</p><ul><li>传送HTTP响应</li></ul></li><li><p>res.app</p><ul><li>同req.app一样</li></ul></li><li><p>res.append()</p><ul><li>追加指定HTTP头</li></ul></li><li><p>res.set()</p><ul><li>在res.append()后将重置之前设置的头</li></ul></li><li><p>res.cookie(name，value [，option])</p><ul><li><p>设置Cookie</p></li><li><p>opition: domain / expires / httpOnly / maxAge / path / secure / signed</p></li></ul></li><li><p>res.clearCookie()</p><ul><li>清除Cookie</li></ul></li><li><p>res.download()</p><ul><li>传送指定路径的文件</li></ul></li><li><p>res.get()</p><ul><li>返回指定的HTTP头</li></ul></li><li><p>res.json()</p><ul><li>传送JSON响应</li></ul></li><li><p>res.jsonp()</p><ul><li>传送JSONP响应</li></ul></li><li><p>res.location()</p><ul><li>只设置响应的Location HTTP头，不设置状态码或者close response</li></ul></li><li><p>res.redirect()</p><ul><li>设置响应的Location HTTP头，并且设置状态码302</li></ul></li><li><p>res.render(view,[locals],callback)</p><ul><li>渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</li></ul></li><li><p>res.sendFile(path [，options] [，fn])</p><ul><li>传送指定路径的文件 -会自动根据文件extension设定Content-Type</li></ul></li><li><p>res.set()</p><ul><li>设置HTTP头，传入object可以一次设置多个头</li></ul></li><li><p>res.status()</p><ul><li>设置HTTP状态码</li></ul></li><li><p>res.type()</p><ul><li>设置Content-Type的MIME类型</li></ul></li></ul><h2 id="_7-express-结合快速开发-express-generator-脚手架实战" tabindex="-1">7.express-结合快速开发 express-generator 脚手架实战 <a class="header-anchor" href="#_7-express-结合快速开发-express-generator-脚手架实战" aria-label="Permalink to &quot;7.express-结合快速开发 express-generator 脚手架实战&quot;">​</a></h2><p>express-generator 脚手架的安装和使用，<strong>请看文档</strong>：<code>Express快速开发脚手架</code></p><h3 id="注册和登录开发" tabindex="-1">注册和登录开发 <a class="header-anchor" href="#注册和登录开发" aria-label="Permalink to &quot;注册和登录开发&quot;">​</a></h3><h4 id="_1-实现登录注册" tabindex="-1">1.实现登录注册 <a class="header-anchor" href="#_1-实现登录注册" aria-label="Permalink to &quot;1.实现登录注册&quot;">​</a></h4><h5 id="路由-routes-user-js" tabindex="-1">路由：routes/user.js <a class="header-anchor" href="#路由-routes-user-js" aria-label="Permalink to &quot;路由：routes/user.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Router</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">registerUser</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">loginCheck</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../controller/userController&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/login&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 处理登录</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> loginCheck</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 存储登录状态</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">session</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">username</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">session</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">password</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">session</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">gender</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/register&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 注册用户</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> registerUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 返回注册结果</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/test&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">session</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">session</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;login ok&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;login error&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> router</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h5 id="路由控制器处理方法-controller-usercontroller-js" tabindex="-1">路由控制器处理方法：controller/userController.js <a class="header-anchor" href="#路由控制器处理方法-controller-usercontroller-js" aria-label="Permalink to &quot;路由控制器处理方法：controller/userController.js&quot;">​</a></h5><p>安装数据校验库：ajv</p><p>其他引用的模块方法继续看后面</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Ajv</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ajv&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> ajv</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Ajv</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> userSchema</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../validator/userValidator&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">getUser</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">createUser</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../service/userService&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">SuccessModel</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ErrorModel</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../model/resultModel&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	userDataFail</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	userExistsFail</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	userRegisterFail</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	userLoginFail</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../config/errorConst&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> generatePwd</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../utils/crypto&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 校验用户数据是否正确</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> data</span><span style="color:#7F848E;font-style:italic;"> 被校验的数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@returns</span><span style="color:#E5C07B;font-style:italic;"> {boolean | PromiseLike&lt;any&gt;}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> userValidate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> ajv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">userSchema</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 检查用户是否存在</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> username</span><span style="color:#7F848E;font-style:italic;"> 被检查的用户名称</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@returns</span><span style="color:#E5C07B;font-style:italic;"> {Promise&lt;boolean&gt;}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> userExists</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> users</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> getUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> users</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 用户注册</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> data</span><span style="color:#7F848E;font-style:italic;"> 用户数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@returns</span><span style="color:#E5C07B;font-style:italic;"> {Promise&lt;ErrorModel|*&gt;}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> registerUser</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">gender</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 1.校验数据是否正确</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> valid</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> userValidate</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">valid</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ErrorModel</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">userDataFail</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 2.判断当前注册的用户是否存储</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> isExists</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> userExists</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 3.判断是否可以注册</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">valid</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">isExists</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 密码加密之后再存储</span></span>
<span class="line"><span style="color:#C678DD;">			await</span><span style="color:#61AFEF;"> createUser</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">generatePwd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SuccessModel</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;注册成功&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ErrorModel</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">userRegisterFail</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ErrorModel</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">userExistsFail</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 登录</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> username</span><span style="color:#7F848E;font-style:italic;">  用户名</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> password</span><span style="color:#7F848E;font-style:italic;">  密码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@returns</span><span style="color:#E5C07B;font-style:italic;"> {Promise&lt;ErrorModel|*|SuccessModel|*&gt;}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> loginCheck</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 由于存储的密码是加密的, 所以登录时也要用加密的密码去登录</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> users</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> getUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">generatePwd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">users</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SuccessModel</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;登录成功&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] });</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ErrorModel</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">userLoginFail</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	registerUser</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	loginCheck</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br></div></div><h5 id="控制器的校验-schema-validator-uservalidator-js" tabindex="-1">控制器的校验 Schema：validator/userValidator.js <a class="header-anchor" href="#控制器的校验-schema-validator-uservalidator-js" aria-label="Permalink to &quot;控制器的校验 Schema：validator/userValidator.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> userSchema</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;object&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	properties</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		username</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			pattern</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">.[a-zA-Z0-9_-]+)+$&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			maxLength</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">255</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			minLength</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		password</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			pattern</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^[A-Za-z0-9]{6,20}$&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			maxLength</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			minLength</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		gender</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			pattern</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;[男,女,妖]&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	required</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;username&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;password&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> userSchema</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h5 id="数据库操作的服务方法-service-userservice-js" tabindex="-1">数据库操作的服务方法：service\\userService.js <a class="header-anchor" href="#数据库操作的服务方法-service-userservice-js" aria-label="Permalink to &quot;数据库操作的服务方法：service\\userService.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> User</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../db/model/user&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 根据用户名获取用户信息你</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> username</span><span style="color:#7F848E;font-style:italic;"> 被获取的用户名</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@returns</span><span style="color:#E5C07B;font-style:italic;"> {Promise&lt;*&gt;}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> getUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> results</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findAll</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			where</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				username</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				password</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> results</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> results</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findAll</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			where</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				username</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> results</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createUser</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">gender</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> results</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		username</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		password</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		gender</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> results</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;dataValues&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	getUser</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	createUser</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h5 id="请求和响应成功和错误函数方法-model-resultmodel-js" tabindex="-1">请求和响应成功和错误函数方法：model/resultModel.js <a class="header-anchor" href="#请求和响应成功和错误函数方法-model-resultmodel-js" aria-label="Permalink to &quot;请求和响应成功和错误函数方法：model/resultModel.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> BaseModel</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> code</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> msg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> SuccessModel</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> BaseModel</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ErrorModel</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> BaseModel</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	SuccessModel</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	ErrorModel</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h5 id="错误消息对象-config-errorconst-js" tabindex="-1">错误消息对象：config/errorConst.js <a class="header-anchor" href="#错误消息对象-config-errorconst-js" aria-label="Permalink to &quot;错误消息对象：config/errorConst.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	userDataFail</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		code</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1001</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;数据不符合预期&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	userExistsFail</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		code</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1002</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;用户已经存在&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	userRegisterFail</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		code</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1003</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;注册失败&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	userLoginFail</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		code</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1004</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;登录失败&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h5 id="md5-加密工具函数-utils-crypto-js" tabindex="-1">MD5 加密工具函数：utils/crypto.js <a class="header-anchor" href="#md5-加密工具函数-utils-crypto-js" aria-label="Permalink to &quot;MD5 加密工具函数：utils/crypto.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.导入加密模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> crypto</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;crypto&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> secret</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;com.it666&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.创建加密方法</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> _md5</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    MD5加密（加密不可逆）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    MD5的全称是Message-Digest Algorithm 5（信息-摘要算法）。 128位长度。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    目前MD5是一种不可逆算法。具有很高的安全性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    什么叫做不可逆?</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    不可以通过加密之后的内容还原加密之前的内容, 我们就称之为不可逆</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    * */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 1.指定加密方式</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> md5</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> crypto</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createHash</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;md5&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 2.指定需要加密的内容和加密之后输出的格式</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> md5</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 指定需要加密的内容</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">digest</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hex&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 指定加密之后输出的格式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    注意点:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    MD5加密, 只要加密的内容没有发生变化, 那么加密之后的内容就不会发生变化</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    所以正式因为如此, 虽然MD5是不可逆的, 但是可以暴力破解</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    正式因为如此, 所以仅仅通过MD5加密也不安全</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    所以我们在加密之前应该对原始数据进行加盐操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    什么叫做加盐?</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    给原始数据混入一些其它数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    * */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(hash);</span><span style="color:#7F848E;font-style:italic;"> // e80b5017098950fc58aad83c8c14978e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// e80b5017098950fc58aad83c8c14978e</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> hash</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> generatePwd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	password</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> password</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> secret</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> hash</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> _md5</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(hash);</span><span style="color:#7F848E;font-style:italic;"> // 4167228cfbe1daa78e88c41bf357618e --&gt; abcdefcom.it666</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> hash</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> generatePwd</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// _md5(&#39;abcdef&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// generatePwd(&#39;abcdef&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">数据库:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">source(原始值)   target(加密之后值)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">abcdef           e80b5017098950fc58aad83c8c14978e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h4 id="_2-存储登录状态-app-js" tabindex="-1">2.存储登录状态：app.js <a class="header-anchor" href="#_2-存储登录状态-app-js" aria-label="Permalink to &quot;2.存储登录状态：app.js&quot;">​</a></h4><p><strong>cookie 解析库</strong>：cookie-parser 库，导出成<code>cookieParser()</code>方法</p><p><strong>session 库</strong>：express-session 库，导出后使用<code>session()</code>方法</p><p><strong>保持登录状态</strong>：connect-redis 库，使用需要结合 session 库的方法，再使用存储的 RedisStore 常量方法，来保持登录状态</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 导入了一些第三方的模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> createError</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http-errors&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cookieParser</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cookie-parser&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> logger</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;morgan&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> session</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express-session&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> RedisStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;connect-redis&quot;</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">session</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> redisClient</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./db/redis&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./db/sync&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 初始化数据库表</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入了处理路由的模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> usersRouter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./routes/user&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建了服务端实例对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理动态网页</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;views&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;views&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;view engine&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;ejs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">在express中我们可以通过morgan来记录日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">我们只需要安装morgan, 导入morgan, 注册morgan的中间件即可</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">在注册morgan中间件的时候需要指定日志的模式, 不同的模式记录的内容也不同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">默认情况下morgan会将日志输出到控制台中, 当然我们也可以通过配置让它把日志写入到文件中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// create a write stream (in append mode)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> accessLogStream</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createWriteStream</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">	path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;log/access.log&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">flags</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">	logger</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;combined&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		stream</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">accessLogStream</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理post请求参数</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">urlencoded</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">extended</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> }));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解析cookie</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cookieParser</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 保存登录状态</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">	session</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;userId&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		secret</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;COM.it6666.*?&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 用于生成无关紧要的userId的密钥</span></span>
<span class="line"><span style="color:#E06C75;">		cookie</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">httpOnly</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">maxAge</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">24</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 60</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 60</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">		store</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RedisStore</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">redisClient</span><span style="color:#ABB2BF;"> }),</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理静态网页</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">static</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;public&quot;</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 注册处理路由模块</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">usersRouter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理错误</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">createError</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">404</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// set locals, only providing error in development</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">locals</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">locals</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">error</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;env&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;development&quot;</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> err</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// render the error page</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> 500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><hr><h3 id="日志记录" tabindex="-1">日志记录 <a class="header-anchor" href="#日志记录" aria-label="Permalink to &quot;日志记录&quot;">​</a></h3><h3 id="app-js-1" tabindex="-1">app.js： <a class="header-anchor" href="#app-js-1" aria-label="Permalink to &quot;app.js：&quot;">​</a></h3><p>使用 fs 模块：fs.createWriteStream() 方法创建日志流</p><p>安装 morgan 库：在 app.use()中间件使用，写入日志</p><ul><li>morgan 库 npm 文档：<a href="https://www.npmjs.com/package/morgan" target="_blank" rel="noreferrer">morgan - npm (npmjs.com)</a></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 导入了一些第三方的模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> createError</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http-errors&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cookieParser</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cookie-parser&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> logger</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;morgan&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> session</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express-session&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> RedisStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;connect-redis&quot;</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">session</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> redisClient</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./db/redis&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./db/sync&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 初始化数据库表</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入了处理路由的模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> usersRouter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./routes/user&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建了服务端实例对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理动态网页</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;views&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;views&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;view engine&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;ejs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">在express中我们可以通过morgan来记录日志</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">我们只需要安装morgan, 导入morgan, 注册morgan的中间件即可</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">在注册morgan中间件的时候需要指定日志的模式, 不同的模式记录的内容也不同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">默认情况下morgan会将日志输出到控制台中, 当然我们也可以通过配置让它把日志写入到文件中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// create a write stream (in append mode)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> accessLogStream</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createWriteStream</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">	path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;log/access.log&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">flags</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">	logger</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;combined&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		stream</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">accessLogStream</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理post请求参数</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">urlencoded</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">extended</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> }));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解析cookie</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cookieParser</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 保存登录状态</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">	session</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;userId&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		secret</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;COM.it6666.*?&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 用于生成无关紧要的userId的密钥</span></span>
<span class="line"><span style="color:#E06C75;">		cookie</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">httpOnly</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">maxAge</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">24</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 60</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 60</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">		store</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RedisStore</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">redisClient</span><span style="color:#ABB2BF;"> }),</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理静态网页</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">static</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;public&quot;</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 注册处理路由模块</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">usersRouter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理错误</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">createError</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">404</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// set locals, only providing error in development</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">locals</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">locals</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">error</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;env&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;development&quot;</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> err</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// render the error page</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> 500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><h2 id="静态资源库" tabindex="-1">静态资源库 <a class="header-anchor" href="#静态资源库" aria-label="Permalink to &quot;静态资源库&quot;">​</a></h2><p>可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：</p><p>app.use(express.static(&#39;public&#39;))</p><ul><li><p>public/index.html</p></li><li><p>public/images</p></li><li><p>public/images/bg.jpeg</p></li><li><p>public/css</p></li></ul><p>如果要使用多个静态资源目录，请多次调用 express.static 中间件函数：</p><ul><li><p>app.use(express.static(&#39;public&#39;))</p></li><li><p>app.use(express.static(&#39;files&#39;))</p></li></ul><p>Express 在静态目录查找文件，因此，存放静态文件的目录名不会出现在 URL 中。但可以给静态目录添加一个路由：</p><ul><li><p>app.use(&#39;/static&#39;, express.static(path.join(__dirname, &#39;public&#39;)))</p><ul><li>设置/static为/public目录的路由</li></ul></li><li><p>访问</p><ul><li><a href="http://localhost:80/static/css" target="_blank" rel="noreferrer">http://localhost:80/static/css</a> <a href="http://localhost:80/static/css/index.css" target="_blank" rel="noreferrer">http://localhost:80/static/css/index.css</a> <a href="http://localhost:80/static/image" target="_blank" rel="noreferrer">http://localhost:80/static/image</a> <a href="http://localhost:80/static/images/bg.jpeg" target="_blank" rel="noreferrer">http://localhost:80/static/images/bg.jpeg</a> <a href="http://localhost:80/static/index.html" target="_blank" rel="noreferrer">http://localhost:80/static/index.html</a></li></ul></li></ul><p>为了安全，最好使用绝对路由：</p><ul><li><p>app.use(&#39;/static&#39;, express.static(path.join(__dirname, &#39;public&#39;)))</p></li><li><p>运行：node server.js</p></li></ul><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h2><h3 id="cors跨域" tabindex="-1">CORS跨域 <a class="header-anchor" href="#cors跨域" aria-label="Permalink to &quot;CORS跨域&quot;">​</a></h3><p>CORS响应头部</p><ul><li><p>Access-Control-Allow-Origin</p></li><li><p>Access-Control-Allow-Headers</p></li><li><p>Access-Control-Allow-Methods</p></li></ul><p>CORS请求的分类</p><ul><li><p>简单请求</p><ul><li><p>同时满足以下两大条件，就属于简单请求：</p></li><li><p>1.请求方式：GET、POST、HEAD 三者之一</p></li><li><p>2.HTTP头部信息不超过以下几种字段： 无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width、Content-Type(只有三个值 application/x-www-form-urlencoded、multipart/from-data、text/plain)</p></li></ul></li></ul><p>预检请求</p><ul><li><p>只要符合以下任何一个条件的请求，都需要进行预检请求</p></li><li><p>1.请求方式：GET、POST、HEAD 之外的请求 Method 类型</p></li><li><p>2.请求头中包含自定义头部字段</p></li><li><p>3.向服务器发送了 application/json 格式的数据</p></li><li><p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为 “预检请求” 。 服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据</p></li></ul><p>简单请求和预检请求的区别</p><ul><li><p>简单请求的特点：客户端与服务器之间只会发生一次请求</p></li><li><p>预检请求的特点：客户端与服务器之间会发生两次请求，OPTION 预检请求成功之后，才会发起真正的请求</p></li></ul><h3 id="jsonp跨域" tabindex="-1">JSONP跨域 <a class="header-anchor" href="#jsonp跨域" aria-label="Permalink to &quot;JSONP跨域&quot;">​</a></h3><ul><li>概念和特点</li></ul><h2 id="jwt身份验证" tabindex="-1">jwt身份验证 <a class="header-anchor" href="#jwt身份验证" aria-label="Permalink to &quot;jwt身份验证&quot;">​</a></h2><p>1.安装</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> jsonwebtoken</span><span style="color:#98C379;"> express-jwt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>jsonwebtoken</p><ul><li>用于生成JWT字符串</li></ul></li><li><p>express-jwt</p><ul><li>用于将 JWT 字符串解析还原成 JSON 对象</li></ul></li></ul><p>2.导入</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> jwt</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;jsonwebtoken&#39;</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> expressJWT</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express-jwt&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>3.定义secret密钥</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> secretKey</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;nianan No1 q_q&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4.使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  status</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;登录成功&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  token</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">jwt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sign</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">userinfo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;"> }, </span><span style="color:#E06C75;">secretKey</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">expiresIn</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;30s&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">jwt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sign</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">userinfo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;"> }, </span><span style="color:#E06C75;">secretKey</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">expiresIn</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;30s&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">jwt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sign</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>jwt.sign()</p><ul><li><p>生成 JWT 字符串。并通过 token 属性 发送给客户端</p></li><li><p>参数</p><ul><li><p>参数1：用户的信息对象</p></li><li><p>参数2：加密的密匙</p></li><li><p>参数3：配置的对象</p></li></ul></li></ul><p>5.将 客户端发送过来的 JWT 字符串 解密 解析还原为 JSON 对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">expressJWT</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">secret</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">secretKey</span><span style="color:#ABB2BF;"> }).</span><span style="color:#61AFEF;">unless</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">api</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">] }))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>6.使用req.use 获取用户信息</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">({  </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,  </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;获取用户信息成功&#39;</span><span style="color:#ABB2BF;">,  </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">use</span><span style="color:#ABB2BF;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>7.捕获 JWT 解析失败的错误</p><p>Express 错误中间件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">( (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;admin&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">401</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;无效的token&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 其他原因导致的错误</span></span>
<span class="line"><span style="color:#E5C07B;">  res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;未知错误&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="身份认证-express-session" tabindex="-1">身份认证 express-session <a class="header-anchor" href="#身份认证-express-session" aria-label="Permalink to &quot;身份认证 express-session&quot;">​</a></h2><p>1.安装</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> express-session</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.导入</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">const</span><span style="color:#98C379;"> session</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">&#39;express-session&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.配置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">() </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> session</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express-session&#39;</span><span style="color:#ABB2BF;">) </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 配置挂载 </span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">session</span><span style="color:#ABB2BF;">({    </span></span>
<span class="line"><span style="color:#E06C75;">        secret</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ddssaasd&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 可以为任意字符串    </span></span>
<span class="line"><span style="color:#E06C75;">         resave</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 固定写法    </span></span>
<span class="line"><span style="color:#E06C75;">         saveUninitialized</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#7F848E;font-style:italic;"> // 固定写法 </span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>4.接口里使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将用户的信息存储到Session中 </span></span>
<span class="line"><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">session</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置用户的登录状态 </span></span>
<span class="line"><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">session</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">islogin</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>5.从 session 中取出数据</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">session</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">username</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>6.清空当前用户session数据</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">session</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用-express-写接口" tabindex="-1">使用 Express 写接口 <a class="header-anchor" href="#使用-express-写接口" aria-label="Permalink to &quot;使用 Express 写接口&quot;">​</a></h2><h3 id="_1-创建api路由模块" tabindex="-1">1.创建API路由模块 <a class="header-anchor" href="#_1-创建api路由模块" aria-label="Permalink to &quot;1.创建API路由模块&quot;">​</a></h3><p>apiRouter.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Router</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 挂载对应的路由</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> router</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-导入并注册路由模块" tabindex="-1">2.导入并注册路由模块 <a class="header-anchor" href="#_2-导入并注册路由模块" aria-label="Permalink to &quot;2.导入并注册路由模块&quot;">​</a></h3><p>diaoyong.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入调用路由模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./apiRouter&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 把路由模块，注册到 app 上</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/api&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-编写-get-接口" tabindex="-1">3.编写 GET 接口 <a class="header-anchor" href="#_3-编写-get-接口" aria-label="Permalink to &quot;3.编写 GET 接口&quot;">​</a></h3><p>apiRouter.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 挂载对应的路由  &#39;/get&#39; ： 路由地址</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/get&#39;</span><span style="color:#ABB2BF;">,(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 通过req.query 获取客户端通过查询字符串，发送到服务器的数据</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> query</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 向客户端响应处理的 结果</span></span>
<span class="line"><span style="color:#E5C07B;">  res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 200 成功处理，其他失败</span></span>
<span class="line"><span style="color:#E06C75;">    status</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 响应的消息描述</span></span>
<span class="line"><span style="color:#E06C75;">    msg</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;GET请求成功！&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 需要响应给客户端的数据</span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>get方法请求地址为：<a href="http://localhost/api/get" target="_blank" rel="noreferrer">http://localhost/api/get</a></p><h3 id="_4-编写-post-接口" tabindex="-1">4.编写 POST 接口 <a class="header-anchor" href="#_4-编写-post-接口" aria-label="Permalink to &quot;4.编写 POST 接口&quot;">​</a></h3><p>apiRouter.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 挂载对应的路由  &#39;/post&#39; ： 路由地址</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/post&#39;</span><span style="color:#ABB2BF;">,(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 通过req.query 获取客户端通过查询字符串，发送到服务器的数据</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> query</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 向客户端响应处理的 结果</span></span>
<span class="line"><span style="color:#E5C07B;">  res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 200 成功处理，其他失败</span></span>
<span class="line"><span style="color:#E06C75;">    status</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 响应的消息描述</span></span>
<span class="line"><span style="color:#E06C75;">    msg</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;GET请求成功！&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 需要响应给客户端的数据</span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>POST请求地址为：<a href="http://localhost/api/get" target="_blank" rel="noreferrer">http://localhost/api/get</a></p><h3 id="_5-使用-cors-中间件解决跨域问题" tabindex="-1">5.使用 cors 中间件解决跨域问题 <a class="header-anchor" href="#_5-使用-cors-中间件解决跨域问题" aria-label="Permalink to &quot;5.使用 cors 中间件解决跨域问题&quot;">​</a></h3><p>1.运行 npm i cors 命令</p><ul><li>安装中间件</li></ul><p>2.项目中使用 const cors = require(&#39;cors&#39;)</p><ul><li>导入中间件</li></ul><p>3.在使用路由前 调用 app.use(cors())</p><ul><li>配置中间件</li></ul><h3 id="_6-安装mysql模块操作连接操作" tabindex="-1">6.安装mysql模块操作连接操作 <a class="header-anchor" href="#_6-安装mysql模块操作连接操作" aria-label="Permalink to &quot;6.安装mysql模块操作连接操作&quot;">​</a></h3><h2 id="接口接收解析插件" tabindex="-1">接口接收解析插件 <a class="header-anchor" href="#接口接收解析插件" aria-label="Permalink to &quot;接口接收解析插件&quot;">​</a></h2><h3 id="multer" tabindex="-1">multer <a class="header-anchor" href="#multer" aria-label="Permalink to &quot;multer&quot;">​</a></h3><ul><li><p>上传的文件数据 解析插件</p><ul><li><a href="https://www.expressjs.com.cn/resources/middleware/multer.html" target="_blank" rel="noreferrer">https://www.expressjs.com.cn/resources/middleware/multer.html</a></li></ul></li><li><p>解析 <code>multipart/form-data</code> 格式的表单数据</p></li></ul><h3 id="body-parser-或者-express-urlencoded" tabindex="-1">body-parser 或者 express.urlencoded() <a class="header-anchor" href="#body-parser-或者-express-urlencoded" aria-label="Permalink to &quot;body-parser 或者 express.urlencoded()&quot;">​</a></h3><ul><li><p>表单提交的x-www-from-urlencoded数据</p><ul><li><a href="https://www.expressjs.com.cn/resources/middleware/body-parser.html" target="_blank" rel="noreferrer">https://www.expressjs.com.cn/resources/middleware/body-parser.html</a></li></ul></li><li><p>解析 application/x-www-from-urlencoded 格式 表单数据</p></li></ul><h2 id="模板引擎之ejs" tabindex="-1">模板引擎之EJS <a class="header-anchor" href="#模板引擎之ejs" aria-label="Permalink to &quot;模板引擎之EJS&quot;">​</a></h2><p>EJS 是一套简单的模板语言，帮你利用普通的 JavaScript 代码生成 HTML 页面</p><p>1.下载Ejs</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> ejs</span><span style="color:#D19A66;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.同目录下新建myejs.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置模板文件的目录,并且新建一个viwes的目录</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;views&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;./views&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 注册模板引擎</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;view engine&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;ejs&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用res.render()来渲染一个视图并将呈现的HTML字符串发送给客户端；</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">,) {</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;index&#39;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;测试&#39;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 监听8083端口</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">8083</span><span style="color:#ABB2BF;">, ()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Server is running at http://localhost:8083&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>3.在新建views目录中新建index.ejs</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">&lt;%=</span><span style="color:#E06C75;"> title</span><span style="color:#56B6C2;"> %&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4.运行：node myejs.js</p>`,178)]))}const u=n(e,[["render",o]]);export{F as __pageData,u as default};
