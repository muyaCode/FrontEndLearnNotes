import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"nextTick 前置：event loop 和 nextTick","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端主流开发框架/Vue/Vue全家桶源码解析/nextTick前置：event loop 和 nextTick.md","filePath":"Document/前端主流开发框架/Vue/Vue全家桶源码解析/nextTick前置：event loop 和 nextTick.md","lastUpdated":1750954157000}'),e={name:"Document/前端主流开发框架/Vue/Vue全家桶源码解析/nextTick前置：event loop 和 nextTick.md"};function o(t,s,c,r,B,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="nexttick-前置-event-loop-和-nexttick" tabindex="-1">nextTick 前置：event loop 和 nextTick <a class="header-anchor" href="#nexttick-前置-event-loop-和-nexttick" aria-label="Permalink to &quot;nextTick 前置：event loop 和 nextTick&quot;">​</a></h1><p>在我们学习<a href="https://cn.vuejs.org/api/general.html#nexttick" target="_blank" rel="noreferrer">nextTick</a> 之前需要先了解 Event Loop 事件循环机制</p><p><a href="https://xiaoman.blog.csdn.net/article/details/125237755" target="_blank" rel="noreferrer">学习 Vue3 第三十五章（event loop 和 nextTick）_vue3 setup nexttick-CSDN 博客</a></p><h2 id="js-执行机制" tabindex="-1">JS 执行机制 <a class="header-anchor" href="#js-执行机制" aria-label="Permalink to &quot;JS 执行机制&quot;">​</a></h2><p>在我们学 js 的时候都知道 js 是单线程的如果是多线程的话会引发一个问题在同一时间同时操作 DOM 一个增加一个删除 JS 就不知道到底要干嘛了，所以这个语言是单线程的但是随着 HTML5 到来 js 也支持了多线程 webWorker 但是也是不允许操作 DOM。</p><p>单线程就意味着所有的任务都需要排队，后面的任务需要等前面的任务执行完才能执行，如果前面的任务耗时过长，后面的任务就需要一直等，一些从用户角度上不需要等待的任务就会一直等待，这个从体验角度上来讲是不可接受的，所以 JS 中就出现了异步的概念。</p><h2 id="同步任务" tabindex="-1">同步任务 <a class="header-anchor" href="#同步任务" aria-label="Permalink to &quot;同步任务&quot;">​</a></h2><p>代码从上到下按顺序执行</p><h2 id="异步任务" tabindex="-1">异步任务 <a class="header-anchor" href="#异步任务" aria-label="Permalink to &quot;异步任务&quot;">​</a></h2><h3 id="_1-宏任务" tabindex="-1">1.宏任务 <a class="header-anchor" href="#_1-宏任务" aria-label="Permalink to &quot;1.宏任务&quot;">​</a></h3><p>script(整体代码)、setTimeout、setInterval、UI 交互事件、postMessage、Ajax</p><h3 id="_2-微任务" tabindex="-1">2.微任务 <a class="header-anchor" href="#_2-微任务" aria-label="Permalink to &quot;2.微任务&quot;">​</a></h3><p>Promise.then catch finally、MutaionObserver、process.nextTick(Node.js 环境)</p><h3 id="运行机制" tabindex="-1">运行机制 <a class="header-anchor" href="#运行机制" aria-label="Permalink to &quot;运行机制&quot;">​</a></h3><p>所有的同步任务都是在主进程执行的形成一个执行栈，主线程之外，还存在一个&quot;任务队列&quot;，异步任务执行队列中先执行宏任务，然后清空当次宏任务中的所有微任务，然后进行下一个 tick 如此形成循环。</p><p>nextTick 就是创建一个异步任务，那么它自然要等到同步任务执行完成后才执行。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;xiaoman&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{ text }}</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> @click</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;change&quot;</span><span style="color:#ABB2BF;">&gt;change div&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ts&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">nextTick</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> text</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小满开飞机&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> xiaoman</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HTMLElement</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> change</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	text</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;小满不开飞机&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xiaoman</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">innerText</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//小满开飞机</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> nextTick</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xiaoman</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">innerText</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//小满不开飞机</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> scoped</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>源码地址：core\\packages\\runtime-core\\src\\scheduler.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> resolvedPromise</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> currentFlushPromise</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">null</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> nextTick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">&gt;(</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">	this</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	fn</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: (</span><span style="color:#E5C07B;font-style:italic;">this</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> currentFlushPromise</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> resolvedPromise</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> fn</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> fn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>nextTick 接受一个参数 fn（函数）定义了一个变量 P 这个 P 最终返回都是 Promise，最后是 return 如果传了 fn 就使用变量 P.then 执行一个微任务去执行 fn 函数，then 里面 this 如果有值就调用 bind 改变 this 指向返回新的函数，否则直接调用 fn，如果没传 fn，就返回一个 promise，最终结果都会返回一个 promise</p><p>在我们之前讲过的 ref 源码中有一段 triggerRefValue 他会去调用 triggerEffects。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> triggerRefValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ref</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RefBase</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">&gt;, </span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	ref</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> toRaw</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ref</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">__DEV__</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			triggerEffects</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ref</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">				target</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">TriggerOpTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SET</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				newValue</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			triggerEffects</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ref</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>...</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> triggerEffects</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	dep</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">ReactiveEffect</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	debuggerEventExtraInfo</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">DebuggerEventExtraInfo</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// spread into array for stabilization</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> effect</span><span style="color:#C678DD;"> of</span><span style="color:#61AFEF;"> isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> dep</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> [...</span><span style="color:#E06C75;">dep</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">effect</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> activeEffect</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> effect</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">allowRecurse</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">__DEV__</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> effect</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onTrigger</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				effect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onTrigger</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">effect</span><span style="color:#ABB2BF;"> }, </span><span style="color:#E06C75;">debuggerEventExtraInfo</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//当响应式对象发生改变后，执行 effect 如果有 scheduler 这个参数，会执行这个 scheduler 函数</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">effect</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scheduler</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				effect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scheduler</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				effect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>那么 scheduler 这个函数从哪儿来的 我们看这个类 ReactiveEffect</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ReactiveEffect</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">  active</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#E06C75;">  deps</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#E06C75;">  parent</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ReactiveEffect</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * Can be attached after creation</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@internal</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#E06C75;">  computed</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ComputedRefImpl</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@internal</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#E06C75;">  allowRecurse</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  onStop</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // dev only</span></span>
<span class="line"><span style="color:#61AFEF;">  onTrack</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">DebuggerEvent</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // dev only</span></span>
<span class="line"><span style="color:#61AFEF;">  onTrigger</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">DebuggerEvent</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E06C75;font-style:italic;"> scheduler</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">EffectScheduler</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">null</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//我在这儿</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    scope</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">EffectScope</span></span>
<span class="line"><span style="color:#ABB2BF;">  ) {</span></span>
<span class="line"><span style="color:#61AFEF;">    recordEffectScope</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>scheduler 作为一个参数传进来的</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> effect</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">effect</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReactiveEffect</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">	componentUpdateFn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> queueJob</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">update</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">	instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scope</span><span style="color:#7F848E;font-style:italic;"> // track it in component&#39;s effect scope</span></span>
<span class="line"><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>他是在初始化 effect 通过 queueJob 传进来的</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//queueJob 维护job列队，有去重逻辑，保证任务的唯一性，每次调用去执行，被调用的时候去重，每次调用去执行 queueFlush</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> queueJob</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">job</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">SchedulerJob</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断条件：主任务队列为空 或者 有正在执行的任务且没有在主任务队列中  &amp;&amp; job 不能和当前正在执行任务及后面待执行任务相同</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 重复数据删除：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// - 使用Array.includes(Obj, startIndex) 的 起始索引参数：startIndex</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// - startIndex默认为包含当前正在运行job的index，此时，它不能再次递归触发自身</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// - 如果job是一个watch()回调函数或者当前job允许递归触发，则搜索索引将+1，以允许他递归触发自身-用户需要确保回调函数不会死循环</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#56B6C2;">			!</span><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">				job</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				isFlushing</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> job</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">allowRecurse</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> flushIndex</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> flushIndex</span></span>
<span class="line"><span style="color:#ABB2BF;">			)) </span><span style="color:#56B6C2;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">		job</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> currentPreFlushParentJob</span></span>
<span class="line"><span style="color:#ABB2BF;">	) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">job</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">job</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">findInsertionIndex</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">job</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">job</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#61AFEF;">		queueFlush</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>queueJob 维护 job 列队 并且调用 queueFlush</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> queueFlush</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 避免重复调用flushJobs</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isFlushing</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">isFlushPending</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		isFlushPending</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//开启异步任务处理flushJobs</span></span>
<span class="line"><span style="color:#E06C75;">		currentFlushPromise</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> resolvedPromise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">flushJobs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>queueFlush 给每一个队列创建了微任务</p><h2 id="如何去理解-tick" tabindex="-1">如何去理解 Tick <a class="header-anchor" href="#如何去理解-tick" aria-label="Permalink to &quot;如何去理解 Tick&quot;">​</a></h2><p>例如我们显示器是 60FPS</p><p>那浏览器绘制一帧就是 1000 / 60 ≈ 16.6ms</p><p>那浏览器这一帧率做了什么</p><p>1.处理用户的事件，就是 event 例如 click，input change 等。</p><p>2.执行定时器任务</p><p>3.执行 requestAnimationFrame</p><p>4.执行 dom 的回流与重绘</p><p>5.计算更新图层的绘制指令</p><p>6.绘制指令合并主线程 如果有空余时间会执行 requestidlecallback</p><p>所以 一个 Tick 就是去做了这些事</p><h2 id="课程代码" tabindex="-1">课程代码 <a class="header-anchor" href="#课程代码" aria-label="Permalink to &quot;课程代码&quot;">​</a></h2><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;wraps&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item&quot;</span><span style="color:#D19A66;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item in chatList&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;{{ item.name }}:&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;{{ item.message }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ipt&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">textarea</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ipt&quot;</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#FFFFFF;"> /</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> @click</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;send&quot;</span><span style="color:#ABB2BF;">&gt;send&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;ts&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">reactive</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">nextTick</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getCurrentInstance</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HelloWorld</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/HelloWorld.vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// let instance = getCurrentInstance()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(instance);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">watch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldVal</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//next Tick</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//60FPS 1000/60 = 16.7ms</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1.处理用户的事件，就是event 例如 click，input change 等。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.执行定时器任务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.执行 requestAnimationFrame</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 4.执行dom 的回流与重绘</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 5.计算更新图层的绘制指令</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 6.绘制指令合并主线程 如果有空余时间会执行 requestidlecallback</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// for (let i =0;i&lt;1000;i++) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   current.value = i</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> chatList</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reactive</span><span style="color:#ABB2BF;">([{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xxxxxxxxx&quot;</span><span style="color:#ABB2BF;"> }]);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> box</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HTMLDivElement</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> ipt</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//Vue 更新dom是异步的 数据更新是同步</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//我们本次执行的代码是同步代码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//当我们操作dom 的时候发现数据读取的是上次的 就需要使用nextIick</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> send</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	chatList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小满&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		message</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ipt</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//1.回调函数模式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//2.async await 写法</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> nextTick</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	box</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 99999999</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//ipt.value = &#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> scoped</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;less&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">.wraps {</span></span>
<span class="line"><span style="color:#ABB2BF;">	margin: 10px auto;</span></span>
<span class="line"><span style="color:#ABB2BF;">	width: 500px;</span></span>
<span class="line"><span style="color:#ABB2BF;">	height: 400px;</span></span>
<span class="line"><span style="color:#ABB2BF;">	overflow: auto;</span></span>
<span class="line"><span style="color:#ABB2BF;">	overflow-x: hidden;</span></span>
<span class="line"><span style="color:#ABB2BF;">	background: #fff;</span></span>
<span class="line"><span style="color:#ABB2BF;">	border: 1px solid #ccc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	.item {</span></span>
<span class="line"><span style="color:#ABB2BF;">		width: 100%;</span></span>
<span class="line"><span style="color:#ABB2BF;">		height: 50px;</span></span>
<span class="line"><span style="color:#ABB2BF;">		background: #ccc;</span></span>
<span class="line"><span style="color:#ABB2BF;">		display: flex;</span></span>
<span class="line"><span style="color:#ABB2BF;">		align-items: center;</span></span>
<span class="line"><span style="color:#ABB2BF;">		padding: 0 10px;</span></span>
<span class="line"><span style="color:#ABB2BF;">		border-bottom: 1px solid #fff;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">.ipt {</span></span>
<span class="line"><span style="color:#ABB2BF;">	margin: 10px auto;</span></span>
<span class="line"><span style="color:#ABB2BF;">	width: 500px;</span></span>
<span class="line"><span style="color:#ABB2BF;">	height: 40px;</span></span>
<span class="line"><span style="color:#ABB2BF;">	background: #fff;</span></span>
<span class="line"><span style="color:#ABB2BF;">	border: 1px solid #ccc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	textarea {</span></span>
<span class="line"><span style="color:#ABB2BF;">		width: 100%;</span></span>
<span class="line"><span style="color:#ABB2BF;">		height: 100%;</span></span>
<span class="line"><span style="color:#ABB2BF;">		border: none;</span></span>
<span class="line"><span style="color:#ABB2BF;">		outline: none;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	button {</span></span>
<span class="line"><span style="color:#ABB2BF;">		width: 100px;</span></span>
<span class="line"><span style="color:#ABB2BF;">		margin: 10px 0;</span></span>
<span class="line"><span style="color:#ABB2BF;">		float: right;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br></div></div>`,46)]))}const F=n(e,[["render",o]]);export{b as __pageData,F as default};
