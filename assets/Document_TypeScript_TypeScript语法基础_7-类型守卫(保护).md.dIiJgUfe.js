import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"7.类型守卫(保护)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/TypeScript/TypeScript语法基础/7-类型守卫(保护).md","filePath":"Document/TypeScript/TypeScript语法基础/7-类型守卫(保护).md","lastUpdated":1750954157000}'),e={name:"Document/TypeScript/TypeScript语法基础/7-类型守卫(保护).md"};function o(r,s,c,t,y,B){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_7-类型守卫-保护" tabindex="-1">7.类型守卫(保护) <a class="header-anchor" href="#_7-类型守卫-保护" aria-label="Permalink to &quot;7.类型守卫(保护)&quot;">​</a></h1><ul><li>类型守卫就是一些表达式，他们在编译的时候就能通过类型信息确保某个作用域内变量的类型</li><li>类型守卫就是能够通过关键字判断出分支中的类型</li></ul><h2 id="_0-为什么要用类型守卫" tabindex="-1">0 为什么要用类型守卫 <a class="header-anchor" href="#_0-为什么要用类型守卫" aria-label="Permalink to &quot;0 为什么要用类型守卫&quot;">​</a></h2><p><strong>类型守卫定义</strong>：在 语句的块级作用域【 if 语句内或条目运算符表达式内】缩小变量的一种类型推断的行为。</p><p><strong>类型守卫产生时机</strong>：TS 条件语句中遇到下列条件关键字时，会在语句的块级作用域内缩小变量的类型，这种类型推断的行为称作类型守卫(Type Guard )。类型守卫可以帮助我们在块级作用域中获得更为需要的精确变量类型。</p><h2 id="_1-typeof-类型守卫" tabindex="-1">1 typeof 类型守卫 <a class="header-anchor" href="#_1-typeof-类型守卫" aria-label="Permalink to &quot;1 typeof 类型守卫&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> double</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> input</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;string&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> input</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> input</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> input</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;number&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> input</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_2-instanceof类型守卫" tabindex="-1">2 instanceof类型守卫 <a class="header-anchor" href="#_2-instanceof类型守卫" aria-label="Permalink to &quot;2 instanceof类型守卫&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">!: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Bird</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    swing</span><span style="color:#ABB2BF;">!: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">animal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">animal</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">animal</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">swing</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">animal</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_3-null守卫" tabindex="-1">3 null守卫 <a class="header-anchor" href="#_3-null守卫" aria-label="Permalink to &quot;3 null守卫&quot;">​</a></h2><ul><li>如果开启了<code>strictNullChecks</code>选项，那么对于可能为null的变量不能调用它上面的方法和属性</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getFirstLetter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //第一种方式是加上null判断</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">s</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //第二种处理是增加一个或的处理</span></span>
<span class="line"><span style="color:#E06C75;">    s</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//它并不能处理一些复杂的判断，需要加非空断言操作符</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getFirstLetter2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> log</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// 非空断言</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    s</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    log</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="_4-链判断运算符" tabindex="-1">4 链判断运算符 <a class="header-anchor" href="#_4-链判断运算符" aria-label="Permalink to &quot;4 链判断运算符&quot;">​</a></h2><ul><li>链判断运算符是一种先检查属性是否存在，再尝试访问该属性的运算符，其符号为 ?.</li><li>如果运算符左侧的操作数 ?. 计算为 undefined 或 null，则表达式求值为 undefined 。否则，正常触发目标属性访问，方法或函数调用。</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 如果a是null/undefined,那么返回undefined，否则返回a.b的值.</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> undefined</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">?.[</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// 如果a是null/undefined,那么返回undefined，否则返回a[x]的值</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> undefined</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">?.</span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 如果a是null/undefined,那么返回undefined</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> undefined</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 如果a.b不函数的话抛类型错误异常,否则计算a.b()的结果</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">a</span><span style="color:#ABB2BF;">?.(); </span><span style="color:#7F848E;font-style:italic;">// 如果a是null/undefined,那么返回undefined</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> undefined</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> a</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 如果A不是函数会抛出类型错误</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 否则 调用a这个函数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_5-可辨识的联合类型" tabindex="-1">5 可辨识的联合类型 <a class="header-anchor" href="#_5-可辨识的联合类型" aria-label="Permalink to &quot;5 可辨识的联合类型&quot;">​</a></h2><ul><li>就是利用联合类型中的共有字段进行类型保护的一种技巧</li><li>相同字段的不同取值就是可辨识</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> WarningButton</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  class</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;warning&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  text1</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;修改&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> DangerButton</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  class</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;danger&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  text2</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;删除&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Button</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> WarningButton</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">DangerButton</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getButton</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">button</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Button</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">button</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">class</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;warning&#39;</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">button</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">button</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">class</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;danger&#39;</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">button</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>类型字面量+可辨识联合类型</strong>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    username</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Action</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;add&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    payload</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">User</span></span>
<span class="line"><span style="color:#ABB2BF;">} | {</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;delete&#39;</span></span>
<span class="line"><span style="color:#E06C75;">    payload</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> UserReducer</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Action</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#98C379;"> &quot;add&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">      let</span><span style="color:#E06C75;"> user</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">User</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#98C379;"> &quot;delete&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">      let</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">      break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="_6-in操作符" tabindex="-1">6 in操作符 <a class="header-anchor" href="#_6-in操作符" aria-label="Permalink to &quot;6 in操作符&quot;">​</a></h2><p>in 运算符可以被用于参数类型是否包含于指定的接口的判断</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    swing</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Dog</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    leg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getNumber</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Bird</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Dog</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#98C379;">&quot;swing&quot;</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">swing</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">leg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_7-自定义的类型守卫" tabindex="-1">7 自定义的类型守卫 <a class="header-anchor" href="#_7-自定义的类型守卫" aria-label="Permalink to &quot;7 自定义的类型守卫&quot;">​</a></h2><ul><li>TypeScript 里的类型保护本质上就是一些表达式，它们会在运行时检查类型信息，以确保在某个作用域里的类型是符合预期的</li><li><code>type is Type1Class</code>就是类型谓词</li><li>谓词为 <code>parameterName is Type</code>这种形式,<code>parameterName</code>必须是来自于当前函数签名里的一个参数名</li><li>每当使用一些变量调用<code>isType1</code>时，如果原始类型兼容，<code>TypeScript</code>会将该变量缩小到该特定类型</li></ul><p>语法：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> 函数名</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">形参:</span><span style="color:#98C379;"> 参数类型【参数类型大多为any】</span><span style="color:#ABB2BF;">): 形参 is A类型 {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#D19A66;">  true</span><span style="color:#98C379;"> or</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 自定义守卫1</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isType1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type1Class</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Type2Class</span><span style="color:#ABB2BF;">): </span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#C678DD;"> is</span><span style="color:#E5C07B;"> Type1Class</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (&lt;</span><span style="color:#E5C07B;">Type1Class</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">func1</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  swing</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Dog</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  leg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 自定义守卫2：没有相同字段可以定义一个类型保护函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isBird</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Bird</span><span style="color:#ABB2BF;">|</span><span style="color:#E5C07B;">Dog</span><span style="color:#ABB2BF;">): </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#C678DD;"> is</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (&lt;</span><span style="color:#E5C07B;">Bird</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">swing</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // return (x as Bird).swing == 2;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getAnimal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Bird</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Dog</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isBird</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">swing</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">leg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>可以参考vue3中的isRef的守卫方法：<a href="https://github.com/vuejs/core/blob/272ab9fbdcb1af0535108b9f888e80d612f9171d/packages/reactivity/src/ref.ts#L96" target="_blank" rel="noreferrer">core/packages/reactivity/src/ref.ts at 272ab9fbdcb1af0535108b9f888e80d612f9171d · vuejs/core (github.com)</a></p><h2 id="_8-unknown" tabindex="-1">8 unknown <a class="header-anchor" href="#_8-unknown" aria-label="Permalink to &quot;8 unknown&quot;">​</a></h2><ul><li>TypeScript 3.0 引入了新的unknown 类型，它是 any 类型对应的安全类型</li><li>unknown 和 any 的主要区别是 unknown 类型会更加严格：在对 unknown 类型的值执行大多数操作之前，我们必须进行某种形式的检查。而在对 any 类型的值执行操作之前，我们不必进行任何检查</li></ul><h3 id="_8-1-any-类型" tabindex="-1">8.1 any 类型 <a class="header-anchor" href="#_8-1-any-类型" aria-label="Permalink to &quot;8.1 any 类型&quot;">​</a></h3><ul><li>在 TypeScript 中，任何类型都可以被归为 any 类型。这让 any 类型成为了类型系统的 顶级类型 (也被称作 全局超级类型)。</li><li>TypeScript允许我们对 any 类型的值执行任何操作，而无需事先执行任何形式的检查</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;             </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 42</span><span style="color:#ABB2BF;">;               </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello World&quot;</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];               </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};               </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">random</span><span style="color:#ABB2BF;">;      </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;             </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">foo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">();   </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#61AFEF;">value</span><span style="color:#ABB2BF;">();        </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> value</span><span style="color:#ABB2BF;">();    </span><span style="color:#7F848E;font-style:italic;">// OK</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_8-2-unknown-类型" tabindex="-1">8.2 unknown 类型 <a class="header-anchor" href="#_8-2-unknown-类型" aria-label="Permalink to &quot;8.2 unknown 类型&quot;">​</a></h3><ul><li>就像所有类型都可以被归为 any，所有类型也都可以被归为 unknown。这使得 unknown 成为 TypeScript 类型系统的另一种顶级类型（另一种是 any）</li><li>任何类型都可以赋值给<code>unknown</code>类型</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;             </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 42</span><span style="color:#ABB2BF;">;               </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello World&quot;</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];               </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};               </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">random</span><span style="color:#ABB2BF;">;      </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;             </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TypeError</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// OK</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><code>unknown</code>类型只能被赋值给<code>any</code>类型和<code>unknown</code>类型本身</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;   </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;       </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value3</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;   </span><span style="color:#7F848E;font-style:italic;">// Error</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value4</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// Error</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value5</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// Error</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value6</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">object</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// Error</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value7</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;     </span><span style="color:#7F848E;font-style:italic;">// Error</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> value8</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_8-3-缩小-unknown-类型范围" tabindex="-1">8.3 缩小 unknown 类型范围 <a class="header-anchor" href="#_8-3-缩小-unknown-类型范围" aria-label="Permalink to &quot;8.3 缩小 unknown 类型范围&quot;">​</a></h3><ul><li>如果没有类型断言或类型细化时，不能在<code>unknown</code>上面进行任何操作</li><li>typeof</li><li>instanceof</li><li>自定义类型保护函数</li><li>可以对 unknown 类型使用类型断言</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello World&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> someString</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_8-4-联合类型中的-unknown-类型" tabindex="-1">8.4 联合类型中的 unknown 类型 <a class="header-anchor" href="#_8-4-联合类型中的-unknown-类型" aria-label="Permalink to &quot;8.4 联合类型中的 unknown 类型&quot;">​</a></h3><ul><li><p>在联合类型中，unknown 类型会吸收任何类型。这就意味着如果任一组成类型是 unknown，联合类型也会相当于 unknown：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> UnionType1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">null</span><span style="color:#ABB2BF;">;       </span><span style="color:#7F848E;font-style:italic;">// unknown</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> UnionType2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// unknown</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> UnionType3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;     </span><span style="color:#7F848E;font-style:italic;">// unknown</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> UnionType4</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">[];   </span><span style="color:#7F848E;font-style:italic;">// unknown</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="_8-5-交叉类型中的-unknown-类型" tabindex="-1">8.5 交叉类型中的 unknown 类型 <a class="header-anchor" href="#_8-5-交叉类型中的-unknown-类型" aria-label="Permalink to &quot;8.5 交叉类型中的 unknown 类型&quot;">​</a></h3><ul><li>在交叉类型中，任何类型都可以吸收 unknown 类型。这意味着将任何类型与 unknown 相交不会改变结果类型</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> IntersectionType1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">null</span><span style="color:#ABB2BF;">;       </span><span style="color:#7F848E;font-style:italic;">// null</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> IntersectionType2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> IntersectionType3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;     </span><span style="color:#7F848E;font-style:italic;">// string</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> IntersectionType4</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">[];   </span><span style="color:#7F848E;font-style:italic;">// number[]</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> IntersectionType5</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">// any</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_8-6-never是unknown的子类型" tabindex="-1">8.6 never是unknown的子类型 <a class="header-anchor" href="#_8-6-never是unknown的子类型" aria-label="Permalink to &quot;8.6 never是unknown的子类型&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> isNever</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> never</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> unknown</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> true</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> false</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_8-7-keyof-unknown-等于never" tabindex="-1">8.7 keyof unknown 等于never <a class="header-anchor" href="#_8-7-keyof-unknown-等于never" aria-label="Permalink to &quot;8.7 keyof unknown 等于never&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> key</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> unknown</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_8-8-只能对unknown进行等或不等操作-不能进行其它操作" tabindex="-1">8.8 只能对unknown进行等或不等操作，不能进行其它操作 <a class="header-anchor" href="#_8-8-只能对unknown进行等或不等操作-不能进行其它操作" aria-label="Permalink to &quot;8.8 只能对unknown进行等或不等操作，不能进行其它操作&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">un1</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> un2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">un1</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> un2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">un1</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> un2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_8-9-不能做任何操作" tabindex="-1">8.9 不能做任何操作 <a class="header-anchor" href="#_8-9-不能做任何操作" aria-label="Permalink to &quot;8.9 不能做任何操作&quot;">​</a></h3><ul><li>不能访问属性</li><li>不能作为函数调用</li><li>不能当作类的构造函数不能创建实例</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">un</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span></span>
<span class="line"><span style="color:#61AFEF;">un</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> un</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_8-10-泛型keyof映射属性" tabindex="-1">8.10 泛型keyof映射属性 <a class="header-anchor" href="#_8-10-泛型keyof映射属性" aria-label="Permalink to &quot;8.10 泛型keyof映射属性&quot;">​</a></h3><ul><li>如果映射类型遍历的时候是unknown,不会映射属性</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> getType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]:</span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> getType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_9-声明文件" tabindex="-1">9 声明文件 <a class="header-anchor" href="#_9-声明文件" aria-label="Permalink to &quot;9 声明文件&quot;">​</a></h2><p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能</p><h3 id="什么是声明语句" tabindex="-1">什么是声明语句 <a class="header-anchor" href="#什么是声明语句" aria-label="Permalink to &quot;什么是声明语句&quot;">​</a></h3><p>假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 <code>&lt;script&gt;</code> 标签引入 <code>jQuery</code>，然后就可以使用全局变量 <code>$</code> 或 <code>jQuery</code> 了。</p><p>但是在 ts 中，编译器并不知道 $ 或 jQuery 是什么东西</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">声明语句: 如果需要ts对新的语法进行检查, 需要要加载了对应的类型说明代码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  declare var jQuery: (selector: string) =&gt; any;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">声明文件: 把声明语句放到一个单独的文件（jQuery.d.ts）中, ts会自动解析到项目中所有声明文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">下载声明文件: npm install @types/jquery --save-dev</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">jQuery</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#foo&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ERROR: Cannot find name &#39;jQuery&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这时，我们需要使用 declare var 来定义它的类型</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> var</span><span style="color:#61AFEF;"> jQuery</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">selector</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">jQuery</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#foo&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>declare var 并没有真的定义一个变量，只是定义了全局变量 jQuery 的类型，仅仅会用于编译时的检查，在编译结果中会被删除。它编译结果是：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">jQuery</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#foo&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>一般声明文件都会单独写成一个 <code>xxx.d.ts</code> 文件</p><p>创建 <code>01_jQuery.d.ts</code>，将声明语句定义其中，TS 编译器会扫描并加载项目中所有的 TS 声明文件</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> var</span><span style="color:#61AFEF;"> jQuery</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">selector</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> any</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>很多的第三方库都定义了对应的声明文件库, 库文件名一般为 <code>@types/xxx</code>，可以在npm官网：<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/</a> 进行搜索</p><p>有的第三库在下载时就会自动下载对应的声明文件库(比如: webpack)；有的可能需要单独下载(比如 jQuery/react)</p><h2 id="_10-内置对象" tabindex="-1">10 内置对象 <a class="header-anchor" href="#_10-内置对象" aria-label="Permalink to &quot;10 内置对象&quot;">​</a></h2><p>JavaScript 中有很多内置对象，它们可以直接在 TypeScript 中当做定义好了的类型。</p><p>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p><ol><li>ECMAScript 的内置对象</li></ol><blockquote><p>Boolean Number String Date RegExp Error</p></blockquote><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 1. ECMAScript 的内置对象 */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Boolean</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Number</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Number</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> d</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Date</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> r</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RegExp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">1/</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Error</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;error message&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// let bb: boolean = new Boolean(2)</span><span style="color:#7F848E;font-style:italic;">  // error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>2.BOM 和 DOM 的内置对象</p><blockquote><p>Window Document HTMLElement DocumentFragment Event NodeList</p></blockquote><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> div</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HTMLElement</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> divs</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">NodeList</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">MouseEvent</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fragment</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">DocumentFragment</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createDocumentFragment</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,84)]))}const b=n(e,[["render",o]]);export{u as __pageData,b as default};
