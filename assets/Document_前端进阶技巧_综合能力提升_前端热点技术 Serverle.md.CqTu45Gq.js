import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/FaaS%E8%B4%B9%E7%94%A8.Bev2fjkK.png",e="/FrontEndLearnNotes/assets/%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B%E5%9B%BE.BB-6B2c6.png",A=JSON.parse('{"title":"前端热点技术 Serverle","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端进阶技巧/综合能力提升/前端热点技术 Serverle.md","filePath":"Document/前端进阶技巧/综合能力提升/前端热点技术 Serverle.md","lastUpdated":1750954157000}'),t={name:"Document/前端进阶技巧/综合能力提升/前端热点技术 Serverle.md"};function r(c,s,B,y,i,F){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="前端热点技术-serverle" tabindex="-1">前端热点技术 Serverle <a class="header-anchor" href="#前端热点技术-serverle" aria-label="Permalink to &quot;前端热点技术 Serverle&quot;">​</a></h1><p>严格意义上来说，Serverless 并不属于前端技术，但对于那些想提升自己知识广度，想往全栈工程师方向发展的前端工程师而言，是一个非常高效的工具。而对于那些只想专注于前端领域的工程师而言，了解 Serverless 背后的思想，对提升开发思维也会有一定的帮助。</p><p>下面我们就通过相关概念和具体案例来揭开 Serverless 的神秘面纱吧。</p><h2 id="什么是-serverless" tabindex="-1">什么是 Serverless <a class="header-anchor" href="#什么是-serverless" aria-label="Permalink to &quot;什么是 Serverless&quot;">​</a></h2><p>Serverless 是由“Server”和“less”两个单词组合而成，翻译成中文就是“无服务器”的意思，所谓无服务器并非脱离服务器的 Web 离线应用，也不是说前端页面绕过服务端直接读写数据库，而是开发者不用再考虑服务器环境搭建和维护等问题，只需要专注于开发即可。也就是说 Serverless 不是语言或框架，而是一种软件的部署方式。传统的应用需要部署在服务器或虚拟机上，安装运行环境之后以进程的方式启动，而使用 Serverless 则可以省略这个过程，直接使用云服务厂商提供的运行环境。</p><h2 id="serverless-从何而来" tabindex="-1">Serverless 从何而来 <a class="header-anchor" href="#serverless-从何而来" aria-label="Permalink to &quot;Serverless 从何而来&quot;">​</a></h2><p>Serverless 并不是一个全新的产物，而是一种构建和管理基于微服务架构的完整流程，允许在服务部署级别而不是在服务器部署级别来管理你的应用部署。与传统架构的不同之处在于，它完全由云厂商管理，由事件触发，以无状态的方式运行（可能只存在于一次调用的过程中）在容器内。</p><h2 id="serverless-的组成" tabindex="-1">Serverless 的组成 <a class="header-anchor" href="#serverless-的组成" aria-label="Permalink to &quot;Serverless 的组成&quot;">​</a></h2><p>Serverless 架构由两部分组成，即 FaaS 和 BaaS。</p><p>FaaS（Function-as-a-Service）函数即服务，一个函数就是一个服务，函数可以由任何语言编写，除此之外不需要关心任何运维细节，比如计算资源、弹性扩容，而且还可以按量计费，且支持事件驱动。</p><p>BaaS（Backend-as-a-Service）后端即服务，集成了许多中间件技术，比如数据即服务（数据库服务）、缓存、网关等。</p><h2 id="serverless-的特点" tabindex="-1">Serverless 的特点 <a class="header-anchor" href="#serverless-的特点" aria-label="Permalink to &quot;Serverless 的特点&quot;">​</a></h2><p>了解完 Serverless 的基础概念，我们再来看看它有哪些特点。</p><h3 id="免维护" tabindex="-1">免维护 <a class="header-anchor" href="#免维护" aria-label="Permalink to &quot;免维护&quot;">​</a></h3><p>Serverless 不仅提供了运行代码的环境，还能自动实现负载均衡、弹性伸缩这类高级功能，极大地降低了服务搭建的复杂性，有效提升开发和迭代的速度。</p><h3 id="费用" tabindex="-1">费用 <a class="header-anchor" href="#费用" aria-label="Permalink to &quot;费用&quot;">​</a></h3><p>如果只考虑 FaaS，那么费用是比较便宜的。</p><p>以阿里云的函数计算为例，费用包括调用次数、执行时间、公网流量 3 个因素。调用次数和执行时间都有免费额度，即使超过，单次/每秒的费用也非常低，这种按需收费的方式就避免了资源的浪费。</p><p>流量费用则稍贵，达到 0.8 元/GB，而且没有免费额度，所以对于通信数据量比较大的场景还是要慎重使用。</p><p><img src="'+o+'" alt="FaaS费用"></p><h3 id="深度绑定" tabindex="-1">深度绑定 <a class="header-anchor" href="#深度绑定" aria-label="Permalink to &quot;深度绑定&quot;">​</a></h3><p>通常使用某个云厂商的 Serverless 产品时，可能会包括多种产品，如函数计算、对象存储、数据库等，而这些产品和云厂商又深度绑定，所以如果要进行迁移，成本相对于部署在服务器而言会增加很多。</p><h3 id="运行时长限制" tabindex="-1">运行时长限制 <a class="header-anchor" href="#运行时长限制" aria-label="Permalink to &quot;运行时长限制&quot;">​</a></h3><p>通常云厂商对于 Serverless 中的函数执行时间是有限制的，如阿里云的函数计算产品，最大执行时长为 10 分钟，如果执行长时间任务，还需要单独申请调整时长上限，或者自行将超时函数拆分成粒度更小的函数，但是这种方式会增加一定的开发成本。</p><h3 id="冷启动" tabindex="-1">冷启动 <a class="header-anchor" href="#冷启动" aria-label="Permalink to &quot;冷启动&quot;">​</a></h3><p>由于函数是按需执行的，首次执行时会创建运行容器，一般这个创建环境的时间在几百毫秒，在延迟敏感的业务场景下需要进行优化，比如定时触发函数或者设置预留实例。</p><h2 id="serverless-的应用场景" tabindex="-1">Serverless 的应用场景 <a class="header-anchor" href="#serverless-的应用场景" aria-label="Permalink to &quot;Serverless 的应用场景&quot;">​</a></h2><p>以阿里云的函数计算为例，可以分为两类：事件函数和 HTTP 函数。</p><ul><li><strong>事件函数</strong>。事件函数的执行方式有两种，一种是通过 SDK 提供的 API 函数调用它，基于此可以进行一些轻量计算操作，比如对图片进行压缩、格式转换，又或者执行一些 AI 训练任务；另一种是通过配置时间和间隔，让其自动执行，一些常见的自动执行场景包括文件备份、数据统计等。</li><li><strong>HTTP 函数</strong>。每一个 HTTP 函数都有特定的域名来供外部访问，当这个域名被访问时，函数将会被创建并执行。可以使用 HTTP 函数为前后端分离架构的 Web 应用提供后端数据支撑，比如提供获取天气 API 查看实时天气，或者提供 API 来读写数据库。</li></ul><h2 id="serverless-实例" tabindex="-1">Serverless 实例 <a class="header-anchor" href="#serverless-实例" aria-label="Permalink to &quot;Serverless 实例&quot;">​</a></h2><p>下面来分析讲解一个使用阿里云函数计算来实现代码自动部署的例子。函数要实现的功能就是，当 GitHub 仓库中的某个分支有新的提交时，拉取最新代码并编译，然后将编译生成的代码部署到 OSS 存储的静态服务器上。<img src="'+e+`" alt="自动部署流程图"></p><p>自动部署流程图</p><p>在这个例子中，两种函数都会用到。</p><p>首先是 HTTP 函数负责接收 GitHub 发出的 webhook 请求，当收到请求后使用内部模块调用一个事件函数，在这个事件函数中执行具体的操作。虽然理论上一个 HTTP 函数可以实现，但拆解成两个函数可以有效避免函数执行时间过长导致的 webhook 请求超时报错。</p><p>下面是 HTTP 函数源码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * ACCOUNT_ID 主账号ID</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * ACCESS_KEY_ID 访问 bucket 所需要的 key</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * ACCESS_KEY_SECRET 访问 bucket 所需要的 secret</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * REGION bucket 所在的 region</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * BUCKET 用于存储配置文件的 bucket</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">ACCOUNT_ID</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ACCESS_KEY_ID</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ACCESS_KEY_SECRET</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">REGION</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">BUCKET</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E5C07B;">	process</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">env</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> FCClient</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@alicloud/fc2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> OSS</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ali-oss&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> getRawBody</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;raw-body&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> filePath</span><span style="color:#7F848E;font-style:italic;"> 函数计算配置文件路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> getOSSConfigFile</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">filePath</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> OSS</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			region</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">REGION</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			accessKeyId</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ACCESS_KEY_ID</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			accessKeySecret</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ACCESS_KEY_SECRET</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			bucket</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">BUCKET</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filePath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> content</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">content</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">content</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#98C379;"> &quot;{}&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">resp</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	getRawBody</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			resp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setStatusCode</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">400</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			resp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;请求体解析失败&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> cfg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> config</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			config</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#ABB2BF;">				(</span><span style="color:#C678DD;">await</span><span style="color:#61AFEF;"> getOSSConfigFile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`/config/</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">repository</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">.json\`</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E06C75;">			cfg</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">cfg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				throw</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;未找到对应仓库的配置信息.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			resp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setStatusCode</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			resp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cfg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FCClient</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ACCOUNT_ID</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">				accessKeyID</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ACCESS_KEY_ID</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				accessKeySecret</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ACCESS_KEY_SECRET</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				region</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">cfg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">region</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#E06C75;">			client</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">invokeFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">cfg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">service</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">cfg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">cfg</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			resp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">				\`client.invokeFunction(</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">cfg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">service</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">, </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">cfg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">, </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">					cfg</span></span>
<span class="line"><span style="color:#ABB2BF;">				)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">)\`</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><p>简单的实现方式就是解析 webhook 请求体内部的参数，获取仓库名和分支名传递给事件函数，但考虑可扩展性，对每个项目仓库使用了单独的配置文件。具体到代码中就是调用 getOSSConfigFile() 函数来从 OSS 存储上读取仓库相关的配置文件信息，然后通过 invokeFunction() 函数调用事件函数并将配置信息传递给事件函数。</p><p>这样的好处在于，之后要新增其他仓库或其他分支的时候，只需要新增一个配置文件就可以了。</p><p>再来看看事件函数的入口函数实现。</p><p>前面在讲 Serverless 函数冷启动问题的时候提到过，函数执行完成后会存活一段时间，在这段时间内再次调用会执行之前创建的函数，短时间内重复执行的话会因为已经存在目录导致拉取失败，所以创建了随机目录并修改工作目录到随机目录下以获取写权限。</p><p>然后再根据配置文件中的信息，按串行加载对应的执行模块并传入参数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {*}</span><span style="color:#E06C75;font-style:italic;"> event</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * repo     仓库地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * region   bucket 所在区域</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * bucket   编译后部署的bucket</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * command  编译命令</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {*}</span><span style="color:#E06C75;font-style:italic;"> context</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {*}</span><span style="color:#E06C75;font-style:italic;"> callback</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> **/</span></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">events</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isBuffer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		?</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">		:</span><span style="color:#E06C75;"> event</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> dir</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">36</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">substr</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置随机临时工作目录，避免容器未销毁的情况下，重复拉取仓库失败</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> workDir</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`/tmp/</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">dir</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 为了保证后续流程能找到临时工作目录，设置为全局变量</span></span>
<span class="line"><span style="color:#E5C07B;">	global</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">workDir</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> workDir</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mkdirSync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">workDir</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">chdir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">workDir</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> events</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">acc</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cur</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			await</span><span style="color:#E06C75;"> acc</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`./</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">cur</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">module</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">cur</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#61AFEF;">		callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">\`自动部署成功.\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>具体有哪些模块呢？一般的部署过程主要包括 3 步：拉取仓库代码、安装依赖并构建、将生成的代码上传部署。 拉取代码对于手动操作而言很简单，一条 git clone 命令就搞定了，但在自动化实现的时候会碰到一些麻烦的细节问题。</p><p>首先身份认证问题。由于是私有仓库，所以只能通过密钥文件或账号密码的形式来认证访问权限。如果通过账号密码的形式登录，则要模拟键终端交互，这个相对而言实现成本较高，所以采用了配置 ssh key 的方式。具体是根据前面传入的配置信息找到私钥文件所在地址并下载到本地，但是因为权限问题，并不能直接保存到当前用户的 .ssh 目录下。</p><p>另一个问题是在首次进行 git clone 操作的时候，终端会出现一个是否添加 known hosts 的提示，在终端中操作的时候需要键盘输入 “Y” 或者 “N” 来继续后面的操作。这里可以通过一个选项本来关闭这个提示。</p><p>具体实现参考下面的 shell 脚本。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="color:#E06C75;">ID_RSA</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">/tmp/id_rsa</span></span>
<span class="line"><span style="color:#56B6C2;">exec</span><span style="color:#98C379;"> /usr/bin/ssh</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> StrictHostKeyChecking=no</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> GSSAPIAuthentication=no</span><span style="color:#D19A66;"> -i</span><span style="color:#E06C75;"> $ID_RSA</span><span style="color:#98C379;"> &quot;</span><span style="color:#E06C75;font-style:italic;">$@</span><span style="color:#98C379;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>解决了比较麻烦的身份认证和终端交互问题之后，剩下的逻辑就比较简单了，执行 git clone 命令拉取仓库代码就行，为了加快速下载速度，可以通过设置 --depth 1 这个参数来指定只拉取最新提交的代码。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> OSS</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ali-oss&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cp</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;child_process&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">BUCKET</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">REGION</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ACCESS_KEY_ID</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ACCESS_KEY_SECRET</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> process</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">env</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> shellFile</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;ssh.sh&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> repoURL</span><span style="color:#7F848E;font-style:italic;"> 代码仓库地址</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> repoKey</span><span style="color:#7F848E;font-style:italic;"> 访问代码仓库所需要的密钥文件路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> branch</span><span style="color:#7F848E;font-style:italic;">  分支名称</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> **/</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> downloadRepo</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;font-style:italic;">repoURL</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">repoKey</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">branch</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;master&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">	retryTimes</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Download repo </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">repoURL</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">chdir</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">global</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">workDir</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> OSS</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			accessKeyId</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ACCESS_KEY_ID</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			accessKeySecret</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ACCESS_KEY_SECRET</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			region</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">REGION</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			bucket</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">BUCKET</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">repoKey</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">\`./id_rsa\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">shellFile</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">\`./</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">shellFile</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		cp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execSync</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`chmod 0600 ./id_rsa\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		cp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execSync</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`chmod +x ./</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">shellFile</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		cp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execSync</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			\`GIT_SSH=&quot;./</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">shellFile</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot; git clone -b </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">branch</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> --depth 1 </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">repoURL</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;downloaded&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">retryTimes</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			downloadRepo</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">repoURL</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">repoKey</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">branch</span><span style="color:#ABB2BF;"> }, </span><span style="color:#E06C75;">retryTimes</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> downloadRepo</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>安装依赖并构建这个步骤没有太多复杂的地方，通过子进程调用 yarn install --check-files 命令，然后执行 package.json 文件中配置的脚本任务即可。具体代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cp</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;child_process&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> install</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">repoName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">retryTimes</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Install dependencies.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		cp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execSync</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`yarn install --check-files\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Installed.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		retryTimes</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">retryTimes</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Retry install...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">repoName</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">retryTimes</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> build</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">command</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">retryTimes</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Build code.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		cp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execSync</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">command</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Built.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">retryTimes</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Retry build...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			build</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">retryTimes</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;font-style:italic;">repoName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">command</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">workDir</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> global</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">chdir</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">workDir</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">/</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">repoName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">repoName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	build</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>最后上传部署可以根据不同的场景编写不同的模块，比如有的可能部署在 OSS 存储上，会需要调用 OSS 对应的 SDK 进行上传，有的可能部署在某台服务器上，需要通过 scp 命令来传输。</p><p>下面是一个部署到 OSS 存储的例子。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> OSS</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ali-oss&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 遍历函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> traverse</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">dirPath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> filesList</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readdirSync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dirPath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> filesList</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> fileObj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">		fileObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dirPath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">filesList</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> filePath</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dirPath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">filesList</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> stats</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">statSync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filePath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stats</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isDirectory</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#61AFEF;">			traverse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filePath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			fileObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extname</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filesList</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]).</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fileObj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> repoName</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> deploy</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;font-style:italic;">dist</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">source</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">region</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">accessKeyId</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">accessKeySecret</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">bucket</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">repoName</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">	retryTimes</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">workDir</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> global</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Deploy.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> OSS</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				region</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				accessKeyId</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				accessKeySecret</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				bucket</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#E5C07B;">			process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">chdir</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">workDir</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">/</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">repoName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> root</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cwd</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> files</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> traverse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">, []);</span></span>
<span class="line"><span style="color:#C678DD;">			await</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">				files</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(({ </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;"> }, </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					const</span><span style="color:#E5C07B;"> remotePath</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dist</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">root</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;/&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`[</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">index</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">] uploaded </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> to </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">remotePath</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">remotePath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				})</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#61AFEF;">			res</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Deployed.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">retryTimes</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Retry deploy.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">				deploy</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">					{ </span><span style="color:#E06C75;">dist</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">region</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">accessKeyId</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">accessKeySecret</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bucket</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">					retryTimes</span></span>
<span class="line"><span style="color:#ABB2BF;">				);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				throw</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> deploy</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br></div></div><p>由于未找到阿里云 OSS SDK 中上传目录的功能，所以只能通过深度遍历的方式来逐个将文件进行上传。考虑编译后生成地文件数量并不多，这里没有做并发数限制，而是将全部文件进行批量上传。</p><h2 id="serverless-总结" tabindex="-1">Serverless 总结 <a class="header-anchor" href="#serverless-总结" aria-label="Permalink to &quot;Serverless 总结&quot;">​</a></h2><p>虽然 Serverless 并不属于前端开发范畴，但确实是一个具有通用性、开箱即用的产品。本课时的主要目的是起到一个抛砖引玉的作用，通过概念介绍以及函数计算的具体实例让你对其有一个初步的认识和了解。希望你在工作中能通过具体实践，不断探索它的使用边界和场景。</p><p>最后布置一道作业题：尝试部署一个 Serverless 服务。</p>`,58)]))}const b=n(t,[["render",r]]);export{A as __pageData,b as default};
