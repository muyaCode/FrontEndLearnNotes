import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/Cookie-Session.BU7_g4VY.jpg",o="/FrontEndLearnNotes/assets/API%E7%BD%91%E5%85%B3%E5%9B%BE%E4%BE%8B.B1iAGW96.jpg",r="/FrontEndLearnNotes/assets/%E9%98%BF%E9%87%8C%E4%BA%91%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E7%9A%84%E6%95%B0%E6%8D%AE.CuYZXRBr.jpg",t="/FrontEndLearnNotes/assets/%E4%BC%A0%E7%BB%9F%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E6%9E%B6%E6%9E%84.BzeddbQY.jpg",c="/FrontEndLearnNotes/assets/%E5%9F%BA%E4%BA%8EServerless%E7%9A%84%E6%9C%8D%E5%8A%A1%E9%80%89%E6%9F%93%E6%9E%B6%E6%9E%84.pbrbxBQs.jpg",i="/FrontEndLearnNotes/assets/%E8%BF%9B%E9%98%B6%E7%89%88%E5%9F%BA%E4%BA%8EServerless%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9F%93%E6%9E%B6%E6%9E%84.BFmu3QKA.jpg",B="/FrontEndLearnNotes/assets/%E4%BC%A0%E7%BB%9F%E9%9F%B3%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88.BNcyfAI9.jpg",y="/FrontEndLearnNotes/assets/%E4%BC%A0%E7%BB%9F%E6%9C%8D%E5%8A%A1%E5%99%A8.DhDFDE6s.jpg",u="/FrontEndLearnNotes/assets/%E6%9D%83%E9%99%90%E8%AF%B4%E6%98%8E.hDdW7g8x.jpg",q=JSON.parse('{"title":"Serverle 应用实战场景案例","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Serverless/Serverle应用实战场景案例.md","filePath":"Document/Serverless/Serverle应用实战场景案例.md","lastUpdated":1750954157000}'),b={name:"Document/Serverless/Serverle应用实战场景案例.md"};function F(d,s,A,C,m,E){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="serverle-应用实战场景案例" tabindex="-1">Serverle 应用实战场景案例 <a class="header-anchor" href="#serverle-应用实战场景案例" aria-label="Permalink to &quot;Serverle 应用实战场景案例&quot;">​</a></h1><h2 id="_1-web-应用-身份认证-使用-serverless-实现登录注册功能" tabindex="-1">1.Web 应用：身份认证：使用 Serverless 实现登录注册功能 <a class="header-anchor" href="#_1-web-应用-身份认证-使用-serverless-实现登录注册功能" aria-label="Permalink to &quot;1.Web 应用：身份认证：使用 Serverless 实现登录注册功能&quot;">​</a></h2><p>代码参考：<a href="https://github.com/nodejh/serverless-class" target="_blank" rel="noreferrer">https://github.com/nodejh/serverless-class</a></p><p>登录的过程就是身份认证的过程</p><p>注册账号 =&gt; 输入用户名 =&gt; 密码登录</p><p>身份认证几乎是每个系统必备能力所以很多同学开发应用时，实现的第一功能就是登录注册</p><h3 id="基于-serverless-的身份认证功能的技术方案" tabindex="-1">基于 Serverless 的身份认证功能的技术方案 <a class="header-anchor" href="#基于-serverless-的身份认证功能的技术方案" aria-label="Permalink to &quot;基于 Serverless 的身份认证功能的技术方案&quot;">​</a></h3><p>要实现应用中的身份认证，首先要详细了解身份认证的技术方案，以及该方案怎么在 Serverless 架构中使用</p><p>Cookie-Session，早期互联网主要以 Web 为主，客户端是浏览器所以 Cookie-Session 方式是早期最常用的身份认证方式</p><p><img src="'+e+`" alt="Cookie-Session"></p><p>Cookie-Session 方案存在两个主要问题</p><ul><li><p>服务端的 Session ID 是直接存储在内存中的在分布式系统中无法共享登录状态</p><ul><li><p>解决办法：就是用一个共享存储来保存 Session 信息，最常见的就是 Redis ，因为 Redis 是一个内存数据库，读写速度很快</p></li><li><p>基于共享存储的 Cookie-Session 身份认证流程</p><p>![基于共享存储的 Cookie-Session 身份认证流程](.\\img\\基于共享存储的 Cookie-Session 身份认证流程.jpg)</p><p>不过呢上面这个方案，还是没有解决非浏览器不支持 cookie 的身份认证的问题</p></li></ul></li><li><p>cookie 是浏览器的功能，手机 App 等客户端并不支持 cookie 所以该方案不适用于非浏览器的应用</p><ul><li><p>可以使用 JWT 方案：JWT 是(JSON Web Token) 的简称</p></li><li><p>JWT 方案流程图例 ![JWT 方案流程图例](D:\\Code[MyProject]\\FrontEndLearnNotes\\docs\\Document\\Serverless\\img\\JWT 方案流程图例.jpg)</p></li><li><p>token 是个比较长字符串：Header.Payload.Signature</p></li><li><p>实际的 token 示例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">eyJhbGciOiJIUzl1NilsInR5cC16lkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJgYWNrliwiaWFOljoxNjEwODg1MTcxfQ.Klduc-undaZ0z</span></span>
<span class="line"><span style="color:#61AFEF;">Bt4wjGZIK5fMlxlauVH[</span><span style="color:#98C379;"> G1DVGDCw</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>JWT 这种身份认证方案，也非常适合 Serverless 应用</p></li></ul></li></ul><h3 id="基于-express-js-框架进行开发登录和注册功能的-serverless-应用" tabindex="-1">基于 Express.js 框架进行开发登录和注册功能的 Serverless 应用 <a class="header-anchor" href="#基于-express-js-框架进行开发登录和注册功能的-serverless-应用" aria-label="Permalink to &quot;基于 Express.js 框架进行开发登录和注册功能的 Serverless 应用&quot;">​</a></h3><p>参考代码：<a href="https://github.com/nodejh/serverless-class" target="_blank" rel="noreferrer">https://github.com/nodejh/serverless-class</a></p><h4 id="初始化应用" tabindex="-1">初始化应用 <a class="header-anchor" href="#初始化应用" aria-label="Permalink to &quot;初始化应用&quot;">​</a></h4><h5 id="_1-应用初始化" tabindex="-1">1.应用初始化 <a class="header-anchor" href="#_1-应用初始化" aria-label="Permalink to &quot;1.应用初始化&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> express</span><span style="color:#98C379;"> body-parser</span><span style="color:#98C379;"> @webserverless/fc-express</span><span style="color:#D19A66;"> -S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_2-初始化-serverless-项目模板-template-yaml" tabindex="-1">2.初始化 Serverless 项目模板：template.yaml <a class="header-anchor" href="#_2-初始化-serverless-项目模板-template-yaml" aria-label="Permalink to &quot;2.初始化 Serverless 项目模板：template.yaml&quot;">​</a></h5><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">ROSTemplateFormatVersion</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#E06C75;">Transform</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#E06C75;">Resources</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;"> serverless</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  Type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Aliyun::Serverless::Service’</span></span>
<span class="line"><span style="color:#98C379;">  Properties:</span></span>
<span class="line"><span style="color:#98C379;">   Policies:</span></span>
<span class="line"><span style="color:#98C379;">    - AliyunContainerRegistryReadOnlyAccess</span></span>
<span class="line"><span style="color:#98C379;">   InternetAccess: true</span></span>
<span class="line"><span style="color:#98C379;">  golang-runtime:</span></span>
<span class="line"><span style="color:#98C379;">   Type: &#39;Aliyun::Serverless::Function‘</span></span>
<span class="line"><span style="color:#E06C75;">   Properties</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">    Description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Golang Runtime’</span></span>
<span class="line"><span style="color:#98C379;">    Runtime: nodejs12</span></span>
<span class="line"><span style="color:#98C379;">    Timeout: 10</span></span>
<span class="line"><span style="color:#98C379;">    CAPort: 8080</span></span>
<span class="line"><span style="color:#98C379;">    Handler: index.handler</span></span>
<span class="line"><span style="color:#98C379;">    MemorySize: 1024</span></span>
<span class="line"><span style="color:#98C379;">    CodeUri: &#39;./&#39;</span></span>
<span class="line"><span style="color:#E06C75;">    Events</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">     httpTrigger</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">      Type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">HTTP</span></span>
<span class="line"><span style="color:#E06C75;">      Properties</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">       AuthType</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">ANONYMOUS</span></span>
<span class="line"><span style="color:#E06C75;">       Methods</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;POST&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h5 id="_3-编写初始化代码-index-js" tabindex="-1">3.编写初始化代码：index.js <a class="header-anchor" href="#_3-编写初始化代码-index-js" aria-label="Permalink to &quot;3.编写初始化代码：index.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxy</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@webserverless/fc-express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> bodyParser</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;body-parser&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">bodyParser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">urlencoded</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">extended</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义 /路由，返回 Hello Serverless!</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Hello Serverless!&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> server</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> proxy</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Server</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">reg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 使用 @webserverless/fc-express 来将函数计算的请求转发给 Express.js 应用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// @webserverless/fc-express 可以将函数参数转换为Express.js 的路由参数</span></span>
<span class="line"><span style="color:#E5C07B;">	server</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">httpProxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h5 id="_4-通过命令部署应用" tabindex="-1">4.通过命令部署应用 <a class="header-anchor" href="#_4-通过命令部署应用" aria-label="Permalink to &quot;4.通过命令部署应用&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span><span style="color:#D19A66;"> -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_5-测试部署后的应用" tabindex="-1">5.测试部署后的应用 <a class="header-anchor" href="#_5-测试部署后的应用" aria-label="Permalink to &quot;5.测试部署后的应用&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">curl</span><span style="color:#98C379;"> https://1457216987974698.cnshanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="实现注册功能" tabindex="-1">实现注册功能 <a class="header-anchor" href="#实现注册功能" aria-label="Permalink to &quot;实现注册功能&quot;">​</a></h4><p>先获取用户输入的用户名和密码，然后判断用户是否存在如果不存在就将其存入表格存储数据库</p><p>表格存储：可以直接通过 RestfulAPI 进行读写，并且弹性可扩展，更适合 Serverless 应用</p><h5 id="_1-安装-tablestore-依赖-tablestore-库-封装了表格存储的-api" tabindex="-1">1.安装 tablestore 依赖：tablestore 库 封装了表格存储的 API <a class="header-anchor" href="#_1-安装-tablestore-依赖-tablestore-库-封装了表格存储的-api" aria-label="Permalink to &quot;1.安装 tablestore 依赖：tablestore 库 封装了表格存储的 API&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> tablestore</span><span style="color:#D19A66;"> -S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_2-在-index-js-中" tabindex="-1">2.在 index.js 中 <a class="header-anchor" href="#_2-在-index-js-中" aria-label="Permalink to &quot;2.在 index.js 中&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> TableStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tablestore&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ??? TableStore client</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> TableStore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Client</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	accessKeyId</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&lt;your access key&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	accessKeySecret</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;your access secret&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	endpoint</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;https://serverless-app.cn-shanghai.ots.aliyuncs.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	instancename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot; serverless-app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="_3-定义-register-路由-处理注册请求" tabindex="-1">3.定义 /register 路由，处理注册请求 <a class="header-anchor" href="#_3-定义-register-路由-处理注册请求" aria-label="Permalink to &quot;3.定义 /register 路由，处理注册请求&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/register&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从请求体中获取用户信息</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> reg</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> password</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断用户是否已经存在</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRow</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		tableName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		primaryKey</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">primaryKey</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果用户已存在，则直接返回</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;用户已存在&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建用户，将用户信息写入到表格存储中</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">putRow</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		tableName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		condition</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> TableStore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Condition</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">			TableStore</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">RowExistenceExpectation</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">EXPECT_NOT_EXIST</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">			null</span></span>
<span class="line"><span style="color:#ABB2BF;">		),</span></span>
<span class="line"><span style="color:#E06C75;">		primaryKey</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#E06C75;">		attributeColumns</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 返回创建成功</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>至此，注册功能完成</p><h5 id="_4-通过命令来部署应用" tabindex="-1">4.通过命令来部署应用 <a class="header-anchor" href="#_4-通过命令来部署应用" aria-label="Permalink to &quot;4.通过命令来部署应用&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span><span style="color:#D19A66;"> -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_5-验证功能" tabindex="-1">5.验证功能 <a class="header-anchor" href="#_5-验证功能" aria-label="Permalink to &quot;5.验证功能&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 第一次验证</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curlhttps://1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth/login</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-d </span><span style="color:#98C379;">&quot;name=jack&amp;password=123456&amp;age=18&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">-X</span><span style="color:#98C379;"> POST</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{ </span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#61AFEF;">:true</span><span style="color:#98C379;"> }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 第二次验证</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curlhttps://1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-0815/proxy/serverless/auth/login</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-d </span><span style="color:#98C379;">&quot;name=jack&amp;password=123456&amp;age=18&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">-X</span><span style="color:#98C379;"> POST</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{ </span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#D19A66;"> false</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> &quot;message&quot;:</span><span style="color:#98C379;"> &quot;用户已存在&quot;</span><span style="color:#98C379;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="实现登录功能" tabindex="-1">实现登录功能 <a class="header-anchor" href="#实现登录功能" aria-label="Permalink to &quot;实现登录功能&quot;">​</a></h4><p>登录就是验证用户输入的用户名密码是否正确</p><p>查询出用户信息 =&gt; 对比用户密码与数据库中的用户密码是否一致 =&gt; 登录成功 =&gt; 生成 token（可根据 token 查询用户信息）</p><h5 id="_1-安装-node-js-中的-jwt-依赖包-jsonwebtoken" tabindex="-1">1.安装 Node.js 中的 JWT 依赖包 jsonwebtoken <a class="header-anchor" href="#_1-安装-node-js-中的-jwt-依赖包-jsonwebtoken" aria-label="Permalink to &quot;1.安装 Node.js 中的 JWT 依赖包 jsonwebtoken&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> jsonwebtoken</span><span style="color:#D19A66;"> -S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_2-在-index-js-中-定义-login-路由" tabindex="-1">2.在 index.js 中，定义/login 路由 <a class="header-anchor" href="#_2-在-index-js-中-定义-login-路由" aria-label="Permalink to &quot;2.在 index.js 中，定义/login 路由&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> jwt</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;jsonwebtoken&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置密钥，非常重要，不能泄露</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> SECRET</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;token_secret xd2dasf19df=&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//定义 /login 路由，用来实现登录功能</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/login&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从请求体中获取用户名和密码</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> password</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 根据用户名查询用户信息</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRow</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		tableName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		primaryKey</span><span style="color:#ABB2BF;">: [{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果查询结果为空，则直接返回用户不存在</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">row</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">primaryKey</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;用户不存在&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从查询结果中构造用户信息</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;">	row</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">attributes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">columnName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">columnValue</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断密码是否正确</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">password</span><span style="color:#56B6C2;"> !==</span><span style="color:#E5C07B;"> user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;密码错误&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">password</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;******&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * 生成 token</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * jwt.sign() 接受两个参数，一个是传入的对象，一个是自定义的密钥</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> token</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jwt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">SECRET</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;"> } });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h5 id="_3-通过命令部署应用" tabindex="-1">3.通过命令部署应用 <a class="header-anchor" href="#_3-通过命令部署应用" aria-label="Permalink to &quot;3.通过命令部署应用&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span><span style="color:#D19A66;"> -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_4-验证登录" tabindex="-1">4.验证登录 <a class="header-anchor" href="#_4-验证登录" aria-label="Permalink to &quot;4.验证登录&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 验证登录</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curl</span><span style="color:#98C379;"> https://1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/login</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-d </span><span style="color:#98C379;">&quot;name=jack&amp;password=123456&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">-X</span><span style="color:#98C379;"> POST</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#61AFEF;">:true,</span><span style="color:#98C379;"> &quot;data&quot;:</span><span style="color:#98C379;"> {&quot;token&quot;：</span><span style="color:#98C379;"> &quot;eyJhbGciOiJIUzl1NilsInR5cCI6lkpXVCJ9.eyJuYW1lljoiamFjaylslmFnZSI6ljE4liwicGFzc3dvcmQiOilqkioqKioiLCJpYXQiOjE2MTA5MDY5MTJ9.qzNZarWbpDUA8SO6nLd4ffEUR1IVOWKGXiocHV7Mku&quot;}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 使用错误的密码登录</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curl</span><span style="color:#98C379;"> https://1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/login</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-d </span><span style="color:#98C379;">&quot;name=jack&amp;password=1234561&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">-X</span><span style="color:#98C379;"> POST</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#61AFEF;">:false,</span><span style="color:#98C379;"> &quot;message&quot;:&quot;密码错误&quot;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>登录成功后，客户端需要将 token 保存下来，然后在接下来的请求中，都需要带上 token</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">Authorization:</span><span style="color:#98C379;"> Bearer</span><span style="color:#98C379;"> token</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="实现获取当前登录的用户信息的功能" tabindex="-1">实现获取当前登录的用户信息的功能 <a class="header-anchor" href="#实现获取当前登录的用户信息的功能" aria-label="Permalink to &quot;实现获取当前登录的用户信息的功能&quot;">​</a></h4><h5 id="_1-定义-user-路由-获取当前登录的用户信息" tabindex="-1">1.定义 /user 路由，获取当前登录的用户信息 <a class="header-anchor" href="#_1-定义-user-路由-获取当前登录的用户信息" aria-label="Permalink to &quot;1.定义 /user 路由，获取当前登录的用户信息&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/user&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从HTTP 请求头中获取 token 信息</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> token</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">authorization</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 验证 token 并解析出用户信息</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jwt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">verify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">SECRET</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;身份认证失败&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="_2-将代码部署到函数计算" tabindex="-1">2.将代码部署到函数计算 <a class="header-anchor" href="#_2-将代码部署到函数计算" aria-label="Permalink to &quot;2.将代码部署到函数计算&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span><span style="color:#D19A66;"> -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_3-测试验证功能" tabindex="-1">3.测试验证功能 <a class="header-anchor" href="#_3-测试验证功能" aria-label="Permalink to &quot;3.测试验证功能&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 测试验证功能</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curlhttps://1457216987974698.cn-shanghai.fc.aliyuncs.com/2016-08-15/proxy/serverless/auth-app/user</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-H </span><span style="color:#98C379;">&quot;Authorization: BearereyJhbGciOiJIUzl1NilsInR5cC16lkpXVCJ9.eyJuYW1lljoiamFiaylslmFnZSI6IjE4liwicGFzc3dvcmQioilqKioqKioiLCJpYXQiOjE2MTA5MDY5MTJ9.qzNZarWbpDUA8-SO6nLd4ffEUR1IVOWKGXiocHV7Mku&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#61AFEF;">:true,</span><span style="color:#61AFEF;">&quot;data&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#61AFEF;">name</span><span style="color:#61AFEF;">&quot;:&quot;</span><span style="color:#61AFEF;">jack</span><span style="color:#61AFEF;">&quot;,&quot;</span><span style="color:#61AFEF;">age</span><span style="color:#61AFEF;">&quot;:&quot;</span><span style="color:#61AFEF;">18</span><span style="color:#61AFEF;">&quot;,&quot;</span><span style="color:#61AFEF;">password</span><span style="color:#61AFEF;">&quot;:&quot;</span><span style="color:#61AFEF;">******</span><span style="color:#61AFEF;">&quot;,&quot;</span><span style="color:#61AFEF;">iat</span><span style="color:#61AFEF;">&quot;: 1610905944}}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;"># 使用错误的token进行身份认证</span></span>
<span class="line"><span style="color:#61AFEF;">$ curlhttps://1457216987974698.cn-shanghai.fc.aliyuncs.com/201608-15/proxy/serverless/auth-app/user </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">-H &quot;</span><span style="color:#61AFEF;">Authorization:</span><span style="color:#98C379;"> BearereyJhbGciOiJIUzl1NilsInR5cC161kpXVCJ9.evJuYW1lljoiamFiavlslmFnzSI6ljE4liwicGFzc3dvcmOiOilgKiogKioiLCJpYXOiOiE2MTA5MDY5MTJ9qzNZarWbpDUA8-SO6nLd4ffEUR1IVOWKGXiocHV7Mk&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">{&quot;success&quot;: false,&quot;data&quot;: &quot;身份认证失败&quot;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="serverless-应用的身份认证总结" tabindex="-1">Serverless 应用的身份认证总结 <a class="header-anchor" href="#serverless-应用的身份认证总结" aria-label="Permalink to &quot;Serverless 应用的身份认证总结&quot;">​</a></h3><p>Serverless 应用的身份认证本质上是要将有状态的认证方案改为无状态的</p><ul><li>使用共享存储来保存登录状态</li><li>使用无状态的身份认证方案，比如 JWT</li></ul><p>功能</p><ul><li>Cookie-Session 的身份认证方式，是在服务端存储 Session 信息客户端 (浏览器) 通过 cookie 存储 Session ID</li><li>JWT 的身份认证方式，是在服务端根据用户信息生成 token 客户端保存 token</li><li>Cookie-Session 的认证方案通常是有状态的对于分布式、无状态的应用，需要将 Session 保存在共享存储中</li><li>JWT 的认证方式通常是无状态的，所以比较适合 Serverless 应用</li></ul><h2 id="_2-restful-api-基于-serverless-构建弹性可扩展的-restful-api" tabindex="-1">2.Restful API：基于 Serverless 构建弹性可扩展的 Restful API <a class="header-anchor" href="#_2-restful-api-基于-serverless-构建弹性可扩展的-restful-api" aria-label="Permalink to &quot;2.Restful API：基于 Serverless 构建弹性可扩展的 Restful API&quot;">​</a></h2><p>参考代码：<a href="https://github.com/nodejh/serverless-class" target="_blank" rel="noreferrer">https://github.com/nodejh/serverless-class</a></p><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>API 是使用 Serverless 最常见，也是最适合的场景之一</p><ul><li>不用购买、管理服务器等基础设施，不用关心服务器的运维，节省人力成本</li><li>基于 Serverless 的 API，具备自动弹性伸缩的能力</li><li>能根据请求流量弹性扩缩容，让你不再担心流量波峰、波谷</li><li>基于 Serverless 的 API 按实际资源使用量来付费，节省财务成本</li></ul><p>实践过程中的问题</p><ul><li><p>怎么设计最优的架构?</p></li><li><p>怎么管理多个函数?</p></li><li><p>怎么组织代码?</p></li></ul><h3 id="内容管理系统的架构设计" tabindex="-1">内容管理系统的架构设计 <a class="header-anchor" href="#内容管理系统的架构设计" aria-label="Permalink to &quot;内容管理系统的架构设计&quot;">​</a></h3><p>在进行架构设计前，你要明确系统的需求，如：</p><ul><li>用户注册</li><li>修改文章</li><li>用户登录</li><li>删除文章</li><li>发布文章</li><li>查询文章</li></ul><p>API 网关图例</p><p><img src="`+o+`" alt="API网关图例"></p><p>用户数据设计</p><p>User 表</p><table tabindex="0"><thead><tr><th>username</th><th>用户名</th></tr></thead><tbody><tr><td>password</td><td>密码</td></tr></tbody></table><p>Article 文章表</p><table tabindex="0"><thead><tr><th>article_id</th><th>文章 ID</th></tr></thead><tbody><tr><td>title</td><td>文章标题</td></tr><tr><td>username</td><td>创建者</td></tr><tr><td>content</td><td>文章内容</td></tr><tr><td>create_date</td><td>创建时间</td></tr><tr><td>update_date</td><td>更新时间</td></tr></tbody></table><p>index.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> TableStore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tablestore&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 初始化TableStore client</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> TableStore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Client</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    accessKeyld</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&lt;your access key&gt;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    accessKeySecret</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&lt;your access secret&gt;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    endpoint</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;https://serverless-app.cn-shanghai.ots.aliyuncs.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    instancename</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;serverless-cms&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* 创建 user 表</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* 参考文档:https://help.aliyun.com/document_detail/100594.html</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#ABB2BF;">....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 文章article 表</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>以上完整代码：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> clone</span><span style="color:#98C379;"> https://github.com/nodejh/serverless-class</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 文件夹</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> 16/cms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>需要实现以下几个 API：</p><ul><li>用户注册：POST /user/register</li><li>用户登录：POST /user/login</li><li>发布文章：POST /article/create</li><li>查询文章：GET /article/detail/[article_id]</li><li>更新文章：POST /article/update</li><li>删除文章：PUT /article/delete/[article_id]</li></ul><p>初始化 Serverless 项目模板：template.yaml</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">ROSTemplateFormatVersion</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#E06C75;">Transform</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#E06C75;">Resources</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> # 函数服务，该服务中的函数都是内容管理系统的函数</span></span>
<span class="line"><span style="color:#E06C75;"> serverless</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  Type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Aliyun::Serverless::Service’</span></span>
<span class="line"><span style="color:#98C379;">  Properties:</span></span>
<span class="line"><span style="color:#98C379;">   Description: &#39;Serverless 内容管理系统&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # 函数名称</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#98C379;">functionName</span><span style="color:#ABB2BF;">]:</span></span>
<span class="line"><span style="color:#E06C75;">   Type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E06C75;">   Properties</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> # 函数路径</span></span>
<span class="line"><span style="color:#E06C75;"> Handler</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&lt;functionPath&gt;.handler</span></span>
<span class="line"><span style="color:#E06C75;"> Runtime</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">nodejs12</span></span>
<span class="line"><span style="color:#E06C75;"> CodeUri</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;./&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # API网关分组，分钟中的所有API都是内容管理系统的API</span></span>
<span class="line"><span style="color:#D19A66;">  ......</span></span>
<span class="line"><span style="color:#98C379;">  具体配置还有很多...</span></span>
<span class="line"><span style="color:#98C379;">  有空去阿里云文档找</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="用户注册接口" tabindex="-1">用户注册接口 <a class="header-anchor" href="#用户注册接口" aria-label="Permalink to &quot;用户注册接口&quot;">​</a></h3><ul><li>请求方法：POST</li><li>Path：/user/register</li><li>Body 参数：username 用户名、password 密码</li></ul><h4 id="_1-src-function-user-register-js" tabindex="-1">1.src/function/user/register.js <a class="header-anchor" href="#_1-src-function-user-register-js" aria-label="Permalink to &quot;1.src/function/user/register.js&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;..../db/client&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 用户注册</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#7F848E;font-style:italic;"> 用户名</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string]password 密码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRow</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从 event 中获取 API 网关传递 HTTP 请求 body 数据</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()).</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">password</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> body</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }))</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">			callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;用户注册失败&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="_2-将应用部署到函数计算" tabindex="-1">2.将应用部署到函数计算 <a class="header-anchor" href="#_2-将应用部署到函数计算" aria-label="Permalink to &quot;2.将应用部署到函数计算&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果看到运行后都部署成功，就成功了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-通过-curl-测试一下" tabindex="-1">3.通过 curl 测试一下 <a class="header-anchor" href="#_3-通过-curl-测试一下" aria-label="Permalink to &quot;3.通过 curl 测试一下&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curlhttp://a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/user/register</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-X </span><span style="color:#98C379;">POST</span></span>
<span class="line"><span style="color:#61AFEF;">-d</span><span style="color:#98C379;"> &quot;username=Jack&amp;password=123456&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{ </span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#D19A66;"> true</span><span style="color:#98C379;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_4-阿里云控制台查看用户注册的数据" tabindex="-1">4.阿里云控制台查看用户注册的数据 <a class="header-anchor" href="#_4-阿里云控制台查看用户注册的数据" aria-label="Permalink to &quot;4.阿里云控制台查看用户注册的数据&quot;">​</a></h4><p><img src="`+r+`" alt="阿里云控制台查看用户注册的数据"></p><h3 id="用户登录接口" tabindex="-1">用户登录接口 <a class="header-anchor" href="#用户登录接口" aria-label="Permalink to &quot;用户登录接口&quot;">​</a></h3><ul><li>请求方法：POST</li><li>Path：/user/login</li><li>Body 参数：username 用户名、password 密码</li></ul><h4 id="_1-src-function-user-login-js" tabindex="-1">1.src/function/user/login.js <a class="header-anchor" href="#_1-src-function-user-login-js" aria-label="Permalink to &quot;1.src/function/user/login.js&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> assert</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;assert&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> jwt</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;jsonwebtoken&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">jwt_secret</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../../config&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./../db/client&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 用户登录</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#7F848E;font-style:italic;"> 用户名</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#7F848E;font-style:italic;"> 密码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> login</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRow</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#61AFEF;">	assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">password</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> password</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> token</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jwt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sign</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;"> }, </span><span style="color:#E06C75;">jwt_secret</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> token</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()).</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">password</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> body</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	login</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">token</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;"> } }))</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">			callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;用户登录失败&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="_2-将应用部署到函数计算-1" tabindex="-1">2.将应用部署到函数计算 <a class="header-anchor" href="#_2-将应用部署到函数计算-1" aria-label="Permalink to &quot;2.将应用部署到函数计算&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果看到运行后都部署成功，就成功了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-通过-curl-测试一下-1" tabindex="-1">3.通过 curl 测试一下 <a class="header-anchor" href="#_3-通过-curl-测试一下-1" aria-label="Permalink to &quot;3.通过 curl 测试一下&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curlhttp://a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/user/login</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-X </span><span style="color:#98C379;">POST</span></span>
<span class="line"><span style="color:#61AFEF;">-d</span><span style="color:#98C379;"> &quot;username=Jack&amp;password=123456&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#61AFEF;">:true,</span><span style="color:#98C379;"> &quot;data&quot;:</span><span style="color:#98C379;"> {&quot;token&quot;:&quot;eyJhbGciOiJIUzl1NilslnR5cCI6lkpXVCJ9.eyJ1c2VybmFtZS16lkphY2siLCJpYXQiOjE2MTEOOTI2ODF9.c56Xm4RBLYI5yVtR_Vk0lZOLOyijofcyE-P7vjkf4nA&quot;}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="实现身份认证" tabindex="-1">实现身份认证 <a class="header-anchor" href="#实现身份认证" aria-label="Permalink to &quot;实现身份认证&quot;">​</a></h3><p>Express.js 框架的身份认证中间件，用来拦截所有请求。身份认证通过后才能进执行后面的代码逻辑</p><h4 id="_1-src-middleware-auth-js" tabindex="-1">1.src/middleware/auth.js <a class="header-anchor" href="#_1-src-middleware-auth-js" aria-label="Permalink to &quot;1.src/middleware/auth.js&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> jwt</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;jsonwebtoken&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">jwt_secret</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../config/index&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 身份认证</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E06C75;font-style:italic;"> fobject</span><span style="color:#7F848E;font-style:italic;">} event API 网关的 event 对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#7F848E;font-style:italic;"> fobiect]认证通过后返 user 信息;认证失败则返回 false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> auth</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">headers</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Authorization</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> token</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Authorization</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jwt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">verify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">jwt_secret</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> user</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> auth</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="_2-引入-auth-js-并传入-event-对象" tabindex="-1">2.引入 auth.js 并传入 event 对象 <a class="header-anchor" href="#_2-引入-auth-js-并传入-event-对象" aria-label="Permalink to &quot;2.引入 auth.js 并传入 event 对象&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> auth</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/middleware/auth&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 使用 auth 进行身份认证</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> auth</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;身份认证失败!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 通过身份认证后的业务逻辑</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#61AFEF;">	callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_3-将应用部署到函数计算" tabindex="-1">3.将应用部署到函数计算 <a class="header-anchor" href="#_3-将应用部署到函数计算" aria-label="Permalink to &quot;3.将应用部署到函数计算&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果看到运行后都部署成功，就成功了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="发布文章接口" tabindex="-1">发布文章接口 <a class="header-anchor" href="#发布文章接口" aria-label="Permalink to &quot;发布文章接口&quot;">​</a></h3><ul><li>请求方法：POST</li><li>Path：article/create</li><li>Headers 参数：Authorization token</li><li>Body 参数：title、 content</li></ul><h4 id="_1-src-function-article-auth-js" tabindex="-1">1.src/function/article/auth.js <a class="header-anchor" href="#_1-src-function-article-auth-js" aria-label="Permalink to &quot;1.src/function/article/auth.js&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> uuid</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;uuid&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> auth</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../../middleware/auth&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.././db/client&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 创建文章</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#7F848E;font-style:italic;"> 用户名</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> title</span><span style="color:#7F848E;font-style:italic;"> 文章标题</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> content</span><span style="color:#7F848E;font-style:italic;"> 文章内容</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createArticle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">content</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> article_id</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> uuid</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">v4</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> now</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toLocaleString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRow</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;article&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			article_id</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			username</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			title</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			content</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			create_date</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			update_date</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> article_id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 身份认证</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> auth</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;身份认证失败&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从 user 中获取 username</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">username</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> user</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()).</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">content</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> body</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	createArticle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }))</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">			callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;创建文章失败&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h4 id="_2-将应用部署到函数计算-2" tabindex="-1">2.将应用部署到函数计算 <a class="header-anchor" href="#_2-将应用部署到函数计算-2" aria-label="Permalink to &quot;2.将应用部署到函数计算&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果看到运行后都部署成功，就成功了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-curl-命令测试" tabindex="-1">3.curl 命令测试 <a class="header-anchor" href="#_3-curl-命令测试" aria-label="Permalink to &quot;3.curl 命令测试&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curlhttp://a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/create</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-X </span><span style="color:#98C379;">POST</span></span>
<span class="line"><span style="color:#61AFEF;">-d</span><span style="color:#98C379;"> &quot;title=这是文章标题&amp;content=内容内容内容..&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">-H</span><span style="color:#98C379;"> &quot;Authorization: Bearer eyJhbGciOiJIUzl1NilslnR5cCl6lkpXVCJ9.eyJ1c2VybmFtZS16lkphY2siLCJpYXQiOjE2MTEOOTI20DF9.c56Xm4RBLYl5yVtR_Vk0lZOLOyijofcyE-P7vikf4nA&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#D19A66;"> true</span><span style="color:#98C379;">,&quot;data&quot;:</span><span style="color:#98C379;"> {&quot;article_id&quot;:</span><span style="color:#98C379;"> &quot;d4b9bad8-a0ed-499d-b3c6c57f16eaa193&quot;}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>文章发布成功后，可以在控制台表格存储中看到对应的数据</p><h3 id="查询文章接口" tabindex="-1">查询文章接口 <a class="header-anchor" href="#查询文章接口" aria-label="Permalink to &quot;查询文章接口&quot;">​</a></h3><ul><li>请求方法：GET</li><li>Path：article/detail/[article_id]</li><li>Headers 参数：Authorization token</li></ul><h4 id="_1-src-function-article-auth-js-1" tabindex="-1">1.src/function/article/auth.js <a class="header-anchor" href="#_1-src-function-article-auth-js-1" aria-label="Permalink to &quot;1.src/function/article/auth.js&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> uuid</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;uuid&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> auth</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../../middleware/auth&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.././db/client&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 获取文章详情</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> title</span><span style="color:#7F848E;font-style:italic;"> 文章ID</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> getArticle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">article_id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRow</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;article&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		article_id</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> res</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 身份认证</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> auth</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;身份认证失败&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从 event 对象中获取文章 ID</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> article_id</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()).</span><span style="color:#E06C75;">pathParameters</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;article_id&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	getArticle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">article_id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">detail</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">detail</span><span style="color:#ABB2BF;"> }))</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">			callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;创建文章失败&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h4 id="_2-将应用部署到函数计算-3" tabindex="-1">2.将应用部署到函数计算 <a class="header-anchor" href="#_2-将应用部署到函数计算-3" aria-label="Permalink to &quot;2.将应用部署到函数计算&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果看到运行后都部署成功，就成功了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-curl-命令测试-1" tabindex="-1">3.curl 命令测试 <a class="header-anchor" href="#_3-curl-命令测试-1" aria-label="Permalink to &quot;3.curl 命令测试&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curlhttp://a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/detail/d4b9bad8-aDed-499d-b3c6.c57f16eaa193</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-H </span><span style="color:#98C379;">&quot;Authorization: Bearer eyJhbGciOiJIUzl1NilslnR5cC16lkpXVCJ9.eyJ1c2VybmFtZs16lkphY2siLCJpYXQiOiE2MTEOOTI2ODF9.c56Xm4RBLY[5yVtR_Vk0lZOLOyijofcyEP7vjKf4nA&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#56B6C2;">true</span><span style="color:#98C379;">,</span><span style="color:#98C379;"> &quot;data&quot;:</span><span style="color:#98C379;"> {</span><span style="color:#98C379;"> &quot;article_id&quot;:</span><span style="color:#98C379;"> &quot;d4b9bad8-a0ed-499d-b3c6c57f16eaa193&quot;,&quot;content&quot;:&quot;内容内容内容......&quot;,&quot;create_date&quot;.&quot;1/24/20212:05:46 PM&quot;,&quot;title&quot;:&quot;这是文章标题&quot;,&quot;update_date&quot;,&quot;1/24/2021,2:05:46PM&quot;,&quot;username&quot;:&quot;Jack&quot;}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="更新文章请求" tabindex="-1">更新文章请求 <a class="header-anchor" href="#更新文章请求" aria-label="Permalink to &quot;更新文章请求&quot;">​</a></h3><ul><li>请求方法：PUT</li><li>Path：/article/update/[article_id]</li><li>Headers 参数：Authorization token</li><li>Body 参数：title、content</li></ul><h4 id="_1-src-function-article-auth-js-2" tabindex="-1">1.src/function/article/auth.js <a class="header-anchor" href="#_1-src-function-article-auth-js-2" aria-label="Permalink to &quot;1.src/function/article/auth.js&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> auth</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./../middleware/auth&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../../db/client&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 更新文章</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> article_id</span><span style="color:#7F848E;font-style:italic;"> 待更新的文章ID</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> title</span><span style="color:#7F848E;font-style:italic;"> 文草标题</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;">  content</span><span style="color:#7F848E;font-style:italic;"> 文章内容</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> updateArticle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">article_id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">content</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> now</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toLocaleString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">updateRow</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;article&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			article_id</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			title</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			content</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			update_date</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 身份认证</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> auth</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;身份认证失败&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> eventObject</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从event 对象的 pathParameters 中获取 Path 参数</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> article_id</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> eventObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pathParameters</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;article id&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">eventObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从 event 对象的 body 中获取请求体参数</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">content</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> body</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	updateArticle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">article_id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">content</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }))</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">			callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;更新文章失败&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h4 id="_2-将应用部署到函数计算-4" tabindex="-1">2.将应用部署到函数计算 <a class="header-anchor" href="#_2-将应用部署到函数计算-4" aria-label="Permalink to &quot;2.将应用部署到函数计算&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果看到运行后都部署成功，就成功了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-curl-命令测试-2" tabindex="-1">3.curl 命令测试 <a class="header-anchor" href="#_3-curl-命令测试-2" aria-label="Permalink to &quot;3.curl 命令测试&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curl</span><span style="color:#98C379;"> http://a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/update/d4b9bad8-aDed-499d-b3c6c57f16eaa193</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-X </span><span style="color:#98C379;">PUT</span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">-d </span><span style="color:#98C379;">&quot;title=这是文章标题&amp;content=更新的内容...&quot;</span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">-H </span><span style="color:#98C379;">&quot;Authorization: Bearer eyJhbGciOiJIUzl1NilsInR5cC16lkpXVCJ9.eyJ1c2VybmFtZS16lkphY2siLCJpYXOiOjE2MTEOOTI2ODF9.c56Xm4RBLY[5yVtR_Vk0lZOLOyijofcyE-P7vjkf4nA&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#D19A66;"> true</span><span style="color:#98C379;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="删除文章请求" tabindex="-1">删除文章请求 <a class="header-anchor" href="#删除文章请求" aria-label="Permalink to &quot;删除文章请求&quot;">​</a></h3><ul><li>请求方法：DELETE</li><li>Path：/article/delete/[article_id]</li><li>Headers 参数：Authorization token</li></ul><h4 id="_1-src-function-article-auth-js-3" tabindex="-1">1.src/function/article/auth.js <a class="header-anchor" href="#_1-src-function-article-auth-js-3" aria-label="Permalink to &quot;1.src/function/article/auth.js&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> uuid</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;uuid&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> auth</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../../middleware/auth&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.././db/client&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 删除文章</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {string}</span><span style="color:#E06C75;font-style:italic;"> title</span><span style="color:#7F848E;font-style:italic;"> 文章ID</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> deleteArticle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">article_id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deleteRow</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;article&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		article_id</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> res</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 身份认证</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> auth</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 若认证失败则直接返回</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;身份认证失败&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从 event 对象中获取文章 ID</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> article_id</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()).</span><span style="color:#E06C75;">pathParameters</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;article_id&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	deleteArticle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">article_id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }))</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">			callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;删除文章失败&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h4 id="_2-将应用部署到函数计算-5" tabindex="-1">2.将应用部署到函数计算 <a class="header-anchor" href="#_2-将应用部署到函数计算-5" aria-label="Permalink to &quot;2.将应用部署到函数计算&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> deploy</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果看到运行后都部署成功，就成功了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-curl-命令测试-3" tabindex="-1">3.curl 命令测试 <a class="header-anchor" href="#_3-curl-命令测试-3" aria-label="Permalink to &quot;3.curl 命令测试&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curl</span><span style="color:#98C379;"> http://a88f7e84f71749958100997b77b3e2f6-cn-beijing.alicloudapi.com/article/delete/d4b9bad8-a0ed-499db3c6-c57f16eaa193</span><span style="color:#56B6C2;"> \\</span></span>
<span class="line"><span style="color:#ABB2BF;">-X </span><span style="color:#98C379;">DELETE</span></span>
<span class="line"><span style="color:#61AFEF;">-H</span><span style="color:#98C379;"> &quot;Authorization: Bearer eyJhbGciOiJIUzl1NilsInR5cC161kpxVCJ9.eyJ1c2VybmFtZS16lkphY2siLCJpYXQiOjE2MTEOOTI2ODF9.c56Xm4RBLY[5yVtR_Vk0lZOLOyijofcyE-P7vikf4nA&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#61AFEF;">&quot;success&quot;</span><span style="color:#61AFEF;">:true}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="基于-serverless-构建弹性可扩展的-restful-api-总结" tabindex="-1">基于 Serverless 构建弹性可扩展的 Restful API 总结 <a class="header-anchor" href="#基于-serverless-构建弹性可扩展的-restful-api-总结" aria-label="Permalink to &quot;基于 Serverless 构建弹性可扩展的 Restful API 总结&quot;">​</a></h3><p>基于 Serverless 开发 RestfulAPI 的整个代码非常简单每个函数只负责一个独立的业务</p><ul><li>基于 Serverless 开发 API 时，建议你使用 API 网关进行 API 的管理</li><li>对于数据库等第三方服务，建议对其基本操作进行封装这样更方便进行扩展</li><li>Serverless 函数需要保持简单、独立、单一职责</li></ul><h2 id="服务端渲染-ssr-应用" tabindex="-1">服务端渲染(SSR)应用 <a class="header-anchor" href="#服务端渲染-ssr-应用" aria-label="Permalink to &quot;服务端渲染(SSR)应用&quot;">​</a></h2><p>参考代码：<a href="https://github.com/nodejh/serverless-class" target="_blank" rel="noreferrer">https://github.com/nodejh/serverless-class</a></p><h3 id="前言-1" tabindex="-1">前言 <a class="header-anchor" href="#前言-1" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>Serverless 最大的应用场景之一：就是开发服务端渲染(SSR)应用</p><h3 id="基于-serverless-的服务端渲染架构" tabindex="-1">基于 Serverless 的服务端渲染架构 <a class="header-anchor" href="#基于-serverless-的服务端渲染架构" aria-label="Permalink to &quot;基于 Serverless 的服务端渲染架构&quot;">​</a></h3><h4 id="主流前端框架" tabindex="-1">主流前端框架 <a class="header-anchor" href="#主流前端框架" aria-label="Permalink to &quot;主流前端框架&quot;">​</a></h4><ul><li>React.js</li><li>Vue.js</li></ul><h4 id="主流前端框架的问题" tabindex="-1">主流前端框架的问题 <a class="header-anchor" href="#主流前端框架的问题" aria-label="Permalink to &quot;主流前端框架的问题&quot;">​</a></h4><ul><li>不利于 SEO：页面源码不再是 HTML，而是染 HTML 的 JavaScript 这就导致搜索引擎爬虫难以解析其中的内容</li><li>初始化性能差：通常单元应用的 JS 文件体积都比较大、加载耗时比较长导致页面白屏</li></ul><h4 id="传统服务端渲染架构" tabindex="-1">传统服务端渲染架构 <a class="header-anchor" href="#传统服务端渲染架构" aria-label="Permalink to &quot;传统服务端渲染架构&quot;">​</a></h4><p><img src="`+t+'" alt="传统服务端渲染架构"></p><h4 id="实现一个服务端渲染应用-通常面临着一些问题" tabindex="-1">实现一个服务端渲染应用，通常面临着一些问题 <a class="header-anchor" href="#实现一个服务端渲染应用-通常面临着一些问题" aria-label="Permalink to &quot;实现一个服务端渲染应用，通常面临着一些问题&quot;">​</a></h4><ul><li>部署服务端渲染应用需要购买服务器，并配置服务器环境，要对服务器进行运维</li><li>需要关注业务量，考虑有没有高并发场景、服务器有没有扩容机制</li><li>需要实现负载均衡、流量控制等复杂后端能力等</li></ul><h4 id="基于-serverless-的服务选染架构" tabindex="-1">基于 Serverless 的服务选染架构 <a class="header-anchor" href="#基于-serverless-的服务选染架构" aria-label="Permalink to &quot;基于 Serverless 的服务选染架构&quot;">​</a></h4><p><img src="'+c+'" alt="基于Serverless的服务选染架构"></p><h4 id="进阶版基于-serverless-的服务端染架构" tabindex="-1">进阶版基于 Serverless 的服务端染架构 <a class="header-anchor" href="#进阶版基于-serverless-的服务端染架构" aria-label="Permalink to &quot;进阶版基于 Serverless 的服务端染架构&quot;">​</a></h4><p><img src="'+i+'" alt="进阶版基于Serverless的服务端染架构"></p><h3 id="实现一个-serverless-的服务端渲染应用" tabindex="-1">实现一个 Serverless 的服务端渲染应用 <a class="header-anchor" href="#实现一个-serverless-的服务端渲染应用" aria-label="Permalink to &quot;实现一个 Serverless 的服务端渲染应用&quot;">​</a></h3><h4 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h4><ul><li>首页-文章列表</li><li>文章详情</li></ul><p>示例代码：<a href="https://github.com/nodejh/serverless-class/tree/master/17/serverless-ssr-cms" target="_blank" rel="noreferrer">https://github.com/nodejh/serverless-class/tree/master/17/serverless-ssr-cms</a></p><p>接口文件夹：src</p><p>页面实现文件夹：web</p><h5 id="_1-首页接口的实现-src-service-index-ts" tabindex="-1">1.首页接口的实现：src/service/index.ts <a class="header-anchor" href="#_1-首页接口的实现-src-service-index-ts" aria-label="Permalink to &quot;1.首页接口的实现：src/service/index.ts&quot;">​</a></h5><h5 id="_2-首页页面的实现-web-pages-index" tabindex="-1">2.首页页面的实现：web/pages/index <a class="header-anchor" href="#_2-首页页面的实现-web-pages-index" aria-label="Permalink to &quot;2.首页页面的实现：web/pages/index&quot;">​</a></h5><ul><li>fetch.ts：获取首页数据</li><li>render.tsx：首页页面 UI 组件代码</li><li>index.less：样式代码</li></ul><h5 id="_3-详情页接口的实现-src-service-detail-ts" tabindex="-1">3.详情页接口的实现：src/service/detail.ts <a class="header-anchor" href="#_3-详情页接口的实现-src-service-detail-ts" aria-label="Permalink to &quot;3.详情页接口的实现：src/service/detail.ts&quot;">​</a></h5><h5 id="_4-详情页页面的实现-web-pages-detail" tabindex="-1">4.详情页页面的实现：web/pages/detail <a class="header-anchor" href="#_4-详情页页面的实现-web-pages-detail" aria-label="Permalink to &quot;4.详情页页面的实现：web/pages/detail&quot;">​</a></h5><ul><li>fetch.ts：获取详情页数据</li><li>render$id.tsx：详情页页面 UI 组件代码</li><li>index.less：样式代码</li></ul><p>部署：更好的实践是:实现一个业务的持续集成流程，统一构建部署</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>基于 Serverless 的服务端渲染应用实现也比较简单，如果你想要追求更好的用户体验我也建议你对核心业务做服务端渲染的优化</p><h4 id="达到页面的极致体验" tabindex="-1">达到页面的极致体验 <a class="header-anchor" href="#达到页面的极致体验" aria-label="Permalink to &quot;达到页面的极致体验&quot;">​</a></h4><ul><li><p>将静态资源部署到 CDN，提升资源加载速度</p></li><li><p>针对页面进行缓存，减少函数冷启动对性能的影响</p></li><li><p>对服务端异常进行降级处理</p><p>1.基于 Serverless 的服务端染应用，可以让我们不用关心服务器的运维应用也天然具有弹性</p><p>2.基于 Serverless 开发服务端渲染应用建议完善业务的持续集成流程</p><p>3.要达到页面的极致性能还需要考虑将静态资源部署到 CDN、对页面进行缓存等技术</p><p>4.对于服务端渲染应用建议你完善业务的服务降级能力，进一步提高稳定性对于服务端渲染应用建议你完善业务的服务降级能力，进一步提高稳定性</p></li></ul><h2 id="批处理任务-基于-serverless-开发音视频处理系统" tabindex="-1">批处理任务：基于 Serverless 开发音视频处理系统 <a class="header-anchor" href="#批处理任务-基于-serverless-开发音视频处理系统" aria-label="Permalink to &quot;批处理任务：基于 Serverless 开发音视频处理系统&quot;">​</a></h2><p>音视频处理：是一个 CPU 密集型的操作，非常消耗计算资源</p><h3 id="传统音视频处理方案" tabindex="-1">传统音视频处理方案 <a class="header-anchor" href="#传统音视频处理方案" aria-label="Permalink to &quot;传统音视频处理方案&quot;">​</a></h3><p>信息传播的媒介</p><ul><li>文字</li><li>图片</li><li>视频</li><li>短视频</li><li>直播</li><li>AR</li><li>VR</li></ul><p><img src="'+B+'" alt="传统音视频处理方案"></p><p>虽然用了视频转码服务，但还是要购买大量的服务器，来搭建自己的视频处理系统，对视频进行更高级的自定义处理</p><p>遇到的问题</p><ul><li>如何应对大量并发任务?</li><li>能否让这个系统有更高的弹性和可用性?</li></ul><h3 id="基于-serverless-的音视频处理系统" tabindex="-1">基于 Serverless 的音视频处理系统 <a class="header-anchor" href="#基于-serverless-的音视频处理系统" aria-label="Permalink to &quot;基于 Serverless 的音视频处理系统&quot;">​</a></h3><p>从基础设施的角度来看：基于 Serverless 的音视频解决方案--主要是替换了传统方案中的计算资源，也就是替换了服务器</p><p>基于 Serverless 平台提供的丰富的触发器，也能简化编程模型</p><p>传统服务器</p><p><img src="'+y+`" alt="传统服务器"></p><p>基于 Serverless 平台提供的丰富的触发器</p><p>![基于 Serverless 平台提供的丰富的触发器](.\\img\\基于 Serverless 平台提供的丰富的触发器.jpg)</p><p>基于 Serverless 的音视频处理系统，使用了 ffmpeg 和 ffprobe 命令行工具，主要有以下几个功能：</p><ul><li>获取视频时长</li><li>截取视频 GIF 图</li><li>获取视频元数据</li><li>对视频进行转码</li><li>为视频添加水印</li></ul><p>示例参考代码：<a href="https://github.com/nodejh/serverless-class/tree/master/18/serverless-video" target="_blank" rel="noreferrer">https://github.com/nodejh/serverless-class/tree/master/18/serverless-video</a></p><p>1.公共方法：common/utils.js</p><p>2.获取 OSS 客户端操作：functions/get_duration/index.js</p><h4 id="音视频处理系统的部署" tabindex="-1">音视频处理系统的部署 <a class="header-anchor" href="#音视频处理系统的部署" aria-label="Permalink to &quot;音视频处理系统的部署&quot;">​</a></h4><p>函数的依赖：需要一起打包上传到 FaaS 平台</p><p>所以需要将 ffmpeg 和 ffprobe 上传</p><p>在上传到 FaaS 平台之前，需要为其赋予可执行权限</p><p>1.通过 ls 命令来查看文件的权限</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> ls</span><span style="color:#D19A66;"> -l</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">-rwxr-xr-x</span><span style="color:#D19A66;"> 1</span><span style="color:#98C379;"> root</span><span style="color:#98C379;"> staff</span><span style="color:#D19A66;"> 39000328</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 9</span><span style="color:#98C379;"> 20:59</span><span style="color:#98C379;"> ffmpeg</span></span>
<span class="line"><span style="color:#61AFEF;">-rwxr-xr-x</span><span style="color:#D19A66;"> 1</span><span style="color:#98C379;"> root</span><span style="color:#98C379;"> staff</span><span style="color:#D19A66;"> 38906056</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 9</span><span style="color:#98C379;"> 21:00</span><span style="color:#98C379;"> ffprobe</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+u+`" alt="权限说明"></p><p>2.如果两个文件都没有执行文件权限，需要通过下面的命令添加权限</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">chmod</span><span style="color:#98C379;"> +x</span><span style="color:#98C379;"> ffmpeg</span></span>
<span class="line"><span style="color:#61AFEF;">chmod</span><span style="color:#98C379;"> +x</span><span style="color:#98C379;"> ffprobe</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>3.如何授权：在 template.yaml</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 权限相关</span></span>
<span class="line"><span style="color:#E06C75;">Role</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">acs:ram::1457216987974698:role/aliyunfclogexecutionrole</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="基于-serverless-开发音视频处理系统-总结" tabindex="-1">基于 Serverless 开发音视频处理系统 总结 <a class="header-anchor" href="#基于-serverless-开发音视频处理系统-总结" aria-label="Permalink to &quot;基于 Serverless 开发音视频处理系统 总结&quot;">​</a></h3><p>这一讲我们学习了怎么基于 Serverless 实现一个音视频处理系统，介绍了如何通过 ncc 进行代码构建</p><ul><li>Serverless 除了适合 Web 接口、服务端染等场景还适合 CPU 密集型的任务</li><li>基于 Serverless 开发的音视频处理系统本身就具备弹性、可扩展、低成本、免运维、高可用的能力</li><li>对干需要通过代码执行的命令行工具等依赖，部署到 FaaS 平台之前需要为其设置可执行权限若函数依需要调用其他云产品的接口，需要为函数授予相应权限</li><li>对于添加水印、视频转码等消耗资源的操作需要为函数设置较大的内存和超时时间</li></ul><h2 id="批处理任务-基于-serverless-开发大数据计算批处理" tabindex="-1">批处理任务：基于 Serverless 开发大数据计算批处理 <a class="header-anchor" href="#批处理任务-基于-serverless-开发大数据计算批处理" aria-label="Permalink to &quot;批处理任务：基于 Serverless 开发大数据计算批处理&quot;">​</a></h2><h2 id="物联网应用" tabindex="-1">物联网应用 <a class="header-anchor" href="#物联网应用" aria-label="Permalink to &quot;物联网应用&quot;">​</a></h2><h2 id="短网址服务开发" tabindex="-1">短网址服务开发 <a class="header-anchor" href="#短网址服务开发" aria-label="Permalink to &quot;短网址服务开发&quot;">​</a></h2><p>其他参考项目：<a href="https://github.com/Tsuk1ko/cfworker-url-shortener" target="_blank" rel="noreferrer">Tsuk1ko/cfworker-url-shortener: 部署在 Cloudflare Workers 的短网址服务 (github.com)</a></p><p>参考文章：[短网址生成-nodejs 实现<em>nodejs 短链接服务</em>(def p <a href="https://blog.csdn.net/zhoujiaping123/article/details/81365343/" target="_blank" rel="noreferrer">])的博客-CSDN 博客</a></p><h3 id="功能简要描述" tabindex="-1">功能简要描述 <a class="header-anchor" href="#功能简要描述" aria-label="Permalink to &quot;功能简要描述&quot;">​</a></h3><p>用户可以为指定 URL 创建对应短</p><ul><li>链允许用户通过参数指定生成的短链 slug</li><li>如果没有指定短链，默认使用自动生成的短字符 ID</li></ul><p>用户访问短链，自动跳转到相应 URL</p><ul><li>如果短链不存在，则返回 404</li><li>如果短链存在，记录访问日志 (ip、ua、timestamp)</li></ul><hr><p>实际腾讯云函数项目成品：<a href="https://github.com/zce/tcb" target="_blank" rel="noreferrer">zce/tcb: All my tencent cloudbase sources. (github.com)</a></p><p>成品代码：<a href="https://github.com/zce/short" target="_blank" rel="noreferrer">zce/short: A short url service. (github.com)</a></p><h3 id="_1-创建一个-express-项目后台服务" tabindex="-1">1.创建一个 Express 项目后台服务 <a class="header-anchor" href="#_1-创建一个-express-项目后台服务" aria-label="Permalink to &quot;1.创建一个 Express 项目后台服务&quot;">​</a></h3><p>视频教程：<a href="https://www.bilibili.com/video/av630234827/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/av630234827/</a></p><p><strong>0.package.json</strong></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;short-url&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;基于Serverless + Express开发短网址服务&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;main&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;keywords&quot;</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;author&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;license&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ISC&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node-dev -r dotenv/config index.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;devDependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;node-dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^6.7.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;dotenv&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^16.3.1&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;dependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;@cloudbase/node-sdk&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;2.5.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;express&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^4.17.1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;nanoid&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^4.0.2&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>1.app.js</strong>：全部代码</p><p>看腾讯云的《开发指南文档》：<a href="https://cloud.tencent.com/document/product/876/19369" target="_blank" rel="noreferrer">云开发 CloudBase 概述-开发指南-文档中心-腾讯云 (tencent.com)</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cloudbase</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@cloudbase/node-sdk&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">nanoid</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;nanoid&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 根据腾讯开发文档：数据库初始化引用</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">init</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@cloudbase/node-sdk&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">SECRET_ID</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">SECRET_KEY</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> process</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">env</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 初始化数据库</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> tcb</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">env</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zce&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">secretId</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">SECRET_ID</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">secretKey</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">SECRET_KEY</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1. 获取数据库引用</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tcb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">database</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">urlencoded</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/create&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">slug</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> nanoid</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">) } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 添加一堆逻辑判断</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 2. 构造添加语句：链接添加进数据库</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">collection</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;links&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">slug</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 请求后的返回链接</span></span>
<span class="line"><span style="color:#E5C07B;">	response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">link</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://localhost:3080/&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> slug</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 生成短链接</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/:slug&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">slug</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">collection</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;links&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">where</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">slug</span><span style="color:#ABB2BF;"> }).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">link</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 添加意外情况的判断逻辑</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redirect</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">link</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p><strong>2.index.js</strong>：全部代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3080</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;server is ready &gt; http://localhost:3080&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>3.<code>.env</code>文件</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">SECRET_ID</span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#E06C75;">SECRET_KEY</span><span style="color:#56B6C2;">=</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>4.接口测试文件（前提：先安装插件【REST Client】）：test.http，文件顶部有个提示：<code>Send Request</code>，点击便会请求接口</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">### create</span></span>
<span class="line"><span style="color:#61AFEF;">POST</span><span style="color:#98C379;"> http://localhost:3080/create</span></span>
<span class="line"><span style="color:#61AFEF;">content-type:</span><span style="color:#98C379;"> application/json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;"> &quot;url&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;https://github.com&quot;,</span></span>
<span class="line"><span style="color:#61AFEF;"> &quot;slug&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;zce&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">### redirect</span></span>
<span class="line"><span style="color:#61AFEF;">GET</span><span style="color:#98C379;"> http://localhost:3080/xxx</span></span>
<span class="line"><span style="color:#61AFEF;">content-type:</span><span style="color:#98C379;"> application/json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;"> &quot;url&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;https://github.com&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>5.腾讯云：云开发 CloudBase——数据库——新建环境——勾选 开启免费资源——创建——回到创建好的数据库——新建集合</strong></p><h2 id="serverless-eggjs-开发后台管理" tabindex="-1">Serverless+Eggjs 开发后台管理 <a class="header-anchor" href="#serverless-eggjs-开发后台管理" aria-label="Permalink to &quot;Serverless+Eggjs 开发后台管理&quot;">​</a></h2><p>视频教程：<a href="https://www.bilibili.com/video/av413092278/?vd_source=5f0c99b3deddffe219938763769b15ac" target="_blank" rel="noreferrer">Serverless + Egg.js 开发后台管理_哔哩哔哩_bilibili</a></p><p>珠峰文档：[珠峰架构师成长计划 (zhufengpeixun.com)](<a href="http://www.zhufengpeixun.com/strong/html/97.serverless.html#t11.1" target="_blank" rel="noreferrer">http://www.zhufengpeixun.com/strong/html/97.serverless.html#t11.1</a> Serverless 是什么？)</p><h2 id="小程序" tabindex="-1">小程序 <a class="header-anchor" href="#小程序" aria-label="Permalink to &quot;小程序&quot;">​</a></h2><h2 id="nuxt3-vercel-serverless-全栈开发" tabindex="-1">Nuxt3+Vercel+Serverless 全栈开发 <a class="header-anchor" href="#nuxt3-vercel-serverless-全栈开发" aria-label="Permalink to &quot;Nuxt3+Vercel+Serverless 全栈开发&quot;">​</a></h2><p>视频：<a href="https://www.bilibili.com/video/BV1Dk4y1s7er/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1Dk4y1s7er/</a></p><h2 id="阿里工程师带你从零开始学-node-js-serverless" tabindex="-1">阿里工程师带你从零开始学 Node.js：Serverless <a class="header-anchor" href="#阿里工程师带你从零开始学-node-js-serverless" aria-label="Permalink to &quot;阿里工程师带你从零开始学 Node.js：Serverless&quot;">​</a></h2><p>视频：<a href="https://www.bilibili.com/video/BV1154y1T7dy/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1154y1T7dy/</a></p>`,256)]))}const f=n(b,[["render",F]]);export{q as __pageData,f as default};
