import{_ as n,c as a,o as e,ah as p}from"./chunks/framework.DqD713j2.js";const B=JSON.parse('{"title":"其它","description":"","frontmatter":{},"headers":[],"relativePath":"Document/TypeScript/TypeScript语法基础/其他.md","filePath":"Document/TypeScript/TypeScript语法基础/其他.md","lastUpdated":1750954157000}'),l={name:"Document/TypeScript/TypeScript语法基础/其他.md"};function o(c,s,t,r,i,d){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h1><h2 id="typescript-使用-impot-模块化语法" tabindex="-1">TypeScript 使用 impot 模块化语法 <a class="header-anchor" href="#typescript-使用-impot-模块化语法" aria-label="Permalink to &quot;TypeScript 使用 impot 模块化语法&quot;">​</a></h2><p>page.ts 文件</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Header</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Content</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Footer</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./components&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Page</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Header</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Content</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Footer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面例子编译出来的会变成 AMD 模块结构的代码，不能在浏览器上跑，只能在 Node 环境跑，所以需要 require.js 库来配合</p><h3 id="引入-require-js" tabindex="-1">引入 require.js <a class="header-anchor" href="#引入-require-js" aria-label="Permalink to &quot;引入 require.js&quot;">​</a></h3><p>我这里使用了一个现成的 CDN 的<code>require.js</code>,地址你可以直接复制，然后用<code>&lt;script&gt;</code>标签进行引入。</p><blockquote><p>Require.js 的 CDN 地址： <a href="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js" target="_blank" rel="noreferrer">https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js</a></p></blockquote><p>复制好 URL 地址后，记得使用<code>&lt;script&gt;</code>标签进行引入，代码如下。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这时候就可以解析<code>define</code>这样的语法了。然后把<code>page.ts</code>中加入<code>default</code>关键字，如果不加是没办法直接引用到的。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Header</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Content</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Footer</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./components&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Page</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Header</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Content</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Footer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这时候再用<code>tsc</code>进行编译一下，你会发现还是又问题。因为使用<code>export default</code>这种形式的语法，需要在<code>html</code>里用<code>require</code>来进行引入。</p><h3 id="require-方式引入" tabindex="-1">require 方式引入 <a class="header-anchor" href="#require-方式引入" aria-label="Permalink to &quot;require 方式引入&quot;">​</a></h3><p>因为你已经加入了<code>require.js</code>这个库，所以现在可以直接在代码中使用<code>require</code>了。具体代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">		require</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;page&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">page</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			new</span><span style="color:#E5C07B;"> page</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>写完这部，刷新页面，可以看到正常显示出来了，虽然用起来比较麻烦，但是我们还是实现了用<code>import</code>来进行引入，当我们又了<code>webpack</code>和<code>Parcel</code>的时候就不会这么麻烦，这些都交给打包工具来处理就好了。</p><h2 id="用-parcel-打包-typescript-代码" tabindex="-1">用 Parcel 打包 TypeScript 代码 <a class="header-anchor" href="#用-parcel-打包-typescript-代码" aria-label="Permalink to &quot;用 Parcel 打包 TypeScript 代码&quot;">​</a></h2><p>最通用的有两种解决方案<code>Webpack</code>和<code>Parcel</code>。<code>webpack</code>不用多说，只要是前端基本都会，这几年<code>Parcel</code>也开始崛起，用的人也越来越多。所以这节课就讲一下，如何使用<code>Parcel</code>来打包<code>TypeScript</code>代码。</p><p><a href="https://www.jspang.com/article/63#toc3104" target="_blank" rel="noreferrer">建立一个新项目</a></p><p>这里给出新建项目的步骤，如果你已经熟悉此过程，可以跳过。</p><ol><li>教学需要，这里我们重新建立一个项目<code>TSTest</code>,在桌面新建立一个文件夹，然后在<code>VSCode</code>中打开。</li><li>打开终端，输入<code>npm init -y</code>,创建<code>package.json</code>文件</li><li>在终端中输入<code>tsc --init</code>,创建<code>tsconfig.json</code>文件</li><li>修改<code>tsconfig.json</code>配置<code>rootDir</code>和<code>outDir</code>.</li><li>新建<code>src</code>文件夹，在里边建立<code>index.html</code>,<code>page.ts</code>文件</li><li>编写<code>index.html</code>文件，并引入<code>page.ts</code>文件</li><li>编写<code>page.ts</code>文件。</li></ol><p>index.html 文件代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">&lt;!</span><span style="color:#E5C07B;">DOCTYPE</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;font-style:italic;"> lang</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;font-style:italic;"> charset</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;font-style:italic;"> content</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;./page.ts&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>page.ts 文件代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> teacher</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;jspang&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">teacher</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这时候我们并不能正常的预览出效果，我们需要<code>Parcel</code>的帮忙。</p><p><a href="https://www.jspang.com/article/63#toc3105" target="_blank" rel="noreferrer">Parcel 的安装和使用</a></p><p>Parcel 可以通过<code>npm</code>或者<code>yarn</code>来进行安装，我这里<code>npm</code>安装很慢，会 5 分钟左右，所以我使用<code>yarn</code>来进行安装。代码如下。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">yarn</span><span style="color:#E06C75;"> add</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;">dev</span><span style="color:#E06C75;"> parcel</span><span style="color:#ABB2BF;">@</span><span style="color:#E06C75;">next</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 yarn 安装大概需要 1 分钟左右，这些主要看你自身的网络情况。</p><p>安装好以后，打开<code>package.json</code>文件，可以看到这样一段代码，我安装的版本是<code>^2.0.0-beta.1</code>,如果你学习时和这个版本不一样，操作可能会稍有不同。</p><p>修改<code>package.json</code>里边的代码。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">  &quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">    &quot;test&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;parcel ./src/index.html&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这个意思就是使用<code>parcel</code>对<code>index.html</code>进行一个编译。</p><p>然后打开终端输入<code>yarn test</code>,这时候终端会给出一个地址<code>http://localhost:1234</code>,把地址放到浏览器上，可以看到浏览器的控制台会输出<code>jspang</code>。</p><p>这说明<code>Parcel</code>会自动对<code>index.html</code>中引入的<code>TypeScript</code>文件进行编译，然后打包好后，就可以直接使用了。</p><p>使用<code>Parcel</code>大大简化了我们的配置过程，如果你想详细学习<code>Parcel</code>可以自行学习，毕竟我们这个是 TypeScript 的教程，所以更多的 Parcel 知识就不作介绍了。</p><h2 id="在-typescript-中使用其他-js-库-以-jquery-库为例" tabindex="-1">在 TypeScript 中使用其他 JS 库，以 Jquery 库为例 <a class="header-anchor" href="#在-typescript-中使用其他-js-库-以-jquery-库为例" aria-label="Permalink to &quot;在 TypeScript 中使用其他 JS 库，以 Jquery 库为例&quot;">​</a></h2><p><a href="https://www.jspang.com/article/63#toc3107" target="_blank" rel="noreferrer">引入 JQuery 框架库</a></p><p>在<code>src</code>目录下，引入<code>JQuery</code>文件，这里采用<code>CDN</code>的形式进行引入。</p><blockquote><p>BootCDN 地址： <a href="https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js" target="_blank" rel="noreferrer">https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js</a></p></blockquote><p>直接在<code>index.html</code>加入<code>&lt;script&gt;</code>标签，代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>有了 jquery 框架，就可以在<code>TypeScript</code>文件中进行使用<code>JQuery</code>的语法了。</p><p>然后在<code>page.ts</code>文件中编写如下代码。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> teacher</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;jspang&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">teacher</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">	alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;jspang&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>写完后到终端中输入<code>yarn test</code>进行编译和启动服务。然后在地址栏输入了<code>http://localhost:1234</code>,可以看到程序可以正常输出，也没有任何的报错。</p><h3 id="安装-types-jquery-解决方法" tabindex="-1">安装 types/jquery(解决方法) <a class="header-anchor" href="#安装-types-jquery-解决方法" aria-label="Permalink to &quot;安装 types/jquery(解决方法)&quot;">​</a></h3><h4 id="第一种-就是安装别人写好的文件" tabindex="-1">第一种：就是安装别人写好的文件 <a class="header-anchor" href="#第一种-就是安装别人写好的文件" aria-label="Permalink to &quot;第一种：就是安装别人写好的文件&quot;">​</a></h4><p>但是在<code>vscode</code>中是会报错的，这时候就需要我们安装类型文件<code>type file</code>，直接可以用 npm 进行安装。</p><p>ts -&gt; .d.ts 翻译文件 @types/xxx(库的名字) -&gt; js</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> @types/jquery</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="第二种-简单粗暴" tabindex="-1">第二种：简单粗暴 <a class="header-anchor" href="#第二种-简单粗暴" aria-label="Permalink to &quot;第二种：简单粗暴&quot;">​</a></h4><p>还有一种简单粗暴的方法的方式就是直接在<code>page.ts</code>文件的头部加入这句代码：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> var</span><span style="color:#E06C75;"> $</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="第三种-自己写一个-d-ts声明文件的类库" tabindex="-1">第三种：自己写一个<code>.d.ts</code>声明文件的类库 <a class="header-anchor" href="#第三种-自己写一个-d-ts声明文件的类库" aria-label="Permalink to &quot;第三种：自己写一个\`.d.ts\`声明文件的类库&quot;">​</a></h4><p>如果你用的类库很少见，就需要自己写了。这个写起来还是很麻烦的。在工作中从来没自己写过，所以也不推荐给大家。比如 JQuery 就有几十个接口，如果你要写，这个文件会写很长，所以原则就是有别人写好的就直接用，实在没有就用粗暴的方法，如果实在不行，再考虑写<code>.d.ts</code>声明文件。</p><p>jquery.d.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Es6 模块化</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> module</span><span style="color:#98C379;"> &quot;jquery&quot;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	interface</span><span style="color:#E5C07B;"> JqueryInstance</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		html</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">html</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> JqueryInstance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 混合类型</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> $</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">readyFunc</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> $</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">selector</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">JqueryInstance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	namespace</span><span style="color:#E5C07B;"> $</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		namespace</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			class</span><span style="color:#E5C07B;"> init</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	export</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> $</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>page.ts 引入</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> $</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;jquery&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">	$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;body&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&lt;div&gt;123&lt;/div&gt;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	new</span><span style="color:#E5C07B;"> $</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,62)]))}const u=n(l,[["render",o]]);export{B as __pageData,u as default};
