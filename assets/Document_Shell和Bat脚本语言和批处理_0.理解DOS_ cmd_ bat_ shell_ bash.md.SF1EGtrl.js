import{_ as l,c as t,o as e,ah as h}from"./chunks/framework.DqD713j2.js";const p=JSON.parse('{"title":"理解DOS, cmd, bat, shell, bash","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Shell和Bat脚本语言和批处理/0.理解DOS, cmd, bat, shell, bash.md","filePath":"Document/Shell和Bat脚本语言和批处理/0.理解DOS, cmd, bat, shell, bash.md","lastUpdated":1750954157000}'),s={name:"Document/Shell和Bat脚本语言和批处理/0.理解DOS, cmd, bat, shell, bash.md"};function i(r,a,n,d,o,b){return e(),t("div",null,a[0]||(a[0]=[h('<h1 id="理解dos-cmd-bat-shell-bash" tabindex="-1">理解DOS, cmd, bat, shell, bash <a class="header-anchor" href="#理解dos-cmd-bat-shell-bash" aria-label="Permalink to &quot;理解DOS, cmd, bat, shell, bash&quot;">​</a></h1><h2 id="_1-脚本对应环境" tabindex="-1">1.脚本对应环境 <a class="header-anchor" href="#_1-脚本对应环境" aria-label="Permalink to &quot;1.脚本对应环境&quot;">​</a></h2><h3 id="_1-shell环境" tabindex="-1">1.Shell环境 <a class="header-anchor" href="#_1-shell环境" aria-label="Permalink to &quot;1.Shell环境&quot;">​</a></h3><p>shell 是一个命令行脚本解释器，顾名思义就是机器外面的一层壳，通过这个窗口建立用户和Linux系统底层提供的一系列方法的交互；用于人机交互，只要是人与电脑之间交互的接口，就可以称为 shell。</p><p>表现为其作用是用户输入一条命令，shell 就立即解释执行一条。不局限于系统、语言等概念、操作方式和表现方式等。</p><p>.sh就是一种运行在Linux系统下的文件，文件中存储的shell脚本；</p><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p><p>Shell环境主要用在linux中，而linux系统对应的shell又有很多，如<strong>Bourne Shell（/usr/bin/sh或/bin/sh）</strong>，又如<strong>Bourne Again Shell（/bin/bash）</strong> 由于<strong>Bourne Again Shell（/bin/bash）<strong>免费且易用，故使用较多。 对应的脚本文件后缀名为</strong>.sh</strong>。 <strong>注：</strong></p><ul><li><em><strong>#!*</strong> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。如</em>*#!/bin/sh**，<strong>#!/bin/bash</strong>,通常放于脚本文件首行。</li></ul><h3 id="什么是shell脚本" tabindex="-1">什么是Shell脚本？ <a class="header-anchor" href="#什么是shell脚本" aria-label="Permalink to &quot;什么是Shell脚本？&quot;">​</a></h3><p>Shell脚本（英语：Shell script）是一种为 shell 编写的脚本程序，是用户使用 Unix 的桥梁，内容由一连串的shell命令组成，经由Unix Shell直译其内容后运作。</p><p>被当成是一种脚本语言来设计，其运作方式与直译语言相当，由Unix shell扮演命令行解释器的角色，在读取shell script之后，依序运行其中的shell命令，之后输出结果。利用Shell script可以进行系统管理，文件操作等。</p><h3 id="_2-bat环境" tabindex="-1">2.bat环境 <a class="header-anchor" href="#_2-bat环境" aria-label="Permalink to &quot;2.bat环境&quot;">​</a></h3><p>主要用于windows中，又名批处理文件，其每一行指令都是一条dos指令，对应脚本文件后缀名为**.bat或者.cmd**。</p><h2 id="_2-脚本执行" tabindex="-1">2.脚本执行 <a class="header-anchor" href="#_2-脚本执行" aria-label="Permalink to &quot;2.脚本执行&quot;">​</a></h2><h3 id="_1-shell执行" tabindex="-1">1.shell执行 <a class="header-anchor" href="#_1-shell执行" aria-label="Permalink to &quot;1.shell执行&quot;">​</a></h3><ul><li>1.直接在bash命令窗口执行shell相关命令。</li><li>2.将shell命令保存为文件，执行文件就可以运行shell命令。 **注：<strong>由于在linux中对文件的权限管理较细，故如果使用shell脚本文件，必须使其具有可执行权限，对脚本授权<code>chmod +x ./文件名.sh #使脚本具有执行权限</code>，执行脚本<code>./test.sh #执行脚本</code>，</strong>./**必须加，因为当前文件没有加入到linux的path中，linux仅只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 path中。</li></ul><h4 id="_2-bat脚本执行" tabindex="-1">2.bat脚本执行 <a class="header-anchor" href="#_2-bat脚本执行" aria-label="Permalink to &quot;2.bat脚本执行&quot;">​</a></h4><ul><li>1.直接在windows的dos窗口即cmd窗口执行bat相关命令。</li><li>2.将bat命令保存为bat文件，在windows中文件权限限制没有linux中那么严格，故相关bat脚本文件可以直接双击执行或者命令行执行。</li></ul><h2 id="shell与bash的区别" tabindex="-1">shell与Bash的区别 <a class="header-anchor" href="#shell与bash的区别" aria-label="Permalink to &quot;shell与Bash的区别&quot;">​</a></h2><h3 id="shell介绍" tabindex="-1">shell介绍 <a class="header-anchor" href="#shell介绍" aria-label="Permalink to &quot;shell介绍&quot;">​</a></h3><p><strong>常见的 shell 解释器有 sh、bash</strong> 这两种，其他的 ksh、csh 和 zsh 等是不常见的。</p><p>Mac OS 中默认安装了以上所有类型，Windows 需要自行安装，Linux 更不用说了。就像上面说的，只要一门语言有解释器，就可以作为 shell 使用。</p><p>比如 Java 有第三方解释器 Jshell，PHP 有 PHP Shell。</p><p>如果你用过 windows，那你对 cmd 这个词一定不陌生，它是 windows shell，官方名称叫做 command interpreter。</p><h3 id="bash" tabindex="-1">Bash <a class="header-anchor" href="#bash" aria-label="Permalink to &quot;Bash&quot;">​</a></h3><p>Bash 是最常见的 shell，Mac 中默认 shell 就是 bash。</p><h2 id="windows下" tabindex="-1">Windows下 <a class="header-anchor" href="#windows下" aria-label="Permalink to &quot;Windows下&quot;">​</a></h2><h3 id="dos" tabindex="-1">DOS <a class="header-anchor" href="#dos" aria-label="Permalink to &quot;DOS&quot;">​</a></h3><p>磁盘操作系统，Windows模拟了DOS系统</p><h3 id="bat" tabindex="-1">bat <a class="header-anchor" href="#bat" aria-label="Permalink to &quot;bat&quot;">​</a></h3><p>DOS下的命令</p><p>BAT是Windows系统上的默认命令行解释器。BAT脚本是使用Windows命令行命令编写的文本文件，用于执行简单的任务和操作。BAT脚本可以包含条件语句、循环结构、变量、函数等。</p><h3 id="bat文件" tabindex="-1">bat文件 <a class="header-anchor" href="#bat文件" aria-label="Permalink to &quot;bat文件&quot;">​</a></h3><p>.bat文件就是运行在windows环境下的批处理文件，其中存储了系列的batch脚本命令；</p><p>后缀名“.bat”或“.cmd”，通过cmd.exe运行</p><h3 id="cmd" tabindex="-1">cmd <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;cmd&quot;">​</a></h3><p>cmd.exe，Windows的shell</p><h2 id="mac-os下" tabindex="-1">Mac OS下 <a class="header-anchor" href="#mac-os下" aria-label="Permalink to &quot;Mac OS下&quot;">​</a></h2><p>bash、sh、zsh</p><h3 id="zsh" tabindex="-1">zsh <a class="header-anchor" href="#zsh" aria-label="Permalink to &quot;zsh&quot;">​</a></h3><p>很多人的 mac 中会使用 zsh 而不是 bash，一大半是因为 oh-my-zsh 这个配置集，它兼容 bash，还有自动补全等好用的功能。</p><p>zsh 的配置文件 <code>~/.zshrc</code></p><h3 id="ksh" tabindex="-1">ksh <a class="header-anchor" href="#ksh" aria-label="Permalink to &quot;ksh&quot;">​</a></h3><h3 id="csh" tabindex="-1">csh <a class="header-anchor" href="#csh" aria-label="Permalink to &quot;csh&quot;">​</a></h3><h2 id="linux下" tabindex="-1">Linux下 <a class="header-anchor" href="#linux下" aria-label="Permalink to &quot;Linux下&quot;">​</a></h2><h3 id="shell" tabindex="-1">shell <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;shell&quot;">​</a></h3><p>壳，连接用户和Linux内核，命令行解释器</p><p>bash、......</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><strong>终端</strong>：硬件，人机交互输入输出设备。</p><p><strong>终端模拟器</strong>：用CLI或GUI程序模拟传统终端设备。</p><p><strong>命令行界面</strong>：软件，字符用户界面。</p><p><strong>主机</strong>：硬件，运算处理。</p><p><strong>shell</strong>：软件，对内核的程序输入和解释/执行器。</p><p>shell与shell脚本：通过命令行输入程序并执行叫shell。而通过程序文件输入程序并执行，这个程序文件叫shell脚本。</p><p><strong>batch脚本与shell脚本</strong>：windows脚本与linux脚本。</p><h3 id="shell和bat的优缺点" tabindex="-1">shell和bat的优缺点 <a class="header-anchor" href="#shell和bat的优缺点" aria-label="Permalink to &quot;shell和bat的优缺点&quot;">​</a></h3><h4 id="bat的优点" tabindex="-1">BAT的优点 <a class="header-anchor" href="#bat的优点" aria-label="Permalink to &quot;BAT的优点&quot;">​</a></h4><p>易于学习和使用——BAT脚本是基于Windows命令行命令编写的，所以熟悉Windows命令行的人很容易学会使用BAT脚本。</p><p>可以在不同的Windows版本中运行——BAT脚本可以在不同的Windows版本中运行，因为Windows系统一直保持着对BAT脚本的兼容性。</p><p>方便调试和维护——由于BAT脚本是文本文件，可以使用任何文本编辑器进行编辑和排查错误。</p><h4 id="bat的缺点" tabindex="-1">BAT的缺点 <a class="header-anchor" href="#bat的缺点" aria-label="Permalink to &quot;BAT的缺点&quot;">​</a></h4><p>功能有限——BAT脚本只能使用Windows命令行命令，无法实现一些高级功能和复杂操作。</p><p>兼容性差——BAT脚本不能在Linux和其他操作系统中运行。</p><h4 id="shell的优点" tabindex="-1">Shell的优点 <a class="header-anchor" href="#shell的优点" aria-label="Permalink to &quot;Shell的优点&quot;">​</a></h4><p>功能强大——与BAT脚本不同，Shell脚本可以实现复杂的操作，例如文本处理、网络编程等。</p><p>可以在不同的Unix-Like系统中运行——由于大多数Unix-Like系统都提供了默认的Shell解释器，因此可以在不同的系统之间共享脚本。</p><p>具有各种Shell解释器——Linux系统默认提供了多个Shell解释器，如Bash、KornShell和Zsh等，每个Shell解释器都有自己的特点和优势。</p><h4 id="shell的缺点" tabindex="-1">Shell的缺点 <a class="header-anchor" href="#shell的缺点" aria-label="Permalink to &quot;Shell的缺点&quot;">​</a></h4><p>学习曲线较陡峭——Shell语法比较复杂，需要花费一定的时间和精力来学习。</p><p>不兼容Windows系统——由于Shell解释器只能在Unix-Like系统中运行，因此不能在Windows系统上直接运行。</p><h3 id="bat和shell的应用" tabindex="-1">BAT和Shell的应用 <a class="header-anchor" href="#bat和shell的应用" aria-label="Permalink to &quot;BAT和Shell的应用&quot;">​</a></h3><p>BAT和Shell脚本都被广泛应用于自动化执行任务和操作。以下是一些常见的用途：</p><ul><li><p>执行系统维护任务——例如备份文件、清理临时文件等。</p></li><li><p>管理服务和进程——例如启动、停止或重启服务和进程。</p></li><li><p>执行文本处理任务——例如搜索和替换文本、解析日志文件等。</p></li><li><p>管理文件和目录——例如创建、删除、移动或复制文件和目录。</p></li></ul><p>总之，BAT和Shell脚本是两种十分有用的批处理语言，它们可以有效地帮助自动化执行多个任务和操作，并且可以大大提高工作效率。根据应用环境和需求可以选择合适的语言来编写脚本，以达到最佳效果。</p><h2 id="扩展学习" tabindex="-1">扩展学习 <a class="header-anchor" href="#扩展学习" aria-label="Permalink to &quot;扩展学习&quot;">​</a></h2><h3 id="interactive-和-non-interactive" tabindex="-1">Interactive 和 Non-interactive <a class="header-anchor" href="#interactive-和-non-interactive" aria-label="Permalink to &quot;Interactive 和 Non-interactive&quot;">​</a></h3><p>Interactive，如果你打开 terminal，在里面输入 bash 代码，回车得到输出，你就是在运行一个 Interactive shell，它的特征是可以让用户输入，然后直接把输出打到界面上；如果你运行一个包含了若干行的 shell 脚本，这些 shell 代码就运行在 Non-interactive shell 中。</p><h2 id="常见的linux和windows系统的cmd命令对比" tabindex="-1">常见的Linux和windows系统的CMD命令对比 <a class="header-anchor" href="#常见的linux和windows系统的cmd命令对比" aria-label="Permalink to &quot;常见的Linux和windows系统的CMD命令对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>windows命令行</th><th style="text-align:left;">功能描述</th><th>linux终端</th></tr></thead><tbody><tr><td>cd</td><td style="text-align:left;">切换工作目录</td><td>cd</td></tr><tr><td>dir</td><td style="text-align:left;">列出当前文件夹下所有文件</td><td>ls [-lh]</td></tr><tr><td>type</td><td style="text-align:left;">查看文件内容</td><td>cat</td></tr><tr><td>md/mkdir</td><td style="text-align:left;">创建目录</td><td>mkdir</td></tr><tr><td>del</td><td style="text-align:left;">删除文件</td><td>rm</td></tr><tr><td>rd</td><td style="text-align:left;">删除目录</td><td>rm -r</td></tr><tr><td>copy/xcopy</td><td style="text-align:left;">拷贝</td><td>cp [-r]</td></tr><tr><td>cls</td><td style="text-align:left;">清屏</td><td>clear</td></tr><tr><td>findstr</td><td style="text-align:left;">根据关键字查找</td><td>grep</td></tr><tr><td>move/rename</td><td style="text-align:left;">移动/重命名</td><td>mv/rename</td></tr><tr><td>tasklist</td><td style="text-align:left;">查找进程</td><td>ps [-ef]</td></tr><tr><td>taskkill</td><td style="text-align:left;">杀死进程</td><td>kill [-9]</td></tr></tbody></table>',83)]))}const u=l(s,[["render",i]]);export{p as __pageData,u as default};
