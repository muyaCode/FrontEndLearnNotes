import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/3.whSbZYCB.png",o="/FrontEndLearnNotes/assets/2.BezLRE12.png",A=JSON.parse('{"title":"分析框架的设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端进阶技巧/综合能力提升/分析框架的设计模式.md","filePath":"Document/前端进阶技巧/综合能力提升/分析框架的设计模式.md","lastUpdated":1750954157000}'),t={name:"Document/前端进阶技巧/综合能力提升/分析框架的设计模式.md"};function r(c,s,B,y,i,b){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="分析框架的设计模式" tabindex="-1">分析框架的设计模式 <a class="header-anchor" href="#分析框架的设计模式" aria-label="Permalink to &quot;分析框架的设计模式&quot;">​</a></h1><p>这一讲我们继续来讲一个重要的抽象知识——设计模式，先来看看维基百科对设计模式的定义：</p><p>设计模式（Design Pattern）是对软件设计中普遍存在（反复出现）的各种问题所提出的解决方案。设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。</p><p>从这个定义不难看出，设计模式就是一套抽象的理论，属于编程知识中的“道”而非“术”，对于理论的学习我们最好的学习方式就是通过与实践结合来加深理解，所以接下来我们在分析设计模式相关概念的同时通过具体实例来加深对其理解。</p><h4 id="设计模式原则" tabindex="-1">设计模式原则 <a class="header-anchor" href="#设计模式原则" aria-label="Permalink to &quot;设计模式原则&quot;">​</a></h4><p>设计模式其实是针对面向对象编程范式总结出来的解决方案，所以设计模式的原则都是围绕“类”和“接口”这两个概念来提出的，其中下面 6 个原则非常重要，因为这 6 个原则决定了设计模式的规范和标准。</p><h5 id="开闭原则" tabindex="-1">开闭原则 <a class="header-anchor" href="#开闭原则" aria-label="Permalink to &quot;开闭原则&quot;">​</a></h5><p>开闭原则指的就是对扩展开放、对修改关闭。编写代码的时候不可避免地会碰到修改的情况，而遵循开闭原则就意味着当代码需要修改时，可以通过编写新的代码来扩展已有的代码，而不是直接修改已有代码本身。</p><p>下面的伪代码是一个常见的表单校验功能，校验内容包括用户名、密码、验证码，每个校验项都通过判断语句 if-else 来控制。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> validate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 校验用户名</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 校验密码</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">pswd</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">        ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 校验验证码</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">captcha</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>这么写看似没有问题，但其实可扩展性并不好，如果此时增加一个校验条件，就要修改 validate() 函数内容。</p><p>下面的伪代码遵循开闭原则，将校验规则抽取出来，实现共同的接口 IValidateHandler，同时将函数 validate() 改成 Validation 类，通过 addValidateHandler() 函数添加校验规则，通过 validate() 函数校验表单。这样，当有新的校验规则出现时，只要实现 IValidateHandler 接口并调用 addValidateHandler() 函数即可，不需要修改类 Validation 的代码。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Validation</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E06C75;"> validateHandlers</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ValidateHandler</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> addValidateHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">handler</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">IValidateHandler</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">validateHandlers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> validate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">validateHandlers</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">validateHandlers</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> IValidateHandler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    validate</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> UsernameValidateHandler</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> IValidateHandler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> validate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> PwdValidateHandler</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> IValidateHandler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> validate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> CaptchaValidateHandler</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> IValidateHandler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> validate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h5 id="里氏替换原则" tabindex="-1">里氏替换原则 <a class="header-anchor" href="#里氏替换原则" aria-label="Permalink to &quot;里氏替换原则&quot;">​</a></h5><p>里氏替换原则是指在使用父类的地方可以用它的任意子类进行替换。里氏替换原则是对类的继承复用作出的要求，要求子类可以随时替换掉其父类，同时功能不被破坏，父类的方法仍然能被使用。</p><p>下面的代码就是一个违反里氏替换原则的例子，子类 Sparrow 重载了父类 Bird 的 getFood() 函数，但返回值发生了修改。那么如果使用 Bird 类实例的地方改成 Sparrow 类实例则会报错。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	getFood</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;虫子&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Sparrow</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	getFood</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;虫子&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;稻谷&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>对于这种需要重载的类，正确的做法应该是让子类和父类共同实现一个抽象类或接口。下面的代码就是实现了一个 IBird 接口来遵循里氏替换原则。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> IBird</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	getFood</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Bird</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> IBird</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	getFood</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;虫子&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Sparrow</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> IBird</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	getFood</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;虫子&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;稻谷&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="依赖倒置原则" tabindex="-1">依赖倒置原则 <a class="header-anchor" href="#依赖倒置原则" aria-label="Permalink to &quot;依赖倒置原则&quot;">​</a></h5><p>准确说应该是避免依赖倒置，好的依赖关系应该是类依赖于抽象接口，不应依赖于具体实现。这样设计的好处就是当依赖发生变化时，只需要传入对应的具体实例即可。</p><p>下面的示例代码中，类 Passenger 的构造函数需要传入一个 Bike 类实例，然后在 start() 函数中调用 Bike 实例的 run() 函数。此时类 Passenger 和类 Bike 的耦合非常紧，如果现在要支持一个 Car 类则需要修改 Passenger 代码。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Bike</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  run</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Bike run&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Passenger</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">Bike</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">bike</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tool</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> bike</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#61AFEF;"> start</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">tool</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果遵循依赖倒置原则，可以声明一个接口 ITransportation，让 Passenger 类的构造函数改为 ITransportation 类型，从而做到 Passenger 类和 Bike 类解耦，这样当 Passenger 需要支持 Car 类的时候，只需要新增 Car 类即可。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> ITransportation</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  run</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Bike</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> ITransportation</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  run</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Bike run&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Car</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> ITransportation</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  run</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Car run&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Passenger</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ITransportation</span><span style="color:#ABB2BF;"> : </span><span style="color:#E5C07B;">transportation</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tool</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> transportation</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#61AFEF;"> start</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">tool</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h5 id="接口隔离原则" tabindex="-1">接口隔离原则 <a class="header-anchor" href="#接口隔离原则" aria-label="Permalink to &quot;接口隔离原则&quot;">​</a></h5><p>不应该依赖它不需要的接口，也就是说一个类对另一个类的依赖应该建立在最小的接口上。目的就是为了降低代码之间的耦合性，方便后续代码修改。</p><p>下面就是一个违反接口隔离原则的反例，类 Dog 和类 Bird 都继承了接口 IAnimal，但是 Bird 类并没有 swim 函数，只能实现一个空函数 swim()。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> IAnimal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  eat</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#61AFEF;">  swim</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Dog</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> IAnimal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  eat</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  swim</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Bird</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> IAnimal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  eat</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  swim</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // do nothing</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="迪米特原则" tabindex="-1">迪米特原则 <a class="header-anchor" href="#迪米特原则" aria-label="Permalink to &quot;迪米特原则&quot;">​</a></h5><p>一个类对于其他类知道得越少越好，就是说一个对象应当对其他对象尽可能少的了解。这一条原则要求任何一个对象或者方法只能调用该对象本身和内部创建的对象实例，如果要调用外部的对象，只能通过参数的形式传递进来。这一点和纯函数的思想相似。</p><p>下面的类 Store 就违反了迪米特原则，类内部使用了全局变量。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>一种改造方式就是在初始化的时候将 window.localstorage 作为参数传递给 Store 实例。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	construct</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_store</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Store</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">localstorage</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="单一职责原则" tabindex="-1">单一职责原则 <a class="header-anchor" href="#单一职责原则" aria-label="Permalink to &quot;单一职责原则&quot;">​</a></h5><p>应该有且仅有一个原因引起类的变更。这个原则很好理解，一个类代码量越多，功能就越复杂，维护成本也就越高。遵循单一职责原则可以有效地控制类的复杂度。</p><p>像下面这种情形经常在项目中看到，一个公共类聚集了很多不相关的函数，这就违反了单一职责原则。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Util</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#61AFEF;"> toTime</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">date</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#61AFEF;"> formatString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#61AFEF;"> encode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>了解了设计模式原则之后，下面再来看看具体的设计模式。</p><h4 id="设计模式的分类" tabindex="-1">设计模式的分类 <a class="header-anchor" href="#设计模式的分类" aria-label="Permalink to &quot;设计模式的分类&quot;">​</a></h4><p>经典的设计模式有 3 大类，共 23 种，包括创建型、结构型和行为型。</p><h5 id="创建型" tabindex="-1">创建型 <a class="header-anchor" href="#创建型" aria-label="Permalink to &quot;创建型&quot;">​</a></h5><p>创建型模式的主要关注点是“如何创建和使用对象”，这些模式的核心特点就是将对象的创建与使用进行分离，从而降低系统的耦合度。使用者不需要关注对象的创建细节，对象的创建由相关的类来完成。</p><p>具体包括下面几种模式：</p><ul><li><p>抽象工厂模，提供一个超级工厂类来创建其他工厂类，然后通过工厂类创建类实例；</p></li><li><p>生成器模式，将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象；</p></li><li><p>工厂方法模式，定义一个用于创建生成类的工厂类，由调用者提供的参数决定生成什么类实例；</p></li><li><p>原型模式，将一个对象作为原型，通过对其进行克隆创建新的实例；</p></li><li><p>单例模式，生成一个全局唯一的实例，同时提供访问这个实例的函数。</p></li></ul><p>下面的代码示例是 Vue.js 源码中使用单例模式的例子。其中，构造了一个唯一的数组 _installedPlugins 来保存插件，并同时提供了 Vue.use() 函数来新增插件。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// src/core/global-api/use.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> initUse</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">GlobalAPI</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> installedPlugins</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_installedPlugins</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_installedPlugins</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []))</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">installedPlugins</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> this</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ......</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>下面的代码中，cloneVNode() 函数通过已有 vnode 实例来克隆新的实例，用到了原型模式。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// src/core/vdom/vnode.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> cloneVNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vnode</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">VNode</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> cloned</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> VNode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// #7975</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// clone children array to avoid mutating original in case of cloning</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// a child.</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">componentOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">asyncFactory</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#E5C07B;">	cloned</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ns</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ns</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	cloned</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isStatic</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isStatic</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	cloned</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	cloned</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isComment</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isComment</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	cloned</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fnContext</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fnContext</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	cloned</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fnOptions</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fnOptions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	cloned</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fnScopeId</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fnScopeId</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	cloned</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">asyncMeta</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">asyncMeta</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	cloned</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isCloned</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> cloned</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h5 id="结构型" tabindex="-1">结构型 <a class="header-anchor" href="#结构型" aria-label="Permalink to &quot;结构型&quot;">​</a></h5><p>结构型模式描述如何将类或对象组合在一起形成更大的结构。它分为类结构型模式和对象结构型模式，类结构型模式采用继承机制来组织接口和类，对象结构型模式釆用组合或聚合来生成新的对象。</p><p>具体包括下面几种模式：</p><ul><li><strong>适配器模式</strong>，将一个类的接口转换成另一个类的接口，使得原本由于接口不兼容而不能一起工作的类能一起工作；</li><li><strong>桥接模式</strong>，将抽象与实现分离，使它们可以独立变化，它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度；</li><li><strong>组合模式</strong>，将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性；</li><li><strong>装饰器模式</strong>，动态地给对象增加一些职责，即增加其额外的功能；</li><li><strong>外观模式</strong>，为多个复杂的子系统提供一个统一的对外接口，使这些子系统更加容易被访问；</li><li><strong>享元模式</strong>，运用共享技术来有效地支持大量细粒度对象的复用；</li><li><strong>代理模式</strong>，为某对象提供一种代理以控制对该对象的访问，即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li></ul><p>Vue.js 在判断浏览器支持 Proxy 的情况下会使用代理模式，下面是具体源码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// src/core/instance/proxy.js</span></span>
<span class="line"><span style="color:#61AFEF;">initProxy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> initProxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">hasProxy</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// determine which proxy handler to use</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> handlers</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">			options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">render</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">render</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_withStripped</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> getHandler</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> hasHandler</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_renderProxy</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handlers</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_renderProxy</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> vm</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Vue 的 Dep 类则应用了代理模式，调用 notify() 函数来通知 subs 数组中的 Watcher 实例。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// src/core/observer/dep.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Dep</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Watcher</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	subs</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Watcher</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> uid</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subs</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	addSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sub</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Watcher</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sub</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	removeSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sub</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Watcher</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subs</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sub</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	depend</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addDep</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	notify</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// stabilize the subscriber list first</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> subs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;production&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">async</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// subs aren&#39;t sorted in scheduler if not running async</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// we need to sort them now to make sure they fire in correct</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// order</span></span>
<span class="line"><span style="color:#E5C07B;">			subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;"> b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> subs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> l</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			subs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h5 id="行为型" tabindex="-1">行为型 <a class="header-anchor" href="#行为型" aria-label="Permalink to &quot;行为型&quot;">​</a></h5><p>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，它涉及算法与对象间职责的分配。</p><p>行为型模式分为<strong>类行为模式</strong>和<strong>对象行为模式</strong>，类的行为模式采用继承机制在子类和父类之间分配行为，对象行为模式采用多态等方式来分配子类和父类的职责。</p><p>具体包括下面几种模式：</p><ul><li><strong>责任链模式</strong>，把请求从链中的一个对象传到下一个对象，直到请求被响应为止，通过这种方式去除对象之间的耦合；</li><li><strong>命令模式</strong>，将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开；</li><li><strong>策略模式</strong>，定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的用户；</li><li><strong>解释器模式</strong>，提供如何定义语言的文法，以及对语言句子的解释方法，即解释器；</li><li><strong>迭代器模式</strong>，提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示；</li><li><strong>中介者模式</strong>，定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解；</li><li><strong>备忘录模式</strong>，在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它；</li><li><strong>观察者模式</strong>，多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为；</li><li><strong>状态模式</strong>，类的行为基于状态对象而改变；</li><li><strong>访问者模式</strong>，在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问；</li><li><strong>模板方法模式</strong>，定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li></ul><p>下面是 Vue.js 中使用状态对象 renderContext 的部分源码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// src/core/instance/render.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> initRender</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">vm</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#7F848E;font-style:italic;"> // the root of the child tree</span></span>
<span class="line"><span style="color:#E5C07B;">  vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_staticTrees</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#7F848E;font-style:italic;"> // v-once cached trees</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> parentVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_parentVnode</span><span style="color:#7F848E;font-style:italic;"> // the placeholder node in parent tree</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> renderContext</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> parentVnode</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> parentVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span></span>
<span class="line"><span style="color:#E5C07B;">  vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$slots</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> resolveSlots</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_renderChildren</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">renderContext</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">  vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$scopedSlots</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> emptyObject</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // bind the createElement fn to this instance</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // so that we get proper render context inside it.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // args order: tag, data, children, normalizationType, alwaysNormalize</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // internal version is used by render functions compiled from templates</span></span>
<span class="line"><span style="color:#ABB2BF;">  ......</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Vue.js 中通过 Object.defineProperty 劫持再发送消息则属于观察者模式。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// src/core/observer/index.js</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">  enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">  get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveGetter</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ......</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;">  set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveSetter</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> getter</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> getter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> val</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* eslint-disable no-self-compare */</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newVal</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newVal</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> newVal</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* eslint-enable no-self-compare */</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;production&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> customSetter</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      customSetter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // #7981: for accessor properties without setter</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">getter</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">setter</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">setter</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      setter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    childOb</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">shallow</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="框架的设计模式总结" tabindex="-1">框架的设计模式总结 <a class="header-anchor" href="#框架的设计模式总结" aria-label="Permalink to &quot;框架的设计模式总结&quot;">​</a></h4><p>虽然 JavaScript 并不是一门面向对象的语言，但设计模式的原则和思想对我们编写代码仍有很重要的指导意义。</p><p>本课时介绍了设计模式的 6 个重要原则，包括开闭原则、里氏替换原则、依赖倒置原则、接口隔离原则、迪米特原则、单一职责原则，重点讨论了接口和类的使用方式；然后介绍了 3 类设计模式以及对应的例子，创建型模式重点关注如何创建类实例，结构型模式重点关注类之间如何组合，行为型模式关注多个类之间的函数调用关系。</p><p>要全部记住 23 种设计模式有些困难，重点在于理解其背后的思想与目的，从而做到心中有数，在此之上配合编码实践，才能最终完全掌握。</p><p>最后布置一道思考题：你还在框架代码中找到过哪些设计模式的应用？</p><p>答：</p><h2 id="vue3-响应式原理" tabindex="-1">vue3 响应式原理 <a class="header-anchor" href="#vue3-响应式原理" aria-label="Permalink to &quot;vue3 响应式原理&quot;">​</a></h2><h3 id="主题" tabindex="-1">主题 <a class="header-anchor" href="#主题" aria-label="Permalink to &quot;主题&quot;">​</a></h3><ul><li>1.利用 defineProperty 实现数据劫持</li><li>2.利用 ES6 中 proxy 实现数据劫持</li><li>3.实现数据驱动视图更新，实现数据响应</li><li>4.发布订阅模式</li></ul><h3 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h3><ul><li>defineProperty；</li><li>Proxy 代理</li><li>数据劫持</li><li>发布订阅</li><li>观察者模式与发布订阅</li><li>数据响应式</li></ul><h4 id="defineproperty" tabindex="-1">defineProperty <a class="header-anchor" href="#defineproperty" aria-label="Permalink to &quot;defineProperty&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h4><ul><li><p>定义 ：对象用于定义基本操作的自定义行为（如属性查找，赋值，枚举，函数调用等）。</p></li><li><p>基本使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>相关配置参数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propKey</span><span style="color:#ABB2BF;">)：</span><span style="color:#E06C75;">拦截propKey</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> proxy的操作</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">返回一个布尔值</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propKey</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propDesc</span><span style="color:#ABB2BF;">)：</span><span style="color:#E5C07B;">拦截Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">proxy</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propKey</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propDesc</span><span style="color:#ABB2BF;">）、</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperties</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">proxy</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">propDescs</span><span style="color:#ABB2BF;">)，</span><span style="color:#E06C75;">返回一个布尔值</span><span style="color:#ABB2BF;">。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="通过数据劫持实现表达式" tabindex="-1">通过数据劫持实现表达式 <a class="header-anchor" href="#通过数据劫持实现表达式" aria-label="Permalink to &quot;通过数据劫持实现表达式&quot;">​</a></h3><ul><li>通过 defineProperty 劫持数据:observer</li></ul><h2 id="发布订阅监听数据的更新" tabindex="-1">发布订阅监听数据的更新 <a class="header-anchor" href="#发布订阅监听数据的更新" aria-label="Permalink to &quot;发布订阅监听数据的更新&quot;">​</a></h2><ul><li>通过自定义事件触发更新</li><li>通过发布订阅模式触发更新</li></ul><h3 id="实现指令" tabindex="-1">实现指令 <a class="header-anchor" href="#实现指令" aria-label="Permalink to &quot;实现指令&quot;">​</a></h3><ul><li>输入框赋值</li><li>监听输入事件</li></ul><h4 id="观察者模式" tabindex="-1">观察者模式 <a class="header-anchor" href="#观察者模式" aria-label="Permalink to &quot;观察者模式&quot;">​</a></h4><p>定义一个对象与其他对象之间的一种依赖关系，当对象发生某种变化的时候，依赖它的其它对象都会得到更新，一对多的关系。</p><h4 id="发布订阅模式" tabindex="-1">发布订阅模式 <a class="header-anchor" href="#发布订阅模式" aria-label="Permalink to &quot;发布订阅模式&quot;">​</a></h4><p><strong>发布-订阅</strong>是一种<a href="https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF" target="_blank" rel="noreferrer">消息</a><a href="https://zh.wikipedia.org/wiki/%E8%8C%83%E5%BC%8F" target="_blank" rel="noreferrer">范式</a>，消息的发送者（称为发布者）不会将消息<strong>直接</strong>发送给特定的接收者（称为订阅者）。而是将发布的消息分为不同的类别，无需了解哪些订阅者（如果有的话）可能存在。同样的，订阅者可以表达对一个或多个类别的兴趣，只接收感兴趣的消息，无需了解哪些发布者（如果有的话）存在。</p><img src="`+e+'"><img src="'+o+`"><h3 id="二者关系" tabindex="-1">二者关系 <a class="header-anchor" href="#二者关系" aria-label="Permalink to &quot;二者关系&quot;">​</a></h3><p>观察者模式观察者与订阅者之间有直接联系。发布订阅中发布者和订阅者无直接依赖关系。观察者模式属于紧解耦，发布订阅模式属于松解耦。发布订阅广义上是观察者模式。</p><h3 id="代码解析例子" tabindex="-1">代码解析例子 <a class="header-anchor" href="#代码解析例子" aria-label="Permalink to &quot;代码解析例子&quot;">​</a></h3><p>kvue2.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">opts</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> opts</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 观察数据</span></span>
<span class="line"><span style="color:#61AFEF;">	observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> keys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">				configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// dep.addSub(new Watcher((newValue)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					//     console.log(&quot;触发了更新做更新&quot;,newValue);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// }))</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">						dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#61AFEF;">				set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 修改之后做响应；</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 发布</span></span>
<span class="line"><span style="color:#E5C07B;">					dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 触发compile编译；</span></span>
<span class="line"><span style="color:#E06C75;">					value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	compile</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> el</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compileNodes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	compileNodes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> childNodes</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(childNodes);</span></span>
<span class="line"><span style="color:#E5C07B;">		childNodes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeType</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> attrs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">attributes</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">attrs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				[...</span><span style="color:#E06C75;">attrs</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">attr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					let</span><span style="color:#E06C75;"> attrName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> attr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					let</span><span style="color:#E06C75;"> attrValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> attr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// console.log(attrName);</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">attrName</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;v-model&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">						node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">attrValue</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">						node</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;input&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">							// console.log(e.target.value);</span></span>
<span class="line"><span style="color:#E5C07B;">							this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">attrValue</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">						});</span></span>
<span class="line"><span style="color:#ABB2BF;">					} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">attrName</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;v-text&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">						node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">attrValue</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">						new</span><span style="color:#61AFEF;"> Watcher</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">attrValue</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">							node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">						});</span></span>
<span class="line"><span style="color:#ABB2BF;">					} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">attrName</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;v-html&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">						node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">attrValue</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">						new</span><span style="color:#61AFEF;"> Watcher</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">attrValue</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">							node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">						});</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 元素节点</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">childNodes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compileNodes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeType</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 文本</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// console.log(textContent);</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> reg</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\{\\{</span><span style="color:#E06C75;">\\s</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#ABB2BF;">^</span><span style="color:#56B6C2;">\\{\\}</span><span style="color:#E06C75;">\\s</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)\\s</span><span style="color:#D19A66;">*</span><span style="color:#56B6C2;">\\}\\}</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">textContent</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">					let</span><span style="color:#E06C75;"> $1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> RegExp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// console.log(&quot;有大胡子语法&quot;,&quot;(&quot;+$1+&quot;)&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// console.log(this._data[$1]);</span></span>
<span class="line"><span style="color:#E5C07B;">					node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">textContent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reg</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 1生成watcher 2触发watcher 收集（触发get）</span></span>
<span class="line"><span style="color:#C678DD;">					new</span><span style="color:#61AFEF;"> Watcher</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">						console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cb:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">						let</span><span style="color:#E06C75;"> oldValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">						node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">textContent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">					});</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 收集器</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Dep</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subs</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	addSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sub</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sub</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">sub</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			sub</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 订阅者</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Watcher</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cb</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cb</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">//触发get  ---&gt;收集Watcher</span></span>
<span class="line"><span style="color:#E5C07B;">		Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cb</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br></div></div><p>myVue.html</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./kvue2.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			&lt;!-- 123{{ message }}444 --&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			&lt;!-- &lt;div&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            {{message}}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        &lt;/div&gt; --&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			&lt;!-- &lt;input v-model=&quot;message&quot; /&gt; {{ message }} --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-html</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;message&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.把数据渲染到初次视图（基于dom操作）; 深层dom渲染（递归）</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&lt;h1&gt;数111据&lt;/h1&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.响应式 --&gt;如何知道数据改变？？（数据劫持） ---&gt;数据改变如何影响视图？？（观察者模式、发布订阅）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(vm._data);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     vm._data.message = &quot;修改的数据&quot;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//</span><span style="color:#7F848E;font-style:italic;">     // console.log(vm);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }, 1000);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 发布订阅  ：更新 1. 需要newValue  2. 编译 ；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 3.指令v-model</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 作业 ：实现一个 v-html 、v-text （有响应式）;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>kvue.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> KVue</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> EventTarget</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> keys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> _this</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">				configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#61AFEF;">				set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 触发事件</span></span>
<span class="line"><span style="color:#E5C07B;">					_this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatchEvent</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">						new</span><span style="color:#61AFEF;"> CustomEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">							detail</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">						})</span></span>
<span class="line"><span style="color:#ABB2BF;">					);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 更新视图</span></span>
<span class="line"><span style="color:#E06C75;">					value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	compile</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> ele</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compileNodes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ele</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	compileNodes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ele</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> childNodes</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ele</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		childNodes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeType</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 元素节点</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">childNodes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compileNodes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeType</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 文本节点</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> reg</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\{\\{</span><span style="color:#E06C75;">\\s</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#ABB2BF;">^</span><span style="color:#D19A66;">{}</span><span style="color:#E06C75;">\\s</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)\\s</span><span style="color:#D19A66;">*</span><span style="color:#56B6C2;">\\}\\}</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// console.log(textContent);</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">textContent</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">					let</span><span style="color:#E06C75;"> $1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> RegExp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// console.log(&quot;有大胡子语法&quot;,this._data[$1]);</span></span>
<span class="line"><span style="color:#E5C07B;">					node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">textContent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reg</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 事件监听</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">						console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;视图更新&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">						let</span><span style="color:#E06C75;"> oldValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">						let</span><span style="color:#E06C75;"> newValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">detail</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">						node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">textContent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">					});</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br></div></div><p>proxy 原理</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;module&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> newObj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">			get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// return target[key];</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#61AFEF;">			set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// target[key] = newValue;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// return true;</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#61AFEF;">			has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// newObj.name;</span></span>
<span class="line"><span style="color:#E5C07B;">		newObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;李四&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log( &#39;name&#39; in newObj);</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>defineProperty 原理</p><p>defineProperty.html</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let obj = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     name:&quot;张三&quot;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     age:20</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// obj.name = &quot;李四&quot;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 创建一个对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let obj = Object.defineProperty({},&quot;name&quot;,{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     configurable:true,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     enumerable:true,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     get(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         console.log(&quot;get&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         return &quot;张三&quot;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     set(newValue){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//         console.log(&quot;修改的值&quot;,newValue);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(obj);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// obj.name;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// obj.name = &quot;李四&quot;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// delete obj.name;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(obj);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// for(let key in obj){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     console.log(key);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 修改一个对象</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">				configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// return value</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#61AFEF;">				set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;set&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">					value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// obj.name = &quot;李四&quot;;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>defineProperty</li><li>Proxy 代理</li><li>数据劫持</li><li>发布订阅</li><li>数据响应式</li></ul>`,110)]))}const u=n(t,[["render",r]]);export{A as __pageData,u as default};
