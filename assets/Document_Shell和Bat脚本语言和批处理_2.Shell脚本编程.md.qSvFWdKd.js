import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/webp-1694281532499-2.qvLW-OGe.webp",B=JSON.parse('{"title":"Shell 脚本编程","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Shell和Bat脚本语言和批处理/2.Shell脚本编程.md","filePath":"Document/Shell和Bat脚本语言和批处理/2.Shell脚本编程.md","lastUpdated":1750954157000}'),o={name:"Document/Shell和Bat脚本语言和批处理/2.Shell脚本编程.md"};function c(r,s,t,i,y,b){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="shell-脚本编程" tabindex="-1">Shell 脚本编程 <a class="header-anchor" href="#shell-脚本编程" aria-label="Permalink to &quot;Shell 脚本编程&quot;">​</a></h1><p>阮一峰的教程：<a href="https://wangdoc.com/bash/intro.html" target="_blank" rel="noreferrer">https://wangdoc.com/bash/intro.html</a></p><p>菜鸟教程|Shell 教程：<a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noreferrer">Shell 教程 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://juejin.cn/post/7350571075547938866" target="_blank" rel="noreferrer">💯 前端要学会自己写shell脚本，让你的项目看起来非常牛逼！💯 - 掘金 (juejin.cn)</a></p><p>健壮 Shell 脚本编写指南：<a href="https://liujiacai.net/blog/2024/04/05/robust-shell-scripting/" target="_blank" rel="noreferrer">https://liujiacai.net/blog/2024/04/05/robust-shell-scripting/</a></p><p>bash教程：<a href="https://wangdoc.com/bash/" target="_blank" rel="noreferrer">Bash 脚本教程 - 网道 (wangdoc.com)</a></p><h2 id="第一个-shell-脚本" tabindex="-1">第一个 shell 脚本 <a class="header-anchor" href="#第一个-shell-脚本" aria-label="Permalink to &quot;第一个 shell 脚本&quot;">​</a></h2><p>shell 常用的有 sh、bash，它的二进制文件路径通常是<code>/bin/sh</code>、<code>/bin/bash</code>，Unix 下两者一样。</p><p>如<strong>Bourne Shell（/usr/bin/sh 或/bin/sh）</strong>，又如<strong>Bourne Again Shell（/bin/bash）</strong> 由于**Bourne Again Shell（/bin/bash）**免费且易用，故使用较多。</p><p>对应的脚本文件后缀名为**.sh**。</p><p><strong>注：</strong></p><ul><li>#! 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。如**#!/bin/sh**，<strong>#!/bin/bash</strong>，通常放于脚本文件首行。</li></ul><p>————————————————————————————————————————</p><p>step1: 创建 shell 脚本：打开文本编辑器，新建一个文件，扩展名为 sh（sh 代表 shell），扩展名并不影响脚本执行，见名知意就好。</p><p>step2: 编写：输入一些代码，第一行一般是这样：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;Hello World !&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>&quot;#!&quot;是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。 echo 命令用于向窗口输出文本。</p><p>step3: 运行：</p><p>1、作为可执行程序</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">chmod</span><span style="color:#98C379;"> +</span><span style="color:#98C379;"> x</span><span style="color:#98C379;">  test.sh</span></span>
<span class="line"><span style="color:#61AFEF;">./test.sh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意，一定要写成./test.sh，而不是 test.sh，要用./test.sh 告诉系统说，就在当前目录找。通过这种方式运行 bash 脚本，第一行一定要写对，好让系统查找到正确的解释器。</p><p>2、作为解释器参数</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&gt;&gt;&gt; </span><span style="color:#61AFEF;">sh</span><span style="color:#98C379;"> test.sh</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;&gt;&gt; </span><span style="color:#61AFEF;">bash</span><span style="color:#98C379;"> test.sh</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;&gt;&gt; </span><span style="color:#61AFEF;">php</span><span style="color:#98C379;"> test.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p><p>运行的时候是一行一行运行的。</p><h2 id="shell-语法" tabindex="-1">shell 语法 <a class="header-anchor" href="#shell-语法" aria-label="Permalink to &quot;shell 语法&quot;">​</a></h2><p>shell 变量</p><p>定义变量时，变量名不加美元符号（$，PHP 语言中变量需要），变量名和等号之间不能有空格，如：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">your_name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;runoob.com&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用变量：使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#E06C75;"> $your_name</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">your_name</span><span style="color:#ABB2BF;">}  </span><span style="color:#7F848E;font-style:italic;"># 两种都行</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="g-编译" tabindex="-1">g++编译 <a class="header-anchor" href="#g-编译" aria-label="Permalink to &quot;g++编译&quot;">​</a></h3><p>g++是 c++的编译器，将源代码（.cpp）转为机器语言，这样 CPU 可以按给定指令执行程序。链接时 g++自动使用 C++ 标准库而不用 C 标准库。</p><p>g++参数：</p><ul><li><a href="https://www.runoob.com/cplusplus/cpp-environment-setup.html" target="_blank" rel="noreferrer">https://www.runoob.com/cplusplus/cpp-environment-setup.html</a></li><li><a href="https://www.runoob.com/w3cnote/gcc-parameter-detail.html" target="_blank" rel="noreferrer">https://www.runoob.com/w3cnote/gcc-parameter-detail.html</a></li></ul><p>-o：指定可执行程序的文件名（例，生成一个 runoob 可执行文件。）</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#98C379;"> runoob1.cpp</span><span style="color:#98C379;"> runoob2.cpp</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> runoob</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>g++ 有些系统默认是使用 C++98，我们可以指定使用 C++11 来编译 main.cpp 文件：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#D19A66;"> -g</span><span style="color:#D19A66;"> -Wall</span><span style="color:#D19A66;"> -std=c++11</span><span style="color:#98C379;"> main.cpp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建动态链接库（.so）</p><p>首先，生成目标文件，此时要加编译器选项-fpic</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#D19A66;"> -fPIC</span><span style="color:#D19A66;"> -c</span><span style="color:#98C379;"> DynamicMath.cpp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>fPIC 创建与地址无关的编译程序（pic，position independent code），是为了能够在多个应用程序间共享。</p><p>-fPIC ：表示编译为位置独立的代码，用于编译共享库。目标文件需要创建成位置无关码， 念上就是在可执行程序装载它们的时候，它们可以放在可执行程序的内存里的任何地方。</p><p>然后，生成动态库，此时要加链接器选项-shared</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#D19A66;"> -shared</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> libdynmath.so</span><span style="color:#98C379;"> DynamicMath.o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>-shared 指定生成动态链接库。</p><p>其实上面两个步骤可以合并为一个命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">g++</span><span style="color:#D19A66;"> -fPIC</span><span style="color:#D19A66;"> -shared</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> libdynmath.so</span><span style="color:#98C379;"> DynamicMath.cpp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="shell-命令" tabindex="-1">shell 命令 <a class="header-anchor" href="#shell-命令" aria-label="Permalink to &quot;shell 命令&quot;">​</a></h2><p>1.shell 变量</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 定义变量如下，变量名和等号之间不能有空格</span></span>
<span class="line"><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;变量定义&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 变量使用，使用一个定义过的变量，只要在变量名前面加美元符号即可</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#E06C75;"> $name</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 变量外面的花括号是为了区分边界，加不加都可以</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">}  </span><span style="color:#7F848E;font-style:italic;"># $只在使用变量的时候加，再次赋值不加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</span></span>
<span class="line"><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;哈哈哈&quot;</span></span>
<span class="line"><span style="color:#C678DD;">readonly</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;修改只读变量&quot;</span><span style="color:#7F848E;font-style:italic;">  # 报错/bin/sh: NAME: This variable is read only.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 使用 unset 命令可以删除变量，变量被删除后不能再次使用，unset 命令不能删除只读变量。</span></span>
<span class="line"><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;旺旺旺&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">unset</span><span style="color:#98C379;"> name</span><span style="color:#7F848E;font-style:italic;">  # 删除name变量</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">} </span><span style="color:#7F848E;font-style:italic;"># 无输出</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 字符串可以使用单引号&#39;&#39;，也可以使用双引号&quot;&quot;，也可以不用引号</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的，可以用作字符串拼接使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 双引号里可以有变量，也可以出现转义字符</span></span>
<span class="line"><span style="color:#E06C75;">name_one</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;单引号&#39;</span></span>
<span class="line"><span style="color:#E06C75;">name_one_p</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;单引号拼接，&#39;</span><span style="color:#ABB2BF;">\${</span><span style="color:#E06C75;">name_one</span><span style="color:#ABB2BF;">}</span><span style="color:#98C379;">&#39;拼接结束&#39;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">name_one_p</span><span style="color:#ABB2BF;">}    </span><span style="color:#7F848E;font-style:italic;"># 输出：单引号拼接，单引号拼接结束</span></span>
<span class="line"><span style="color:#E06C75;">name_two</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;双引号&quot;</span></span>
<span class="line"><span style="color:#E06C75;">name_two_p1</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;双引号拼接1，\${</span><span style="color:#E06C75;">name_two</span><span style="color:#98C379;">}拼接结束&quot;</span></span>
<span class="line"><span style="color:#E06C75;">name_two_p2</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;双引号拼接2，&quot;</span><span style="color:#ABB2BF;">\${</span><span style="color:#E06C75;">name_two</span><span style="color:#ABB2BF;">}</span><span style="color:#98C379;">&quot;拼接结束&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">name_two_p1</span><span style="color:#ABB2BF;">} \${</span><span style="color:#E06C75;">name_two_p2</span><span style="color:#ABB2BF;">}  </span><span style="color:#7F848E;font-style:italic;">#输出：双引号拼接1，双引号拼接结束 双引号拼接2，双引号拼接结束</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 获取字符串长度，变量为数组时，\${#arr} 等价于 \${#arr[0]}</span></span>
<span class="line"><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;哈哈哈&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${#</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">}    </span><span style="color:#7F848E;font-style:italic;"># 输出：3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 提取子字符串，从第4个字符开始提取2个字符（第一个字符的索引值为 0）</span></span>
<span class="line"><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;小不点最爱喝兽奶&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">3</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">2</span><span style="color:#ABB2BF;">}  </span><span style="color:#7F848E;font-style:italic;"># 输出：最爱</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查找子字符串，查找字符&#39;奶&#39;或&#39;爱&#39;的位置(哪个字母先出现就计算哪个)。这个查找中文有点瑕渍，应该是字符编码问题。</span></span>
<span class="line"><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;wafenhicfsr&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">expr</span><span style="color:#98C379;"> index &quot;\${</span><span style="color:#E06C75;">name</span><span style="color:#98C379;">}&quot; cf\`</span><span style="color:#7F848E;font-style:italic;">  # 输出：3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 数组：bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 定义数组：用括号来表示数组，数组元素用&quot;空格&quot;符号分割开</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">v1</span><span style="color:#98C379;"> v2</span><span style="color:#98C379;"> v3</span><span style="color:#98C379;"> ...</span><span style="color:#98C379;"> vn</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">  lily</span></span>
<span class="line"><span style="color:#98C379;">  汤姆</span></span>
<span class="line"><span style="color:#D19A66;">  123</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">0</span><span style="color:#ABB2BF;">]</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">哈哈哈</span><span style="color:#7F848E;font-style:italic;">  # 单独定义数组的各个分量</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">2</span><span style="color:#ABB2BF;">]</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;123&quot;</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">]</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;nnn&quot;</span><span style="color:#7F848E;font-style:italic;">    # 可以不使用连续的下标，而且下标的范围没有限制。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 读取数组格式 \${数组名[下标]}</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">lily</span><span style="color:#98C379;"> 汤姆</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[1]}  </span><span style="color:#7F848E;font-style:italic;"># 输出：汤姆</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 使用 @ 符号可以获取数组中的所有元素</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[@]} </span><span style="color:#7F848E;font-style:italic;"># 输出：lily 汤姆 123</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 获取数组的长度</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${#</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[@]}    </span><span style="color:#7F848E;font-style:italic;"># 取得数组元素的个数</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${#</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[*]}    </span><span style="color:#7F848E;font-style:italic;"># 取得数组元素的个数</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${#</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[1]}    </span><span style="color:#7F848E;font-style:italic;"># 取得数组单个元素的长度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 注释，常用的都是以#为注释</span></span>
<span class="line"><span style="color:#56B6C2;">:</span><span style="color:#ABB2BF;">&lt;&lt;</span><span style="color:#ABB2BF;">EOF</span><span style="color:#61AFEF;"> 注释...</span><span style="color:#98C379;"> EOF</span></span>
<span class="line"><span style="color:#98C379;">或</span></span>
<span class="line"><span style="color:#98C379;">:&lt;&lt;z 注释 z</span></span>
<span class="line"><span style="color:#98C379;">或</span></span>
<span class="line"><span style="color:#98C379;">:&lt;&lt;! 注释... !</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><p>2.为 shell 脚本传递参数</p><p><strong>脚本中以$n 获取参数, $0 为执行的文件名（包含文件路径）,$1 接受第一个参数，$2 第二个参数...，以此类推</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 文件名./test.sh</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;shell传参脚本学习&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;执行的文件名：</span><span style="color:#E06C75;font-style:italic;">$0</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;第一个参数：</span><span style="color:#E06C75;font-style:italic;">$1</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;第二个参数：</span><span style="color:#E06C75;font-style:italic;">$2</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;第三个参数：</span><span style="color:#E06C75;font-style:italic;">$3</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;传递到脚本的参数个数：</span><span style="color:#E5C07B;">$#</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;以</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">1参 2参 3参 n参</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">的形式输出所有参数：</span><span style="color:#E5C07B;">$*</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;脚本运行的当前进程ID号：</span><span style="color:#E5C07B;">$$</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;后台运行的最后一个进程的ID号：</span><span style="color:#E5C07B;">$!</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;与</span><span style="color:#56B6C2;">\\$</span><span style="color:#98C379;">*相同，但是使用时加引号，并在引号中返回每个参数：</span><span style="color:#E06C75;font-style:italic;">$@</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;显示Shell使用的当前选项：</span><span style="color:#E5C07B;">$-</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误：</span><span style="color:#E5C07B;">$?</span><span style="color:#98C379;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>修改 test.sh 文件为可执行：chmod -x test.sh</p><p>执行 test.sh 文件：./test.sh 12 哈哈哈 fggg</p><p>执行结果如图：</p><p><img src="`+e+`" alt="img"></p><p>3.shell 数组</p><p>Bash Shell 只支持一维数组（不支持多维数组），且各值以空格分开</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 1.普通数组</span></span>
<span class="line"><span style="color:#E06C75;">arr_ordinary</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lily&quot;</span><span style="color:#D19A66;"> 123</span><span style="color:#98C379;"> &quot;哈哈哈&quot;</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;"># 定义</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">arr_ordinary</span><span style="color:#ABB2BF;">[1]}    </span><span style="color:#7F848E;font-style:italic;"># 访问</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 2.关联数组（与Map类似）：可以使用任意的字符串、或者整数作为下标来访问数组元素。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 语法：declare -A array_name, -A 选项就是用于声明一个关联数组。</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#D19A66;"> -A</span><span style="color:#E06C75;"> arr_correlation</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">&quot;name&quot;</span><span style="color:#ABB2BF;">]=</span><span style="color:#98C379;">&quot;lily&quot;</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">&quot;age&quot;</span><span style="color:#ABB2BF;">]=</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">&quot;sex&quot;</span><span style="color:#ABB2BF;">]=</span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 也可以先声明一个关联数组，然后再设置键和值</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#D19A66;"> -A</span><span style="color:#E06C75;"> arr_declare</span></span>
<span class="line"><span style="color:#61AFEF;">arr_declare[</span><span style="color:#61AFEF;">&quot;name&quot;</span><span style="color:#61AFEF;">]</span><span style="color:#98C379;">=</span><span style="color:#61AFEF;">&quot;lily&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">arr_declare[</span><span style="color:#61AFEF;">&quot;age&quot;</span><span style="color:#61AFEF;">]</span><span style="color:#98C379;">=18</span></span>
<span class="line"><span style="color:#61AFEF;">arr_declare[</span><span style="color:#61AFEF;">&quot;sex&quot;</span><span style="color:#61AFEF;">]</span><span style="color:#98C379;">=</span><span style="color:#61AFEF;">&quot;男&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 使用键来访问数组</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> \${</span><span style="color:#E06C75;">arr_declare</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">]}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 获取数组中所有元素，使用 @ 或 * 可以获取数组中的所有元素</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;数组的值为: \${</span><span style="color:#E06C75;">arr_declare</span><span style="color:#98C379;">[</span><span style="color:#ABB2BF;">*</span><span style="color:#98C379;">]}&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;数组的值为: \${</span><span style="color:#E06C75;">arr_declare</span><span style="color:#98C379;">[</span><span style="color:#ABB2BF;">@</span><span style="color:#98C379;">]}&quot;</span><span style="color:#7F848E;font-style:italic;">    # 相当于map中获取所有值value</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;数组的键为: \${</span><span style="color:#ABB2BF;">!</span><span style="color:#E06C75;">arr_declare</span><span style="color:#98C379;">[</span><span style="color:#ABB2BF;">*</span><span style="color:#98C379;">]}&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;数组的键为: \${</span><span style="color:#ABB2BF;">!</span><span style="color:#E06C75;">arr_declare</span><span style="color:#98C379;">[</span><span style="color:#ABB2BF;">@</span><span style="color:#98C379;">]}&quot;</span><span style="color:#7F848E;font-style:italic;">  # 相当于map中获取所有键</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;数组元素个数为: \${</span><span style="color:#ABB2BF;">#</span><span style="color:#E06C75;">my_array</span><span style="color:#98C379;">[</span><span style="color:#ABB2BF;">*</span><span style="color:#98C379;">]}&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;数组元素个数为: \${</span><span style="color:#ABB2BF;">#</span><span style="color:#E06C75;">my_array</span><span style="color:#98C379;">[</span><span style="color:#ABB2BF;">@</span><span style="color:#98C379;">]}&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>4.shell 运算符</p><p><strong>1.算术运算符</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a1</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">6</span></span>
<span class="line"><span style="color:#E06C75;">a2</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 1.加，+</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">expr</span><span style="color:#E06C75;"> $a1</span><span style="color:#98C379;"> + </span><span style="color:#E06C75;">$a2</span><span style="color:#98C379;">\`</span><span style="color:#7F848E;font-style:italic;">  # 输出8</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 2.减，-</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">expr</span><span style="color:#E06C75;"> $a1</span><span style="color:#98C379;"> - </span><span style="color:#E06C75;">$a2</span><span style="color:#98C379;">\`</span><span style="color:#7F848E;font-style:italic;">  # 输出4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 3.乘，*</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">expr</span><span style="color:#E06C75;"> $a1</span><span style="color:#56B6C2;"> \\*</span><span style="color:#E06C75;"> $a2</span><span style="color:#98C379;">\`</span><span style="color:#7F848E;font-style:italic;">  # 输出12，乘法的*前面必须加\\</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 4.除，/</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">expr</span><span style="color:#E06C75;"> $a1</span><span style="color:#98C379;"> / </span><span style="color:#E06C75;">$a2</span><span style="color:#98C379;">\`</span><span style="color:#7F848E;font-style:italic;">  # 输出3</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 5.取余，%</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">expr</span><span style="color:#E06C75;"> $a1</span><span style="color:#98C379;"> % </span><span style="color:#E06C75;">$a2</span><span style="color:#98C379;">\`</span><span style="color:#7F848E;font-style:italic;">  # 输出0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 6.赋值，=</span></span>
<span class="line"><span style="color:#E06C75;">a1</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">$a2</span><span style="color:#7F848E;font-style:italic;">  # 将变量a2的值赋给a1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 7.相等，==，比较两个数字相等返回true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> $a2</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;"># 不能echo，不能直接使用，必须配合if或者test使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 8.不相等，!=，比较两个数字不相等返回true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> !=</span><span style="color:#E06C75;"> $a2</span><span style="color:#ABB2BF;"> ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>2.关系运算符</strong></p><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>且不能直接使用，只能配合 if 或者 test 使用</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a1</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">2</span></span>
<span class="line"><span style="color:#E06C75;">a2</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检测两个数是否相等，相等返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> -eq</span><span style="color:#E06C75;"> $a2</span><span style="color:#ABB2BF;"> ]   </span><span style="color:#7F848E;font-style:italic;"># 返回false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检测两个数是否不相等，不相等返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> -ne</span><span style="color:#E06C75;"> $a2</span><span style="color:#ABB2BF;"> ]   </span><span style="color:#7F848E;font-style:italic;"># 返回 true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检测左边的数是否大于右边的，如果是，则返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> -gt</span><span style="color:#E06C75;"> $a2</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;"># 返回false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检测左边的数是否小于右边的，如果是，则返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> -lt</span><span style="color:#E06C75;"> $a2</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;">#返回 true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检测左边的数是否大于等于右边的，如果是，则返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> -ge</span><span style="color:#E06C75;"> $a2</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;">#返回 false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检测左边的数是否小于等于右边的，如果是，则返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> -le</span><span style="color:#E06C75;"> $a2</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;">#返回 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>3.布尔运算符</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a1</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">2</span></span>
<span class="line"><span style="color:#E06C75;">a2</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 非运算(!)，表达式为 true 则返回 false，否则返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#56B6C2;">!</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;"># 返回 true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 或运算(-o)，有一个表达式为 true 则返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> -lt</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> -o</span><span style="color:#E06C75;"> $a2</span><span style="color:#56B6C2;"> -gt</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;"> ] 返回 false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 与运算(-a)，两个表达式都为 true 才返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> -lt</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> -a</span><span style="color:#E06C75;"> $a2</span><span style="color:#56B6C2;"> -gt</span><span style="color:#ABB2BF;"> 4] 返回 false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>4.逻辑运算符</strong></p><div class="language-ruby line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a1</span><span style="color:#ABB2BF;">=2</span></span>
<span class="line"><span style="color:#E06C75;">a2</span><span style="color:#ABB2BF;">=4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 逻辑的 AND(&amp;&amp;)</span></span>
<span class="line"><span style="color:#ABB2BF;">[[ </span><span style="color:#E06C75;">$a</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;">lt </span><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> $b</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;">gt </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]]  </span><span style="color:#7F848E;font-style:italic;"># 返回 false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 逻辑的 OR(||)</span></span>
<span class="line"><span style="color:#ABB2BF;">[[ </span><span style="color:#E06C75;">$a</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;">lt </span><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> $b</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;">gt </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]]  </span><span style="color:#7F848E;font-style:italic;"># 返回 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>5.字符串运算符</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a1</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;hhh&quot;</span></span>
<span class="line"><span style="color:#E06C75;">a2</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;ggg&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># (=)检测两个字符串是否相等，相等返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> $a2</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;"># 返回 false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># (!=)检测两个字符串是否不相等，不相等返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a1</span><span style="color:#56B6C2;"> !=</span><span style="color:#E06C75;"> $a2</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;"># 返回 true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># (-z)检测字符串长度是否为0，为0返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#56B6C2;">-z</span><span style="color:#E06C75;"> $a</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;"># 返回 false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># (-n)检测字符串长度是否不为 0，不为 0 返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#56B6C2;">-n</span><span style="color:#98C379;"> &quot;</span><span style="color:#E06C75;">$a</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;"># 返回 true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># ($)检测字符串是否不为空，不为空返回 true</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">$a</span><span style="color:#ABB2BF;"> ]  </span><span style="color:#7F848E;font-style:italic;"># 返回 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>5.shell 输出语句</p><ul><li><p>1.echo：输出字符串，一般使用情况</p></li><li><p>2.printf：格式化输出字符串，功能更强，类似于 c 语言的输出 语法为：<code>printf format-string [arguments...]</code> 如：<code>printf &quot;%-10s %-8s %-5d\\n&quot; 姓名 性别 年龄</code></p><p>6.test 命令</p></li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 代码中的 [] 执行基本的算数运算</span></span>
<span class="line"><span style="color:#E06C75;">num1</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">100</span></span>
<span class="line"><span style="color:#E06C75;">num2</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">100</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#56B6C2;"> test</span><span style="color:#ABB2BF;"> $</span><span style="color:#98C379;">[num1]</span><span style="color:#D19A66;"> -eq</span><span style="color:#ABB2BF;"> $</span><span style="color:#98C379;">[num2]</span><span style="color:#7F848E;font-style:italic;">  # 测出test后面的语句看shell相关运算符</span></span>
<span class="line"><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &#39;两个数相等！&#39;</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &#39;两个数不相等！&#39;</span></span>
<span class="line"><span style="color:#C678DD;">fi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>7.流程控制语句</p><p><strong>1.if 语句</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 语法如下</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> condition</span></span>
<span class="line"><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#61AFEF;">    command1</span></span>
<span class="line"><span style="color:#61AFEF;">    command2</span></span>
<span class="line"><span style="color:#56B6C2;">    ...</span></span>
<span class="line"><span style="color:#61AFEF;">    commandN</span></span>
<span class="line"><span style="color:#C678DD;">fi</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 写成一行</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> [ $(</span><span style="color:#61AFEF;">ps</span><span style="color:#D19A66;"> -ef</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">grep</span><span style="color:#D19A66;"> -c</span><span style="color:#98C379;"> &quot;ssh&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">-gt</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;"> ]; </span><span style="color:#C678DD;">then</span><span style="color:#56B6C2;"> echo</span><span style="color:#98C379;"> &quot;true&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#C678DD;">fi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>2.if-else 语句</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 语法如下</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> condition</span></span>
<span class="line"><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#61AFEF;">    command1</span></span>
<span class="line"><span style="color:#61AFEF;">    command2</span></span>
<span class="line"><span style="color:#56B6C2;">    ...</span></span>
<span class="line"><span style="color:#61AFEF;">    commandN</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#56B6C2;">    command</span></span>
<span class="line"><span style="color:#C678DD;">fi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>3.if-else-if-else 语句</strong></p><p>注：如果使用 ((...)) 作为判断语句，大于和小于可以直接使用 &gt; 和 &lt;</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 语法如下</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> condition1</span></span>
<span class="line"><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#61AFEF;">    command1</span></span>
<span class="line"><span style="color:#C678DD;">elif</span><span style="color:#61AFEF;"> condition2</span></span>
<span class="line"><span style="color:#C678DD;">then</span></span>
<span class="line"><span style="color:#61AFEF;">    command2</span></span>
<span class="line"><span style="color:#C678DD;">else</span></span>
<span class="line"><span style="color:#61AFEF;">    commandN</span></span>
<span class="line"><span style="color:#C678DD;">fi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>4.循环语句</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 1.for循环语法如下</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> var</span><span style="color:#C678DD;"> in</span><span style="color:#98C379;"> item1</span><span style="color:#98C379;"> item2</span><span style="color:#98C379;"> ...</span><span style="color:#98C379;"> itemN</span></span>
<span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#61AFEF;">    command1</span></span>
<span class="line"><span style="color:#61AFEF;">    command2</span></span>
<span class="line"><span style="color:#56B6C2;">    ...</span></span>
<span class="line"><span style="color:#61AFEF;">    commandN</span></span>
<span class="line"><span style="color:#C678DD;">done</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># for循环示例，打印1，2，3，4，5</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> item</span><span style="color:#C678DD;"> in</span><span style="color:#98C379;"> 1</span><span style="color:#98C379;"> 2</span><span style="color:#98C379;"> 3</span><span style="color:#98C379;"> 4</span><span style="color:#98C379;"> 5</span></span>
<span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;</span><span style="color:#E06C75;">$item</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#C678DD;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 2.while循环语句语法</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#61AFEF;"> condition</span></span>
<span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">    command</span></span>
<span class="line"><span style="color:#C678DD;">done</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># while循环示例，其中let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量</span></span>
<span class="line"><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">while(( </span><span style="color:#E06C75;">$value</span><span style="color:#56B6C2;">&lt;=</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> ))</span></span>
<span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#E06C75;"> $value</span></span>
<span class="line"><span style="color:#56B6C2;">    let</span><span style="color:#98C379;"> &quot;value++&quot;</span></span>
<span class="line"><span style="color:#C678DD;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 3.无限循环语句语法</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#56B6C2;"> :</span></span>
<span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">    command</span></span>
<span class="line"><span style="color:#C678DD;">done</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 或者</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#56B6C2;"> true</span></span>
<span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">    command</span></span>
<span class="line"><span style="color:#C678DD;">done</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 或者</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (( ; ; ))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 4.until 循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 注：until 循环执行一系列命令直至条件为 true 时停止</span></span>
<span class="line"><span style="color:#C678DD;">until</span><span style="color:#61AFEF;"> condition</span></span>
<span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">    command</span></span>
<span class="line"><span style="color:#C678DD;">done</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 示例，输出 0 ~ 5 的数字</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">0</span></span>
<span class="line"><span style="color:#C678DD;">until</span><span style="color:#ABB2BF;"> [ </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;"> $a</span><span style="color:#56B6C2;"> -lt</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;"> ]</span></span>
<span class="line"><span style="color:#C678DD;">do</span></span>
<span class="line"><span style="color:#56B6C2;">   echo</span><span style="color:#E06C75;"> $a</span></span>
<span class="line"><span style="color:#E06C75;">   a</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;">expr</span><span style="color:#E06C75;"> $a</span><span style="color:#98C379;"> + </span><span style="color:#D19A66;">1</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#C678DD;">done</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><p><strong>5.多分枝选择语句</strong></p><p><code>注：case ... esac 为多选择语句，每个 case 分支用右圆括号开始，用两个分号 ;; 表示 break，即执行结束，跳出整个 case ... esac 语句，esac（就是 case 反过来）作为结束标记</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 语法如下</span></span>
<span class="line"><span style="color:#C678DD;">case</span><span style="color:#ABB2BF;"> 值 </span><span style="color:#C678DD;">in</span></span>
<span class="line"><span style="color:#E06C75;">模式1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">    command1</span></span>
<span class="line"><span style="color:#61AFEF;">    command2</span></span>
<span class="line"><span style="color:#56B6C2;">    ...</span></span>
<span class="line"><span style="color:#61AFEF;">    commandN</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;;</span></span>
<span class="line"><span style="color:#E06C75;">模式2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">    command1</span></span>
<span class="line"><span style="color:#61AFEF;">    command2</span></span>
<span class="line"><span style="color:#56B6C2;">    ...</span></span>
<span class="line"><span style="color:#61AFEF;">    commandN</span></span>
<span class="line"><span style="color:#ABB2BF;">    ;;</span></span>
<span class="line"><span style="color:#C678DD;">esac</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 示例</span></span>
<span class="line"><span style="color:#56B6C2;">read</span><span style="color:#98C379;"> number</span><span style="color:#7F848E;font-style:italic;">  # 阻塞并读取用户输入</span></span>
<span class="line"><span style="color:#C678DD;">case</span><span style="color:#E06C75;"> $number</span><span style="color:#C678DD;"> in</span></span>
<span class="line"><span style="color:#E06C75;">  1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">  echo</span><span style="color:#98C379;"> &quot;用户输入了</span><span style="color:#E06C75;">$number</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;"> ;;</span></span>
<span class="line"><span style="color:#E06C75;">  2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">  echo</span><span style="color:#98C379;"> &quot;用户输入了</span><span style="color:#E06C75;">$number</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;"> ;;</span></span>
<span class="line"><span style="color:#ABB2BF;">  *)</span></span>
<span class="line"><span style="color:#56B6C2;">  echo</span><span style="color:#98C379;"> &quot;相当于default执行&quot;</span><span style="color:#ABB2BF;">;;</span></span>
<span class="line"><span style="color:#C678DD;">esac</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><strong>6.break 和 continue</strong></p><p>在 shell 中也是使用 break 和 continue 跳出循环，含义与其它编程语言类似</p><p>8.shell 函数</p><p>语法与 js 类似，调用方式稍有不同</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 语法如下</span></span>
<span class="line"><span style="color:#ABB2BF;">[ function ] funname </span><span style="color:#61AFEF;">[</span><span style="color:#ABB2BF;">()]</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">    action</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    [return int;]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>注：</p><p>1.可以带 function fun() 定义，也可以直接 fun() 定义,不带任何参数。</p><p>2.参数返回，可以显示加 return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return 后跟数值 n(0-255）</p><p><strong>*示例及使用如下*</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 在shell脚本中函数必须先定义后使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 函数定义如下</span></span>
<span class="line"><span style="color:#61AFEF;">usemyshellfun</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;第一个参数为 </span><span style="color:#E06C75;font-style:italic;">$1</span><span style="color:#98C379;"> !&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;第二个参数为 </span><span style="color:#E06C75;font-style:italic;">$2</span><span style="color:#98C379;"> !&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;第十个参数为 </span><span style="color:#E06C75;">$10</span><span style="color:#98C379;"> !&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;第十个参数为 </span><span style="color:#E06C75;font-style:italic;">\${10}</span><span style="color:#98C379;"> !&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;第十一个参数为 </span><span style="color:#E06C75;font-style:italic;">\${11}</span><span style="color:#98C379;"> !&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;参数总数有 </span><span style="color:#E5C07B;">$#</span><span style="color:#98C379;"> 个!&quot;</span></span>
<span class="line"><span style="color:#56B6C2;">    echo</span><span style="color:#98C379;"> &quot;作为一个字符串输出所有参数 </span><span style="color:#E5C07B;">$*</span><span style="color:#98C379;"> !&quot;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> $((</span><span style="color:#61AFEF;">2+3</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 调用函数并传参</span></span>
<span class="line"><span style="color:#61AFEF;">usemyshellfun</span><span style="color:#D19A66;"> 1</span><span style="color:#D19A66;"> 2</span><span style="color:#D19A66;"> 3</span><span style="color:#D19A66;"> 4</span><span style="color:#D19A66;"> 5</span><span style="color:#D19A66;"> 6</span><span style="color:#D19A66;"> 7</span><span style="color:#D19A66;"> 8</span><span style="color:#D19A66;"> 9</span><span style="color:#D19A66;"> 34</span><span style="color:#D19A66;"> 73</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 注意，$10 不能获取第十个参数，获取第十个参数需要\${10}。当n&gt;=10时，需要使用\${n}来获取参数。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>9.shell 输入输出重定向</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 将输出重定向到 file</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将输入重定向到 file</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#ABB2BF;"> &lt; </span><span style="color:#98C379;">file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将输出以追加的方式重定向到 file</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#ABB2BF;"> &gt;&gt; </span><span style="color:#98C379;">file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将文件描述符为 n 的文件重定向到 file</span></span>
<span class="line"><span style="color:#61AFEF;">n</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将文件描述符为 n 的文件以追加的方式重定向到 file</span></span>
<span class="line"><span style="color:#61AFEF;">n</span><span style="color:#ABB2BF;"> &gt;&gt; </span><span style="color:#98C379;">file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将输出文件 m 和 n 合并</span></span>
<span class="line"><span style="color:#61AFEF;">n</span><span style="color:#ABB2BF;"> &gt;&amp; </span><span style="color:#98C379;">m</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将输入文件 m 和 n 合并</span></span>
<span class="line"><span style="color:#61AFEF;">n</span><span style="color:#ABB2BF;"> &lt;&amp; </span><span style="color:#61AFEF;">m</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将开始标记 tag 和结束标记 tag 之间的内容作为输入</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;&lt; </span><span style="color:#ABB2BF;">tag</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p><ul><li>1.标准输入文件(stdin)：stdin 的文件描述符为 0，Unix 程序默认从 stdin 读取数据。</li><li>2.标准输出文件(stdout)：stdout 的文件描述符为 1，Unix 程序默认向 stdout 输出数据。</li><li>3.标准错误文件(stderr)：stderr 的文件描述符为 2，Unix 程序会向 stderr 流中写入错误信息。</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 将错误流stderr 重定向到 file</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#ABB2BF;"> 2&gt;</span><span style="color:#98C379;">file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将错误流stderr 重定向并追加到 file</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#ABB2BF;"> 2&gt;&gt;</span><span style="color:#98C379;">file</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将输出流stdout 和错误流 stderr 合并后重定向到 file</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">file</span><span style="color:#ABB2BF;"> 2&gt;&amp;1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 追加方式</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#ABB2BF;"> &gt;&gt; </span><span style="color:#98C379;">file</span><span style="color:#ABB2BF;"> 2&gt;&amp;1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>另：/dev/null 文件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># /dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将命令的输出重定向到它，会起到&quot;禁止输出&quot;的效果</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果希望执行某个命令，但又不希望在屏幕上显示输出结果</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">/dev/null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果希望屏蔽 stdout 和 stderr</span></span>
<span class="line"><span style="color:#56B6C2;">command</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">/dev/null</span><span style="color:#ABB2BF;"> 2&gt;&amp;1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,108)]))}const m=n(o,[["render",c]]);export{B as __pageData,m as default};
