import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const C=JSON.parse('{"title":"8-TS高阶--类型和类型变换","description":"","frontmatter":{},"headers":[],"relativePath":"Document/TypeScript/TypeScript语法基础/8-TS高阶--类型变换.md","filePath":"Document/TypeScript/TypeScript语法基础/8-TS高阶--类型变换.md","lastUpdated":1750954157000}'),e={name:"Document/TypeScript/TypeScript语法基础/8-TS高阶--类型变换.md"};function o(r,s,t,c,B,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_8-ts高阶-类型和类型变换" tabindex="-1">8-TS高阶--类型和类型变换 <a class="header-anchor" href="#_8-ts高阶-类型和类型变换" aria-label="Permalink to &quot;8-TS高阶--类型和类型变换&quot;">​</a></h1><h2 id="_1-类型推断" tabindex="-1">1 类型推断 <a class="header-anchor" href="#_1-类型推断" aria-label="Permalink to &quot;1 类型推断&quot;">​</a></h2><ul><li>TypeScript 能根据一些简单的规则推断变量的类型</li></ul><h3 id="_1-1-从右向左" tabindex="-1">1.1 从右向左 <a class="header-anchor" href="#_1-1-从右向左" aria-label="Permalink to &quot;1.1 从右向左&quot;">​</a></h3><ul><li>变量的类型可以由定义推断</li><li>这是一个从右向左流动类型的示例</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> foo</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// foo 是 &#39;number&#39;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> bar</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;zhufeng&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// bar 是 &#39;string&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//foo = bar;</span><span style="color:#7F848E;font-style:italic;"> // Error: 不能将 &#39;string&#39; 赋值给 \`number\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-2-底部流出" tabindex="-1">1.2 底部流出 <a class="header-anchor" href="#_1-2-底部流出" aria-label="Permalink to &quot;1.2 底部流出&quot;">​</a></h3><ul><li>返回类型能被 <code>return</code> 语句推断</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_1-3-从左向右" tabindex="-1">1.3 从左向右 <a class="header-anchor" href="#_1-3-从左向右" aria-label="Permalink to &quot;1.3 从左向右&quot;">​</a></h3><ul><li>函数参数类型/返回值类型也能通过赋值来推断</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Sum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> sum</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Sum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_1-4-结构化" tabindex="-1">1.4 结构化 <a class="header-anchor" href="#_1-4-结构化" aria-label="Permalink to &quot;1.4 结构化&quot;">​</a></h3><ul><li>推断规则也适用于结构化的存在(对象字面量)</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;hello&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Error：不能把 &#39;string&#39; 类型赋值给 &#39;number&#39; 类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_1-5-解构" tabindex="-1">1.5 解构 <a class="header-anchor" href="#_1-5-解构" aria-label="Permalink to &quot;1.5 解构&quot;">​</a></h3><ul><li>推断规则也适用于解构</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> person</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;hello&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Error：不能把 &#39;string&#39; 类型赋值给 &#39;number&#39; 类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//数组也一样</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> numbers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">numbers</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;hello&#39;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Error：不能把 &#39;string&#39; 类型赋值给 &#39;number&#39; 类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_1-5-defaultprops" tabindex="-1">1.5 DefaultProps <a class="header-anchor" href="#_1-5-defaultprops" aria-label="Permalink to &quot;1.5 DefaultProps&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> DefaultProps</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> defaultProps</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">DefaultProps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">   name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> props</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#E06C75;">defaultProps</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    home</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;北京&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Props</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> props</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_1-6-小心使用返回值" tabindex="-1">1.6 小心使用返回值 <a class="header-anchor" href="#_1-6-小心使用返回值" aria-label="Permalink to &quot;1.6 小心使用返回值&quot;">​</a></h3><ul><li>尽管 TypeScript 一般情况下能推断函数的返回值，但是它可能并不是你想要的</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> addOne</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#61AFEF;"> addOne</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Ret</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ReturnType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> sum</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_1-交叉类型" tabindex="-1">1 交叉类型 <a class="header-anchor" href="#_1-交叉类型" aria-label="Permalink to &quot;1 交叉类型&quot;">​</a></h2><ul><li>交叉类型(Intersection Types)是将多个类型合并为一个类型</li><li>这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//TypeScript 交叉类型是将多个类型合并为一个类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//这让我们可以把现有的多种类型叠加到一起成为一种类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//它包含了所需的所有类型的特性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//接口的交叉</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">    fly</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">    talk</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> BirdPerson</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">BirdPerson</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">fly</span><span style="color:#ABB2BF;">() { }, </span><span style="color:#61AFEF;">talk</span><span style="color:#ABB2BF;">() { } };</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fly</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">talk</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> X</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Y</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    c</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> XY</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> X</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">Y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> YX</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Y</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">X</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//c = string &amp; number</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//let p1: XY={a:&#39;&#39;,b:&#39;&#39;,c:&#39;&#39;};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>联合类型的交叉类型</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Ta</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Tb</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Tc</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Ta</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">Tb</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>mixin</code>混入模式可以让你从两个对象中创建一个新对象，新对象会拥有着两个对象所有的功能</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> AnyObject</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mixin</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AnyObject</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> AnyObject</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">one</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">two</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt;{};</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> one</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        (&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">)[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> one</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> two</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        (&lt;</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">)[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> two</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> mixin</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zhufeng&quot;</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="_2-typeof" tabindex="-1">2 typeof <a class="header-anchor" href="#_2-typeof" aria-label="Permalink to &quot;2 typeof&quot;">​</a></h2><ul><li>可以获取一个变量的类型</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//先定义类型，再定义变量</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> People</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    gender</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p1</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">People</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    gender</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;male&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//先定义变量，再定义类型</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    gender</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;male&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> People</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> p1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">People</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="_3-索引访问操作符" tabindex="-1">3 索引访问操作符 <a class="header-anchor" href="#_3-索引访问操作符" aria-label="Permalink to &quot;3 索引访问操作符&quot;">​</a></h2><ul><li>可以通过[]获取一个类型的子类型</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    job</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#E06C75;">    interests</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">level</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> }[]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> FrontEndJob</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;job&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;前端工程师&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> interestLevel</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;interests&#39;</span><span style="color:#ABB2BF;">][</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">][</span><span style="color:#98C379;">&#39;level&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_4-keyof-索引类型查询操作符" tabindex="-1">4 keyof 索引类型查询操作符 <a class="header-anchor" href="#_4-keyof-索引类型查询操作符" aria-label="Permalink to &quot;4 keyof 索引类型查询操作符&quot;">​</a></h2><p>示例</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;male&#39;</span><span style="color:#ABB2BF;">|</span><span style="color:#98C379;">&#39;female&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 索引类型查询操作</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> PersonKey</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 相当于Person里面的字段：type PersonKey = &#39;name&#39;|&#39;age&#39;|&#39;gender&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getValueByKey</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PersonKey</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getValueByKey</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;male&#39;</span><span style="color:#ABB2BF;">}, </span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_5-映射类型" tabindex="-1">5 映射类型 <a class="header-anchor" href="#_5-映射类型" aria-label="Permalink to &quot;5 映射类型&quot;">​</a></h2><p>在定义的时候用in操作符去批量定义类型中的属性</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  gender</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;male&#39;</span><span style="color:#ABB2BF;">|</span><span style="color:#98C379;">&#39;female&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 批量把一个接口中的属性都变成可选的</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> PartPerson</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E5C07B;">Key</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p1</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PartPerson</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 也可以使用泛型</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Part</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#E5C07B;">key</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Part</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>通过key的数组获取值的数组</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">o</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">names</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">[]): </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">][] {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E5C07B;"> names</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> o</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> User</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> user</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_6-条件类型" tabindex="-1">6 条件类型 <a class="header-anchor" href="#_6-条件类型" aria-label="Permalink to &quot;6 条件类型&quot;">​</a></h2><ul><li>在定义泛型的时候能够添加进逻辑分支，以后泛型更加灵活</li></ul><h3 id="_6-1-定义条件类型" tabindex="-1">6.1 定义条件类型 <a class="header-anchor" href="#_6-1-定义条件类型" aria-label="Permalink to &quot;6.1 定义条件类型&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Fish</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Water</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Sky</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 若 T 能够赋值给 Fish，那么类型是 Water,否则为 Sky</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Condition</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Fish</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> Water</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> Sky</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> condition</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Condition</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Fish</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;水&#39;</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_6-2-条件类型的分发" tabindex="-1">6.2 条件类型的分发 <a class="header-anchor" href="#_6-2-条件类型的分发" aria-label="Permalink to &quot;6.2 条件类型的分发&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Fish</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    fish</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Water</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    water</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    bird</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Sky</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    sky</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// naked type</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Condition</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Fish</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> Water</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> Sky</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (Fish extends Fish ? Water : Sky) | (Bird extends Fish ? Water : Sky)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Water|Sky</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> condition1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Condition</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Fish</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Bird</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">water</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;水&#39;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> condition2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Condition</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Fish</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Bird</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">sky</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;天空&#39;</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>条件类型有一个特性，就是「分布式有条件类型」，但是分布式有条件类型是有前提的，条件类型里待检查的类型必须是naked type parameter</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// none naked type</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type Condition&lt;T&gt; = [T] extends [Fish] ? Water : Sky;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>找出T类型中U不包含的部分</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// never会被自动过滤</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Diff</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> U</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> never</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> R</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Diff</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;d&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;f&quot;</span><span style="color:#ABB2BF;">&gt;;  </span><span style="color:#7F848E;font-style:italic;">// &quot;b&quot; | &quot;d&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Filter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> U</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> never</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> R1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Filter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_6-3-typescript内置条件类型" tabindex="-1">6.3 TypeScript内置条件类型 <a class="header-anchor" href="#_6-3-typescript内置条件类型" aria-label="Permalink to &quot;6.3 TypeScript内置条件类型&quot;">​</a></h3><ul><li>TS 在内置了一些常用的条件类型，可以在 <a href="https://github.com/Microsoft/TypeScript/blob/c48662c891ce810f5627a0f6a8594049cccceeb5/lib/lib.es5.d.ts#L1291" target="_blank" rel="noreferrer">lib.es5.d.ts</a> 中查看：</li><li><a href="http://www.typescriptlang.org/docs/handbook/utility-types.html" target="_blank" rel="noreferrer">utility-types</a></li></ul><h4 id="_6-3-1-exclude" tabindex="-1">6.3.1 Exclude <a class="header-anchor" href="#_6-3-1-exclude" aria-label="Permalink to &quot;6.3.1 Exclude&quot;">​</a></h4><ul><li>从 T 可分配给的类型中排除 U</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Exclude</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> U</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> never</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;">  E</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Exclude</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> |</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">E</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_6-3-2-extract" tabindex="-1">6.3.2 Extract <a class="header-anchor" href="#_6-3-2-extract" aria-label="Permalink to &quot;6.3.2 Extract&quot;">​</a></h4><ul><li>从 T 可分配的类型中提取 U</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Extract</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> U</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> never</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;">  E</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Extract</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">E</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;1&#39;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_6-3-3-nonnullable" tabindex="-1">6.3.3 NonNullable <a class="header-anchor" href="#_6-3-3-nonnullable" aria-label="Permalink to &quot;6.3.3 NonNullable&quot;">​</a></h4><ul><li>从 T 中排除 null 和 undefined</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> NonNullable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> null</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> never</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;">  E</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> NonNullable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">|</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">|</span><span style="color:#E5C07B;">null</span><span style="color:#ABB2BF;">|</span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">E</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_6-3-4-returntype" tabindex="-1">6.3.4 ReturnType <a class="header-anchor" href="#_6-3-4-returntype" aria-label="Permalink to &quot;6.3.4 ReturnType&quot;">​</a></h4><ul><li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#type-inference-in-conditional-types" target="_blank" rel="noreferrer">infer</a>最早出现在此 <a href="https://github.com/Microsoft/TypeScript/pull/21496" target="_blank" rel="noreferrer">PR</a> 中，表示在 <code>extends</code> 条件语句中待推断的类型变量</li><li>infer和泛型的差别：infer不需要提前定义，而泛型是需要的</li><li>获取函数类型的返回类型</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ReturnType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> infer </span><span style="color:#E5C07B;">R</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> R</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getUserInfo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zhufeng&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过 ReturnType 将 getUserInfo 的返回值类型赋给了 UserInfo</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> UserInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ReturnType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> getUserInfo</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> userA</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">UserInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zhufeng&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_6-3-5-parameters" tabindex="-1">6.3.5 Parameters <a class="header-anchor" href="#_6-3-5-parameters" aria-label="Permalink to &quot;6.3.5 Parameters&quot;">​</a></h4><ul><li>Constructs a tuple type of the types of the parameters of a function type T</li><li><a href="http://www.typescriptlang.org/docs/handbook/utility-types.html#parameterst" target="_blank" rel="noreferrer">Parameters</a></li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Parameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: infer </span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> any</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> R</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T0</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Parameters</span><span style="color:#ABB2BF;">&lt;() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">&gt;;  </span><span style="color:#7F848E;font-style:italic;">// []</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Parameters</span><span style="color:#ABB2BF;">&lt;(</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">&gt;;  </span><span style="color:#7F848E;font-style:italic;">// [string]</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Parameters</span><span style="color:#ABB2BF;">&lt;(&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">)&gt;;  </span><span style="color:#7F848E;font-style:italic;">// [unknown]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_6-3-6-instancetype" tabindex="-1">6.3.6 InstanceType <a class="header-anchor" href="#_6-3-6-instancetype" aria-label="Permalink to &quot;6.3.6 InstanceType&quot;">​</a></h4><ul><li>获取构造函数类型的实例类型</li><li><a href="http://www.typescriptlang.org/docs/handbook/utility-types.html#instancetypet" target="_blank" rel="noreferrer">InstanceType</a></li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Constructor</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ConstructorParameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Constructor</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> new</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: infer </span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> any</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> P</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> never</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> InstanceType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Constructor</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> new</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> infer </span><span style="color:#E5C07B;">R</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> R</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    getName</span><span style="color:#ABB2BF;">() { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//构造函数参数</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> constructorParameters</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ConstructorParameters</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> Person</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> params</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">constructorParameters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//实例类型</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Instance</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> InstanceType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> Person</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> instance</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Instance</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() { } };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="_6-3-7-infer-分布式" tabindex="-1">6.3.7 infer+分布式 <a class="header-anchor" href="#_6-3-7-infer-分布式" aria-label="Permalink to &quot;6.3.7 infer+分布式&quot;">​</a></h4><ul><li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html#distributive-conditional-types" target="_blank" rel="noreferrer">distributive-conditional-types</a></li><li>「Distributive conditional types」主要用于拆分 extends 左边部分的联合类型</li><li>「Distributive conditional types」是由「naked type parameter」构成的条件类型。而「naked type parameter」表示没有被 Wrapped 的类型（如：Array、[T]、Promise 等都是不是「naked type parameter」）。「Distributive conditional types」主要用于拆分 extends 左边部分的联合类型，举个例子：在条件类型 T extends U ? X : Y 中，当 T 是 A | B 时，会拆分成 A extends U ? X : Y | B extends U ? X : Y；</li><li>利用在逆变位置上，同一类型变量的多个候选类型将会被推断为<a href="https://github.com/Microsoft/TypeScript/pull/21496" target="_blank" rel="noreferrer">交叉类型的特性</a></li><li>tuple转union</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ElementOf</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">&lt;infer </span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> E</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> never</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TTuple</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ToUnion</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ElementOf</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">TTuple</span><span style="color:#ABB2BF;">&gt;; </span><span style="color:#7F848E;font-style:italic;">// string | number</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//联合类型（Union Types）表示取值可以为多种类型中的一种</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//交叉类型（Intersection Types）表示将多个类型合并为一个类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//联合类型转交叉类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//union 转 intersection</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//union 转 intersection 的操作多用于 mixin 中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//https://github.com/Microsoft/TypeScript/issues/27907</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> UnionToIntersection</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#ABB2BF;"> { </span><span style="color:#61AFEF;">a</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: infer </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: infer </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> U</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> never</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> UnionToIntersection</span><span style="color:#ABB2BF;">&lt;{ </span><span style="color:#61AFEF;">a</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T2</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;"> }&gt;; </span><span style="color:#7F848E;font-style:italic;">// T1 &amp; T2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_7-内置工具类型" tabindex="-1">7 内置工具类型 <a class="header-anchor" href="#_7-内置工具类型" aria-label="Permalink to &quot;7 内置工具类型&quot;">​</a></h2><ul><li><p>TS 中内置了一些工具类型来帮助我们更好地使用类型系统，可以在 <a href="https://github.com/Microsoft/TypeScript/blob/c48662c891ce810f5627a0f6a8594049cccceeb5/lib/lib.es5.d.ts#L1291" target="_blank" rel="noreferrer">lib.es5.d.ts</a> 中查看：</p></li><li><p><a href="http://www.typescriptlang.org/docs/handbook/utility-types.html" target="_blank" rel="noreferrer">utility-types</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/4I7B_rtgB-ZSPA_mS5YBPQ" target="_blank" rel="noreferrer">一看就懂的TypeScript工具类型 (qq.com)</a></p></li><li><p>TypeScript中增加了对映射类型修饰符的控制</p></li><li><p>具体而言，一个 <code>readonly</code> 或 <code>?</code> 修饰符在一个映射类型里可以用前缀 <code>+</code> 或<code>-</code>来表示这个修饰符应该被添加或移除</p></li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">+?</td><td style="text-align:left;">变为可选</td></tr><tr><td style="text-align:left;">-?</td><td style="text-align:left;">变为必选</td></tr></tbody></table><h3 id="_7-1-partial" tabindex="-1">7.1 Partial <a class="header-anchor" href="#_7-1-partial" aria-label="Permalink to &quot;7.1 Partial&quot;">​</a></h3><ul><li>Partial 可以将传入的属性由非可选变为可选，具体使用如下：</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Partial</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">] };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  a1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  a2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  a3</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> aPartial</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Partial</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">aPartial</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}; </span><span style="color:#7F848E;font-style:italic;">// 不会报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_7-2-类型递归" tabindex="-1">7.2 类型递归 <a class="header-anchor" href="#_7-2-类型递归" aria-label="Permalink to &quot;7.2 类型递归&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Company</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#E06C75;">    company</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Company</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> DeepPartial</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#E5C07B;">U</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">extends</span><span style="color:#E5C07B;"> object</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#E5C07B;"> DeepPartial</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">]&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> R2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> DeepPartial</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_7-3-required" tabindex="-1">7.3 Required <a class="header-anchor" href="#_7-3-required" aria-label="Permalink to &quot;7.3 Required&quot;">​</a></h3><ul><li>Required 可以将传入的属性中的可选项变为必选项，这里用了 -? 修饰符来实现。</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  gender</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;male&#39;</span><span style="color:#ABB2BF;">|</span><span style="color:#98C379;">&#39;female&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * type Require&lt;T&gt; = { [P in keyof T]-?: T[P] };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Required</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //gender: &#39;male&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_7-4-readonly" tabindex="-1">7.4 Readonly <a class="header-anchor" href="#_7-4-readonly" aria-label="Permalink to &quot;7.4 Readonly&quot;">​</a></h3><ul><li>Readonly 通过为传入的属性每一项都加上 readonly 修饰符来实现。</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  gender</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;male&#39;</span><span style="color:#ABB2BF;">|</span><span style="color:#98C379;">&#39;female&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type Readonly&lt;T&gt; = { readonly [P in keyof T]: T[P] };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Readonly</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  gender</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;male&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 11</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_7-5-pick" tabindex="-1">7.5 Pick <a class="header-anchor" href="#_7-5-pick" aria-label="Permalink to &quot;7.5 Pick&quot;">​</a></h3><ul><li>Pick 能够帮助我们从传入的属性中摘取某一项返回</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  gender</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * From T pick a set of properties K</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * type Pick&lt;T, K extends keyof T&gt; = { [P in K]: T[P] };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 摘取 Animal 中的 name 属性</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    married</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">keys</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">[]): </span><span style="color:#E5C07B;">Pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">    keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> person</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Person</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">married</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;age&#39;</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;age&#39;</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;age&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="_7-6-record" tabindex="-1">7.6 Record <a class="header-anchor" href="#_7-6-record" aria-label="Permalink to &quot;7.6 Record&quot;">​</a></h3><ul><li>Record 是 TypeScript 的一个高级类型</li><li>他会将一个类型的所有属性值都映射到另一个类型上并创造一个新的类型</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Construct a type with a set of properties K of type T</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> K</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mapObject</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;, </span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> U</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> names</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;world&#39;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> lengths</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> mapObject</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">names</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">s</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">lengths</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;">//{ &#39;0&#39;: 5, &#39;1&#39;: 5 }</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Point</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;x&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;y&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> PointList</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Record</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> }&gt;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cars</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PointList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="_8-自定义高级类型" tabindex="-1">8 自定义高级类型 <a class="header-anchor" href="#_8-自定义高级类型" aria-label="Permalink to &quot;8 自定义高级类型&quot;">​</a></h2><ul><li><a href="https://github.com/piotrwitek/utility-types" target="_blank" rel="noreferrer">utility-types</a></li></ul><h3 id="_8-1-proxy" tabindex="-1">8.1 Proxy <a class="header-anchor" href="#_8-1-proxy" aria-label="Permalink to &quot;8.1 Proxy&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Proxy</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    get</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Proxify</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">Proxy</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">]&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> proxify</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Proxify</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {} </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> Proxify</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">            set</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> props</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> proxyProps</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> proxify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">proxyProps</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> unProxify</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">t</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Proxify</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;): </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {} </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> k</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> t</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> t</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> originProps</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> unProxify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">proxyProps</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">originProps</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h3 id="_8-2-setdifference" tabindex="-1">8.2 SetDifference <a class="header-anchor" href="#_8-2-setdifference" aria-label="Permalink to &quot;8.2 SetDifference&quot;">​</a></h3><ul><li>SetDifference (same as Exclude)</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * SetDifference (same as Exclude)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@desc</span><span style="color:#7F848E;font-style:italic;"> Set difference of given union types \`A\` and \`B\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@example</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span><span style="color:#7F848E;font-style:italic;">   // Expect: &quot;1&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   SetDifference&lt;&#39;1&#39; | &#39;2&#39; | &#39;3&#39;, &#39;2&#39; | &#39;3&#39; | &#39;4&#39;&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span><span style="color:#7F848E;font-style:italic;">   // Expect: string | number</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   SetDifference&lt;string | number | (() =&gt; void), Function&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> SetDifference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> A</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> B</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> never</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_8-3-omit" tabindex="-1">8.3 Omit <a class="header-anchor" href="#_8-3-omit" aria-label="Permalink to &quot;8.3 Omit&quot;">​</a></h3><ul><li>Exclude 的作用是从 T 中排除出可分配给 U的元素.</li><li>Omit&lt;T, K&gt;的作用是忽略T中的某些属性</li><li>Omit = Exclude + Pick</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Omit (complements Pick)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@desc</span><span style="color:#7F848E;font-style:italic;"> From \`T\` remove a set of properties by key \`K\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@example</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type Props = { name: string; age: number; visible: boolean };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span><span style="color:#7F848E;font-style:italic;">   // Expect: { name: string; visible: boolean; }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type Props = Omit&lt;Props, &#39;age&#39;&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> Omit</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">SetDifference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">&gt;&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_8-4-diff" tabindex="-1">8.4 Diff <a class="header-anchor" href="#_8-4-diff" aria-label="Permalink to &quot;8.4 Diff&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Diff</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@desc</span><span style="color:#7F848E;font-style:italic;"> From \`T\` remove properties that exist in \`U\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@example</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type Props = { name: string; age: number; visible: boolean };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type DefaultProps = { age: number };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span><span style="color:#7F848E;font-style:italic;">   // Expect: { name: string; visible: boolean; }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type DiffProps = Diff&lt;Props, DefaultProps&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> Diff</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> object</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> object</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Pick</span><span style="color:#ABB2BF;">&lt;</span></span>
<span class="line"><span style="color:#E5C07B;">  T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">  SetDifference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> U</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_8-5-intersection" tabindex="-1">8.5 Intersection <a class="header-anchor" href="#_8-5-intersection" aria-label="Permalink to &quot;8.5 Intersection&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Intersection</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@desc</span><span style="color:#7F848E;font-style:italic;"> From \`T\` pick properties that exist in \`U\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@example</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type Props = { name: string; age: number; visible: boolean };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type DefaultProps = { age: number };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span><span style="color:#7F848E;font-style:italic;">   // Expect: { age: number; }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type DuplicateProps = Intersection&lt;Props, DefaultProps&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> Intersection</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> object</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> object</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Pick</span><span style="color:#ABB2BF;">&lt;</span></span>
<span class="line"><span style="color:#E5C07B;">  T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">  Extract</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> U</span><span style="color:#ABB2BF;">&gt; &amp; </span><span style="color:#E5C07B;">Extract</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> U</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_8-6-overwrite" tabindex="-1">8.6 Overwrite <a class="header-anchor" href="#_8-6-overwrite" aria-label="Permalink to &quot;8.6 Overwrite&quot;">​</a></h3><ul><li>Overwrite&lt;T, U&gt;顾名思义,是用U的属性覆盖T的相同属性.</li><li><a href="https://github.com/piotrwitek/utility-types/blob/master/src/mapped-types.ts" target="_blank" rel="noreferrer">mapped-types</a></li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Overwrite</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@desc</span><span style="color:#7F848E;font-style:italic;"> From \`U\` overwrite properties to \`T\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@example</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type Props = { name: string; age: number; visible: boolean };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type NewProps = { age: string; other: string };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span><span style="color:#7F848E;font-style:italic;">   // Expect: { name: string; age: string; visible: boolean; }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *   type ReplacedProps = Overwrite&lt;Props, NewProps&gt;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> Overwrite</span><span style="color:#ABB2BF;">&lt;</span></span>
<span class="line"><span style="color:#E5C07B;">  T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> object</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">  U</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> object</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">  I</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Diff</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; &amp; </span><span style="color:#E5C07B;">Intersection</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> I</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Props</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">visible</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> NewProps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">other</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Expect: { name: string; age: string; visible: boolean; }</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ReplacedProps</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Overwrite</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Props</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">NewProps</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_8-7-merge" tabindex="-1">8.7 Merge <a class="header-anchor" href="#_8-7-merge" aria-label="Permalink to &quot;8.7 Merge&quot;">​</a></h3><ul><li>Merge&lt;O1, O2&gt;的作用是将两个对象的属性合并:</li><li>Merge&lt;O1, O2&gt; = Compute + Omit&lt;U, T&gt;</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> O1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> O2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//Compute的作用是将交叉类型合并</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Compute</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> A</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Function</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> A</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> { [</span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">] };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> R1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Compute</span><span style="color:#ABB2BF;">&lt;{ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;"> } &amp; { </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;y&quot;</span><span style="color:#ABB2BF;"> }&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Merge</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">O1</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> object</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">O2</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> object</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Compute</span><span style="color:#ABB2BF;">&lt;</span></span>
<span class="line"><span style="color:#E5C07B;">  O1</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">Omit</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">O2</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> O1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> R2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Merge</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">O1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">O2</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_8-8-mutable" tabindex="-1">8.8 Mutable <a class="header-anchor" href="#_8-8-mutable" aria-label="Permalink to &quot;8.8 Mutable&quot;">​</a></h3><ul><li>将 T 的所有属性的 <code>readonly</code> 移除</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Mutable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  -</span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_9-面试题综合实战" tabindex="-1">9 面试题综合实战 <a class="header-anchor" href="#_9-面试题综合实战" aria-label="Permalink to &quot;9 面试题综合实战&quot;">​</a></h2><ul><li><code>infer</code> 关键字就是声明一个类型变量，当类型系统给足条件的时候类型就会被推断出来</li><li><a href="https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md" target="_blank" rel="noreferrer">typescript_zh</a></li><li><a href="https://codesandbox.io/s/4tmtp" target="_blank" rel="noreferrer">codesandbox</a></li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    payload</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> EffectModule</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    count</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    message</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hello!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    delay</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> action</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;">  input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">            payload</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`hello </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">i</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;delay&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }));</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> action</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    setMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">&gt;): </span><span style="color:#E5C07B;">Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> action2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            payload</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">payload</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMilliseconds</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">            type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;set-message&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> action2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 把 EffectModule 中的方法名取出来</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> methodsPick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { [</span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> in</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">extends</span><span style="color:#E5C07B;"> Function</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> K</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> never</span><span style="color:#ABB2BF;"> }[</span><span style="color:#C678DD;">keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义转换前后的方法</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> asyncMethod</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt;&gt; </span><span style="color:#7F848E;font-style:italic;">// 转换前</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> asyncMethodConnect</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// 转换后</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> syncMethod</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// 转换前</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> syncMethodConnect</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#7F848E;font-style:italic;">// 转换后</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 条件类型+推断类型</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> EffectModuleMethodsConnect</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> asyncMethod</span><span style="color:#ABB2BF;">&lt;infer </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">, infer </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#E5C07B;"> asyncMethodConnect</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#E5C07B;"> T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> syncMethod</span><span style="color:#ABB2BF;">&lt;infer </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">, infer </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    ?</span><span style="color:#E5C07B;"> syncMethodConnect</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    :</span><span style="color:#E5C07B;"> never</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> EffectModuleMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> methodsPick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">EffectModule</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 映射类型</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Connect</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">EffectModule</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#E5C07B;">M</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> EffectModuleMethods</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">EffectModuleMethodsConnect</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">EffectModule</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">M</span><span style="color:#ABB2BF;">]&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Connected</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    delay</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#61AFEF;">    setMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Action</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> connect</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Connect</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">m</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">EffectModule</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Connected</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#61AFEF;">    delay</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">        type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;delay&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        payload</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`hello 2\`</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#61AFEF;">    setMessage</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">        type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;set-message&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        payload</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMilliseconds</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> connected</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Connected</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> connect</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> EffectModule</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div>`,123)]))}const b=n(e,[["render",o]]);export{C as __pageData,b as default};
