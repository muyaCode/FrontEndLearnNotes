import{_ as a,c as r,o,ah as t}from"./chunks/framework.DqD713j2.js";const l="/FrontEndLearnNotes/assets/image-20240306201052865.DVDisQLw.png",n="/FrontEndLearnNotes/assets/image-20240306201113576.02qC-Mwi.png",f=JSON.parse('{"title":"前端工具环境配置","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端开发环境配置/前端工具环境配置.md","filePath":"Document/前端开发环境配置/前端工具环境配置.md","lastUpdated":1750954157000}'),s={name:"Document/前端开发环境配置/前端工具环境配置.md"};function i(h,e,c,p,d,b){return o(),r("div",null,e[0]||(e[0]=[t(`<h1 id="前端工具环境配置" tabindex="-1">前端工具环境配置 <a class="header-anchor" href="#前端工具环境配置" aria-label="Permalink to &quot;前端工具环境配置&quot;">​</a></h1><p>参考：<a href="https://juejin.cn/post/7187272143657730108?" target="_blank" rel="noreferrer">https://juejin.cn/post/7187272143657730108?</a></p><h2 id="开发软件" tabindex="-1">开发软件 <a class="header-anchor" href="#开发软件" aria-label="Permalink to &quot;开发软件&quot;">​</a></h2><h3 id="visual-studio-code" tabindex="-1">Visual Studio Code <a class="header-anchor" href="#visual-studio-code" aria-label="Permalink to &quot;Visual Studio Code&quot;">​</a></h3><p>Visual Studio Code 官网地址：<a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code - Code Editing. Redefined</a></p><h3 id="webstorm" tabindex="-1">WebStorm <a class="header-anchor" href="#webstorm" aria-label="Permalink to &quot;WebStorm&quot;">​</a></h3><p>WebStorm 官网地址：<a href="https://www.jetbrains.com/guide/javascript/" target="_blank" rel="noreferrer">JavaScript and TypeScript - JetBrains Guide</a></p><h2 id="配置开发环境" tabindex="-1">配置开发环境 <a class="header-anchor" href="#配置开发环境" aria-label="Permalink to &quot;配置开发环境&quot;">​</a></h2><h3 id="node-版本管理工具-nvm" tabindex="-1">Node 版本管理工具：nvm <a class="header-anchor" href="#node-版本管理工具-nvm" aria-label="Permalink to &quot;Node 版本管理工具：nvm&quot;">​</a></h3><p>工作中的项目有很多老项目，需要在不同版本的 Node.js 中运行，项目在稳定上线后通常就不会再去更新其 node 版本和依赖模块的版本，所以我们需要一个工具来为不同的项目配置不同的 node 版本。</p><blockquote><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noreferrer">Releases · coreybutler/nvm-windows (github.com)</a></p><p>github：<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noreferrer">coreybutler/nvm-windows: A node.js version management utility for Windows. Ironically written in Go. (github.com)</a></p></blockquote><p><strong>注意事项：</strong></p><ol><li>尽量先安装 nvm， 通过 nvm 安装 node.js，如果先安装了 node.js，要在 nvm 安装过程中正确配置 node.js 的路径。</li><li>安装完毕后直接在命令行使用会提示 &#39;nvm&#39;/&#39;node&#39; 不是内部或外部命令，也不是可运行的程序，搜一下跟着网上教程配置环境变量即可。<strong>不过这里要注意的是，公司电脑可能会禁止打开编辑系统环境变量</strong>，通过 <strong>控制面板-&gt;用户账户-&gt;更改我的环境变量</strong> 打开即可。</li><li>配置环境变量 <code>PATH</code> 时可以把 <strong>nodejs 目录下的 node_global 文件夹</strong>也添加进去，这个文件夹存放的是全局安装的模块。这样的话日后安装如 <code>yarn</code> 、<code>whistle</code> 等模块时无需再单独配置环境变量即可在命令行中使用其命令。</li></ol><h3 id="node-版本管理工具-volta" tabindex="-1">Node 版本管理工具：volta <a class="header-anchor" href="#node-版本管理工具-volta" aria-label="Permalink to &quot;Node 版本管理工具：volta&quot;">​</a></h3><p>开源地址：<a href="https://github.com/volta-cli/volta" target="_blank" rel="noreferrer">volta-cli/volta: Volta: JS Toolchains as Code. ⚡ (github.com)</a></p><p>官网：<a href="https://volta.sh/" target="_blank" rel="noreferrer">Volta - The Hassle-Free JavaScript Tool Manager</a></p><h3 id="node-npm" tabindex="-1">node / npm <a class="header-anchor" href="#node-npm" aria-label="Permalink to &quot;node / npm&quot;">​</a></h3><p>当通过 nvm 安装好 node 之后，我们要把 npm 的下载源换成公司的：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 查看下载源： https://registry.npmjs.org/</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> config</span><span style="color:#98C379;"> get</span><span style="color:#98C379;"> registry</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 切换 npm 下载源到京东</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> config</span><span style="color:#98C379;"> set</span><span style="color:#98C379;"> registry</span><span style="color:#98C379;"> http://npm.m.jd.com/mirrors</span></span>
<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> config</span><span style="color:#98C379;"> set</span><span style="color:#98C379;"> registry</span><span style="color:#98C379;"> http://npm.m.jd.com/mirrors</span></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> config</span><span style="color:#98C379;"> set</span><span style="color:#98C379;"> registry</span><span style="color:#98C379;"> http://npm.m.jd.com/mirrors</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 淘宝源</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="⭐-git" tabindex="-1">⭐ git <a class="header-anchor" href="#⭐-git" aria-label="Permalink to &quot;⭐ git&quot;">​</a></h3><p>Git 官网：<a href="https://git-scm.com/" target="_blank" rel="noreferrer">Git (git-scm.com)</a></p><h4 id="ssh" tabindex="-1">ssh <a class="header-anchor" href="#ssh" aria-label="Permalink to &quot;ssh&quot;">​</a></h4><p>安装好 git 之后我们就可以拉取远程仓库的代码了，但是在拉取公司项目代码之前还差一步——生成 SSH 密钥。</p><blockquote><p>SSH 密钥用于 SSH 协议中的密钥认证，提供一种安全的方式来进行远程登录或其他网络服务。它包括一对密钥：一个私钥（保密）和一个公钥（可以公开）。公钥放在远程服务器上，私钥由用户安全保管。当用户尝试连接到服务器时，服务器使用公钥来验证用户的私钥，如果匹配，则授予访问权限，无需输入密码。这种方式比传统密码认证更安全。</p></blockquote><p>如果公司有自己的代码仓库，会对生成并上传 SSH 有教程。</p><h2 id="编程插件配置" tabindex="-1">编程插件配置 <a class="header-anchor" href="#编程插件配置" aria-label="Permalink to &quot;编程插件配置&quot;">​</a></h2><p><a href="https://juejin.cn/post/7331928379555971111" target="_blank" rel="noreferrer">【JSDoc】都 2024 年了，你不会还在用纯文本写注释吧 - 掘金 (juejin.cn)</a></p><h3 id="visual-studio-code-插件配置" tabindex="-1">Visual Studio Code 插件配置 <a class="header-anchor" href="#visual-studio-code-插件配置" aria-label="Permalink to &quot;Visual Studio Code 插件配置&quot;">​</a></h3><h4 id="插件-rest-client" tabindex="-1">插件：REST Client <a class="header-anchor" href="#插件-rest-client" aria-label="Permalink to &quot;插件：REST Client&quot;">​</a></h4><p>我们在开发测试接口时一般会使用 <code>Postman</code> 等接口调试工具测试，需要设置 <code>URL</code>、<code>token</code>、<code>headers</code> 等，但是对于前端来说，我们可能只关心这个接口的入参还有返回值，不想去配置那么多东西，或者不想用 <code>Postman</code> 但又需要测试接口，有时候可能是不停地去页面点击或者刷新页面发起请求，这时候就会很麻烦。那这里有一个简单场景下的接口测试工具，适合使用 vscode 开发的同学。</p><h4 id="数据库可视化连接插件-database-client" tabindex="-1">数据库可视化连接插件：Database Client <a class="header-anchor" href="#数据库可视化连接插件-database-client" aria-label="Permalink to &quot;数据库可视化连接插件：Database Client&quot;">​</a></h4><p>安装了之后，就会在 vscode 左侧生成两个图标，上面一个表示关系型，下面一个表示非关系型。你可以连接你的本地数据库服务，进行开发调试</p><h2 id="开发助力工具" tabindex="-1">开发助力工具 <a class="header-anchor" href="#开发助力工具" aria-label="Permalink to &quot;开发助力工具&quot;">​</a></h2><h3 id="whistle" tabindex="-1">whistle <a class="header-anchor" href="#whistle" aria-label="Permalink to &quot;whistle&quot;">​</a></h3><p>文档：<a href="https://wproxy.org/whistle/install.html" target="_blank" rel="noreferrer">安装启动 · GitBook (wproxy.org)</a></p><p>企业中前后端开发进度经常会不一致，有时候后端的接口还没上线，但我们做完了页面想自己测试一下效果，可以通过 whistle 抓包来自己模拟数据。</p><h3 id="switchhosts" tabindex="-1">SwitchHosts <a class="header-anchor" href="#switchhosts" aria-label="Permalink to &quot;SwitchHosts&quot;">​</a></h3><p>GitHub 地址：<a href="https://wproxy.org/whistle/install.html" target="_blank" rel="noreferrer">安装启动 · GitBook (wproxy.org)</a></p><p>其实直接修改 hosts 文件也可以，但 SwtichHosts 会方便一些。</p><p>有时公司后端的服务器只会响应来自特定域名的请求，比如京东的后台只响应 <code>xxx.jd.com</code> 这种以 <code>jd.com</code> 结尾的域名发起的请求，这就需要我们通过配置 webpack 的 host 为 <code>xxx.jd.com</code>，同时用 hosts 文件把 <code>xxx.jd.com</code> 解析到 <strong>127.0.0.1</strong> 上。</p><h2 id="抓包工具" tabindex="-1">抓包工具 <a class="header-anchor" href="#抓包工具" aria-label="Permalink to &quot;抓包工具&quot;">​</a></h2><h3 id="_1-抓包工具-proxyman" tabindex="-1">1.抓包工具 Proxyman <a class="header-anchor" href="#_1-抓包工具-proxyman" aria-label="Permalink to &quot;1.抓包工具 Proxyman&quot;">​</a></h3><p>不了解抓包工具的童鞋还不知道抓包工具的强大。简单举个例子：</p><ul><li>你们公司开发的系统部署给客户了，现场交付的同学给你说系统出现了故障，接口似乎出错了</li><li>但是用户是内网环境，各种各样的原因你又没办法远程或者 <code>vpn</code> 连接客户的电脑排查问题</li><li>此时你又必须要查看接口具体是入参错误还是接口调用错误，必须得有接口信息你才能排查</li></ul><p>怎么办？此时你需要先知道一个东西，<code>HTTP</code> 存档：<code>HAR</code>。</p><blockquote><p>HAR（HTTP 存档 ） 规范定义了 HTTP 事务的存档格式，是多种 HTTP 会话工具用来导出所记录数据的 一种文件格式，Web 浏览器可以使用该格式导出有关其加载的网页的详细性能数据。</p></blockquote><p>在浏览器接口列表里右键某个接口，会出现以下选项：</p><p><img src="`+l+'" alt="image-20240306201052865"></p><p>点击保存为 <code>HAR</code>，浏览器会为你将当前页的所有接口保存为一个 <code>HAR</code> 包。此时你可以让客户现场的同学将报错的接口保存为 <code>HAR</code> 包并发送给你，你可以使用类似 <code>Proxyman</code> 的抓包工具打开，来看看打开的效果：</p><p><img src="'+n+'" alt="image-20240306201113576"></p><p>和浏览器的 <code>Network</code> 界面是几乎一模一样的，这时候你就可以尽情排查问题，而不再因为 <code>vpn</code>、远程无法连接客户电脑而焦虑了。</p><p>当然了，抓包工具有很多，这里介绍 <code>Proxyman</code> 是因为它的 UI 界面简洁优美。还有就是抓包工具的用法不仅仅是这个，这只是一个比较基础的应用，更多用法这里不再赘述，以后有机会开专题来说说抓包工具的问题。</p><h2 id="实用工具" tabindex="-1">实用工具 <a class="header-anchor" href="#实用工具" aria-label="Permalink to &quot;实用工具&quot;">​</a></h2><h3 id="gifcam" tabindex="-1">GifCam <a class="header-anchor" href="#gifcam" aria-label="Permalink to &quot;GifCam&quot;">​</a></h3><p>GifCam | GIF 录制工具：<a href="https://blog.bahraniapps.com/gifcam/#download" target="_blank" rel="noreferrer">GifCam | BahraniApps Blog</a></p><p>非常好用的 <strong>gif 录制工具</strong>，之前写掘金想展示前端代码效果的时候接触到的。工作中有时候想和产品或者 UI 确认一些细节效果，不想拉会议投屏，录个 gif 是很好的选择。</p><h3 id="easy-mock-在线接口服务" tabindex="-1">Easy Mock 在线接口服务 <a class="header-anchor" href="#easy-mock-在线接口服务" aria-label="Permalink to &quot;Easy Mock 在线接口服务&quot;">​</a></h3><p><a href="https://mock.mengxuegu.com/login" target="_blank" rel="noreferrer">Easy Mock (mengxuegu.com)</a></p><p>后端写接口磨磨蹭蹭？自己 <code>mock</code> 数据又麻烦？也不想用 <code>json-server</code> 或者 <code>node</code> 启动本地服务调试？那这个网站或许适合你，先拿到和后端商量好的数据格式及字段，然后在 <code>Easy Mock</code> 上定义对应的接口和数据，你可以使用 <code>mockjs</code> 语法生成随机数据，也可以使用静态数据。在你需要批量化的假数据填充表格的时候，这个工具非常有用。还可以结合 <code>mockjs</code> 语法进行函数编写，使用函数接收入参并控制返回数据。</p><h3 id="json-在线工具" tabindex="-1">JSON 在线工具 <a class="header-anchor" href="#json-在线工具" aria-label="Permalink to &quot;JSON 在线工具&quot;">​</a></h3><p><a href="https://www.json.cn/" target="_blank" rel="noreferrer">JSON 在线解析及格式化验证 - JSON.cn</a></p><p>一个功能非常丰富的 JSON 在线工具网站，可以在线格式化 JSON 字符串，在线进行代码对比，能做非常多你想得到想不到的事 —— 它还可以在线运行 C++、C、Java 等语言代码，还可以压缩图片，IP 查询等，简直就是万能百宝箱。</p><h3 id="在线打字练习" tabindex="-1">在线打字练习 <a class="header-anchor" href="#在线打字练习" aria-label="Permalink to &quot;在线打字练习&quot;">​</a></h3><p>如果你还在为打字不快而烦恼，想要练习却又无从下手，现在好了，下面两个打字练习网站可以帮助你练习正确的打字姿势，快速记住键位，进行多样化的打字练习。</p><p><a href="https://www.keybr.com/" target="_blank" rel="noreferrer">Typing Practice (keybr.com)</a></p><p>帮助你快速熟悉键位。</p><p><a href="https://dazigo.vip/" target="_blank" rel="noreferrer">在线打字测试(打字狗 dazigo.vip)</a></p><p>在这里你可以进行键位练习、打字比赛、打字排行、打字游戏。海量文章古诗随意挑选进行练习，是综合功能最全、最好用的免费打字网站之一。</p><h2 id="其他优秀的前端学习网站" tabindex="-1">其他优秀的前端学习网站 <a class="header-anchor" href="#其他优秀的前端学习网站" aria-label="Permalink to &quot;其他优秀的前端学习网站&quot;">​</a></h2><p><a href="https://luvsunlight.github.io/js-offer-algo/#/" target="_blank" rel="noreferrer">js 剑指 offer 题解 (luvsunlight.github.io)</a></p><p><a href="https://ustbhuangyi.github.io/vue-analysis/" target="_blank" rel="noreferrer">前言 | Vue.js 技术揭秘 (ustbhuangyi.github.io)</a></p><p><a href="https://webpack.wuhaolin.cn/" target="_blank" rel="noreferrer">深入浅出 Webpack · 深入浅出 Webpack (wuhaolin.cn)</a></p><p><a href="https://es6.ruanyifeng.com/#README" target="_blank" rel="noreferrer">ES6 入门教程 - ECMAScript 6 入门 (ruanyifeng.com)</a></p><p><a href="https://blog.poetries.top/browser-working-principle/" target="_blank" rel="noreferrer">浏览器工作原理与实践 (poetries.top)</a></p><h2 id="开放接口" tabindex="-1">开放接口 <a class="header-anchor" href="#开放接口" aria-label="Permalink to &quot;开放接口&quot;">​</a></h2><h3 id="聚合-api" tabindex="-1">聚合 API <a class="header-anchor" href="#聚合-api" aria-label="Permalink to &quot;聚合 API&quot;">​</a></h3><p>该网站提供了大量的免费的 <code>API</code> 接口供我们使用,大家可以将其用在自己的项目上使用,并且每个接口都提供了完整的文档,开箱即用。</p><p>官网：<a href="https://www.free-api.com/" target="_blank" rel="noreferrer">接口大全-免费 API,收集所有免费的 API (free-api.com)</a></p><h3 id="网易云音乐-api-接口" tabindex="-1">网易云音乐 API 接口 <a class="header-anchor" href="#网易云音乐-api-接口" aria-label="Permalink to &quot;网易云音乐 API 接口&quot;">​</a></h3><p>网易云音乐 <code>NodeJs</code> 版 <code>API</code>,具备登陆接口,多达 200 多个接口,文档也写得很好,非常给不会写后端且没有项目经验的同学。</p><h2 id="emoji-表情" tabindex="-1">Emoji 表情 <a class="header-anchor" href="#emoji-表情" aria-label="Permalink to &quot;Emoji 表情&quot;">​</a></h2><p><a href="https://www.emojiall.com/zh-hans/all-cate" target="_blank" rel="noreferrer">🗂 Emoji 全部分类 | EmojiAll</a></p><h1 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h1><h2 id="必备工具" tabindex="-1">必备工具 <a class="header-anchor" href="#必备工具" aria-label="Permalink to &quot;必备工具&quot;">​</a></h2><p>这些是我日常使用的工具，缺了它们我很难高效工作。</p><ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VS Code</a> —— 我选择的编辑器是微软出品的 VS Code。免费、轻量（和 WebStorm 之类的 IDE 相比），大量开箱即用的特性，丰富的扩展。</li><li>浏览器 —— 我的默认浏览器是 Firefox，有时切换到 Chrome 进行开发。我也安装了其他浏览器，以供测试之用。</li><li><a href="https://devdocs.io/" target="_blank" rel="noreferrer">DevDocs</a> —— 这个网页应用汇聚了各种项目的文档，还支持离线使用。当我需要查询文档时，一般会访问这个站点。我主要用它查询 JS 和 DOM/浏览器方面的文档。我真没找到什么能和它媲美的工具（详尽而易于搜索）。你应该看一看。</li><li><a href="https://google.com/" target="_blank" rel="noreferrer">Google</a> —— 没错，我经常上网搜索。关于某个 bug 的信息，如何做某件事（有时会是很基础的事情），软件包和软件库的示例代码和文档（如果 DevDocs 没收录），我都会上网搜一搜。</li><li><a href="https://developer.mozilla.org/en-US" target="_blank" rel="noreferrer">MDN</a> —— 对任何 web 开发者来说这都是非常棒的资源。这个站点的部分内容可以在之前提到的 DevDocs 上找到，不过有些页面只有 MDN 上有。我主要用它查询一些关于可访问性的内容，上面有不少讨论这一主题的文章。</li><li><a href="https://stackoverflow.com/" target="_blank" rel="noreferrer">StackOverflow</a> —— 经常 google 到上面的内容。如果有问题，多半能在上面找到答案。</li><li><a href="https://github.com/" target="_blank" rel="noreferrer">GitHub</a> —— 某个软件包我有疑问，或者想知道关于它的更多信息，我会到它的 GitHub 仓库去翻 issue 和代码，通常能找到问题的答案，就像 StackOverflow。据我个人的经验，如果有关于某个特定软件包的问题，在 GitHub 上翻到相关 issue 的几率要高于在 StackOverflow 上找到相关问题（像 React 这类特别流行的库例外）。当然，我也使用 GitHub 的版本控制功能。</li></ul><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h2><ul><li><a href="https://css-tricks.com/" target="_blank" rel="noreferrer">CSS-Tricks</a> —— 你能在上面找到大量有趣的文章和窍门。这个网站上也有一个指南（Guides）栏目，包含关于特定 HTML、CSS、JS 概念的深入讲解。我常常访问这个站点更新关于网格布局的知识。不过其他指南也非常棒。这个站点绝对值得一看。</li><li><a href="https://tympanus.net/codrops/css_reference/" target="_blank" rel="noreferrer">CSS Reference</a> —— 如果需要更新 CSS 知识或者查下不熟悉、不常用的属性，我会访问这个站点。上面对每个 CSS 属性的讲解很深入，给出的示例也很清楚，便于你理解这些属性并应用于自己的项目。站点的作者是 <a href="https://www.sarasoueidan.com/" target="_blank" rel="noreferrer">Sara Soudain</a>。</li><li><a href="https://caniuse.com/" target="_blank" rel="noreferrer">Can I Use</a> —— 如果你在意浏览器兼容性，希望负责任地使用前沿特性（渐进增强），那么这是不可或缺的工具。</li></ul><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><ul><li><a href="https://jakearchibald.github.io/svgomg/" target="_blank" rel="noreferrer">SVGOMG</a> —— 从设计师那里收到一份为 web 优化的 SVG 文件，这种事情实在太罕见。所以我会用 SVGOMG 优化 SVG，效果十分惊人。这是 <a href="https://github.com/svg/svgo" target="_blank" rel="noreferrer">SVGO</a> 的网页版，所以你也可以使用相应的命令行工具压缩 SVG。</li><li><a href="https://shrinkme.app/" target="_blank" rel="noreferrer">Shrinkme.app</a> —— 使用这个网页应用优化图像文件十分快捷方便。开箱即用，支持批量上传，效果相当不错。</li><li><a href="https://squoosh.app/" target="_blank" rel="noreferrer">Sqoosh</a> —— 需要将图片压缩到极致，或者创建 webp 格式的图像文件的时候，我会使用这个网站。你可以用它提供的大量选项调出满意的效果。你也可以用它缩放图像或是转换图像格式。它用了很多前沿技术（当初 Google Chrome 团队做这个工具是为了演示现代浏览器的功能），所以你需要使用 Chrome 或基于 Chromium 的浏览器（Opera、Brave 等）。我上次试过，在 Firefox 下这个站点并不能正常工作。</li><li><a href="https://icomoon.io/app/%23/select" target="_blank" rel="noreferrer">Icomoon app</a> —— 我需要创建定制图标集时会用这个工具。可以选择现有图标（免费图标和付费图标），也可以上传自己的图标。接着就可以生成相应的图标字体或 SVG 图标文件（今时今日，后者是一个更好的选择）。</li><li><a href="https://fonts.google.com/" target="_blank" rel="noreferrer">Google Fonts</a> —— 需要创建定制 web 字体时，我会首先访问 Google Fonts。我通常会下载所需文件，然后自行托管，这样性能更好。Google Fonts 有一个很棒的特性，允许只编码需要用到的字符。</li><li><a href="https://github.com/filamentgroup/glyphhanger" target="_blank" rel="noreferrer">Glyphhanger</a> —— 减少文件大小是提升网站性能的最佳途径之一。Web 字体经常包含很多我们不需要的字形，所以我会用 <a href="https://github.com/filamentgroup/glyphhanger" target="_blank" rel="noreferrer">Glyphhanger</a> 子集化字体。你可以指定需要的 Unicode 区段和字符，Glyphanger 会创建一个只包含相应字符的字体文件。它也可以将 <code>.ttf</code> 文件转为其他更适合 web 的格式，比如 <code>.woff</code> 和 <code>.woff2</code>。需要花一点功夫正确使用这个工具，不过我觉得存在字体性能问题时，这是一个值得考虑的选项。</li><li><a href="https://github.com/GoogleChrome/lighthouse" target="_blank" rel="noreferrer">Lighthouse</a> —— 我在发布网页前会进行测试，Chrome 浏览器的 Lighthouse 是最常用的工具之一。它会检查各方面的常见问题并给出评分，也会给出改进提示。这是一个非常好的工具，可以初步检查我在开发时是否遗漏了一些问题。</li><li><a href="https://meowni.ca/font-style-matcher" target="_blank" rel="noreferrer">Font style matcher</a> —— 定制字体加载后会切换字体，如果你希望这个切换不容易察觉，那么可以使用这个字体风格匹配器找到和定制字体类似的默认字体。</li></ul><h2 id="可访问性" tabindex="-1">可访问性 <a class="header-anchor" href="#可访问性" aria-label="Permalink to &quot;可访问性&quot;">​</a></h2><ul><li>VoiceOver —— macOS 的默认屏幕阅读器。需要花一点时间熟悉这个工具（我推荐<a href="https://webaim.org/articles/voiceover" target="_blank" rel="noreferrer">这篇介绍文章</a>），不过我努力在开发过程中时不时用下 VoiceOver。多亏这一点，我的项目中 aria 属性和面向屏幕阅读器的文本使用量大增。使用 VoiceOver 后你会惊讶地发现一些日常使用的网页组件为屏幕阅读器用户提供的上下文信息少得可怜。</li><li><a href="https://a11yproject.com/patterns" target="_blank" rel="noreferrer">a11y guidelines</a> —— 通常我会尽量去找可访问性良好的解决方案，不过有的时候还是不得不自己动手，这时我会参考这个页面。这篇可访问性指导原则详细解释了什么是可访问性，为什么可访问性很重要，如何实现。很多情况下，复制其中的示例代码略作调整后即可应用于实际项目。</li><li><a href="https://www.w3.org/TR/wai-aria-1.1" target="_blank" rel="noreferrer">WAI-ARIA specification</a> —— 我并不经常阅读规范。如果我在读规范，那么往往是在读这一篇。其中包含大量关于如何使用 aria 角色和属性的有价值信息。要我说，任何严肃对待可访问性的开发者，都需要读下这篇规范。</li></ul><h2 id="值得一提" tabindex="-1">值得一提 <a class="header-anchor" href="#值得一提" aria-label="Permalink to &quot;值得一提&quot;">​</a></h2><p>最后列下个人觉得挺好用但又没那么常用的工具。</p><ul><li><a href="https://responsivebreakpoints.com/" target="_blank" rel="noreferrer">Responsive breakpoints generator</a> —— 手动创建响应式图像的多种变体很痛苦。用这个工具就很方便。</li><li><a href="https://www.toptal.com/designers/htmlarrows" target="_blank" rel="noreferrer">HTML Arrows</a> —— 各种符号的 Unicode 码、HTML 十六进制编码、HTML 实体编码、HTML 实体。</li><li><a href="https://dev.w3.org/html5/html-author/charref" target="_blank" rel="noreferrer">Char reference</a> —— 类似上一个工具，但显示的信息更少，主要显示 HTML 实体。</li><li><a href="https://www.typewolf.com/cheatsheet" target="_blank" rel="noreferrer">Typography cheatsheet</a> —— 讲解常用的字体排印规则和问题。</li><li><a href="https://www.modularscale.com/" target="_blank" rel="noreferrer">Modular scale</a> —— 设计网页时我通常使用这个工具选择模块化的缩放方案。如有兴趣了解更多关于这个主题的内容，请参考 <a href="https://alistapart.com/article/more-meaningful-typography/" target="_blank" rel="noreferrer">A List Appart 上的这篇文章</a> 和 <a href="https://vimeo.com/17079380" target="_blank" rel="noreferrer">Tim Brown 在 Build Conf 2010 上的演讲</a>。</li><li><a href="https://cssgradient.io/" target="_blank" rel="noreferrer">CSS gradient generetor</a> —— 创建渐变背景的在线工具。</li><li><a href="https://brumm.af/shadows" target="_blank" rel="noreferrer">Smooth shadow generator</a> —— 为网站添加美观的阴影。</li><li><a href="https://cubic-bezier.com/" target="_blank" rel="noreferrer">Bezier curve generator</a> —— 定制 CSS 的立方贝塞尔曲线定时函数。</li><li><a href="https://easings.net/en" target="_blank" rel="noreferrer">Easing functions</a> —— 各种缓动函数，可用于 CSS 动画和变换。</li><li><a href="https://ngrok.com/" target="_blank" rel="noreferrer">ngrok</a> —— 需要向别人展示作品或者测试不同设备上的效果时，我会使用 ngrok。ngrok 可以将本地运行的服务暴露到公网上。不过有的时候配合 Browserstack 的 localhost 扩展时不能工作。</li><li><a href="https://sharingbuttons.io/" target="_blank" rel="noreferrer">sharing buttons</a> —— 如果你只需要一个简单的分享按钮，不想用 JS，不想折腾追踪用户的复杂逻辑，那么这个工具特别好用。</li><li><a href="https://dencode.com/en/date" target="_blank" rel="noreferrer">Unix timestamp converter</a> —— unix 时间戳转换器。</li><li><a href="https://css2js.dotenv.dev/" target="_blank" rel="noreferrer">CSS to JS converter</a> —— 可以将 CSS 转成 JS，也可以将 JS 转回 CSS。基于 CSS-in-JS 库开发时这个工具十分方便。</li><li><a href="https://browserdefaultstyles.com/" target="_blank" rel="noreferrer">Browser default styles</a> —— 常见浏览器的默认样式。</li></ul>',95)]))}const u=a(s,[["render",i]]);export{f as __pageData,u as default};
