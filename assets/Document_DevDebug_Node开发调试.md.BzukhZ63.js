import{_ as n,c as s,o as a,ah as o}from"./chunks/framework.DqD713j2.js";const l="/FrontEndLearnNotes/assets/chrome-inspect.CRkRNT-n.jpg",_=JSON.parse('{"title":"Node开发调试","description":"","frontmatter":{},"headers":[],"relativePath":"Document/DevDebug/Node开发调试.md","filePath":"Document/DevDebug/Node开发调试.md","lastUpdated":1750954157000}'),t={name:"Document/DevDebug/Node开发调试.md"};function p(i,e,c,r,d,m){return a(),s("div",null,e[0]||(e[0]=[o(`<h1 id="node开发调试" tabindex="-1">Node开发调试 <a class="header-anchor" href="#node开发调试" aria-label="Permalink to &quot;Node开发调试&quot;">​</a></h1><p>Node.js 如何查看内存泄漏（英文）：<a href="https://blog.appsignal.com/2022/09/28/minimize-heap-allocations-in-nodejs.html" target="_blank" rel="noreferrer">https://blog.appsignal.com/2022/09/28/minimize-heap-allocations-in-nodejs.html</a></p><h2 id="inspect-调试法" tabindex="-1">inspect 调试法 <a class="header-anchor" href="#inspect-调试法" aria-label="Permalink to &quot;inspect 调试法&quot;">​</a></h2><ul><li><p>1.修改package.json文件的<code>scrtips</code> 脚本命令，增加 <code>--inspect</code>，启动服务</p><ul><li><p>1.1 package.json文件：nodemon是运行的依赖库，需要安装</p></li><li><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;script&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;dev&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;nodemon --inspect=9229 index.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>1.2 开始执行命令运行：<code>npm run dev</code></p></li></ul></li><li><p>2.打开 chrome浏览器，访问：chrome://inspect</p><ul><li>打开后如下：</li><li><img src="`+l+'" alt="chrome-inspect"></li><li>点击跳转后便开始监听的Node服务</li></ul></li><li><p>3.回到Node代码中，增加 <code>debugger</code> 断点代码</p></li><li><p>4.重启服务，回到chrome浏览器，即可调试源码</p></li></ul>',4)]))}const h=n(t,[["render",p]]);export{_ as __pageData,h as default};
