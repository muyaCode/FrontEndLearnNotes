import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"ECMAScript-12(ES2021)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-12(ES2021).md","filePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-12(ES2021).md","lastUpdated":1750954157000}'),e={name:"Document/JavaScript笔记/ECMAScript语法/ECMAScript-12(ES2021).md"};function o(r,s,c,t,i,B){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ecmascript-12-es2021" tabindex="-1">ECMAScript-12(ES2021) <a class="header-anchor" href="#ecmascript-12-es2021" aria-label="Permalink to &quot;ECMAScript-12(ES2021)&quot;">​</a></h1><h2 id="提案" tabindex="-1">提案 <a class="header-anchor" href="#提案" aria-label="Permalink to &quot;提案&quot;">​</a></h2><h2 id="es-2021-es12-新增了如下新特性👇" tabindex="-1">ES 2021（ES12）新增了如下新特性👇 <a class="header-anchor" href="#es-2021-es12-新增了如下新特性👇" aria-label="Permalink to &quot;ES 2021（ES12）新增了如下新特性👇&quot;">​</a></h2><ul><li>逻辑运算符和赋值表达式（&amp;&amp;=，||=，??=）</li><li><code>String.prototype.replaceAll()</code></li><li>数字分隔符</li><li><code>Promise.any</code></li></ul><h2 id="string-prototype-replaceall" tabindex="-1">String.prototype.replaceAll() <a class="header-anchor" href="#string-prototype-replaceall" aria-label="Permalink to &quot;String.prototype.replaceAll()&quot;">​</a></h2><p><code>replaceAll()</code> 方法返回一个新字符串，新字符串中所有满足 <code>pattern</code> 的部分都会被<code>replacement</code> 替换。<code>pattern</code>可以是一个字符串或一个<code>RegExp</code>，<code>replacement</code>可以是一个字符串或一个在每次匹配被调用的函数。</p><p>原始字符串保持不变。</p><ul><li>pattern 可以是一个字符串或 RegExp；</li><li>replacement 可以是一个字符串或一个在每次被匹配被调用的函数。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&#39;aabbcc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// &#39;aa..cc&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用正则表达式搜索值时，必须是全局的：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 运行报错：</span></span>
<span class="line"><span style="color:#98C379;">&#39;aabbcc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceAll</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/b/</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// TypeError: replaceAll must be called with a global RegExp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 正常运行</span></span>
<span class="line"><span style="color:#98C379;">&#39;aabbcc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceAll</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/b/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// &quot;aa..cc&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="数字分隔符" tabindex="-1">数字分隔符 <a class="header-anchor" href="#数字分隔符" aria-label="Permalink to &quot;数字分隔符&quot;">​</a></h2><p>欧美语言中，较长的数值允许每三位添加一个分隔符（通常是一个逗号），增加数值的可读性。比如，<code>1000</code>可以写作<code>1,000</code>。</p><p><code>ES2021</code>中允许 JavaScript 的数值使用下划线（<code>_</code>）作为分隔符。但是没有规定间隔的位数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> budget</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1_000_000_000_000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">budget</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 10</span><span style="color:#56B6C2;"> **</span><span style="color:#D19A66;"> 12</span><span style="color:#7F848E;font-style:italic;"> // true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这个数值分隔符没有指定间隔的位数，也就是说，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">123_00</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 12_300</span><span style="color:#7F848E;font-style:italic;"> // true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">12345_00</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 123_4500</span><span style="color:#7F848E;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#D19A66;">12345_00</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1_234_500</span><span style="color:#7F848E;font-style:italic;"> // true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>小数和科学记数法也可以使用分隔符：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 小数</span></span>
<span class="line"><span style="color:#D19A66;">0.000_001</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 科学计数法</span></span>
<span class="line"><span style="color:#D19A66;">1e10_000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>⚠️ 注意点：</p><ul><li>不能放在数值的最前面（leading）或最后面（trailing）。</li><li>不能两个或两个以上的分隔符连在一起。</li><li>小数点的前后不能有分隔符。</li><li>科学计数法里面，表示指数的<code>e</code>或<code>E</code>前后不能有分隔符。</li></ul><p>下面的写法都会报错。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 全部报错</span></span>
<span class="line"><span style="color:#D19A66;">3_.141</span></span>
<span class="line"><span style="color:#ABB2BF;">3.</span><span style="color:#E06C75;">_141</span></span>
<span class="line"><span style="color:#D19A66;">1_e12</span></span>
<span class="line"><span style="color:#ABB2BF;">1</span><span style="color:#E06C75;">e_12</span></span>
<span class="line"><span style="color:#D19A66;">123__456</span></span>
<span class="line"><span style="color:#E06C75;">_1464301</span></span>
<span class="line"><span style="color:#D19A66;">1464301_</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="promise-any" tabindex="-1">Promise.any <a class="header-anchor" href="#promise-any" aria-label="Permalink to &quot;Promise.any&quot;">​</a></h2><p>Promise.any() 接收一个Promise可迭代对象，只要其中的一个 promise 成功，就返回那个已经成功的 promise 。</p><p>如果可迭代对象中没有一个 promise 成功（即所有的 promises 都失败/拒绝），就返回一个失败的 promise</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> promise1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我是失败的Promise_1&#39;</span><span style="color:#ABB2BF;">)); </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> promise2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我是失败的Promise_2&#39;</span><span style="color:#ABB2BF;">)); </span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> promiseList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">promise1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">promise2</span><span style="color:#ABB2BF;">]; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">any</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">promiseList</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;font-style:italic;">values</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {  </span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">values</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {  </span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。</p><p>只要参数实例有一个变成 fulfilled 状态，包装实例就会变成 fulfilled 状态；如果所有参数实例都变成 rejected 状态，包装实例就会变成 rejected 状态。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> promise1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;promise1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //  reject(&quot;error promise1 &quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> promise2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;promise2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // reject(&quot;error promise2 &quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> promise3</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;promise3&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // reject(&quot;error promise3 &quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">any</span><span style="color:#ABB2BF;">([</span><span style="color:#61AFEF;">promise1</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">promise2</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">promise3</span><span style="color:#ABB2BF;">()])</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">first</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 只要有一个请求成功 就会返回第一个请求成功的</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 会返回promise2</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 所有三个全部请求失败 才会来到这里</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">any</span><span style="color:#ABB2BF;">([</span><span style="color:#61AFEF;">promise1</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">promise2</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">promise3</span><span style="color:#ABB2BF;">()])</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">first</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 只要有一个请求成功 就会返回第一个请求成功的</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 会返回promise2</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 所有三个全部请求失败 才会来到这里</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h2 id="structuredclone-深拷贝" tabindex="-1">structuredClone() 深拷贝 <a class="header-anchor" href="#structuredclone-深拷贝" aria-label="Permalink to &quot;structuredClone() 深拷贝&quot;">​</a></h2><p>MDN文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/structuredClone" target="_blank" rel="noreferrer">structuredClone() - Web API | MDN (mozilla.org)</a></p><p>ECMAScript 2021提供了<code>structuredClone()</code>，这是一个用于深拷贝的内置函数。</p><p>所有的浏览器都已经在他们的最新版本中实现了这个API，Firefox已经在Firefox 94中把它发布到了稳定版。此外，Node 17和Deno 1.14也实现了这个API。你现在就可以开始使用这个功能了，而且不会觉得有什么问题。</p><h2 id="weakref-and" tabindex="-1">WeakRef and <a class="header-anchor" href="#weakref-and" aria-label="Permalink to &quot;WeakRef and&quot;">​</a></h2><p>使用WeakRefs的Class类创建对对象的弱引用(对对象的弱引用是指当该对象应该被GC回收时不会阻止GC的回收行为)</p><p>MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakRef" target="_blank" rel="noreferrer">WeakRef</a></p><h2 id="finalizers" tabindex="-1">Finalizers <a class="header-anchor" href="#finalizers" aria-label="Permalink to &quot;Finalizers&quot;">​</a></h2><p>MDN：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry" target="_blank" rel="noreferrer">FinalizationRegistry</a></p><h2 id="逻辑运算符和赋值表达式" tabindex="-1">逻辑运算符和赋值表达式（&amp;&amp;=，||=，??=） <a class="header-anchor" href="#逻辑运算符和赋值表达式" aria-label="Permalink to &quot;逻辑运算符和赋值表达式（&amp;&amp;=，||=，??=）&quot;">​</a></h2><p>逻辑运算符和赋值表达式，新特性结合了逻辑运算符（&amp;&amp;，||，??）和赋值表达式而JavaScript已存在的 复合赋值运算符有：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ||=</span><span style="color:#E06C75;"> b</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等价于</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> &amp;&amp;=</span><span style="color:#E06C75;"> b</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等价于</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ??=</span><span style="color:#E06C75;"> b</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等价于</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> ??</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>s数字分隔符，可以在数字之间创建可视化分隔符，通过_下划线来分割数字，使数字更具可读性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> money</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1_000_000_000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等价于</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> money</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1000000000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">1_000_000_000</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1000000000</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="" tabindex="-1">&amp;&amp;= <a class="header-anchor" href="#" aria-label="Permalink to &quot;&amp;&amp;=&quot;">​</a></h3><p>逻辑与赋值运算符 <code>x &amp;&amp;= y</code> 等价于 <code>x &amp;&amp; (x=y)</code>：意思是当 x 为真时，x = y。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> &amp;&amp;=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> &amp;&amp;=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="-1" tabindex="-1">||= <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;||=&quot;">​</a></h3><p>逻辑或赋值运算符 <code>x ||= y</code> 等价于 <code>x || (x = y)</code>：意思是仅在 x 为 false 的时候，x = y。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">duration</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">duration</span><span style="color:#56B6C2;"> ||=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">duration</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 50</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;"> ||=</span><span style="color:#98C379;"> &#39;title is empty.&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// &quot;title is empty&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="-2" tabindex="-1">??= <a class="header-anchor" href="#-2" aria-label="Permalink to &quot;??=&quot;">​</a></h3><p>逻辑空赋值运算符 <code>x ??= y</code> 等价于 <code>x ?? (x = y)</code>：意思是仅在 x 为 null 或 undefined 的时候，x = y。</p><p><strong>示例一</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">duration</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">duration</span><span style="color:#56B6C2;"> ??=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">duration</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 50</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">speed</span><span style="color:#56B6C2;"> ??=</span><span style="color:#D19A66;"> 25</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">speed</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 25</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>示例二</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> config</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">duration</span><span style="color:#56B6C2;"> ??=</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">speed</span><span style="color:#56B6C2;"> ??=</span><span style="color:#D19A66;"> 25</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">config</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">duration</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">125</span><span style="color:#ABB2BF;"> }); </span><span style="color:#7F848E;font-style:italic;">// { duration: 125, speed: 25 }</span></span>
<span class="line"><span style="color:#61AFEF;">config</span><span style="color:#ABB2BF;">({}); </span><span style="color:#7F848E;font-style:italic;">// { duration: 100, speed: 25 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,56)]))}const F=n(e,[["render",o]]);export{b as __pageData,F as default};
