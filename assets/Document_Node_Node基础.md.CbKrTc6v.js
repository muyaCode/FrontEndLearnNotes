import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"Node 基础","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node/Node基础.md","filePath":"Document/Node/Node基础.md","lastUpdated":1750954157000}'),e={name:"Document/Node/Node基础.md"};function o(r,s,t,c,B,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="node-基础" tabindex="-1">Node 基础 <a class="header-anchor" href="#node-基础" aria-label="Permalink to &quot;Node 基础&quot;">​</a></h1><h2 id="node-学习指引" tabindex="-1">Node 学习指引 <a class="header-anchor" href="#node-学习指引" aria-label="Permalink to &quot;Node 学习指引&quot;">​</a></h2><p><strong>官方网站：</strong></p><p>Node 开源地址 GitHub：<a href="https://github.com/nodejs/node" target="_blank" rel="noreferrer">https://github.com/nodejs/node</a></p><p>Node 官网：<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noreferrer">Node.js</a></p><p>官网中文 API 文档(点击进相应的版本)：<a href="https://nodejs.org/zh-cn/docs/" target="_blank" rel="noreferrer">Docs | Node.js</a></p><p><strong>中文网：</strong></p><p><a href="http://nodejs.p2hp.com/" target="_blank" rel="noreferrer">Node.Js 中文网 (p2hp.com)</a></p><p><a href="https://www.nodeapp.cn/" target="_blank" rel="noreferrer">Node.js v8.x 中文文档 | Node.js 中文网 (nodeapp.cn)</a></p><p><a href="http://caibaojian.com/nodejs/api/documentation.html" target="_blank" rel="noreferrer">Node.js v10.8.0 文档</a></p><p><strong>收费中文网文档</strong>：<a href="http://nodejs.cn/api/" target="_blank" rel="noreferrer">API 文档 | Node.js 中文网 (nodejs.cn)</a></p><p>第三方英文和中文 API 文档：<a href="https://nodejs.bootcss.com/api/documentation" target="_blank" rel="noreferrer">https://nodejs.bootcss.com/api/documentation</a></p><p><strong>学习教程：</strong></p><p>编程之家 Node 文档教程：<a href="https://www.jb51.cc/nodejs-tutorial/" target="_blank" rel="noreferrer">https://www.jb51.cc/nodejs-tutorial/</a></p><p>廖雪峰教程：<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528" target="_blank" rel="noreferrer">安装 Node.js 和 npm - 廖雪峰的官方网站</a></p><p>菜鸟教程 Node 文档：<a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noreferrer">Node.js 教程 | 菜鸟教程</a></p><p>W3C 文档：<a href="https://www.w3cschool.cn/nodejs/" target="_blank" rel="noreferrer">Node.js 教程_w3cschool</a></p><p>W3C 文档 2：<a href="https://www.w3cschool.cn/nodejsdoc/" target="_blank" rel="noreferrer">Node.js 教程 23_w3cschool</a></p><h2 id="一、内置对象介绍" tabindex="-1">一、内置对象介绍 <a class="header-anchor" href="#一、内置对象介绍" aria-label="Permalink to &quot;一、内置对象介绍&quot;">​</a></h2><h3 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h3><ul><li>全局对象：何时何处都能访问</li><li>核心对象：向系统索要，引入即可使用</li><li>自定义对象：按路径引入即可</li></ul><h3 id="_1-global-全局对象" tabindex="-1">1.global 全局对象 <a class="header-anchor" href="#_1-global-全局对象" aria-label="Permalink to &quot;1.global 全局对象&quot;">​</a></h3><p>global 中的属性，叫全局属性;</p><p>在 Node 中不同于浏览器，Node 中没有 window 对象，但有 global 全局对象，在 Node 代码中，最外层输出</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> global</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// global调用函数</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// 打印全局属性</span></span>
<span class="line"><span style="color:#ABB2BF;">})()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印出</span></span>
<span class="line"><span style="color:#E06C75;">process</span><span style="color:#E06C75;"> 进程</span><span style="color:#E06C75;"> 开启很多个线程</span></span>
<span class="line"><span style="color:#E06C75;">Buffer</span><span style="color:#E06C75;"> 缓存区</span><span style="color:#E06C75;"> 我们node</span><span style="color:#E06C75;"> 读取文件</span><span style="color:#E06C75;"> 内存中的数据</span><span style="color:#E06C75;"> 都是二进制</span><span style="color:#E06C75;"> 数据16进制</span></span>
<span class="line"><span style="color:#E06C75;">clearInterval</span><span style="color:#E06C75;">  setInterval</span></span>
<span class="line"><span style="color:#E06C75;">clearTimeout</span><span style="color:#E06C75;">  setTimeout</span></span>
<span class="line"><span style="color:#E06C75;">clearImmediate</span><span style="color:#E06C75;">  setImmediate</span><span style="color:#E06C75;"> 宏任务</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2-process-进程-全局对象" tabindex="-1">2.process - 进程（全局对象） <a class="header-anchor" href="#_2-process-进程-全局对象" aria-label="Permalink to &quot;2.process - 进程（全局对象）&quot;">​</a></h3><p>文档：<a href="https://www.nodeapp.cn/process.html#process_process" target="_blank" rel="noreferrer">进程 | Node.js 中文文档 | Node.js 中文网 (nodeapp.cn)</a></p><p>可以在 Node 中打印 process，看看都有什么属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">process</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>每个系统的环境变量几乎都不一样，可以利用环境变量中的具体某个特定的值来区分不同的机器</p></li><li><p>1.<code>process.env</code> (获取环境变量)：是一个对象，我们可以通过其.属性名来获取具体的<strong>环境变量值</strong></p><ul><li><p>文档：<a href="https://www.nodeapp.cn/process.html#process_process_env" target="_blank" rel="noreferrer">进程 | Node.js 中文文档 | Node.js 中文网 (nodeapp.cn)</a></p></li><li><p>1.在 windows 系统环境变量设置：变量名：<code>MY_TEST</code>，变量值：liulaoshi</p></li><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 1.在项目当前目录下设置环境变量</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 开发的时候 localhost / www.xxx.cn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 2.临时的变量 export / set =&gt; cross-env</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 命令行中输出临时变量</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#E06C75;"> MY_TEST</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">liulaoshi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 3.放到系统的环境变量中 计算 -》系统 -》 环境变量</span></span>
<span class="line"><span style="color:#61AFEF;">Windows系统中：计算机</span><span style="color:#98C379;"> —</span><span style="color:#ABB2BF;">—&gt; </span><span style="color:#98C379;">系统</span><span style="color:#98C379;"> —</span><span style="color:#ABB2BF;">—&gt; </span><span style="color:#98C379;">环境变量设置</span></span>
<span class="line"><span style="color:#61AFEF;">Mac系统中，使用命令行输出：cat</span><span style="color:#98C379;"> ~/.bash_profile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>2.获取系统变量</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// 解析出一个绝对路径，和下面的一样功能</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cwd</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// 在哪里执行这个文件 ,目录就是哪里 代表的就是执行的文件的目录</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> stuOrTeacher</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">MY_TEST</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stuOrTeacher</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断是否等于 liulaoshi</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">stuOrTeacher</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;liulaoshi&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;教师端&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;学生端&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>运行命令：<code>node js文件名</code></p></li><li><p>以达到简单区分不同的机器，从而针对生产/开发环境运行不同的效果</p></li></ul></li><li><p>2.<code>process.argv</code>：获取命令行参数（实现命令行工具）</p><ul><li><p>文档：<a href="https://www.nodeapp.cn/process.html#process_process_argv" target="_blank" rel="noreferrer">进程 | Node.js 中文文档 | Node.js 中文网 (nodeapp.cn)</a></p></li><li><p>命令行加法计算器：</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 最简单的需求，命令行加法计算器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// process.argv =&gt; 返回对应数组的索引所属的值：[node绝对路径，文件的绝对路径 ,1, 3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取用户传递的命令行参数数组，数组的2,3索引对应的元素</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> num1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> process</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 索引值2之后才是命令行输入的值</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> num2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// parseInt也ok</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> num1</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> num2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出（卡顿输出）（定时输出）</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;计算中.....&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2秒后输出</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;结果为:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> sum</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p><code>commander</code> 库：命令行的管家 帮你提供 <code>--help</code> 等命令的自定义配置：</p><ul><li><p>GitHub：<a href="https://github.com/tj/commander.js" target="_blank" rel="noreferrer">tj/commander.js: node.js command-line interfaces made easy (github.com)</a></p></li><li><p>NPM：<a href="https://www.npmjs.com/package/commander" target="_blank" rel="noreferrer">commander - npm (npmjs.com)</a></p></li></ul></li><li><p><code>chalk</code> 库：命令行的颜色库(粉笔)</p><ul><li>GitHub：<a href="https://github.com/chalk/chalk" target="_blank" rel="noreferrer">chalk/chalk: 🖍 Terminal string styling done right (github.com)</a></li><li>NPM：<a href="https://www.npmjs.com/package/chalk" target="_blank" rel="noreferrer">chalk - npm (npmjs.com)</a></li></ul></li></ul></li></ul><h3 id="_3-全局对象-module、exports、require、-dirname、-filename" tabindex="-1">3.全局对象：<code>module</code>、<code>exports</code>、<code>require</code>、<code>__dirname</code>、<code>__filename</code> <a class="header-anchor" href="#_3-全局对象-module、exports、require、-dirname、-filename" aria-label="Permalink to &quot;3.全局对象：\`module\`、\`exports\`、\`require\`、\`__dirname\`、\`__filename\`&quot;">​</a></h3><h4 id="module、exports、require-导入导出对象" tabindex="-1"><code>module</code>、<code>exports</code>、<code>require</code> 导入导出对象 <a class="header-anchor" href="#module、exports、require-导入导出对象" aria-label="Permalink to &quot;\`module\`、\`exports\`、\`require\` 导入导出对象&quot;">​</a></h4><p>待定</p><h4 id="filename-dirname-文件路径对象-全局对象" tabindex="-1"><code>__filename</code>/<code>__dirname</code> - 文件路径对象（全局对象） <a class="header-anchor" href="#filename-dirname-文件路径对象-全局对象" aria-label="Permalink to &quot;\`__filename\`/\`__dirname\` - 文件路径对象（全局对象）&quot;">​</a></h4><ul><li><code>__filename</code>：获取当前运行文件的目录，绝对路径</li><li><code>__dirname</code>：当前运行文件的绝对路径</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;===================================================&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__filename</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="nodejs-实现规范" tabindex="-1">nodejs 实现规范 <a class="header-anchor" href="#nodejs-实现规范" aria-label="Permalink to &quot;nodejs 实现规范&quot;">​</a></h3><ul><li><code>CommonJS</code>： 规范 JavaScript 语言作为后端语言运行的标准 <ul><li>具备什么能力，该怎么做 ，比如： 具备服务器的功能/ 可以操作文件 .....</li><li>模块应该怎么写： Module： <ul><li>1：依赖一个模块：<code>require(&#39;模块名(id)&#39;)</code></li><li>2： 需要被模块依赖：<code>module.exports = 给外部的数据</code></li><li>3：一个文件是一个模块</li></ul></li></ul></li></ul><h3 id="核心对象-path-路径" tabindex="-1">核心对象 path - 路径 <a class="header-anchor" href="#核心对象-path-路径" aria-label="Permalink to &quot;核心对象 path - 路径&quot;">​</a></h3><p>文档：<a href="https://www.nodeapp.cn/path.html" target="_blank" rel="noreferrer">路径（Path） | Node.js 中文文档 | Node.js 中文网 (nodeapp.cn)</a></p><ul><li><p>1：<code>const path = require(&#39;path&#39;);</code></p></li><li><p>路径 -&gt; 在处理路径的时候很擅长，但是，其不负责判断路径是否存在文件</p></li><li><p>拼接并修正路径 <code>path.join(__dirname，&#39;a&#39;，&#39;b&#39;);</code> 以当前目录/a/b</p></li><li><p><code>path.resovle(&#39;./xxx&#39;) 相对转绝对</code></p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 引入核心对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// path没有写路径(核心对象)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// path在node.exe里面</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3段路径来自不同用户的输入</span><span style="color:#7F848E;font-style:italic;">    //one//    two</span><span style="color:#7F848E;font-style:italic;">      ///three</span><span style="color:#7F848E;font-style:italic;"> ///</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myPath</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;//one//&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;//two//&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;//three///&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(myPath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 根据相对路径，返回绝对路径</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对程序说 ./xxx.js 非要一个绝对路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;.///abc////efg.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> temp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> temp2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cwd</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">temp</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 输出绝对路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// 输出绝对路径</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cwd</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// 在哪里执行这个文件，目录就是哪里 代表的就是执行的文件的目录</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p>接收一个合法的路径字符串，转换成一个对象</p><ul><li><code>let pathObj = path.parse(mypath);</code></li></ul></li><li><p>接收一个路径对象，转换成一个字符串路径</p><ul><li><code>let str = path.format(pathObj);</code></li></ul></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 接受一段字符串路径</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myPath</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;jack&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;rose&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;mick.txt&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解析这个路径为对象，更易于操作</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> pathObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myPath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(pathObj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// base可以作为修改文件名，或后缀的方式</span></span>
<span class="line"><span style="color:#E5C07B;">pathObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;mick_die.good&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 接收路径对象，转换成路径字符串</span></span>
<span class="line"><span style="color:#E06C75;">myPath</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pathObj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myPath</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><p>文件内容：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  root</span><span style="color:#ABB2BF;">： </span><span style="color:#98C379;">&#39;C：</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">，</span></span>
<span class="line"><span style="color:#E06C75;">  dir</span><span style="color:#ABB2BF;">： </span><span style="color:#98C379;">&#39;C：</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">Users</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">孙悟空&#39;</span><span style="color:#ABB2BF;">，</span></span>
<span class="line"><span style="color:#E06C75;">  base</span><span style="color:#ABB2BF;">： </span><span style="color:#98C379;">&#39;金箍棒.txt&#39;</span><span style="color:#ABB2BF;">，   </span><span style="color:#7F848E;font-style:italic;">// 该属性可以用于修改文件名和后缀</span></span>
<span class="line"><span style="color:#E06C75;">  ext</span><span style="color:#ABB2BF;">： </span><span style="color:#98C379;">&#39;.txt&#39;</span><span style="color:#ABB2BF;">，</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">： </span><span style="color:#98C379;">&#39;金箍棒&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><strong>注意：path 对象是方便我们操作路径的，对于获取来讲： parse 解析成对象，format 转换成字符串.join 拼接并修正.... 对于修改路径对象来讲，可以用 base 属性更改，不能用 name，ext 更改</strong></li></ul><h2 id="二、node-模块" tabindex="-1">二、Node 模块 <a class="header-anchor" href="#二、node-模块" aria-label="Permalink to &quot;二、Node 模块&quot;">​</a></h2><ul><li><p>弊端</p><ul><li>在 js 中要涉及到逻辑，还要在 html 中，为逻辑对象考虑引用顺序</li></ul></li><li><p>所有对象默认都是全局对象，命名冲突</p></li></ul><p><strong>commonjs 规范</strong>：</p><ul><li>一个文件就是一个模块 <ul><li>导入用：<code>require(&#39;./xxx.js&#39;);</code></li><li>导出用：<code>module.exports = xxx;</code></li><li>在每一个模块内声明的变量属于模块内的作用域</li></ul></li></ul><h3 id="_1-fs-文件系统模块" tabindex="-1">1.fs - 文件系统模块 <a class="header-anchor" href="#_1-fs-文件系统模块" aria-label="Permalink to &quot;1.fs - 文件系统模块&quot;">​</a></h3><ul><li>文件读写</li><li>其他功能</li><li>扩展介绍</li></ul><h3 id="_2-io-操作文件对象" tabindex="-1">2.IO - 操作文件对象 <a class="header-anchor" href="#_2-io-操作文件对象" aria-label="Permalink to &quot;2.IO - 操作文件对象&quot;">​</a></h3><ul><li><p>IO</p><ul><li>I：input 输入</li><li>O：output 输出</li><li>文件的操作就是 IO</li></ul></li><li><p>复制文件的过程， I： 通过计算机，存储文件到剪切板</p><ul><li>粘贴到指定目录： O： 通过计算机，将剪切板上的数据，写出到 指定目录</li></ul></li><li><p>node 中有两种 IO 的操作</p><ul><li><p>同步 IO</p><ul><li>一行代码(读文件)不执行完毕...后续代码不能执行</li></ul></li><li><p>异步 IO (建议)</p><ul><li>一行代码(读写文件) 不执行完毕(正在读写中) ... 后续代码也可以执行</li></ul></li><li><p>代码体验：</p><ul><li><p>读写文件</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fs&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//必须这个名称</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//读 fs.readFile(路径，回调函数);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//写 fs.writeFile(路径，数据，回调函数);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>总结： 异步的读/写文件 参数 1：都是路径，可以相对可以绝对，最后一个参数都是回调函数，回调函数的参数中错误对象优先</p></li></ul></li></ul></li><li><p>同步和异步 IO 的区别： 同步 IO 会阻塞后续代码执行，异步 IO 不会阻塞后续代码执行</p></li></ul><h3 id="_3-实现一个-require-方法" tabindex="-1">3.实现一个 require 方法 <a class="header-anchor" href="#_3-实现一个-require-方法" aria-label="Permalink to &quot;3.实现一个 require 方法&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;vm&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Module</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}; </span><span style="color:#7F848E;font-style:italic;">// 模块的结果</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrapper</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#98C379;">	&quot;(function(module,exports,require,__filename,_dirname){&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;})&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 文件后缀</span></span>
<span class="line"><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">extensions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">	&quot;.js&quot;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// js需要将exports 传入给用户 用户自己赋值</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> script</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFileSync</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;utf8&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 方法</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> fnstr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrapper</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> script</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">wrapper</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> fn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">runInThisContext</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fnstr</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 让字符串变成js代码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 第一个参数是改变this指向 module moduleexports</span></span>
<span class="line"><span style="color:#E5C07B;">		fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">			module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			module</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			myRequire</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">id</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">			path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dirname</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#98C379;">	&quot;.json&quot;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> script</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFileSync</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;utf8&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给你一个相对路径，解析成绝对路径</span></span>
<span class="line"><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolveFileName</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">filename</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 1.把相对路径转换成绝对路径</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> absPath</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> flag</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">existsSync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">absPath</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 判断文件是否存在，异步方法被废弃</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> absPath</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">flag</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> keys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">extensions</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> keys</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> absPath</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> keys</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> flag</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">existsSync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">flag</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				current</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果没有，说明加了文件后缀还是不存在</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;文件不存在&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(&quot;current绝对路径文件：&quot;, current);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 返回文件路径</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 模块加载</span></span>
<span class="line"><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 模块加载就是读取文件的内容 后缀</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> ext</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extname</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 根据不同的后缀，调用不同的处理方法</span></span>
<span class="line"><span style="color:#E5C07B;">	Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">extensions</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">ext</span><span style="color:#ABB2BF;">](</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现require方法</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> myRequire</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">filename</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolveFileName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 是否有缓存</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果加载过了 那模块肯定缓存好了，那么直接将exports返回即可</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">exports</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> module</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Module</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 实例化一个Module</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 缓存</span></span>
<span class="line"><span style="color:#E5C07B;">	Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> module</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 默认导出module.exports对象</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入a.json</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> json</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> myRequire</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">json</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入b.js</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> bjs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> myRequire</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bjs</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br></div></div><p>文件：a.json</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;age&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>文件：b.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hello&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果在这里加 “//” 注释，运行会报错：evalmachine.&lt;anonymous&gt;:2</span><span style="color:#7F848E;font-style:italic;"> //</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="三、http-核心模块" tabindex="-1">三、http 核心模块 <a class="header-anchor" href="#三、http-核心模块" aria-label="Permalink to &quot;三、http 核心模块&quot;">​</a></h2><h3 id="http-超文本传输协议" tabindex="-1">http 超文本传输协议 <a class="header-anchor" href="#http-超文本传输协议" aria-label="Permalink to &quot;http 超文本传输协议&quot;">​</a></h3><ul><li>协议至少双方 -&gt; http 双方！！</li><li>客户端(浏览器) -&gt; 服务器 <ul><li>原生应用(QQ) -&gt; 服务器</li></ul></li></ul><h3 id="请求与响应交互的过程" tabindex="-1">请求与响应交互的过程 <a class="header-anchor" href="#请求与响应交互的过程" aria-label="Permalink to &quot;请求与响应交互的过程&quot;">​</a></h3><ul><li>见图</li></ul><h3 id="主体对象" tabindex="-1">主体对象 <a class="header-anchor" href="#主体对象" aria-label="Permalink to &quot;主体对象&quot;">​</a></h3><ul><li>服务器对象</li><li>客户端对象</li><li>请求报文对象(对于服务器来说，是可读)</li><li>响应报文对象(对于服务器来说，是可写)</li></ul><h3 id="创建服务器步骤" tabindex="-1">创建服务器步骤 <a class="header-anchor" href="#创建服务器步骤" aria-label="Permalink to &quot;创建服务器步骤&quot;">​</a></h3><ul><li>1：引入 http 核心对象</li><li>2：利用 http 核心对象的.createServer(callback); 创建服务器对象</li><li>3：使用服务器对象.listen(端口，ip 地址) 开启服务器</li><li>4：callback(req，res) 根据请求处理响应</li></ul><h3 id="请求对象" tabindex="-1">请求对象 <a class="header-anchor" href="#请求对象" aria-label="Permalink to &quot;请求对象&quot;">​</a></h3><ul><li>请求首行中的 url <code>req.url</code></li><li>请求首行中的请求方式 <code>req.method</code></li><li>请求头中的数据<code>req.headers</code> 是一个对象</li><li>头信息中，也可以作为与服务器交互的一种途径</li></ul><h3 id="获取请求体数据" tabindex="-1">获取请求体数据 <a class="header-anchor" href="#获取请求体数据" aria-label="Permalink to &quot;获取请求体数据&quot;">​</a></h3><ul><li><p>代码对比</p></li><li><p>浏览器：<code>$(&#39;#xx&#39;).on(&#39;submit&#39;，function(e){ })</code></p></li><li><p>服务器：<code>req.on(&#39;data&#39;，function(d){ d.toString(); })</code></p></li></ul><h3 id="querystring-核心对象" tabindex="-1">querystring 核心对象 <a class="header-anchor" href="#querystring-核心对象" aria-label="Permalink to &quot;querystring 核心对象&quot;">​</a></h3><ul><li><code>querystring.parse(formStr)</code></li><li><code>username=jack&amp;password=123</code> 转换成如下:</li><li><code>{ username: &#39;jack&#39;, password：&#39;123&#39; }</code></li></ul><h3 id="响应对象" tabindex="-1">响应对象 <a class="header-anchor" href="#响应对象" aria-label="Permalink to &quot;响应对象&quot;">​</a></h3><ul><li>响应首行 <code>res.writeHead(状态码)</code></li><li>写响应头 <ul><li>一次性写回头信息 <ul><li><code>res.writeHead(200，headers)</code></li></ul></li><li>多次设置头信息 <ul><li><code>res.setHeader(key，value);</code></li></ul></li></ul></li><li>写响应体 <ul><li>一次性写回响应体 <ul><li><code>res.end();</code></li></ul></li><li>多次写回响应体 <ul><li><code>res.write();</code></li></ul></li></ul></li></ul><h3 id="请求与响应" tabindex="-1">请求与响应 <a class="header-anchor" href="#请求与响应" aria-label="Permalink to &quot;请求与响应&quot;">​</a></h3><ul><li>头行体</li><li>content-type 是对请求或者响应体数据，做出的说明</li></ul><h3 id="响应体数据" tabindex="-1">响应体数据 <a class="header-anchor" href="#响应体数据" aria-label="Permalink to &quot;响应体数据&quot;">​</a></h3><ul><li>res.write(&#39;字符串&#39;||读出文件的二进制数据)</li><li>res.end(&#39;字符串&#39;||读出文件的二进制数)</li></ul><h3 id="回写页面" tabindex="-1">回写页面 <a class="header-anchor" href="#回写页面" aria-label="Permalink to &quot;回写页面&quot;">​</a></h3><ul><li>英雄列表</li><li>art-template http</li><li>只能是访问 get 请求 url： /hero-list 才返回该数据</li><li>其他请求返回 ok</li></ul><h2 id="四、其他模块" tabindex="-1">四、其他模块 <a class="header-anchor" href="#四、其他模块" aria-label="Permalink to &quot;四、其他模块&quot;">​</a></h2><h3 id="events-事件触发器-事件绑定和触发-事件发布和订阅" tabindex="-1">events 事件触发器(事件绑定和触发：事件发布和订阅) <a class="header-anchor" href="#events-事件触发器-事件绑定和触发-事件发布和订阅" aria-label="Permalink to &quot;events 事件触发器(事件绑定和触发：事件发布和订阅)&quot;">​</a></h3><p>文档：<a href="https://nodejs.cn/api/events.html" target="_blank" rel="noreferrer">events 事件触发器 | Node.js API 文档 (nodejs.cn)</a></p><p>各个事件的通信</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 发布订阅模块 pub / sub</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> EventEmitter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;events&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> util</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&#39;util&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Girl</span><span style="color:#ABB2BF;"> (){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">util</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">inherits</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Girl</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">EventEmitter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> girl</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E06C75;"> Girl</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">girl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;newListener&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// 监听到用户做了哪些监听</span></span>
<span class="line"><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">let</span><span style="color:#61AFEF;"> listener1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;哭&#39;</span><span style="color:#ABB2BF;">); }</span></span>
<span class="line"><span style="color:#E06C75;">let</span><span style="color:#61AFEF;"> listener2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;逛街&#39;</span><span style="color:#ABB2BF;">); }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">girl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;女生失恋&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">listener1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">girl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;女生失恋&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">listener2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// on emit =&gt; new Vue() $on $emit $once $on(&#39;change&#39;,function())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">girl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;女生失恋&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>实现 events 模块</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> EventEmitter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">EventEmitter</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 不管任何人 调用了on方法 都可以增加 events</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 监听绑定的事件 不是newLister就调用newListener</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventName</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;newListener&#39;</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;newListener&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">]){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">EventEmitter</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">once</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 绑定，执行后删除</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#61AFEF;"> one</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">// 2) 会触发one函数</span></span>
<span class="line"><span style="color:#61AFEF;">        callback</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 触发原有的逻辑</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 删除自己</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">off</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">one</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 再将one删除</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    one</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">l</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> callback</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 用自定义属性 保存原有的绑定函数</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">one</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1) 先绑定</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">EventEmitter</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">off</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">])(</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> fn</span><span style="color:#56B6C2;"> !=</span><span style="color:#E06C75;"> callback</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">l</span><span style="color:#56B6C2;"> !=</span><span style="color:#E06C75;"> callback</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">EventEmitter</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">eventName</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">]){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_events</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">eventName</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> EventEmitter</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div>`,88)]))}const b=n(e,[["render",o]]);export{u as __pageData,b as default};
