import{_ as a,c as e,o as n,ah as l}from"./chunks/framework.DqD713j2.js";const B=JSON.parse('{"title":"Koa-请求(Request)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Koa框架/Koa-请求(Request).md","filePath":"Document/Node后端框架开发/Koa框架/Koa-请求(Request).md","lastUpdated":1750954157000}'),p={name:"Document/Node后端框架开发/Koa框架/Koa-请求(Request).md"};function o(t,s,r,c,i,d){return n(),e("div",null,s[0]||(s[0]=[l(`<h1 id="koa-请求-request" tabindex="-1">Koa-请求(Request) <a class="header-anchor" href="#koa-请求-request" aria-label="Permalink to &quot;Koa-请求(Request)&quot;">​</a></h1><p>Koa <code>Request</code> 对象是在 node 的 原生请求对象之上的抽象，提供了诸多对 HTTP 服务器开发有用的功能。</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="request-header" tabindex="-1">request.header <a class="header-anchor" href="#request-header" aria-label="Permalink to &quot;request.header&quot;">​</a></h3><p>请求头对象。这与 node <a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage" target="_blank" rel="noreferrer"><code>http.IncomingMessage</code></a> 上的 <a href="https://nodejs.org/api/http.html#http_message_headers" target="_blank" rel="noreferrer"><code>headers</code></a> 字段相同</p><h3 id="request-header-1" tabindex="-1">request.header= <a class="header-anchor" href="#request-header-1" aria-label="Permalink to &quot;request.header=&quot;">​</a></h3><p>设置请求头对象。</p><h3 id="request-headers" tabindex="-1">request.headers <a class="header-anchor" href="#request-headers" aria-label="Permalink to &quot;request.headers&quot;">​</a></h3><p>请求头对象。别名为 <code>request.header</code>.</p><h3 id="request-headers-1" tabindex="-1">request.headers= <a class="header-anchor" href="#request-headers-1" aria-label="Permalink to &quot;request.headers=&quot;">​</a></h3><p>设置请求头对象。别名为 <code>request.header=</code>.</p><h3 id="request-method" tabindex="-1">request.method <a class="header-anchor" href="#request-method" aria-label="Permalink to &quot;request.method&quot;">​</a></h3><p>请求方法。</p><h3 id="request-method-1" tabindex="-1">request.method= <a class="header-anchor" href="#request-method-1" aria-label="Permalink to &quot;request.method=&quot;">​</a></h3><p>设置请求方法，对于实现诸如 <code>methodOverride()</code> 的中间件是有用的。</p><h3 id="request-length" tabindex="-1">request.length <a class="header-anchor" href="#request-length" aria-label="Permalink to &quot;request.length&quot;">​</a></h3><p>返回以数字返回请求的 Content-Length，或 <code>undefined</code>。</p><h3 id="request-url" tabindex="-1">request.url <a class="header-anchor" href="#request-url" aria-label="Permalink to &quot;request.url&quot;">​</a></h3><p>获取请求 URL.</p><h3 id="request-url-1" tabindex="-1">request.url= <a class="header-anchor" href="#request-url-1" aria-label="Permalink to &quot;request.url=&quot;">​</a></h3><p>设置请求 URL, 对 url 重写有用。</p><h3 id="request-originalurl" tabindex="-1">request.originalUrl <a class="header-anchor" href="#request-originalurl" aria-label="Permalink to &quot;request.originalUrl&quot;">​</a></h3><p>获取请求原始URL。</p><h3 id="request-origin" tabindex="-1">request.origin <a class="header-anchor" href="#request-origin" aria-label="Permalink to &quot;request.origin&quot;">​</a></h3><p>获取URL的来源，包括 <code>protocol</code> 和 <code>host</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">origin</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; http://example.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="request-href" tabindex="-1">request.href <a class="header-anchor" href="#request-href" aria-label="Permalink to &quot;request.href&quot;">​</a></h3><p>获取完整的请求URL，包括 <code>protocol</code>，<code>host</code> 和 <code>url</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; http://example.com/foo/bar?q=1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="request-path" tabindex="-1">request.path <a class="header-anchor" href="#request-path" aria-label="Permalink to &quot;request.path&quot;">​</a></h3><p>获取请求路径名。</p><h3 id="request-path-1" tabindex="-1">request.path= <a class="header-anchor" href="#request-path-1" aria-label="Permalink to &quot;request.path=&quot;">​</a></h3><p>设置请求路径名，并在存在时保留查询字符串。</p><h3 id="request-querystring" tabindex="-1">request.querystring <a class="header-anchor" href="#request-querystring" aria-label="Permalink to &quot;request.querystring&quot;">​</a></h3><p>根据 <code>?</code> 获取原始查询字符串.</p><h3 id="request-querystring-1" tabindex="-1">request.querystring= <a class="header-anchor" href="#request-querystring-1" aria-label="Permalink to &quot;request.querystring=&quot;">​</a></h3><p>设置原始查询字符串。</p><h3 id="request-search" tabindex="-1">request.search <a class="header-anchor" href="#request-search" aria-label="Permalink to &quot;request.search&quot;">​</a></h3><p>使用 <code>?</code> 获取原始查询字符串。</p><h3 id="request-search-1" tabindex="-1">request.search= <a class="header-anchor" href="#request-search-1" aria-label="Permalink to &quot;request.search=&quot;">​</a></h3><p>设置原始查询字符串。</p><h3 id="request-host" tabindex="-1">request.host <a class="header-anchor" href="#request-host" aria-label="Permalink to &quot;request.host&quot;">​</a></h3><p>存在时获取主机（hostname:port）。当 <code>app.proxy</code> 是 <strong>true</strong> 时支持 <code>X-Forwarded-Host</code>，否则使用 <code>Host</code>。</p><h3 id="request-hostname" tabindex="-1">request.hostname <a class="header-anchor" href="#request-hostname" aria-label="Permalink to &quot;request.hostname&quot;">​</a></h3><p>存在时获取主机名。当 <code>app.proxy</code> 是 <strong>true</strong> 时支持 <code>X-Forwarded-Host</code>，否则使用 <code>Host</code>。</p><p>如果主机是 IPv6, Koa 解析到 <a href="https://nodejs.org/dist/latest-v8.x/docs/api/url.html#url_the_whatwg_url_api" target="_blank" rel="noreferrer">WHATWG URL API</a>, <em>注意</em> 这可能会影响性能。</p><h3 id="request-url-2" tabindex="-1">request.URL <a class="header-anchor" href="#request-url-2" aria-label="Permalink to &quot;request.URL&quot;">​</a></h3><p>获取 WHATWG 解析的 URL 对象。</p><h3 id="request-type" tabindex="-1">request.type <a class="header-anchor" href="#request-type" aria-label="Permalink to &quot;request.type&quot;">​</a></h3><p>获取请求 <code>Content-Type</code>, 不含 &quot;charset&quot; 等参数。</p><blockquote><p>译者注: 这里其实是只获取 <em>mime-type</em>, 详见<a href="https://github.com/koajs/koa/blob/eda27608f7d39ede86d7b402aae64b1867ce31c6/lib/request.js#L639" target="_blank" rel="noreferrer">源码及其注释</a></p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> ct</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;image/png&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="request-charset" tabindex="-1">request.charset <a class="header-anchor" href="#request-charset" aria-label="Permalink to &quot;request.charset&quot;">​</a></h3><p>存在时获取请求字符集，或者 <code>undefined</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">charset</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;utf-8&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="request-query" tabindex="-1">request.query <a class="header-anchor" href="#request-query" aria-label="Permalink to &quot;request.query&quot;">​</a></h3><p>获取解析的查询字符串, 当没有查询字符串时，返回一个空对象。请注意，此 getter 不支持嵌套解析。</p><p>例如 &quot;color=blue&amp;size=small&quot;:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;blue&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  size</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;small&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="request-query-1" tabindex="-1">request.query= <a class="header-anchor" href="#request-query-1" aria-label="Permalink to &quot;request.query=&quot;">​</a></h3><p>将查询字符串设置为给定对象。 请注意，此 setter 不支持嵌套对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/login&#39;</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="request-fresh" tabindex="-1">request.fresh <a class="header-anchor" href="#request-fresh" aria-label="Permalink to &quot;request.fresh&quot;">​</a></h3><p>检查请求缓存是否“新鲜”，也就是内容没有改变。此方法用于 <code>If-None-Match</code> / <code>ETag</code>, 和 <code>If-Modified-Since</code> 和 <code>Last-Modified</code> 之间的缓存协商。 在设置一个或多个这些响应头后应该引用它。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 新鲜度检查需要状态20x或304</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ETag&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;123&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 缓存是好的</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fresh</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 304</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 缓存是陈旧的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取新数据</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;something&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="request-stale" tabindex="-1">request.stale <a class="header-anchor" href="#request-stale" aria-label="Permalink to &quot;request.stale&quot;">​</a></h3><p>与 <code>request.fresh</code> 相反.</p><h3 id="request-protocol" tabindex="-1">request.protocol <a class="header-anchor" href="#request-protocol" aria-label="Permalink to &quot;request.protocol&quot;">​</a></h3><p>返回请求协议，“https” 或 “http”。当 <code>app.proxy</code> 是 <strong>true</strong> 时支持 <code>X-Forwarded-Proto</code>。</p><h3 id="request-secure" tabindex="-1">request.secure <a class="header-anchor" href="#request-secure" aria-label="Permalink to &quot;request.secure&quot;">​</a></h3><p>通过 <code>ctx.protocol == &quot;https&quot;</code> 来检查请求是否通过 TLS 发出。</p><h3 id="request-ip" tabindex="-1">request.ip <a class="header-anchor" href="#request-ip" aria-label="Permalink to &quot;request.ip&quot;">​</a></h3><p>请求远程地址。 当 <code>app.proxy</code> 是 <strong>true</strong> 时支持 <code>X-Forwarded-Proto</code>。</p><h3 id="request-ips" tabindex="-1">request.ips <a class="header-anchor" href="#request-ips" aria-label="Permalink to &quot;request.ips&quot;">​</a></h3><p>当 <code>X-Forwarded-For</code> 存在并且 <code>app.proxy</code> 被启用时，这些 ips 的数组被返回，从上游 - &gt;下游排序。 禁用时返回一个空数组。</p><p>例如，如果值是 &quot;client, proxy1, proxy2&quot;，将会得到数组 <code>[&quot;client&quot;, &quot;proxy1&quot;, &quot;proxy2&quot;]</code>。</p><p>大多数反向代理（nginx）都通过 <code>proxy_add_x_forwarded_for</code> 设置了 x-forwarded-for，这带来了一定的安全风险。恶意攻击者可以通过伪造 <code>X-Forwarded-For</code> 请求头来伪造客户端的ip地址。 客户端发送的请求具有 &#39;forged&#39; 的 <code>X-Forwarded-For</code> 请求头。 在由反向代理转发之后，<code>request.ips</code> 将是 [&#39;forged&#39;, &#39;client&#39;, &#39;proxy1&#39;, &#39;proxy2&#39;]。</p><p>Koa 提供了两种方式来避免被绕过。</p><p>如果您可以控制反向代理，则可以通过调整配置来避免绕过，或者使用 koa 提供的 <code>app.proxyIpHeader</code> 来避免读取 <code>x-forwarded-for</code> 获取 ips。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  proxy</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  proxyIpHeader</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;X-Real-IP&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果您确切知道服务器前面有多少个反向代理，则可以通过配置 <code>app.maxIpsCount</code> 来避免读取用户的伪造的请求头：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  proxy</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  maxIpsCount</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 服务器前只有一个代理</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// request.header[&#39;X-Forwarded-For&#39;] === [ &#39;127.0.0.1&#39;, &#39;127.0.0.2&#39; ];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ctx.ips === [ &#39;127.0.0.2&#39; ];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="request-subdomains" tabindex="-1">request.subdomains <a class="header-anchor" href="#request-subdomains" aria-label="Permalink to &quot;request.subdomains&quot;">​</a></h3><p>以数组形式返回子域。</p><p>子域是应用程序主域之前主机的点分隔部分。默认情况下，应用程序的域名假定为主机的最后两个部分。这可以通过设置 <code>app.subdomainOffset</code> 来更改。</p><p>例如，如果域名为“tobi.ferrets.example.com”：</p><p>如果 <code>app.subdomainOffset</code> 未设置, <code>ctx.subdomains</code> 是 <code>[&quot;ferrets&quot;, &quot;tobi&quot;]</code>. 如果 <code>app.subdomainOffset</code> 是 3, <code>ctx.subdomains</code> 是 <code>[&quot;tobi&quot;]</code>.</p><h3 id="request-is-types" tabindex="-1">request.is(types...) <a class="header-anchor" href="#request-is-types" aria-label="Permalink to &quot;request.is(types...)&quot;">​</a></h3><p>检查传入请求是否包含 <code>Content-Type</code> 消息头字段， 并且包含任意的 mime <code>type</code>。 如果没有请求主体，返回 <code>null</code>。 如果没有内容类型，或者匹配失败，则返回 <code>false</code>。 反之则返回匹配的 content-type。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 Content-Type: text/html; charset=utf-8</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; &#39;html&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;text/html&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; &#39;text/html&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;text/*&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;text/html&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; &#39;text/html&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 当 Content-Type 是 application/json 时</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;json&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;urlencoded&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; &#39;json&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;application/json&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; &#39;application/json&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;application/*&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; &#39;application/json&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>例如，如果要确保仅将图像发送到给定路由：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;image/*&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 处理</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">throw</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">415</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;images only!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="内容协商" tabindex="-1">内容协商 <a class="header-anchor" href="#内容协商" aria-label="Permalink to &quot;内容协商&quot;">​</a></h3><p>Koa 的 <code>request</code> 对象包括由 <a href="http://github.com/expressjs/accepts" target="_blank" rel="noreferrer">accepts</a> 和 <a href="https://github.com/federomero/negotiator" target="_blank" rel="noreferrer">negotiator</a> 提供的内容协商实用函数。</p><p>这些实用函数是：</p><ul><li><code>request.accepts(types)</code></li><li><code>request.acceptsEncodings(types)</code></li><li><code>request.acceptsCharsets(charsets)</code></li><li><code>request.acceptsLanguages(langs)</code></li></ul><p>如果没有提供类型，则返回 <strong>所有</strong> 可接受的类型。</p><p>如果提供多种类型，将返回最佳匹配。 如果没有找到匹配项，则返回一个<code>false</code>，你应该向客户端发送一个<code>406 &quot;Not Acceptable&quot;</code> 响应。</p><p>如果接收到任何类型的接收头，则会返回第一个类型。 因此，你提供的类型的顺序很重要。</p><h3 id="request-accepts-types" tabindex="-1">request.accepts(types) <a class="header-anchor" href="#request-accepts-types" aria-label="Permalink to &quot;request.accepts(types)&quot;">​</a></h3><p>检查给定的 <code>type(s)</code> 是否可以接受，如果 <code>true</code>，返回最佳匹配，否则为 <code>false</code>。 <code>type</code> 值可能是一个或多个 mime 类型的字符串，如 <code>application/json</code>，扩展名称如 <code>json</code>，或数组 <code>[&quot;json&quot;, &quot;html&quot;, &quot;text/plain&quot;]</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Accept: text/html</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;html&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Accept: text/*, application/json</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;html&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;text/html&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;text/html&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;json&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;text&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;json&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;application/json&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;application/json&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Accept: text/*, application/json</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;image/png&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;png&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Accept: text/*;q=.5, application/json</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;json&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;json&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;json&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// No Accept header</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;json&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;html&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;json&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;json&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>你可以根据需要多次调用 <code>ctx.accepts()</code>，或使用 switch：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">accepts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;json&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;html&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;text&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">  case</span><span style="color:#98C379;"> &#39;json&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  case</span><span style="color:#98C379;"> &#39;html&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  case</span><span style="color:#98C379;"> &#39;text&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  default</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">throw</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">406</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;json, html, or text only&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="request-acceptsencodings-encodings" tabindex="-1">request.acceptsEncodings(encodings) <a class="header-anchor" href="#request-acceptsencodings-encodings" aria-label="Permalink to &quot;request.acceptsEncodings(encodings)&quot;">​</a></h3><p>检查 <code>encodings</code> 是否可以接受，返回最佳匹配为 <code>true</code>，否则为 <code>false</code>。 请注意，您应该将<code>identity</code> 作为编码之一！</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Accept-Encoding: gzip</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acceptsEncodings</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;gzip&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;deflate&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;identity&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;gzip&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acceptsEncodings</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;gzip&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;deflate&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;identity&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;gzip&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当没有给出参数时，所有接受的编码将作为数组返回：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Accept-Encoding: gzip, deflate</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acceptsEncodings</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; [&quot;gzip&quot;, &quot;deflate&quot;, &quot;identity&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>请注意，如果客户端显式地发送 <code>identity;q=0</code>，那么 <code>identity</code> 编码（这意味着没有编码）可能是不可接受的。 虽然这是一个边缘的情况，你仍然应该处理这种方法返回 <code>false</code> 的情况。</p><h3 id="request-acceptscharsets-charsets" tabindex="-1">request.acceptsCharsets(charsets) <a class="header-anchor" href="#request-acceptscharsets-charsets" aria-label="Permalink to &quot;request.acceptsCharsets(charsets)&quot;">​</a></h3><p>检查 <code>charsets</code> 是否可以接受，在 <code>true</code> 时返回最佳匹配，否则为 <code>false</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acceptsCharsets</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;utf-7&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;utf-8&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acceptsCharsets</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;utf-7&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;utf-8&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;utf-8&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当没有参数被赋予所有被接受的字符集将作为数组返回：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acceptsCharsets</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; [&quot;utf-8&quot;, &quot;utf-7&quot;, &quot;iso-8859-1&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="request-acceptslanguages-langs" tabindex="-1">request.acceptsLanguages(langs) <a class="header-anchor" href="#request-acceptslanguages-langs" aria-label="Permalink to &quot;request.acceptsLanguages(langs)&quot;">​</a></h3><p>检查 <code>langs</code> 是否可以接受，如果为 <code>true</code>，返回最佳匹配，否则为 <code>false</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Accept-Language: en;q=0.8, es, pt</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acceptsLanguages</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;es&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;en&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;es&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acceptsLanguages</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;en&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;es&#39;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; &quot;es&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当没有参数被赋予所有接受的语言将作为数组返回：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Accept-Language: en;q=0.8, es, pt</span></span>
<span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">acceptsLanguages</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// =&gt; [&quot;es&quot;, &quot;pt&quot;, &quot;en&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="request-idempotent" tabindex="-1">request.idempotent <a class="header-anchor" href="#request-idempotent" aria-label="Permalink to &quot;request.idempotent&quot;">​</a></h3><p>检查请求是否是幂等的。</p><h3 id="request-socket" tabindex="-1">request.socket <a class="header-anchor" href="#request-socket" aria-label="Permalink to &quot;request.socket&quot;">​</a></h3><p>返回请求套接字。</p><h3 id="request-get-field" tabindex="-1">request.get(field) <a class="header-anchor" href="#request-get-field" aria-label="Permalink to &quot;request.get(field)&quot;">​</a></h3><p>返回请求头(header), <code>field</code> 不区分大小写.</p>`,126)]))}const y=a(p,[["render",o]]);export{B as __pageData,y as default};
