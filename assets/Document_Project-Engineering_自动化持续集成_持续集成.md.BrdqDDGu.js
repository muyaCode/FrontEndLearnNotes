import{_ as p,c as t,o as a,ah as i}from"./chunks/framework.DqD713j2.js";const C=JSON.parse('{"title":"持续集成","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Project-Engineering/自动化持续集成/持续集成.md","filePath":"Document/Project-Engineering/自动化持续集成/持续集成.md","lastUpdated":1750954157000}'),n={name:"Document/Project-Engineering/自动化持续集成/持续集成.md"};function r(o,e,s,c,l,b){return a(),t("div",null,e[0]||(e[0]=[i('<h1 id="持续集成" tabindex="-1">持续集成 <a class="header-anchor" href="#持续集成" aria-label="Permalink to &quot;持续集成&quot;">​</a></h1><p>Turborepo：发布当月就激增 3.8k Star，这款超神的新兴 Monorepo 方案：<a href="https://juejin.cn/post/7129267782515949575" target="_blank" rel="noreferrer">https://juejin.cn/post/7129267782515949575</a></p><p>带你了解更全面的 Monorepo - 优劣、踩坑、选型：<a href="https://juejin.cn/post/7215886869199896637" target="_blank" rel="noreferrer">https://juejin.cn/post/7215886869199896637</a></p><p>GitLab CI/CD 是一个内置在GitLab中的工具，用于通过持续方法进行软件开发：</p><p>Continuous Integration (CI) 持续集成</p><p>Continuous Delivery (CD) 持续交付</p><p>Continuous Deployment (CD) 持续部署</p><p>持续集成的工作原理是将小的代码块推送到Git仓库中托管的应用程序代码库中，并且每次推送时，都要运行一系列脚本来构建、测试和验证代码更改，然后再将其合并到主分支中。</p><p>持续交付和部署相当于更进一步的CI，可以在每次推送到仓库默认分支的同时将应用程序部署到生产环境。</p><p>这些方法使得可以在开发周期的早期发现bugs和errors，从而确保部署到生产环境的所有代码都符合为应用程序建立的代码标准。</p><p>GitLab CI/CD 由一个名为 .gitlab-ci.yml 的文件进行配置，改文件位于仓库的根目录下。文件中指定的脚本由GitLab Runner执行。</p><h2 id="_1-gitlab-ci-cd-介绍" tabindex="-1">1. GitLab CI/CD 介绍 <a class="header-anchor" href="#_1-gitlab-ci-cd-介绍" aria-label="Permalink to &quot;1. GitLab CI/CD 介绍&quot;">​</a></h2><p>软件开发的持续方法基于自动执行脚本，以最大程度地减少在开发应用程序时引入错误的机会。从开发新代码到部署新代码，他们几乎不需要人工干预，甚至根本不需要干预。</p><p>它涉及到在每次小的迭代中就不断地构建、测试和部署代码更改，从而减少了基于已经存在bug或失败的先前版本开发新代码的机会。</p><p>Continuous Integration（持续集成） 假设一个应用程序，其代码存储在GitLab的Git仓库中。开发人员每天都要多次推送代码更改。对于每次向仓库的推送，你都可以创建一组脚本来自动构建和测试你的应用程序，从而减少了向应用程序引入错误的机会。这种做法称为持续集成，对于提交给应用程序（甚至是开发分支）的每项更改，它都会自动连续进行构建和测试，以确保所引入的更改通过你为应用程序建立的所有测试，准则和代码合规性标准。</p><p>Continuous Delivery（持续交付） 持续交付是超越持续集成的更进一步的操作。应用程序不仅会在推送到代码库的每次代码更改时进行构建和测试，而且，尽管部署是手动触发的，但作为一个附加步骤，它也可以连续部署。此方法可确保自动检查代码，但需要人工干预才能从策略上手动触发以必输此次变更。</p><p>Continuous Deployment（持续部署） 与持续交付类似，但不同之处在于，你无需将其手动部署，而是将其设置为自动部署。完全不需要人工干预即可部署你的应用程序。</p><h3 id="_1-1-gitlab-ci-cd-是如何工作的" tabindex="-1">1.1. GitLab CI/CD 是如何工作的 <a class="header-anchor" href="#_1-1-gitlab-ci-cd-是如何工作的" aria-label="Permalink to &quot;1.1. GitLab CI/CD 是如何工作的&quot;">​</a></h3><p>为了使用GitLab CI/CD，你需要一个托管在GitLab上的应用程序代码库，并且在根目录中的.gitlab-ci.yml文件中指定构建、测试和部署的脚本。</p><p>在这个文件中，你可以定义要运行的脚本，定义包含的依赖项，选择要按顺序运行的命令和要并行运行的命令，定义要在何处部署应用程序，以及指定是否 要自动运行脚本或手动触发脚本。</p><p>为了可视化处理过程，假设添加到配置文件中的所有脚本与在计算机的终端上运行的命令相同。</p><p>一旦你已经添加了.gitlab-ci.yml到仓库中，GitLab将检测到该文件，并使用名为GitLab Runner的工具运行你的脚本。该工具的操作与终端类似。</p><p>这些脚本被分组到jobs，它们共同组成一个pipeline。一个最简单的.gitlab-ci.yml文件可能是这样的：</p><p>before_script: - apt-get install rubygems ruby-dev -y run-test: script: - ruby --version 6</p><p>before_script属性将在运行任何内容之前为你的应用安装依赖，一个名为run-test的job（作业）将打印当前系统的Ruby版本。二者共同构成了在每次推送到仓库的任何分支时都会被触发的pipeline（管道）。</p><p>GitLab CI/CD不仅可以执行你设置的job，还可以显示执行期间发生的情况，正如你在终端看到的那样：</p><p>为你的应用创建策略，GitLab会根据你的定义来运行pipeline。你的管道状态也会由GitLab显示：</p><p>最后，如果出现任何问题，可以轻松地回滚所有更改：</p><h3 id="_1-2-基本-ci-cd-工作流程" tabindex="-1">1.2. 基本 CI/CD 工作流程 <a class="header-anchor" href="#_1-2-基本-ci-cd-工作流程" aria-label="Permalink to &quot;1.2. 基本 CI/CD 工作流程&quot;">​</a></h3><p>一旦你将提交推送到远程仓库的分支上，那么你为该项目设置的CI/CD管道将会被触发。GitLab CI/CD 通过这样做：</p><p>运行自动化脚本（串行或并行） 代码Review并获得批准</p><p>构建并测试你的应用</p><p>就像在你本机中看到的那样，使用Review Apps预览每个合并请求的更改</p><p>代码Review并获得批准</p><p>合并feature分支到默认分支，同时自动将此次更改部署到生产环境</p><p>如果出现问题，可以轻松回滚</p><p>通过GitLab UI所有的步骤都是可视化的</p><h3 id="_1-3-深入了解ci-cd基本工作流程" tabindex="-1">1.3. 深入了解CI/CD基本工作流程 <a class="header-anchor" href="#_1-3-深入了解ci-cd基本工作流程" aria-label="Permalink to &quot;1.3. 深入了解CI/CD基本工作流程&quot;">​</a></h3><p>如果我们深入研究基本工作流程，则可以在DevOps生命周期的每个阶段看到GitLab中可用的功能，如下图所示：</p><p>1.Verify</p><p>通过持续集成自动构建和测试你的应用程序</p><p>使用GitLab代码质量（GitLab Code Quality）分析你的源代码质量</p><p>通过浏览器性能测试（Browser Performance Testing）确定代码更改对性能的影响</p><p>执行一系列测试，比如Container Scanning , Dependency Scanning , JUnit tests</p><p>用Review Apps部署更改，以预览每个分支上的应用程序更改</p><p>2.Package</p><p>用Container Registry存储Docker镜像</p><p>用NPM Registry存储NPM包</p><p>用Maven Repository存储Maven artifacts</p><p>用Conan Repository存储Conan包</p><p>3.Release</p><p>持续部署，自动将你的应用程序部署到生产环境</p><p>持续交付，手动点击以将你的应用程序部署到生产环境</p><p>用GitLab Pages部署静态网站</p><p>仅将功能部署到一个Pod上，并让一定比例的用户群通过Canary Deployments访问临时部署的功能（PS：即灰度发布）</p><p>在Feature Flags之后部署功能</p><p>用GitLab Releases将发布说明添加到任意Git tag</p><p>使用Deploy Boards查看在Kubernetes上运行的每个CI环境的当前运行状况和状态</p><p>使用Auto Deploy将应用程序部署到Kubernetes集群中的生产环境</p><p>使用GitLab CI/CD，还可以：</p><p>通过Auto DevOps轻松设置应用的整个生命周期</p><p>将应用程序部署到不同的环境</p><p>安装你自己的GitLab Runner</p><p>Schedule pipelines</p>',64)]))}const d=p(n,[["render",r]]);export{C as __pageData,d as default};
