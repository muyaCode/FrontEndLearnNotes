import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"JavaScript 的数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端进阶技巧/前端基础知识/JavaScript的数据类型.md","filePath":"Document/前端进阶技巧/前端基础知识/JavaScript的数据类型.md","lastUpdated":1750954157000}'),e={name:"Document/前端进阶技巧/前端基础知识/JavaScript的数据类型.md"};function o(t,s,r,c,B,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="javascript-的数据类型" tabindex="-1">JavaScript 的数据类型 <a class="header-anchor" href="#javascript-的数据类型" aria-label="Permalink to &quot;JavaScript 的数据类型&quot;">​</a></h1><p>数据类型通常是一门编程语言的基础知识，JavaScript 的数据类型可以分为 7 种：空（Null）、未定义（Undefined）、数字（Number）、字符串（String）、布尔值（Boolean）、符号（Symbol）、对象（Object）。</p><p>其中前 6 种类型为基础类型，最后 1 种为引用类型。这两者的区别在于，基础类型的数据在被引用或拷贝时，是值传递，也就是说会创建一个完全相等的变量；而引用类型只是创建一个指针指向原有的变量，实际上两个变量是“共享”这个数据的，并没有重新创建一个新的数据。</p><p>下面我们就来分别介绍这 7 种数据类型的重要概念及常见操作。</p><h4 id="undefined" tabindex="-1">Undefined <a class="header-anchor" href="#undefined" aria-label="Permalink to &quot;Undefined&quot;">​</a></h4><p>Undefined 是一个很特殊的数据类型，它只有一个值，也就是 undefined。可以通过下面几种方式来得到 undefined：</p><ul><li><p>引用已声明但未初始化的变量；</p></li><li><p>引用未定义的对象属性；</p></li><li><p>执行无返回值函数；</p></li><li><p>执行 void 表达式；</p></li><li><p>全局常量 window.undefined 或 undefined。</p></li></ul><p>对应代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> o</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// undefined</span></span>
<span class="line"><span style="color:#ABB2BF;">	() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">)(); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">undefined</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>其中比较推荐通过 void 表达式来得到 undefined 值，因为这种方式既简便（window.undefined 或 undefined 常量的字符长度都大于 &quot;void 0&quot; 表达式）又不需要引用额外的变量和属性；同时它作为表达式还可以配合三目运算符使用，代表不执行任何操作。</p><p>如下面的代码就表示满足条件 x 大于 0 且小于 5 的时候执行函数 fn，否则不进行任何操作：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> void</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如何判断一个变量的值是否为 undefined 呢？</p><p>下面的代码给出了 3 种方式来判断变量 x 是否为 undefined，你可以先思考一下哪一种可行。</p><ul><li><p>方式 1 直接通过逻辑取非操作来将变量 x 强制转换为布尔值进行判断；</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 方式1</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>方式 2 通过 3 个等号将变量 x 与 undefined 做真值比较；</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 方式2</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>方式 3 通过 typeof 关键字获取变量 x 的类型，然后与 &#39;undefined&#39; 字符串做真值比较：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 方式2</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;undefined&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>现在来揭晓答案，</p><p>方式 1 不可行，因为只要变量 x 的值为 undefined、空字符串、数值 0、null 时都会判断为真。</p><p>方式 2 也存在一些问题，虽然通过 “===” 和 undefined 值做比较是可行的，但如果 x 未定义则会抛出错误 “ReferenceError: x is not defined” 导致程序执行终止，这对于代码的健壮性显然是不利的。</p><p>方式 3 则解决了这一问题。</p><h4 id="null" tabindex="-1">Null <a class="header-anchor" href="#null" aria-label="Permalink to &quot;Null&quot;">​</a></h4><p>Null 数据类型和 Undefined 类似，只有唯一的一个值 null，都可以表示空值，甚至我们通过 “==” 来比较它们是否相等的时候得到的结果都是 true，但 null 是 JavaScript 保留关键字，而 undefined 只是一个常量。</p><p>也就是说我们可以声明名称为 undefined 的变量（虽然只能在老版本的 IE 浏览器中给它重新赋值），但将 null 作为变量使用时则会报错。</p><h4 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&quot;">​</a></h4><p>Boolean 数据类型只有两个值：true 和 false，分别代表真和假，理解和使用起来并不复杂。但是我们常常会将各种表达式和变量转换成 Boolean 数据类型来当作判断条件，这时候就要注意了。</p><p>下面是一个简单地将星期数转换成中文的函数，比如输入数字 1，函数就会返回“星期一”，输入数字 2 会返回“星期二”，以此类推，如果未输入数字则返回 undefined。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getWeek</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">week</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> dict</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;日&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;一&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;二&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;三&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;四&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;五&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;六&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">week</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#98C379;"> \`星期</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">dict</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">week</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里在 if 语句中就进行了类型转换，将 week 变量转换成 Boolean 数据类型，而 0、空字符串、null、undefined 在转换时都会返回 false。所以这段代码在输入 0 的时候不会返回“星期日”，而返回 undefined。</p><p>我们在做强制类型转换的时候一定要考虑这个问题。</p><h4 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number&quot;">​</a></h4><h5 id="两个重要值" tabindex="-1">两个重要值 <a class="header-anchor" href="#两个重要值" aria-label="Permalink to &quot;两个重要值&quot;">​</a></h5><p>Number 是数值类型，有 2 个特殊数值得注意一下，即 NaN 和 Infinity。</p><ul><li>NaN（Not a Number）通常在计算失败的时候会得到该值。要判断一个变量是否为 NaN，则可以通过 Number.isNaN 函数进行判断。</li><li>Infinity 是无穷大，加上负号 “-” 会变成无穷小，在某些场景下比较有用，比如通过数值来表示权重或者优先级，Infinity 可以表示最高优先级或最大权重。</li></ul><h5 id="进制转换" tabindex="-1">进制转换 <a class="header-anchor" href="#进制转换" aria-label="Permalink to &quot;进制转换&quot;">​</a></h5><p>当我们需要将其他进制的整数转换成十进制显示的时候可以使用 parseInt 函数，该函数第一个参数为数值或字符串，第二个参数为进制数，默认为 10，当进制数转换失败时会返回 NaN。所以，如果在数组的 map 函数的回调函数中直接调用 parseInt，那么会将数组元素和索引值都作为参数传入。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parseInt</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [0, NaN, NaN]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>而将十进制转换成其他进制时，可以通过 toString 函数来实现。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &quot;1010&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="精度问题" tabindex="-1">精度问题 <a class="header-anchor" href="#精度问题" aria-label="Permalink to &quot;精度问题&quot;">​</a></h5><p>对于数值类型的数据，还有一个比较值得注意的问题，那就是精度问题，在进行浮点数运算时很容易碰到。比如我们执行简单的运算 0.1 + 0.2，得到的结果是 0.30000000000000004，如果直接和 0.3 作相等判断时就会得到 false。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">0.1</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 0.2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 0.30000000000000004</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>出现这种情况的原因在于计算的时候，JavaScript 引擎会先将十进制数转换为二进制，然后进行加法运算，再将所得结果转换为十进制。在进制转换过程中如果小数位是无限的，就会出现误差。同样的，对于下面的表达式，将数字 5 开方后再平方得到的结果也和数字 5 不相等。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pow</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pow</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 5.000000000000001</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对于这个问题的解决方法也很简单，那就是消除无限小数位。</p><ul><li>一种方式是先转换成整数进行计算，然后再转换回小数，这种方式适合在小数位不是很多的时候。比如一些程序的支付功能 API 以“分”为单位，从而避免使用小数进行计算。</li><li>还有另一种方法就是舍弃末尾的小数位。比如对上面的加法就可以先调用 toPrecision 截取 12 位，然后调用 parseFloat 函数转换回浮点数。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">parseFloat</span><span style="color:#ABB2BF;">((</span><span style="color:#D19A66;">0.1</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 0.2</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toPrecision</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// 0.3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h4><p>String 类型是最常用的数据类型了，关于它的基础 API 函数大家应该比较熟悉了，这里我就不多介绍了。下面通过一道笔试题来重点介绍它的使用场景。</p><p>千位分隔符是指为了方便识别较大数字，每隔三位数会加入 1 个逗号，该逗号就是千位分隔符。如果要编写一个函数来为输入值的数字添加千分位分隔符，该怎么实现呢？</p><p>一种很容易想到的方法就是从右往左遍历数值每一位，每隔 3 位添加分隔符。为了操作方便，我们可以将数值转换成字符数组，而要实现从右往左遍历，一种实现方式是通过 for 循环的索引值找到对应的字符；而另一种方式是通过数组反转，从而变成从左到右操作。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sep</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> n</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/(</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		i</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">reverse</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">idx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">idx</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">%</span><span style="color:#D19A66;"> 3</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;,&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> c</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">reverse</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">,/</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;font-style:italic;"> c</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这种方式就是将字符串数据转化成引用类型数据，即用数组来实现。</p><p>第二种方式则是通过引用类型，即用正则表达式对字符进行替换来实现。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sep2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> n</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> ?</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">str</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> &quot;.&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> void</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/(\\d)(?=(\\d</span><span style="color:#D19A66;">{3}</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">+</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">)/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;$1,&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#56B6C2;">\\.</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h4><p>Symbol 是 ES6 中引入的新数据类型，它表示一个唯一的常量，通过 Symbol 函数来创建对应的数据类型，创建时可以添加变量描述，该变量描述在传入时会被强行转换成字符串进行存储。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">description</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">c</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// [object Object]</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> _a</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">_a</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>基于上面的特性，Symbol 属性类型比较适合用于两类场景中：常量值和对象属性。</p><h5 id="避免常量值重复" tabindex="-1">避免常量值重复 <a class="header-anchor" href="#避免常量值重复" aria-label="Permalink to &quot;避免常量值重复&quot;">​</a></h5><p>假设有个 getValue 函数，根据传入的字符串参数 key 执行对应代码逻辑。代码如下所示：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  switch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#98C379;"> &#39;A&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#98C379;"> &#39;B&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这段代码对调用者而言非常不友好，因为代码中使用了魔术字符串（魔术字符串是指在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值），导致调用 getValue 函数时需要查看函数源码才能找到参数 key 的可选值。所以可以将参数 key 的值以常量的方式声明出来。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> KEY</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  alibaba</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  baidu</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  switch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#E5C07B;"> KEY</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">alibaba</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#C678DD;">    case</span><span style="color:#E5C07B;"> KEY</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">baidu</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KEY</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">baidu</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>但这样也并非完美，假设现在我们要在 KEY 常量中加入一个 key，根据对应的规则，很有可能会出现值重复的情况：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> KEY</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  alibaba</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;A&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  baidu</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;B&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#E06C75;">  bytedance</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;B&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这显然会出现问题：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KEY</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">baidu</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 等同于 getValue(KEY.bytedance)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>所以在这种场景下更适合使用 Symbol，我们不关心值本身，只关心值的唯一性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> KEY</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  alibaba</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">  baidu</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#E06C75;">  bytedance</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="避免对象属性覆盖" tabindex="-1">避免对象属性覆盖 <a class="header-anchor" href="#避免对象属性覆盖" aria-label="Permalink to &quot;避免对象属性覆盖&quot;">​</a></h5><p>假设有这样一个函数 fn，需要对传入的对象参数添加一个临时属性 user，但可能该对象参数中已经有这个属性了，如果直接赋值就会覆盖之前的值。此时就可以使用 Symbol 来避免这个问题。</p><p>创建一个 Symbol 数据类型的变量，然后将该变量作为对象参数的属性进行赋值和读取，这样就能避免覆盖的情况，示例代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">o</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// {user: {id: xx, name: yy}}</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">  o</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;zzz&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="补充-类型转换" tabindex="-1">补充：类型转换 <a class="header-anchor" href="#补充-类型转换" aria-label="Permalink to &quot;补充：类型转换&quot;">​</a></h4><h5 id="什么是类型转换" tabindex="-1">什么是类型转换？ <a class="header-anchor" href="#什么是类型转换" aria-label="Permalink to &quot;什么是类型转换？&quot;">​</a></h5><p>JavaScript 这种弱类型的语言，相对于其他高级语言有一个特点，那就是在处理不同数据类型运算或逻辑操作时会强制转换成同一数据类型。如果我们不理解这个特点，就很容易在编写代码时产生 bug。</p><p>通常强制转换的目标数据类型为 String、Number、Boolean 这三种。下面的表格中显示了 6 种基础数据类型转换关系。</p><p>除了不同类型的转换之外，操作同种数据类型也会发生转换。把基本类型的数据换成对应的对象过程称之为“装箱转换”，反过来，把数据对象转换为基本类型的过程称之为“拆箱转换”。</p><p>对于装箱和拆箱转换操作，我们既可以显示地手动实现，比如将 Number 数据类型转换成 Number 对象；也可以通过一些操作触发浏览器显式地自动转换，比如将对 Number 对象进行加法运算。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> o</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 显式装箱</span></span>
<span class="line"><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 显式拆箱</span></span>
<span class="line"><span style="color:#E5C07B;">n</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toPrecision</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 隐式装箱, 实际操作：var tmp = new Number(n);tmp.toPrecision(3);tmp = null;</span></span>
<span class="line"><span style="color:#E06C75;">o</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 隐式拆箱，实际操作:var tmp = o.valueOf();tmp + 2;tmp = null;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="什么时候会触发类型转换" tabindex="-1">什么时候会触发类型转换？ <a class="header-anchor" href="#什么时候会触发类型转换" aria-label="Permalink to &quot;什么时候会触发类型转换？&quot;">​</a></h5><p>下面这些常见的操作会触发隐式地类型转换，我们在编写代码的时候一定要注意。</p><ul><li><p>运算相关的操作符包括 +、-、+=、++、* 、/、%、&lt;&lt;、&amp; 等。</p></li><li><p>数据比较相关的操作符包括 &gt;、&lt;、== 、&lt;=、&gt;=、===。</p></li><li><p>逻辑判断相关的操作符包括 &amp;&amp;、!、||、三目运算符。</p></li></ul><h4 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h4><p>相对于基础类型，引用类型 Object 则复杂很多。简单地说，Object 类型数据就是键值对的集合，键是一个字符串（或者 Symbol） ，值可以是任意类型的值； 复杂地说，Object 又包括很多子类型，比如 Date、Array、Set、RegExp。</p><p>对于 Object 类型，我们重点理解一种常见的操作，即深拷贝。</p><ul><li>由于引用类型在赋值时只传递指针，这种拷贝方式称为浅拷贝。</li><li>而创建一个新的与之相同的引用类型数据的过程称之为深拷贝。</li></ul><p>现在我们来实现一个拷贝函数，支持上面 7 种类型的数据拷贝。</p><p>对于 6 种基础类型，我们只需简单的赋值即可，而 Object 类型变量需要特殊操作。因为通过等号“=”赋值只是浅拷贝，要实现真正的拷贝操作则需要通过遍历键来赋值对应的值，这个过程中如果遇到 Object 类型还需要再次进行遍历。</p><p>为了准确判断每种数据类型，我们可以先通过 typeof 来查看每种数据类型的描述：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(), {}].</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">it</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> it</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [&quot;undefined&quot;, &quot;object&quot;, &quot;boolean&quot;, &quot;string&quot;, &quot;number&quot;, &quot;symbol&quot;, &quot;object&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>发现 null 有些特殊，返回结果和 Object 类型一样都为&quot;object&quot;，所以需要再次进行判断。按照上面分析的结论，我们可以写出下面的函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> clone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> keys</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">		...</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyNames</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">		...</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertySymbols</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	];</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">keys</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> clone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在遍历 Object 类型数据时，我们需要把 Symbol 数据类型也考虑进来，所以不能通过 Object.keys 获取键名或 for...in 方式遍历，而是通过 getOwnPropertyNames 和 getOwnPropertySymbols 函数将键名组合成数组，然后进行遍历。对于键数组长度为 0 的非 Object 类型的数据可直接返回，然后再遍历递归，最终实现拷贝。</p><p>我们在编写递归函数的时候需要特别注意的是，递归调用的终止条件，避免无限递归。那在这个 clone 函数中有没有可能出现无限递归调用呢？</p><p>答案是有的。那就是当对象数据嵌套的时候，比如像下面这种情况，对象 a 的键 b 指向对象 b，对象 b 的键 a 指向对象 a，那么执行 clone 函数就会出现死循环，从而耗尽内存。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">var </span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">a.</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> b</span></span>
<span class="line"><span style="color:#ABB2BF;">b.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>怎么避免这种情况呢？一种简单的方式就是把已添加的对象记录下来，这样下次碰到相同的对象引用时，直接指向记录中的对象即可。要实现这个记录功能，我们可以借助 ES6 推出的 WeakMap 对象，该对象是一组键/值对的集合，其中的键是弱引用的。其键必须是对象，而值可以是任意的。</p><p>我们对 clone 函数改造一下，添加一个 WeakMap 来记录已经拷贝过的对象，如果当前对象已经被拷贝过，那么直接从 WeakMap 中取出，否则重新创建一个对象并加入 WeakMap 中。具体代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> clone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> map</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WeakMap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> deep</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> keys</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">			...</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyNames</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">			...</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertySymbols</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">		];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">keys</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> exist</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">exist</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> exist</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		keys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> deep</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> deep</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="javascript-数据类型总结" tabindex="-1">JavaScript 数据类型总结 <a class="header-anchor" href="#javascript-数据类型总结" aria-label="Permalink to &quot;JavaScript 数据类型总结&quot;">​</a></h4><p>这一课时通过实例与原理相结合，带你深入理解了 JavaScript 的 6 种基础数据类型和 1 种引用数据类型。对于 6 种基础数据类型，我们要熟知它们之间的转换关系，而引用类型则比较复杂，重点讲了如何深拷贝一个对象。其实引用对象的子类型比较多，由于篇幅所限没有进行一一讲解，需要大家在平常工作中继续留心积累。</p><p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。引用数据类型：对象(Object)、数组(Array)、函数(Function)。</p><p>最后布置一道思考题：你能否写出一个函数来判断两个变量是否相等？</p>`,103)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
