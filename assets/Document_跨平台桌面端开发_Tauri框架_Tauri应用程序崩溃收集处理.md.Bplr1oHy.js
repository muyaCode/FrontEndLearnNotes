import{_ as n,c as a,o as p,ah as l}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/crash_reports.0a86f229_Z1kXlPK.D3iERyjr.webp",F=JSON.parse('{"title":"Tauri应用程序崩溃收集处理","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Tauri框架/Tauri应用程序崩溃收集处理.md","filePath":"Document/跨平台桌面端开发/Tauri框架/Tauri应用程序崩溃收集处理.md","lastUpdated":1750954157000}'),e={name:"Document/跨平台桌面端开发/Tauri框架/Tauri应用程序崩溃收集处理.md"};function r(t,s,c,B,i,y){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="tauri应用程序崩溃收集处理" tabindex="-1">Tauri应用程序崩溃收集处理 <a class="header-anchor" href="#tauri应用程序崩溃收集处理" aria-label="Permalink to &quot;Tauri应用程序崩溃收集处理&quot;">​</a></h1><p>尽管 Rust 崩溃很少发生，但也并非不可能。探索如何在 Tauri 应用程序中有效管理这些异常。</p><p>Rust 开发人员不惜一切代价努力避免恐慌，但恐慌偶尔会发生，导致应用程序崩溃。在本文中，我们深入研究了 Tauri 应用程序中管理恐慌的策略，并分享了有关减轻其可能性的见解。</p><h2 id="理解-rust-中的恐慌" tabindex="-1">理解 Rust 中的恐慌 <a class="header-anchor" href="#理解-rust-中的恐慌" aria-label="Permalink to &quot;理解 Rust 中的恐慌&quot;">​</a></h2><p>在 Rust 的上下文中，恐慌意味着无法挽回的错误——程序由于无法克服的问题而无法继续进行的情况。</p><p>Rust 函数通常返回一个 <code>Result&lt;T, E&gt;</code> 值，使您能够控制如何响应潜在错误。但是，在使用第三方 crate 或编写自己的代码时，您可能会遇到使用 <code>unwrap</code> 和 <code>expect</code> 的场景。</p><p>如果结果等于 Err 值，这些函数会引发恐慌。当开发人员确定结果始终是 Ok 值时，通常会使用 <code>unwrap</code> 或 <code>expect</code> 。然而，如果发生不可预见的错误，就会发生恐慌，导致程序停止。</p><h2 id="如何处理-tauri-应用程序中的恐慌" tabindex="-1">如何处理 Tauri 应用程序中的恐慌 <a class="header-anchor" href="#如何处理-tauri-应用程序中的恐慌" aria-label="Permalink to &quot;如何处理 Tauri 应用程序中的恐慌&quot;">​</a></h2><p>应用程序崩溃的重大挑战之一是其不可预测性。您可能拥有数千名用户，但崩溃的检测仍然难以捉摸，除非用户报告问题（这种情况很少见）。</p><p>作为解决此问题的第一步，我们将探讨如何在出现恐慌时接收通知。</p><p>由于 Tauri 作为 Rust 应用程序运行，因此我们可以利用内置的恐慌钩子来监视和处理这些恐慌。考虑以下示例：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::panic;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">panic</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">set_hook</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">info</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        error!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Panicked: {:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">generate_context!</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">expect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error while running tauri application&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>每当发生恐慌时，上面的代码都会记录一条错误消息。此外，您可以使用 info 参数来获得有关恐慌的更多见解。将 <code>info</code> 转换为字符串会产生一条有用的消息，其中包括发生紧急情况的文件和行。</p><p>在这个钩子中，您可以自由地实施任何行动方案！虽然上面的示例在开发期间就足够了——因为您可以在控制台中查看日志——但它在生产环境中可能不那么有效，因为您无法立即访问此信息。</p><h2 id="生产中的恐慌管理" tabindex="-1">生产中的恐慌管理 <a class="header-anchor" href="#生产中的恐慌管理" aria-label="Permalink to &quot;生产中的恐慌管理&quot;">​</a></h2><p>在生产版本中，有几种解决应用程序崩溃的策略：</p><p><strong>1. 将错误记录到文件中</strong></p><p>不幸的是，现阶段，Tauri Log Plugin 尚未初始化，因此无法使用。但是， <code>std::fs</code> 模块可用于将错误详细信息写入文件。如果用户报告问题，您可以请求他们与您共享此文件。</p><p><strong>2. 将错误发送到服务器</strong></p><p>这种替代方案通常更有利，因为它允许您获取错误信息而不需要用户发送文件。然而，考虑隐私影响并确保敏感的用户信息不会无意中发送到远程服务器至关重要。</p><p>虽然 Aptabase 主要不是作为崩溃报告服务而设计的，但它可以用作此目的的轻量级且注重隐私的解决方案。</p><p>看看这个例子：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::panic;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">            tauri_plugin_aptabase</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;YOUR_KEY_HERE&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">with_panic_hook</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">client</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                 let</span><span style="color:#E06C75;"> location</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> info</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">location</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">loc</span><span style="color:#56B6C2;">|</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}:{}:{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">loc</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">file</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">loc</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">line</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">loc</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">column</span><span style="color:#ABB2BF;">())).</span><span style="color:#61AFEF;">unwrap_or_else</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">||</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">                 client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">track_event</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;panic&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Some</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">json!</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#98C379;">                   &quot;info&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{} ({})&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">                 })));</span></span>
<span class="line"><span style="color:#ABB2BF;">                }))</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">generate_context!</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">expect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error while running tauri application&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>此代码与前面的示例非常相似，但它不是将错误写入文件，而是将其传输到 Aptabase。因此，您可以直接从 Aptabase 仪表板查看错误以及其他分析。</p><p>除此之外，Aptabase 还可以在前端使用来监视 Web 视图中发生的错误。以下是如何捕获所有未处理的拒绝（承诺）和其他错误的示例：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">import</span><span style="color:#ABB2BF;"> { trackEvent } </span><span style="color:#E06C75;">from</span><span style="color:#98C379;"> &quot;@aptabase/tauri&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;unhandledrejection&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">  trackEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;promise_rejected&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">    message</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">.reason?.message </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">.reason </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> e</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">  trackEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;js_error&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">    message</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">.message,</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这是 Aptabase 仪表板上的错误报告的样子。</p><p><img src="`+o+'" alt="Error Reporting screenshots"></p><p>这是所有错误的聚合视图，因此您可以轻松识别最常见的问题、出现这些问题的应用程序版本以及用户使用的操作系统。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>我一直在我个人的 Tauri 应用程序中使用它，并发现它是一种高效但简单的恐慌管理技术。虽然它没有提供完整的解决方案，但它显着推进了您增强应用程序稳定性的旅程。</p>',31)]))}const A=n(e,[["render",r]]);export{F as __pageData,A as default};
