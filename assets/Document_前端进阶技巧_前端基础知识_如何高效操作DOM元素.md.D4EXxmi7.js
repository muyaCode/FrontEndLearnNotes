import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const C=JSON.parse('{"title":"如何高效操作 DOM 元素","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端进阶技巧/前端基础知识/如何高效操作DOM元素.md","filePath":"Document/前端进阶技巧/前端基础知识/如何高效操作DOM元素.md","lastUpdated":1750954157000}'),o={name:"Document/前端进阶技巧/前端基础知识/如何高效操作DOM元素.md"};function e(t,s,r,c,B,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="如何高效操作-dom-元素" tabindex="-1">如何高效操作 DOM 元素 <a class="header-anchor" href="#如何高效操作-dom-元素" aria-label="Permalink to &quot;如何高效操作 DOM 元素&quot;">​</a></h1><h2 id="什么是-dom" tabindex="-1">什么是 DOM <a class="header-anchor" href="#什么是-dom" aria-label="Permalink to &quot;什么是 DOM&quot;">​</a></h2><p><strong>DOM (Document Object Model，文档对象模型)</strong></p><p>是 JavaScript 操作 HTML 的接口 (这里只讨论属于前端范畴的 HTMLDOM)</p><p>属于前端的入门知识，同样也是核心内容，因为大部分前端功能都需要借助 DOM 来实现</p><ul><li>动态渲染列表、表格表单数据</li><li>监听点击、提交事件</li><li>懒加载一些脚本或样式文件</li><li>实现动态展开树组件，表单组件级联等这类复杂的操作</li></ul><h3 id="dom-v3-标准主要由-3-个部分组成" tabindex="-1">DOM V3 标准主要由 3 个部分组成 <a class="header-anchor" href="#dom-v3-标准主要由-3-个部分组成" aria-label="Permalink to &quot;DOM V3 标准主要由 3 个部分组成&quot;">​</a></h3><ul><li>DOM 节点</li><li>DOM 事件 <ul><li>DOM 事件和终止控制器有一定的关联性，将在 DOM 事件中详细讨论</li></ul></li><li>选择区域 <ul><li>选择区域的使用场景有限，一般用于富文本编辑类业务，我们不做深入讨论</li></ul></li></ul><h4 id="dom-节点概念区分" tabindex="-1">DOM 节点概念区分 <a class="header-anchor" href="#dom-节点概念区分" aria-label="Permalink to &quot;DOM 节点概念区分&quot;">​</a></h4><ul><li><strong>标签</strong>是 HTML 的基本单位，比如 p、div、input</li><li><strong>节点</strong>是 DOM 树的基本单位，有多种类型，比如注释节点、文本节点</li><li><strong>元素</strong>是节点中的一种，与 HTML 标签相对应，比如 p 标签会对应 p 元素</li></ul><h4 id="举例说明" tabindex="-1">举例说明 <a class="header-anchor" href="#举例说明" aria-label="Permalink to &quot;举例说明&quot;">​</a></h4><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;亚里士朱德&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>“P”是标签，生成 DOM 树的时候会产生两个节点</p><ul><li>元素节点 p</li><li>字符串为“亚里士朱德”的文本节点</li></ul><h3 id="会框架更要会-dom" tabindex="-1">会框架更要会 DOM <a class="header-anchor" href="#会框架更要会-dom" aria-label="Permalink to &quot;会框架更要会 DOM&quot;">​</a></h3><ul><li>有的前端工程师觉得认为熟悉框架就行，不需要详细了解 DOM</li><li>但作为高级/资深前端工程师</li><li>不仅应该对 DOM 有深入的理解</li><li>还应该能够借此开发框架插件、修改框架甚至能写出自己的框架</li></ul><h2 id="为什么说-dom-操作耗时" tabindex="-1">为什么说 DOM 操作耗时 <a class="header-anchor" href="#为什么说-dom-操作耗时" aria-label="Permalink to &quot;为什么说 DOM 操作耗时&quot;">​</a></h2><p>要解释 DOM 操作带来的性能问题，我们不得不提一下浏览器的工作机制。</p><h3 id="线程切换" tabindex="-1">线程切换 <a class="header-anchor" href="#线程切换" aria-label="Permalink to &quot;线程切换&quot;">​</a></h3><h4 id="浏览器包括两个引擎" tabindex="-1">浏览器包括两个引擎 <a class="header-anchor" href="#浏览器包括两个引擎" aria-label="Permalink to &quot;浏览器包括两个引擎&quot;">​</a></h4><ul><li>渲染引擎(也称浏览器内核)</li><li>JavaScript 引擎</li></ul><p>优势:开发方便，避免多线程下的死锁、竞争等问题 劣势:失去了并发能力</p><p>如果你对浏览器结构有一定了解，就会知道浏览器包含渲染引擎（也称浏览器内核）和 JavaScript 引擎，它们都是单线程运行。单线程的优势是开发方便，避免多线程下的死锁、竞争等问题，劣势是失去了并发能力。</p><p>浏览器为了避免两个引擎同时修改页面而造成渲染结果不一致的情况，增加了另外一个机制，这两个引擎具有互斥性，也就是说在某个时刻只有一个引擎在运行，另一个引擎会被阻塞。操作系统在进行线程切换的时候需要保存上一个线程执行时的状态信息并读取下一个线程的状态信息，俗称上下文切换。而这个操作相对而言是比较耗时的。</p><p>每次 DOM 操作就会引发线程的上下文切换——从 JavaScript 引擎切换到渲染引擎执行对应操作，然后再切换回 JavaScript 引擎继续执行，这就带来了性能损耗。单次切换消耗的时间是非常少的，但是如果频繁地大量切换，那么就会产生性能问题。</p><p>比如下面的测试代码，循环读取一百万次 DOM 中的 body 元素的耗时是读取 JSON 对象耗时的 10 倍。</p><p>为了避免两个引擎同时修改页面而造成渲染结果不一致的情况这两个引擎具有<strong>互斥性</strong></p><p>也就是说在某个时刻只有一个引擎在运行另一个引擎会被阻塞，操作系统在进行线程切换的时候需要保存上一个线程执行时的状态信息并读取下一个线程的状态信息，俗称上下文切换而这个操作相对而言是比较耗时的</p><p>从 JavaScript 引擎切换到染引擎执行对应操作，然后再切换回 JavaScript 引擎继续执行这就带来了<strong>性能损耗</strong></p><p>测试代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 测试次数：一百万次</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> times</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1000000</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 缓存body元素</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;object&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 循环赋值对象作为对照参考</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">times</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> body</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">timeEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;object&#39;</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">// object: 1.77197265625ms</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;dom&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 循环读取body元素引发线程切换</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">timeEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;dom&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// dom: 18.302001953125ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>虽然这个例子比较极端，循环次数有些夸张，但如果在循环中包含一些复杂的逻辑或者说涉及到多个元素时，就会造成不可忽视的性能损耗。</p><h4 id="重新渲染" tabindex="-1">重新渲染 <a class="header-anchor" href="#重新渲染" aria-label="Permalink to &quot;重新渲染&quot;">​</a></h4><p>渲染过程中最耗时的两个步骤为<strong>重排 (Reflow)</strong> 与 <strong>重绘 (Repaint)</strong></p><p>渲染页面时会将 HTML 和 CSS 分别解析成 DOM 树和 CSSOM 树然后合并进行排布，再绘制成我们可见的页面</p><p>如果在操作 DOM 时涉及到元素、样式的修改就会引起渲染引擎重新计算样式生成 CSSOM 树</p><p>同时还有可能触发对元素的重新排布 (简称“重排”)和重新绘制(简称“重绘”)</p><h5 id="影响到其他元素排布的操作就会引起重排-继而引发重绘" tabindex="-1">影响到其他元素排布的操作就会引起重排，继而引发重绘 <a class="header-anchor" href="#影响到其他元素排布的操作就会引起重排-继而引发重绘" aria-label="Permalink to &quot;影响到其他元素排布的操作就会引起重排，继而引发重绘&quot;">​</a></h5><p>比如:</p><ul><li>修改元素边距、大小</li><li>添加、删除元素</li><li>改变窗口大小</li></ul><h5 id="与之相反的操作则只会引起重绘" tabindex="-1">与之相反的操作则只会引起重绘 <a class="header-anchor" href="#与之相反的操作则只会引起重绘" aria-label="Permalink to &quot;与之相反的操作则只会引起重绘&quot;">​</a></h5><p>比如:</p><ul><li>设置背景图片</li><li>修改字体颜色</li><li>改变 visibility 属性值</li></ul><p>如果想了解更多关于重绘和重排的样式属性，可以参看这个网址：<a href="https://csstriggers.com/" target="_blank" rel="noreferrer">https://csstriggers.com/</a></p><h5 id="两段验证代码" tabindex="-1">两段验证代码 <a class="header-anchor" href="#两段验证代码" aria-label="Permalink to &quot;两段验证代码&quot;">​</a></h5><p>我们通过 Chrome 提供的性能分析工具来对渲染耗时进行分析。</p><p>第一段代码，通过修改 div 元素的边距来触发重排，渲染耗时（粗略地认为渲染耗时为紫色 Rendering 事件和绿色 Painting 事件耗时之和）3045 毫秒。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> times</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	html</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> \`&lt;div&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">i</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/div&gt;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> html</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> divs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">forEach</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">divs</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">div</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	div</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">margin</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 2</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;10px&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>第二段代码，修改 div 元素字体颜色来触发重绘，得到渲染耗时 2359 ms。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> times</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	html</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> \`&lt;div&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">i</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/div&gt;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> html</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> divs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">forEach</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">divs</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">div</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	div</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 2</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;red&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;green&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>从两段测试代码中可以看出，重排渲染耗时明显高于重绘，同时两者的 Painting 事件耗时接近，也印证了重排会导致重绘。</p><h2 id="高校操作-dom-元素" tabindex="-1">高校操作 DOM 元素 <a class="header-anchor" href="#高校操作-dom-元素" aria-label="Permalink to &quot;高校操作 DOM 元素&quot;">​</a></h2><h3 id="高校操作-dom-在循环外操作元素" tabindex="-1">高校操作 DOM：在循环外操作元素 <a class="header-anchor" href="#高校操作-dom-在循环外操作元素" aria-label="Permalink to &quot;高校操作 DOM：在循环外操作元素&quot;">​</a></h3><p>比如下面两段测试代码对比了读取 1000 次 JSON 对象以及访问 1000 次 body 元素的耗时差异，相差一个数量级。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> times</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;switch&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> void</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">timeEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;switch&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1.873046875ms</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;batch&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	body</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> void</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">timeEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;batch&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 0.846923828125ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>当然即使在循环外也要尽量减少操作元素，因为不知道他人调用你的代码时是否处于循环中。</p><h5 id="批量操作元素" tabindex="-1">批量操作元素 <a class="header-anchor" href="#批量操作元素" aria-label="Permalink to &quot;批量操作元素&quot;">​</a></h5><p>比如说要创建 1 万个 div 元素，在循环中直接创建再添加到父元素上耗时会非常多。如果采用字符串拼接的形式，先将 1 万个 div 元素的 html 字符串拼接成一个完整字符串，然后赋值给 body 元素的 innerHTML 属性就可以明显减少耗时。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> times</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;createElement&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> div</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">timeEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;createElement&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 54.964111328125ms</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;innerHTML&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	html</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> &quot;&lt;div&gt;&lt;/div&gt;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> html</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 31.919921875ms</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">timeEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;innerHTML&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>虽然通过修改 innerHTML 来实现批量操作的方式效率很高，但它并不是万能的。比如要在此基础上实现事件监听就会略微麻烦，只能通过事件代理或者重新选取元素再进行单独绑定。批量操作除了用在创建元素外也可以用于修改元素属性样式，比如下面的例子。</p><p>创建 2 万个 div 元素，以单节点树结构进行排布，每个元素有一个对应的序号作为文本内容。现在通过 style 属性对第 1 个 div 元素进行 2 万次样式调整。下面是直接操作 style 属性的代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> times</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`&lt;div&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">i</span><span style="color:#C678DD;">}\${</span><span style="color:#E06C75;">html</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/div&gt;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> html</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> div</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	div</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fontSize</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 12</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 12</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;px&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	div</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 2</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;red&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;green&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	div</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">margin</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 12</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 12</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;px&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>如果将需要修改的样式属性放入 JavaScript 数组，然后对这些修改进行 reduce 操作，得到最终需要的样式之后再设置元素属性，那么性能会提升很多。代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> times</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">  html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`&lt;div&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">i</span><span style="color:#C678DD;">}\${</span><span style="color:#E06C75;">html</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/div&gt;\`</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> queue</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [] </span><span style="color:#7F848E;font-style:italic;">//  创建缓存样式的数组</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> microTask</span><span style="color:#7F848E;font-style:italic;"> // 执行修改样式的微任务</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> st</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> div</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 合并样式</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> style</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">acc</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cur</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({...</span><span style="color:#E06C75;">acc</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">cur</span><span style="color:#ABB2BF;">}), {})</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> prop</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> style</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    div</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> style</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  queue</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#E06C75;">  microTask</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> setStyle</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">style</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 创建微任务</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">microTask</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">microTask</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">st</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> times</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> style</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    fontSize</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 12</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 12</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;px&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    color</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 2</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &#39;red&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &#39;green&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    margin</span><span style="color:#ABB2BF;">:  (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 12</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 12</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;px&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  setStyle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>浏览器性能调试查看，发现紫色的 Rendering 事件耗时有所减少。</p><p>virtualDOM 之所以号称高性能，其实现原理就与此类似</p><h5 id="缓存元素集合" tabindex="-1">缓存元素集合 <a class="header-anchor" href="#缓存元素集合" aria-label="Permalink to &quot;缓存元素集合&quot;">​</a></h5><p>比如将通过选择器函数获取到的 DOM 元素赋值给变量，之后通过变量操作而不是再次使用选择器函数来获取。 下面举例说明，假设我们现在要将上面代码所创建的 1 万个 div 元素的文本内容进行修改。每次重复使用获取选择器函数来获取元素</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`div\`</span><span style="color:#ABB2BF;">)[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 先定义变量:性能会提升很多</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果能够将元素集合赋值给 JavaScript 变量，每次通过变量去修改元素，那么性能将会得到不小的提升。</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> divs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> divs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	divs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>浏览器对比调试两者耗时可以看到，两者的渲染时间较为接近。但缓存元素的方式在黄色的 Scripting 耗时上具有明显优势。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>除了这些方法之外，还有一些原则也可能帮助我们提升渲染性能，比如：</p><ul><li><p>尽量不要使用复杂的匹配规则和复杂的样式，从而减少渲染引擎计算样式规则生成 CSSOM 树的时间；</p></li><li><p>尽量减少重排和重绘影响的区域；</p></li><li><p>使用 CSS3 特性来实现动画效果。</p></li></ul><p>希望你首先能理解原因，然后记住这些方法和原则，编写出高性能代码。</p><p>最后布置一道思考题：说一说你还知道哪些提升渲染速度的方法和原则？</p><ul><li>利用绝对定位 脱离文档流，这样操作定位里面的内容不会引起外部的重排</li><li>有动画的话，也可以考虑分层渲染的机制。加上 will-change</li><li>dom 的操作进行 json 数据化，只操作一个根节点即可</li></ul>`,76)]))}const A=n(o,[["render",e]]);export{C as __pageData,A as default};
