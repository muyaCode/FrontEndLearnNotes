import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"Tauri 应用日志记录","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Tauri框架/Tauri 进行日志记录.md","filePath":"Document/跨平台桌面端开发/Tauri框架/Tauri 进行日志记录.md","lastUpdated":1750954157000}'),o={name:"Document/跨平台桌面端开发/Tauri框架/Tauri 进行日志记录.md"};function e(r,s,t,c,B,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="tauri-应用日志记录" tabindex="-1">Tauri 应用日志记录 <a class="header-anchor" href="#tauri-应用日志记录" aria-label="Permalink to &quot;Tauri 应用日志记录&quot;">​</a></h1><p>日志记录是任何应用程序的重要组成部分。这篇文章将向你展示如何使用官方 Tauri 日志插件来记录带有大量示例的消息。</p><p>在本指南中，我们将介绍您需要了解的有关使用 Tauri 进行日志记录的所有信息。我们将深入探讨 Tauri 的具体日志功能、如何安装官方插件、如何从 Rust 和 Javascript 生成日志、如何配置应用程序以过滤各种类型的事件。</p><p>无论您是初学者还是经验丰富的开发人员，本指南都适合每个人。最后，您将全面了解如何有效地使用 Tauri 进行日志记录以及如何使用这些日志来改进您的应用程序。那么，让我们开始吧！</p><h2 id="标准记录" tabindex="-1">标准记录 <a class="header-anchor" href="#标准记录" aria-label="Permalink to &quot;标准记录&quot;">​</a></h2><p>您需要知道的第一件事是，使用 Tauri 创建的应用程序默认情况下不具有任何日志记录功能。这听起来可能是一件消极的事情，但实际上是一件好事。这意味着您可以选择最适合您需求的日志库。</p><p>我们将在本指南中探索官方 Tauri Log Plugin，它基于非常流行的 Log Rust 箱。</p><p>首先，我们将日志箱添加到 Cargo.toml 文件中来安装它：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">dependencies</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#E06C75;">log</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;^0.4&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>该板条箱添加了各种宏，您可以使用它们从 Rust 生成日志。最常见的是 <code>info!</code> 、 <code>warn!</code> 、 <code>error!</code> 和 <code>debug!</code> 。因此，让我们尝试将其添加到我们的命令之一：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[tauri::command]</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    info!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;The name param is {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello, {}! You&#39;ve been greeted from Rust!&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果您运行该应用程序并查找日志，您将看不到任何内容。这是因为我们还没有为应用程序配置日志输出。这就是官方 Tauri Log Plugin 的用武之地，它不仅提供了一种将日志输出到各个目的地的方法，而且还提供了一种过滤日志的方法，并具有一个 JavaScript 库来从 JavaScript 进行日志记录。</p><h2 id="安装-tauri-日志插件" tabindex="-1">安装 Tauri 日志插件 <a class="header-anchor" href="#安装-tauri-日志插件" aria-label="Permalink to &quot;安装 Tauri 日志插件&quot;">​</a></h2><p>我们首先将插件箱添加到我们的 Cargo.toml 文件中：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">dependencies</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#E06C75;">log</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;^0.4&quot;</span></span>
<span class="line"><span style="color:#E06C75;">tauri</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">log</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">git</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;https://github.com/tauri-apps/plugins-workspace&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">branch</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;dev&quot;</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现在我们只需要将插件添加到 Tauri 的 <code>main.rs</code> 文件上的构建管道中：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri_plugin_log</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// &lt;-- this line here</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">invoke_handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">generate_handler!</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">greet</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">generate_context!</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">expect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error while running tauri application&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果我们启动应用程序并再次触发命令，我们现在会在终端上看到我们的日志消息，以及其他一些消息！</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[2023-04-04][14:11:11][tao::platform_impl::platform::window_delegate][TRACE] Triggered </span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;">windowDidResignKey:</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">[2023-04-04][14:11:11][tao::platform_impl::platform::window_delegate][TRACE] </span><span style="color:#61AFEF;">Completed</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">windowDidResignKey:</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">[2023-04-04][14:11:12][tao::platform_impl::platform::window_delegate][TRACE] </span><span style="color:#61AFEF;">Triggered</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">windowDidBecomeKey:</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">[2023-04-04][14:11:12][tao::platform_impl::platform::window_delegate][TRACE] </span><span style="color:#61AFEF;">Completed</span><span style="color:#98C379;"> \`</span><span style="color:#61AFEF;">windowDidBecomeKey:</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">[2023-04-04][14:11:17][hello_tauri][INFO] </span><span style="color:#61AFEF;">The</span><span style="color:#98C379;"> name</span><span style="color:#98C379;"> param</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> Jon</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="从-javascript-记录" tabindex="-1">从 JavaScript 记录 <a class="header-anchor" href="#从-javascript-记录" aria-label="Permalink to &quot;从 JavaScript 记录&quot;">​</a></h2><p>Tauri 的美妙之处在于您只需使用 JavaScript 就可以完成几乎任何事情，日志记录也不例外。 Tauri 日志插件附带一个 JavaScript 库，您可以使用它从 JavaScript 进行日志记录。</p><p>您可以使用 npm （或 yarn/pnpm）安装它：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> https://github.com/tauri-apps/tauri-plugin-log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后从库中导入相同的 <code>info</code> 、 <code>warn</code> 、 <code>error</code> 和 <code>debug</code> 函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;tauri-plugin-log-api&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> App</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#C678DD;">  async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Will call run a command now...&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// &lt;-- this line here</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#61AFEF;"> invoke</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;greet&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果您再次运行该应用程序，您将在终端上看到该消息以及来自 Rust 的其他日志。</p><p>你可能认为一切都结束了，但事实并非如此。继续阅读一些额外的简洁功能。</p><h2 id="配置-tauri-日志插件" tabindex="-1">配置 Tauri 日志插件 <a class="header-anchor" href="#配置-tauri-日志插件" aria-label="Permalink to &quot;配置 Tauri 日志插件&quot;">​</a></h2><p>默认情况下，插件会将日志输出到：</p><ul><li>Stdout，如果您从开发中运行它，这就是您的终端；</li><li>日志文件，位于用户的主目录中。在哪里可以找到 Tauri Apps 的日志文件？</li></ul><p>但是这个插件（像许多其他插件一样）是高度可配置的，因此您可以更改日志输出以及其他一些设置。</p><p>让我们探讨一下我们可以做的一些事情。</p><h3 id="_1-输出到-webview-控制台" tabindex="-1">1.输出到 webview 控制台 <a class="header-anchor" href="#_1-输出到-webview-控制台" aria-label="Permalink to &quot;1.输出到 webview 控制台&quot;">​</a></h3><p>如果您花费大部分时间在开发工具打开的情况下开发应用程序，您可能会发现将日志输出到 webview 控制台很有用。我们可以通过将 <code>LogTarget::Webview</code> 作为目标添加到插件来做到这一点：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tauri_plugin_log</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">LogTarget</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri_plugin_log</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">targets</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#E5C07B;">    LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Stdout</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Webview</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">]).</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在上面的示例中，日志将被转发到终端和 webview 控制台。要实际在 webview 控制台上查看日志，您需要从 JavaScript 调用 <code>attachConsole</code> ，最好尽早在您的 index.ts/js 文件中调用：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> ReactDOM</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react-dom/client&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./App&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">attachConsole</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;tauri-plugin-log-api&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">attachConsole</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// &lt;-- this line here</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRoot</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> HTMLElement</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">React.StrictMode</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E5C07B;">React.StrictMode</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>![Screenshot of Tauri DevTools showing logs from Rust](./Tauri 进行日志记录.assets/rust-logs-on-devtools.4fae1d32_1ptcRX.webp)</p><p>您可能还会发现为调试和发布版本设置不同的输出目标很有用，这可以通过以下方式实现：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[cfg(debug_assertions)]</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#D19A66;"> LOG_TARGETS</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">LogTarget</span><span style="color:#ABB2BF;">; </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Stdout</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Webview</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[cfg(not(debug_assertions))]</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#D19A66;"> LOG_TARGETS</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">LogTarget</span><span style="color:#ABB2BF;">; </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Stdout</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">LogDir</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri_plugin_log</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">targets</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">LOG_TARGETS</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面的代码将使用 stdout 和 logdir 进行发布版本，使用 stdout 和 webview 进行调试版本。</p><p>您可以对我们接下来将探讨的其他设置使用相同的技术。</p><h3 id="_2-彩色输出" tabindex="-1">2. 彩色输出 <a class="header-anchor" href="#_2-彩色输出" aria-label="Permalink to &quot;2. 彩色输出&quot;">​</a></h3><p>有些日志肯定比其他日志更重要，因此最好有一种方法来区分它们。 Tauri 日志插件允许您为各种不同的日志级别着色，以便您可以轻松发现重要的日志级别。</p><p>我们首先在插件箱上启用 <code>colored</code> 功能：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#E06C75;">log</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;^0.4&quot;</span></span>
<span class="line"><span style="color:#E06C75;">tauri</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">log</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">git</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;https://github.com/tauri-apps/plugins-workspace&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">branch</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;dev&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">features</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;colored&quot;</span><span style="color:#ABB2BF;">] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后在插件生成器上启用它：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">    tauri_plugin_log</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">targets</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#E5C07B;">        LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Stdout</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">        LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Webview</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ])</span></span>
<span class="line"><span style="color:#ABB2BF;">+   .</span><span style="color:#61AFEF;">with_colors</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ColoredLevelConfig</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>就是这样！现在，您将看到根据级别不同颜色的日志，例如红色表示错误，黄色表示警告。这是您可能希望为调试和发布版本使用不同配置的另一个设置。</p><h3 id="_3-过滤不需要的日志" tabindex="-1">3. 过滤不需要的日志 <a class="header-anchor" href="#_3-过滤不需要的日志" aria-label="Permalink to &quot;3. 过滤不需要的日志&quot;">​</a></h3><p>我们将探讨的最后一个配置是过滤不需要的日志的能力。您可能已经注意到，由于 Tauri 的内部日志，终端上有相当多的噪音。</p><p><code>log</code> 板条箱非常受欢迎，因此您最终很可能会添加一个依赖项，该依赖项也将它用于自己的日志记录，该依赖项将与您自己的日志一起显示。</p><p>在过滤方面我们能做的第一件事就是提高最低日志级别。默认情况下，插件将输出所有日志，但我们可以通过设置最低日志级别来更改：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">+ </span><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> log</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">LevelFilter</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">    tauri_plugin_log</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">targets</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#E5C07B;">        LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Stdout</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">        LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Webview</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ])</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">with_colors</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ColoredLevelConfig</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">+   .</span><span style="color:#61AFEF;">level</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">LevelFilter</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Warn</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面的代码将仅输出级别为 <code>warn</code> 或更高级别的日志，这可能非常适合发布版本。</p><p>但如果过滤太多，我们也可以按模块过滤。该插件允许您指定要过滤的模块列表和相应的日志级别，如果您想过滤掉特定依赖项的日志，这非常有用：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">    tauri_plugin_log</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">targets</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#E5C07B;">        LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Stdout</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">        LogTarget</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Webview</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ])</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">with_colors</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ColoredLevelConfig</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">+   .</span><span style="color:#61AFEF;">level_for</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;tauri&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">LevelFilter</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Info</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">+   .</span><span style="color:#61AFEF;">level_for</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hyper&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">LevelFilter</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Info</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">level</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">LevelFilter</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面的代码只会输出级别为 <code>info</code> 或更高级别的 <code>tauri</code> 和 <code>hyper</code> 模块的日志，同时保留级别为 <code>debug</code> 或更高。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>就是这样，您现在知道如何从 Rust 和 JavaScript 进行日志记录，以及如何根据您的喜好配置 Tauri 日志插件。我希望这篇文章对您有用！</p><p>如果您有兴趣深入了解用户如何使用您的应用程序，您可能需要查看 Aptabase，这是一个尊重用户隐私的隐私优先分析平台。</p><h2 id="在-tauri-apps-上哪里可以找到日志文件" tabindex="-1">在 Tauri Apps 上哪里可以找到日志文件 <a class="header-anchor" href="#在-tauri-apps-上哪里可以找到日志文件" aria-label="Permalink to &quot;在 Tauri Apps 上哪里可以找到日志文件&quot;">​</a></h2><p>使用 Tauri 的官方 <code>log</code> 插件。在要求用户报告问题和共享日志文件时通常需要这些日志。</p><p>Tauri 应用程序的日志在哪里？嗯，这取决于您运行应用程序的平台。</p><table tabindex="0"><thead><tr><th>平台</th><th>地点</th><th>例子</th></tr></thead><tbody><tr><td>苹果系统</td><td><code>$HOME/Library/Logs/{bundleIdentifier}</code></td><td><code>/Users/Bob/Library/Logs/com.domain.appname</code></td></tr><tr><td>视窗</td><td><code>%APPDATA%\\\${bundleIdentifier}\\logs</code></td><td><code>C:\\Users\\Bob\\AppData\\Roaming\\com.domain.appname\\logs</code></td></tr><tr><td>Linux</td><td><code>$HOME/.config/\${bundleIdentifier}/logs</code></td><td><code>/home/bob/.config/com.domain.appname\\logs</code></td></tr></tbody></table><p>但是 <code>bundleIdentifier</code> 是什么？这是在您的 <code>tauri.conf.json</code> 文件中配置的。例如，如果您有以下配置，则捆绑包标识符将为 <code>com.domain.appname</code> 。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;$schema&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;../node_modules/@tauri-apps/cli/schema.json&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;build&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;beforeBuildCommand&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;npm run build:vite&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;beforeDevCommand&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;npm run dev:vite&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;devPath&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://localhost:5173&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;distDir&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;../dist&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;package&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;productName&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;YourAppName&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.3.2&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;tauri&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;bundle&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;active&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;category&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;DeveloperTool&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;identifier&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;com.domain.appname&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;">      ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,67)]))}const d=n(o,[["render",e]]);export{u as __pageData,d as default};
