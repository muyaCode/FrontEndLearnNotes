import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"08_JavaScript 性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端性能优化专题/08_JavaScript性能优化.md","filePath":"Document/前端性能优化专题/08_JavaScript性能优化.md","lastUpdated":1750954157000}'),o={name:"Document/前端性能优化专题/08_JavaScript性能优化.md"};function e(t,s,r,c,B,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_08-javascript-性能优化" tabindex="-1">08_JavaScript 性能优化 <a class="header-anchor" href="#_08-javascript-性能优化" aria-label="Permalink to &quot;08_JavaScript 性能优化&quot;">​</a></h1><h2 id="内存管理" tabindex="-1">内存管理 <a class="header-anchor" href="#内存管理" aria-label="Permalink to &quot;内存管理&quot;">​</a></h2><ul><li>内存：由可读写单元组成， 表示一片可操作空间</li><li>管理：人为的去操作一片空间的申请、使用和释放</li><li>内存管理：开发者主动申请空间、使用空间、释放</li><li>空间管理流程：申请一使用一释放</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 申请内存空间</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用内存空间</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;lg&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 释放内存空间</span></span>
<span class="line"><span style="color:#E06C75;">obj</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="垃圾回收与常见-gc-算法" tabindex="-1">垃圾回收与常见 GC 算法 <a class="header-anchor" href="#垃圾回收与常见-gc-算法" aria-label="Permalink to &quot;垃圾回收与常见 GC 算法&quot;">​</a></h2><h3 id="javascript-中的垃圾" tabindex="-1">JavaScript 中的垃圾 <a class="header-anchor" href="#javascript-中的垃圾" aria-label="Permalink to &quot;JavaScript 中的垃圾&quot;">​</a></h3><ul><li>JavaScript 中内存管理是自动的</li><li>对象不再被引用时是垃圾</li><li>对象不能从根上访问到时是垃圾</li></ul><h3 id="javascript-中的可达对象" tabindex="-1">JavaScript 中的可达对象 <a class="header-anchor" href="#javascript-中的可达对象" aria-label="Permalink to &quot;JavaScript 中的可达对象&quot;">​</a></h3><ul><li>可以访问到的对象就是可达对象 (引用、作用域链)</li><li>可达的标准就是从根出发是否能够被找到</li><li>JavaScript 中的根就可以理解为是全局变量对象</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> objGroup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">obj2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> obj2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	obj2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prev</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> obj1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">o1</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">obj1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">o2</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">obj2</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> objgroup</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;obj1&quot;</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;obj2&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="gc-算法介绍" tabindex="-1">GC 算法介绍 <a class="header-anchor" href="#gc-算法介绍" aria-label="Permalink to &quot;GC 算法介绍&quot;">​</a></h3><h4 id="gc-定义与作用" tabindex="-1">GC 定义与作用 <a class="header-anchor" href="#gc-定义与作用" aria-label="Permalink to &quot;GC 定义与作用&quot;">​</a></h4><ul><li>GC 就是垃圾回收机制的简写</li><li>GC 可以找到内存中的垃圾、并释放和回收空间</li></ul><h4 id="gc-里的垃圾是什么" tabindex="-1">GC 里的垃圾是什么 <a class="header-anchor" href="#gc-里的垃圾是什么" aria-label="Permalink to &quot;GC 里的垃圾是什么&quot;">​</a></h4><p>程序中不再需要使用的对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> func</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;lg&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> is a coder\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>程序中不能再访问到的对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> func</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;lg&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> is a coder\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="gc-算法是什么" tabindex="-1">GC 算法是什么 <a class="header-anchor" href="#gc-算法是什么" aria-label="Permalink to &quot;GC 算法是什么&quot;">​</a></h3><ul><li>GC 是一种机制，垃圾回收器完成具体的工作</li><li>工作的内容就是查找垃圾释放空间、回收空间</li><li>算法就是工作时查找和回收所遵循的规则</li></ul><h3 id="常见-gc-算法" tabindex="-1">常见 GC 算法 <a class="header-anchor" href="#常见-gc-算法" aria-label="Permalink to &quot;常见 GC 算法&quot;">​</a></h3><h4 id="_1-引用计数" tabindex="-1">1.引用计数 <a class="header-anchor" href="#_1-引用计数" aria-label="Permalink to &quot;1.引用计数&quot;">​</a></h4><p>引用计数算法</p><ul><li>核心思想:设置引用数，判断当前引用数是否为 0</li><li>引用计数器</li><li>引用关系改变时修改引用数字</li><li>引用数字为 0 时立即回收</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user3</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">33</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> nameList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">user1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">user2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">user3</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> num1</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> num2</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>引用计数算法优点</p><ul><li>发现垃圾时立即回收</li><li>最大限度减少程序暂停卡顿时间</li></ul><p>引用计数算法缺点</p><ul><li>无法回收循环引用的对象</li><li>资源和时间开销大</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">	obj1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> obj2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	obj2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> obj1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &quot;lg is a coder!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_2-标记清除" tabindex="-1">2.标记清除 <a class="header-anchor" href="#_2-标记清除" aria-label="Permalink to &quot;2.标记清除&quot;">​</a></h4><h5 id="标记清除算法" tabindex="-1">标记清除算法 <a class="header-anchor" href="#标记清除算法" aria-label="Permalink to &quot;标记清除算法&quot;">​</a></h5><ul><li>核心思想: 分标记和清除二个阶段完成</li><li>遍历所有对象找标记活动对象</li><li>遍历所有对象清除没有标记对象</li><li>回收相应的空间</li></ul><h5 id="标记清除算法的优缺点" tabindex="-1">标记清除算法的优缺点 <a class="header-anchor" href="#标记清除算法的优缺点" aria-label="Permalink to &quot;标记清除算法的优缺点&quot;">​</a></h5><p>待定</p><h4 id="_3-标记整理" tabindex="-1">3.标记整理 <a class="header-anchor" href="#_3-标记整理" aria-label="Permalink to &quot;3.标记整理&quot;">​</a></h4><h5 id="标记整理算法原理" tabindex="-1">标记整理算法原理 <a class="header-anchor" href="#标记整理算法原理" aria-label="Permalink to &quot;标记整理算法原理&quot;">​</a></h5><ul><li>标记整理可以看做是标记清除的增强</li><li>标记阶段的操作和标记清除一致</li><li>清除阶段会先执行整理，移动对象位置</li></ul><p>...图例图解</p><h4 id="_4-分代回收" tabindex="-1">4.分代回收 <a class="header-anchor" href="#_4-分代回收" aria-label="Permalink to &quot;4.分代回收&quot;">​</a></h4><p>看以下 V8 引擎</p><h2 id="v8-引擎的垃圾回收" tabindex="-1">V8 引擎的垃圾回收 <a class="header-anchor" href="#v8-引擎的垃圾回收" aria-label="Permalink to &quot;V8 引擎的垃圾回收&quot;">​</a></h2><h3 id="认识-v8" tabindex="-1">认识 V8 <a class="header-anchor" href="#认识-v8" aria-label="Permalink to &quot;认识 V8&quot;">​</a></h3><ul><li>V8 是一款主流的 JavaScript 执行引擎</li><li>V8 采用即时编译</li><li>V8 内存设限</li></ul><h3 id="v8-垃圾回收策略" tabindex="-1">V8 垃圾回收策略 <a class="header-anchor" href="#v8-垃圾回收策略" aria-label="Permalink to &quot;V8 垃圾回收策略&quot;">​</a></h3><ul><li>采用分代回收的思想</li><li>内存分为新生代、老生代</li><li>针对不同对象采用不同算法</li></ul><h3 id="v8-中常用-gc-算法" tabindex="-1">V8 中常用 GC 算法 <a class="header-anchor" href="#v8-中常用-gc-算法" aria-label="Permalink to &quot;V8 中常用 GC 算法&quot;">​</a></h3><ul><li>分代回收</li><li>空间复制</li><li>标记清除</li><li>标记整理</li><li>标记增量</li></ul><h3 id="v8-内存分配" tabindex="-1">V8 内存分配 <a class="header-anchor" href="#v8-内存分配" aria-label="Permalink to &quot;V8 内存分配&quot;">​</a></h3><ul><li>V8 内存空间一分为二</li><li>小空间用于存储新生代对象 (32M 16M)</li><li>新生代指的是存活时间较短的对象</li></ul><h3 id="新生代对象回收实现" tabindex="-1">新生代对象回收实现 <a class="header-anchor" href="#新生代对象回收实现" aria-label="Permalink to &quot;新生代对象回收实现&quot;">​</a></h3><ul><li>回收过程采用复制算法 + 标记整理</li><li>新生代内存区分为二个等大小空间</li><li>使用空间为 From,空闲空间为 To</li><li>活动对象存储于 From 空间</li><li>标记整理后将活动对象拷贝至 To</li><li>From 与 To 交换空间完成释放</li></ul><h3 id="回收细节说明" tabindex="-1">回收细节说明 <a class="header-anchor" href="#回收细节说明" aria-label="Permalink to &quot;回收细节说明&quot;">​</a></h3><ul><li>拷贝过程中可能出现晋升</li><li>晋升就是将新生代对象移动至老生代</li><li>一轮 GC 还存活的新生代需要晋升</li><li>To 空间的使用率超过 25%</li></ul><h3 id="老年代对象回收实现" tabindex="-1">老年代对象回收实现 <a class="header-anchor" href="#老年代对象回收实现" aria-label="Permalink to &quot;老年代对象回收实现&quot;">​</a></h3><ul><li>主要采用标记清除、标记整理、增量标记算法</li><li>首先使用标记清除完成垃圾空间的回收</li><li>采用标记整理进行空间优化</li><li>采用增量标记进行效率优化</li></ul><h3 id="细节对比" tabindex="-1">细节对比 <a class="header-anchor" href="#细节对比" aria-label="Permalink to &quot;细节对比&quot;">​</a></h3><ul><li>新生代区域垃圾回收使用空间换时间</li><li>老生代区域垃圾回收不适合复制算法</li></ul><h3 id="v8-总结" tabindex="-1">V8 总结 <a class="header-anchor" href="#v8-总结" aria-label="Permalink to &quot;V8 总结&quot;">​</a></h3><ul><li>V8 是一款主流的 JavaScript 执行引擎</li><li>V8 内存设置上限</li><li>V8 采用基于分代回收思想实现垃圾回收</li><li>V8 内存分为新生代和老生代</li><li>V8 垃圾回收常见的 GC 算法</li></ul><h2 id="浏览器-performance-性能-工具" tabindex="-1">浏览器 Performance(性能)工具 <a class="header-anchor" href="#浏览器-performance-性能-工具" aria-label="Permalink to &quot;浏览器 Performance(性能)工具&quot;">​</a></h2><h3 id="为什么使用-performance" tabindex="-1">为什么使用 Performance <a class="header-anchor" href="#为什么使用-performance" aria-label="Permalink to &quot;为什么使用 Performance&quot;">​</a></h3><ul><li>GC 的目的是为了实现内存空间的良性循环</li><li>良性循环的基石是合理使用</li><li>时刻关注才能确定是否合理</li><li>Performance 提供多种监控方式</li></ul><h3 id="performance-使用步骤" tabindex="-1">Performance 使用步骤 <a class="header-anchor" href="#performance-使用步骤" aria-label="Permalink to &quot;Performance 使用步骤&quot;">​</a></h3><ul><li>打开浏览器输入目标网址</li><li>进入开发人员工具面板，选择性能</li><li>开启录制功能，访问具体界面</li><li>执行用户行为，一段时间后停止录制</li><li>分析界面中记录的内存信息</li></ul><h3 id="内存问题的外在表现" tabindex="-1">内存问题的外在表现 <a class="header-anchor" href="#内存问题的外在表现" aria-label="Permalink to &quot;内存问题的外在表现&quot;">​</a></h3><ul><li>页面出现延迟加载或经常性暂停</li><li>页面持续性出现糟糕的性能</li><li>页面的性能随时间延长越来越差</li></ul><h3 id="界定内存问题的标准" tabindex="-1">界定内存问题的标准 <a class="header-anchor" href="#界定内存问题的标准" aria-label="Permalink to &quot;界定内存问题的标准&quot;">​</a></h3><ul><li>内存泄露：内存使用持续升高</li><li>内存膨胀：在多数设备上都存在性能问题</li><li>频繁垃圾回收：通过内存变化图进行分析</li></ul><h3 id="监控内存的几种方式" tabindex="-1">监控内存的几种方式 <a class="header-anchor" href="#监控内存的几种方式" aria-label="Permalink to &quot;监控内存的几种方式&quot;">​</a></h3><ul><li>浏览器任务管理器</li><li>Timeline 时序图记录</li><li>堆快照查找分离 DOM</li><li>判断是否存在频繁的垃圾回收</li></ul><h3 id="浏览器的任务管理器监控内存" tabindex="-1">浏览器的任务管理器监控内存 <a class="header-anchor" href="#浏览器的任务管理器监控内存" aria-label="Permalink to &quot;浏览器的任务管理器监控内存&quot;">​</a></h3><p>使用 HTML 页面代码</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;任务管理器监控内存变化&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">bufton</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;btn&quot;</span><span style="color:#ABB2BF;">&gt;Add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> oBtn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;"> .</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&#39;btn &#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    oBtn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> arrList</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;</span><span style="color:#ABB2BF;">/ body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>打开浏览器后通过快捷键调用浏览器的任务管理器，查看运行内存：<strong>shift + esc</strong>，然后右击选择显示：JavaScript 内存，就可以检测页面内存</p><h3 id="事件线-timeline-记录内存变化" tabindex="-1">事件线 TimeLine 记录内存变化 <a class="header-anchor" href="#事件线-timeline-记录内存变化" aria-label="Permalink to &quot;事件线 TimeLine 记录内存变化&quot;">​</a></h3><p>使用 HMTL 页面代码</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;时间线记录内存变化&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;btn&quot;</span><span style="color:#ABB2BF;">&gt;Add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> arrList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 100000</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#E5C07B;">				arrList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000000</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">				document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;btn&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>基于代码页面打开浏览器，然后打开控制台，勾选上性能，运行观察内存变化</p><h3 id="对快照查找分离-dom" tabindex="-1">对快照查找分离 DOM <a class="header-anchor" href="#对快照查找分离-dom" aria-label="Permalink to &quot;对快照查找分离 DOM&quot;">​</a></h3><h4 id="什么是分离-dom" tabindex="-1">什么是分离 DOM <a class="header-anchor" href="#什么是分离-dom" aria-label="Permalink to &quot;什么是分离 DOM&quot;">​</a></h4><ul><li>界面元素存活在 DOM 树上</li><li>垃圾对象时的 DOM 节点</li><li>分离状态的 DOM 节点</li></ul><p>编写 HTML 文件</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> ang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;堆快照监控内存&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;btn&quot;</span><span style="color:#ABB2BF;">&gt;Add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> tmpEle</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			    var</span><span style="color:#E06C75;"> ul</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&#39;ul&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			        var</span><span style="color:#E06C75;"> li</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;li&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">			        ul</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			 }</span></span>
<span class="line"><span style="color:#E06C75;">			 tmpEle</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ul</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&#39;btn&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;click&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>然后浏览器打开运行页面，打开控制台，找到内存面板，选择分析类型：堆快照--&gt;获取快照，类筛选器那里筛选是否存在分离 DOM</p><h3 id="判断是否存在频繁的-gc-垃圾回收" tabindex="-1">判断是否存在频繁的 GC 垃圾回收 <a class="header-anchor" href="#判断是否存在频繁的-gc-垃圾回收" aria-label="Permalink to &quot;判断是否存在频繁的 GC 垃圾回收&quot;">​</a></h3><ul><li>Timeline 中频繁的上升下降</li><li>任务管理器中数据频繁的增加减小</li></ul><h3 id="performance-使用总结" tabindex="-1">Performance 使用总结 <a class="header-anchor" href="#performance-使用总结" aria-label="Permalink to &quot;Performance 使用总结&quot;">​</a></h3><ul><li>Performance 使用流程</li><li>内存问题的相关分析</li><li>Performance 时序图监控内存变化</li><li>任务管理器监控内存变化</li><li>堆块照查找分离 DOM</li></ul><h2 id="v8-引擎执行工作流程" tabindex="-1">V8 引擎执行工作流程 <a class="header-anchor" href="#v8-引擎执行工作流程" aria-label="Permalink to &quot;V8 引擎执行工作流程&quot;">​</a></h2><p>![V8 引擎执行工作流程](.\\img\\V8 引擎执行工作流程.jpg)</p><h3 id="scanner-是一个扫描器" tabindex="-1">Scanner 是一个扫描器 <a class="header-anchor" href="#scanner-是一个扫描器" aria-label="Permalink to &quot;Scanner 是一个扫描器&quot;">​</a></h3><h3 id="parser-是一个解析器" tabindex="-1">Parser 是一个解析器 <a class="header-anchor" href="#parser-是一个解析器" aria-label="Permalink to &quot;Parser 是一个解析器&quot;">​</a></h3><h4 id="预解析优点" tabindex="-1">预解析优点 <a class="header-anchor" href="#预解析优点" aria-label="Permalink to &quot;预解析优点&quot;">​</a></h4><ul><li>跳过未被使用的代码</li><li>不生成 AST，创建无变量引用和声明的 scopes</li><li>依据规范抛出特定错误</li><li>解析速度更快</li></ul><p>代码示例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="全量解析" tabindex="-1">全量解析 <a class="header-anchor" href="#全量解析" aria-label="Permalink to &quot;全量解析&quot;">​</a></h4><ul><li>解析被使用的代码</li><li>生成 AST</li><li>构建具体 scopes 信息，变量引用、声明等</li><li>抛出所有语法错误</li></ul><p>代码示例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="lgnition-是-v8-提供的一个解释器" tabindex="-1">lgnition 是 V8 提供的一个解释器 <a class="header-anchor" href="#lgnition-是-v8-提供的一个解释器" aria-label="Permalink to &quot;lgnition 是 V8 提供的一个解释器&quot;">​</a></h3><h3 id="turbofan-是-v8-提供的编译器模块" tabindex="-1">TurboFan 是 V8 提供的编译器模块 <a class="header-anchor" href="#turbofan-是-v8-提供的编译器模块" aria-label="Permalink to &quot;TurboFan 是 V8 提供的编译器模块&quot;">​</a></h3><h3 id="堆栈准备" tabindex="-1">堆栈准备 <a class="header-anchor" href="#堆栈准备" aria-label="Permalink to &quot;堆栈准备&quot;">​</a></h3><ul><li>JS 执行环境</li><li>执行环境栈(ECStack, execution context stack）</li><li>执行上下文</li><li>VO(G)，全局变量对象</li></ul><h4 id="内存" tabindex="-1">内存 <a class="header-anchor" href="#内存" aria-label="Permalink to &quot;内存&quot;">​</a></h4><ul><li>01 基本数据类型是按值进行操作 01</li><li>02 基本数据类型值是存放在 区的</li><li>03 无论我们当前看到的栈内存，还是后续引用数据类型会使用的堆内存都属于计算机内存</li><li>04 GO(全局对象)</li></ul><h4 id="引用类型堆栈处理" tabindex="-1">引用类型堆栈处理 <a class="header-anchor" href="#引用类型堆栈处理" aria-label="Permalink to &quot;引用类型堆栈处理&quot;">​</a></h4><p>栈内存存储变量 堆内存存储变量的地址</p><h4 id="函数堆栈处理" tabindex="-1">函数堆栈处理 <a class="header-anchor" href="#函数堆栈处理" aria-label="Permalink to &quot;函数堆栈处理&quot;">​</a></h4><p>1.创建函数和创建变量类似，函数名此时就可以看做是一个变量</p><p>2.单独开辟一个堆内存用于存放函数的体 (字符串形式代码)当前内存地址也会有一个 16 进制数值地址</p><p>3.创建函数的时候，它的作用域[[scope]] 就已经确定了 (创建函数时所在的执行上下文)</p><p>4.创建函数之后会将它的内存地址存放在栈区与对应的函数名进行关联</p><p>函数执行，目的就是为了将函数据对应的堆内存里的字符串形式代码进行执行。代码在执行的时候肯定需要有一个环境，此时就意味着函数在执行的时候会生成一个新的执行上下文来管理函数体当中的代码</p><p>函数执行时做的事情:</p><p>01 确定作用域链:&lt;当前执行上下文，上级执行上下文&gt;</p><p>02 确定 this --》window</p><p>03 初始化 arguments 对象</p><p>04 形参赋值: obj = arr</p><p>05 变量提升:</p><p>06 执行代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;zoe&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;拉勾教育&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;大前端&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">og</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [&quot;拉&quot;，&quot;大&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>01 函数创建</p><ul><li>可以将函数名称看做是变量，存放在 V0 当中 ，同时它的值就是当前函数对应的内存地址</li><li>函数本身也是一个对象，创建时会有一个内存地址，空间内存放的就是函数体代码(字符串形式的</li></ul><p>02 函数执行</p><ul><li>函数执行时会形成一个全新私有上下文，它里面有一个 AO 用于理这个上下文当中的变量</li><li>步骤： <ul><li>01 作用域链&lt;当前执行上下文，上级作用域所在的执行上下文&gt;</li><li>02 确定 this</li><li>03 初始化 arguments (对)</li><li>04 形参赋值:它就相当于是变量声明，然后将声明的变量放置于 AO</li><li>05 量提升 06 代码执行</li></ul></li></ul><h4 id="闭包堆栈处理" tabindex="-1">闭包堆栈处理 <a class="header-anchor" href="#闭包堆栈处理" aria-label="Permalink to &quot;闭包堆栈处理&quot;">​</a></h4><p>闭包代码如下</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> f</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>01 闭包：是一种机制:</p><ul><li>保护：当前上下文当中的变量与其它的上下文中变量互不于扰</li><li>保存：当前上下文中的数据(堆内存)被当前上下文以外的上下文中的变量所引用，这个数据就保存下来了</li></ul><p>02 闭包：</p><ul><li>函数调用形成了一个全新的私有上下文，在函数调用之后当前上下文不被释放就是闭包(临时不被释放)</li></ul><h4 id="闭包与垃圾回收" tabindex="-1">闭包与垃圾回收 <a class="header-anchor" href="#闭包与垃圾回收" aria-label="Permalink to &quot;闭包与垃圾回收&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> +</span><span style="color:#56B6C2;"> ++</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> fn</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">)(</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>1 浏览器都自有垃圾回收 (内存管理，V8 为例)</li><li>2 栈空间、堆空间</li><li>3 堆:当前堆内存如果被占用，就能被释放掉，但是我们如果确认后续不再使用这个内存里的数据也可以自己主动置空，然后浏览器就会对其进行回收</li><li>4 栈: 当前上下文中是否有内容，被其它上下文的变量所占用，如果有则无法释放 (闭包)</li></ul><h2 id="代码性能优化实例" tabindex="-1">代码性能优化实例 <a class="header-anchor" href="#代码性能优化实例" aria-label="Permalink to &quot;代码性能优化实例&quot;">​</a></h2><h3 id="循环添加事件实现" tabindex="-1">循环添加事件实现 <a class="header-anchor" href="#循环添加事件实现" aria-label="Permalink to &quot;循环添加事件实现&quot;">​</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width,initial-scale=1.0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;循环添加事件&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./06-add-event-loop.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!-- index属性的事件委托实现 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> index</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">&gt;按钮1&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> index</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">&gt;按钮2&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> index</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;3&quot;</span><span style="color:#ABB2BF;">&gt;按钮3&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> aButtons</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 基础</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> aButtons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	aButtons</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`当前索引值为</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">i</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 闭包</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 自定义属性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 事件委托</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> aButtons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E06C75;">		aButtons</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`当前索引值为</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">i</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	})(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第三种</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> aButtons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	aButtons</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E06C75;">		aButtons</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`当前索引值为</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">i</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	})(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第四种</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> aButtons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	aButtons</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">myIndex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	aButtons</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`当前索引值为</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">myIndex</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第五种：按钮的index属性事件委托方法</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ev</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ev</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		targetDom</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tagName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">targetDom</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;BUTTON&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;index&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`当前点击的是第 </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">index</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> 个\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h4 id="jsbench-的使用" tabindex="-1">JSBench 的使用 <a class="header-anchor" href="#jsbench-的使用" aria-label="Permalink to &quot;JSBench 的使用&quot;">​</a></h4><p>JSBench 是一个在线测试代码运行效率和性能的网站</p><p>网址：<a href="https://jsbench.me/" target="_blank" rel="noreferrer">JSBench.me - JavaScript performance benchmarking playground</a></p><h3 id="_1-变量局部化" tabindex="-1">1.变量局部化 <a class="header-anchor" href="#_1-变量局部化" aria-label="Permalink to &quot;1.变量局部化&quot;">​</a></h3><p>变量局部化 (全局、局部)可以提高代码的执行效率( 减少了数据访问时需要查的路径)</p><p>数据的存储和读取</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 第一种</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> packageDom1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		str</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">packageDom1</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第二种变量局部化：效率更高</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> packageDom2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		str</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">packageDom2</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>把两段代码放在 JSBench 网站中测试对比，看那个运行效率更高：<a href="https://jsbench.me/" target="_blank" rel="noreferrer">JSBench.me - JavaScript performance benchmarking playground</a></p><h3 id="_2-缓存数据" tabindex="-1">2.缓存数据 <a class="header-anchor" href="#_2-缓存数据" aria-label="Permalink to &quot;2.缓存数据&quot;">​</a></h3><p>缓存数据例子</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;缓存数据&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;skip&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;skip&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 缓存数据: 对于需要多次使用的数据进行提前保存，后续进行使用</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> oBox</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;skip&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 假设在当前的函数体当中需要对 cLassName 的值进行多次使用，那么我们就可以将它提前缓存起来</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> hasClassName1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ele</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cls</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ele</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">className</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cls</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">hasClassName1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oBox</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;skip&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> hasClassName2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ele</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cls</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> clsName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ele</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">className</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 使用变量缓存数据，数据如果多次使用效率更高</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">className</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cls</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">hasClassName2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oBox</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;skip&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>再去 JSBench 网站中测试对比，看那个运行效率更高：<a href="https://jsbench.me/" target="_blank" rel="noreferrer">JSBench.me - JavaScript performance benchmarking playground</a></p><h3 id="_3-减少访问层级" tabindex="-1">3.减少访问层级 <a class="header-anchor" href="#_3-减少访问层级" aria-label="Permalink to &quot;3.减少访问层级&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 减少访问层级</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        m1</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">            name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">         time</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">        m2</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">            name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第一种，层级更少：运行效率更快</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;zce&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 40</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person1</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第二种：</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;zce&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 40</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAge</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person2</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAge</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_4-防抖和节流" tabindex="-1">4.防抖和节流 <a class="header-anchor" href="#_4-防抖和节流" aria-label="Permalink to &quot;4.防抖和节流&quot;">​</a></h3><h3 id="为什么需要防抖和节流" tabindex="-1">为什么需要防抖和节流？ <a class="header-anchor" href="#为什么需要防抖和节流" aria-label="Permalink to &quot;为什么需要防抖和节流？&quot;">​</a></h3><p>在一些高频率事件触发的场景下我们不希望对应的事件处理函数多次执行</p><p>场景:</p><ul><li>滚动事件</li><li>输入的模糊匹配</li><li>轮播图切换</li><li>点击操作</li><li>...</li></ul><p>浏览器默认情况下都会有自己的监听事件间隔( 4~6ms)，如果检测到多次事件的监听执行，那么就会造成不必要的资源浪费</p><h4 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h4><p><strong>前置的场景</strong>：界面上有一个按钮，我们可以连续多次点击</p><p><strong>防抖</strong>: 对于这个高频的作来说，我们只希望识别一次点击，可以人为是第一次或者是最后一次</p><p><strong>节流</strong>：对于高频作，我们可以自己来设置频率，让本来会执行很多次的事件触发，按着我们定义的频率减少触发的次数</p><h4 id="防抖函数" tabindex="-1">防抖函数 <a class="header-anchor" href="#防抖函数" aria-label="Permalink to &quot;防抖函数&quot;">​</a></h4><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;防抖函数实现&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;btn&quot;</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> oBtn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&#39;btn&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // oBtn.onclick = function () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //     console.log(&#39;点击了&#39;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          * handle 最终需要执行的事件监听</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          * wait 事件触发之后多久开始执行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          * immediate 控制执行第一次还是最后一次，false 执行最后一次</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#C678DD;">        function</span><span style="color:#61AFEF;"> myDebounce</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">handle</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">wait</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">immediate</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 参数类型判断及默认值处理</span></span>
<span class="line"><span style="color:#C678DD;">   if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> handle</span><span style="color:#56B6C2;"> !===</span><span style="color:#98C379;"> &#39;function&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&#39;handle must be an function&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">   if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> wait</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;undefined&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">wait</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 300</span></span>
<span class="line"><span style="color:#C678DD;">   if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> wait</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;boolean&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                immediate</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> wait</span></span>
<span class="line"><span style="color:#E06C75;">    wait</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 300</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">   if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> immediate</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;boolean&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">immediate</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 所谓的防抖效果我们想要实现的就是有一个“人“可以管理 handte 的执行次数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 如果我们想要执行最后一次，那就意味着无论我们当前点击了多少次，前面的N-1次都无用</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> timer</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#C678DD;">   return</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> proxy</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                let</span><span style="color:#E06C75;"> self</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                 init</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> immediate</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">timer</span></span>
<span class="line"><span style="color:#61AFEF;">                clearTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">                timer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                    timer</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#56B6C2;">                    !</span><span style="color:#E06C75;">immediate</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> handle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">self</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">                }, </span><span style="color:#E06C75;">wait</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 如果当前传递进来的是 true 就表示我们需要立即执行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 如果想要实现只在第一次执行，那么可以添加上 timer 为 null 做为判断</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 因为只要 timer 为 null 就意味着没有第二次....点击</span></span>
<span class="line"><span style="color:#E06C75;">    init</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> handle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">self</span><span style="color:#ABB2BF;">, ... </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 定义事件执行函数</span></span>
<span class="line"><span style="color:#C678DD;">        function</span><span style="color:#61AFEF;"> btnClick</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ev</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;点击了&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ev</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 当我们执行了按钮点击之后就会执行...返回的 proxy</span></span>
<span class="line"><span style="color:#E5C07B;">  oBtn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> myDebounce</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">btnClick</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // oBtn.onclick = btnClick()</span><span style="color:#7F848E;font-style:italic;"> // this ev</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#FFFFFF;">&lt;</span><span style="color:#ABB2BF;"> body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><h4 id="节流函数" tabindex="-1">节流函数 <a class="header-anchor" href="#节流函数" aria-label="Permalink to &quot;节流函数&quot;">​</a></h4><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;节流函数实现&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E06C75;">        body</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            height: </span><span style="color:#D19A66;">5000</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 节流:我们这里的书流指就是在自定义的一段时间内让事件进行触发</span></span>
<span class="line"><span style="color:#C678DD;">        function</span><span style="color:#61AFEF;"> myThrottle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">handle</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">wait</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> handle</span><span style="color:#56B6C2;"> !===</span><span style="color:#98C379;">  &#39;function&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;handle must be anfunction&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> wait</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;undefined&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">wait</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 400</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> previous</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#7F848E;font-style:italic;"> // 定义变量记录上一次执行时的时间</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> timer</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#7F848E;font-style:italic;"> // 用它来管理定时器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 返回节流事件</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> proxy</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> now</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 定义变量记灵当前次执行的时刻时间点</span></span>
<span class="line"><span style="color:#C678DD;">                let</span><span style="color:#E06C75;"> self</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> interval</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> wait</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">now</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> previous</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">interval</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 此时就说明是一个非高频次作可以执行 handle</span></span>
<span class="line"><span style="color:#61AFEF;">                    clearTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">                    timer</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">                    handle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">self</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">                    previous</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">( )</span></span>
<span class="line"><span style="color:#ABB2BF;">                } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// 当我们发现当前系统中有一个定时器了，就意味着我们不需要再开启定时器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 此时就说明这次的作发生在了我们定义的频次时间范围内，那就不应该执行 handle</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 这个时候我们就可以自定义一个定时器，让 handle 在 interval 之后去执行</span></span>
<span class="line"><span style="color:#E06C75;">                timer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    // 这个作只是将系统中的定时器清除了，但是 timer 中的值还在</span></span>
<span class="line"><span style="color:#61AFEF;">                    clearTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">                    handle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">self</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">                 previous</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">                }, </span><span style="color:#E06C75;">interval</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 定义滚动事件监听</span></span>
<span class="line"><span style="color:#C678DD;">        function</span><span style="color:#61AFEF;"> scrollFn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;滚动了这&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // window.onscroll = scrollFn</span></span>
<span class="line"><span style="color:#E5C07B;">        window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onscroll</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> myThrottle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scrollFn</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">600</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;"> &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt; </span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><h3 id="_5-减少判断层级" tabindex="-1">5.减少判断层级 <a class="header-anchor" href="#_5-减少判断层级" aria-label="Permalink to &quot;5.减少判断层级&quot;">​</a></h3><p>减少条件判断</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">part</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">chapter</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> parts</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;ES2016&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;这工程化&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Vue&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;React&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Node&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">part</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">parts</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">part</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;属于当前课程&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">chapter</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;您需要提供 VIP 身份&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;请确认模块信息&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">doSomething</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ES2016&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 上面代码：改进后的代码</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">part</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">chapter</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> parts</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;ES2016&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;这工程化&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Vue&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;React&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Node&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">part</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;请确认模块信息&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">parts</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">part</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;属于当前课程&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">chapter</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;您需要提供 VIP 身份&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">doSomething</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ES2016&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="_6-减少循环体活动" tabindex="-1">6.减少循环体活动 <a class="header-anchor" href="#_6-减少循环体活动" aria-label="Permalink to &quot;6.减少循环体活动&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> test</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;zce&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">38</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;我为前端而活&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 优化后的代码</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> test</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;zce&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">38</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;我为前端而活&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> len</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> len</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 再次改进</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> test</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;zce&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">38</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;我为前端而活&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> len</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">len</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">len</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="_7-字面量与构造式" tabindex="-1">7.字面量与构造式 <a class="header-anchor" href="#_7-字面量与构造式" aria-label="Permalink to &quot;7.字面量与构造式&quot;">​</a></h3><p>字面量执行效率会更快</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> test</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> object</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">    obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;zc</span><span style="color:#FFFFFF;">e</span></span>
<span class="line"><span style="color:#E5C07B;"> obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 38</span></span>
<span class="line"><span style="color:#E5C07B;"> obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">slogan</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;我为前端而活&quot;</span></span>
<span class="line"><span style="color:#C678DD;"> return</span><span style="color:#E06C75;"> obj</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 速度对比上面更快</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> test</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name </span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zce&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">38</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">slogan</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;我为前端而活&#39;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;"> return</span><span style="color:#E06C75;"> obj</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> str1</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;zce说我为前端而活&#39;</span><span style="color:#7F848E;font-style:italic;"> // 这个速度更快</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> str2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> string</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;zce说我为前端而活&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 比上面对比，是上面速度的两倍</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str2</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,178)]))}const F=n(o,[["render",e]]);export{b as __pageData,F as default};
