import{_ as e,c as o,o as t,ah as a,j as n,a as r,t as l}from"./chunks/framework.DqD713j2.js";const c="/FrontEndLearnNotes/assets/Vue2.0%E6%BA%90%E7%A0%81.BNFFY42j.png",B="/FrontEndLearnNotes/assets/image-20240303205159540.DcCWWfd5.png",y="/FrontEndLearnNotes/assets/image-20240303205222152.BSxuNplC.png",i="/FrontEndLearnNotes/assets/image-20240303205244217.BdEFQaU8.png",b="/FrontEndLearnNotes/assets/image-20240303205314941.l0GRYIPQ.png",u="/FrontEndLearnNotes/assets/image-20240303205343438.BXx79puJ.png",F="/FrontEndLearnNotes/assets/image-20240303210607899.u8_JfDEk.png",A="/FrontEndLearnNotes/assets/image-20240303210953936.DEu1-Kvw.png",C="/FrontEndLearnNotes/assets/image-20240303211157133.Bk-aF3rS.png",m="/FrontEndLearnNotes/assets/image-20240303211216997.eGOEifeR.png",d="/FrontEndLearnNotes/assets/image-20240303211305979.B6_ggVzU.png",E="/FrontEndLearnNotes/assets/image-20240303211531976.DXl47BXu.png",h="/FrontEndLearnNotes/assets/image-20240303235429504.CAp03D9a.png",D="/FrontEndLearnNotes/assets/image-20240304000205513.DG4cmC8L.png",q="/FrontEndLearnNotes/assets/image-20240304000222107.CSnRcPge.png",p="/FrontEndLearnNotes/assets/image-20240304000243984.ipO-Ifgr.png",g="/FrontEndLearnNotes/assets/image-20240304000403428.BE2ar5yv.png",f="/FrontEndLearnNotes/assets/image-20240304010240972.TZHB1Kbr.png",v="/FrontEndLearnNotes/assets/image-20240304004336746.Ckwn1tYR.png",k="/FrontEndLearnNotes/assets/image-20240304001301141.C4JousFT.png",x="/FrontEndLearnNotes/assets/image-20240304002034531.D4kHh4lN.png",w="/FrontEndLearnNotes/assets/image-20240304002246646.C2GeQ96u.png",j="/FrontEndLearnNotes/assets/image-20240304002323699.BExRXAqY.png",_="/FrontEndLearnNotes/assets/image-20240304002356237.CppPHX1w.png",V="/FrontEndLearnNotes/assets/image-20240304002418827.DcR-uhvn.png",P="/FrontEndLearnNotes/assets/%E6%B5%81%E7%A8%8B%E5%9B%BE.BPe86oGM.png",S="/FrontEndLearnNotes/assets/image-20240304002503493.BZ633wHY.png",O="/FrontEndLearnNotes/assets/image-20240304002602954.Og0jQoDw.png",T="/FrontEndLearnNotes/assets/image-20240304002709171.BFxbjS5N.png",M="/FrontEndLearnNotes/assets/image-20240304002737168.C1rNWfg1.png",N="/FrontEndLearnNotes/assets/image-20240304002759285.DMtrWWXE.png",I="/FrontEndLearnNotes/assets/image-20240304002824645.BX8t7ujz.png",L="/FrontEndLearnNotes/assets/image-20240304002842533.4LQPdPyK.png",R="/FrontEndLearnNotes/assets/image-20240304032556845.5_42z9cE.png",W="/FrontEndLearnNotes/assets/image-20240304032630350.CwClVrmo.png",$="/FrontEndLearnNotes/assets/image-20240304032654767.CBoJ8PP1.png",U="/FrontEndLearnNotes/assets/image-20240304033127556.C5sF85JE.png",Y="/FrontEndLearnNotes/assets/image-20240304033458856.Yhl3xYyW.png",J="/FrontEndLearnNotes/assets/image-20240304033555946.BGlAq895.png",H="/FrontEndLearnNotes/assets/image-20240304033702159.CeC5ZAS4.png",G="/FrontEndLearnNotes/assets/image-20240304033757118.dD7PtTeD.png",z="/FrontEndLearnNotes/assets/image-20240304033847098.DUC6e81-.png",X="/FrontEndLearnNotes/assets/image-20240304033910144.B6fJxcco.png",Q="/FrontEndLearnNotes/assets/image-20240304033945456.CLqYqjYK.png",Z="/FrontEndLearnNotes/assets/image-20240304034003868.BlV5Rk1p.png",K="/FrontEndLearnNotes/assets/image-20240304034212281.Bq0CnI95.png",ss="/FrontEndLearnNotes/assets/image-20240304034257248.D0IYAUvD.png",ns="/FrontEndLearnNotes/assets/image-20240304034407166.CMc5_A06.png",as="/FrontEndLearnNotes/assets/image-20240304034519540.Cdlowy1c.png",ls="/FrontEndLearnNotes/assets/image-20240304034602885.4ZNfkH-F.png",ps="/FrontEndLearnNotes/assets/image-20240304034746693.OlWhsCCa.png",es="/FrontEndLearnNotes/assets/image-20240304034806320.BgFwgE8s.png",os="/FrontEndLearnNotes/assets/image-20240304034840380.BgMoFXOt.png",ts="/FrontEndLearnNotes/assets/image-20240304034853078.D04Y715j.png",rs="/FrontEndLearnNotes/assets/image-20240304035013378.DPXDiQ2k.png",cs="/FrontEndLearnNotes/assets/image-20240304035033878.CfARRUr3.png",Bs="/FrontEndLearnNotes/assets/image-20240304035059241.6Y91tJqz.png",ys="/FrontEndLearnNotes/assets/entry.fd620404.tGg0TaSJ.png",is="/FrontEndLearnNotes/assets/fow.34669a8f.DULF6AqP.png",hs=JSON.parse('{"title":"Vue2 源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"Document/框架源码原理实现解析/Vue及全家桶源码解析/Vue2源码解析.md","filePath":"Document/框架源码原理实现解析/Vue及全家桶源码解析/Vue2源码解析.md","lastUpdated":1750954157000}'),bs={name:"Document/框架源码原理实现解析/Vue及全家桶源码解析/Vue2源码解析.md"};function us(Fs,s,As,Cs,ms,ds){return t(),o("div",null,[s[2]||(s[2]=a('<h1 id="vue2-源码解析" tabindex="-1">Vue2 源码解析 <a class="header-anchor" href="#vue2-源码解析" aria-label="Permalink to &quot;Vue2 源码解析&quot;">​</a></h1><p><a href="https://github.com/FrontEndGitHub/FrontEndGitHub/issues/35" target="_blank" rel="noreferrer">推荐 7 个 Vue2、Vue3 源码解密分析的开源项目 👍 · Issue #35 · FrontEndGitHub/FrontEndGitHub</a></p><p>vue2 源码地址：<a href="https://github.com/vuejs/vue.git" target="_blank" rel="noreferrer">https://github.com/vuejs/vue.git</a></p><p>petite-vue 源码解析</p><ul><li>github：<a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noreferrer">https://github.com/vuejs/petite-vue</a></li><li>petite-vue 源码解析文档：<a href="http://fsjohnhuang.gitee.io/petite-vue-source-reading/" target="_blank" rel="noreferrer">http://fsjohnhuang.gitee.io/petite-vue-source-reading/</a></li></ul><p>解析 vue2 源码流程：</p><ul><li>1.知道<code>Vue2</code>的功能原理</li><li>2.手写实现一个简版的<code>Vue2</code></li><li>3.最后我们再去调试 vue2 源码的运行</li></ul><h2 id="vue全家桶源码技术揭秘" tabindex="-1">vue全家桶源码技术揭秘 <a class="header-anchor" href="#vue全家桶源码技术揭秘" aria-label="Permalink to &quot;vue全家桶源码技术揭秘&quot;">​</a></h2><p><a href="https://ustbhuangyi.github.io/vue-analysis/v2/prepare/" target="_blank" rel="noreferrer">准备工作 | Vue.js 技术揭秘 (ustbhuangyi.github.io)</a></p><p>开源地址：<a href="https://github.com/ustbhuangyi/vue-analysis" target="_blank" rel="noreferrer">ustbhuangyi/vue-analysis: 👍 Vue.js 源码分析 (github.com)</a></p><h2 id="vue2-源码功能思维导图" tabindex="-1">Vue2 源码功能思维导图 <a class="header-anchor" href="#vue2-源码功能思维导图" aria-label="Permalink to &quot;Vue2 源码功能思维导图&quot;">​</a></h2><p><img src="'+c+`" alt="Vue2.0源码"></p><h2 id="一、mustache-模板引擎-帮助了解-vue-的模板渲染引擎" tabindex="-1">一、mustache 模板引擎（帮助了解 vue 的模板渲染引擎） <a class="header-anchor" href="#一、mustache-模板引擎-帮助了解-vue-的模板渲染引擎" aria-label="Permalink to &quot;一、mustache 模板引擎（帮助了解 vue 的模板渲染引擎）&quot;">​</a></h2><h3 id="_1-什么是模板引擎" tabindex="-1">1.什么是模板引擎 <a class="header-anchor" href="#_1-什么是模板引擎" aria-label="Permalink to &quot;1.什么是模板引擎&quot;">​</a></h3><h4 id="_1-模板引擎是将数据要变为视图最优雅的解决方案" tabindex="-1">1.模板引擎是将数据要变为视图最优雅的解决方案 <a class="header-anchor" href="#_1-模板引擎是将数据要变为视图最优雅的解决方案" aria-label="Permalink to &quot;1.模板引擎是将数据要变为视图最优雅的解决方案&quot;">​</a></h4><p>数据：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;age&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;sex&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小红&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;age&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;sex&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;女&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小强&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;age&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;sex&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Vue 的解决方法：这实际上就是一种模板引擎</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">li</span><span style="color:#D19A66;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item in arr&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>视图：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;hd&quot;</span><span style="color:#ABB2BF;">&gt;小明的基本信息&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;bd&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;姓名：小明&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;年龄：12&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;性别：男&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;hd&quot;</span><span style="color:#ABB2BF;">&gt;小红的基本信息&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;bd&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;姓名：小红&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;年龄：11&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;性别：女&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	……</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_2-历史上曾经出现的-数据变为视图-的方法" tabindex="-1">2.历史上曾经出现的[数据变为视图]的方法 <a class="header-anchor" href="#_2-历史上曾经出现的-数据变为视图-的方法" aria-label="Permalink to &quot;2.历史上曾经出现的[数据变为视图]的方法&quot;">​</a></h4><p><strong>纯 DOM 法</strong>： 非常笨拙，没有实战价值</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">				{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">				{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小红&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;女&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">				{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小强&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">			];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> list</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 每遍历一项，都要用DOM方法去创建li标签</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> oLi</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 创建hd这个div</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> hdDiv</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				hdDiv</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">className</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hd&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				hdDiv</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;的基本信息&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 创建bd这个div</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> bdDiv</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				bdDiv</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">className</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;bd&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 创建三个p</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				p1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;姓名：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				bdDiv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				p2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;年龄：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				bdDiv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> p3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				p3</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;性别：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				bdDiv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 创建的节点是孤儿节点，所以必须要上树才能被用户看见</span></span>
<span class="line"><span style="color:#E5C07B;">				oLi</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">hdDiv</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 创建的节点是孤儿节点，所以必须要上树才能被用户看见</span></span>
<span class="line"><span style="color:#E5C07B;">				oLi</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bdDiv</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 创建的节点是孤儿节点，所以必须要上树才能被用户看见</span></span>
<span class="line"><span style="color:#E5C07B;">				list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oLi</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p><strong>数组 join 法</strong>： 曾几何时非常流行，是曾经的前端必会知识</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">				{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">				{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小红&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;女&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">				{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小强&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">			];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> list</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 遍历arr数组，每遍历一项，就以字符串的视角将HTML字符串添加到list中</span></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				list</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> +=</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#98C379;">					&quot;&lt;li&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">					&#39;    &lt;div class=&quot;hd&quot;&gt;&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;的信息&lt;/div&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">					&#39;    &lt;div class=&quot;bd&quot;&gt;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">					&quot;        &lt;p&gt;姓名：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;&lt;/p&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">					&quot;        &lt;p&gt;年龄：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;&lt;/p&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">					&quot;        &lt;p&gt;性别：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;&lt;/p&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">					&quot;    &lt;/div&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">					&quot;&lt;/li&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				].</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p><strong>ES6 的反引号法</strong>： ES6 中新增的<code>\${a}</code>语法糖，很好用</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">				{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">				{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小红&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;女&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">				{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小强&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">			];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> list</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 遍历arr数组，每遍历一项，就以字符串的视角将HTML字符串添加到list中</span></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				list</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> \`</span></span>
<span class="line"><span style="color:#98C379;">                &lt;li&gt;</span></span>
<span class="line"><span style="color:#98C379;">                    &lt;div class=&quot;hd&quot;&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">的基本信息&lt;/div&gt;    </span></span>
<span class="line"><span style="color:#98C379;">                    &lt;div class=&quot;bd&quot;&gt;</span></span>
<span class="line"><span style="color:#98C379;">                        &lt;p&gt;姓名：</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/p&gt;    </span></span>
<span class="line"><span style="color:#98C379;">                        &lt;p&gt;性别：</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">sex</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/p&gt;    </span></span>
<span class="line"><span style="color:#98C379;">                        &lt;p&gt;年龄：</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/p&gt;    </span></span>
<span class="line"><span style="color:#98C379;">                    &lt;/div&gt;    </span></span>
<span class="line"><span style="color:#98C379;">                &lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">            \`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p><strong>模板引擎</strong>： 解决数据变为视图的最优雅的方法</p><p>看下面</p><h3 id="_2-mustache-基本使用" tabindex="-1">2.mustache 基本使用 <a class="header-anchor" href="#_2-mustache-基本使用" aria-label="Permalink to &quot;2.mustache 基本使用&quot;">​</a></h3><h4 id="mustache-库简介" tabindex="-1">mustache 库简介 <a class="header-anchor" href="#mustache-库简介" aria-label="Permalink to &quot;mustache 库简介&quot;">​</a></h4>`,32)),n("ul",null,[s[0]||(s[0]=n("li",null,[r("mustache 官方 git： "),n("a",{href:"https://github.com/janl/mustache.js",target:"_blank",rel:"noreferrer"},"https://github.com/janl/mustache.js")],-1)),n("li",null,"mustache 是“胡子”的意思，因为它的嵌入标记"+l()+"非常像胡子",1),n("li",null,"而"+l()+"的语法也被 Vue 沿用，这就是我们学习 mustache 的原因",1),s[1]||(s[1]=n("li",null,"mustache 是最早的模板引擎库，比 Vue 诞生的早多了，它的底层实现机理在当时是非常有创造性的、轰动性的，为后续模板引擎的发展提供了崭新的思路",-1))]),s[3]||(s[3]=a(`<h4 id="mustache-库基本使用" tabindex="-1">mustache 库基本使用 <a class="header-anchor" href="#mustache-库基本使用" aria-label="Permalink to &quot;mustache 库基本使用&quot;">​</a></h4><p>必须要引入 mustache 库，可以在 bootcdn.com 上找到它</p><p>mustache 的模板语法非常简单，比如前述案例的模板语法如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 模板 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/template&quot;</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mytemplate&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			    {{#arr}}</span></span>
<span class="line"><span style="color:#ABB2BF;">			        &lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			            &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;hd&quot;</span><span style="color:#ABB2BF;">&gt;{{name}}的基本信息&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			            &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;bd&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			                &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;姓名：{{name}}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			                &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;性别：{{sex}}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			                &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;年龄：{{age}}&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			            &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			        &lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			    {{/arr}}</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;jslib/mustache.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> templateStr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mytemplate&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">innerHTML</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				arr</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">					{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">					{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小红&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;女&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">					{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小强&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">				],</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> domStr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Mustache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">templateStr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> container</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			container</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> domStr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h4 id="循环对象数组" tabindex="-1">循环对象数组 <a class="header-anchor" href="#循环对象数组" aria-label="Permalink to &quot;循环对象数组&quot;">​</a></h4><p><img src="`+B+'" alt="image-20240303205159540"></p><h4 id="不循环" tabindex="-1">不循环 <a class="header-anchor" href="#不循环" aria-label="Permalink to &quot;不循环&quot;">​</a></h4><p><img src="'+y+'" alt="image-20240303205222152"></p><h4 id="循环简单数组" tabindex="-1">循环简单数组 <a class="header-anchor" href="#循环简单数组" aria-label="Permalink to &quot;循环简单数组&quot;">​</a></h4><p><img src="'+i+'" alt="image-20240303205244217"></p><h4 id="数组可以嵌套" tabindex="-1">数组可以嵌套 <a class="header-anchor" href="#数组可以嵌套" aria-label="Permalink to &quot;数组可以嵌套&quot;">​</a></h4><p><img src="'+b+'" alt="image-20240303205314941"></p><h4 id="布尔值" tabindex="-1">布尔值 <a class="header-anchor" href="#布尔值" aria-label="Permalink to &quot;布尔值&quot;">​</a></h4><p><img src="'+u+`" alt="image-20240303205343438"></p><h3 id="_3-mustache-的底层核心机理" tabindex="-1">3.mustache 的底层核心机理 <a class="header-anchor" href="#_3-mustache-的底层核心机理" aria-label="Permalink to &quot;3.mustache 的底层核心机理&quot;">​</a></h3><p>mustache 库不能用简单的正则表达式思路实现</p><p><strong>在较为简单的示例情况下，可以用正则表达式实现</strong></p><p>模板字符串</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;我买了一个{{thing}}，好{{mood}}&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数据</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;thing&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;华为手机&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;mood&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;开心&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>但是当情况复杂时，正则表达式的思路肯定就不行了。比如这样的模板字符串， 是不能用正则表达式的思路实现的模板字符串</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{#arr}}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;{{.}}&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		{{/arr}}</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="mustache-库的机理" tabindex="-1">mustache 库的机理 <a class="header-anchor" href="#mustache-库的机理" aria-label="Permalink to &quot;mustache 库的机理&quot;">​</a></h4><p><img src="`+F+`" alt="image-20240303210607899"></p><h4 id="什么是-tokens" tabindex="-1">什么是 tokens <a class="header-anchor" href="#什么是-tokens" aria-label="Permalink to &quot;什么是 tokens&quot;">​</a></h4><ul><li>tokens 是一个 JS 的嵌套数组，说白了，就是模板字符串的 JS 表示</li><li>它是“抽象语法树”、“虚拟节点”等等的开山鼻祖</li></ul><h5 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;我买了一个{{thing}}，好{{mood}}啊&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="tokens-最外层的-里面的每一个-都是-token" tabindex="-1">tokens：最外层的[]里面的每一个[]都是 token <a class="header-anchor" href="#tokens-最外层的-里面的每一个-都是-token" aria-label="Permalink to &quot;tokens：最外层的[]里面的每一个[]都是 token&quot;">​</a></h5><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&lt;h1&gt;我买了一个&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;thing&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;，好&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;mood&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;啊&lt;/h1&gt;&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>演示一下正则表达式实现简单模板数据填充</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> templateStr</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#98C379;">				&quot;&lt;h1&gt;我买了一个{{thing}}，花了{{money}}元，好{{mood}}&lt;/h1&gt;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				thing</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;白菜&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				money</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				mood</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;激动&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 最简单的模板引擎的实现机理，利用的是正则表达式中的replace()方法。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// replace()的第二个参数可以是一个函数，这个函数提供捕获的东西的参数，就是$1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 结合data对象，即可进行智能的替换</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">templateStr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> templateStr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#56B6C2;">\\{\\{</span><span style="color:#E06C75;">(\\w</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">)</span><span style="color:#56B6C2;">\\}\\}</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">findStr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">$1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">templateStr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h4 id="模板解析原理" tabindex="-1">模板解析原理 <a class="header-anchor" href="#模板解析原理" aria-label="Permalink to &quot;模板解析原理&quot;">​</a></h4><p><img src="`+A+'" alt="image-20240303210953936"></p><h5 id="循环情况下的-tokens" tabindex="-1">循环情况下的 tokens <a class="header-anchor" href="#循环情况下的-tokens" aria-label="Permalink to &quot;循环情况下的 tokens&quot;">​</a></h5><p><img src="'+C+'" alt="image-20240303211157133"></p><h5 id="双重循环情况下的-tokens" tabindex="-1">双重循环情况下的 tokens <a class="header-anchor" href="#双重循环情况下的-tokens" aria-label="Permalink to &quot;双重循环情况下的 tokens&quot;">​</a></h5><p><img src="'+m+'" alt="image-20240303211216997"></p><h5 id="mustache-库的机理-1" tabindex="-1">mustache 库的机理 <a class="header-anchor" href="#mustache-库的机理-1" aria-label="Permalink to &quot;mustache 库的机理&quot;">​</a></h5><p><img src="'+d+`" alt="image-20240303211305979"></p><p>mustache 库底层重点要做两个事情：</p><ul><li>① 将模板字符串编译为 tokens 形式</li><li>② 将 tokens 结合数据，解析为 dom 字符串</li></ul><h5 id="观察-tokens" tabindex="-1">观察 tokens <a class="header-anchor" href="#观察-tokens" aria-label="Permalink to &quot;观察 tokens&quot;">​</a></h5><p>在 mustache.js 源码内找到 tokens 的赋值，打印 tokens 的值：console.log(tokens);</p><p>然后调用代码看看：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;jslib/mustache.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> templateStr1</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span></span>
<span class="line"><span style="color:#98C379;">            &lt;ul&gt;</span></span>
<span class="line"><span style="color:#98C379;">                {{#arr}}</span></span>
<span class="line"><span style="color:#98C379;">                    &lt;li&gt;</span></span>
<span class="line"><span style="color:#98C379;">                        &lt;div class=&quot;hd&quot;&gt;{{name}}的基本信息&lt;/div&gt;    </span></span>
<span class="line"><span style="color:#98C379;">                        &lt;div class=&quot;bd&quot;&gt;</span></span>
<span class="line"><span style="color:#98C379;">                            &lt;p&gt;姓名：{{name}}&lt;/p&gt;    </span></span>
<span class="line"><span style="color:#98C379;">                            &lt;p&gt;性别：{{sex}}&lt;/p&gt;    </span></span>
<span class="line"><span style="color:#98C379;">                            &lt;p&gt;年龄：{{age}}&lt;/p&gt;    </span></span>
<span class="line"><span style="color:#98C379;">                        &lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;">                    &lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">                {{/arr}}</span></span>
<span class="line"><span style="color:#98C379;">            &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#98C379;">        \`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> templateStr2</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span></span>
<span class="line"><span style="color:#98C379;">            &lt;ul&gt;</span></span>
<span class="line"><span style="color:#98C379;">                {{#arr}}</span></span>
<span class="line"><span style="color:#98C379;">                    &lt;li&gt;</span></span>
<span class="line"><span style="color:#98C379;">                        {{name}}的爱好是：</span></span>
<span class="line"><span style="color:#98C379;">                        &lt;ol&gt;</span></span>
<span class="line"><span style="color:#98C379;">                            {{#hobbies}} </span></span>
<span class="line"><span style="color:#98C379;">                                &lt;li&gt;{{.}}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">                            {{/hobbies}} </span></span>
<span class="line"><span style="color:#98C379;">                        &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#98C379;">                    &lt;/li&gt;    </span></span>
<span class="line"><span style="color:#98C379;">                {{/arr}}</span></span>
<span class="line"><span style="color:#98C379;">            &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#98C379;">        \`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			Mustache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">templateStr2</span><span style="color:#ABB2BF;">, {});</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h3 id="_4-手写实现-mustache-库" tabindex="-1">4.🅰️手写实现 mustache 库 <a class="header-anchor" href="#_4-手写实现-mustache-库" aria-label="Permalink to &quot;4.:a:手写实现 mustache 库&quot;">​</a></h3><h4 id="使用-webpack-和-webpack-dev-server-构建" tabindex="-1">使用 webpack 和 webpack-dev-server 构建 <a class="header-anchor" href="#使用-webpack-和-webpack-dev-server-构建" aria-label="Permalink to &quot;使用 webpack 和 webpack-dev-server 构建&quot;">​</a></h4><ul><li>模块化打包工具有 webpack（webpack-dev-server）、rollup、Parcel 等</li><li>mustache 官方库使用 rollup 进行模块化打包，而我们今天使用 webpack（webpack-dev-server）进行模块化打包，这是因为 webpack（webpack-dev-server）能让我们更方便地在浏览器中（而不是 nodejs 环境中）实时调试程序，相比 nodejs 控制台，浏览器控制台更好用，比如能够点击展开数组的每项。</li><li>生成库是 UMD 的，这意味着它可以同时在 nodejs 环境中使用，也可以在浏览器环境中使用。实现 UMD 不难，只需要一个“通用头”即可。</li></ul><p>模块化打包工具有 webpack（webpack-dev-server）、rollup、Parcel 等</p><p><img src="`+E+'" alt="image-20240303211531976"></p><h4 id="项目目录和文件" tabindex="-1">项目目录和文件 <a class="header-anchor" href="#项目目录和文件" aria-label="Permalink to &quot;项目目录和文件&quot;">​</a></h4><p><img src="'+h+`" alt="image-20240303235429504"></p><h5 id="src-目录" tabindex="-1">src 目录 <a class="header-anchor" href="#src-目录" aria-label="Permalink to &quot;src 目录&quot;">​</a></h5><ul><li>index.js</li><li>lookup.js</li><li>nestTokens.js</li><li>parseArray.js</li><li>parseTemplateToTokens.js</li><li>renderTemplate.js</li><li>Scanner.js</li></ul><h5 id="www-目录" tabindex="-1">www 目录 <a class="header-anchor" href="#www-目录" aria-label="Permalink to &quot;www 目录&quot;">​</a></h5><p>index.html</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/xuni/bundle.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 模板字符串</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> templateStr</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span></span>
<span class="line"><span style="color:#98C379;">            &lt;div&gt;</span></span>
<span class="line"><span style="color:#98C379;">                &lt;ul&gt;</span></span>
<span class="line"><span style="color:#98C379;">                    {{#students}}</span></span>
<span class="line"><span style="color:#98C379;">                    &lt;li class=&quot;myli&quot;&gt;</span></span>
<span class="line"><span style="color:#98C379;">                        学生{{name}}的爱好是</span></span>
<span class="line"><span style="color:#98C379;">                        &lt;ol&gt;</span></span>
<span class="line"><span style="color:#98C379;">                            {{#hobbies}}</span></span>
<span class="line"><span style="color:#98C379;">                            &lt;li&gt;{{.}}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">                            {{/hobbies}}</span></span>
<span class="line"><span style="color:#98C379;">                        &lt;/ol&gt;</span></span>
<span class="line"><span style="color:#98C379;">                    &lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">                    {{/students}}</span></span>
<span class="line"><span style="color:#98C379;">                &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#98C379;">            &lt;/div&gt;</span></span>
<span class="line"><span style="color:#98C379;">        \`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 数据</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				students</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">					{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hobbies</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;编程&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;游泳&quot;</span><span style="color:#ABB2BF;">] },</span></span>
<span class="line"><span style="color:#ABB2BF;">					{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小红&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hobbies</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;看书&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;弹琴&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;画画&quot;</span><span style="color:#ABB2BF;">] },</span></span>
<span class="line"><span style="color:#ABB2BF;">					{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;小强&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hobbies</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;锻炼&quot;</span><span style="color:#ABB2BF;">] },</span></span>
<span class="line"><span style="color:#ABB2BF;">				],</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 调用render</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> domStr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> SSG_TemplateEngine</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">templateStr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">domStr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 渲染上树</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> container</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			container</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> domStr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h5 id="webpack-config-js-文件" tabindex="-1">webpack.config.js 文件 <a class="header-anchor" href="#webpack-config-js-文件" aria-label="Permalink to &quot;webpack.config.js 文件&quot;">​</a></h5><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">const path = require(&#39;path&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">module.exports = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 模式，开发</span></span>
<span class="line"><span style="color:#FFFFFF;">    mode</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">&#39;development&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 入口</span></span>
<span class="line"><span style="color:#FFFFFF;">    entry</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">&#39;./src/index.js&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 打包到什么文件</span></span>
<span class="line"><span style="color:#FFFFFF;">    output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#FFFFFF;">        filename</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">&#39;bundle.js&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 配置一下webpack-dev-server</span></span>
<span class="line"><span style="color:#FFFFFF;">    devServer</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 静态文件根目录</span></span>
<span class="line"><span style="color:#FFFFFF;">        contentBase</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">path.join(__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;www&quot;</span><span style="color:#FFFFFF;">),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 不压缩</span></span>
<span class="line"><span style="color:#FFFFFF;">        compress</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 端口号</span></span>
<span class="line"><span style="color:#FFFFFF;">        port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 虚拟打包的路径，bundle.js文件没有真正的生成</span></span>
<span class="line"><span style="color:#FFFFFF;">        publicPath</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/xuni/&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h5 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;package.json&quot;">​</a></h5><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;sgg_templateengine&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;main&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;webpack-dev-server&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;author&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;license&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ISC&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;devDependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^4.44.2&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-cli&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.3.12&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-dev-server&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.11.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>开发时注意事项</p><ul><li>学习源码时，源码思想要借鉴，而不要抄袭。要能够发现源码中书写的精彩的地方；</li><li>将独立的功能拆写为独立的 js 文件中完成，通常是一个独立的类，每个单独的功能必须能独立的“单元测试”；</li><li>应该围绕中心功能，先把主干完成，然后修剪枝叶；</li><li>功能并不需要一步到位，功能的拓展要一步步完成，有的非核心功能甚至不需实现；</li></ul><h4 id="模板引擎源码手写实现" tabindex="-1">🅱️ 模板引擎源码手写实现 <a class="header-anchor" href="#模板引擎源码手写实现" aria-label="Permalink to &quot;:b: 模板引擎源码手写实现&quot;">​</a></h4><p>index.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> parseTemplateToTokens</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./parseTemplateToTokens.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> renderTemplate</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./renderTemplate.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 全局提供SSG_TemplateEngine对象</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SSG_TemplateEngine</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 渲染方法</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">templateStr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用parseTemplateToTokens函数，让模板字符串能够变为tokens数组</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> tokens</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parseTemplateToTokens</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">templateStr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用renderTemplate函数，让tokens数组变为dom字符串</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> domStr</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> renderTemplate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tokens</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> domStr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>lookup.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    功能是可以在dataObj对象中，寻找用连续点符号的keyName属性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    比如，dataObj是</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        a: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            b: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                c: 100</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    那么lookup(dataObj, &#39;a.b.c&#39;)结果就是100</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    不忽悠大家，这个函数是某个大厂的面试题</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> lookup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dataObj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">keyName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 看看keyName中有没有点符号，但是不能是.本身</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">keyName</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> keyName</span><span style="color:#56B6C2;"> !=</span><span style="color:#98C379;"> &quot;.&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果有点符号，那么拆开</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> keys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> keyName</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 设置一个临时变量，这个临时变量用于周转，一层一层找下去。</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> temp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> dataObj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 每找一层，就把它设置为新的临时变量</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> keys</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			temp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> temp</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> temp</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果这里面没有点符号</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> dataObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">keyName</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>nestTokens.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    函数的功能是折叠tokens，将#和/之间的tokens能够整合起来，作为它的下标为3的项</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> nestTokens</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">tokens</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 结果数组</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> nestedTokens</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 栈结构，存放小tokens，栈顶（靠近端口的，最新进入的）的tokens数组中当前操作的这个tokens小数组</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> sections</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 收集器，天生指向nestedTokens结果数组，引用类型值，所以指向的是同一个数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 收集器的指向会变化，当遇见#的时候，收集器会指向这个token的下标为2的新数组</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> collector</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> nestedTokens</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> token</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tokens</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;#&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 收集器中放入这个token</span></span>
<span class="line"><span style="color:#E5C07B;">				collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 入栈</span></span>
<span class="line"><span style="color:#E5C07B;">				sections</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 收集器要换人。给token添加下标为2的项，并且让收集器指向它</span></span>
<span class="line"><span style="color:#E06C75;">				collector</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> token</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			case</span><span style="color:#98C379;"> &quot;/&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 出栈。pop()会返回刚刚弹出的项</span></span>
<span class="line"><span style="color:#E5C07B;">				sections</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 改变收集器为栈结构队尾（队尾是栈顶）那项的下标为2的数组</span></span>
<span class="line"><span style="color:#E06C75;">				collector</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">					sections</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> sections</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">sections</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">][</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> nestedTokens</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 甭管当前的collector是谁，可能是结果nestedTokens，也可能是某个token的下标为2的数组，甭管是谁，推入collctor即可。</span></span>
<span class="line"><span style="color:#E5C07B;">				collector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> nestedTokens</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>parseArray.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> lookup</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./lookup.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> renderTemplate</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./renderTemplate.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    处理数组，结合renderTemplate实现递归</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    注意，这个函数收的参数是token！而不是tokens！</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    token是什么，就是一个简单的[&#39;#&#39;, &#39;students&#39;, [</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    ]]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    这个函数要递归调用renderTemplate函数，调用多少次？？？</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    千万别蒙圈！调用的次数由data决定</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    比如data的形式是这样的：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        students: [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            { &#39;name&#39;: &#39;小明&#39;, &#39;hobbies&#39;: [&#39;游泳&#39;, &#39;健身&#39;] },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            { &#39;name&#39;: &#39;小红&#39;, &#39;hobbies&#39;: [&#39;足球&#39;, &#39;蓝球&#39;, &#39;羽毛球&#39;] },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            { &#39;name&#39;: &#39;小强&#39;, &#39;hobbies&#39;: [&#39;吃饭&#39;, &#39;睡觉&#39;] },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        ]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    那么parseArray()函数就要递归调用renderTemplate函数3次，因为数组长度是3</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> parseArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">token</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 得到整体数据data中这个数组要使用的部分</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> v</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> lookup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 结果字符串</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> resultStr</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 遍历v数组，v一定是数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 注意，下面这个循环可能是整个包中最难思考的一个循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 它是遍历数据，而不是遍历tokens。数组中的数据有几条，就要遍历几条。</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> v</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 这里要补一个“.”属性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 拼接</span></span>
<span class="line"><span style="color:#E06C75;">		resultStr</span><span style="color:#56B6C2;"> +=</span><span style="color:#61AFEF;"> renderTemplate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">], {</span></span>
<span class="line"><span style="color:#ABB2BF;">			...</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#98C379;">			&quot;.&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> resultStr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>parseTemplateToTokens.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Scanner</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Scanner.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> nestTokens</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./nestTokens.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    将模板字符串变为tokens数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> parseTemplateToTokens</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">templateStr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> tokens</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建扫描器</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> scanner</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Scanner</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">templateStr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> words</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 让扫描器工作</span></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">scanner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eos</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 收集开始标记出现之前的文字</span></span>
<span class="line"><span style="color:#E06C75;">		words</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> scanner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scanUtil</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{{&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">words</span><span style="color:#56B6C2;"> !=</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 尝试写一下去掉空格，智能判断是普通文字的空格，还是标签中的空格</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 标签中的空格不能去掉，比如&lt;div class=&quot;box&quot;&gt;不能去掉class前面的空格</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> isInJJH</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 空白字符串</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> _words</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> words</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 判断是否在标签里</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">words</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;&lt;&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					isInJJH</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">words</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;&gt;&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					isInJJH</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果这项不是空格，拼接上</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">/\\s/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">words</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])) {</span></span>
<span class="line"><span style="color:#E06C75;">					_words</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> words</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 如果这项是空格，只有当它在标签内的时候，才拼接上</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isInJJH</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">						_words</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> &quot; &quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 存起来，去掉空格</span></span>
<span class="line"><span style="color:#E5C07B;">			tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">_words</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 过双大括号</span></span>
<span class="line"><span style="color:#E5C07B;">		scanner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scan</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{{&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 收集开始标记出现之前的文字</span></span>
<span class="line"><span style="color:#E06C75;">		words</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> scanner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scanUtil</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;}}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">words</span><span style="color:#56B6C2;"> !=</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 这个words就是{{}}中间的东西。判断一下首字符</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">words</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;#&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 存起来，从下标为1的项开始存，因为下标为0的项是#</span></span>
<span class="line"><span style="color:#E5C07B;">				tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;#&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">words</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)]);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">words</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;/&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 存起来，从下标为1的项开始存，因为下标为0的项是/</span></span>
<span class="line"><span style="color:#E5C07B;">				tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">words</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)]);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 存起来</span></span>
<span class="line"><span style="color:#E5C07B;">				tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">words</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 过双大括号</span></span>
<span class="line"><span style="color:#E5C07B;">		scanner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scan</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;}}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 返回折叠收集的tokens</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> nestTokens</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tokens</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><p>renderTemplate.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> lookup</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./lookup.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> parseArray</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./parseArray.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    函数的功能是让tokens数组变为dom字符串</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> renderTemplate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">tokens</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 结果字符串</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> resultStr</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 遍历tokens</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> token</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tokens</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 看类型</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;text&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 拼起来</span></span>
<span class="line"><span style="color:#E06C75;">			resultStr</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> token</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;name&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果是name类型，那么就直接使用它的值，当然要用lookup</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 因为防止这里是“a.b.c”有逗号的形式</span></span>
<span class="line"><span style="color:#E06C75;">			resultStr</span><span style="color:#56B6C2;"> +=</span><span style="color:#61AFEF;"> lookup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;#&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			resultStr</span><span style="color:#56B6C2;"> +=</span><span style="color:#61AFEF;"> parseArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">token</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> resultStr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>Scanner.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    扫描器类</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Scanner</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">templateStr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将模板字符串写到实例身上</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">templateStr</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> templateStr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 指针</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pos</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 尾巴，一开始就是模板字符串原文</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tail</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> templateStr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 功能弱，就是走过指定内容，没有返回值</span></span>
<span class="line"><span style="color:#61AFEF;">	scan</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">tag</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">tail</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// tag有多长，比如{{长度是2，就让指针后移多少位</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pos</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> tag</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 尾巴也要变，改变尾巴为从当前指针这个字符开始，到最后的全部字符</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tail</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">templateStr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 让指针进行扫描，直到遇见指定内容结束，并且能够返回结束之前路过的文字</span></span>
<span class="line"><span style="color:#61AFEF;">	scanUtil</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">stopTag</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 记录一下执行本方法的时候pos的值</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> pos_backup</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当尾巴的开头不是stopTag的时候，就说明还没有扫描到stopTag</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 写&amp;&amp;很有必要，因为防止找不到，那么寻找到最后也要停止下来</span></span>
<span class="line"><span style="color:#C678DD;">		while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eos</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">tail</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stopTag</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pos</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 改变尾巴为从当前指针这个字符开始，到最后的全部字符</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">tail</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">templateStr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">templateStr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos_backup</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 指针是否已经到头，返回布尔值。end of string</span></span>
<span class="line"><span style="color:#61AFEF;">	eos</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pos</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">templateStr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>Mustache 底层太美了！tokens 的意义也不言自明了。如果没有 token，那 么数组的循环形式，就很难处理。我们通过本课，确实学到了很多，视野面 变得更广，感觉肚子里的东西更多了；</li><li>在 Mustache 源码中，还有 Context 类和 Writer 类，在我们的代码演示中， 都将它们进行了简化，但是不影响主干功能的实现。我们的这个“简化版本 的”代码非常值得大家进行手写，你会受益良多的！当然，如果有精力，可 以再研究透彻这个“简化版本的”代码后，自己对 Mustache 原包进行学习；</li></ul><h2 id="二、虚拟-dom-和-diff-算法" tabindex="-1">二、虚拟 DOM 和 diff 算法 <a class="header-anchor" href="#二、虚拟-dom-和-diff-算法" aria-label="Permalink to &quot;二、虚拟 DOM 和 diff 算法&quot;">​</a></h2><h3 id="简单介绍一下虚拟-dom-和-diff-算法" tabindex="-1">简单介绍一下虚拟 DOM 和 diff 算法 <a class="header-anchor" href="#简单介绍一下虚拟-dom-和-diff-算法" aria-label="Permalink to &quot;简单介绍一下虚拟 DOM 和 diff 算法&quot;">​</a></h3><p><img src="`+D+'" alt="image-20240304000205513"></p><p><img src="'+q+'" alt="image-20240304000222107"></p><p>diff 是发生在虚拟 DOM 上的</p><p><img src="'+p+'" alt="image-20240304000243984"></p><h3 id="开始学习" tabindex="-1">开始学习 <a class="header-anchor" href="#开始学习" aria-label="Permalink to &quot;开始学习&quot;">​</a></h3><p><img src="'+g+`" alt="image-20240304000403428"></p><h3 id="_1-snabbdom-简介和测试环境搭建" tabindex="-1">1.snabbdom 简介和测试环境搭建 <a class="header-anchor" href="#_1-snabbdom-简介和测试环境搭建" aria-label="Permalink to &quot;1.snabbdom 简介和测试环境搭建&quot;">​</a></h3><ul><li>snabbdom 是瑞典语单词，单词原意“速度”；</li><li>snabbdom 是著名的虚拟 DOM 库，是 diff 算法的鼻祖，Vue 源码借鉴了 snabbdom； 官方 git：<a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noreferrer">https://github.com/snabbdom/snabbdom</a></li></ul><h4 id="_1-安装-snabbdom" tabindex="-1">1.安装 snabbdom <a class="header-anchor" href="#_1-安装-snabbdom" aria-label="Permalink to &quot;1.安装 snabbdom&quot;">​</a></h4><p>1.在 git 上的 snabbdom 源码是用 TypeScript 写的，git 上并不提供编译好的 JavaScript 版本；</p><p>2.如果要直接使用 build 出来的 JavaScript 版的 snabbdom 库，可以从 npm 上下 载：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -D</span><span style="color:#98C379;"> snabbdom</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>学习库底层时，建议大家阅读原汁原味的 TS 代码，最好带有库作者原注释， 这样对你的源码阅读能力会有很大的提升。</p><h4 id="_2-snabbdom-的测试环境搭建" tabindex="-1">2.snabbdom 的测试环境搭建 <a class="header-anchor" href="#_2-snabbdom-的测试环境搭建" aria-label="Permalink to &quot;2.snabbdom 的测试环境搭建&quot;">​</a></h4><h5 id="新建一个目录-study-snabbdom" tabindex="-1">新建一个目录 study-snabbdom <a class="header-anchor" href="#新建一个目录-study-snabbdom" aria-label="Permalink to &quot;新建一个目录 study-snabbdom&quot;">​</a></h5><p>1.snabbdom 库是 DOM 库，当然不能在 nodejs 环境运行，所以我们需要搭建 webpack 和 webpack-dev-server 开发环境，好消息是不需要安装任何 loader</p><p>2.这里需要注意，<strong>必须安装最新版 webpack@5</strong>，不能安装 webpack@4，这是因为 webpack4 没有读取身份证中 exports 的能力，建议大家使用这样的版本：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -D</span><span style="color:#98C379;"> webpack@5</span><span style="color:#98C379;"> webpack-cli@3</span><span style="color:#98C379;"> webpack-dev-server@3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="webpack-config-js" tabindex="-1">webpack.config.js <a class="header-anchor" href="#webpack-config-js" aria-label="Permalink to &quot;webpack.config.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 从https://www.webpackjs.com/官网照着配置</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 入口</span></span>
<span class="line"><span style="color:#E06C75;">	entry</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./src/index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 出口</span></span>
<span class="line"><span style="color:#E06C75;">	output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 虚拟打包路径，就是说文件夹不会真正生成，而是在8080端口虚拟生成</span></span>
<span class="line"><span style="color:#E06C75;">		publicPath</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xuni&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 打包出来的文件名，不会真正的物理生成</span></span>
<span class="line"><span style="color:#E06C75;">		filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bundle.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	devServer</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 端口号</span></span>
<span class="line"><span style="color:#E06C75;">		port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 静态资源文件夹</span></span>
<span class="line"><span style="color:#E06C75;">		contentBase</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;www&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="package-json-1" tabindex="-1">package.json <a class="header-anchor" href="#package-json-1" aria-label="Permalink to &quot;package.json&quot;">​</a></h5><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;study-snabbdom&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;main&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;webpack-dev-server&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;author&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;license&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ISC&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;dependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;snabbdom&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.6.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;devDependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^5.11.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-cli&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.3.12&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-dev-server&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.11.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h5 id="src-index-js" tabindex="-1">src/index.js <a class="header-anchor" href="#src-index-js" aria-label="Permalink to &quot;src/index.js&quot;">​</a></h5><p>官方仓库的 Example 代码：</p><p><img src="`+f+`" alt="image-20240304010240972"></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	init</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	classModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	propsModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	styleModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	eventListenersModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	h</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> patch</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Init patch function with chosen modules</span></span>
<span class="line"><span style="color:#E06C75;">	classModule</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// makes it easy to toggle classes</span></span>
<span class="line"><span style="color:#E06C75;">	propsModule</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// for setting properties on DOM elements</span></span>
<span class="line"><span style="color:#E06C75;">	styleModule</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// handles styling on elements with support for animations</span></span>
<span class="line"><span style="color:#E06C75;">	eventListenersModule</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// attaches event listeners</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> container</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> vnode</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;div#container.two.classes&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">on</span><span style="color:#ABB2BF;">: { </span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div clicked&quot;</span><span style="color:#ABB2BF;">) } },</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span></span>
<span class="line"><span style="color:#61AFEF;">		h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;span&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">fontWeight</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bold&quot;</span><span style="color:#ABB2BF;"> } }, </span><span style="color:#98C379;">&quot;This is bold&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#98C379;">		&quot; and this is just normal text&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/foo&quot;</span><span style="color:#ABB2BF;"> } }, </span><span style="color:#98C379;">&quot;I&#39;ll take you places!&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	]</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Patch into empty DOM element – this modifies the DOM as a side effect</span></span>
<span class="line"><span style="color:#61AFEF;">patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> newVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;div#container.two.classes&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">on</span><span style="color:#ABB2BF;">: { </span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;updated div clicked&quot;</span><span style="color:#ABB2BF;">) } },</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span></span>
<span class="line"><span style="color:#61AFEF;">		h</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;span&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			{ </span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">fontWeight</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;normal&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fontStyle</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;italic&quot;</span><span style="color:#ABB2BF;"> } },</span></span>
<span class="line"><span style="color:#98C379;">			&quot;This is now italic type&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		),</span></span>
<span class="line"><span style="color:#98C379;">		&quot; and this is still just normal text&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/bar&quot;</span><span style="color:#ABB2BF;"> } }, </span><span style="color:#98C379;">&quot;I&#39;ll take you places!&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	]</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Second \`patch\` invocation</span></span>
<span class="line"><span style="color:#61AFEF;">patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newVnode</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Snabbdom efficiently updates the old view to the new state</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h5 id="www-index-html" tabindex="-1">www/index.html <a class="header-anchor" href="#www-index-html" aria-label="Permalink to &quot;www/index.html&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;btn&quot;</span><span style="color:#ABB2BF;">&gt;按我改变DOM&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/xuni/bundle.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>开始启动项目，即证明调试环境已经搭建成功。</p><h4 id="_3-snabbdom-官方-git-仓库-examples-目录的-demo-程序" tabindex="-1">3.snabbdom 官方 git 仓库 examples 目录的 demo 程序 <a class="header-anchor" href="#_3-snabbdom-官方-git-仓库-examples-目录的-demo-程序" aria-label="Permalink to &quot;3.snabbdom 官方 git 仓库 examples 目录的 demo 程序&quot;">​</a></h4><p>跑通 snabbdom 官方 git 仓库的 Example 的代码也可以找 examples 目录的 demo 程序跑跑试下。</p><p><img src="`+v+'" alt="image-20240304004336746"></p><h3 id="_2-虚拟-dom-和-h-函数" tabindex="-1">2.虚拟 DOM 和 h 函数 <a class="header-anchor" href="#_2-虚拟-dom-和-h-函数" aria-label="Permalink to &quot;2.虚拟 DOM 和 h 函数&quot;">​</a></h3><p><img src="'+k+'" alt="image-20240304001301141"></p><p>diff 是发生在虚拟 DOM 上的</p><p><img src="'+p+`" alt="image-20240304000243984"></p><h3 id="_3-体验-h-和-diff-函数" tabindex="-1">3.体验 h 和 diff 函数 <a class="header-anchor" href="#_3-体验-h-和-diff-函数" aria-label="Permalink to &quot;3.体验 h 和 diff 函数&quot;">​</a></h3><p>基于上面的创建的 study-snabbdom 项目</p><h5 id="package-json-装上-snabbdom-库" tabindex="-1">package.json 装上 snabbdom 库 <a class="header-anchor" href="#package-json-装上-snabbdom-库" aria-label="Permalink to &quot;package.json 装上 snabbdom 库&quot;">​</a></h5><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;study-snabbdom&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;main&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;webpack-dev-server&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;author&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;license&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ISC&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;dependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;snabbdom&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.6.2&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;devDependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^5.11.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-cli&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.3.12&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-dev-server&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.11.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h5 id="src-index-学习-h-函数-js" tabindex="-1">src/index-学习 h 函数.js <a class="header-anchor" href="#src-index-学习-h-函数-js" aria-label="Permalink to &quot;src/index-学习 h 函数.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/init&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">classModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/modules/class&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">propsModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/modules/props&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">styleModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/modules/style&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">eventListenersModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/modules/eventlisteners&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">h</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/h&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建出patch函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> patch</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#E06C75;">	classModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	propsModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	styleModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	eventListenersModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建虚拟节点</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myVnode1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;a&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		props</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			href</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://www.atguigu.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			target</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;_blank&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#98C379;">	&quot;尚硅谷&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myVnode2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;我是一个盒子&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myVnode3</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">, [</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, {}, </span><span style="color:#98C379;">&quot;苹果&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;西瓜&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, [</span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">, [</span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;哈哈&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;嘻嘻&quot;</span><span style="color:#ABB2BF;">)])]),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;火龙果&quot;</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myVnode3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 让虚拟节点上树</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> container</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">myVnode3</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h5 id="src-index-体验-diff-算法-js" tabindex="-1">src/index-体验 diff 算法.js <a class="header-anchor" href="#src-index-体验-diff-算法-js" aria-label="Permalink to &quot;src/index-体验 diff 算法.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/init&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">classModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/modules/class&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">propsModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/modules/props&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">styleModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/modules/style&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">eventListenersModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/modules/eventlisteners&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">h</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;snabbdom/h&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 得到盒子和按钮</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> container</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> btn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;btn&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建出patch函数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> patch</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#E06C75;">	classModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	propsModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	styleModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	eventListenersModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> vnode1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">, {}, [</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> vnode2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">, {}, [</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 点击按钮时，将vnode1变为vnode2</span></span>
<span class="line"><span style="color:#E5C07B;">btn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">	patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vnode1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vnode2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="_4-snabbdom-的-h-函数如何工作" tabindex="-1">4.snabbdom 的 h 函数如何工作 <a class="header-anchor" href="#_4-snabbdom-的-h-函数如何工作" aria-label="Permalink to &quot;4.snabbdom 的 h 函数如何工作&quot;">​</a></h3><h4 id="h-函数用来产生虚拟节点-vnode" tabindex="-1">h 函数用来产生虚拟节点（vnode） <a class="header-anchor" href="#h-函数用来产生虚拟节点-vnode" aria-label="Permalink to &quot;h 函数用来产生虚拟节点（vnode）&quot;">​</a></h4><p>比如这样调用 h 函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://www.atguigu.com&quot;</span><span style="color:#ABB2BF;"> } }, </span><span style="color:#98C379;">&quot;尚硅谷&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将得到这样的虚拟节点：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{ </span><span style="color:#98C379;">&quot;sel&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;data&quot;</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;http://www.atguigu.com&#39;</span><span style="color:#ABB2BF;"> } }, </span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;尚硅谷&quot;</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>它表示的真正的 DOM 节点：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">a</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.atguigu.com&quot;</span><span style="color:#ABB2BF;">&gt;尚硅谷&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="一个虚拟节点有哪些属性" tabindex="-1">一个虚拟节点有哪些属性？ <a class="header-anchor" href="#一个虚拟节点有哪些属性" aria-label="Permalink to &quot;一个虚拟节点有哪些属性？&quot;">​</a></h4><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#FFFFFF;">    children</span><span style="color:#ABB2BF;">: </span><span style="color:#FFFFFF;">undefined</span></span>
<span class="line"><span style="color:#FFFFFF;">    data:</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#FFFFFF;">    elm:</span><span style="color:#FFFFFF;"> undefined</span></span>
<span class="line"><span style="color:#FFFFFF;">    key:</span><span style="color:#FFFFFF;"> undefined</span></span>
<span class="line"><span style="color:#FFFFFF;">    sel:</span><span style="color:#98C379;"> &quot;div&quot;</span></span>
<span class="line"><span style="color:#FFFFFF;">    text:</span><span style="color:#98C379;"> &quot;我是一个盒子&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>h 函数可以嵌套使用，从而得到虚拟 DOM 树（重要）</p><p>比如这样嵌套使用 h 函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">, {}, [</span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, {}, </span><span style="color:#98C379;">&quot;牛奶&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, {}, </span><span style="color:#98C379;">&quot;咖啡&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, {}, </span><span style="color:#98C379;">&quot;可乐&quot;</span><span style="color:#ABB2BF;">)]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将得到这样的虚拟 DOM 树：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;sel&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;data&quot;</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;children&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">&quot;sel&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;text&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;牛奶&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">&quot;sel&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;text&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;咖啡&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">&quot;sel&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;text&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;可乐&quot;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">	]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="h-函数用法很活" tabindex="-1">h 函数用法很活 <a class="header-anchor" href="#h-函数用法很活" aria-label="Permalink to &quot;h 函数用法很活&quot;">​</a></h4><p>演示一下 h 函数的多种用法</p><p><img src="`+x+'" alt="image-20240304002034531"></p><h3 id="_5-diff-算法原理" tabindex="-1">5.diff 算法原理 <a class="header-anchor" href="#_5-diff-算法原理" aria-label="Permalink to &quot;5.diff 算法原理&quot;">​</a></h3><ul><li>最小量更新太厉害啦！真的是最小量更新！当然，key 很重要。key 是这个节点的唯一标识，告诉 diff 算法，在更改前后它们是同一个 DOM 节点。</li><li><strong>只有是同一个虚拟节点，才进行精细化比较</strong>，否则就是暴力删除旧的、插入新的。延伸问题：如何定义是同一个虚拟节点？答：选择器相同且 key 相同。</li><li><strong>只进行同层比较，不会进行跨层比较</strong>。即使是同一片虚拟节点，但是跨层了，对不起，精细化比较不 diff 你，而是暴力删除旧的、然后插入新的。</li></ul><p>diff 并不是那么的“无微不至”啊！真的影响效率么？？</p><p>答：上面 2、3 操作在实际 Vue 开发中，基本不会遇见，所以这是合理的优化 机制。</p><h4 id="同层对比示意图" tabindex="-1">同层对比示意图 <a class="header-anchor" href="#同层对比示意图" aria-label="Permalink to &quot;同层对比示意图&quot;">​</a></h4><p><img src="'+w+'" alt="image-20240304002246646"></p><h4 id="diff-处理新旧节点不是同一个节点时" tabindex="-1">diff 处理新旧节点不是同一个节点时 <a class="header-anchor" href="#diff-处理新旧节点不是同一个节点时" aria-label="Permalink to &quot;diff 处理新旧节点不是同一个节点时&quot;">​</a></h4><p><img src="'+j+'" alt="image-20240304002323699"></p><h4 id="如何定义-同一个节点" tabindex="-1">如何定义“同一个节点” <a class="header-anchor" href="#如何定义-同一个节点" aria-label="Permalink to &quot;如何定义“同一个节点”&quot;">​</a></h4><p><img src="'+_+'" alt="image-20240304002356237"></p><h4 id="创建节点时-所有子节点需要递归创建的" tabindex="-1">创建节点时，所有子节点需要递归创建的 <a class="header-anchor" href="#创建节点时-所有子节点需要递归创建的" aria-label="Permalink to &quot;创建节点时，所有子节点需要递归创建的&quot;">​</a></h4><p><img src="'+V+'" alt="image-20240304002418827"></p><h4 id="diff-算法处理新旧节点为同一节点时" tabindex="-1">diff 算法处理新旧节点为同一节点时 <a class="header-anchor" href="#diff-算法处理新旧节点为同一节点时" aria-label="Permalink to &quot;diff 算法处理新旧节点为同一节点时&quot;">​</a></h4><p><img src="'+P+'" alt="流程图"></p><h4 id="经典的-diff-算法优化策略" tabindex="-1">经典的 diff 算法优化策略 <a class="header-anchor" href="#经典的-diff-算法优化策略" aria-label="Permalink to &quot;经典的 diff 算法优化策略&quot;">​</a></h4><p><img src="'+S+'" alt="image-20240304002503493"></p><h4 id="算法-旧前、旧后-新前、新后概念" tabindex="-1">算法：旧前、旧后 | 新前、新后概念 <a class="header-anchor" href="#算法-旧前、旧后-新前、新后概念" aria-label="Permalink to &quot;算法：旧前、旧后 | 新前、新后概念&quot;">​</a></h4><p>旧前：旧节点合集的的第一个节点</p><p>旧后：旧节点合集的的最后一个节点</p><p>新前：新节点合集的的第一个节点</p><p>新后：新节点合集的的最后一个节点</p><p>这些判断对比后虚拟 DOM 命中后会移动位置，这些命名也会移动位置，换一个 DOM 成为旧前、旧后 | 新前、新后。</p><h4 id="更新子节点-对应-updatechildren-js-里的方法" tabindex="-1">更新子节点：对应 updateChildren.js 里的方法 <a class="header-anchor" href="#更新子节点-对应-updatechildren-js-里的方法" aria-label="Permalink to &quot;更新子节点：对应 updateChildren.js 里的方法&quot;">​</a></h4><h5 id="新增的情况" tabindex="-1">新增的情况 <a class="header-anchor" href="#新增的情况" aria-label="Permalink to &quot;新增的情况&quot;">​</a></h5><p><img src="'+O+'" alt="image-20240304002602954"></p><p><img src="'+T+'" alt="image-20240304002709171"></p><h5 id="删除的情况" tabindex="-1">删除的情况 <a class="header-anchor" href="#删除的情况" aria-label="Permalink to &quot;删除的情况&quot;">​</a></h5><p><img src="'+M+'" alt="image-20240304002737168"></p><h5 id="多删除的情况" tabindex="-1">多删除的情况 <a class="header-anchor" href="#多删除的情况" aria-label="Permalink to &quot;多删除的情况&quot;">​</a></h5><p><img src="'+N+'" alt="image-20240304002759285"></p><h5 id="复杂的情况" tabindex="-1">复杂的情况 <a class="header-anchor" href="#复杂的情况" aria-label="Permalink to &quot;复杂的情况&quot;">​</a></h5><p><img src="'+I+'" alt="image-20240304002824645"></p><p><img src="'+L+`" alt="image-20240304002842533"></p><h3 id="_6-手写实现虚拟-dom-和-diff-算法" tabindex="-1">6.手写实现虚拟 DOM 和 diff 算法🅰️ <a class="header-anchor" href="#_6-手写实现虚拟-dom-和-diff-算法" aria-label="Permalink to &quot;6.手写实现虚拟 DOM 和 diff 算法:a:&quot;">​</a></h3><p>基于上面的创建的 study-snabbdom 项目，手写实现 snabbdom</p><h4 id="_6-1-调试代码" tabindex="-1">6.1 调试代码 <a class="header-anchor" href="#_6-1-调试代码" aria-label="Permalink to &quot;6.1 调试代码&quot;">​</a></h4><h5 id="src-index-js-1" tabindex="-1">src/index.js <a class="header-anchor" href="#src-index-js-1" aria-label="Permalink to &quot;src/index.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> h</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./mysnabbdom/h.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> patch</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./mysnabbdom/patch.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myVnode1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">, {}, [</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;E&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;E&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 得到盒子和按钮</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> container</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> btn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;btn&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第一次上树</span></span>
<span class="line"><span style="color:#61AFEF;">patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">container</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">myVnode1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 新节点</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myVnode2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">, {}, [</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Q&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;Q&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;T&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;T&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Z&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;Z&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">	h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;E&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#98C379;">&quot;E&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">btn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">	patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myVnode1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">myVnode2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h4 id="_6-2-src-mysnabbdom-目录-自己实现的-snabbdom" tabindex="-1">6.2 🅱️src/mysnabbdom 目录：自己实现的 snabbdom <a class="header-anchor" href="#_6-2-src-mysnabbdom-目录-自己实现的-snabbdom" aria-label="Permalink to &quot;6.2 :b:src/mysnabbdom 目录：自己实现的 snabbdom&quot;">​</a></h4><p>snabbdom 的源码是 ts 写的：<a href="https://github.com/snabbdom/snabbdom%EF%BC%8C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E4%BB%BF%E5%86%99js%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%8F%AA%E8%A6%81%E4%B8%BB%E5%B9%B2%E5%8A%9F%E8%83%BD" target="_blank" rel="noreferrer">https://github.com/snabbdom/snabbdom，我们需要仿写js代码，只要主干功能</a></p><h5 id="src-mysnabbdom-vnode-js" tabindex="-1">src/mysnabbdom/vnode.js <a class="header-anchor" href="#src-mysnabbdom-vnode-js" aria-label="Permalink to &quot;src/mysnabbdom/vnode.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 函数的功能非常简单，就是把传入的5个参数组合成对象返回</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">sel</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">text</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">elm</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> key</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		sel</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		children</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		text</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		elm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		key</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="src-mysnabbdom-h-js-创建虚拟节点" tabindex="-1">src/mysnabbdom/h.js：创建虚拟节点 <a class="header-anchor" href="#src-mysnabbdom-h-js-创建虚拟节点" aria-label="Permalink to &quot;src/mysnabbdom/h.js：创建虚拟节点&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> vnode</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./vnode.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 编写一个低配版本的h函数，这个函数必须接受3个参数，缺一不可</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 相当于它的重载功能较弱。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 也就是说，调用的时候形态必须是下面的三种之一：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ——形态①：h(&#39;div&#39;, {}, &#39;文字&#39;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ——形态②：h(&#39;div&#39;, {}, [])</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ——形态③：h(&#39;div&#39;, {}, h())</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">sel</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 检查参数的个数</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;对不起，h函数必须传入3个参数，我们是低配版h函数&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 检查参数c的类型</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;number&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 说明现在调用h函数是形态①</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> vnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sel</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 说明现在调用h函数是形态②</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> children</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 遍历c，收集children</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 检查c[i]必须是一个对象，如果不满足</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sel&quot;</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#C678DD;">				throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;传入的数组参数中有项不是h函数&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 这里不用执行c[i]，因为你的测试语句中已经有了执行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 此时只需要收集好就可以了</span></span>
<span class="line"><span style="color:#E5C07B;">			children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 循环结束了，就说明children收集完毕了，此时可以返回虚拟节点了，它有children属性的</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> vnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sel</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sel&quot;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 说明现在调用h函数是形态③</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 即，传入的c是唯一的children。不用执行c，因为测试语句中已经执行了c。</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> children</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> vnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sel</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;传入的第三个参数类型不对&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h5 id="src-mysnabbdom-patch-js-让虚拟节点上-dom-树" tabindex="-1">src/mysnabbdom/patch.js：让虚拟节点上 dom 树 <a class="header-anchor" href="#src-mysnabbdom-patch-js-让虚拟节点上-dom-树" aria-label="Permalink to &quot;src/mysnabbdom/patch.js：让虚拟节点上 dom 树&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> vnode</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./vnode.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> createElement</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./createElement.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> patchVnode</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./patchVnode.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> patch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newVnode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断传入的第一个参数，是DOM节点还是虚拟节点？</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sel</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sel</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 传入的第一个参数是DOM节点，此时要包装为虚拟节点</span></span>
<span class="line"><span style="color:#E06C75;">		oldVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vnode</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">			oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">tagName</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">			{},</span></span>
<span class="line"><span style="color:#ABB2BF;">			[],</span></span>
<span class="line"><span style="color:#D19A66;">			undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			oldVnode</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断oldVnode和newVnode是不是同一个节点</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> newVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sel</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> newVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sel</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;是同一个节点&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newVnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;不是同一个节点，暴力插入新的，删除旧的&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 根据虚拟DOM节点创建真实的DOM节点</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> newVnodeElm</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 插入到老节点之前</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parentNode</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> newVnodeElm</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parentNode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVnodeElm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 删除老节点</span></span>
<span class="line"><span style="color:#E5C07B;">		oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parentNode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h5 id="src-mysnabbdom-createelement-js-将-vnode-虚拟节点创建为真实-dom-节点" tabindex="-1">src/mysnabbdom/createElement.js：将 vnode 虚拟节点创建为真实 DOM 节点 <a class="header-anchor" href="#src-mysnabbdom-createelement-js-将-vnode-虚拟节点创建为真实-dom-节点" aria-label="Permalink to &quot;src/mysnabbdom/createElement.js：将 vnode 虚拟节点创建为真实 DOM 节点&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 真正创建节点：将vnode创建为DOM，是孤儿节点，不进行插入</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vnode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(&#39;目的是把虚拟节点&#39;, vnode, &#39;真正变为DOM&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建一个DOM节点，这个节点现在还是孤儿节点</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> domNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sel</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 有子节点还是有文本？？</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E5C07B;">		vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#56B6C2;"> !=</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> undefined</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 它内部是文字</span></span>
<span class="line"><span style="color:#E5C07B;">		domNode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 它内部是子节点，就要递归创建节点</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 得到当前这个children</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> ch</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 创建出它的DOM，一旦调用createElement意味着：创建出DOM了，并且它的elm属性指向了创建出的DOM，但是还没有上树，是一个孤儿节点。</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> chDOM</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ch</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 上树</span></span>
<span class="line"><span style="color:#E5C07B;">			domNode</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">chDOM</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 补充elm属性</span></span>
<span class="line"><span style="color:#E5C07B;">	vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> domNode</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 返回elm，elm属性是一个纯DOM对象</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> vnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h5 id="src-mysnabbdom-patchvnode-js-同一虚拟-dom-的新老节点对比" tabindex="-1">src/mysnabbdom/patchVnode.js：同一虚拟 DOM 的新老节点对比 <a class="header-anchor" href="#src-mysnabbdom-patchvnode-js-同一虚拟-dom-的新老节点对比" aria-label="Permalink to &quot;src/mysnabbdom/patchVnode.js：同一虚拟 DOM 的新老节点对比&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> createElement</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./createElement&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> updateChildren</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./updateChildren.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对比同一个虚拟节点</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">oldVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newVnode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断新旧vnode是否是同一个对象</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldVnode</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> newVnode</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断新vnode有没有text属性</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E5C07B;">		newVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> undefined</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E5C07B;">newVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> undefined</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> newVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 新vnode有text属性</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;新vnode有text属性&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">newVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#56B6C2;"> !=</span><span style="color:#E5C07B;"> oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果新虚拟节点中的text和老的虚拟节点的text不同，那么直接让新的text写入老的elm中即可。如果老的elm中是children，那么也会立即消失掉。</span></span>
<span class="line"><span style="color:#E5C07B;">			oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerText</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> newVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 新vnode没有text属性，有children</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;新vnode没有text属性&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 判断老的有没有children</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> undefined</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 老的有children，新的也有children，此时就是最复杂的情况。</span></span>
<span class="line"><span style="color:#61AFEF;">			updateChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">newVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 老的没有children，新的有children</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 清空老的节点的内容</span></span>
<span class="line"><span style="color:#E5C07B;">			oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 遍历新的vnode的子节点，创建DOM，上树</span></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> newVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> dom</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">newVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">				oldVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dom</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h5 id="src-mysnabbdom-updatechildren-js-diff-对比后更新子-dom-节点" tabindex="-1">src/mysnabbdom/updateChildren.js：diff 对比后更新子 DOM 节点 <a class="header-anchor" href="#src-mysnabbdom-updatechildren-js-diff-对比后更新子-dom-节点" aria-label="Permalink to &quot;src/mysnabbdom/updateChildren.js：diff 对比后更新子 DOM 节点&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> patchVnode</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./patchVnode.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> createElement</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./createElement.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断是否是同一个虚拟节点</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> checkSameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sel</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sel</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> b</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> updateChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">parentElm</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">oldCh</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">newCh</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我是updateChildren&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newCh</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 旧前</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> oldStartIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 新前</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> newStartIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 旧后</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> oldEndIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> oldCh</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 新后</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> newEndIdx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> newCh</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 旧前节点</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 旧后节点</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 新前节点</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 新后节点</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> newEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> keyMap</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 开始大while了</span></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> oldEndIdx</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> newStartIdx</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> newEndIdx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;★&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 首先不是判断①②③④命中，而是要略过已经加undefined标记的东西</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newStartVnode</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newEndVnode</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			newEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">checkSameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 新前和旧前</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;①新前和旧前命中&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">			newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">checkSameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEndVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 新后和旧后</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;②新后和旧后命中&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEndVnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">			newEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">checkSameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEndVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 新后和旧前</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;③新后和旧前命中&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldStartVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newEndVnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当③新后与旧前命中的时候，此时要移动节点。移动新前指向的这个节点到老节点的旧后的后面</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如何移动节点？？只要你插入一个已经在DOM树上的节点，它就会被移动</span></span>
<span class="line"><span style="color:#E5C07B;">			parentElm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldEndVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">elm</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nextSibling</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			oldStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">			newEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">newEndIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">checkSameVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 新前和旧后</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;④新前和旧后命中&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldEndVnode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当④新前和旧后命中的时候，此时要移动节点。移动新前指向的这个节点到老节点的旧前的前面</span></span>
<span class="line"><span style="color:#E5C07B;">			parentElm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">oldEndVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如何移动节点？？只要你插入一个已经在DOM树上的节点，它就会被移动</span></span>
<span class="line"><span style="color:#E06C75;">			oldEndVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">oldEndIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">			newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 四种命中都没有命中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 制作keyMap一个映射对象，这样就不用每次都遍历老对象了。</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">keyMap</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				keyMap</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 从oldStartIdx开始，到oldEndIdx结束，创建keyMap映射对象</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldStartIdx</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> oldEndIdx</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					const</span><span style="color:#E5C07B;"> key</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">						keyMap</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">keyMap</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 寻找当前这项（newStartIdx）这项在keyMap中的映射的位置序号</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> idxInOld</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> keyMap</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">newStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">idxInOld</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 判断，如果idxInOld是undefined表示它是全新的项</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 被加入的项（就是newStartVnode这项)现不是真正的DOM节点</span></span>
<span class="line"><span style="color:#E5C07B;">				parentElm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果不是undefined，不是全新的项，而是要移动</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> elmToMove</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">				patchVnode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">elmToMove</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newStartVnode</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 把这项设置为undefined，表示我已经处理完这项了</span></span>
<span class="line"><span style="color:#E06C75;">				oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">idxInOld</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 移动，调用insertBefore也可以实现移动。</span></span>
<span class="line"><span style="color:#E5C07B;">				parentElm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">elmToMove</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oldStartVnode</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 指针下移，只移动新的头</span></span>
<span class="line"><span style="color:#E06C75;">			newStartVnode</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 继续看看有没有剩余的。循环结束了start还是比old小</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">newStartIdx</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> newEndIdx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;new还有剩余节点没有处理，要加项。要把所有剩余的节点，都要插入到oldStartIdx之前&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 遍历新的newCh，添加到老的没有处理的之前</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newStartIdx</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> newEndIdx</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// insertBefore方法可以自动识别null，如果是null就会自动排到队尾去。和appendChild是一致了。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// newCh[i]现在还没有真正的DOM，所以要调用createElement()函数变为DOM</span></span>
<span class="line"><span style="color:#E5C07B;">			parentElm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]), </span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldStartIdx</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> oldEndIdx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;old还有剩余节点没有处理，要删除项&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 批量删除oldStart和oldEnd指针之间的项</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> oldStartIdx</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> oldEndIdx</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#E5C07B;">				parentElm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oldCh</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">elm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br></div></div><h2 id="三、数据响应式原理-数据变化侦测" tabindex="-1">三、数据响应式原理(数据变化侦测) <a class="header-anchor" href="#三、数据响应式原理-数据变化侦测" aria-label="Permalink to &quot;三、数据响应式原理(数据变化侦测)&quot;">​</a></h2><p>彻底弄懂 Vue2 的数据更新原理，手写相关实现代码，官方原理图：</p><p><img src="`+R+'" alt="image-20240304032556845"></p><h3 id="_1-从-mvvm-模式开始" tabindex="-1">1.从 MVVM 模式开始 <a class="header-anchor" href="#_1-从-mvvm-模式开始" aria-label="Permalink to &quot;1.从 MVVM 模式开始&quot;">​</a></h3><p><img src="'+W+'" alt="image-20240304032630350"></p><h3 id="_2-侵入式和非侵入式" tabindex="-1">2.侵入式和非侵入式 <a class="header-anchor" href="#_2-侵入式和非侵入式" aria-label="Permalink to &quot;2.侵入式和非侵入式&quot;">​</a></h3><p><img src="'+$+`" alt="image-20240304032654767"></p><h3 id="_3-数据的劫持和代理方法-object-defineproperty" tabindex="-1">3.数据的劫持和代理方法：Object.defineProperty() <a class="header-anchor" href="#_3-数据的劫持和代理方法-object-defineproperty" aria-label="Permalink to &quot;3.数据的劫持和代理方法：Object.defineProperty()&quot;">​</a></h3><p>利用 JavaScript 引擎赋予的功能方法：Object.defineProperty()，检测对象属性变化：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">Object.defineProperty() - JavaScript | MDN (mozilla.org)</a></p><p>Object.defineProperty()方法会直接在一个对象上定义一个新属性，或者修改 一个对象的现有属性，并返回此对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Object.defineProperty()方法可以设置一些额外隐藏的属性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 是否可写</span></span>
<span class="line"><span style="color:#E06C75;">	writable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 是否可以被枚举</span></span>
<span class="line"><span style="color:#E06C75;">	enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="getter-setter" tabindex="-1">getter/setter <a class="header-anchor" href="#getter-setter" aria-label="Permalink to &quot;getter/setter&quot;">​</a></h4><p>看 MDN 文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">Object.defineProperty() - JavaScript | MDN (mozilla.org)</a></p><p><img src="`+U+`" alt="image-20240304033127556"></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// getter</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;你试图访问obj的a属性&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// setter</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;你试图改变obj的a属性&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这里有一个小坑：需要用闭包存储 get 和 set 的值</p><h4 id="definereactive-闭包函数" tabindex="-1">defineReactive 闭包函数 <a class="header-anchor" href="#definereactive-闭包函数" aria-label="Permalink to &quot;defineReactive 闭包函数&quot;">​</a></h4><h5 id="getter-setter-需要变量周转才能工作" tabindex="-1">getter/setter 需要变量周转才能工作 <a class="header-anchor" href="#getter-setter-需要变量周转才能工作" aria-label="Permalink to &quot;getter/setter 需要变量周转才能工作&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义外部的变量作为周转</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> temp</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// getter</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;你试图访问obj的a属性&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> temp</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// setter</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;你试图改变obj的a属性&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		temp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 9</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="使用-definereactive-函数不需要设置临时变量了-而是用闭包" tabindex="-1">使用 defineReactive 函数不需要设置临时变量了，而是用闭包 <a class="header-anchor" href="#使用-definereactive-函数不需要设置临时变量了-而是用闭包" aria-label="Permalink to &quot;使用 defineReactive 函数不需要设置临时变量了，而是用闭包&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 可枚举</span></span>
<span class="line"><span style="color:#E06C75;">		enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 可以被配置，比如可以被delete</span></span>
<span class="line"><span style="color:#E06C75;">		configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// getter</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;你试图访问obj的&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;属性&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// val 参数当做上面外部的临时变量</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// setter</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;你试图改变obj的&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;属性&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// val 参数当做上面外部的临时变量</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">val</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E06C75;">			val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 29</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 30</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="_4-递归侦测对象全部属性" tabindex="-1">4.递归侦测对象全部属性 <a class="header-anchor" href="#_4-递归侦测对象全部属性" aria-label="Permalink to &quot;4.递归侦测对象全部属性&quot;">​</a></h3><p>Observer：观察类</p><p><img src="`+Y+'" alt="image-20240304033458856"></p><h3 id="_5-数组的响应式处理" tabindex="-1">5.数组的响应式处理 <a class="header-anchor" href="#_5-数组的响应式处理" aria-label="Permalink to &quot;5.数组的响应式处理&quot;">​</a></h3><h4 id="vue-底层改写了数组原生的七个方法" tabindex="-1">Vue 底层改写了数组原生的七个方法 <a class="header-anchor" href="#vue-底层改写了数组原生的七个方法" aria-label="Permalink to &quot;Vue 底层改写了数组原生的七个方法&quot;">​</a></h4><p><img src="'+J+'" alt="image-20240304033555946"></p><h3 id="_6-依赖收集" tabindex="-1">6.依赖收集 <a class="header-anchor" href="#_6-依赖收集" aria-label="Permalink to &quot;6.依赖收集&quot;">​</a></h3><h4 id="什么是依赖" tabindex="-1">什么是依赖？ <a class="header-anchor" href="#什么是依赖" aria-label="Permalink to &quot;什么是依赖？&quot;">​</a></h4><ul><li>需要用到数据的地方，称为依赖</li><li>Vue1.x，细粒度依赖，用到数据的 DOM 都是依赖；</li><li>Vue2.x，中等粒度依赖，用到数据的组件是依赖；</li><li>在 getter 中收集依赖，在 setter 中触发依赖</li></ul><h4 id="dep-类和-watcher-类" tabindex="-1">Dep 类和 Watcher 类 <a class="header-anchor" href="#dep-类和-watcher-类" aria-label="Permalink to &quot;Dep 类和 Watcher 类&quot;">​</a></h4><p>1.把依赖收集的代码封装成一个 Dep 类，它专门用来管理依赖，<strong>每个 Observer 的实例，成员中都有一个 Dep 的实例；</strong></p><p>2.Watcher 是一个中介，数据发生变化时通过 Watcher 中转，通知组件。</p><p><img src="'+H+'" alt="image-20240304033702159"></p><ul><li>依赖就是 Watcher。只有 Watcher 触发的 getter 才会收集依赖，哪个 Watcher 触发了 getter，就把哪个 Watcher 收集到 Dep 中。</li><li>Dep 使用发布订阅模式，当数据发生变化时，会循环依赖列表，把所有的 Watcher 都通知一遍。</li></ul><p>代码实现的巧妙之处：Watcher 把自己设置到全局的一个指定位置，然后读取数据，因为读取了数据，所以会触发这个数据的 getter。在 getter 中就能得到当前正在读取数据的 Watcher，并把这个 Watcher 收集到 Dep 中。</p><p><img src="'+G+`" alt="image-20240304033757118"></p><h3 id="_7-根据-vue2-响应式原理手写实现响应式代码" tabindex="-1">7.🅰️根据 Vue2 响应式原理手写实现响应式代码 <a class="header-anchor" href="#_7-根据-vue2-响应式原理手写实现响应式代码" aria-label="Permalink to &quot;7.:a:根据 Vue2 响应式原理手写实现响应式代码&quot;">​</a></h3><p>项目依然是使用 webpack 打包的。</p><h4 id="_1-新建项目目录-study-data-reactive" tabindex="-1">1.新建项目目录：study-data-reactive <a class="header-anchor" href="#_1-新建项目目录-study-data-reactive" aria-label="Permalink to &quot;1.新建项目目录：study-data-reactive&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">src：手写实现的源码目录</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——array.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——defineReactive.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——Dep.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——index.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——observe.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——Observer.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——utils.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">__Watcher.js</span></span>
<span class="line"><span style="color:#61AFEF;">www：导入手写打包而成的bundle.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">—index.html</span></span>
<span class="line"><span style="color:#61AFEF;">package.json</span></span>
<span class="line"><span style="color:#61AFEF;">webpack.config.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_2-手写的响应式代码" tabindex="-1">2.🅱️手写的响应式代码 <a class="header-anchor" href="#_2-手写的响应式代码" aria-label="Permalink to &quot;2.:b:手写的响应式代码&quot;">​</a></h4><p>www/index.html</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/xuni/bundle.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>package.json</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;study-snabbdom&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;main&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;webpack-dev-server&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;author&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;license&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ISC&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;dependencies&quot;</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;devDependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^5.11.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-cli&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.3.12&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-dev-server&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.11.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>webpack.config.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 从https://www.webpackjs.com/官网照着配置</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 入口</span></span>
<span class="line"><span style="color:#E06C75;">	entry</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./src/index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 出口</span></span>
<span class="line"><span style="color:#E06C75;">	output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 虚拟打包路径，就是说文件夹不会真正生成，而是在8080端口虚拟生成</span></span>
<span class="line"><span style="color:#E06C75;">		publicPath</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xuni&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 打包出来的文件名，不会真正的物理生成</span></span>
<span class="line"><span style="color:#E06C75;">		filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bundle.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	devServer</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 端口号</span></span>
<span class="line"><span style="color:#E06C75;">		port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 静态资源文件夹</span></span>
<span class="line"><span style="color:#E06C75;">		contentBase</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;www&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>src/index.js：调用手写实现的响应式相关的方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> observe</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./observe.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Watcher</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Watcher.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	a</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		m</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			n</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	c</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		d</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			e</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				f</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">6666</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	g</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">33</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">44</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">55</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Watcher</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a.m.n&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;★我是watcher，我在监控a.m.n&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 88</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// obj.g.push(66);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h5 id="src-definereactive-js-通过闭包函数使用-object-defineproperty" tabindex="-1">src/defineReactive.js：通过闭包函数使用 Object.defineProperty() <a class="header-anchor" href="#src-definereactive-js-通过闭包函数使用-object-defineproperty" aria-label="Permalink to &quot;src/defineReactive.js：通过闭包函数使用 Object.defineProperty()&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> observe</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./observe.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Dep</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Dep.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// console.log(&#39;我是defineReactive&#39;, key);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 子元素要进行observe，至此形成了递归。这个递归不是函数自己调用自己，而是多个函数、类循环调用</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> childOb</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 可枚举</span></span>
<span class="line"><span style="color:#E06C75;">		enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 可以被配置，比如可以被delete</span></span>
<span class="line"><span style="color:#E06C75;">		configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// getter</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;你试图访问&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;属性&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果现在处于依赖收集阶段</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">childOb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					childOb</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// setter</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;你试图改变&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> key</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;属性&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">val</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E06C75;">			val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当设置了新值，这个新值也要被observe</span></span>
<span class="line"><span style="color:#E06C75;">			childOb</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 发布订阅模式，通知dep</span></span>
<span class="line"><span style="color:#E5C07B;">			dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h5 id="src-observe-js-让-observer-工具类只为对象服务" tabindex="-1">src/observe.js：让 Observer 工具类只为对象服务 <a class="header-anchor" href="#src-observe-js-让-observer-工具类只为对象服务" aria-label="Permalink to &quot;src/observe.js：让 Observer 工具类只为对象服务&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Observer</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Observer.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果value不是对象，什么都不做</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> !=</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 定义ob</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> ob</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__ob__</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		ob</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__ob__</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		ob</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Observer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> ob</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="src-observer-js-将一个正常的-object-转换为每个层级的属性都是响应式-可以被侦测的-的-object" tabindex="-1">src/Observer.js：将一个正常的 object 转换为每个层级的属性都是响应式(可以被侦测的)的 object <a class="header-anchor" href="#src-observer-js-将一个正常的-object-转换为每个层级的属性都是响应式-可以被侦测的-的-object" aria-label="Permalink to &quot;src/Observer.js：将一个正常的 object 转换为每个层级的属性都是响应式(可以被侦测的)的 object&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">def</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./utils.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> defineReactive</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./defineReactive.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">arrayMethods</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./array.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> observe</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./observe.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Dep</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Dep.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Observer</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 每一个Observer的实例身上，都有一个dep</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">dep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dep</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 给实例（this，一定要注意，构造函数中的this不是表示类本身，而是表示实例）添加了__ob__属性，值是这次new的实例</span></span>
<span class="line"><span style="color:#61AFEF;">		def</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;__ob__&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(&#39;我是Observer构造器&#39;, value);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 不要忘记初心，Observer类的目的是：将一个正常的object转换为每个层级的属性都是响应式（可以被侦测的）的object</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 检查它是数组还是对象</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 如果是数组，要非常强行的蛮干：将这个数组的原型，指向arrayMethods</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//（arrayMethods在array.js里，是vue2底层改写过的7个数组的方法）</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setPrototypeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">arrayMethods</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 让这个数组变的observe</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observeArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">walk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 遍历value,把value的每一个值都转为响应式的</span></span>
<span class="line"><span style="color:#61AFEF;">	walk</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> k</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			defineReactive</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 数组的特殊遍历</span></span>
<span class="line"><span style="color:#61AFEF;">	observeArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> l</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 逐项进行observe</span></span>
<span class="line"><span style="color:#61AFEF;">			observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>上面三个文件的关系：observe.js 引用 =&gt; Observer.js 引用 =&gt; defineReactive.js 引用 =&gt; observe.js</p><p>形成了一个圈相互依赖和引用的关系。</p><h5 id="src-utils-js-定义-object-defineproperty-的属性" tabindex="-1">src/utils.js：定义 Object.defineProperty()的属性 <a class="header-anchor" href="#src-utils-js-定义-object-defineproperty-的属性" aria-label="Permalink to &quot;src/utils.js：定义 Object.defineProperty()的属性&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> def</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">enumerable</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		value</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		enumerable</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		writable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="src-array-js-数组的响应式处理" tabindex="-1">src/array.js：数组的响应式处理 <a class="header-anchor" href="#src-array-js-数组的响应式处理" aria-label="Permalink to &quot;src/array.js：数组的响应式处理&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">def</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./utils.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 得到Array.prototype</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arrayPrototype</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 以Array.prototype为原型创建arrayMethods对象，并暴露</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> arrayMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayPrototype</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// vue底层改写了数组的7个方法（关键）：要被改写的7个数组方法</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> methodsNeedChange</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#98C379;">	&quot;push&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;pop&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;shift&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;unshift&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;splice&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;sort&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">	&quot;reverse&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">methodsNeedChange</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">methodName</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 备份原来的方法，因为push、pop等7个数组函数的功能不能被剥夺</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> original</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arrayPrototype</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">methodName</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 定义新的方法</span></span>
<span class="line"><span style="color:#61AFEF;">	def</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">		arrayMethods</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		methodName</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 恢复原来7个数组函数的功能</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> original</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 把类数组对象变为数组，下面才能用splice方法</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> args</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 把这个数组身上的__ob__取出来，__ob__已经被添加了，为什么已经被添加了？因为数组肯定不是最高层，比如obj.g属性是数组，obj不能是数组，第一次遍历obj这个对象的第一层的时候，已经给g属性（就是这个数组）添加了__ob__属性。</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> ob</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__ob__</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 有三种方法push\\unshift\\splice能够插入新项，现在要把插入的新项也要变为observe的</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">methodName</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				case</span><span style="color:#98C379;"> &quot;push&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">				case</span><span style="color:#98C379;"> &quot;unshift&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">					inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				case</span><span style="color:#98C379;"> &quot;splice&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// splice格式是splice(下标, 数量, 插入的新项)</span></span>
<span class="line"><span style="color:#E06C75;">					inserted</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">					break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 判断有没有要插入的新项，让新项也变为响应的</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">inserted</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				ob</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observeArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">inserted</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;啦啦啦&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			ob</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#D19A66;">		false</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><h5 id="src-dep-js-收集依赖-然后通知-watcher——dep-使用发布订阅模式-当数据发生变化时-会循环依赖列表-把所有的-watcher-都通知一遍。" tabindex="-1">src/Dep.js：收集依赖，然后通知 Watcher——Dep 使用发布订阅模式，当数据发生变化时，会循环依赖列表，把所有的 Watcher 都通知一遍。 <a class="header-anchor" href="#src-dep-js-收集依赖-然后通知-watcher——dep-使用发布订阅模式-当数据发生变化时-会循环依赖列表-把所有的-watcher-都通知一遍。" aria-label="Permalink to &quot;src/Dep.js：收集依赖，然后通知 Watcher——Dep 使用发布订阅模式，当数据发生变化时，会循环依赖列表，把所有的 Watcher 都通知一遍。&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> uid</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Dep</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我是DEP类的构造器&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> uid</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 用数组存储自己的订阅者。subs是英语subscribes订阅者的意思。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 这个数组里面放的是Watcher的实例</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subs</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 添加订阅</span></span>
<span class="line"><span style="color:#61AFEF;">	addSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sub</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sub</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 添加依赖</span></span>
<span class="line"><span style="color:#61AFEF;">	depend</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Dep.target就是一个我们自己指定的全局的位置，你用window.target也行，只要是全剧唯一，没有歧义就行</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addSub</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 通知更新</span></span>
<span class="line"><span style="color:#61AFEF;">	notify</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我是notify&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 浅克隆一份</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> subs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 遍历</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">l</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> subs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> l</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			subs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h5 id="src-watcher-js-重点理解-后面生命周期的实现也依靠这个工具类-侦听依赖-依赖就是-watcher——只有-watcher-触发的-getter-才会收集依赖-哪个-watcher-触发了-getter-就把哪个-watcher-收集到-dep-中。" tabindex="-1">src/Watcher.js（重点理解，后面生命周期的实现也依靠这个工具类）：侦听依赖：依赖就是 Watcher——只有 Watcher 触发的 getter 才会收集依赖，哪个 Watcher 触发了 getter，就把哪个 Watcher 收集到 Dep 中。 <a class="header-anchor" href="#src-watcher-js-重点理解-后面生命周期的实现也依靠这个工具类-侦听依赖-依赖就是-watcher——只有-watcher-触发的-getter-才会收集依赖-哪个-watcher-触发了-getter-就把哪个-watcher-收集到-dep-中。" aria-label="Permalink to &quot;src/Watcher.js（重点理解，后面生命周期的实现也依靠这个工具类）：侦听依赖：依赖就是 Watcher——只有 Watcher 触发的 getter 才会收集依赖，哪个 Watcher 触发了 getter，就把哪个 Watcher 收集到 Dep 中。&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Dep</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Dep&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> uid</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Watcher</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">expression</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我是Watcher类的构造器&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> uid</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getter</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parsePath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">expression</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">callback</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> callback</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	update</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 进入依赖收集阶段。让全局的Dep.target设置为Watcher本身，那么就是进入依赖收集阶段</span></span>
<span class="line"><span style="color:#E5C07B;">		Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 只要能找，就一直找</span></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	run</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAndInvoke</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	getAndInvoke</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">cb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> !==</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> ||</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> oldValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			cb</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">oldValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> parsePath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> segments</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> segments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">segments</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h2 id="四、ast-抽象语法树" tabindex="-1">四、AST 抽象语法树 <a class="header-anchor" href="#四、ast-抽象语法树" aria-label="Permalink to &quot;四、AST 抽象语法树&quot;">​</a></h2><h3 id="_1-了解抽象语法树" tabindex="-1">1.了解抽象语法树 <a class="header-anchor" href="#_1-了解抽象语法树" aria-label="Permalink to &quot;1.了解抽象语法树&quot;">​</a></h3><h4 id="_1-1-抽象语法树是什么" tabindex="-1">1.1 抽象语法树是什么 <a class="header-anchor" href="#_1-1-抽象语法树是什么" aria-label="Permalink to &quot;1.1 抽象语法树是什么&quot;">​</a></h4><p><img src="`+z+'" alt="image-20240304033847098"></p><p><img src="'+X+'" alt="image-20240304033910144"></p><h4 id="_1-2-抽象语法树本质上就是一个-js-对象" tabindex="-1">1.2 抽象语法树本质上就是一个 JS 对象 <a class="header-anchor" href="#_1-2-抽象语法树本质上就是一个-js-对象" aria-label="Permalink to &quot;1.2 抽象语法树本质上就是一个 JS 对象&quot;">​</a></h4><p><img src="'+Q+'" alt="image-20240304033945456"></p><h4 id="_1-3-抽象语法树和虚拟节点的关系" tabindex="-1">1.3 抽象语法树和虚拟节点的关系 <a class="header-anchor" href="#_1-3-抽象语法树和虚拟节点的关系" aria-label="Permalink to &quot;1.3 抽象语法树和虚拟节点的关系&quot;">​</a></h4><p><img src="'+Z+'" alt="image-20240304034003868"></p><h3 id="_2-相关算法储备" tabindex="-1">2.相关算法储备 <a class="header-anchor" href="#_2-相关算法储备" aria-label="Permalink to &quot;2.相关算法储备&quot;">​</a></h3><h4 id="指针思想——题目-1" tabindex="-1">指针思想——题目 1 <a class="header-anchor" href="#指针思想——题目-1" aria-label="Permalink to &quot;指针思想——题目 1&quot;">​</a></h4><p><img src="'+K+`" alt="image-20240304034212281"></p><p>指针思想实现：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 试寻找字符串中，连续重复次数最多的字符。</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;abbbccc&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 指针</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> j</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当前重复次数最多的次数</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> maxRepeatCount</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 重复次数最多的字符串</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> maxRepeatChar</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当i还在范围内的时候，应该继续寻找</span></span>
<span class="line"><span style="color:#C678DD;">			while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 看i指向的字符和j指向的字符是不是不相同</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> str</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// console.log(&#39;报！！！&#39; + i + &#39;和&#39; + j + &#39;之间的文字连续相同！！都是字母&#39; + str[i] + &#39;它重复了&#39; + (j - i) + &#39;次&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 和当前重复次数最多的进行比较</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> maxRepeatCount</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 如果当前文字重复次数（j - i）超过了此时的最大值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 就让它成为最大值</span></span>
<span class="line"><span style="color:#E06C75;">						maxRepeatCount</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> j</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 将i指针指向的字符存为maxRepeatChar</span></span>
<span class="line"><span style="color:#E06C75;">						maxRepeatChar</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> str</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 让指针i追上指针j</span></span>
<span class="line"><span style="color:#E06C75;">					i</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> j</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 不管相不相同，j永远要后移</span></span>
<span class="line"><span style="color:#E06C75;">				j</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 循环结束之后，就可以输出答案了</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">				maxRepeatChar</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;重复了&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> maxRepeatCount</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;次，是最多的连续重复字符&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h4 id="递归深入——题目-1" tabindex="-1">递归深入——题目 1 <a class="header-anchor" href="#递归深入——题目-1" aria-label="Permalink to &quot;递归深入——题目 1&quot;">​</a></h4><p><img src="`+ss+`" alt="image-20240304034257248"></p><p>斐波那契数列输出——使用缓存对象实现</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 试输出斐波那契数列的前10项，即1、1、2、3、5、8、13、21、34、55</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 缓存对象</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 创建一个函数，功能是返回下标为n的这项的数字</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> fib</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 判断缓存对象中有没有这个值，如果有，直接用</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 缓存对象没有这个值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 看下标n是不是0或者是不是1，如果是，就返回常数1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果不是，就递归</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> v</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;"> :</span><span style="color:#61AFEF;"> fib</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#61AFEF;"> fib</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 写入缓存。也就是说，每算一个值，就要把这个值存入缓存对象。</span></span>
<span class="line"><span style="color:#E06C75;">				cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 9</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fib</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h5 id="上面代码的-cache-缓存思想" tabindex="-1">上面代码的 cache 缓存思想 <a class="header-anchor" href="#上面代码的-cache-缓存思想" aria-label="Permalink to &quot;上面代码的 cache 缓存思想&quot;">​</a></h5><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;0&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;1&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;2&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;3&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;4&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;5&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="递归深入——题目-2" tabindex="-1">递归深入——题目 2 <a class="header-anchor" href="#递归深入——题目-2" aria-label="Permalink to &quot;递归深入——题目 2&quot;">​</a></h4><p><img src="`+ns+`" alt="image-20240304034407166"></p><p>递归实现高维数组变成对象：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 转换数组的形式[1, 2, 3, [4, 5]]要变为这样的对象：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//     chidren: [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//             value: 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//             value: 2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//             value: 3</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//             children: [</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//                 {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//                     {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//                         value: 4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//                     },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//                     {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//                         value: 5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//                     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//                 }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//             ]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//     ]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 测试数组</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">], [[[</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">], </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">], </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">], </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 写法1：for循环转换函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// function convert(arr) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">     // 准备一个结果数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//     var result = [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">     // 遍历传入的arr的每一项</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//     for (let i = 0; i &lt; arr.length; i++) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">         // 如果遍历到的数字是number，直接放进入</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         if (typeof arr[i] == &#39;number&#39;) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//             result.push({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//                 value: arr[i]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//             });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         } else if (Array.isArray(arr[i])) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">             // 如果遍历到的这项是数组，那么就递归</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//             result.push({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//                 children: convert(arr[i])</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//             });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//         }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//     return result;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 写法2：map转换函数，参数不是arr这个词语，而是item，意味着现在item可能是数组，也可能是数字</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 即，写法1的递归次数要大大小于写法2。因为写法2中，遇见什么东西都要递归一下。</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> convert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;number&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 如果传进来的参数是数字</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">						value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">					};</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 如果传进来的参数是数组</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">						children</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">_item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> convert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_item</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#ABB2BF;">					};</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> o</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> convert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br></div></div><h4 id="栈-重要" tabindex="-1">栈（重要） <a class="header-anchor" href="#栈-重要" aria-label="Permalink to &quot;栈（重要）&quot;">​</a></h4><ul><li>栈（stack）又名堆栈，它是一种运算受限的线性表，<strong>仅在表尾能进行插入和删除操作</strong>。这一端被称为<strong>栈顶</strong>，相对地，把另一端称为<strong>栈底</strong>。</li><li>向一个栈插入新元素又称作<strong>进栈、入栈或压栈</strong>；从一个栈删除元素又称作<strong>出栈或退栈</strong>。</li><li>**后进先出（LIFO）**特点：栈中的元素，最先进栈的必定是最后出栈，后进栈的一定会先出栈。</li><li>JavaScript 中，栈可以<strong>用数组模拟</strong>。需要限制只能使用 push()和 pop()，不能 使用 unshift()和 shift()。即，<strong>数组尾是栈顶</strong>。</li><li>当然，可以用面向对象等手段，将栈封装的更好。</li></ul><p><img src="`+as+'" alt="image-20240304034519540"></p><h5 id="利用-栈-的题目" tabindex="-1">利用“栈”的题目 <a class="header-anchor" href="#利用-栈-的题目" aria-label="Permalink to &quot;利用“栈”的题目&quot;">​</a></h5><p><img src="'+ls+`" alt="image-20240304034602885"></p><p>文字题目：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">试编写“智能重复”smartRepeat函数，实现：</span></span>
<span class="line"><span style="color:#61AFEF;">•</span><span style="color:#98C379;"> 将3[abc]变为abcabcabc</span></span>
<span class="line"><span style="color:#61AFEF;">•</span><span style="color:#98C379;"> 将3[2[a]2[b]]变为aabbaabbaabb</span></span>
<span class="line"><span style="color:#61AFEF;">•</span><span style="color:#98C379;"> 将2[1[a]3[b]2[3[c]4[d]]]变为abbbcccddddcccddddabbbcccddddcccdddd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">不用考虑输入字符串是非法的情况，比如：</span></span>
<span class="line"><span style="color:#61AFEF;">•</span><span style="color:#98C379;"> 2[a3[b]]是错误的，应该补一个1，即2[1[a]3[b]]</span></span>
<span class="line"><span style="color:#61AFEF;">•</span><span style="color:#ABB2BF;"> [abc]是错误的，应该补一个1，即1[abc]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="使用-栈-优雅解题" tabindex="-1">使用“栈” 优雅解题 <a class="header-anchor" href="#使用-栈-优雅解题" aria-label="Permalink to &quot;使用“栈” 优雅解题&quot;">​</a></h5><p>词法分析的时候，经常要用到栈这个数据结构；</p><p>初学者大坑：栈的题目和递归非常像，这类题目给人的感觉都是用递归解题。信 心满满动手开始写了，却发现递归怎么都递归不出来。此时就要想到，不是用递 归，而是用栈。</p><p><img src="`+ps+'" alt="image-20240304034746693"></p><p><img src="'+es+`" alt="image-20240304034806320"></p><h5 id="栈-题目实现代码" tabindex="-1">[栈]题目实现代码： <a class="header-anchor" href="#栈-题目实现代码" aria-label="Permalink to &quot;[栈]题目实现代码：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 试编写“智能重复”smartRepeat函数，实现：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将3[abc]变为abcabcabc</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将3[2[a]2[b]]变为aabbaabbaabb</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将2[1[a]3[b]2[3[c]4[d]]]变为abbbcccddddcccddddabbbcccddddcccdddd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> smartRepeat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">templateStr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 指针</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 栈1，存放数字</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> stack1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 栈2，存放临时字符串</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> stack2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 剩余部分</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> rest</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> templateStr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">				while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> templateStr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 剩余部分</span></span>
<span class="line"><span style="color:#E06C75;">					rest</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> templateStr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 看当前剩余部分是不是以数字和[开头</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">+</span><span style="color:#56B6C2;">\\[</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 得到这个数字</span></span>
<span class="line"><span style="color:#C678DD;">						let</span><span style="color:#E06C75;"> times</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">(\\d</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">)</span><span style="color:#56B6C2;">\\[</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 就把数字压栈，把空字符串压栈</span></span>
<span class="line"><span style="color:#E5C07B;">						stack1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">times</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">						stack2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 让指针后移，times这个数字是多少位就后移多少位加1位。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 为什么要加1呢？加的1位是[。</span></span>
<span class="line"><span style="color:#E06C75;">						index</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> times</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">\\w</span><span style="color:#D19A66;">+</span><span style="color:#56B6C2;">\\]</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 如果这个字符是字母，那么此时就把栈顶这项改为这个字母</span></span>
<span class="line"><span style="color:#C678DD;">						let</span><span style="color:#E06C75;"> word</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">(\\w</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">)</span><span style="color:#56B6C2;">\\]</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">						stack2</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">stack2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> word</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 让指针后移，word这个词语是多少位就后移多少位</span></span>
<span class="line"><span style="color:#E06C75;">						index</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> word</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;]&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 如果这个字符是]，那么就①将stack1弹栈，②stack2弹栈，③把字符串栈的新栈顶的元素重复刚刚弹出的那个字符串指定次数拼接到新栈顶上。</span></span>
<span class="line"><span style="color:#C678DD;">						let</span><span style="color:#E06C75;"> times</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> stack1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">						let</span><span style="color:#E06C75;"> word</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> stack2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// repeat是ES6的方法，比如&#39;a&#39;.repeat(3)得到&#39;aaa&#39;</span></span>
<span class="line"><span style="color:#E06C75;">						stack2</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">stack2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">+=</span><span style="color:#E5C07B;"> word</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">repeat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">times</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">						index</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">stack1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">stack2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// while结束之后，stack1和stack2中肯定还剩余1项。返回栈2中剩下的这一项，重复栈1中剩下的这1项次数，组成的这个字符串。如果剩的个数不对，那就是用户的问题，方括号没有闭合。</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> stack2</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">repeat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stack1</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> smartRepeat</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;3[2[3[a]1[b]]4[d]]&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><h5 id="上诉栈算法-对应的正则表达式的相关方法的输出" tabindex="-1">上诉栈算法 对应的正则表达式的相关方法的输出 <a class="header-anchor" href="#上诉栈算法-对应的正则表达式的相关方法的输出" aria-label="Permalink to &quot;上诉栈算法 对应的正则表达式的相关方法的输出&quot;">​</a></h5><p><img src="`+os+'" alt="image-20240304034840380"></p><p><img src="'+ts+'" alt="image-20240304034853078"></p><h3 id="_3-手写实现-ast-抽象语法树" tabindex="-1">3.🅰️手写实现 AST 抽象语法树 <a class="header-anchor" href="#_3-手写实现-ast-抽象语法树" aria-label="Permalink to &quot;3.:a:手写实现 AST 抽象语法树&quot;">​</a></h3><ul><li>学习源码时，源码思想要借鉴，而不要抄袭。要能够发现源码中书写的精彩的地方；</li><li>将独立的功能拆写为独立的 js 文件中完成，通常是一个独立的类，每个单独的功能必须能独立的“单元测试”；</li><li>应该围绕中心功能，先把主干完成，然后修剪枝叶；</li><li>功能并不需要一步到位，功能的拓展要一步步完成，有的非核心功能甚至不需实现；</li></ul><h4 id="_1-实现流程" tabindex="-1">1.实现流程 <a class="header-anchor" href="#_1-实现流程" aria-label="Permalink to &quot;1.实现流程&quot;">​</a></h4><h5 id="_1-ast-形成算法" tabindex="-1">1.AST 形成算法 <a class="header-anchor" href="#_1-ast-形成算法" aria-label="Permalink to &quot;1.AST 形成算法&quot;">​</a></h5><p><img src="'+rs+'" alt="image-20240304035013378"></p><p><img src="'+cs+'" alt="image-20240304035033878"></p><h5 id="_2-手写-ast-编译器" tabindex="-1">2.手写 AST 编译器 <a class="header-anchor" href="#_2-手写-ast-编译器" aria-label="Permalink to &quot;2.手写 AST 编译器&quot;">​</a></h5><h5 id="_3-手写文本解析功能" tabindex="-1">3.手写文本解析功能 <a class="header-anchor" href="#_3-手写文本解析功能" aria-label="Permalink to &quot;3.手写文本解析功能&quot;">​</a></h5><h5 id="_4-ast-优化" tabindex="-1">4.AST 优化 <a class="header-anchor" href="#_4-ast-优化" aria-label="Permalink to &quot;4.AST 优化&quot;">​</a></h5><h5 id="_5-将-ast-生成-h-函数" tabindex="-1">5.将 AST 生成 h()函数 <a class="header-anchor" href="#_5-将-ast-生成-h-函数" aria-label="Permalink to &quot;5.将 AST 生成 h()函数&quot;">​</a></h5><h5 id="_6-识别-attrs" tabindex="-1">6.识别 attrs <a class="header-anchor" href="#_6-识别-attrs" aria-label="Permalink to &quot;6.识别 attrs&quot;">​</a></h5><p>attrs 就是标签内的属性，如 class、id 等...</p><p><img src="'+Bs+`" alt="image-20240304035059241"></p><h4 id="_2-新建项目-study-ast" tabindex="-1">2.新建项目 study-ast <a class="header-anchor" href="#_2-新建项目-study-ast" aria-label="Permalink to &quot;2.新建项目 study-ast&quot;">​</a></h4><p>目录文件如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">src</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> index.js</span><span style="color:#7F848E;font-style:italic;">  # 调试试验的js文件</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> parse.js</span><span style="color:#7F848E;font-style:italic;">  # 标签的识别和收集</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#98C379;"> parseAttrsString.js</span><span style="color:#7F848E;font-style:italic;">  # 把attrsString变为数组返回</span></span>
<span class="line"><span style="color:#61AFEF;">www</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#98C379;"> index.html</span><span style="color:#7F848E;font-style:italic;">  # 用来引用的webpack打包后的js文件</span></span>
<span class="line"><span style="color:#61AFEF;">package.json</span><span style="color:#7F848E;font-style:italic;"> # npm依赖</span></span>
<span class="line"><span style="color:#61AFEF;">webpack.config.js</span><span style="color:#7F848E;font-style:italic;"> # wepack配置文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>package.json</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;study-snabbdom&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;main&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;webpack-dev-server&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;author&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;license&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ISC&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;devDependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^5.11.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-cli&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.3.12&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-dev-server&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.11.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>webpack.config.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 从https://www.webpackjs.com/官网照着配置</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 入口</span></span>
<span class="line"><span style="color:#E06C75;">	entry</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./src/index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 出口</span></span>
<span class="line"><span style="color:#E06C75;">	output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 虚拟打包路径，就是说文件夹不会真正生成，而是在8080端口虚拟生成</span></span>
<span class="line"><span style="color:#E06C75;">		publicPath</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xuni&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 打包出来的文件名，不会真正的物理生成</span></span>
<span class="line"><span style="color:#E06C75;">		filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bundle.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	devServer</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 端口号</span></span>
<span class="line"><span style="color:#E06C75;">		port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 静态资源文件夹</span></span>
<span class="line"><span style="color:#E06C75;">		contentBase</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;www&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>www/index.html</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/xuni/bundle.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>src/index.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> parse</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./parse.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> templateString</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`&lt;div&gt;</span></span>
<span class="line"><span style="color:#98C379;">    &lt;h3 class=&quot;aa bb cc&quot; data-n=&quot;7&quot; id=&quot;mybox&quot;&gt;你好&lt;/h3&gt;</span></span>
<span class="line"><span style="color:#98C379;">    &lt;ul&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;li&gt;A&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;li&gt;B&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">        &lt;li&gt;C&lt;/li&gt;</span></span>
<span class="line"><span style="color:#98C379;">    &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#98C379;">&lt;/div&gt;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> ast</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">templateString</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ast</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_3-手写实现-ast-抽象语法树解析" tabindex="-1">3.🅱️手写实现 AST 抽象语法树解析 <a class="header-anchor" href="#_3-手写实现-ast-抽象语法树解析" aria-label="Permalink to &quot;3.:b:手写实现 AST 抽象语法树解析&quot;">​</a></h4><h5 id="src-parseattrsstring-js-识别-attrs-标签的属性字符串-然后变为数组返回出去" tabindex="-1">src/parseAttrsString.js：识别 attrs 标签的属性字符串，然后变为数组返回出去 <a class="header-anchor" href="#src-parseattrsstring-js-识别-attrs-标签的属性字符串-然后变为数组返回出去" aria-label="Permalink to &quot;src/parseAttrsString.js：识别 attrs 标签的属性字符串，然后变为数组返回出去&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 识别attrs标签的属性字符串，然后变为数组返回出去</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">attrsString</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">attrsString</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">attrsString</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 当前是否在引号内</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> isYinhao</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 断点</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> point</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 结果数组</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 遍历attrsString，而不是你想的用split()这种暴力方法</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> attrsString</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> char</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> attrsString</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">char</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &#39;&quot;&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			isYinhao</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">isYinhao</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">char</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot; &quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">isYinhao</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 遇见了空格，并且不在引号中</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">\\s</span><span style="color:#D19A66;">*</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">attrsString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">point</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">))) {</span></span>
<span class="line"><span style="color:#E5C07B;">				result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">attrsString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">point</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">				point</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 循环结束之后，最后还剩一个属性k=&quot;v&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">	result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">attrsString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">point</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">trim</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 下面的代码功能是，将[&quot;k=v&quot;,&quot;k=v&quot;,&quot;k=v&quot;]变为[{name:k, value:v}, {name:k, value:v}, {name:k,value:v}];</span></span>
<span class="line"><span style="color:#E06C75;">	result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 根据等号拆分</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> o</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> item</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">(.</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">)=&quot;(.</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">)&quot;</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">			value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h5 id="src-parse-js" tabindex="-1">src/parse.js <a class="header-anchor" href="#src-parse-js" aria-label="Permalink to &quot;src/parse.js&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> parseAttrsString</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./parseAttrsString.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// parse函数，主函数</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">templateString</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 指针</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 剩余部分</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> rest</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 开始标记</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> startRegExp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#56B6C2;">\\&lt;</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[a-z]+[1-6]?</span><span style="color:#E06C75;">)(\\s</span><span style="color:#D19A66;">[</span><span style="color:#ABB2BF;">^</span><span style="color:#56B6C2;">\\&lt;</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">?</span><span style="color:#56B6C2;">\\&gt;</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 结束标记</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> endRegExp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#56B6C2;">\\&lt;\\/</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[a-z]+[1-6]?</span><span style="color:#E06C75;">)</span><span style="color:#56B6C2;">\\&gt;</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 抓取结束标记前的文字</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> wordRegExp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#ABB2BF;">^</span><span style="color:#56B6C2;">\\&lt;</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)</span><span style="color:#56B6C2;">\\&lt;\\/</span><span style="color:#D19A66;">[a-z]+[1-6]?</span><span style="color:#56B6C2;">\\&gt;</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 准备两个栈</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> stack1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> stack2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [{ </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">: [] }];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> templateString</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		rest</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> templateString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(templateString[index]);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">startRegExp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 识别遍历到的这个字符，是不是一个开始标签</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> tag</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">startRegExp</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> attrsString</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">startRegExp</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(&#39;检测到开始标记&#39;, tag);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将开始标记推入栈1中</span></span>
<span class="line"><span style="color:#E5C07B;">			stack1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将空数组推入栈2中</span></span>
<span class="line"><span style="color:#E5C07B;">			stack2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				tag</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">tag</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				children</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">				attrs</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">parseAttrsString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">attrsString</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 得到attrs字符串的长度</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> attrsStringLength</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> attrsString</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> attrsString</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 指针移动标签的长度加2再加attrString的长度，为什么要加2呢？因为&lt;&gt;也占两位</span></span>
<span class="line"><span style="color:#E06C75;">			index</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> tag</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> attrsStringLength</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">endRegExp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 识别遍历到的这个字符，是不是一个结束标签</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> tag</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">endRegExp</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(&#39;检测到结束标记&#39;, tag);</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> pop_tag</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> stack1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 此时，tag一定是和栈1顶部的是相同的</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">tag</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> pop_tag</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> pop_arr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> stack2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stack2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					stack2</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">stack2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">].</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pop_arr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pop_tag</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;标签没有封闭！！&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 指针移动标签的长度加3，为什么要加2呢？因为&lt;/&gt;也占3位</span></span>
<span class="line"><span style="color:#E06C75;">			index</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> tag</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">wordRegExp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 识别遍历到的这个字符，是不是文字，并别不能是全空</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> word</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">wordRegExp</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 看word是不是全是空</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">\\s</span><span style="color:#D19A66;">+</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">word</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 不是全是空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// console.log(&#39;检测到文字&#39;, word);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 改变此时stack2栈顶元素中</span></span>
<span class="line"><span style="color:#E06C75;">				stack2</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">stack2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">].</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">word</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 指针移动标签的长度加3，为什么要加2呢？因为&lt;/&gt;也占3位</span></span>
<span class="line"><span style="color:#E06C75;">			index</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> word</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			index</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 此时stack2就是我们之前默认放置的一项了，此时要返回这一项的children即可</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> stack2</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br></div></div><h2 id="五、指令和生命周期" tabindex="-1">五、指令和生命周期 <a class="header-anchor" href="#五、指令和生命周期" aria-label="Permalink to &quot;五、指令和生命周期&quot;">​</a></h2><h3 id="_1-搭建项目-study-directive" tabindex="-1">1.搭建项目 study-directive <a class="header-anchor" href="#_1-搭建项目-study-directive" aria-label="Permalink to &quot;1.搭建项目 study-directive&quot;">​</a></h3><p>基于前面【响应式数据原理】中【study-data-reactive】项目手写实现的代码</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">src：响应式数据——手写实现的源码目录</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——array.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——defineReactive.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——Dep.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——index.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——observe.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——Observer.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">——utils.js</span></span>
<span class="line"><span style="color:#ABB2BF;"> |</span><span style="color:#61AFEF;">__Watcher.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>得到的目录文件如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">src</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> array.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> Compile.js</span><span style="color:#7F848E;font-style:italic;">  # 编译</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> defineReactive.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> Dep.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> index.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> observe.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> Observer.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> utils.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> Vue.js</span><span style="color:#7F848E;font-style:italic;">  # Vue类</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#98C379;"> Watcher.js</span></span>
<span class="line"><span style="color:#61AFEF;">www</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#98C379;"> index.html</span><span style="color:#7F848E;font-style:italic;">  # 用来引用的webpack打包后的js文件</span></span>
<span class="line"><span style="color:#61AFEF;">package.json</span><span style="color:#7F848E;font-style:italic;"> # npm依赖</span></span>
<span class="line"><span style="color:#61AFEF;">webpack.config.js</span><span style="color:#7F848E;font-style:italic;"> # wepack配置文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>package.json</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;study-directive&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;main&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;webpack-dev-server&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;author&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;license&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ISC&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;dependencies&quot;</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;devDependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^5.11.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-cli&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.3.12&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;webpack-dev-server&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^3.11.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>webpack.config.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 从https://www.webpackjs.com/官网照着配置</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 入口</span></span>
<span class="line"><span style="color:#E06C75;">	entry</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./src/index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 出口</span></span>
<span class="line"><span style="color:#E06C75;">	output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 虚拟打包路径，就是说文件夹不会真正生成，而是在8080端口虚拟生成</span></span>
<span class="line"><span style="color:#E06C75;">		publicPath</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xuni&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 打包出来的文件名，不会真正的物理生成</span></span>
<span class="line"><span style="color:#E06C75;">		filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bundle.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	devServer</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 端口号</span></span>
<span class="line"><span style="color:#E06C75;">		port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 静态资源文件夹</span></span>
<span class="line"><span style="color:#E06C75;">		contentBase</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;www&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_2-手写实现-vue2-指令和生命周期" tabindex="-1">2.手写实现 vue2 指令和生命周期 <a class="header-anchor" href="#_2-手写实现-vue2-指令和生命周期" aria-label="Permalink to &quot;2.手写实现 vue2 指令和生命周期&quot;">​</a></h3><h4 id="www-index-html-试验代码功能" tabindex="-1">www/index.html：试验代码功能 <a class="header-anchor" href="#www-index-html-试验代码功能" aria-label="Permalink to &quot;www/index.html：试验代码功能&quot;">​</a></h4><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			你好{{b.m.n}}</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">br</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;"> v-model</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;b.m.n&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> onclick</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;</span><span style="color:#61AFEF;">add</span><span style="color:#98C379;">()&quot;</span><span style="color:#ABB2BF;">&gt;按我加1&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/xuni/bundle.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">					a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					b</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">						m</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">							n</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">						},</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#E06C75;">				watch</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">					a</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">						console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a改变啦&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#61AFEF;">				created</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#61AFEF;">				update</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">vm</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h4 id="src-index-js-像-windo-变量中注入-vue-类" tabindex="-1">src/index.js：像 windo 变量中注入 Vue 类 <a class="header-anchor" href="#src-index-js-像-windo-变量中注入-vue-类" aria-label="Permalink to &quot;src/index.js：像 windo 变量中注入 Vue 类&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Vue</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Vue.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> Vue</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="src-vue-js" tabindex="-1">src/Vue.js： <a class="header-anchor" href="#src-vue-js" aria-label="Permalink to &quot;src/Vue.js：&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Compile</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Compile.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> observe</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./observe.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Watcher</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Watcher.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 把参数options对象存为$options</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> options</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 数据</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">		observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 默认数据要变为响应式的，这里就是生命周期</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_initData</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用默认的watch</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_initWatch</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 模板编译</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Compile</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	_initData</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> self</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">				get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#61AFEF;">				set</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">newVal</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">					self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_data</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> newVal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 默认的watch监听的方法的实现</span></span>
<span class="line"><span style="color:#61AFEF;">	_initWatch</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> self</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> watch</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			new</span><span style="color:#61AFEF;"> Watcher</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">watch</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h4 id="src-compile-js-模板编译" tabindex="-1">src/Compile.js：模板编译 <a class="header-anchor" href="#src-compile-js-模板编译" aria-label="Permalink to &quot;src/Compile.js：模板编译&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Watcher</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Watcher.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Compile</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// vue实例</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$vue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 挂载点</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$el</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果用户传入了挂载点</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 调用函数，让节点变为fragment，类似于mustache中的tokens。实际上用的是AST，这里就是轻量级的，fragment</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> $fragment</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">node2Fragment</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$el</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 编译</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$fragment</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 替换好的内容要上树</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">$fragment</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	node2Fragment</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> fragment</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createDocumentFragment</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> child</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 让所有DOM节点，都进入fragment</span></span>
<span class="line"><span style="color:#C678DD;">		while</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">child</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">firstChild</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">			fragment</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> fragment</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	compile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(el);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 得到子元素</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> childNodes</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> self</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> reg</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\{\\{</span><span style="color:#E06C75;">(.</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">)</span><span style="color:#56B6C2;">\\}\\}</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		childNodes</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> text</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			text</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(node.nodeType);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(reg.test(text));</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeType</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compileElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeType</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 3</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> text</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reg</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">				self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compileText</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	compileElement</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(node);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 这里的方便之处在于不是将HTML结构看做字符串，而是真正的属性列表</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> nodeAttrs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">attributes</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> self</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 类数组对象变为数组</span></span>
<span class="line"><span style="color:#ABB2BF;">		[].</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nodeAttrs</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">attr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 这里就分析是否是指令</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> attrName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> attr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> attr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 指令都是v-开头的</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> dir</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> attrName</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 看看是不是指令</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">attrName</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;v-&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// v-开头的就是指令</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">dir</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;model&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// console.log(&#39;发现了model指令&#39;, value);</span></span>
<span class="line"><span style="color:#C678DD;">					new</span><span style="color:#61AFEF;"> Watcher</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$vue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">						node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					});</span></span>
<span class="line"><span style="color:#C678DD;">					var</span><span style="color:#E06C75;"> v</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getVueVal</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$vue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">					node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 添加监听</span></span>
<span class="line"><span style="color:#E5C07B;">					node</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;input&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">						var</span><span style="color:#E06C75;"> newVal</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">						self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setVueVal</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$vue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">						v</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> newVal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					});</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">dir</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;if&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// console.log(&#39;发现了if指令&#39;, value);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	compileText</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">node</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(&#39;AA&#39;, name);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(&#39;BB&#39;, this.getVueVal(this.$vue, name));</span></span>
<span class="line"><span style="color:#E5C07B;">		node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getVueVal</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$vue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Watcher</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$vue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	getVueVal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">exp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		exp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> exp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		exp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">k</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	setVueVal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">vue</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">exp</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> vue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		exp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> exp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		exp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">k</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> exp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				val</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br></div></div><h2 id="vue2-源码调试剖析" tabindex="-1">Vue2 源码调试剖析 <a class="header-anchor" href="#vue2-源码调试剖析" aria-label="Permalink to &quot;Vue2 源码调试剖析&quot;">​</a></h2><h3 id="_1-vue-2-源码克隆、安装依赖、运行" tabindex="-1">1.Vue 2 源码克隆、安装依赖、运行 <a class="header-anchor" href="#_1-vue-2-源码克隆、安装依赖、运行" aria-label="Permalink to &quot;1.Vue 2 源码克隆、安装依赖、运行&quot;">​</a></h3><p>从 <a href="https://github.com/vuejs/vue.git" target="_blank" rel="noreferrer">https://github.com/vuejs/vue.git</a> 克隆代码到本地后，安装依赖。</p><p>切换到 dev 分支，因为 dev 分支是 2.6 最新版代码，而 main 分支是 2.7 版本的代码</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装报错不用管：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> install</span></span>
<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> v1.22.21</span></span>
<span class="line"><span style="color:#ABB2BF;">[1/4] Resolving packages...</span></span>
<span class="line"><span style="color:#ABB2BF;">[2/4] Fetching packages...</span></span>
<span class="line"><span style="color:#ABB2BF;">[3/4] Linking dependencies...</span></span>
<span class="line"><span style="color:#ABB2BF;">[4/4] Building fresh packages...</span></span>
<span class="line"><span style="color:#ABB2BF;">[1/7] ⠄ chromedriver</span></span>
<span class="line"><span style="color:#ABB2BF;">[7/7] ⠄ commitizen</span></span>
<span class="line"><span style="color:#ABB2BF;">[3/7] ⠄ phantomjs-prebuilt</span></span>
<span class="line"><span style="color:#ABB2BF;">[-/7] ⠄ waiting...</span></span>
<span class="line"><span style="color:#61AFEF;">error</span><span style="color:#98C379;"> D:</span><span style="color:#56B6C2;">\\C</span><span style="color:#98C379;">ode</span><span style="color:#56B6C2;">\\[</span><span style="color:#98C379;">NetProject]</span><span style="color:#56B6C2;">\\S</span><span style="color:#98C379;">ource</span><span style="color:#98C379;"> code</span><span style="color:#98C379;"> collection</span><span style="color:#56B6C2;">\\[</span><span style="color:#98C379;">VueOfficial]</span><span style="color:#56B6C2;">\\v</span><span style="color:#98C379;">ue</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">ode_modules</span><span style="color:#56B6C2;">\\p</span><span style="color:#98C379;">uppeteer:</span><span style="color:#98C379;"> Command</span><span style="color:#98C379;"> failed.</span></span>
<span class="line"><span style="color:#61AFEF;">Exit</span><span style="color:#98C379;"> code:</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#61AFEF;">Command:</span><span style="color:#98C379;"> node</span><span style="color:#98C379;"> install.js</span></span>
<span class="line"><span style="color:#61AFEF;">Arguments:</span></span>
<span class="line"><span style="color:#61AFEF;">Directory:</span><span style="color:#98C379;"> D:</span><span style="color:#56B6C2;">\\C</span><span style="color:#98C379;">ode</span><span style="color:#56B6C2;">\\[</span><span style="color:#98C379;">NetProject]</span><span style="color:#56B6C2;">\\S</span><span style="color:#98C379;">ource</span><span style="color:#98C379;"> code</span><span style="color:#98C379;"> collection</span><span style="color:#56B6C2;">\\[</span><span style="color:#98C379;">VueOfficial]</span><span style="color:#56B6C2;">\\v</span><span style="color:#98C379;">ue</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">ode_modules</span><span style="color:#56B6C2;">\\p</span><span style="color:#98C379;">uppeteer</span></span>
<span class="line"><span style="color:#61AFEF;">Output:</span></span>
<span class="line"><span style="color:#61AFEF;">ERROR:</span><span style="color:#98C379;"> Failed</span><span style="color:#98C379;"> to</span><span style="color:#98C379;"> download</span><span style="color:#98C379;"> Chromium</span><span style="color:#98C379;"> r609904!</span><span style="color:#98C379;"> Set</span><span style="color:#98C379;"> &quot;PUPPETEER_SKIP_CHROMIUM_DOWNLOAD&quot;</span><span style="color:#98C379;"> env</span><span style="color:#98C379;"> variable</span><span style="color:#98C379;"> to</span><span style="color:#98C379;"> skip</span><span style="color:#98C379;"> download.</span></span>
<span class="line"><span style="color:#61AFEF;">Error:</span><span style="color:#98C379;"> read</span><span style="color:#98C379;"> ECONNRESET</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>直接运行运行 vue 源码</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-vue-2-源码目录介绍" tabindex="-1">2.Vue 2 源码目录介绍 <a class="header-anchor" href="#_2-vue-2-源码目录介绍" aria-label="Permalink to &quot;2.Vue 2 源码目录介绍&quot;">​</a></h3><h4 id="vue-2-源码目录" tabindex="-1">Vue 2 源码目录 <a class="header-anchor" href="#vue-2-源码目录" aria-label="Permalink to &quot;Vue 2 源码目录&quot;">​</a></h4><p>Vue 2 源码位于 <code>vue/src</code> 目录下，该目录包含了 Vue 框架的核心代码以及一些相关的工具和配置文件。</p><p>以下是 Vue 2 源码目录的主要结构：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">dist/</span><span style="color:#7F848E;font-style:italic;"> # 这个文件夹包含Vue.js的不同构建版本，如UMD、CommonJS和ES Module格式的文件。</span></span>
<span class="line"><span style="color:#61AFEF;">test/</span><span style="color:#7F848E;font-style:italic;"> # 包含测试Vue.js各个部分功能的代码，确保框架的稳定性和可靠性。</span></span>
<span class="line"><span style="color:#61AFEF;">types/</span><span style="color:#7F848E;font-style:italic;"> # 包含TypeScript类型定义文件。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># vue2.6版本(2.6版本和以前的目录结构基本相同)</span></span>
<span class="line"><span style="color:#61AFEF;">vue/src</span><span style="color:#7F848E;font-style:italic;">  # 源代码所在的文件夹，包括Vue.js的核心功能和实用程序函数。</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> compiler</span><span style="color:#7F848E;font-style:italic;">  # 包含Vue.js的模板编译器代码，将模板转换为渲染函数。</span></span>
<span class="line"><span style="color:#61AFEF;">	├──</span><span style="color:#98C379;"> compiler.js</span><span style="color:#7F848E;font-style:italic;">  # 编译器的入口文件</span></span>
<span class="line"><span style="color:#61AFEF;">	├──</span><span style="color:#98C379;"> parser/index.js</span><span style="color:#7F848E;font-style:italic;">  # 模板解析器</span></span>
<span class="line"><span style="color:#61AFEF;">	└──</span><span style="color:#98C379;"> generator/index.js</span><span style="color:#7F848E;font-style:italic;">  # 代码生成器</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> core</span><span style="color:#7F848E;font-style:italic;">  # 核心代码：如Vue 构造函数、组件、指令、生命周期、响应系统、虚拟DOM、观察者模式等。（主要的Vue的核心实现代码在这个目录）</span></span>
<span class="line"><span style="color:#61AFEF;">	├──</span><span style="color:#98C379;"> index.js</span><span style="color:#7F848E;font-style:italic;">  #  Vue 构造函数的导出</span></span>
<span class="line"><span style="color:#61AFEF;">	├──</span><span style="color:#98C379;"> components</span><span style="color:#7F848E;font-style:italic;">  # 组件相关代码</span></span>
<span class="line"><span style="color:#61AFEF;">	└──</span><span style="color:#98C379;"> ...</span><span style="color:#7F848E;font-style:italic;">  #</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> platforms</span><span style="color:#7F848E;font-style:italic;">  # 包含不同平台（如web或weex）特定的代码。</span></span>
<span class="line"><span style="color:#61AFEF;">	├──</span><span style="color:#98C379;"> web/index.js</span><span style="color:#7F848E;font-style:italic;">  # Web 平台的适配代码</span></span>
<span class="line"><span style="color:#61AFEF;">	└──</span><span style="color:#98C379;"> weex/index.js</span><span style="color:#7F848E;font-style:italic;">  # 微信小程序的适配代码</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> server</span><span style="color:#7F848E;font-style:italic;">  # 包含服务端渲染（SSR）相关的代码。</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> sfc</span><span style="color:#7F848E;font-style:italic;">  # 用于处理单文件组件（.vue文件）的代码。</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#98C379;"> shared</span><span style="color:#7F848E;font-style:italic;">  # 包含Vue.js各部分共享的实用功能。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># vue2.7版本（2.7增加了vue3的Composition Api、setup语法糖、Css v-bind等，目录和源码有所改变）</span></span>
<span class="line"><span style="color:#61AFEF;">vue/src</span><span style="color:#7F848E;font-style:italic;">  # 源代码所在的文件夹，包括Vue.js的核心功能和实用程序函数。</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> compiler</span><span style="color:#7F848E;font-style:italic;">  # 包含Vue.js的模板编译器代码，将模板转换为渲染函数。</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> core</span><span style="color:#7F848E;font-style:italic;">  # 核心代码：如响应系统、虚拟DOM、观察者模式等。（主要的Vue的核心实现代码在这个目录）</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> platforms</span><span style="color:#7F848E;font-style:italic;">  # 包含不同平台（如web或weex）特定的代码。</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> shared</span><span style="color:#7F848E;font-style:italic;">  # 公共方法和常量代码</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> types</span><span style="color:#7F848E;font-style:italic;">  # 包含 Vue.js 的 TypeScript 类型定义文件。</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> v3</span><span style="color:#7F848E;font-style:italic;">  # 包含了从 Vue 3 版本中移植到 Vue 2.7 的功能，例如 Composition API。</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#98C379;"> global.d.ts</span><span style="color:#7F848E;font-style:italic;">  # 全局的 TypeScript 声明文件，它定义了整个 Vue.js 项目的全局类型。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># vue2.7版本删减了一些目录</span></span>
<span class="line"><span style="color:#61AFEF;">Vue</span><span style="color:#98C379;"> 2.6版本中的某些目录变动可能是由于多种原因，包括项目结构的优化、功能的重构，或者是为了与新的技术标准保持一致。具体到server、sfc和platforms/weex目录的变化，这里有一些可能的解释：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">-server目录:</span><span style="color:#98C379;"> Vue</span><span style="color:#98C379;"> CLI的更新可能会影响到server目录的结构。Vue</span><span style="color:#98C379;"> CLI提供了一系列内置的服务和配置选项，随着版本的迭代，部分配置和服务可能已经被整合或修改。</span></span>
<span class="line"><span style="color:#61AFEF;">-sfc目录:</span><span style="color:#98C379;"> 单文件组件（Single</span><span style="color:#98C379;"> File</span><span style="color:#98C379;"> Components，SFC）是Vue的一个核心特性，允许开发者将模板、脚本和样式封装在单个文件中。Vue</span><span style="color:#98C379;"> 2.7版本对SFC进行了更新，如果你在从2.6升级到2.7时遇到问题，可以参考社区的讨论和解决方案。</span></span>
<span class="line"><span style="color:#61AFEF;">-platforms/weex目录:</span><span style="color:#98C379;"> Weex是一个由阿里巴巴发起的跨平台移动应用解决方案，Vue</span><span style="color:#98C379;"> 2.6中的Weex支持可能已经根据新的需求或技术进展进行了调整。例如，某些指令可能已经被更新或替换。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>Vue 2.6 和 2.7 的源码目录结构非常相似，因为 2.7 主要是在 2.6 的基础上增加了一些新功能和改进。</p><p>Vue 2.7 在 2.6 的基础上增加了对 Composition API 的支持，以及一些其他的改进，例如对<code>&lt;script setup&gt;</code> 语法糖的支持。如果你想了解更多关于 Vue 2.7 的新特性和改进，可以查看官方的迁移指南：<a href="https://v2.vuejs.org/v2/guide/migration-vue-2-7.html" target="_blank" rel="noreferrer">https://v2.vuejs.org/v2/guide/migration-vue-2-7.html</a></p><h4 id="其他目录" tabindex="-1">其他目录 <a class="header-anchor" href="#其他目录" aria-label="Permalink to &quot;其他目录&quot;">​</a></h4><p>以下是 Vue2 源码根目录下除了 src 目录，其他目录的用途：</p><ul><li><strong>benchmarks</strong> 目录：包含性能测试代码。</li><li><strong>compiler-sfc(2.7 版本，2.6 版本及之前都没有)</strong> 目录：包含单文件组件 (SFC) 编译器的代码。</li><li><strong>dist</strong> 目录：源码最终打包后的文件输出目录。</li><li><strong>examples</strong> 目录：官方的使用示例。</li><li><strong>flow</strong> 目录：类型检测（没人用了，和 TS 功能类似）</li><li><strong>packages</strong> 目录：一些下好的包，（vue 源码包含额 weex）</li><li><strong>scripts</strong> 目录：一些辅助脚本。</li><li><strong>test</strong> 目录：测试代码。</li><li><strong>types</strong> 目录：类型定义文件。</li></ul><h3 id="_3-学习调试剖析-vue-2-源码建议" tabindex="-1">3.学习调试剖析 Vue 2 源码建议 <a class="header-anchor" href="#_3-学习调试剖析-vue-2-源码建议" aria-label="Permalink to &quot;3.学习调试剖析 Vue 2 源码建议&quot;">​</a></h3><p>首先阅读 Vue 2 的官方文档：<a href="https://cn.vuejs.org/v2/guide/index.html" target="_blank" rel="noreferrer">vue2 的官方文档</a>，了解 Vue 框架的基本原理和功能。</p><h3 id="_4基于运行的-vue-源码调试剖析" tabindex="-1">4🅰️基于运行的 vue 源码调试剖析 <a class="header-anchor" href="#_4基于运行的-vue-源码调试剖析" aria-label="Permalink to &quot;4:a:基于运行的 vue 源码调试剖析&quot;">​</a></h3><h4 id="_1-根据-vue2-源码项目的-package-json-文件中的-scripts-下的命令-找到运行和打包的命令-分析运行和打包的入口文件。" tabindex="-1">1.根据 vue2 源码项目的 package.json 文件中的 scripts 下的命令，找到运行和打包的命令，分析运行和打包的入口文件。 <a class="header-anchor" href="#_1-根据-vue2-源码项目的-package-json-文件中的-scripts-下的命令-找到运行和打包的命令-分析运行和打包的入口文件。" aria-label="Permalink to &quot;1.根据 vue2 源码项目的 package.json 文件中的 scripts 下的命令，找到运行和打包的命令，分析运行和打包的入口文件。&quot;">​</a></h4><ul><li><strong>scripts/config.js</strong> （web-full-dev，web-runtime-cjs-dev，web-runtime-esm...）</li><li>分析 <code>scripts/config.js</code> 代码得到的打包的入口：按下面每一个文件的代码执行顺序一步步得到 <ul><li><strong>src/platforms/web/entry-runtime.js</strong></li><li><strong>src/platforms/web/entry-runtime-with-compiler.js</strong></li><li>(上面两个入口的区别是：带有 compiler 的会重写$mount，将 template 变成 render 函数）</li><li><strong>src/platforms/web/runtime/index.js</strong>（所谓的运行时，会提供一些 dom 操作的 api 属性操作、元素操作，提供一些组件和指令)</li><li><strong>src/core/index.js</strong> initGlobalAPI 初始化全局 api <ul><li><strong>src/core/instance/index.js</strong> Vue 的构造函数</li></ul></li></ul></li></ul><p>以上文件的代码的执行流程：</p><p><img src="`+ys+'" alt="entry.fd620404"></p><h4 id="_2-从-core-目录开始阅读源码-了解-vue-框架的核心代码-了解相关的功能和实现。" tabindex="-1">2.从 <code>core</code> 目录开始阅读源码，了解 Vue 框架的核心代码，了解相关的功能和实现。 <a class="header-anchor" href="#_2-从-core-目录开始阅读源码-了解-vue-框架的核心代码-了解相关的功能和实现。" aria-label="Permalink to &quot;2.从 `core` 目录开始阅读源码，了解 Vue 框架的核心代码，了解相关的功能和实现。&quot;">​</a></h4><p>package.json 指定 script 脚本命令的 sourcemap 参数 可以开启代码调试：</p><p>添加：--sourcemap，或简写：-s</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;script&quot;</span><span style="color:#ABB2BF;">: {</span></span>\n<span class="line"><span style="color:#E06C75;">    &quot;dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;rollup -w -c scripts/config.js --sourcemap --environment TARGET:web-full-dev&quot;</span><span style="color:#ABB2BF;">,</span></span>\n<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>自己写的调试例子，把 examples 目录下的目录代码删除，自己写例子来调试，如【Vue2 源码解析.assets】资源目录下的 examples 目录，就是自己写的调试 vue 源码的例子</p><h4 id="_3-除了代码打断点调试-也可以使用一些调试工具-例如-chrome-devtools-帮助理解代码的执行过程。" tabindex="-1">3.除了代码打断点调试，也可以使用一些调试工具，例如 Chrome DevTools，帮助理解代码的执行过程。 <a class="header-anchor" href="#_3-除了代码打断点调试-也可以使用一些调试工具-例如-chrome-devtools-帮助理解代码的执行过程。" aria-label="Permalink to &quot;3.除了代码打断点调试，也可以使用一些调试工具，例如 Chrome DevTools，帮助理解代码的执行过程。&quot;">​</a></h4><p>在自己写的 examples 目录例子中，添加 debugger 调试时非常长的，熟悉代码运行流程和代码目录下的文件的功能之后，可以找到相关代码文件，直接打断点调试，更方便。</p><h2 id="vue2-7-版本源码调试剖析" tabindex="-1">Vue2.7 版本源码调试剖析 <a class="header-anchor" href="#vue2-7-版本源码调试剖析" aria-label="Permalink to &quot;Vue2.7 版本源码调试剖析&quot;">​</a></h2><h2 id="vue2-面试题" tabindex="-1">Vue2 面试题 <a class="header-anchor" href="#vue2-面试题" aria-label="Permalink to &quot;Vue2 面试题&quot;">​</a></h2><h3 id="_1-请说一下vue2响应式数据的理解-先知道基本的问题在哪-源码的角度回答-你用的时候会有哪些问题" tabindex="-1">1.请说一下<code>Vue2</code>响应式数据的理解 （先知道基本的问题在哪， 源码的角度回答， 你用的时候会有哪些问题） <a class="header-anchor" href="#_1-请说一下vue2响应式数据的理解-先知道基本的问题在哪-源码的角度回答-你用的时候会有哪些问题" aria-label="Permalink to &quot;1.请说一下`Vue2`响应式数据的理解 （先知道基本的问题在哪， 源码的角度回答， 你用的时候会有哪些问题）&quot;">​</a></h3><p>可以监控一个数据的修改和获取操作。 针对对象格式会给每个对象的属性进行劫持 Object.defineProperty</p><blockquote><p>源码层面 initData -&gt; observe -&gt; defineReactive 方法 （内部对所有属性进行了重写 性能问题） 递归增加对象中的对象增加 getter 和 setter</p></blockquote><blockquote><p>我们在使用 Vue 的时候如果 层级过深（考虑优化） 如果数据不是响应式的就不要放在 data 中了。 我们属性取值的时候尽量避免多次取值。 如果有些对象是放到 data 中的但是不是响应式的可以考虑采用 Object.freeze() 来冻结对象</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> total</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>\n<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; ; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">；</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++&gt;</span><span style="color:#ABB2BF;">){</span></span>\n<span class="line"><span style="color:#E06C75;">    total</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>\n<span class="line"><span style="color:#ABB2BF;">}</span></span>\n<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">timer</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> total</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-vue中如何检测数组变化" tabindex="-1">2.<code>Vue</code>中如何检测数组变化? <a class="header-anchor" href="#_2-vue中如何检测数组变化" aria-label="Permalink to &quot;2.`Vue`中如何检测数组变化?&quot;">​</a></h3><p>vue2 中检测数组的变化并没有采用 defineProperty 因为修改索引的情况不多(如果直接使用 defineProperty 会浪费大量性能)。 采用重写数组的变异方法来实现 （函数劫持）</p><blockquote><p>initData -&gt; observe -&gt; 对我们传入的数组进行原型链修改，后续调用的方法都是重写后的方法 -》 对数组中每个对象也再次进行代理</p></blockquote><p>修改数组索引 ，修改长度是无法进行监控的 <code>arr[1] = 100; arr.length = 300;</code> 不会触发视图更新的</p><p><code>arr[0].xxx = 100;</code> 因为数组中的对象会被 <code>observe</code></p><h3 id="_3-vue中如何进行依赖收集" tabindex="-1">3.<code>Vue</code>中如何进行依赖收集？ <a class="header-anchor" href="#_3-vue中如何进行依赖收集" aria-label="Permalink to &quot;3.`Vue`中如何进行依赖收集？&quot;">​</a></h3><ul><li>所谓的依赖收集 （观察者模式） 被观察者指代的是数据 (dep)， 观察者（watcher 3 中渲染 wather、计算属性、用户 watcher）</li><li>一个 watcher 中可能对应着多个数据 watcher 中还需要保存 dep （重新渲染的时候可以让属性重新记录 watcher） 计算属性也会用到</li></ul><blockquote><p>多对多的关系 一个 dep 对应多个 watcher ， 一个 watcher 有多个 dep 。 默认渲染的时候会进行依赖收集（会触发 get 方法）， 数据更新了就找到属性对应的 watcher 去触发更新</p></blockquote><p><img src="'+is+`" alt=""></p><p>取值的时候收集依赖，设值的时候更新视图</p><h3 id="_4-如何理解vue中模板编译原理" tabindex="-1">4.如何理解<code>Vue</code>中模板编译原理 <a class="header-anchor" href="#_4-如何理解vue中模板编译原理" aria-label="Permalink to &quot;4.如何理解\`Vue\`中模板编译原理&quot;">​</a></h3><p>我们用户传递的是 template 属性，我们需要将这个 template 编译成 render 函数</p><ul><li>template -&gt; ast 语法树</li><li>对语法树进行标记 （标记的是静态节点）</li><li>将 ast 语法树生成 render 函数</li></ul><blockquote><p>最终每次渲染可以调用 render 函数返回对应的虚拟节点 (递归是先子后父)</p></blockquote><h3 id="_5-vue生命周期钩子是如何实现的" tabindex="-1">5.<code>Vue</code>生命周期钩子是如何实现的 <a class="header-anchor" href="#_5-vue生命周期钩子是如何实现的" aria-label="Permalink to &quot;5.\`Vue\`生命周期钩子是如何实现的&quot;">​</a></h3><p>就是内部利用了一个发布订阅模式 将用户写的钩子维护成了一个数组，后续一次调用 callHook。 主要靠的是 mergeOptions</p><blockquote><p>内部就是一个发布订阅模式</p></blockquote><p>为什么有些钩子的执行是先子后父亲，有些是先父后子 组件渲染是如何渲染的？</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">// 遇到父组件就先渲染父组件</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    // 遇到子组件就渲染子组件</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">my-button</span><span style="color:#ABB2BF;">   &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    // 先渲染子组件后 完成才能渲染完毕父组件</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_6-vue的生命周期方法有哪些-一般在哪一步发送请求及原因" tabindex="-1">6.<code>Vue</code>的生命周期方法有哪些？一般在哪一步发送请求及原因 <a class="header-anchor" href="#_6-vue的生命周期方法有哪些-一般在哪一步发送请求及原因" aria-label="Permalink to &quot;6.\`Vue\`的生命周期方法有哪些？一般在哪一步发送请求及原因&quot;">​</a></h3><p>beforeCreate 这里没有实现响应式数据 vue3 中不需要用了 没用 created √ 拿到的是响应式的属性 (不涉及到 dom 渲染) 这个 api 可以在服务端渲染中使用 在 vue3 中 setup beforeMount 没用实际价值 mounted √ 表示组件挂载完成了 <code>vm.$el</code> 第一次渲染完毕了，等待渲染完毕后 mounted 中可以获取 <code>$el</code> beforeUpdate updated 更新前后 activated keep-alive deactivated beforeDestroy √ 手动调用移除会触发 destroyed √ 销毁后触发 errorCaptured 捕获错误</p><blockquote><p>一般最多的在 mounted （created 不是比 mounted 早吗？ 代码是同步执行的，请求是异步的） 服务端渲染不都是在 created 中，真正使用服务端渲染的时候 基本上也不会使用 created （服务端没有 dom 也没有 mounted 钩子） 在哪里发请求主要看你要做什么事（请求的时候获取 dom 元素，都写在这里就可以的）</p></blockquote><p>created 执行完之后再执行的 mounted 这个时候异步已经在 cteated 执行完了吧 错误的 因为生命周期是顺序调用的 （同步的） 请求是异步的 所以最终获取到数据肯定是在 mounted 之后的</p><h3 id="_7-vue-mixin的使用场景和原理" tabindex="-1">7.<code>Vue.mixin</code>的使用场景和原理 <a class="header-anchor" href="#_7-vue-mixin的使用场景和原理" aria-label="Permalink to &quot;7.\`Vue.mixin\`的使用场景和原理&quot;">​</a></h3><p>我们可以通过 Vue.mixin 来实现逻辑的复用, 问题在于数据来源不明确。 声明的时候可能会导致命名冲突。 高阶组件， vue3 采用的就是 compositionAPI 解决了复用问题</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">xxx</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeCreate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Store</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeDestroy</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;my&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">xxx</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">222</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;{{xxx}}&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>mixin 的核心就是合并属性 （内部采用了策略模式进行合并） 全局 mixin，局部 mixin。 针对不同的属性有不同的合并策略</p></blockquote><h3 id="_8-vue组件-data-为什么必须是个函数" tabindex="-1">8.<code>Vue</code>组件 data 为什么必须是个函数？ <a class="header-anchor" href="#_8-vue组件-data-为什么必须是个函数" aria-label="Permalink to &quot;8.\`Vue\`组件 data 为什么必须是个函数？&quot;">​</a></h3><p>原因就在于针对根实例而言，new Vue, 组件是通过同一个构造函数多次创建实例，如果是同一个对象的话那么数据会被互相影响。 每个组件的数据源都是独立的，那就每次都调用 data 返回一个新的对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Vue</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> Sub</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">data</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	Sub</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> Sub</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> Child</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Child</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">c1</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Child</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">c2</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_9-nexttick在哪里使用-原理是" tabindex="-1">9.<code>nextTick</code>在哪里使用？原理是? <a class="header-anchor" href="#_9-nexttick在哪里使用-原理是" aria-label="Permalink to &quot;9.\`nextTick\`在哪里使用？原理是?&quot;">​</a></h3><p>nextTick 内部采用了异步任务进行了包装 （多个 nextTick 调用 会被合并成一次 内部会合并回调）最后在异步任务中批处理 主要应用场景就是异步更新 （默认调度的时候 就会添加一个 nextTick 任务） 用户为了获取最终的渲染结果需要在内部任务执行之后在执行用户逻辑 这时候用户需要将对应的逻辑放到 nextTick 中</p><h3 id="_10-computed和watch区别" tabindex="-1">10.<code>computed</code>和<code>watch</code>区别 <a class="header-anchor" href="#_10-computed和watch区别" aria-label="Permalink to &quot;10.\`computed\`和\`watch\`区别&quot;">​</a></h3><p>computed 和 watch 的相同点。 底层都会创建一个 watcher (用法的区别 computed 定义的属性可以在模板中使用,watch 不能在视图中使用)</p><ul><li>computed 默认不会立即执行 只有取值的时候才会执行 内部会唯一个 dirty 属性 来控制依赖的值是否发生变化。 默认计算属性需要同步返回结果 ( 有个包 就是让 computed 变成异步的)</li><li>watch 默认用户会提供一个回调函数，数据变化了就调用这个回调。 我们可以监控某个数据的变化 数据变化了执行某些操作</li></ul><h3 id="_11-vue-set方法是如何实现的" tabindex="-1">11.<code>Vue.set</code>方法是如何实现的 <a class="header-anchor" href="#_11-vue-set方法是如何实现的" aria-label="Permalink to &quot;11.\`Vue.set\`方法是如何实现的&quot;">​</a></h3><p>Vue.set 方法是 vue 中的一个补丁方法 （正常我们添加属性是不会触发更新的， 我们数组无法监控到索引和长度）</p><p>如何实现的 我们给每一个对象都增添了一个 dep 属性</p><blockquote><p>vue3 中也不需要此方法了 (当属性添加或者删除时 手动触发对象本身 dep 来进行更新)</p></blockquote><h3 id="_12-vue为什么需要虚拟-dom" tabindex="-1">12.<code>Vue</code>为什么需要虚拟 DOM <a class="header-anchor" href="#_12-vue为什么需要虚拟-dom" aria-label="Permalink to &quot;12.\`Vue\`为什么需要虚拟 DOM&quot;">​</a></h3><ul><li><p>主要这个虚拟 dom 的好处是什么？ 我们写的代码可能要针对不同的平台来使用 （weex，web，小程序） 可以跨平台，不需要考虑平台问题</p></li><li><p>不用关心兼容性问题， 可以在上层将对应的渲染方法传递给我 ， 我来通过虚拟 dom 渲染即可</p></li><li><p>diff 算法 针对更新的时候， 有了虚拟 dom 之后我们可以通过 diff 算法来找到最后的差异进行修改真实 dom （类似于在真实 dom 之间做了一个缓存）</p></li></ul><blockquote><p>跨平台 、diff 算法</p></blockquote><h3 id="_13-vue中diff算法原理" tabindex="-1">13.<code>Vue</code>中<code>diff</code>算法原理 <a class="header-anchor" href="#_13-vue中diff算法原理" aria-label="Permalink to &quot;13.\`Vue\`中\`diff\`算法原理&quot;">​</a></h3><p>diff 算法的特点就是平级比较 ， 内部采用了双指针方式进行了优化 优化了常见的操作。 采用了递归比较的方式</p><h4 id="针对一个节点的-diff-算法" tabindex="-1">针对一个节点的 diff 算法 <a class="header-anchor" href="#针对一个节点的-diff-算法" aria-label="Permalink to &quot;针对一个节点的 diff 算法&quot;">​</a></h4><ul><li>先拿出根节点来进行比较如果是同一个节点则比较属性 ， 如果不是同一个节点则直接换成最新的即可</li><li>同一个节点比较属性后，复用老节点</li></ul><h4 id="比较儿子" tabindex="-1">比较儿子 <a class="header-anchor" href="#比较儿子" aria-label="Permalink to &quot;比较儿子&quot;">​</a></h4><ul><li>一方有儿子 一方没儿子 （删除 、 添加）</li><li>两方都有儿子 <ul><li>优化比较 头头 尾尾 交叉比对</li><li>就做一个映射表，用新的去映射表中查找此元素是否存在，存在则移动不存在则插入， 最后删除多余的</li><li>这里会有多移动的情况</li></ul></li></ul><blockquote><p>O(n)复杂度的递归比较</p></blockquote><h3 id="_14-既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行diff检测差异" tabindex="-1">14.既然 Vue 通过数据劫持可以精准探测数据变化，为什么还需要虚拟 DOM 进行<code>diff</code>检测差异 <a class="header-anchor" href="#_14-既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行diff检测差异" aria-label="Permalink to &quot;14.既然 Vue 通过数据劫持可以精准探测数据变化，为什么还需要虚拟 DOM 进行\`diff\`检测差异&quot;">​</a></h3><ul><li>如果给每个属性都去增加 watcher , 而且粒度太小也是不好控制, 降低 watcher 的数量 （每一个组件都有一个 watcher） 可以通过 diff 算法来优化渲染过程。 通过 diff 算法和响应式原理折中处理了一下</li></ul><h3 id="_15-请说明-vue-中-key-的作用和原理-谈谈你对它的理解" tabindex="-1">15.请说明 Vue 中 key 的作用和原理，谈谈你对它的理解 <a class="header-anchor" href="#_15-请说明-vue-中-key-的作用和原理-谈谈你对它的理解" aria-label="Permalink to &quot;15.请说明 Vue 中 key 的作用和原理，谈谈你对它的理解&quot;">​</a></h3><p>isSameVnode 中会根据 key 来判断两个元素是否是同一个元素，key 不相同说明不是同一个元素 （key 在动态列表中不要使用索引 -》 bug） 我们使用 key 尽量要保证 key 的唯一性 （这样可以优化 diff 算法）</p><h3 id="_16-谈一谈对-vue-组件化的理解" tabindex="-1">16.谈一谈对 Vue 组件化的理解 <a class="header-anchor" href="#_16-谈一谈对-vue-组件化的理解" aria-label="Permalink to &quot;16.谈一谈对 Vue 组件化的理解&quot;">​</a></h3><p>组件的优点： 组件的复用可以根据数据渲染对应的组件 ， 把组件相关的内容放在一起 （方便复用）合理规划组件，可以做到更新的时候是组件级更新 (组件化中的特性 属性， 事件， 插槽)</p><blockquote><p>Vue 中怎样处理组件 1） Vue.extend 根据用户的传入的对象生成一个组件的构造函数 2） 根据组件产生对应的虚拟节点 data:{hook:init} 3）做组件初始化 将我们的虚拟节点转化成真实节点 （组件的 init 方法） new Sub().$mount()</p></blockquote><h3 id="_17-vue的组件渲染流程-init" tabindex="-1">17.<code>Vue</code>的组件渲染流程 （init） <a class="header-anchor" href="#_17-vue的组件渲染流程-init" aria-label="Permalink to &quot;17.\`Vue\`的组件渲染流程 （init）&quot;">​</a></h3><ul><li><code>vm.$options.components[&#39;my&#39;] = {my:模板}</code></li><li>创造组件的虚拟节点 <code>createComponent {tag:&#39;my&#39;,data:{hook:{init}}</code>,<code>componentOptions:{Ctor:Vue.extend( {my:模板})}}</code></li><li>创造真实节点的 <code>createComponent init -&gt; new 组件().$mount() -&gt; vm.componentInstance</code></li><li><code>vm.$el</code> 插入到父元素中</li></ul><h3 id="_18-vue组件更新流程-prepatch" tabindex="-1">18.<code>Vue</code>组件更新流程 （prepatch） <a class="header-anchor" href="#_18-vue组件更新流程-prepatch" aria-label="Permalink to &quot;18.\`Vue\`组件更新流程 （prepatch）&quot;">​</a></h3><ul><li>组件更新会触发 组件的 prepatch 方法，会复用组件，并且比较组件的 属性 事件 插槽</li><li>父组件给子组件传递的属性是(props) 响应式的 , 在模板中使用会做依赖收集 收集自己的组件 watcher</li><li>稍后组件更新了 会重新给 props 赋值 ， 赋值完成后会触发 watcher 重新更新</li></ul><h3 id="_19-vue中异步组件原理" tabindex="-1">19.<code>Vue</code>中异步组件原理 <a class="header-anchor" href="#_19-vue中异步组件原理" aria-label="Permalink to &quot;19.\`Vue\`中异步组件原理&quot;">​</a></h3><p>Vue 中异步组件的写法有很多， 主要用作。大的组件可以异步加载的 markdown 组件 editor 组件。 就是先渲染一个注释标签，等组件加载完毕，最后在重新渲染 forceUpdate (图片懒加载) 使用异步组件会配合 webpack</p><blockquote><p>原理： 异步组件默认不会调用 Vue.extend 方法 所有 Ctor 上没有 cid 属性， 没有 cid 属性的就是异步组件。 会先渲染一个占位符组件. 但是如果有 loading 会先渲染 loading ， 第一轮就结束了。 如果用户调用了 resolve， 会将结果赋予给 factory.resolved 上面， 强制重新渲染。 重新渲染时候再次进入到 resolveAsyncComponent 中， 会直接拿到 factory.resolved 结果来渲染</p></blockquote><h3 id="_20-函数组件的优势及原理" tabindex="-1">20.函数组件的优势及原理 <a class="header-anchor" href="#_20-函数组件的优势及原理" aria-label="Permalink to &quot;20.函数组件的优势及原理&quot;">​</a></h3><blockquote><p>React 中也区分两种组件 一种叫类组件 ， 一种叫函数式组件 （Sub 就是类组件 有 this） （函数组件 没有类就没有 this，也没有所谓的状态，没有生命周期 beforeCreate created..., 好处就是性能好， 不需要创建 watcher 了） 函数式组件就是调用 render 拿到返回结果来渲染， 所以性能高</p></blockquote><h3 id="_21-vue-组件间传值的方式及之间区别" tabindex="-1">21.Vue 组件间传值的方式及之间区别 <a class="header-anchor" href="#_21-vue-组件间传值的方式及之间区别" aria-label="Permalink to &quot;21.Vue 组件间传值的方式及之间区别&quot;">​</a></h3><ul><li><p>props 父传递数据给儿子 属性的原理就是把解析后的 props，验证后就会将属性定义在当前的实例上 <code>vm._props</code> (这个对象上的属性都是通过 defineReactive 来定义的 （都是响应式的） 组件在渲染的过程中会去 vm 上取值 <code>_props</code> 属性会被代理到 vm 上)</p></li><li><p>emit 儿子触发组件更新 在创建虚拟节点的时候将所有的事件 绑定到了 listeners ， 通过 <code>$on</code> 方法绑定事件 通过 <code>$emit</code> 方法来触发事件 (发布订阅模式)</p></li><li><p>events Bus 原理就是 发布订阅模式 <code>$bus = new Vue()</code> 简单的通信可以采用这种方式</p></li><li><p><code>$parent</code>、<code>$children</code> 就是在创造子组件的时候 会将父组件的实例传入。 在组件本身初始化的时候会构建组件间的父子关系 <code>$parent</code> 获取父组件的实例，通过<code>$children</code> 可以获取所有的子组件的实例</p></li><li><p>ref 可以获取 dom 元素和组件的实例 （虚拟 dom 没有处理 ref， 这里无法拿到实例 也无法获取组件） 创建 dom 的时候如何处理 ref 的。 会将用户所有的 dom 操作及属性 都维护到一个 cbs 属性中 cbs (create update insert destroy....)。 依次调用 cbs 中 create 方法。 这里就包含 ref 相关的操作， 会操作 ref 并且赋值</p></li><li><p>provide （在父组件中将属性暴露出来）inject 在后代组件中通过 inject 注入属性 在父组件中提供数据， 在子组件中递归向上查找</p></li><li><p>$attrs (所有的组件上的属性 不涵盖 props) $listeners (组件上所有的事件)</p></li><li><p>Vue.observalble 可以创造一个全局的对象用于通信 用的也少</p></li><li><p>vuex</p></li></ul><h3 id="_22-v-if-和-v-for-哪个优先级更高" tabindex="-1">22.v-if 和 v-for 哪个优先级更高？ <a class="header-anchor" href="#_22-v-if-和-v-for-哪个优先级更高" aria-label="Permalink to &quot;22.v-if 和 v-for 哪个优先级更高？&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	with</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;div&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">			_l</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> flag</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;span&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#61AFEF;"> _e</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			}),</span></span>
<span class="line"><span style="color:#D19A66;">			0</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>v-for 的优先级更高 ，在编译的时候 会将 v-for 渲染成 <code>\\_l</code> 函数 v-if 会变成三元表达式。 v-if 和 v-for 不要在一起使用。</p></blockquote><p>v-if (控制是否渲染) / v-show(控制的是样式 viisbility:hidden display:none ?) <code>v-show=“true&quot;</code> 放在 span 上会变成块元素吗？ 为什么不用 <code>viisbility:hidden</code>? 不能响应事件 (占位的) 为什么比用 opacity 呢？ （透明度为 0 占位） 可以响应事件的</p><blockquote><p>v-if 在编译的时候 会变成三元表达式 但是 v-show 会变成一个指令</p></blockquote><h3 id="_23-v-if-v-model-v-for-的实现原理" tabindex="-1">23.v-if，v-model，v-for 的实现原理 <a class="header-anchor" href="#_23-v-if-v-model-v-for-的实现原理" aria-label="Permalink to &quot;23.v-if，v-model，v-for 的实现原理&quot;">​</a></h3><ul><li><p>v-if 会被编译成 三元表达式</p></li><li><p>v-for 会被编译成 <code>_l</code> 循环</p></li><li><p>v-model 干什么的？ 放在表单元素上可以实现双向绑定 ， 放在组件上就不一样了</p><ul><li><p>v-model 放在不同的元素上会编译出不同的结果，针对文本来说会处理文本 （会被编译成 value + input + 指令处理） value 和 input 实现双向绑定阻止中文的触发 指令作用就是处理中文输入完毕后 手动触发更新</p></li><li><p>v-model 绑定到组件上 这里会编译一个 model 对象 组件在创建虚拟节点的时候会里有这个 对象。 会看一下里面是否有自定义的 prop 和 event ，如果没有则会被解析成 value + input 的语法糖</p></li></ul></li></ul><h3 id="_27-vue-中-sync-修饰符的作用-用法及实现原理" tabindex="-1">27.Vue 中.sync 修饰符的作用，用法及实现原理 <a class="header-anchor" href="#_27-vue-中-sync-修饰符的作用-用法及实现原理" aria-label="Permalink to &quot;27.Vue 中.sync 修饰符的作用，用法及实现原理&quot;">​</a></h3><ul><li>和 v-model 一样，这个 api 是为了实现状态同步的， 这个东西在 vue3 中被移除了</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	with</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;my&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">			attrs</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				xx</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#E06C75;">			on</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">				&quot;update:xx&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">$event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					info</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> $event</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_25-vue-use-是干什么的-原理是什么" tabindex="-1">25.Vue.use 是干什么的？原理是什么？ <a class="header-anchor" href="#_25-vue-use-是干什么的-原理是什么" aria-label="Permalink to &quot;25.Vue.use 是干什么的？原理是什么？&quot;">​</a></h3><ul><li>这里的 use 方法 目的就是将 vue 的构造函数传递给插件中，让所有的插件依赖的 Vue 是同一个版本</li><li>默认调用插件 默认调用插件的 install 方法</li><li>vue-router 和 vuex 里面的 package 的依赖里面没有 vue 是吧。是通过参数穿进去的</li></ul><h3 id="_30-组件中写-name-选项有哪些好处及作用" tabindex="-1">30.组件中写 name 选项有哪些好处及作用？ <a class="header-anchor" href="#_30-组件中写-name-选项有哪些好处及作用" aria-label="Permalink to &quot;30.组件中写 name 选项有哪些好处及作用？&quot;">​</a></h3><h4 id="可以实现递归组件" tabindex="-1">可以实现递归组件 <a class="header-anchor" href="#可以实现递归组件" aria-label="Permalink to &quot;可以实现递归组件&quot;">​</a></h4><ul><li>在 vue 中有 name 属性的组件可以被递归调用 （在写模板语法的时候 我们可以通过 name 属性来递归调用自己）</li><li>在声明组件的时候 <code>Sub.options.components[name] = Sub</code></li></ul><h4 id="起到标识作用" tabindex="-1">起到标识作用 <a class="header-anchor" href="#起到标识作用" aria-label="Permalink to &quot;起到标识作用&quot;">​</a></h4><ul><li>我们用来标识组件 通过 name 来找到对应的组件 . 自己封装跨级通信</li><li>name 属性可以用作 devtool 调试工具 来标明具体的组件</li></ul><h3 id="_24-vue-中-slot-是如何实现的-什么时候使用它" tabindex="-1">24.Vue 中 slot 是如何实现的？什么时候使用它？ <a class="header-anchor" href="#_24-vue-中-slot-是如何实现的-什么时候使用它" aria-label="Permalink to &quot;24.Vue 中 slot 是如何实现的？什么时候使用它？&quot;">​</a></h3><ul><li><p>普通插槽 （普通插槽渲染作用域在父组件中的）</p><ul><li>在解析组件的时候会将组件的 children 放到 componentOptions 上作为虚拟节点的属性</li><li>将 children 取出来放到组件的 <code>vm.$options.\\_renderChildren</code> 中</li><li>做出一个映射表放到 <code>vm.$slots</code>上 -&gt; 将结果放到 <code>vm.$scopeSlots</code> 上 <code>vm.$scopeSlots = {a:fn,b:fn,default:fn}</code></li><li>渲染组件的时候会调用 <code>_t</code> 方法 此时会去 <code>vm.$scopeSlots</code> 找到对应的函数来渲染内容</li></ul></li><li><p>具名插槽 多增加了个名字</p></li><li><p>作用域插槽（普通插槽渲染作用域在子组件中的）</p><ul><li>我们渲染插槽选择的作用域是子组件的 作用域插槽渲染的时候不会作为 children, 将作用域插槽做成了一个属性 scopedSlots</li><li>制作一个映射关系 <code>$scopedSlots = {default:fn:function({msg}){return \\_c(&#39;div&#39;,{},[_v(_s(msg))])}}}</code></li><li>稍后渲染组件的模板的时候 会通过 name 找到对应的函数 将数据传入到函数中此时才渲染虚拟节点， 用这个虚拟节点替换_t(&#39;default&#39;)</li></ul></li></ul><blockquote><p><code>vm.$scopeSlots {key:fn} vm.$slots = {key:[vnode]}</code></p></blockquote><h3 id="_29-keep-alive-平时在哪里使用-原理是" tabindex="-1">29.keep-alive 平时在哪里使用？原理是？ <a class="header-anchor" href="#_29-keep-alive-平时在哪里使用-原理是" aria-label="Permalink to &quot;29.keep-alive 平时在哪里使用？原理是？&quot;">​</a></h3><ul><li><p>1.keep-alive 在路由中使用</p></li><li><p>2.在 component:is 中使用 （缓存）</p></li><li><p>keep-alive 的原理是默认缓存加载过的组件对应的实例 内部采用了 LRU 算法</p></li><li><p>下次组件切换加载的时候 此时会找到对应缓存的节点来进行初始化，但是会采用上次缓存$el 来触发 （不用在做将虚拟节点转化成真实节点了） 通过 init -》 prepatch 中了</p></li><li><p>更新和销毁会触发 actived 和 deactived</p></li></ul><h3 id="_28-如何理解自定义指令" tabindex="-1">28.如何理解自定义指令 <a class="header-anchor" href="#_28-如何理解自定义指令" aria-label="Permalink to &quot;28.如何理解自定义指令&quot;">​</a></h3><ul><li>自定义指令就是用户定义好对应的钩子，当元素在不同的状态时会调用对应的钩子 （所有的钩子会被合并到 cbs 对应的方法上， 到时候依次调用）</li></ul><h3 id="_26-vue-事件修饰符有哪些-其实现原理是什么" tabindex="-1">26.Vue 事件修饰符有哪些？其实现原理是什么？ <a class="header-anchor" href="#_26-vue-事件修饰符有哪些-其实现原理是什么" aria-label="Permalink to &quot;26.Vue 事件修饰符有哪些？其实现原理是什么？&quot;">​</a></h3><ul><li>实现主要靠的是模板编译原理 addEventListener( stop , defaultPrevent ) self capture passvie once</li><li>.number</li></ul><h4 id="编译的时候直接编译到事件内部了" tabindex="-1">编译的时候直接编译到事件内部了 <a class="header-anchor" href="#编译的时候直接编译到事件内部了" aria-label="Permalink to &quot;编译的时候直接编译到事件内部了&quot;">​</a></h4><ul><li><code>&lt;div @click.prevent&gt;&lt;/div&gt;</code></li><li><code>&lt;div @click.stop&gt;&lt;/div&gt; </code></li></ul><h4 id="编译的时候增加标识" tabindex="-1">编译的时候增加标识 !~&amp; <a class="header-anchor" href="#编译的时候增加标识" aria-label="Permalink to &quot;编译的时候增加标识 !~&amp;&quot;">​</a></h4><ul><li><code>&lt;div @click.passive&gt;&lt;/div&gt;</code></li><li><code>&lt;div @click.capture&gt;&lt;/div&gt;</code></li><li><code>&lt;div @click.one&gt;&lt;/div&gt;</code></li></ul><h4 id="键盘事件" tabindex="-1">键盘事件 <a class="header-anchor" href="#键盘事件" aria-label="Permalink to &quot;键盘事件&quot;">​</a></h4><ul><li>都是通过模板编译来实现的，没有特殊的</li></ul><h2 id="object-defineproperty-缺点" tabindex="-1">Object.defineProperty 缺点 <a class="header-anchor" href="#object-defineproperty-缺点" aria-label="Permalink to &quot;Object.defineProperty 缺点&quot;">​</a></h2><ul><li>深度监听，需要递归到底，一次性计算量大</li><li>无法监听新增属性/删除属性( 需要：Vue.set、Vue.delete )</li></ul>`,496))])}const Ds=e(bs,[["render",us]]);export{hs as __pageData,Ds as default};
