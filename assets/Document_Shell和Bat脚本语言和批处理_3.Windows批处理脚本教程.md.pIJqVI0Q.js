import{_ as n,c as p,o as l,ah as a,j as e}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/image-20230910011906482.mLaS1F9-.png",t="/FrontEndLearnNotes/assets/image-20230910011844477.M0hZQ2As.png",r="/FrontEndLearnNotes/assets/image-20230910012014556.B6Pe4S8T.png",C=JSON.parse('{"title":"Windows 批处理脚本教程","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Shell和Bat脚本语言和批处理/3.Windows批处理脚本教程.md","filePath":"Document/Shell和Bat脚本语言和批处理/3.Windows批处理脚本教程.md","lastUpdated":1750954157000}'),c={name:"Document/Shell和Bat脚本语言和批处理/3.Windows批处理脚本教程.md"};function i(d,s,b,u,m,y){return l(),p("div",null,s[0]||(s[0]=[a(`<h1 id="windows-批处理脚本教程" tabindex="-1">Windows 批处理脚本教程 <a class="header-anchor" href="#windows-批处理脚本教程" aria-label="Permalink to &quot;Windows 批处理脚本教程&quot;">​</a></h1><p>批处理文件是将一系列命令按一定的顺序集合为一个可执行的文本文件，其扩展名为<code>.bat</code>或者<code>.cmd</code>。这些命令统称批处理命令。</p><ul><li>批处理(Batch)，也称为批处理脚本。顾名思义，批处理就是对某对象进行批量的处理，通常被认为是一种简化的脚本语言，它应用于 DOS 和 Windows 系统中。批处理文件的扩展名为 bat（或 cmd）。通常我们指定的批处理指 DOS 批处理脚本。</li><li>DOS 批处理则是基于 DOS 命令的，用来自动地批量地执行 DOS 命令以实现特定操作的脚本。更复杂的情况，需要使用 if、for、goto 等命令控制程式的运行过程，如同 C、Python 等高级语言一样。如果需要实现更复杂的应用，利用外部程式是必要的，这包括系统本身提供的外部命令和第三方提供的工具或者软件。批处理程序虽然是在命令行环境中运行，但不仅仅能使用命令行软件，任何当前系统下可运行的程序都可以放在批处理文件中运行。</li></ul><p>bat 会比 shell 使用简单点</p><p>小知识：可以在键盘上按下 Ctrl+C 组合键来强行终止一个批处理的执行过程。</p><p>了解了大概意思后,我们正式开始学习.先看一个简单的例子!</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;欢迎来到非常BAT!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">pause</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>把上面的 3 条命令保存为文件<code>test.bat</code>或者<code>test.cmd</code>然后执行</p><h2 id="bat-批处理的常见命令" tabindex="-1">bat 批处理的常见命令 <a class="header-anchor" href="#bat-批处理的常见命令" aria-label="Permalink to &quot;bat 批处理的常见命令&quot;">​</a></h2><p>注意，bat 脚本不区分大小写。也就是说，以下命令大写和小写都是对的。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">1、REM</span><span style="color:#98C379;"> 和</span><span style="color:#98C379;"> ::</span></span>
<span class="line"><span style="color:#61AFEF;">2、ECHO</span><span style="color:#98C379;"> 和</span><span style="color:#98C379;"> @</span></span>
<span class="line"><span style="color:#61AFEF;">3、PAUSE</span></span>
<span class="line"><span style="color:#61AFEF;">4、ERRORLEVEL</span></span>
<span class="line"><span style="color:#61AFEF;">5、TITLE</span></span>
<span class="line"><span style="color:#61AFEF;">6、COLOR</span></span>
<span class="line"><span style="color:#61AFEF;">7、mode</span><span style="color:#98C379;"> 配置系统设备</span></span>
<span class="line"><span style="color:#61AFEF;">8、GOTO</span><span style="color:#98C379;"> 和</span><span style="color:#98C379;"> :</span></span>
<span class="line"><span style="color:#61AFEF;">9、FIND</span></span>
<span class="line"><span style="color:#61AFEF;">10、START</span></span>
<span class="line"><span style="color:#61AFEF;">11、assoc</span><span style="color:#98C379;"> 和</span><span style="color:#98C379;"> ftype</span></span>
<span class="line"><span style="color:#61AFEF;">12、pushd</span><span style="color:#98C379;"> 和</span><span style="color:#98C379;"> popd</span></span>
<span class="line"><span style="color:#61AFEF;">13、CALL</span></span>
<span class="line"><span style="color:#61AFEF;">14、shift</span></span>
<span class="line"><span style="color:#61AFEF;">15、IF</span></span>
<span class="line"><span style="color:#61AFEF;">16、setlocal</span><span style="color:#98C379;"> 与</span><span style="color:#98C379;"> 变量延迟</span></span>
<span class="line"><span style="color:#61AFEF;">17、ATTRIB</span><span style="color:#98C379;">  显示或更改文件属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 文件夹管理</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> 显示当前目录名或改变当前目录。</span></span>
<span class="line"><span style="color:#61AFEF;">md</span><span style="color:#98C379;"> 创建目录。</span></span>
<span class="line"><span style="color:#61AFEF;">rd</span><span style="color:#98C379;"> 删除一个目录。</span></span>
<span class="line"><span style="color:#61AFEF;">dir</span><span style="color:#98C379;"> 显示目录中的文件和子目录列表。</span></span>
<span class="line"><span style="color:#61AFEF;">tree</span><span style="color:#98C379;"> 以图形显示驱动器或路径的文件夹结构。</span></span>
<span class="line"><span style="color:#61AFEF;">path</span><span style="color:#98C379;"> 为可执行文件显示或设置一个搜索路径。</span></span>
<span class="line"><span style="color:#61AFEF;">xcopy</span><span style="color:#98C379;"> 复制文件和目录树。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 文件管理</span></span>
<span class="line"><span style="color:#56B6C2;">type</span><span style="color:#98C379;"> 显示文本文件的内容。</span></span>
<span class="line"><span style="color:#61AFEF;">copy</span><span style="color:#98C379;"> 将一份或多份文件复制到另一个位置。</span></span>
<span class="line"><span style="color:#61AFEF;">del</span><span style="color:#98C379;"> 删除一个或数个文件。</span></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#98C379;"> 移动文件并重命名文件和目录。</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Windows</span><span style="color:#98C379;"> XP</span><span style="color:#98C379;"> Home</span><span style="color:#98C379;"> Edition中没有</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">ren</span><span style="color:#98C379;"> 重命名文件。</span></span>
<span class="line"><span style="color:#61AFEF;">replace</span><span style="color:#98C379;"> 替换文件。</span></span>
<span class="line"><span style="color:#61AFEF;">attrib</span><span style="color:#98C379;"> 显示或更改文件属性。</span></span>
<span class="line"><span style="color:#61AFEF;">find</span><span style="color:#98C379;"> 搜索字符串。</span></span>
<span class="line"><span style="color:#56B6C2;">fc</span><span style="color:#98C379;"> 比较两个文件或两个文件集并显示它们之间的不同</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 网络命令</span></span>
<span class="line"><span style="color:#61AFEF;">ping</span><span style="color:#98C379;"> 进行网络连接测试、名称解析</span></span>
<span class="line"><span style="color:#61AFEF;">ftp</span><span style="color:#98C379;"> 文件传输</span></span>
<span class="line"><span style="color:#61AFEF;">net</span><span style="color:#98C379;"> 网络命令集及用户管理</span></span>
<span class="line"><span style="color:#61AFEF;">telnet</span><span style="color:#98C379;"> 远程登陆</span></span>
<span class="line"><span style="color:#61AFEF;">ipconfig显示、修改TCP/IP设置</span></span>
<span class="line"><span style="color:#61AFEF;">msg</span><span style="color:#98C379;"> 给用户发送消息</span></span>
<span class="line"><span style="color:#61AFEF;">arp</span><span style="color:#98C379;"> 显示、修改局域网的IP地址-物理地址映射列表</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 系统管理</span></span>
<span class="line"><span style="color:#61AFEF;">at</span><span style="color:#98C379;"> 安排在特定日期和时间运行命令和程序</span></span>
<span class="line"><span style="color:#61AFEF;">shutdown立即或定时关机或重启</span></span>
<span class="line"><span style="color:#61AFEF;">tskill</span><span style="color:#98C379;"> 结束进程</span></span>
<span class="line"><span style="color:#61AFEF;">taskkill结束进程(比tskill高级，但WinXPHome版中无该命令</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">tasklist显示进程列表(Windows</span><span style="color:#98C379;"> XP</span><span style="color:#98C379;"> Home</span><span style="color:#98C379;"> Edition中没有</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">sc</span><span style="color:#98C379;"> 系统服务设置与控制</span></span>
<span class="line"><span style="color:#61AFEF;">reg</span><span style="color:#98C379;"> 注册表控制台工具</span></span>
<span class="line"><span style="color:#61AFEF;">powercfg控制系统上的电源设置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>======================================================</p><h2 id="介绍命令" tabindex="-1">介绍命令 <a class="header-anchor" href="#介绍命令" aria-label="Permalink to &quot;介绍命令&quot;">​</a></h2><h3 id="注释-rem、rem-和" tabindex="-1">注释：@rem、rem 和 <a class="header-anchor" href="#注释-rem、rem-和" aria-label="Permalink to &quot;注释：@rem、rem 和&quot;">​</a></h3><h4 id="_1-添加一行注释" tabindex="-1">1.添加一行注释 <a class="header-anchor" href="#_1-添加一行注释" aria-label="Permalink to &quot;1.添加一行注释&quot;">​</a></h4><p>REM, @REM 和::的异同：</p><ul><li>:: 不输出注释内容</li><li>REM 输出注释内容</li><li>@REM 不输出注释内容</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">::</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#61AFEF;">REM</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#61AFEF;">@REM</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>另外：@ECHO OFF 会关闭注释输出；@ECHO ON 则打开注释输出。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@ECHO</span><span style="color:#98C379;"> OFF</span></span>
<span class="line"><span style="color:#56B6C2;">::</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 4</span></span>
<span class="line"><span style="color:#61AFEF;">REM</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 5</span></span>
<span class="line"><span style="color:#61AFEF;">@REM</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 6</span></span>
<span class="line"><span style="color:#61AFEF;">@ECHO</span><span style="color:#98C379;"> ON</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">::</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 7</span></span>
<span class="line"><span style="color:#61AFEF;">REM</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 8</span></span>
<span class="line"><span style="color:#61AFEF;">@REM</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>执行结果：</p><p><img src="`+o+`" alt="image-20230910011906482"></p><h4 id="_2-行尾添加注释" tabindex="-1">2.行尾添加注释 <a class="header-anchor" href="#_2-行尾添加注释" aria-label="Permalink to &quot;2.行尾添加注释&quot;">​</a></h4><p>如何在命令后面添加注释？</p><p>错误示范：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> hello</span><span style="color:#98C379;"> ::</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> hello</span><span style="color:#98C379;"> REM</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> hello</span><span style="color:#98C379;"> @REM</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>正确示范：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> hello</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#56B6C2;">::</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 4</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> hello</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#61AFEF;">REM</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 5</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> hello</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#61AFEF;">@REM</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#D19A66;"> 6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+t+`" alt="image-20230910011844477"></p><h4 id="_3-行间添加注释" tabindex="-1">3.行间添加注释 <a class="header-anchor" href="#_3-行间添加注释" aria-label="Permalink to &quot;3.行间添加注释&quot;">​</a></h4><p>其实，% 注释 %放在任何地方都可以。注意：为了避免错误，%和注释之间要留有空格。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> hello</span><span style="color:#98C379;"> %</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> a</span><span style="color:#98C379;"> comment</span><span style="color:#98C379;"> %</span><span style="color:#98C379;"> world</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">%</span><span style="color:#98C379;"> this</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> a</span><span style="color:#98C379;"> comment</span><span style="color:#98C379;"> %</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> hello</span><span style="color:#98C379;"> world</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">%</span><span style="color:#98C379;"> cd</span><span style="color:#98C379;"> %</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> hello</span><span style="color:#98C379;"> world</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_4-添加多行注释" tabindex="-1">4.添加多行注释 <a class="header-anchor" href="#_4-添加多行注释" aria-label="Permalink to &quot;4.添加多行注释&quot;">​</a></h4><p>注意：@GOTO :STEP1 中冒号后面的“STEP1”是标签名，可以随便取。不过建议全部使用大写字母。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@GOTO</span><span style="color:#98C379;"> :STEP1</span></span>
<span class="line"><span style="color:#61AFEF;">This</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#98C379;"> 1-1</span></span>
<span class="line"><span style="color:#61AFEF;">This</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#98C379;"> 1-2.</span></span>
<span class="line"><span style="color:#61AFEF;">:STEP1</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> hello</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@GOTO</span><span style="color:#98C379;"> :STEP2</span></span>
<span class="line"><span style="color:#61AFEF;">This</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#98C379;"> 2-1.</span></span>
<span class="line"><span style="color:#61AFEF;">This</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> comment</span><span style="color:#98C379;"> 2-2.</span></span>
<span class="line"><span style="color:#61AFEF;">:STEP2</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> world</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><img src="`+r+`" alt="image-20230910012014556"></p><h4 id="_5-总结" tabindex="-1">5.总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5.总结&quot;">​</a></h4><p>建议尽量使用下面两种符号来为.bat 批处理文件添加注释：</p><p>（1）:: 注释</p><p>（2）% 注释 %，注意：为了避免错误，%和注释之间要留有空格。</p><p>————————————————————————————————————————</p><p>当 echo 处于打开状态，也就是（echo on）时，使用 rem 注释的语言会在 BAT 运行时被打印出来，而使用@rem 注释的语言则不会打印出来。</p><p>当 echo 处于关闭状态，也就是（echo off）时，不论是 rem 还是@rem 注释的语句都不会打印出来。</p><p>当 echo 处于打开状态，而使用::注释的语言也不会打印出来。</p><p>综上，我们可以知道，当 echo 处于关闭状态，rem、@rem 和::注释的语句都不会被打印出来；而 echo 处于打开状态时，三者才有不同。</p><p>一般情况下，你可以随意使用三种注释方法。不过有时候，你也可以利用三者的不同，这时 debug 开关，使注释按照自己的意愿在需要打印时就打印出来，不需要打印时便不打印，就像下图中的代码所示（注意使用红线标记的语句）。</p><h3 id="_1、rem-和" tabindex="-1">1、REM 和 <a class="header-anchor" href="#_1、rem-和" aria-label="Permalink to &quot;1、REM 和&quot;">​</a></h3><p>REM 为注释命令，一般用来给程序加上注解，该命令后的内容不被执行，但能回显。</p><p>其次, :: 也可以起到 rem 的注释作用, 而且更简洁有效; 但有两点需要注意：</p><ul><li>第一：任何以冒号:开头的字符行, 在批处理中都被视作标号, 而直接忽略其后的所有内容。 <ul><li>有效标号：冒号后紧跟一个以字母数字开头的字符串，goto 语句可以识别。</li><li>无效标号：冒号后紧跟一个非字母数字的一个特殊符号，goto 无法识别的标号，可以起到注释作用，所以 :: 常被用作注释符号，其实 :+ 也可起注释作用。</li></ul></li><li>第 二：与 rem 不同的是, ::后的字符行在执行时不会回显, 无论是否用 echo on 打开命令行回显状态, 因为命令解释器不认为他是一个有效的命令行, 就此点来看, rem 在某些场合下将比 :: 更为适用; 另外, rem 可以用于 config.sys 文件中。</li></ul><p>行内注释格式：%注释内容% (不常用，慎用）</p><h3 id="_2、echo-和" tabindex="-1">2、ECHO 和 @ <a class="header-anchor" href="#_2、echo-和" aria-label="Permalink to &quot;2、ECHO 和 @&quot;">​</a></h3><blockquote><p>@字符放在命令前将关闭该命令回显，无论此时 echo 是否为打开状态。</p></blockquote><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">打开回显功能：echo</span><span style="color:#98C379;"> on</span></span>
<span class="line"><span style="color:#61AFEF;">关闭回显功能：echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#61AFEF;">输出空行：echo.</span><span style="color:#98C379;"> 或</span><span style="color:#98C379;"> echo,</span><span style="color:#98C379;"> 或</span><span style="color:#98C379;"> echo:</span><span style="color:#98C379;"> 或</span><span style="color:#98C379;"> echo/</span><span style="color:#98C379;"> 等</span></span>
<span class="line"><span style="color:#61AFEF;">显示当前echo状态：echo</span></span>
<span class="line"><span style="color:#61AFEF;">输出提示信息：echo</span><span style="color:#98C379;"> 信息内容</span></span>
<span class="line"><span style="color:#61AFEF;">答复提问：echo</span><span style="color:#98C379;"> 答复语</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">执行的操作</span></span>
<span class="line"><span style="color:#61AFEF;">新建文件：echo</span><span style="color:#98C379;"> 文件内</span><span style="color:#ABB2BF;">容&gt;</span><span style="color:#98C379;">文件名</span></span>
<span class="line"><span style="color:#61AFEF;">新增内容：echo</span><span style="color:#98C379;"> 文件内</span><span style="color:#ABB2BF;">容&gt;&gt;</span><span style="color:#98C379;">文件名</span></span>
<span class="line"><span style="color:#61AFEF;">喇叭鸣响：echo</span><span style="color:#98C379;"> ^g</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>echo 命令的作用列举如下：</p><p>(1）打开回显或关闭回显功能</p><p>格式:echo [{ on|off }]</p><p>如果想关闭“ECHO OFF”命令行自身的显示，则需要在该命令行前加上“@”。</p><p>(2）显示当前 ECHO 设置状态</p><p>格式:echo</p><p>(3）输出提示信息</p><p>格式：ECHO 信息内容</p><p>上述是 ECHO 命令常见的三种用法，也是大家熟悉和会用的，但作为 DOS 命令淘金者你还应该知道下面的技巧：</p><p>(4）关闭 DOS 命令提示符</p><p>在 DOS 提示符状态下键入 ECHO OFF，能够关闭 DOS 提示符的显示使屏幕只留下光标，直至键入 ECHO ON，提示符才会重新出现。</p><p>(5）输出空行，即相当于输入一个回车</p><p>格式：ECHO．</p><p>值得注意的是命令行中的“．”要紧跟在 ECHO 后面中间不能有空格，否则“．”将被当作提示信息输出到屏幕。另外“．”可以用，：；”／[]＋等任一符号替代。</p><p>命令 ECHO．输出的回车，经 DOS 管道转向可以作为其它命令的输入，比如 echo.|time 即相当于在 TIME 命令执行后给出一个回车。所以执行时系统会在显示当前时间后，自动返回到 DOS 提示符状态</p><p>(6）答复命令中的提问</p><p>格式：ECHO 答复语|命令文件名</p><p>上述格式可以用于简化一些需要人机对话的命令(如：CHKDSK／F；FORMAT Drive:；del .）的操作，它是通过 DOS 管道命令把 ECHO 命令输出的预置答复语作为人机对话命令的输入。</p><p>下面的例子就相当于在调用的命令出现人机对话时输入“Y”回车：</p><p>C:&gt;ECHO Y|CHKDSK/F C:&gt;ECHO Y|DEL A :.</p><p>(7）建立新文件或增加文件内容</p><p>格式：ECHO 文件内容&gt;文件名</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">ECHO</span><span style="color:#98C379;"> 文件内</span><span style="color:#ABB2BF;">容&gt;&gt;</span><span style="color:#98C379;">文件名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">C:</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">ECHO</span><span style="color:#98C379;"> @ECHO</span><span style="color:#98C379;"> OF</span><span style="color:#ABB2BF;">F&gt;</span><span style="color:#98C379;">AUTOEXEC.BAT建立自动批处理文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">C:</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">ECHO</span><span style="color:#98C379;"> C:</span><span style="color:#56B6C2;">\\C</span><span style="color:#98C379;">PAV</span><span style="color:#56B6C2;">\\B</span><span style="color:#98C379;">OOTSAF</span><span style="color:#ABB2BF;">E&gt;&gt;</span><span style="color:#98C379;">AUTOEXEC.BAT向自动批处理文件中追加内容</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">C:</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">TYPE</span><span style="color:#98C379;"> AUTOEXEC.BAT显示该自动批处理文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@ECHO</span><span style="color:#98C379;"> OFF</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">C:\\CPAV\\BOOTSAFE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>(8）向打印机输出打印内容或打印控制码</p><p>格式：ECHO 打印机控制码&gt;;PRN</p><p>ECHO 打印内容&gt;;PRN</p><p>下面的例子是向 M－1724 打印机输入打印控制码。＜ Alt ＞ 156 是按住 Alt 键在小键盘键入 156，类似情况依此类推：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">C:</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">ECHO</span><span style="color:#98C379;"> +156+42+11</span><span style="color:#ABB2BF;">6&gt;;</span><span style="color:#61AFEF;">PRN(输入下划线命令FS＊t）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">C:</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">ECHO</span><span style="color:#ABB2BF;"> [email=+155@]+155@&gt;;</span><span style="color:#61AFEF;">PRN[/email](输入初始化命令ESC@）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">C:</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">ECHO.</span><span style="color:#ABB2BF;">&gt;;</span><span style="color:#61AFEF;">PRN(换行）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>(9）使喇叭鸣响</p><p>C:&gt;ECHO ^G</p><p>“G”是在 dos 窗口中用 Ctrl ＋ G 或 Alt ＋ 007 输入，输入多个 G 可以产生多声鸣响。使用方法是直接将其加入批处理文件中或做成批处理文件调用。</p><p>这里的“^G”属于特殊符号的使用，请看本文后面的章节</p><h3 id="_3、pause" tabindex="-1">3、PAUSE <a class="header-anchor" href="#_3、pause" aria-label="Permalink to &quot;3、PAUSE&quot;">​</a></h3><blockquote><p>使当前程序暂停，并输出以下内容，作用是为了让我们知道程序运行到哪步了。 显示其他提示语：<code>echo 其他提示语 &amp; pause &gt; nul</code></p></blockquote><p>在这里就是停止系统命令的执行并显示下面的内容。</p><p>例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">PAUSE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行显示：</p><p>请按任意键继续. . .</p><p>要显示其他提示语，可以这样用：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 其他提示语</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#61AFEF;">pause</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">nul</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_4、errorlevel" tabindex="-1">4、errorlevel <a class="header-anchor" href="#_4、errorlevel" aria-label="Permalink to &quot;4、errorlevel&quot;">​</a></h3><p>获取程序返回码：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> %errorlevel%</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>每个命令运行结束，可以用这个命令行格式查看返回码</p><p>用于判断刚才的命令是否执行成功</p><p>默认值为 0，一般命令执行出错会设 errorlevel 为 1</p><h3 id="_5、title" tabindex="-1">5、title <a class="header-anchor" href="#_5、title" aria-label="Permalink to &quot;5、title&quot;">​</a></h3><p>设置 cmd 窗口的标题</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">title</span><span style="color:#98C379;"> 专用窗口</span><span style="color:#7F848E;font-style:italic;">       # 可以看到cmd窗口的标题栏变了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_6、color" tabindex="-1">6、color <a class="header-anchor" href="#_6、color" aria-label="Permalink to &quot;6、color&quot;">​</a></h3><p>设置默认的控制台前景和背景颜色。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">COLOR</span><span style="color:#ABB2BF;"> [attr]</span></span>
<span class="line"><span style="color:#61AFEF;">color</span><span style="color:#98C379;"> 前景色</span><span style="color:#98C379;"> 背景色</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>attr 指定控制台输出的颜色属性</p><p>颜色属性由两个十六进制数字指定 – 第一个为背景，第二个则为前景。每个数字可以为以下任何值之一:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">0</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 黑色</span><span style="color:#D19A66;"> 8</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 灰色</span></span>
<span class="line"><span style="color:#61AFEF;">1</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 蓝色</span><span style="color:#D19A66;"> 9</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 淡蓝色</span></span>
<span class="line"><span style="color:#61AFEF;">2</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 绿色</span><span style="color:#98C379;"> A</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 淡绿色</span></span>
<span class="line"><span style="color:#61AFEF;">3</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 湖蓝色</span><span style="color:#98C379;"> B</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 淡浅绿色</span></span>
<span class="line"><span style="color:#61AFEF;">4</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 红色</span><span style="color:#98C379;"> C</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 淡红色</span></span>
<span class="line"><span style="color:#61AFEF;">5</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 紫色</span><span style="color:#98C379;"> D</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 淡紫色</span></span>
<span class="line"><span style="color:#61AFEF;">6</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 黄色</span><span style="color:#98C379;"> E</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 淡黄色</span></span>
<span class="line"><span style="color:#61AFEF;">7</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 白色</span><span style="color:#98C379;"> F</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> 亮白色</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>颜色数字值表格展示</p><table tabindex="0"><thead><tr><th>数值</th><th>颜色</th><th>数值</th><th>颜色</th></tr></thead><tbody><tr><td>0</td><td>⿊⾊</td><td>8</td><td>灰⾊</td></tr><tr><td>1</td><td>蓝⾊</td><td>9</td><td>淡蓝⾊</td></tr><tr><td>2</td><td>绿⾊</td><td>A</td><td>淡绿⾊</td></tr><tr><td>3</td><td>湖蓝⾊</td><td>B</td><td>浅绿⾊</td></tr><tr><td>4</td><td>红⾊</td><td>C</td><td>淡红⾊</td></tr><tr><td>5</td><td>紫⾊</td><td>D</td><td>淡紫⾊</td></tr><tr><td>6</td><td>黄⾊</td><td>E</td><td>淡黄⾊</td></tr><tr><td>7</td><td>白⾊</td><td>F</td><td>亮白⾊</td></tr></tbody></table><p>如果没有给定任何参数，该命令会将颜色还原到 CMD.EXE 启动时的颜色。这个值来自当前控制台窗口、/T 开关或 DefaultColor 注册表值。</p><p>如果用相同的前景和背景颜色来执行 COLOR 命令，COLOR 命令会将 ERRORLEVEL 设置为 1。</p><p>例如: “COLOR fc” 在亮白色上产生亮红色</p><h3 id="_7、mode-配置系统设备" tabindex="-1">7、mode 配置系统设备 <a class="header-anchor" href="#_7、mode-配置系统设备" aria-label="Permalink to &quot;7、mode 配置系统设备&quot;">​</a></h3><p>配置系统设备。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">串行口:　　　</span><span style="color:#98C379;"> MODE</span><span style="color:#98C379;"> COMm[:]</span><span style="color:#ABB2BF;"> [BAUD=b] [PARITY</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">p] [DATA</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">d] [STOP</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">s]</span></span>
<span class="line"><span style="color:#ABB2BF;">[to</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">on|off] [xon</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">on|off] [odsr</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">on|off]</span></span>
<span class="line"><span style="color:#ABB2BF;">[octs</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">on|off] [dtr</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">on|off|hs]</span></span>
<span class="line"><span style="color:#ABB2BF;">[rts</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">on|off|hs|tg] [idsr</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">on|off]</span></span>
<span class="line"><span style="color:#61AFEF;">设备状态:</span><span style="color:#98C379;"> MODE</span><span style="color:#ABB2BF;"> [device] [/STATUS]</span></span>
<span class="line"><span style="color:#61AFEF;">打印重定向:　　</span><span style="color:#98C379;"> MODE</span><span style="color:#98C379;"> LPTn[:]=COMm[:]</span></span>
<span class="line"><span style="color:#61AFEF;">选定代码页:　　</span><span style="color:#98C379;"> MODE</span><span style="color:#98C379;"> CON[:]</span><span style="color:#98C379;"> CP</span><span style="color:#98C379;"> SELECT=yyy</span></span>
<span class="line"><span style="color:#61AFEF;">代码页状态:　　</span><span style="color:#98C379;"> MODE</span><span style="color:#98C379;"> CON[:]</span><span style="color:#98C379;"> CP</span><span style="color:#ABB2BF;"> [/STATUS]</span></span>
<span class="line"><span style="color:#61AFEF;">显示模式:　　</span><span style="color:#98C379;"> MODE</span><span style="color:#98C379;"> CON[:]</span><span style="color:#ABB2BF;"> [COLS=c] [LINES</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">n]</span></span>
<span class="line"><span style="color:#61AFEF;">击键率:　</span><span style="color:#98C379;"> MODE</span><span style="color:#98C379;"> CON[:]</span><span style="color:#ABB2BF;"> [RATE=r </span><span style="color:#98C379;">DELAY=d]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>例子：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">mode</span><span style="color:#98C379;"> con</span><span style="color:#98C379;"> cols=</span><span style="color:#D19A66;">113</span><span style="color:#98C379;"> lines=</span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#61AFEF;">color</span><span style="color:#98C379;"> 9f</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此命令设置 DOS 窗口大小：15 行，113 列</p><h3 id="_8、goto-和" tabindex="-1">8、GOTO 和 <a class="header-anchor" href="#_8、goto-和" aria-label="Permalink to &quot;8、GOTO 和&quot;">​</a></h3><p>通过<code>goto</code>和<code>:标号</code>可以实现跳转执行命令。</p><p>在批处理中允许以“:XXX”来构建一个标号，然后用 GOTO XXX 跳转到标号:XXX 处，然后执行标号后的命令。</p><p>例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> {</span><span style="color:#61AFEF;">%1}</span><span style="color:#98C379;">=={}</span><span style="color:#98C379;"> goto</span><span style="color:#98C379;"> noparms</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> &quot;%2&quot;</span><span style="color:#98C379;">==</span><span style="color:#61AFEF;">&quot;&quot;</span><span style="color:#98C379;"> goto</span><span style="color:#98C379;"> noparms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>标签的名字可以随便起，但是最好是有意义的字符串啦，前加个冒号用来表示这个字符串是标签，goto 命令就是根据这个冒号(:）来寻找下一步跳到到那里。最好有一些说明这样你别人看起来才会理解你的意图啊。</p><p>例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#61AFEF;">:start</span></span>
<span class="line"><span style="color:#56B6C2;">set</span><span style="color:#98C379;"> /a</span><span style="color:#98C379;"> var+=</span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> %var%</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> %var%</span><span style="color:#98C379;"> leq</span><span style="color:#D19A66;"> 3</span><span style="color:#98C379;"> GOTO</span><span style="color:#98C379;"> start</span></span>
<span class="line"><span style="color:#61AFEF;">pause</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>运行显示：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">1</span></span>
<span class="line"><span style="color:#61AFEF;">2</span></span>
<span class="line"><span style="color:#61AFEF;">3</span></span>
<span class="line"><span style="color:#61AFEF;">4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_9、find" tabindex="-1">9、find <a class="header-anchor" href="#_9、find" aria-label="Permalink to &quot;9、find&quot;">​</a></h3><p>在文件中搜索字符串。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">FIND</span><span style="color:#ABB2BF;"> [/V] [/C] [/N] [/I] [/OFF[LINE]] “string” [[drive:][path]filename[ …]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>/V 显示所有未包含指定字符串的行。</li><li>/C 仅显示包含字符串的行数。</li><li>/N 显示行号。</li><li>/I 搜索字符串时忽略大小写。</li><li>/OFF[LINE] 不要跳过具有脱机属性集的文件。</li><li>“string” 指定要搜索的文字串，</li><li><code>[drive:][path]filename</code>：指定要搜索的文件。如果没有指定路径，FIND 将搜索键入的或者由另一命令产生的文字。</li><li></li></ul><p>Find 常和 type 命令结合使用</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">Type</span><span style="color:#ABB2BF;"> [drive:][path]filename | </span><span style="color:#61AFEF;">find</span><span style="color:#98C379;"> “string”</span><span style="color:#ABB2BF;"> [&gt;tmpfile] </span><span style="color:#7F848E;font-style:italic;">#挑选包含string的行</span></span>
<span class="line"><span style="color:#61AFEF;">Type</span><span style="color:#ABB2BF;"> [drive:][path]filename | </span><span style="color:#61AFEF;">find</span><span style="color:#98C379;"> /v</span><span style="color:#98C379;"> “string”</span><span style="color:#7F848E;font-style:italic;"> #剔除文件中包含string的行</span></span>
<span class="line"><span style="color:#61AFEF;">Type</span><span style="color:#ABB2BF;"> [drive:][path]filename | </span><span style="color:#61AFEF;">find</span><span style="color:#98C379;"> /c</span><span style="color:#7F848E;font-style:italic;"> #显示文件行数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>以上用法将去除 find 命令自带的提示语(文件名提示）</p><p>例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#D19A66;"> 111</span><span style="color:#ABB2BF;"> &gt;</span><span style="color:#98C379;">test.txt</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#D19A66;"> 222</span><span style="color:#ABB2BF;"> &gt;&gt;</span><span style="color:#98C379;">test.txt</span></span>
<span class="line"><span style="color:#61AFEF;">find</span><span style="color:#98C379;"> &quot;111&quot;</span><span style="color:#98C379;"> test.txt</span></span>
<span class="line"><span style="color:#61AFEF;">del</span><span style="color:#98C379;"> test.txt</span></span>
<span class="line"><span style="color:#61AFEF;">pause</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>运行显示如下：</p><p>---------- TEST.TXT 111</p><p>请按任意键继续. . .</p><p>例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#D19A66;"> 111</span><span style="color:#ABB2BF;"> &gt;</span><span style="color:#98C379;">test.txt</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#D19A66;"> 222</span><span style="color:#ABB2BF;"> &gt;&gt;</span><span style="color:#98C379;">test.txt</span></span>
<span class="line"><span style="color:#56B6C2;">type</span><span style="color:#98C379;"> test.txt</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">find</span><span style="color:#98C379;"> &quot;111&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">del</span><span style="color:#98C379;"> test.txt</span></span>
<span class="line"><span style="color:#61AFEF;">pause</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>运行显示如下：</p><p>111</p><p>请按任意键继续. . .</p><h3 id="_10、start-命令" tabindex="-1">10、start 命令 <a class="header-anchor" href="#_10、start-命令" aria-label="Permalink to &quot;10、start 命令&quot;">​</a></h3><p>批处理中调用外部程序的命令(该外部程序在新窗口中运行，批处理程序继续往下执行，不理会外部程序的运行状况），如果直接运行外部程序则必须等外部程序完成后才继续执行剩下的指令</p><p>例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">start</span><span style="color:#98C379;"> explorer</span><span style="color:#98C379;"> d:</span><span style="color:#56B6C2;">\\</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>调用图形界面打开 D 盘</p><h3 id="_11、assoc-和-ftype" tabindex="-1">11、assoc 和 ftype <a class="header-anchor" href="#_11、assoc-和-ftype" aria-label="Permalink to &quot;11、assoc 和 ftype&quot;">​</a></h3><p>文件关联</p><ul><li>assoc 设置’文件扩展名’关联，关联到’文件类型’</li><li>ftype 设置’文件类型’关联，关联到’执行程序和参数’</li></ul><p>当你双击一个.txt 文件时，windows 并不是根据.txt 直接判断用 notepad.exe 打开，而是先判断.txt 属于 txtfile ‘文件类型’</p><p>再调用 txtfile 关联的命令行 txtfile=%SystemRoot%\\system32\\NOTEPAD.EXE %1</p><p>可以在&quot;文件夹选项&quot;→&quot;文件类型&quot;里修改这 2 种关联</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">assoc</span><span style="color:#7F848E;font-style:italic;"> #显示所有’文件扩展名’关联</span></span>
<span class="line"><span style="color:#61AFEF;">assoc</span><span style="color:#98C379;"> .txt</span><span style="color:#7F848E;font-style:italic;"> #显示.txt代表的’文件类型’，结果显示 .txt=txtfile</span></span>
<span class="line"><span style="color:#61AFEF;">assoc</span><span style="color:#98C379;"> .doc</span><span style="color:#7F848E;font-style:italic;"> #显示.doc代表的’文件类型’，结果显示 .doc=Word.Document.8</span></span>
<span class="line"><span style="color:#61AFEF;">assoc</span><span style="color:#98C379;"> .exe</span><span style="color:#7F848E;font-style:italic;"> #显示.exe代表的’文件类型’，结果显示 .exe=exefile</span></span>
<span class="line"><span style="color:#61AFEF;">ftype</span><span style="color:#7F848E;font-style:italic;"> #显示所有’文件类型’关联</span></span>
<span class="line"><span style="color:#61AFEF;">ftype</span><span style="color:#98C379;"> exefile</span><span style="color:#7F848E;font-style:italic;"> #显示exefile类型关联的命令行，结果显示 exefile=“%1” %*</span></span>
<span class="line"><span style="color:#61AFEF;">assoc</span><span style="color:#98C379;"> .txt=Word.Document.8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>设置.txt 为 word 类型的文档，可以看到.txt 文件的图标都变了</p><p>assoc .txt=txtfile</p><p>恢复.txt 的正确关联</p><p>ftype exefile=“%1” %*</p><p>恢复 exefile 的正确关联</p><p>如果该关联已经被破坏，可以运行 command.com ，再输入这条命令</p><h3 id="_12、pushd-和-popd" tabindex="-1">12、pushd 和 popd <a class="header-anchor" href="#_12、pushd-和-popd" aria-label="Permalink to &quot;12、pushd 和 popd&quot;">​</a></h3><p>切换当前目录</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#61AFEF;">c:</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#56B6C2;">cd</span><span style="color:#ABB2BF;">\\ &amp; </span><span style="color:#61AFEF;">md</span><span style="color:#98C379;"> mp3</span><span style="color:#7F848E;font-style:italic;">       #在 C:\\ 建立 mp3 文件夹</span></span>
<span class="line"><span style="color:#61AFEF;">md</span><span style="color:#98C379;"> d:</span><span style="color:#56B6C2;">\\m</span><span style="color:#98C379;">p4</span><span style="color:#7F848E;font-style:italic;">               #在 D:\\ 建立 mp4 文件夹</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> /d</span><span style="color:#98C379;"> d:</span><span style="color:#56B6C2;">\\m</span><span style="color:#98C379;">p4</span><span style="color:#7F848E;font-style:italic;">            #更改当前目录为 d:\\mp4</span></span>
<span class="line"><span style="color:#ABB2BF;">pushd c:</span><span style="color:#56B6C2;">\\m</span><span style="color:#ABB2BF;">p3            </span><span style="color:#7F848E;font-style:italic;">#保存当前目录，并切换当前目录为 c:\\mp3</span></span>
<span class="line"><span style="color:#ABB2BF;">popd                    </span><span style="color:#7F848E;font-style:italic;">#恢复当前目录为刚才保存的 d:\\mp4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>一般用处不大，在当前目录名不确定时，会有点帮助。(dos 编程中很有用）</p><h3 id="_13、call" tabindex="-1">13、CALL <a class="header-anchor" href="#_13、call" aria-label="Permalink to &quot;13、CALL&quot;">​</a></h3><p>CALL 命令可以在批处理执行过程中调用另一个批处理，当另一个批处理执行完后，再继续执行原来的批处理</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">CALL</span><span style="color:#98C379;"> command</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>调用一条批处理命令，和直接执行命令效果一样，特殊情况下很有用，比如变量的多级嵌套，见教程后面。</p><p>在批处理编程中，可以根据一定条件生成命令字符串，用 call 可以执行该字符串，见例子。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">CALL</span><span style="color:#ABB2BF;"> [drive:][path]filename [batch-parameters]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>调用的其它批处理程序。filename 参数必须具有 .bat 或 .cmd 扩展名。\`</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">CALL</span><span style="color:#98C379;"> :label</span><span style="color:#98C379;"> arguments</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>调用本文件内命令段，相当于子程序。被调用的命令段以标签:label 开头</p><p>以命令 goto :eof 结尾。</p><p>另外，批脚本文本参数参照(%0、%1、等等)已如下改变:</p><p>批脚本里的 %* 指出所有的参数(如 %1 %2 %3 %4 %5 …)</p><p>批参数(%n)的替代已被增强。您可以使用以下语法:(看不明白的直接运行后面的例子）</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">%~1</span><span style="color:#98C379;"> -</span><span style="color:#98C379;"> 删除引号</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">&quot;)，扩充 %1</span></span>
<span class="line"><span style="color:#61AFEF;">%~f1 - 将 %1 扩充到一个完全合格的路径名</span></span>
<span class="line"><span style="color:#61AFEF;">%~d1 - 仅将 %1 扩充到一个驱动器号</span></span>
<span class="line"><span style="color:#61AFEF;">%~p1 - 仅将 %1 扩充到一个路径</span></span>
<span class="line"><span style="color:#61AFEF;">%~n1 - 仅将 %1 扩充到一个文件名</span></span>
<span class="line"><span style="color:#61AFEF;">%~x1 - 仅将 %1 扩充到一个文件扩展名</span></span>
<span class="line"><span style="color:#61AFEF;">%~s1 - 扩充的路径指含有短名</span></span>
<span class="line"><span style="color:#61AFEF;">%~a1 - 将 %1 扩充到文件属性</span></span>
<span class="line"><span style="color:#61AFEF;">%~t1 - 将 %1 扩充到文件的日期/时间</span></span>
<span class="line"><span style="color:#61AFEF;">%~z1 - 将 %1 扩充到文件的大小</span></span>
<span class="line"><span style="color:#61AFEF;">%~PATH:1−查找列在PATH环境变量的目录，并将PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，并扩展到找到的第一个文件的驱动器号和路径。</span></span>
<span class="line"><span style="color:#61AFEF;">%~ftza1 - 将 %1 扩展到类似 DIR 的输出行。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在上面的例子中，%1 和 PATH 可以被其他有效数值替换。</p><p>%~ 语法被一个有效参数号码终止。%~ 修定符不能跟 %*使用</p><p>注意：参数扩充时不理会参数所代表的文件是否真实存在，均以当前目录进行扩展。</p><p>要理解上面的知识，下面的例子很关键。</p><p>例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 产生一个临时文件</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">tmp.txt</span></span>
<span class="line"><span style="color:#61AFEF;">Rem</span><span style="color:#98C379;"> 下行先保存当前目录，再将c:</span><span style="color:#56B6C2;">\\w</span><span style="color:#98C379;">indows设为当前目录</span></span>
<span class="line"><span style="color:#ABB2BF;">pushd c:</span><span style="color:#56B6C2;">\\w</span><span style="color:#ABB2BF;">indows</span></span>
<span class="line"><span style="color:#61AFEF;">Call</span><span style="color:#98C379;"> :sub</span><span style="color:#98C379;"> tmp.txt</span></span>
<span class="line"><span style="color:#61AFEF;">Rem</span><span style="color:#98C379;"> 下行恢复前次的当前目录</span></span>
<span class="line"><span style="color:#61AFEF;">Popd</span></span>
<span class="line"><span style="color:#61AFEF;">Call</span><span style="color:#98C379;"> :sub</span><span style="color:#98C379;"> tmp.txt</span></span>
<span class="line"><span style="color:#61AFEF;">pause</span></span>
<span class="line"><span style="color:#61AFEF;">Del</span><span style="color:#98C379;"> tmp.txt</span></span>
<span class="line"><span style="color:#56B6C2;">exit</span></span>
<span class="line"><span style="color:#61AFEF;">:sub</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 删除引号：</span><span style="color:#98C379;"> %~1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩充到路径：</span><span style="color:#98C379;"> %~f1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩充到一个驱动器号：</span><span style="color:#98C379;"> %~d1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩充到一个路径：</span><span style="color:#98C379;"> %~p1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩充到一个文件名：</span><span style="color:#98C379;"> %~n1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩充到一个文件扩展名：</span><span style="color:#98C379;"> %~x1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩充的路径指含有短名：</span><span style="color:#98C379;"> %~s1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩充到文件属性：</span><span style="color:#98C379;"> %~a1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩充到文件的日期/时间：</span><span style="color:#98C379;"> %~t1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩充到文件的大小：</span><span style="color:#98C379;"> %~z1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩展到驱动器号和路径：%~dp1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩展到文件名和扩展名：%~nx1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo</span><span style="color:#98C379;"> 扩展到类似</span><span style="color:#98C379;"> DIR</span><span style="color:#98C379;"> 的输出行：%~ftza1</span></span>
<span class="line"><span style="color:#61AFEF;">Echo.</span></span>
<span class="line"><span style="color:#61AFEF;">Goto</span><span style="color:#98C379;"> :eof</span></span>
<span class="line"><span style="color:#61AFEF;">例：</span></span>
<span class="line"><span style="color:#56B6C2;">set</span><span style="color:#98C379;"> aa=</span><span style="color:#D19A66;">123456</span></span>
<span class="line"><span style="color:#56B6C2;">set</span><span style="color:#98C379;"> cmdstr=echo</span><span style="color:#98C379;"> %aa%</span></span>
<span class="line"><span style="color:#61AFEF;">call</span><span style="color:#98C379;"> %cmdstr%</span></span>
<span class="line"><span style="color:#61AFEF;">pause</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>本例中如果不用 call，而直接运行%cmdstr%，将显示结果%aa%，而不是 123456</p><h3 id="_14、shift" tabindex="-1">14、shift <a class="header-anchor" href="#_14、shift" aria-label="Permalink to &quot;14、shift&quot;">​</a></h3><p>更改批处理文件中可替换参数的位置。</p><p>SHIFT [/n]</p><p>如果命令扩展名被启用，SHIFT 命令支持/n 命令行开关；该命令行开关告诉命令从第 n 个参数开始移位；n 介于零和八之间。</p><p>例如:</p><p>SHIFT /2</p><p>会将 %3 移位到 %2，将 %4 移位到 %3，等等；并且不影响 %0 和 %1。</p><p>15、IF</p><p>IF 条件判断语句，语法格式如下：</p><p>IF [NOT] ERRORLEVEL number command IF [NOT] string1==string2 command IF [NOT] EXIST filename command</p><p>下面逐一介绍，更详细的分析请看后面章节。</p><p>(1) IF [NOT] ERRORLEVEL number command</p><p>IF ERRORLEVEL 这个句子必须放在某一个命令的后面，执行命令后由 IF ERRORLEVEL 来判断命令的返回值。</p><p>Number 的数字取值范围 0~255，判断时值的排列顺序应该由大到小。返回的值大于等于指定的值时，条件成立</p><p>例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#61AFEF;">dir</span><span style="color:#98C379;"> c:</span></span>
<span class="line"><span style="color:#61AFEF;">rem退出代码为</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">=1就跳至标题1处执行，</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">=0就跳至标题0处执行</span></span>
<span class="line"><span style="color:#61AFEF;">IF</span><span style="color:#98C379;"> ERRORLEVEL</span><span style="color:#D19A66;"> 1</span><span style="color:#98C379;"> goto</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#61AFEF;">IF</span><span style="color:#98C379;"> ERRORLEVEL</span><span style="color:#D19A66;"> 0</span><span style="color:#98C379;"> goto</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#61AFEF;">Rem</span><span style="color:#98C379;"> 上面的两行不可交换位置，否则失败了也显示成功。</span></span>
<span class="line"><span style="color:#61AFEF;">:0</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> 命令执行成功！</span></span>
<span class="line"><span style="color:#61AFEF;">Rem</span><span style="color:#98C379;"> 程序执行完毕跳至标题exit处退出</span></span>
<span class="line"><span style="color:#61AFEF;">goto</span><span style="color:#98C379;"> exit</span></span>
<span class="line"><span style="color:#61AFEF;">:1</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> 命令执行失败！</span></span>
<span class="line"><span style="color:#61AFEF;">Rem</span><span style="color:#98C379;"> 程序执行完毕跳至标题exit处退出</span></span>
<span class="line"><span style="color:#61AFEF;">goto</span><span style="color:#98C379;"> exit</span></span>
<span class="line"><span style="color:#61AFEF;">:exit</span></span>
<span class="line"><span style="color:#61AFEF;">pause</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>运行显示：命令执行成功！</p><p>(2) IF [NOT] string1string2 command</p><p>string1 和 string2 都为字符的数据，英文内字符的大小写将看作不同，这个条件中的等于号必须是两个(绝对相等的意思）</p><p>条件相等后即执行后面的 command</p><p>检测当前变量的值做出判断，为了防止字符串中含有空格，可用以下格式</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> [NOT] {</span><span style="color:#61AFEF;">string1}</span><span style="color:#98C379;">{string2}</span><span style="color:#98C379;"> command</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> [NOT] [string1][string2] command</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> [NOT] </span><span style="color:#98C379;">&quot;string1&quot;</span><span style="color:#ABB2BF;">“string2” command</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这种写法实际上将括号或引号当成字符串的一部分了，只要等号左右两边一致就行了，比如下面的写法就不行：</p><p>if {string1}==[string2] command</p><p>(3) IF [NOT] EXIST filename command</p><p>EXIST filename 为文件或目录存在的意思</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#61AFEF;">IF</span><span style="color:#98C379;"> EXIST</span><span style="color:#98C379;"> autoexec.bat</span><span style="color:#98C379;"> echo</span><span style="color:#98C379;"> 文件存在！</span></span>
<span class="line"><span style="color:#61AFEF;">IF</span><span style="color:#98C379;"> not</span><span style="color:#98C379;"> EXIST</span><span style="color:#98C379;"> autoexec.bat</span><span style="color:#98C379;"> echo</span><span style="color:#98C379;"> 文件不存在！</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个批处理大家可以放在 C 盘和 D 盘分别执行，看看效果</p><p>16、setlocal 与 变量延迟</p><p>本条内容引用[英雄出品]的批处理教程：</p><p>要想进阶，变量延迟是必过的一关！所以这一部分希望你能认真看。</p><p>为了更好的说明问题，我们先引入一个例子。</p><p>例 1:</p><p>@echo off set a=4 set a=5 &amp; echo %a% pause 1 2 3 4</p><p>结果：4</p><p>解说：为什么是 4 而不是 5 呢？在 echo 之前明明已经把变量 a 的值改成 5 了？</p><p>让我们先了解一下批处理运行命令的机制：</p><p>批 处理读取命令时是按行读取的(另外例如 for 命令等，其后用一对圆括号闭合的所有语句也当作一行），在处理之前要完成必要的预处理工作，这其中就包括对该 行命令中的变量赋值。我们现在分析一下例 1，批处理在运行到这句“set a=5 &amp; echo %a%”之前，先把这一句整句读取并做了预处理——对变量 a 赋了值，那么%a%当然就是 4 了！(没有为什么，批处理就是这样做的。）</p><p>而为了能够感知环境变量的动态变化，批处理设计了变量延迟。简单来说，在读取了一条完整的语句之后，不立即对该行的变量赋值，而会在某个单条语句执行之前再进行赋值，也就是说“延迟”了对变量的赋值。</p><p>那么如何开启变量延迟呢？变量延迟又需要注意什么呢？举个例子说明一下：</p><p>例 2:</p><p>@echo off setlocal enabledelayedexpansion set a=4 set a=5 &amp; echo !a! pause 1 2 3 4 5</p><p>结果：5</p><p>解说：启动了变量延迟，得到了正确答案。变量延迟的启动语句是“setlocal</p><p>enabledelayedexpansion”，并且变量要用一对叹号“!!”括起来(注意要用英文的叹号），否则就没有变量延迟的效果。</p><p>分析一下例 2，首先“setlocal enabledelayedexpansion”开启变量延迟，然后“set a=4”先给变量 a 赋值为</p><p>4，“set a=5 &amp; echo !a!”这句是给变量 a 赋值为 5 并输出(由于启动了变量延迟，所以批处理能够感知到动态变化，即不是先给该行变量赋值，而是在运行过程中给变量赋值，因此此时 a 的值就是 5 了）。</p><p>再举一个例子巩固一下。</p><p>例 3:</p><p>@echo off setlocal enabledelayedexpansion for /l %%i in (1,1,5) do ( set a=%%i echo !a! ) pause 1 2 3 4 5 6 7 结果： 1 2 3 4 5</p><p>解说：本例开启了变量延迟并用“!!”将变量扩起来，因此得到我们预期的结果。如果不用变量延迟会出现什么结果呢？结果是这样的：</p><p>ECHO 处于关闭状态。 ECHO 处于关闭状态。 ECHO 处于关闭状态。 ECHO 处于关闭状态。 ECHO 处于关闭状态。</p><p>即没有感知到 for 语句中的动态变化。</p><p>提示：在没有开启变量延迟的情况下，某条命令行中的变量改变，必须到下一条命令才能体现。这一点也可以加以利用，看例子。</p><p>例：交换两个变量的值，且不用中间变量</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#56B6C2;">:</span><span style="color:#98C379;">:目的：交换两个变量的值，但是不使用临时变量</span></span>
<span class="line"><span style="color:#56B6C2;">:</span><span style="color:#98C379;">:Code</span><span style="color:#98C379;"> by</span><span style="color:#98C379;"> JM</span><span style="color:#98C379;"> 2007-1-24</span><span style="color:#ABB2BF;"> [email=CMD@XP]CMD@XP[/email]</span></span>
<span class="line"><span style="color:#56B6C2;">:</span><span style="color:#98C379;">:出处：</span><span style="color:#ABB2BF;">&lt;http://www.cn-dos.net/forum/viewthread.php?tid=27078&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">set</span><span style="color:#98C379;"> var1=abc</span></span>
<span class="line"><span style="color:#56B6C2;">set</span><span style="color:#98C379;"> var2=</span><span style="color:#D19A66;">123</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> 交换前：</span><span style="color:#98C379;"> var1=%var1%</span><span style="color:#98C379;"> var2=%var2%</span></span>
<span class="line"><span style="color:#56B6C2;">set</span><span style="color:#98C379;"> var1=%var2%</span><span style="color:#ABB2BF;">&amp; </span><span style="color:#56B6C2;">set</span><span style="color:#98C379;"> var2=%var1%</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> 交换后：</span><span style="color:#98C379;"> var1=%var1%</span><span style="color:#98C379;"> var2=%var2%</span></span>
<span class="line"><span style="color:#61AFEF;">pause</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>17、ATTRIB 显示或更改文件属性</p>`,250),e("p",{"drive:]":"","[path]":"","filename]":"","[S":"","[D":""},"ATTRIB [+R|-R] [+A|-A] [+S|-S] [+H|-H]",-1),a(`<p>设置属性。 清除属性。 R 只读文件属性。 A 存档文件属性。 S 系统文件属性。 H 隐藏文件属性。</p><p><code>[drive:][path][filename]</code>：指定要处理的文件属性。</p><p>/S 处理当前文件夹及其子文件夹中的匹配文件。</p><p>/D 也处理文件夹。</p><p>例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">md</span><span style="color:#98C379;"> autorun</span></span>
<span class="line"><span style="color:#61AFEF;">attrib</span><span style="color:#98C379;"> +a</span><span style="color:#98C379;"> +s</span><span style="color:#98C379;"> +h</span><span style="color:#98C379;"> autorun</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面的命令将建立文件夹 autorun，然后将其设为存档、系统、隐藏属性</p><p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p><h2 id="第二节-常用特殊符号" tabindex="-1">第二节 常用特殊符号 <a class="header-anchor" href="#第二节-常用特殊符号" aria-label="Permalink to &quot;第二节 常用特殊符号&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">1、@</span><span style="color:#98C379;"> 命令行回显屏蔽符</span></span>
<span class="line"><span style="color:#61AFEF;">2、%</span><span style="color:#98C379;"> 批处理变量引导符</span></span>
<span class="line"><span style="color:#61AFEF;">3、</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#98C379;">重定向符</span></span>
<span class="line"><span style="color:#61AFEF;">4、</span><span style="color:#ABB2BF;">&gt;&gt; </span><span style="color:#98C379;">重定向符</span></span>
<span class="line"><span style="color:#61AFEF;">5、</span><span style="color:#ABB2BF;">&lt;、&gt;&amp;</span><span style="color:#61AFEF;">、</span><span style="color:#ABB2BF;">&lt;&amp; </span><span style="color:#61AFEF;">重定向符</span></span>
<span class="line"><span style="color:#61AFEF;">6、</span><span style="color:#ABB2BF;">| </span><span style="color:#61AFEF;">命令管道符</span></span>
<span class="line"><span style="color:#61AFEF;">7、^</span><span style="color:#98C379;"> 转义字符</span></span>
<span class="line"><span style="color:#61AFEF;">8、</span><span style="color:#ABB2BF;">&amp; </span><span style="color:#61AFEF;">组合命令</span></span>
<span class="line"><span style="color:#61AFEF;">9、</span><span style="color:#ABB2BF;">&amp;&amp; </span><span style="color:#61AFEF;">组合命令</span></span>
<span class="line"><span style="color:#61AFEF;">10、</span><span style="color:#ABB2BF;">|| </span><span style="color:#61AFEF;">组合命令</span></span>
<span class="line"><span style="color:#61AFEF;">11、“”</span><span style="color:#98C379;"> 字符串界定符</span></span>
<span class="line"><span style="color:#61AFEF;">12、,</span><span style="color:#98C379;"> 逗号</span></span>
<span class="line"><span style="color:#61AFEF;">13、</span><span style="color:#ABB2BF;">; </span><span style="color:#61AFEF;">分号</span></span>
<span class="line"><span style="color:#61AFEF;">14、</span><span style="color:#ABB2BF;">() 括号</span></span>
<span class="line"><span style="color:#61AFEF;">15、!</span><span style="color:#98C379;"> 感叹号</span></span>
<span class="line"><span style="color:#61AFEF;">16、批处理中可能会见到的其它特殊标记符:</span><span style="color:#ABB2BF;"> (略）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>CR(0D) 命令行结束符</p><p>Escape(1B) ANSI 转义字符引导符</p><p>Space(20) 常用的参数界定符</p><p>Tab(09) ; = 不常用的参数界定符</p><ul><li>COPY 命令文件连接符</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">* ? 文件通配符</span></span>
<span class="line"><span style="color:#61AFEF;">-</span><span style="color:#98C379;"> /</span><span style="color:#98C379;"> 参数开关引导符</span></span>
<span class="line"><span style="color:#61AFEF;">-</span><span style="color:#98C379;"> :</span><span style="color:#98C379;"> 批处理标签引导符</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>废话少说，开讲了</p><h3 id="_1、-命令行回显屏蔽符" tabindex="-1">1、@ 命令行回显屏蔽符 <a class="header-anchor" href="#_1、-命令行回显屏蔽符" aria-label="Permalink to &quot;1、@ 命令行回显屏蔽符&quot;">​</a></h3><p>这个字符在批处理中的意思是关闭当前行的回显。我们从前几课知道</p><p>ECHO OFF 可以关闭掉整个批处理命令的回显，但不能关掉 ECHO OFF 这个命令，现在我们在 ECHO OFF 这个命令前加个@，就可以达到所有命令均不回显的要求</p><h3 id="_2、-批处理变量引导符" tabindex="-1">2、% 批处理变量引导符 <a class="header-anchor" href="#_2、-批处理变量引导符" aria-label="Permalink to &quot;2、% 批处理变量引导符&quot;">​</a></h3><p>这个百分号严格来说是算不上命令的，它只是批处理中的参数而已(多个%一起使用的情况除外，以后还将详细介绍）。</p><p>引用变量用%var%，调用程序外部参数用%1 至%9 等等</p><p>%0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %为命令行传递给批处理的参数</p><p>%0 批处理文件本身，包括完整的路径和扩展名</p><p>%1 第一个参数</p><p>%9 第九个参数</p><p>% 从第一个参数开始的所有参数</p><p>参数%0 具有特殊的功能，可以调用批处理自身，以达到批处理本身循环的目的，也可以复制文件自身等等。</p><p>例：最简单的复制文件自身的方法</p><p>copy %0 d:\\wind.bat</p><p>小技巧：添加行内注释</p><p>%注释内容%(可以用作行内注释，不能出现重定向符号和管道符号）</p><p>为什么这样呢？此时“注释内容”其实被当作变量，其值是空的，故只起注释作用，不过这种用法容易出现语法错误，一般不用。</p><h3 id="_3、-重定向符" tabindex="-1">3、&gt; 重定向符 <a class="header-anchor" href="#_3、-重定向符" aria-label="Permalink to &quot;3、&gt; 重定向符&quot;">​</a></h3><p>输出重定向命令</p><p>DOS 的标准输入输出通常是在标准设备键盘和显示器上进行的，利用重定向,可以方便地将输入输出改向磁盘文件或其它设备。其中:</p><p>1.大于号“&gt;”将命令发送到文件或设备，例如打印机&gt;prn。使用大于号“&gt;”时，有些命令输出(例如错误消息)不能重定向。</p><p>2.双大于号“&gt;&gt;”将命令输出添加到文件结尾而不删除文件中已有的信息。</p><p>3.小于号“&lt;”从文件而不是键盘上获取命令所需的输入。</p><p>4.&gt;&amp;符号将输出从一个默认 I/O 流(stdout,stdin,stderr)重新定向到另一个默认 I/O 流。</p><p>例如，command &gt;output_file 2&gt;&amp;1 将处理 command 过程中的所有错误信息从屏幕重定向到标准文件输出中。标准输出的数值如下所示：</p><p>命令重定向的标准句柄</p><p>句柄名称 值 说明</p><p>STDIN 0 标准输入，发送自键盘</p><p>STDUOT 1 标准输出，发送到命令 Shell 窗口</p><p>STDERR 2 标准错误输出，发送到命令 Shell 窗口</p><p>UNDEFINED 3~9 特定于应用程序的句柄</p><p>这个字符的意思是传递并且覆盖，他所起的作用是将运行的结果传递到后面的范围(后边可以是文件，也可以是默认的系统控制台）</p><p>在 NT 系列命令行中，重定向的作用范围由整个命令行转变为单个命令语句，受到了命令分隔符&amp;,&amp;&amp;,||和语句块的制约限制。</p><p>比如：</p><p>使用命令：echo hello &gt;1.txt 将建立文件 1.txt，内容为”hello “(注意行尾有一空格）</p><p>使用命令：echo hello&gt;1.txt 将建立文件 1.txt，内容为”hello“(注意行尾没有空格）：</p><p>具体重定向实例请看我的另外一篇文章：DOS 的重定向命令及在安全方面的应用</p><h3 id="_4、-重定向符" tabindex="-1">4、&gt;&gt; 重定向符 <a class="header-anchor" href="#_4、-重定向符" aria-label="Permalink to &quot;4、&gt;&gt; 重定向符&quot;">​</a></h3><p>输出重定向命令</p><p>这个符号的作用和&gt;有点类似，但他们的区别是&gt;&gt;是传递并在文件的末尾追加，而&gt;是覆盖 用法同上</p><p>同样拿 1.txt 做例子</p><p>使用命令：</p><p>echo hello &gt; 1.txt echo world &gt;&gt;1.txt</p><p>这时候 1.txt 内容如下:</p><p>hello world</p><h3 id="_5、-、-、-重定向符" tabindex="-1">5、&lt;、&gt;&amp;、&lt;&amp; 重定向符 <a class="header-anchor" href="#_5、-、-、-重定向符" aria-label="Permalink to &quot;5、&lt;、&gt;&amp;、&lt;&amp; 重定向符&quot;">​</a></h3><p>这三个命令也是管道命令，但它们一般不常用，你只需要知道一下就 ok 了，当然如果想仔细研究的话，可以自己查一下资料。(本人已查过，网上也查不到相关资料)</p><p>&lt;，输入重定向命令，从文件中读入命令输入，而不是从键盘中读入。</p><p>@echo off echo 2005-05-01&gt;temp.txt date &lt;temp.txt del temp.txt</p><p>这样就可以不等待输入直接修改当前日期</p><p>&amp;，将一个句柄的输出写入到另一个句柄的输入中。</p><p>&lt;&amp;，刚好和&gt;&amp;相反，从一个句柄读取输入并将其写入到另一个句柄输出中。</p><p>常用句柄：0、1、2，未定义句柄：3—9</p><p>1&gt;nul 表示禁止输出正确的信息</p><p>2&gt;nul 表示禁止输出错误信息。</p><p>其中的 1 与 2 都是代表某个数据流输入输出的地址(NT CMD 称之为句柄，MSDOS 称之为设备）。</p><p>句柄 0：标准输入 stdin，键盘输入</p><p>句柄 1：标准输出 stdout，输出到命令提示符窗口(console，代码为 CON）</p><p>句柄 2：标准错误 stderr，输出到命令提示符窗口(console，代码为 CON）</p><p>其中的 stdin 可被&lt;重定向，stdout 可被&gt;、&gt;&gt;重定向。</p><p>我们已经知道读取文本中的内容可以用 for 命令，但如果只需要读取第一行用 for 命令就有点麻烦。简单的办法如下:</p><p>@echo off set /p str=&lt;%0 echo %str% pause</p><p>运行显示批处理文件自身的第一行：@echo off</p><h3 id="_6、-命令管道符" tabindex="-1">6、| 命令管道符 <a class="header-anchor" href="#_6、-命令管道符" aria-label="Permalink to &quot;6、| 命令管道符&quot;">​</a></h3><p>格式：第一条命令 | 第二条命令 [| 第三条命令…]</p><p>将第一条命令的结果作为第二条命令的参数来使用，记得在 unix 中这种方式很常见。 例如：</p><p>dir c:|find “txt”</p><p>以上命令是：查找 C：\\所有，并发现 TXT 字符串。</p><p>FIND 的功能请用 FIND /? 自行查看</p><p>在不使 format 的自动格式化参数时，我是这样来自动格式化 A 盘的</p><p>echo y|format a: /s /q /v:system</p><p>用过 format 的都知道，再格盘时要输入 y 来确认是否格盘，这个命令前加上 echo y 并用|字符来将 echo y 的结果传给 format 命令</p><p>从而达到自动输入 y 的目的</p><p>(这条命令有危害性，测试时请慎重）</p><h3 id="_7、-转义字符" tabindex="-1">7、^ 转义字符 <a class="header-anchor" href="#_7、-转义字符" aria-label="Permalink to &quot;7、^ 转义字符&quot;">​</a></h3><p>^是对特殊符号&lt;,&gt;,&amp;的前导字符，在命令中他将以上 3 个符号的特殊功能去掉，仅仅只把他们当成符号而不使用他们的特殊意义。</p><p>比如</p><p>echo test ^&gt;1.txt</p><p>结果则是：test &gt; 1.txt</p><p>他没有追加在 1.txt 里，呵呵。只是显示了出来</p><p>另外，此转义字符还可以用作续行符号。</p><p>举个简单的例子：</p><p>@echo off echo 英雄^ 是^ 好^ 男人 pause</p><p>不用多说，自己试一下就明白了。</p><p>为什么转义字符放在行尾可以起到续行符的作用呢？原因很简单，因为每行末尾还有一个看不见的符号，即回车符，转义字符位于行尾时就让回车符失效了，从而起到了续行的作用。</p><h3 id="_8、-组合命令" tabindex="-1">8、&amp; 组合命令 <a class="header-anchor" href="#_8、-组合命令" aria-label="Permalink to &quot;8、&amp; 组合命令&quot;">​</a></h3><p>语法：第一条命令 &amp; 第二条命令 [&amp; 第三条命令…]</p><p>&amp;、&amp;&amp;、||为组合命令，顾名思义，就是可以把多个命令组合起来当一个命令来执行。这在批处理脚本里是允许的，而且用的非常广泛。因为批处理认行不认命令数目。</p><p>这个符号允许在一行中使用 2 个以上不同的命令，当第一个命令执行失败了，也不影响后边的命令执行。</p><p>这里&amp;两边的命令是顺序执行的，从前往后执行。</p><p>比如：</p><p>dir z:\\ &amp; dir y:\\ &amp; dir c:\\</p><p>以上命令会连续显示 z,y,c 盘的内容，不理会该盘是否存在</p><h3 id="_9、-组合命令" tabindex="-1">9、&amp;&amp; 组合命令 <a class="header-anchor" href="#_9、-组合命令" aria-label="Permalink to &quot;9、&amp;&amp; 组合命令&quot;">​</a></h3><p>语法：第一条命令 &amp;&amp; 第二条命令 [&amp;&amp; 第三条命令…]</p><p>用这种方法可以同时执行多条命令，当碰到执行出错的命令后将不执行后面的命令，如果一直没有出错则一直执行完所有命令</p><p>这个命令和上边的类似，但区别是，第一个命令失败时，后边的命令也不会执行</p><p>dir z:\\ &amp;&amp; dir y:\\ &amp;&amp; dir c:\\</p><h3 id="_10、-组合命令" tabindex="-1">10、|| 组合命令 <a class="header-anchor" href="#_10、-组合命令" aria-label="Permalink to &quot;10、|| 组合命令&quot;">​</a></h3><p>语法：第一条命令 || 第二条命令 [|| 第三条命令…]</p><p>用这种方法可以同时执行多条命令，当一条命令失败后才执行第二条命令，当碰到执行正确的命令后将不执行后面的命令，如果没有出现正确的命令则一直执行完所有命令；</p><p>提示：组合命令和重定向命令一起使用必须注意优先级</p><p>管道命令的优先级高于重定向命令，重定向命令的优先级高于组合命令</p><p>问题：把 C 盘和 D 盘的文件和文件夹列出到 a.txt 文件中。看例：</p><p>dir c:\\ &amp;&amp; dir d:\\ &gt; a.txt</p><p>这 样执行后 a.txt 里只有 D 盘的信息！为什么？因为组合命令的优先级没有重定向命令的优先级高！所以这句在执行时将本行分成这两部分：dir c:\\和 dir d:\\ &gt; a.txt，而并不是如你想的这两部分：dir c:\\ &amp;&amp; dir d:\\和&gt; a.txt。要使用组合命令&amp;&amp;达到题目的要求，必须得这么写：</p><p>dir c:\\ &gt; a.txt &amp;&amp; dir d:\\ &gt;&gt; a.txt</p><p>这样，依据优先级高低，DOS 将把这句话分成以下两部分：dir c:\\ &gt; a.txt 和 dir d:\\ &gt;&gt; a.txt。例十八中的几句的差别比较特殊，值得好好研究体会一下。</p><p>当然这里还可以利用&amp;命令(自己想一下道理哦）：</p><p>dir c:\\ &gt; a.txt &amp; dir d:\\ &gt;&gt; a.txt</p><p>[这个也可以用 dir c:;d:\\ &gt;&gt;a.txt 来实现]</p><h3 id="_11、-字符串界定符" tabindex="-1">11、“” 字符串界定符 <a class="header-anchor" href="#_11、-字符串界定符" aria-label="Permalink to &quot;11、“” 字符串界定符&quot;">​</a></h3><p>双引号允许在字符串中包含空格，进入一个特殊目录可以用如下方法</p><p>cd &quot;program files&quot; cd progra~1 cd pro*</p><p>以上三种方法都可以进入 program files 这个目录</p><h3 id="_12、-逗号" tabindex="-1">12、, 逗号 <a class="header-anchor" href="#_12、-逗号" aria-label="Permalink to &quot;12、, 逗号&quot;">​</a></h3><p>逗号相当于空格，在某些情况下“,”可以用来当做空格使</p><p>比如</p><p>dir,c:\\</p><h3 id="_13、-分号" tabindex="-1">13、; 分号 <a class="header-anchor" href="#_13、-分号" aria-label="Permalink to &quot;13、; 分号&quot;">​</a></h3><p>分号，当命令相同时，可以将不同目标用；来隔离，但执行效果不变，如执行过程中发生错误，则只返回错误报告，但程序仍会执行。(有人说不会继续执行，其实测试一下就知道了，只不过它的执行有个规则，请看下面的规则）</p><p>比如：</p><p>dir c:;d:;e:;z:</p><p>以上命令相当于</p><p>dir c: dir d: dir e: dir f:</p><p>如果其中 z 盘不存在，运行显示：系统找不到指定的路径。然后终止命令的执行。 例：dir c:;d:;e:\\1.txt</p><p>以上命令相当于 dir c: dir d: dir e:\\1.txt 其中文件 e:\\1.txt 不存在，但 e 盘存在，有错误提示，但命令仍会执行。</p><p>规则：(我是在操作系统是 XP SP3,英文版下测试的) 1.如果目标路径不存在，则整个语句都不执行，例如 dir c:;c:\\dfdfdf\\a.txt，则根本不会执行，因为我没有 c:\\dfdfdf\\这个目录； 2.如果路径存在，仅文件不存在，则会继续执行，并且提示文件不存在的错误，例如：dir c:;c:\\temp\\a.txt，我的目录中有 c:\\temp\\文件夹，但这个目录下面没有 1.txt 这个文件。 就说这些了!各位有什么意见请回贴!有什么疑问请到 BAT 交流区发贴!下一节改进!</p><h3 id="_14、-括号" tabindex="-1">14、() 括号 <a class="header-anchor" href="#_14、-括号" aria-label="Permalink to &quot;14、() 括号&quot;">​</a></h3><p>小括号在批处理编程中有特殊的作用，左右括号必须成对使用，括号中可以包括多行命令，这些命令将被看成一个整体，视为一条命令行。 括号在 for 语句和 if 语句中常见，用来嵌套使用循环或条件语句，其实括号()也可以单独使用，请看例子。 例： 命令：echo 1 &amp; echo 2 &amp; echo 3 可以写成： ( echo 1 echo 2 echo 3 ) 上面两种写法效果一样，这两种写法都被视为是一条命令行。 注意：这种多条命令被视为一条命令行时，如果其中有变量，就涉及到变量延迟的问题。</p><h3 id="_15、-感叹号" tabindex="-1">15、! 感叹号 <a class="header-anchor" href="#_15、-感叹号" aria-label="Permalink to &quot;15、! 感叹号&quot;">​</a></h3><p>没啥说的，在变量延迟问题中，用来表示变量，即%var%应该表示为!var!，请看前面的 setlocal 命令介绍。</p><p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p><h2 id="第二章-dos-循环-for-命令详解" tabindex="-1">第二章 DOS 循环：for 命令详解 <a class="header-anchor" href="#第二章-dos-循环-for-命令详解" aria-label="Permalink to &quot;第二章 DOS 循环：for 命令详解&quot;">​</a></h2><p>讲 FOR 之前呢,咋先告诉各位新手朋友,如果你有什么命令不懂,直接在 CMD 下面输入:</p><p>name /? 这样的格式来看系统给出的帮助文件,比如 for /? 就会把 FOR 命令的帮助全部显示出来!当然许多菜鸟都看不懂…所以才会有那么多批处理文章!!!俺也照顾菜鸟,把 FOR 命令用我自己的方式说明下!</p><p>正式开始:</p><h3 id="一、基本格式" tabindex="-1">一、基本格式 <a class="header-anchor" href="#一、基本格式" aria-label="Permalink to &quot;一、基本格式&quot;">​</a></h3><p>FOR %%variable IN (set) DO command [command-parameters]</p><p>%%variable 指定一个单一字母表示可替换的参数。 (set) 指定一个或一组文件。可以使用通配符。 command 指定对每个文件执行的命令。 command-parameters 为特定命令指定参数或命令行开关。</p><p>参数:FOR 有 4 个参数 /d /l /r /f 他们的作用我在下面用例子解释</p><p>现在开始讲每个参数的意思</p><h3 id="二、参数-d" tabindex="-1">二、参数 /d <a class="header-anchor" href="#二、参数-d" aria-label="Permalink to &quot;二、参数 /d&quot;">​</a></h3><p>FOR /D %%variable IN (set) DO command [command-parameters]</p><p>如果集中包含通配符，则指定与目录名匹配，而不与文件名匹配。</p><p>如果 Set (也就是我上面写的 “相关文件或命令”) 包含通配符(* 和 ?），将对与 Set 相匹配的每个目录(而不是指定目录中的文件组）执行指定的 Command。</p><p>这个参数主要用于目录搜索,不会搜索文件,看这样的例子</p><p>@echo off for /d %%i in (c:*) do echo %%i pause</p><p>运行会把 C 盘根目录下的全部目录名字打印出来,而文件名字一个也不显示!</p><p>在来一个,比如我们要把当前路径下文件夹的名字只有 1-3 个字母的打出来</p><p>@echo off for /d %%i in (???) do echo %%i pause</p><p>这样的话如果你当前目录下有目录名字只有 1-3 个字母的,就会显示出来,没有就不显示了 这里解释下*号和?号的作用,*号表示任意 N 个字符,而?号只表示任意一个字符</p><p>知道作用了,给大家个思考题目!</p><p>@echo off for /d %%i in (window?) do echo %%i pause</p><p>保存到 C 盘下执行,会显示什么呢?自己看吧! 显示：windows</p><p>/D 参数只能显示当前目录下的目录名字,这个大家要注意!</p><h3 id="三、参数-r" tabindex="-1">三、参数 /R <a class="header-anchor" href="#三、参数-r" aria-label="Permalink to &quot;三、参数 /R&quot;">​</a></h3><p>FOR /R [[drive:]path] %%variable IN (set) DO command [command-parameters]</p><p>检查以 [drive:]path 为根的目录树，指向每个目录中的 FOR 语句。如果在 /R 后没有指定目录，则使用当前</p><p>目录。如果集仅为一个单点(.)字符，则枚举该目录树。</p><h4 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h4><p>上面我们知道,/D 只能显示当前路径下的目录名字,那么现在这个/R 也是和目录有关,他能干嘛呢?放心他比/D 强大多了!</p><p>他可以把当前或者你指定路径下的文件名字全部读取,注意是文件名字,有什么用看例子!</p><p>请注意 2 点：</p><p>1、set 中的文件名如果含有通配符(？或*)，则列举/R 参数指定的目录及其下面的所用子目录中与 set 相符合的所有文件，无相符文件的目录则不列举。</p><p>2、相反，如果 set 中为具体文件名，不含通配符，则枚举该目录树(即列举该目录及其下面的所有子目录），而不管 set 中的指定文件是否存在。这与前面所说的单点(.）枚举目录树是一个道理，单点代表当前目录，也可视为一个文件。</p><p>例：</p><p>@echo off for /r c:\\ %%i in (*.exe) do echo %%i pause</p><p>咱们把这个 BAT 保存到 D 盘随便哪里然后执行,我会就会看到,他把 C 盘根目录,和每个目录的子目录下面全部的 EXE 文件都列出来了!!!</p><p>例：</p><p>@echo off for /r %%i in (*.exe) do @echo %%i pause</p><p>参数不一样了吧!这个命令前面没加那个 C:\\也就是搜索路径,这样他就会以当前目录为搜索路径,比如你这个 BAT 你把他放在 d:\\test 目录下执行,那么他就会把 D:\\test 目录和他下面的子目录的全部 EXE 文件列出来!!!</p><p>例：</p><p>@echo off for /r c:\\ %%i in (boot.ini) do echo %%i pause</p><p>运行本例发现枚举了 c 盘所有目录，为了只列举 boot.ini 存在的目录，可改成下面这样：</p><p>@echo off for /r c:\\ %%i in (boot.ini) do if exist %%i echo %%i pause</p><p>用这条命令搜索文件真不错。。。。。。</p><p>这个参数大家应该理解了吧!还是满好玩的命令!</p><h3 id="四、参数-l" tabindex="-1">四、参数 /L <a class="header-anchor" href="#四、参数-l" aria-label="Permalink to &quot;四、参数 /L&quot;">​</a></h3><p>FOR /L %%variable IN (start,step,end) DO command [command-parameters] 该集表示以增量形式从开始到结束的一个数字序列。</p><p>因此，(1,1,5) 将产生序列 1 2 3 4 5，(5,-1,1) 将产生序列 (5 4 3 2 1)。</p><p>使 用迭代变量设置起始值 (Start#)，然后逐步执行一组范围的值，直到该值超过所设置的终止值 (End#)。/L 将通过对 Start# 与 End# 进行比较来执行迭代变量。如果 Start# 小于 End#，就会执行该命令。如果迭代变量超过 End#，则命令解释程序退出此循环。还可以使用负的 Step# 以递减数值的方式逐步执行此范围内的值。例如，(1,1,5) 生成序列 1 2 3 4 5，而 (5,-1,1) 则生成序列 (5 4 3 2 1)。语法是：</p><p>看着这说明有点晕吧!咱们看例子就不晕了!</p><p>@echo off for /l %%i in (1,1,5) do @echo %%i pause</p><p>保存执行看效果,他会打印从 1 2 3 4 5 这样 5 个数字</p><p>(1,1,5)这个参数也就是表示从 1 开始每次加 1 直到 5 终止!</p><p>等会晕,就打印个数字有 P 用…好的满足大家,看这个例子</p><p>@echo off for /l %%i in (1,1,5) do start cmd pause</p><p>执行后是不是吓了一跳,怎么多了 5 个 CMD 窗口,呵呵!如果把那个 (1,1,5)改成 (1,1,65535)会有什么结果,我先告诉大家,会打开 65535 个 CMD 窗口…这么多你不死机算你强!</p><p>当然我们也可以把那个 start cmd 改成 md %%i 这样就会建立指定个目录了!!!名字为 1-65535 看完这个被我赋予破坏性质的参数后,我们来看最后一个参数</p><h3 id="五、参数-f" tabindex="-1">五、参数 /F <a class="header-anchor" href="#五、参数-f" aria-label="Permalink to &quot;五、参数 /F&quot;">​</a></h3><p>\\迭代及文件解析</p><p>使用文件解析来处理命令输出、字符串及文件内容。使用迭代变量定义要检查的内容或字符串，并使用各种 options 选项进一步修改解析方式。使用 options 令牌选项指定哪些令牌应该作为迭代变量传递。请注意：在没有使用令牌选项时，/F 将只检查第一个令牌。</p><p>文件解析过程包括读取输出、字符串或文件内容，将其分成独立的文本行以及再将每行解析成零个或更多个令牌。然后通过设置为令牌的迭代变量值，调用 for 循环。默认情况下，/F 传递每个文件每一行的第一个空白分隔符号。跳过空行。</p><p>详细的帮助格式为：</p><p>FOR /F [“options”] %%variable IN (file-set) DO command [command-parameters] FOR /F [“options”] %%variable IN (“string”) DO command [command-parameters] FOR /F [“options”] %%variable IN (‘command’) DO command [command-parameters]</p><p>带引号的字符串&quot;options&quot;包括一个或多个</p><p>指定不同解析选项的关键字。这些关键字为:</p><p>eol=c - 指一个行注释字符的结尾(就一个)(备注：默认以使用；号为行首字符的为注释行) skip=n - 指在文件开始时忽略的行数，(备注：最小为 1，n 可以大于文件的总行数，默认为 1。)</p><p>delims=xxx - 指分隔符集。这个替换了空格和跳格键的默认分隔符集。</p><p>tokens=x,y,m-n - 指每行的哪一个符号被传递到每个迭代的 for 本身。这会导致额外变量名称的分配。m-n 格式为一个范围。通过 nth 符号指定 mth。如果符号字符串中的最后一个字符星号，那么额外的变量将在最后一个符号解析之后分配并接受行的保留文本。经测试，该参数最多只能区分 31 个字段。(备注：默认为 1，则表示只显示分割后的第一列的内容，最大是 31，超过最大则无法表示)</p><p>usebackq - 使用后引号(键盘上数字 1 左面的那个键）。 未使用参数 usebackq 时：file-set 表示文件，但不能含有空格 双引号表示字符串，即&quot;string&quot; 单引号表示执行命令，&#39;command&#39; 使用参数 usebackq 时：file-set 和&quot;file-set&quot;都表示文件 当文件路径或名称中有空格时，就可以用双引号括起来 单引号表示字符串，即&#39;string&#39; 后引号表示命令执行，即 command\`</p><p>以上是用 for /?命令获得的帮助信息，直接复制过来的，括号中的备注为我添加的说明。 晕惨了!我这就举个例子帮助大家来理解这些参数!</p><p>For 命令例 1：</p><p>@echo off rem 首先建立临时文件 test.txt echo ;注释行,这是临时文件,用完删除 &gt;test.txt echo 11 段 12 段 13 段 14 段 15 段 16 段 &gt;&gt;test.txt echo 21 段,22 段,23 段,24 段,25 段,26 段 &gt;&gt;test.txt echo 31 段-32 段-33 段-34 段-35 段-36 段 &gt;&gt;test.txt FOR /F &quot;eol=; tokens=1,3* delims=,- &quot; %%i in (test.txt) do echo %%i %%j %%k Pause Del test.txt</p><p>运行显示结果：</p><p>11 段 13 段 14 段 15 段 16 段 21 段 23 段 24 段,25 段,26 段 31 段 33 段 34 段-35 段-36 段 请按任意键继续. . . 为什么会这样?我来解释： eol=; 分号开头的行为注释行 tokens=1,3* 将每行第 1 段,第 3 段和剩余字段分别赋予变量%%i，%%j，%%k delims=,- (减号后有一空格）以逗号减号和空格为分隔符，空格必须放在最后</p><p>For 命令例 2：</p><p>@echo off FOR /F “eol= delims=” %%i in (test.txt) do echo %%i Pause</p><p>运行将显示 test.txt 全部内容，包括注释行，不解释了哈。</p><p>For 命令例 3：</p><p>另外/F 参数还可以以输出命令的结果看这个例子</p><p>@echo off FOR /F &quot;delims=&quot; %%i in (&#39;net user&#39;) do @echo %%i pause</p><p>这样你本机全部帐号名字就出来了把扩号内的内容用两个单引号引起来就表示那个当命令执行,FOR 会返回命令的每行结果,加那个&quot;delims=&quot; 是为了让我空格的行能整行显示出来,不加就只显示空格左边一列!</p><p>基本上讲完了 FOR 的基本用法了…如果你看过 FOR 的系统帮助,你会发现他下面还有一些特定义的变量,这些我先不讲.大家因该都累了吧!你不累我累啊…</p><p>所谓文武之道，一张一弛，现休息一下。</p><p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p><h2 id="第三章-for-命令中的变量" tabindex="-1">第三章 FOR 命令中的变量 <a class="header-anchor" href="#第三章-for-命令中的变量" aria-label="Permalink to &quot;第三章 FOR 命令中的变量&quot;">​</a></h2><p>FOR 命令中有一些变量,他们的用法许多新手朋友还不太了解,今天给大家讲解他们的用法!</p><p>先把 FOR 的变量全部列出来:</p><p>~I - 删除任何引号(&quot;)，扩展 %I %~fI - 将 %I 扩展到一个完全合格的路径名 %~dI - 仅将 %I 扩展到一个驱动器号 %~pI - 仅将 %I 扩展到一个路径 %~nI - 仅将 %I 扩展到一个文件名 %~xI - 仅将 %I 扩展到一个文件扩展名 %~sI - 扩展的路径只含有短名 %~aI - 将 %I 扩展到文件的文件属性 %~tI - 将 %I 扩展到文件的日期/时间 %~zI - 将 %I 扩展到文件的大小 %~$PATH:I - 查找列在路径环境变量的目录，并将 %I 扩展</p><p>到找到的第一个完全合格的名称。如果环境变量名未被定义，或者没有找到文件，此组合键会扩展到空字符串</p><p>我们可以看到每行都有一个大写字母&quot;I&quot;,这个 I 其实就是我们在 FOR 带入的变量,我们 FOR 语句代入的变量名是什么,这里就写什么.</p><p>比如:FOR /F %%z IN (‘set’) DO @echo %%z</p><p>这里我们代入的变量名是 z 那么我们就要把那个 I 改成 z,例如%fI 改为%fz</p><p>至于前面的%~p 这样的内容就是语法了!</p><p>好开始讲解:</p><h3 id="一、-i-删除任何引号-扩展-i" tabindex="-1">一、 ~I - 删除任何引号(&quot;)，扩展 %I <a class="header-anchor" href="#一、-i-删除任何引号-扩展-i" aria-label="Permalink to &quot;一、 ~I - 删除任何引号(&quot;)，扩展 %I&quot;">​</a></h3><p>这个变量的作用就如他的说明,删除引号!</p><p>我们来看这个例子:</p><p>首先建立临时文件 temp.txt，内容如下</p><p>“1111 “2222” 3333” &quot;4444&quot;44 &quot;55&quot;55&quot;55</p><p>可建立个 BAT 文件代码如下:</p><p>@echo off echo ^&quot;1111&gt;temp.txt echo &quot;2222&quot;&gt;&gt;temp.txt echo 3333^&quot;&gt;&gt;temp.txt echo &quot;4444&quot;44&gt;&gt;temp.txt echo ^&quot;55&quot;55&quot;55&gt;&gt;temp.txt</p><p>rem 上面建立临时文件，注意不成对的引号要加转义字符^，重定向符号前不要留空格</p><p>FOR /F &quot;delims=&quot; %%i IN (temp.txt) DO echo %%~i pause del temp.txt</p><p>执行后,我们看 CMD 的回显如下:</p><p>1111 #字符串前的引号被删除了 2222 #字符串首尾的引号都被删除了 3333&quot; #字符串前无引号，后面的引号保留 4444&quot;44 #字符串前面的引号删除了，而中间的引号保留 55&quot;55&quot;55 #字符串前面的引号删除了，而中间的引号保留 请按任意键继续. . .</p><p>和之前 temp.txt 中的内容对比一下,我们会发现第 1、2、5 行的引号都消失了,这就是删除引号~i 的作用了!</p><p>删除引号规则如下(BAT 兄补充!)</p><p>1、若字符串首尾同时存在引号，则删除首尾的引号； 2、若字符串尾不存在引号，则删除字符串首的引号； 3、如果字符串中间存在引号，或者只在尾部存在引号，则不删除。</p><p>龙卷风补充：无头不删，有头连尾删。</p><h3 id="二、-fi-将-i-扩展到一个完全合格的路径名" tabindex="-1">二、 %~fI - 将 %I 扩展到一个完全合格的路径名 <a class="header-anchor" href="#二、-fi-将-i-扩展到一个完全合格的路径名" aria-label="Permalink to &quot;二、 %~fI - 将 %I 扩展到一个完全合格的路径名&quot;">​</a></h3><p>看例子:</p><p>把代码保存放在随便哪个地方,我这里就放桌面吧.</p><p>FOR /F &quot;delims==&quot; %%i IN (&#39;dir /b&#39;) DO @echo %%~fi pause</p><p>执行后显示内容如下</p><p>C:\\Documents and Settings\\Administrator\\桌面\\test.bat C:\\Documents and Settings\\Administrator\\桌面\\test.vbs</p><p>当我把代码中的 %%~fi 直接改成%%i</p><p>FOR /F &quot;delims==&quot; %%i IN (&#39;dir /b&#39;) DO @echo %%i pause</p><p>执行后就会显示以下内容：</p><p>test.bat test.vbs</p><p>通过对比,我们很容易就看出没有路径了,这就是&quot;将 %I 扩展到一个完全合格的路径名&quot;的作用 也就是如果%i 变量的内容是一个文件名的话,他就会把这个文件所在的绝对路径打印出来,而不只单单打印一个文件名,自己动手动实验下就知道了!</p><h3 id="三、-di-仅将-i-扩展到一个驱动器号" tabindex="-1">三、 %~dI - 仅将 %I 扩展到一个驱动器号 <a class="header-anchor" href="#三、-di-仅将-i-扩展到一个驱动器号" aria-label="Permalink to &quot;三、 %~dI - 仅将 %I 扩展到一个驱动器号&quot;">​</a></h3><p>看例子:</p><p>代码如下,我还是放到桌面执行!</p><p>FOR /F &quot;delims==&quot; %%i IN (&#39;dir /b&#39;) DO @echo %%~di pause</p><p>执行后我 CMD 里显示如下</p><p>C: C:</p><p>我桌面就两个文件 test.bat,test.vbs,%%~di 作用是,如果变量%%i 的内容是一个文件或者目录名,他就会把他这文件</p><p>或者目录所在的盘符号打印出来!</p><h3 id="四、-pi-仅将-i-扩展到一个路径" tabindex="-1">四、 %~pI - 仅将 %I 扩展到一个路径 <a class="header-anchor" href="#四、-pi-仅将-i-扩展到一个路径" aria-label="Permalink to &quot;四、 %~pI - 仅将 %I 扩展到一个路径&quot;">​</a></h3><p>这个用法和上面一样,他只打印路径不打印文件名字</p><p>FOR /F &quot;delims==&quot; %%i IN (&#39;dir /b&#39;) DO @echo %%~pi pause</p><p>我就不打结果了,大家自己复制代码看结果吧,下面几个都是这么个用法,代码给出来,大家自己看结果吧!</p><h3 id="五、-ni-仅将-i-扩展到一个文件名" tabindex="-1">五、 %~nI - 仅将 %I 扩展到一个文件名 <a class="header-anchor" href="#五、-ni-仅将-i-扩展到一个文件名" aria-label="Permalink to &quot;五、 %~nI - 仅将 %I 扩展到一个文件名&quot;">​</a></h3><p>只打印文件名字</p><p>FOR /F &quot;delims==&quot; %%i IN (&#39;dir /b&#39;) DO @echo %%~ni pause</p><h3 id="六、-xi-仅将-i-扩展到一个文件扩展名" tabindex="-1">六、 %~xI - 仅将 %I 扩展到一个文件扩展名 <a class="header-anchor" href="#六、-xi-仅将-i-扩展到一个文件扩展名" aria-label="Permalink to &quot;六、 %~xI - 仅将 %I 扩展到一个文件扩展名&quot;">​</a></h3><p>只打印文件的扩展名</p><p>FOR /F &quot;delims==&quot; %%i IN (&#39;dir /b&#39;) DO @echo %%~xi pause</p><h3 id="七、-si-扩展的路径只含有短名" tabindex="-1">七、 %~sI - 扩展的路径只含有短名 <a class="header-anchor" href="#七、-si-扩展的路径只含有短名" aria-label="Permalink to &quot;七、 %~sI - 扩展的路径只含有短名&quot;">​</a></h3><p>打印绝对短文件名</p><p>FOR /F &quot;delims==&quot; %%i IN (&#39;dir /b&#39;) DO @echo %%~si pause</p><h3 id="八、-ai-将-i-扩展到文件的文件属性" tabindex="-1">八、 %~aI - 将 %I 扩展到文件的文件属性 <a class="header-anchor" href="#八、-ai-将-i-扩展到文件的文件属性" aria-label="Permalink to &quot;八、 %~aI - 将 %I 扩展到文件的文件属性&quot;">​</a></h3><p>打印文件的属性</p><p>FOR /F &quot;delims==&quot; %%i IN (&#39;dir /b&#39;) DO @echo %%~ai pause</p><h3 id="九、-ti-将-i-扩展到文件的日期-时间" tabindex="-1">九、 %~tI - 将 %I 扩展到文件的日期/时间 <a class="header-anchor" href="#九、-ti-将-i-扩展到文件的日期-时间" aria-label="Permalink to &quot;九、 %~tI - 将 %I 扩展到文件的日期/时间&quot;">​</a></h3><p>打印文件建立的日期</p><p>FOR /F &quot;delims==&quot; %%i IN (&#39;dir /b&#39;) DO @echo %%~ti pause</p><h3 id="十、-zi-将-i-扩展到文件的大小" tabindex="-1">十、 %~zI - 将 %I 扩展到文件的大小 <a class="header-anchor" href="#十、-zi-将-i-扩展到文件的大小" aria-label="Permalink to &quot;十、 %~zI - 将 %I 扩展到文件的大小&quot;">​</a></h3><p>打印文件的大小</p><p>FOR /F &quot;delims==&quot; %%i IN (&#39;dir /b&#39;) DO @echo %%~zi pause</p><p>上面例子中的&quot;delims==“可以改为&quot;delims=”，即不要分隔符</p><h3 id="十一、-path-i-查找列在路径环境变量的目录" tabindex="-1">十一、 %~$PATH:I - 查找列在路径环境变量的目录 <a class="header-anchor" href="#十一、-path-i-查找列在路径环境变量的目录" aria-label="Permalink to &quot;十一、 %~$PATH:I - 查找列在路径环境变量的目录&quot;">​</a></h3><p>并将 %I 扩展到找到的第一个完全合格的名称。如果环境变量名未被定义，或者没有找到文件，此组合键会扩展到空字符串</p><p>这是最后一个,和上面那些都不一样,我单独说说!</p><p>然后在把这些代码保存为批处理,放在桌面。</p><p>@echo off FOR /F &quot;delims=&quot; %%i IN (“notepad.exe”) DO echo %%~$PATH:i pause</p><p>龙卷风补充：上面代码显示结果为 C:\\WINDOWS\\system32\\notepad.exe</p><p>他的意思就在 PATH 变量里指定的路径里搜索 notepad.exe 文件，如果有 notepad.exe 则会把他所在绝对路径打印出来，没有就打印一个错误！</p><p>好了,FOR 的的变量就介绍到这了!</p><p>＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝</p><h2 id="第四章-批处理中的变量" tabindex="-1">第四章 批处理中的变量 <a class="header-anchor" href="#第四章-批处理中的变量" aria-label="Permalink to &quot;第四章 批处理中的变量&quot;">​</a></h2><p>批处理中的变量,我把他分为两类,分别为&quot;系统变量&quot;和&quot;自定义变量&quot;</p><p>我们现在来详解这两个变量!</p><h3 id="一、系统变量" tabindex="-1">一、系统变量 <a class="header-anchor" href="#一、系统变量" aria-label="Permalink to &quot;一、系统变量&quot;">​</a></h3><p>他们的值由系统将其根据事先定义的条件自动赋值,也就是这些变量系统已经给他们定义了值, 不需要我们来给他赋值,我们只需要调用而以! 我把他们全部列出来!</p><ul><li><p>%ALLUSERSPROFILE% 本地 返回“所有用户”配置文件的位置。</p></li><li><p>%APPDATA% 本地 返回默认情况下应用程序存储数据的位置。</p></li><li><p>%CD% 本地 返回当前目录字符串。</p></li><li><p>%CMDCMDLINE% 本地 返回用来启动当前的 Cmd.exe 的准确命令行。</p></li><li><p>%CMDEXTVERSION% 系统 返回当前的“命令处理程序扩展”的版本号。</p></li><li><p>%COMPUTERNAME% 系统 返回计算机的名称。</p></li><li><p>%COMSPEC% 系统 返回命令行解释器可执行程序的准确路径。</p></li><li><p>%DATE% 系统 返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关</p></li><li><p>date 命令的详细信息，请参阅 Date。</p></li><li><p>%ERRORLEVEL% 系统 返回上一条命令的错误代码。通常用非零值表示错误。</p></li><li><p>%HOMEDRIVE% 系统 返回连接到用户主目录的本地工作站驱动器号。基于主目录值而置。用户主目录是在“本地用户和组”中指定的。</p></li><li><p>%HOMEPATH% 系统 返回用户主目录的完整路径。基于主目录值而设置。用户主目录在“本地用户和组”中指定的。</p></li><li><p>%HOMESHARE% 系统 返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</p></li><li><p>%LOGONSERVER% 本地 返回验证当前登录会话的域控制器的名称。</p></li><li><p>%NUMBER_OF_PROCESSORS% 系统 指定安装在计算机上的处理器的数目。</p></li><li><p>%OS% 系统 返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。</p></li><li><p>%PATH% 系统 指定可执行文件的搜索路径。</p></li><li><p>%PATHEXT% 系统 返回操作系统认为可执行的文件扩展名的列表。</p></li><li><p>%PROCESSOR_ARCHITECTURE% 系统 返回处理器的芯片体系结构。值：x86 或 IA64 基于</p></li><li><p>Itanium</p></li><li><p>%PROCESSOR_IDENTFIER% 系统 返回处理器说明。</p></li><li><p>%PROCESSOR_LEVEL% 系统 返回计算机上安装的处理器的型号。</p></li><li><p>%PROCESSOR_REVISION% 系统 返回处理器的版本号。</p></li><li><p>%PROMPT% 本地 返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。</p></li><li><p>%RANDOM% 系统 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。</p></li><li><p>%SYSTEMDRIVE% 系统 返回包含 Windows server operating system 根目录(即系统根目录）的驱动器。</p></li><li><p>%SYSTEMROOT% 系统 返回 Windows server operating system 根目录的位置。</p></li><li><p>%TEMP% 和 %TMP% 系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。有些应用程序需要 TEMP，而其他应用程序则需要 TMP。</p></li><li><p>%TIME% 系统 返回当前时间。使用与 time /t 命令相同的格式。由 Cmd.exe 生成。有关</p></li><li><p>time 命令的详细信息，请参阅 Time。</p></li><li><p>%USERDOMAIN% 本地 返回包含用户帐户的域的名称。</p></li><li><p>%USERNAME% 本地 返回当前登录的用户的名称。</p></li><li><p>%USERPROFILE% 本地 返回当前用户的配置文件的位置。</p></li><li><p>%WINDIR% 系统 返回操作系统目录的位置。</p></li></ul><p>这么多系统变量,我们如何知道他的值是什么呢?</p><p>在 CMD 里输入 echo %WINDIR%</p><p>这样就能显示一个变量的值了!</p><p>举个实际例子,比如我们要复制文件到当前帐号的启动目录里就可以这样</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">copy</span><span style="color:#98C379;"> d:</span><span style="color:#56B6C2;">\\1</span><span style="color:#98C379;">.bat</span><span style="color:#98C379;"> &quot;%USERPROFILE%\\「开始」菜单\\程序\\启动</span><span style="color:#56B6C2;">\\&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>%USERNAME% 本地 返回当前登录的用户的名称。 注意有空格的目录要用引号引起来</p><p>另外还有一些系统变量,他们是代表一个意思,或者一个操作!</p><p>他们分别是%0 %1 %2 %3 %4 %5 …一直到%9 还有一个%*</p><p>%0 这个有点特殊,有几层意思,先讲%1-%9 的意思.</p><p>%1 返回批处理的第一个参数 %2 返回批处理的第二个参数 %3-%9 依此推类</p><p>反回批处理参数?到底怎么个返回法?</p><p>我们看这个例子,把下面的代码保存为 test.BAT 然后放到 C 盘下</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> %1</span><span style="color:#98C379;"> %2</span><span style="color:#98C379;"> %3</span><span style="color:#98C379;"> %4</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> %1</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> %2</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> %3</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> %4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>进入 CMD,输入 cd c: 然后输入 test.bat 我是第一个参数 我是第二个参数 我是第三个参数 我是第四个参数</p><p>注意中间的空格,我们会看到这样的结果:</p><p>我是第一个参数 我是第二个参数 我是第三个参数 我是第四个参数</p><p>我是第一个参数 我是第二个参数 我是第三个参数 我是第四个参数</p><p>对比下代码,%1 就是”我是第一个参数” %2 就是”我是第二个参数”</p><p>怎么样理解了吧!</p><p>这些%1 和%9 可以让批处理也能带参数运行,大大提高批处理功能!</p><p>还有一个%* 他是什么呢?他的作用不是很大,只是返回参数而已,不过他是一次返回全部参数的值,不用在输入%1 %2 来确定一个个的</p><p>例子</p><p>@echo off echo %*</p><p>同样保存为 test.bat 放到 C 盘</p><p>进入 CMD,输入 cd c:</p><p>然后输入 test.bat 我是第一个参数 我是第二个参数 我是第三个参数 我是第四个参数</p><p>可以看到他一次把全部参数都显示出来了</p><p>好现在开始讲那个比较特殊的%0</p><p>%0 这个不是返回参数的值了,他有两层意思!</p><p>第一层意思:返回批处理所在绝对路径</p><p>例子:</p><p>@echo off echo %0 pause</p><p>保存为 test.BAT 放在桌面运行,会显示如下结果</p><p>“C:\\Documents and Settings\\Administrator\\桌面\\test.bat”</p><p>他把当前批处理执行的所在路经打印出来了,这就是返回批处理所在绝对路径的意思</p><p>第二层意思:无限循环执行 BAT</p><p>例子:</p><p>@echo off net user %0</p><p>保存为 BAT 执行,他就会无限循环执行 net user 这条命令,直到你手动停止.</p><p>龙卷风补充：其实%0 就是第一参数%1 前面那个参数，当然就是批处理文件名(包括路径）。</p><p>以上就是批处理中的一些系统变量,另外还有一些变量,他们也表示一些功能,</p><p>FOR 命令中的那些就是,FOR 变量已经说过,就不讲了.</p><h3 id="二、自定义变量" tabindex="-1">二、自定义变量 <a class="header-anchor" href="#二、自定义变量" aria-label="Permalink to &quot;二、自定义变量&quot;">​</a></h3><p>故名思意,自定义变量就是由我们来给他赋予值的变量</p><p>要使用自定义变量就得使用 set 命令了,看例子.</p><p>@echo off set var=我是值 echo %var% pause</p><p>保存为 BAT 执行,我们会看到 CMD 里返回一个 “我是值”</p><p>var 为变量名,=号右变的是要给变量的值</p><p>这就是最简单的一种设置变量的方法了</p><p>如果我们想让用户手工输入变量的值,而不是在代码里指定,可以用用 set 命令的/p 参数</p><p>例子:</p><p>@echo off set /p var=请输入变量的值 echo %var% pause</p><p>var 变量名 =号右边的是提示语,不是变量的值</p><p>变量的值由我们运行后自己用键盘输入!</p><h4 id="一、交互界面设计" tabindex="-1">一、交互界面设计 <a class="header-anchor" href="#一、交互界面设计" aria-label="Permalink to &quot;一、交互界面设计&quot;">​</a></h4><p>没啥说的，看看高手设计的菜单界面吧：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">@echo</span><span style="color:#98C379;"> off</span></span>
<span class="line"><span style="color:#61AFEF;">cls</span></span>
<span class="line"><span style="color:#61AFEF;">title</span><span style="color:#98C379;"> 终极多功能修复</span></span>
<span class="line"><span style="color:#61AFEF;">:menu</span></span>
<span class="line"><span style="color:#61AFEF;">cls</span></span>
<span class="line"><span style="color:#61AFEF;">color</span><span style="color:#98C379;"> 0A</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">.</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">                 ==============================</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">                 请选择要进行的操作，然后按回车</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">                 ==============================</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">.</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">              1.网络修复及上网相关设置,修复IE,自定义屏蔽网站</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">.</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">              2.病毒专杀工具，端口关闭工具,关闭自动播放</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">.</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">              3.清除所有多余的自启动项目，修复系统错误</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">.</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">              4.清理系统垃圾,提高启动速度</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">.</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">              Q.退出</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">.</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">.</span></span>
<span class="line"><span style="color:#61AFEF;">:cho</span></span>
<span class="line"><span style="color:#56B6C2;">set</span><span style="color:#98C379;"> choice=</span></span>
<span class="line"><span style="color:#56B6C2;">set</span><span style="color:#98C379;"> /p</span><span style="color:#98C379;"> choice=</span><span style="color:#98C379;">          请选择:</span></span>
<span class="line"><span style="color:#61AFEF;">IF</span><span style="color:#98C379;"> NOT</span><span style="color:#98C379;"> &quot;%choice%&quot;==&quot;&quot;</span><span style="color:#98C379;"> SET</span><span style="color:#98C379;"> choice=%choice:~0,1%</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> /i</span><span style="color:#98C379;"> &quot;%choice%&quot;==&quot;1&quot;</span><span style="color:#98C379;"> goto</span><span style="color:#98C379;"> ip</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> /i</span><span style="color:#98C379;"> &quot;%choice%&quot;==&quot;2&quot;</span><span style="color:#98C379;"> goto</span><span style="color:#98C379;"> setsave</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> /i</span><span style="color:#98C379;"> &quot;%choice%&quot;==&quot;3&quot;</span><span style="color:#98C379;"> goto</span><span style="color:#98C379;"> kaiji</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> /i</span><span style="color:#98C379;"> &quot;%choice%&quot;==&quot;4&quot;</span><span style="color:#98C379;"> goto</span><span style="color:#98C379;"> clean</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#61AFEF;"> /i</span><span style="color:#98C379;"> &quot;%choice%&quot;==&quot;Q&quot;</span><span style="color:#98C379;"> goto</span><span style="color:#98C379;"> endd</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> 选择无效，请重新输入</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;">.</span></span>
<span class="line"><span style="color:#61AFEF;">goto</span><span style="color:#98C379;"> cho</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>只要学完本教程前面的章节，上面的程序应该能看懂了。</p><h4 id="二、if-else-条件语句" tabindex="-1">二、if…else…条件语句 <a class="header-anchor" href="#二、if-else-条件语句" aria-label="Permalink to &quot;二、if…else…条件语句&quot;">​</a></h4><p>前面已经谈到，DOS 条件语句主要有以下形式</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">IF</span><span style="color:#ABB2BF;"> [NOT] ERRORLEVEL number command</span></span>
<span class="line"><span style="color:#61AFEF;">IF</span><span style="color:#ABB2BF;"> [NOT] </span><span style="color:#E06C75;">string1</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">=string2</span><span style="color:#56B6C2;"> command</span></span>
<span class="line"><span style="color:#61AFEF;">IF</span><span style="color:#ABB2BF;"> [NOT] EXIST filename command</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>增强用法：IF [/I] string1 compare-op string2 command</p><p>增强用法中加上/I 就不区分大小写了!</p><p>增强用法中还有一些用来判断数字的符号：</p><p>EQU - 等于 NEQ - 不等于 LSS - 小于 LEQ - 小于或等于 GTR - 大于 GEQ - 大于或等于</p><p>上面的 command 命令都可以用小括号来使用多条命令的组合，包括 else 子句，组合命令中可以嵌套使用条件或循环命令。</p><p>例如:</p><p>IF EXIST filename ( del filename ) ELSE ( echo filename missing )</p><p>也可写成：</p><p>if exist filename (del filename) else (echo filename missing)</p><p>但这种写法不适合命令太多或嵌套命令的使用。注意：else 必须和 if 在同一行，或者和 if 最后的括号在同一行，如： …) ELSE (…。在括号那换行程序认为是一条语句。</p><h4 id="三、循环语句" tabindex="-1">三、循环语句 <a class="header-anchor" href="#三、循环语句" aria-label="Permalink to &quot;三、循环语句&quot;">​</a></h4><h5 id="_1、指定次数循环" tabindex="-1">1、指定次数循环 <a class="header-anchor" href="#_1、指定次数循环" aria-label="Permalink to &quot;1、指定次数循环&quot;">​</a></h5><p>FOR /L %variable IN (start,step,end) DO command [command-parameters]</p><p>组合命令：</p><p>FOR /L %variable IN (start,step,end) DO ( Command1 Command2 …… )</p><h5 id="_2、对某集合执行循环语句" tabindex="-1">2、对某集合执行循环语句 <a class="header-anchor" href="#_2、对某集合执行循环语句" aria-label="Permalink to &quot;2、对某集合执行循环语句&quot;">​</a></h5><p>FOR %%variable IN (set) DO command [command-parameters]</p><p>%%variable 指定一个单一字母可替换的参数。</p><p>(set) 指定一个或一组文件。可以使用通配符。</p><p>command 对每个文件执行的命令，可用小括号使用多条命令组合。</p><p>FOR /R [[drive:]path] %variable IN (set) DO command [command-parameters]</p><p>检查以 [drive:]path 为根的目录树，指向每个目录中的 FOR 语句。如果在 /R 后没有指定目录，则使用当前</p><p>1 2</p><p>目录。如果集仅为一个单点(.)字符，则枚举该目录树。</p><p>同前面一样，command 可以用括号来组合：</p><p>FOR /R [[drive:]path] %variable IN (set) DO ( Command1 Command2 …… commandn )</p><h5 id="_3、条件循环" tabindex="-1">3、条件循环 <a class="header-anchor" href="#_3、条件循环" aria-label="Permalink to &quot;3、条件循环&quot;">​</a></h5><p>上面的循环结构是用 for 命令来实现的，for 命令循环有一个缺点，就是整个循环被当作一条命令语句，涉及到变量延迟的问题。</p><p>利用 goto 语句和条件判断，dos 可以实现条件循环，很简单啦，看例子：</p><p>例：</p><p>@echo off set var=0 rem **********<strong>循环开始了 :continue set /a var+=1 echo 第%var%次循环 if %var% lss 100 goto continue rem *</strong>*********循环结束了 echo 循环执行完毕 pause</p><p>例：</p><p>@echo off set var=100 rem **********<strong>循环开始了 :continue echo 第%var%次循环 set /a var-=1 if %var% gtr 0 goto continue rem *</strong>*********循环结束了 echo 循环执行完毕 pause</p><h5 id="四、子程序" tabindex="-1">四、子程序 <a class="header-anchor" href="#四、子程序" aria-label="Permalink to &quot;四、子程序&quot;">​</a></h5><p>在批处理程序中可以调用外部可运行程序，比如 exe 程序，也可调用其他批处理程序，这些也可以看作子程序，但是不够方便，如果被调用的程序很多，就显得不够简明了，很繁琐。</p><p>在 windowsXP 中，批处理可以调用本程序中的一个程序段，相当于子程序，这些子程序一般放在主程序后面。</p><p>子程序调用格式：</p><p>CALL :label arguments</p><p>子程序语法： :label command1 command2 … commandn goto :eof</p><p>在子程序段中，参数%0 指标签:label</p><p>子过程一般放在最后，并且注意在主程序最后要加上 exit 或跳转语句，避免错误的进入子过程。</p><p>子程序和主程序中的变量都是全局变量，其作用范围都是整个批处理程序。</p><p>传至子程序的参数在 call 语句中指定，在子程序中用%1、%2 至%9 的形式调用，而子程序返回主程序的数据只需在调用结束后直接引用就可以了，当然也可以指定返回变量，请看下面的例子。</p><p>子程序例 1：</p><p>@echo off call :sub return echo 子程序返回值：%return% pause goto :eof</p><p>:sub set %1=你好 goto :eof</p><p>运行结果：你好</p><p>子程序例 2：设计一个求多个整数相加的子程序</p><p>@echo off set sum=0 call :sub 10 20 35 40 50 echo 数据求和结果：%sum% pause goto :eof</p><p>:sub rem 参数 1 为返回变量名称 set /a sum+=%1 shift /1 if not &quot;%1&quot;==&quot;&quot; goto sub goto :eof</p><p>运行结果：155</p><h4 id="五、用-ftp-命令实现自动下载" tabindex="-1">五、用 ftp 命令实现自动下载 <a class="header-anchor" href="#五、用-ftp-命令实现自动下载" aria-label="Permalink to &quot;五、用 ftp 命令实现自动下载&quot;">​</a></h4><p>ftp 是常用的下载工具，ftp 界面中有 40 多个常用命令，自己学习了，不介绍了。这里介绍如何用 dos 命令行调用 ftp 命令，实现 ftp 自动登录，并上传下载，并自动退出 ftp 程序。</p><p>其实可以将 ftp 命令组合保存为一个文本文件，然后用以下命令调用即可。</p><p>ftp -n -s:[[drive:]path]filename</p><p>上面的 filename 为 ftp 命令文件，包括登录 IP 地址，用户名、密码、操作命令等</p><p>例：</p><p>open 90.52.8.3 ＃打开 ip user iware ＃用户为 iware password8848 ＃密码 bin ＃二进制传输模式 prompt cd tmp1 ＃切换至 iware 用户下的 tmp1 目录 pwd lcd d:\\download ＃本地目录 mget * ＃下载 tmp1 目录下的所有文件 bye ＃退出 ftp</p><h4 id="六、用-7-zip-实现命令行压缩和解压功能" tabindex="-1">六、用 7-ZIP 实现命令行压缩和解压功能 <a class="header-anchor" href="#六、用-7-zip-实现命令行压缩和解压功能" aria-label="Permalink to &quot;六、用 7-ZIP 实现命令行压缩和解压功能&quot;">​</a></h4><p>语法格式：(详细情况见 7-zip 帮助文件，看得头晕可以跳过，用到再学）</p><p>7z [ …] &lt;base_archive_name&gt; […]</p><p>7z.exe 的每个命令都有不同的参数 ,请看帮助文件</p><p>&lt;base_archive_name&gt;为压缩包名称</p><p>为文件名称，支持通配符或文件列表</p><p>其中，7z 是至命令行压缩解压程序 7z.exe，是 7z.exe 包含的命令，列举如下：</p><p>a： Adds files to archive. 添加至压缩包 a 命令可用参数： -i (Include) -m (Method) -p (Set Password) -r (Recurse) -sfx (create SFX) -si (use StdIn) -so (use StdOut) -ssw (Compress shared files) -t (Type of archive) -u (Update) -v (Volumes) -w (Working Dir) -x (Exclude)</p><p>b： Benchmark d： Deletes files from archive. 从压缩包中删除文件 d 命令可用参数： -i (Include) -m (Method) -p (Set Password) -r (Recurse) -u (Update) -w (Working Dir) -x (Exclude)</p><p>e： Extract 解压文件至当前目录或指定目录 e 命令可用参数： -ai (Include archives) -an (Disable parsing of archive_name) -ao (Overwrite mode) -ax (Exclude archives) -i (Include) -o (Set Output Directory) -p (Set Password) -r (Recurse) -so (use StdOut) -x (Exclude) -y (Assume Yes on all queries)</p><p>l： Lists contents of archive. t： Test u： Update</p><p>x： eXtract with full paths 用文件的完整路径解压至当前目录或指定目录 x 命令可用参数： -ai (Include archives) -an (Disable parsing of archive_name) -ao (Overwrite mode) -ax (Exclude archives) -i (Include) -o (Set Output Directory) -p (Set Password) -r (Recurse) -so (use StdOut) -x (Exclude) -y (Assume Yes on all queries)</p><h4 id="七、调用-vbscript-程序" tabindex="-1">七、调用 VBScript 程序 <a class="header-anchor" href="#七、调用-vbscript-程序" aria-label="Permalink to &quot;七、调用 VBScript 程序&quot;">​</a></h4><p>使用 Windows 脚本宿主，可以在命令提示符下运行脚本。CScript.exe 提供了用于设置脚本属性的命令行开关。</p><p>用法：CScript 脚本名称 [脚本选项…] [脚本参数…]</p><p>选项：</p><p>//B 批模式：不显示脚本错误及提示信息 //D 启用 Active Debugging //E:engine 使用执行脚本的引擎 //H:CScript 将默认的脚本宿主改为 CScript.exe //H:WScript 将默认的脚本宿主改为 WScript.exe (默认） //I 交互模式(默认，与 //B 相对) //Job:xxxx 执行一个 WSF 工作 //Logo 显示徽标(默认） //Nologo 不显示徽标：执行时不显示标志 //S 为该用户保存当前命令行选项 //T:nn 超时设定秒：允许脚本运行的最长时间 //X 在调试器中执行脚本 //U 用 Unicode 表示来自控制台的重定向 I/O</p><p>“脚本名称”是带有扩展名和必需的路径信息的脚本文件名称，如</p><p>d:/admin/vbscripts/chart.vbs。</p><p>“脚本选项和参数”将传递给脚本。脚本参数前面有一个斜杠 (/)。每个参数都是可选的；但不能在未指定脚本名称的情况下指定脚本选项。如果未指定参数，则 CScript 将显示 CScript 语法和有效的宿主参数。</p><h4 id="八、将批处理转化为可执行文件" tabindex="-1">八、将批处理转化为可执行文件 <a class="header-anchor" href="#八、将批处理转化为可执行文件" aria-label="Permalink to &quot;八、将批处理转化为可执行文件&quot;">​</a></h4><p>由于批处理文件是一种文本文件，任何人都可以对其进行随便编辑，不小心就会把里面的命令破坏掉，所以如果将其转换成.com 格式的可执行文件，不仅执行效率会大大提高，而且不会破坏原来的功能，更能将优先级提到最高。Bat2Com 就可以完成这个转换工作。</p><p>小 知识：在 DOS 环境下，可执行文件的优先级由高到低依次为.com&gt;.exe&gt;.bat&gt;.cmd，即如果在同一目录下存在文件名相同 的这四类文件，当只键入文件名时，DOS 执行的是 name.com，如果需要执行其他三个文件，则必须指定文件的全名，如 name.bat。</p><p>这是一个只有 5.43K 大小的免费绿色工具，可以运行在纯 DOS 或 DOS 窗口的命令行中，用法：Bat2Com</p><p>FileName，这样就会在同一目录下生成一个名为 FileNme.com 的可执行文件，执行的效果和原来的.bat 文件一样。</p><h4 id="九、时间延迟" tabindex="-1">九、时间延迟 <a class="header-anchor" href="#九、时间延迟" aria-label="Permalink to &quot;九、时间延迟&quot;">​</a></h4><p>本条参考引用[英雄]教程</p><p>什么是时间延迟？顾名思义，就是执行一条命令后延迟一段时间再进行下一条命令。</p><p>延迟的应用见下节：“模拟进度条”。</p><h5 id="_1、利用-ping-命令延时" tabindex="-1">1、利用 ping 命令延时 <a class="header-anchor" href="#_1、利用-ping-命令延时" aria-label="Permalink to &quot;1、利用 ping 命令延时&quot;">​</a></h5><p>例：</p><p>@echo off echo 延时前：%time% ping /n 3 127.0.0.1 &gt;nul echo 延时后：%time% pause</p><p>解说：用到了 ping 命令的“/n”参数，表示要发送多少次请求到指定的 ip。本例中要发送 3 次请求到本机的 ip(127.0.0.1）。127.0.0.1 可简写为 127.1。“&gt;nul”就是屏蔽掉 ping 命令所显示的内容。</p><h5 id="_2、利用-for-命令延时" tabindex="-1">2、利用 for 命令延时 <a class="header-anchor" href="#_2、利用-for-命令延时" aria-label="Permalink to &quot;2、利用 for 命令延时&quot;">​</a></h5><p>例：</p><p>@echo off echo 延时前：%time% for /l %%i in (1,1,5000) do echo %%i&gt;nul echo 延时后：%time% pause</p><p>解说：原理很简单，就是利用一个计次循环并屏蔽它所显示的内容来达到延时的目的。</p><h5 id="_3、利用-vbs-延迟函数-精确度毫秒-误差-1000-毫秒内" tabindex="-1">3、利用 vbs 延迟函数，精确度毫秒，误差 1000 毫秒内 <a class="header-anchor" href="#_3、利用-vbs-延迟函数-精确度毫秒-误差-1000-毫秒内" aria-label="Permalink to &quot;3、利用 vbs 延迟函数，精确度毫秒，误差 1000 毫秒内&quot;">​</a></h5><p>例：</p><p>@echo off echo %time% call :delay 5000 echo %time% pause</p><p>exit :delay echo WScript.Sleep %1&gt;delay.vbs CScript //B delay.vbs del delay.vbs goto :eof</p><p>运行显示：</p><p>10:44:06.45 10:44:11.95 请按任意键继续. . .</p><p>上面的运行结果显示实际延时了 5500 毫秒，多出来的 500 毫秒时建立和删除临时文件所耗费的时间。误差在一秒之内。</p><h5 id="_4、仅用批处理命令实现任意时间延迟-精确度-10-毫秒-误差-50-毫秒内" tabindex="-1">4、仅用批处理命令实现任意时间延迟，精确度 10 毫秒，误差 50 毫秒内 <a class="header-anchor" href="#_4、仅用批处理命令实现任意时间延迟-精确度-10-毫秒-误差-50-毫秒内" aria-label="Permalink to &quot;4、仅用批处理命令实现任意时间延迟，精确度 10 毫秒，误差 50 毫秒内&quot;">​</a></h5><p>仅用批处理命令就可以实现延迟操作。</p><p>例：</p><p>@echo off set /p delay=请输入需延迟的毫秒数： set TotalTime=0 set NowTime=%time% ::读取起始时间，时间格式为：13:01:05.95 echo 程序开始时间：%NowTime% :delay_continue set /a minute1=1%NowTime:~3,2%-100 ::读取起始时间的分钟数 set /a second1=1%NowTime:~-5,2%%NowTime:~-2%0-100000 ::将起始时间的秒数转为毫秒 set NowTime=%time% set /a minute2=1%NowTime:~3,2%-100 :: 读取现在时间的分钟数 set /a second2=1%NowTime:~-5,2%%NowTime:~-2%0-100000 ::将现在时间的秒数转为毫秒 set /a TotalTime+=(%minute2%-%minute1%+60)%%60*60000+%second2%-%second1% if %TotalTime% lss %delay% goto delay_continue echo 程序结束时间：%time% echo 设定延迟时间：%delay%毫秒 echo 实际延迟时间：%TotalTime%毫秒 pause</p><p>运行显示：</p><p>请输入需延迟的毫秒数：6000 程序开始时间：15:32:16.37 程序结束时间：15:32:22.37 设定延迟时间：6000 毫秒 实际延迟时间：6000 毫秒 请按任意键继续. . .</p><p>实现原理：首先设定要延迟的毫秒数，然后用循环累加时间，直到累加时间大于等于延迟时间。</p><p>误差：windows 系统时间只能精确到 10 毫秒，所以理论上有可能存在 10 毫秒误差。</p><p>经测试，当延迟时间大于 500 毫秒时，上面的延迟程序一般不存在误差。当延迟时间小于 500 毫秒时，可能有几十毫秒误差，为什么？因为延迟程序本身也是有运行时间的，同时系统时间只能精确到 10 毫秒。</p><p>为了方便引用，可将上面的例子改为子程序调用形式：</p><p>@echo off echo 程序开始时间：%Time% call :delay 10 echo 实际延迟时间：%totaltime%毫秒 echo 程序结束时间：%time% pause exit</p><p>::-----------以下为延时子程序-------------------- :delay @echo off if &quot;%1&quot;==&quot;&quot; goto :eof set DelayTime=%1 set TotalTime=0 set NowTime=%time% ::读取起始时间，时间格式为：13:01:05.95 :delay_continue set /a minute1=1%NowTime:~3,2%-100 set /a second1=1%NowTime:~-5,2%%NowTime:~-2%0-100000 set NowTime=%time% set /a minute2=1%NowTime:~3,2%-100 set /a second2=1%NowTime:~-5,2%%NowTime:~-2%0-100000 set /a TotalTime+=(%minute2%-%minute1%+60)%%60*60000+%second2%-%second1% if %TotalTime% lss %DelayTime% goto delay_continue goto :eof</p><h4 id="十、模拟进度条" tabindex="-1">十、模拟进度条 <a class="header-anchor" href="#十、模拟进度条" aria-label="Permalink to &quot;十、模拟进度条&quot;">​</a></h4><p>下面给出一个模拟进度条的程序。如果将它运用在你自己的程序中，可以使你的程序更漂亮。</p><p>@echo off mode con cols=113 lines=15 &amp;color 9f cls echo. echo 程序正在初始化. . . echo. echo ┌──────────────────────────────────────┐ set/p= ■&lt;nul for /L %%i in (1 1 38) do set /p a=■&lt;nul&amp;ping /n 1 127.0.0.1&gt;nul echo 100%% echo └──────────────────────────────────────┘ pause</p><p>解说：“set /p a=■&lt;nul”的意思是：只显示提示信息“■”且不换行，也不需手工输入任何信息，这样可以使每个“■”在同一行逐个输出。“ping /n 0 127.1&gt;nul”是输出每个“■”的时间间隔，ping /n 0 表示不执行这个命令，所以会比 ping 出去的时间更短，也就是即每隔多少时间最短输出一个“■”。当然你也可以改为 1 或 2 或 3 等使时间延长</p><p>PS:上面的代码执行太快了，并且第一个出现的节奏和后面的不协调，我稍微修改了点，如下：</p><p>echo. echo ┌──────────────────────────────────────┐ ping 127.0.0.1 &gt;nul /n 1 &amp; set /p=&lt;nul for /L %%i in (1 1 39) do set /p a=■&lt;nul &amp; ping /n 1 127.0.0.1&gt;nul echo 100%% echo └──────────────────────────────────────┘ pause</p><h4 id="十一、特殊字符的输入及应用" tabindex="-1">十一、特殊字符的输入及应用 <a class="header-anchor" href="#十一、特殊字符的输入及应用" aria-label="Permalink to &quot;十一、特殊字符的输入及应用&quot;">​</a></h4><p>开始 -&gt; 运行 -&gt; 输入 cmd -&gt; edit -&gt; ctrl+p(意思是允许输入特殊字符）-&gt; 按 ctrl+a 将会显示笑脸图案。</p><p>(如果要继续输入特殊字符请再次按 ctrl+p，然后 ctrl+某个字母）</p><p>以上是特殊字符的输入方法，选自[英雄]教程，很管用的。也就是用编辑程序 edit 输入特殊字符，然后保存为一文本文件，再在 windows 下打开此文件，复制其中的特殊符号即可。</p><p>一些简单的特殊符号可以在 dos 命令窗口直接输入，并用重定向保存为文本文件。 例：</p><p>C:&gt;ECHO ^G&gt;temp.txt</p><p>“G”是用 Ctrl ＋ G 或 Alt ＋ 007 输入(按住 Alt 后，只能按小键盘的数字)，输入多个 G 可以产生多声鸣响。</p><p>特殊字符的应用也很有意思，这里仅举一例：退格键(输入方法：开始 -&gt; 运行 -&gt; 输入 cmd -&gt; edit -&gt; ctrl+p -&gt;退格键)</p><p>退格键表示删除左边的字符，此键不能在文档中正常输入，但可以通过 edit 编辑程序录入并复制出来。即“”。</p><p>利用退格键，配合空格覆盖，可以设计闪烁文字效果</p><p>例：文字闪烁，可以使用 Ctrl+C 组合键来强行终运行</p><p>@echo off :start set/p=床前明月光&lt;nul ::显示文字，光标停于行尾 ping -n 0 127.0.0.1&gt;nul ::设置延迟时间</p><p>set /p a=&lt;nul :: 输出一些退格符将光标置于该行的最左端(退格符的数量可以自己调整）。</p><p>ping -n 0 127.0.0.1&gt;nul ::设置延迟时间</p><p>set /p a= &lt;nul ::输出空格将之前输出的文字覆盖掉。</p><p>set /p a=&lt;nul ::再次输出退格符将光标置于该行的最左端，这里的退格符数量一定不能比前面的</p><p>空格数少，否则光标不能退到最左端。</p><p>ping -n 0 127.0.0.1&gt;nul ::设置延迟时间</p><p>goto start</p><p>解说：主要是利用 set 命令的/p，表示后等号面的字符都是提示字符，然后在用退格键，让光标置于该行的最左端，但是原来的文字还在，然后使用空格作为输入提示符，所以就会覆盖前面的文字，然后再次输出退格符将光标置于该行的最左端，循环执行。如果你把 ping 命令的次数改为 4，使延迟增长，就能看到光标的位置变化了。</p><p>例：输出唐诗一首，每行闪动多次</p><p>@echo off setlocal enabledelayedexpansion</p><p>set str=床前明月光 疑是地上霜 举头望明月 低头思故乡 ::定义字符串 str for %%i in (%str%) do ( rem 由于 str 中含有空格，则以空格为分隔符将 str 中的每一个部分依次赋给变量%%i。 set char=%%i echo. echo. for /l %%j in (0,1,5) do ( set/p=!char:~%%j,1!&lt;nul rem 依次取出变量 char 中的每一个字符，并显示。 ping -n 0 127.0.0.1&gt;nul rem 设置输出每个字符的时间延迟。 ) call :hero %%i ) pause&gt;nul exit</p><p>:hero for /l %%k in (1,1,10) do ( ping /n 0 127.0.0.1&gt;nul set /p a=&lt;nul set /p a= &lt;nul set /p a=&lt;nul ping /n 0 127.0.0.1&gt;nul set /p a=%1&lt;nul ) ::文字闪动 goto :eof</p><h4 id="十二、随机数-random-的应用技巧" tabindex="-1">十二、随机数(%random%）的应用技巧 <a class="header-anchor" href="#十二、随机数-random-的应用技巧" aria-label="Permalink to &quot;十二、随机数(%random%）的应用技巧&quot;">​</a></h4><p>%RANDOM% 系统变量 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。</p><p>2 的 15 次方等于 32768，上面的 0 ～ 32767 实际就是 15 位二进制数的范围。</p><p>那么，如何获取 100 以内的随机数呢？很简单，将%RANDOM%按 100 进行求余运算即可，见例子。</p><p>例：生成 5 个 100 以内的随机数</p><p>@echo off setlocal enabledelayedexpansion for /L %%i in (1 1 5) do ( set /a randomNum=!random!%%100 echo 随机数：!randomNum! ) pause</p><p>运行结果：(每次运行不一样） 随机数：91 随机数：67 随机数：58 随机数：26 随机数：20 请按任意键继续. . .</p><p>求余数运算 set /a randomNum=!random!%%100 中的 100 可以是 1 ～ 32768 之间的任意整数。</p><p>总结：利用系统变量%random%，求余数运算%%，字符串处理等，可以实现很多随机处理。</p><p>如何生成一定范围内的随机数？</p><p>通过上面的学习，我们知道，%random%可以产生 0 到 32767 之间的随机数，但是，如何才能得到一定范围内的随机数呢？</p><p>我们可以使用通用的算法公式如下：</p><p>通用的公式%random%%%(max-min+1)+min 来产生[min,max]区间里的随机数， 注：批处理中求模得用两个%%符号。</p><p>比如，我们想获得 4 到 12 之间的随机数，就可以这样来使用，代码如下：</p><p>@REM 产生 10 个[4,12]间的随机数</p><p>@echo off REM 启用延迟环境变量扩展 setlocal enabledelayedexpansion REM 设置随机数的最小和最大值以及求模用的变量 set min=4 set max=12 set /a mod=!max!-!min!+1</p><p>for /l %%i in (1,1,10) do ( REM 产生[min,max]之间的随机数 set /a r=!random!%%!mod!+!min! echo. echo 随机数%%i：!r!)</p><p>详细出处参考：<a href="http://www.jb51.net/article/36489.htm" target="_blank" rel="noreferrer">http://www.jb51.net/article/36489.htm</a></p><p>思考题目：生成给定位数的随机密码</p><p>解答思路：将 26 个英文字母或 10 数字以及其它特殊字符组成一个字符串，随机抽取其中的若干字符。</p><p>参考答案 1：(简单）</p><p>@echo off call :randomPassword 5 pass1 pass2 echo %pass1% %pass2% pause exit</p><p>:randomPassword ::---------生成随机密码 ::---------%1 为密码长度，%2 及以后为返回变量名称 ::---------for 命令最多只能区分 31 个字段 @echo off set password_len=%1 if not defined password_len goto :eof if %password_len% lss 1 goto :eof set wordset=a b c d e f g h i j k l m n o p q r s t u v w x y z set return= set num=0 :randomPassword1 set /a num+=1 set /a numof=%random%%%26+1 for /f &quot;tokens=%numof% delims= &quot; %%i in (&quot;%wordset%&quot;) do set return=%return%%%i if %num% lss %password_len% goto randomPassword1 if not &quot;%2&quot;==&quot;&quot; set %2=%return% shift /2 if not &quot;%2&quot;==&quot;&quot; goto randomPassword goto :eof</p><p>参考答案 2：(最优）</p><p>@echo off call :randomPassword 6 pass1 pass2 pass3 echo %pass1% %pass2% %pass3% pause exit</p><p>:randomPassword ::---------生成随机密码 ::---------%1 为密码长度，%2 及以后为返回变量名称 ::---------goto 循环、变量嵌套、命令嵌套 @echo off if &quot;%1&quot;==&quot;&quot; goto :eof if %1 lss 1 goto :eof set password<em>len=%1 set return= set wordset=abcdefghijklmnopqrstuvwxyz023456789</em> ::---------------------------循环 :randomPassword1 set /a numof=%random%%%36 ::---生成 0-35 之间的随即数 call set return=%return%%%wordset:~%numof%,1%% ::---在 wordset 变量中，从的随即生成的 0-35 的下一个取出一个字符 set /a password_len-=1 if %password_len% gtr 0 goto randomPassword1 ::---------------------------循环 if not &quot;%2&quot;==&quot;&quot; set %2=%return% shift /2 if not &quot;%2&quot;==&quot;&quot; goto randomPassword goto :eof</p><p>说明：本例涉及到变量嵌套和命令嵌套的应用，见后。</p><h4 id="十三、变量嵌套-与-命令嵌套" tabindex="-1">十三、变量嵌套 与 命令嵌套 <a class="header-anchor" href="#十三、变量嵌套-与-命令嵌套" aria-label="Permalink to &quot;十三、变量嵌套 与 命令嵌套&quot;">​</a></h4><p>和其它编程语言相比，dos 功能显得相对简单，要实现比较复杂的功能，需要充分运用各种技巧，变量嵌套与命令嵌套就是此类技巧之一。</p><p>先复习一下前面的“字符串截取”的关键内容：</p><p>截取功能统一语法格式为：%a:~[m[,n]]%</p><p>方括号表示可选，%为变量标识符，a 为变量名，不可少，冒号用于分隔变量名和说明部分，符号～可以简单理解为“偏移”即可，m 为偏移量(缺省为 0），n 为截取长度(缺省为全部）。</p><p>百分号如果需要当成单一字符，必须写成%%</p><p>以上是 dos 变量处理的通用格式，如果其中的 m、n 为变量，那么这种情况就是变量嵌套了。</p><p>比如设变量 word 为“abcdefghij”，变量 num 为“123456789”</p><p>%word:4,1%为 e，其中 4 可以从变量 num 中取值，即%num:3,1%，写成组合形式如下：</p><p>%word:%num:3,1%,1% 经测试这种写法不能正确执行，写成%word:(%num:3,1%),1%同样不行，那么，怎么实现这种变量嵌套呢？这就必须结合命令嵌套。</p><p>什么是命令嵌套呢？简单的说，首先用一条 dos 命令生成一个字符串，而这个字符串是另一条 dos 命令，用 call 语句调用字符串将其执行，从而得到最终结果。</p><p>例：用 call 语句实现命令嵌套</p><p>@echo off set str1=aaa echo ok bbb echo 初始字符串：%str1% echo 生成命令字符串如下： echo %str1:~4,7% echo 运行命令字符串生成最终结果为： call %str1:~4,7% pause</p><p>运行显示：</p><p>初始字符串：aaa echo ok bbb</p><p>生成命令字符串如下：</p><p>echo ok</p><p>运行命令字符串生成最终结果为：</p><p>ok</p><p>请按任意键继续. . .</p><h2 id="常见用法" tabindex="-1">常见用法 <a class="header-anchor" href="#常见用法" aria-label="Permalink to &quot;常见用法&quot;">​</a></h2><h3 id="_1-设置临时环境变量" tabindex="-1">1. 设置临时环境变量 <a class="header-anchor" href="#_1-设置临时环境变量" aria-label="Permalink to &quot;1. 设置临时环境变量&quot;">​</a></h3><blockquote><p>在命令行模式下设置的环境变量，属于临时环境变量，只针对当前的 CMD 命令窗口有效，并不影响其他窗口中的环境变量，更不会影响到永久性的环境变量，要设置永久的环境变量，需要通过图形操作修改。</p></blockquote><p>CMD</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">set</span><span style="color:#98C379;"> path=%path%</span><span style="color:#ABB2BF;">;</span><span style="color:#61AFEF;">C:\\test</span><span style="color:#98C379;">  ::在原有环境变量的基础上追加环境变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>PowerShell</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">$env</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">path</span><span style="color:#C678DD;">+=</span><span style="color:#98C379;">&quot;C:\\test&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-启动-cmd-执行命令" tabindex="-1">2. 启动 CMD 执行命令 <a class="header-anchor" href="#_2-启动-cmd-执行命令" aria-label="Permalink to &quot;2. 启动 CMD 执行命令&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">start</span><span style="color:#98C379;"> cmd</span><span style="color:#98C379;"> /k</span><span style="color:#98C379;">    ::启动一个CMD且不关闭CMD</span></span>
<span class="line"><span style="color:#61AFEF;">start</span><span style="color:#98C379;"> cmd</span><span style="color:#98C379;"> /c</span><span style="color:#98C379;">    ::启动一个CMD且关闭CMD</span></span>
<span class="line"><span style="color:#61AFEF;">start</span><span style="color:#98C379;"> cmd</span><span style="color:#98C379;"> /k</span><span style="color:#98C379;">  &quot;命令1 &amp; 命令2 &amp; 命令3&quot;</span><span style="color:#98C379;">     ::无论前面命令是否成功,</span><span style="color:#98C379;"> 后面都会执行</span></span>
<span class="line"><span style="color:#61AFEF;">start</span><span style="color:#98C379;"> cmd</span><span style="color:#98C379;"> /k</span><span style="color:#98C379;"> &quot;命令1 &amp;&amp; 命令2 &amp;&amp; 命令3 &quot;</span><span style="color:#98C379;">   ::仅当前面命令成功时,</span><span style="color:#98C379;"> 才执行后面,一般用这个</span></span>
<span class="line"><span style="color:#61AFEF;">start</span><span style="color:#98C379;"> cmd</span><span style="color:#98C379;"> /k</span><span style="color:#98C379;"> &quot;命令1 || 命令2 || 命令3&quot;</span><span style="color:#98C379;">    ::仅当前面命令失败时.</span><span style="color:#98C379;"> 才执行后面</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-打开环境变量窗口" tabindex="-1">3. 打开环境变量窗口 <a class="header-anchor" href="#_3-打开环境变量窗口" aria-label="Permalink to &quot;3. 打开环境变量窗口&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">rundll32</span><span style="color:#98C379;"> sysdm.cpl,EditEnvironmentVariables</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,579)]))}const F=n(c,[["render",i]]);export{C as __pageData,F as default};
