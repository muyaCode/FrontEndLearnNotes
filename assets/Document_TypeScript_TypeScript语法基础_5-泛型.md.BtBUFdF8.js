import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/image-20240214155322216.DOME4Kcz.png",A=JSON.parse('{"title":"5-泛型","description":"","frontmatter":{},"headers":[],"relativePath":"Document/TypeScript/TypeScript语法基础/5-泛型.md","filePath":"Document/TypeScript/TypeScript语法基础/5-泛型.md","lastUpdated":1750954157000}'),e={name:"Document/TypeScript/TypeScript语法基础/5-泛型.md"};function r(c,s,t,B,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_5-泛型" tabindex="-1">5-泛型 <a class="header-anchor" href="#_5-泛型" aria-label="Permalink to &quot;5-泛型&quot;">​</a></h1><p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性</p><ul><li>特点一：定义时不明确使用时必须明确成某种具体数据类型的数据类型。【泛型的宽泛】</li><li>特点二：编译期间进行数据类型检查的数据类型。【泛型的严谨】</li></ul><p>泛型 <code>T</code> 作用域只限于函数内部使用</p><h2 id="引子" tabindex="-1">引子 <a class="header-anchor" href="#引子" aria-label="Permalink to &quot;引子&quot;">​</a></h2><p>下面创建一个函数，实现功能：根据指定的数量 <code>count</code> 和数据 <code>value</code> ，创建一个包含 <code>count</code> 个 <code>value</code> 的数组。</p><h3 id="不用泛型的话-这个函数可能是下面这样" tabindex="-1">不用泛型的话，这个函数可能是下面这样 <a class="header-anchor" href="#不用泛型的话-这个函数可能是下面这样" aria-label="Permalink to &quot;不用泛型的话，这个函数可能是下面这样&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[] {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> arr</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createArray</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createArray</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;aa&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr1</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">toFixed</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="使用泛型函数" tabindex="-1">使用泛型函数 <a class="header-anchor" href="#使用泛型函数" aria-label="Permalink to &quot;使用泛型函数&quot;">​</a></h3><p>&lt;&gt;里面的内容，可以任意大写字母，写 ”T“ 是习惯和规范</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createArray2</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> arr</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用的时候再指定类型，&lt;&gt;里面的类型对应T</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr3</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createArray2</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr3</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">toFixed</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(arr3[0].split(&#39;&#39;))</span><span style="color:#7F848E;font-style:italic;"> // error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用的时候再指定类型，&lt;&gt;里面的类型对应T</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr4</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createArray2</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;aa&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr4</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(arr4[0].toFixed())</span><span style="color:#7F848E;font-style:italic;"> // error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="多个泛型参数的函数" tabindex="-1">多个泛型参数的函数 <a class="header-anchor" href="#多个泛型参数的函数" aria-label="Permalink to &quot;多个泛型参数的函数&quot;">​</a></h2><p>一个函数可以定义多个泛型参数</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> swap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">): [</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">] {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> swap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">toFixed</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>实现一个函数 createArray，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">length</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createArray</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;x&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>使用了泛型</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createArray</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">length</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createArray2</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;x&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="类数组" tabindex="-1">类数组 <a class="header-anchor" href="#类数组" aria-label="Permalink to &quot;类数组&quot;">​</a></h2><ul><li>类数组（Array-like Object）不是数组类型，比如 <code>arguments</code></li><li>使用IArguments ，需要在typescript.json文件中配置：&quot;lib&quot;:[&quot;dom&quot;, dom.iterable&quot;, &quot;es2015&quot;, &quot;es5&quot;]</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sum</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">IArguments</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> args</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 数据绑定元素</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> root</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> children</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HTMLCollection</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">root</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> HTMLElement</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> nodeList</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">NodeList</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">root</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> HTMLElement</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">childNodes</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">nodeList</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="泛型类" tabindex="-1">泛型类 <a class="header-anchor" href="#泛型类" aria-label="Permalink to &quot;泛型类&quot;">​</a></h2><p>在定义类时，为类中的属性或方法定义泛型类型</p><p>在创建类的实例时，再指定特定的泛型类型</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> GenericNumber</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">  zeroValue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span></span>
<span class="line"><span style="color:#61AFEF;">  add</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> T</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myGenericNumber</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> GenericNumber</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;()</span></span>
<span class="line"><span style="color:#E5C07B;">myGenericNumber</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">zeroValue</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#E5C07B;">myGenericNumber</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myGenericString</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> GenericNumber</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;()</span></span>
<span class="line"><span style="color:#E5C07B;">myGenericString</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">zeroValue</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;abc&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">myGenericString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">myGenericString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">myGenericString</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">zeroValue</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">myGenericNumber</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">myGenericNumber</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">zeroValue</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="泛型与-new" tabindex="-1">泛型与 new <a class="header-anchor" href="#泛型与-new" aria-label="Permalink to &quot;泛型与 new&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> factory</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">: {</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;">():</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">}): </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> type</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// This expression is not constructable.</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="泛型约束" tabindex="-1">泛型约束 <a class="header-anchor" href="#泛型约束" aria-label="Permalink to &quot;泛型约束&quot;">​</a></h2><p>如果我们直接对一个泛型参数取 <code>length</code> 属性, 会报错, 因为这个泛型根本就不知道它有这个属性</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 没有泛型约束</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // console.log(x.length)</span><span style="color:#7F848E;font-style:italic;">  // error</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>我们可以使用泛型约束来实现</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Lengthwise</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  length</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 指定泛型约束</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn2</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Lengthwise</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们需要传入符合约束类型的值，必须包含必须 <code>length</code> 属性：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fn2</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// fn2(123)</span><span style="color:#7F848E;font-style:italic;"> // error  number没有length属性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Vue3源码的泛型约束：<a href="https://github.com/vuejs/core/blob/272ab9fbdcb1af0535108b9f888e80d612f9171d/packages/reactivity/src/ref.ts#L96" target="_blank" rel="noreferrer">core/packages/reactivity/src/ref.ts at 272ab9fbdcb1af0535108b9f888e80d612f9171d · vuejs/core (github.com)</a></p><p>搜索：ObjectRefImpl</p><h2 id="泛型接口" tabindex="-1">泛型接口 <a class="header-anchor" href="#泛型接口" aria-label="Permalink to &quot;泛型接口&quot;">​</a></h2><p>在函数中使用泛型的时候，由于预先并不知道泛型的类型，所以不能随意访问相应类型的属性或方法。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> logger</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 直接访问会报错</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以让泛型继承一个接口</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> LengthWise</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    length</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以让泛型继承一个接口</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> logger2</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> LengthWise</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">val</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">logger2</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">logger2</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在定义接口时，为接口中的属性或方法定义泛型类型</p><p>在使用接口时，再指定具体的泛型类型</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> IbaseCRUD</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">  data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[]</span></span>
<span class="line"><span style="color:#61AFEF;">  add</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">t</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span></span>
<span class="line"><span style="color:#61AFEF;">  getById</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> T</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#7F848E;font-style:italic;"> // id主键自增</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#7F848E;font-style:italic;"> // 姓名</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#7F848E;font-style:italic;"> // 年龄</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> UserCRUD</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> IbaseCRUD</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">  data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">user</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">() }</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;保存user&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  getById</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> userCRUD</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> UserCRUD</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">userCRUD</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> User</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;tom&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">userCRUD</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> User</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;tom2&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">userCRUD</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>泛型接口可以用来约束函数</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Calculate</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">T</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Calculate</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="多个类型参数" tabindex="-1">多个类型参数 <a class="header-anchor" href="#多个类型参数" aria-label="Permalink to &quot;多个类型参数&quot;">​</a></h3><p>泛型可以有多个</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> swap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">tuple</span><span style="color:#ABB2BF;">:[</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">]):[</span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">]{</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">tuple</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">],</span><span style="color:#E06C75;">tuple</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> swapped</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> swap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;([</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">swapped</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">swapped</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">toFixed</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">swapped</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="默认泛型类型" tabindex="-1">默认泛型类型 <a class="header-anchor" href="#默认泛型类型" aria-label="Permalink to &quot;默认泛型类型&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createArray3</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> number</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">length</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    result</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createArray3</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;x&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="compose" tabindex="-1">compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;compose&quot;">​</a></h2><p>示例：<a href="https://gitee.com/zhufengpeixun/redux/blob/master/src/compose.ts" target="_blank" rel="noreferrer">compose.ts</a></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> compose</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;.&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* zero functions */</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">compose</span><span style="color:#ABB2BF;">()&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&quot;zhufeng&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* one functions */</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> F</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> f</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">F</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">string</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&#39;f&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">compose</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">)(</span><span style="color:#98C379;">&quot;zhufeng&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* two functions */</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> A</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> R</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> f1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">R</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;f1&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> f2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">A</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;f2&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">compose</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">f1</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">f2</span><span style="color:#ABB2BF;">)(</span><span style="color:#98C379;">&quot;zhufeng&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="泛型类型别名" tabindex="-1">泛型类型别名 <a class="header-anchor" href="#泛型类型别名" aria-label="Permalink to &quot;泛型类型别名&quot;">​</a></h2><p>泛型类型别名可以表达更复杂的类型</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Cart</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[] } | </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Cart</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">] };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Cart</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="泛型keyof映射属性" tabindex="-1">泛型keyof映射属性 <a class="header-anchor" href="#泛型keyof映射属性" aria-label="Permalink to &quot;泛型keyof映射属性&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  gender</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type NAME = &#39;name&#39;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// key: &#39;name&#39;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person[&#39;name&#39;];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type T = &#39;age&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// key: &#39;age&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person[&#39;age&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// type T = &#39;gender&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// key: &#39;gender&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Person[&#39;gender&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Teacher</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#E06C75;font-style:italic;"> info</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // keyof关键字映射接口Person的的key</span></span>
<span class="line"><span style="color:#61AFEF;">  getInfo</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">] {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> teacher</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Teacher</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;dell&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;male&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> test</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> teacher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInfo</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="泛型接口-vs-泛型类型别名" tabindex="-1">泛型接口 vs 泛型类型别名 <a class="header-anchor" href="#泛型接口-vs-泛型类型别名" aria-label="Permalink to &quot;泛型接口 vs 泛型类型别名&quot;">​</a></h2><ul><li>接口创建了一个新的名字，它可以在其他任意地方被调用。而类型别名并不创建新的名字，例如报错信息就不会使用别名</li><li>类型别名不能被 extends和 implements,这时我们应该尽量使用接口代替类型别名</li><li>当我们需要使用联合类型或者元组类型的时候，类型别名会更合适</li></ul><h2 id="泛型晋级——函数重载" tabindex="-1">泛型晋级——函数重载 <a class="header-anchor" href="#泛型晋级——函数重载" aria-label="Permalink to &quot;泛型晋级——函数重载&quot;">​</a></h2><h3 id="函数重载" tabindex="-1">函数重载 <a class="header-anchor" href="#函数重载" aria-label="Permalink to &quot;函数重载&quot;">​</a></h3><p>不同参数列表的和返回值无关并且具有一个实现签名和一个或多个重载签名的多个函数</p><p>函数重置例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 重载签名</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> searchMsg</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">condition</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">MessageType</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Message</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> searchMsg</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">condition</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Message</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现签名</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> searchMsg</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">condition</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">MessageType</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Message</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Message</span><span style="color:#ABB2BF;">[] {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> condition</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;number&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> messages</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> condition</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> msg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> messages</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> condition</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> msg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>类似于vue3源码的下面的代码：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 重载签名</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">UnwrapRef</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt;(): </span><span style="color:#E5C07B;">Ref</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现签名</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> ref</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#61AFEF;"> createRef</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="泛型函数重载" tabindex="-1">泛型函数重载 <a class="header-anchor" href="#泛型函数重载" aria-label="Permalink to &quot;泛型函数重载&quot;">​</a></h3><h4 id="泛型函数和它的真实应用" tabindex="-1">泛型函数和它的真实应用 <a class="header-anchor" href="#泛型函数和它的真实应用" aria-label="Permalink to &quot;泛型函数和它的真实应用&quot;">​</a></h4><p>准备知识：快速排序法</p><p>快速排序法的思想</p><ul><li>1.先从数列中取出一个数作为基准数。</li><li>2.分区过程，将比这个数大的数全放到它的右边，小于它的数全放到它的左边。</li><li>3.再对左右区间重复第二步，直到各区间只有一个数。</li></ul><p><img src="`+o+`" alt="image-20240214155322216"></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> strResult</span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;">quickSort</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">strArr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="泛型函数重载-1" tabindex="-1">泛型函数重载 <a class="header-anchor" href="#泛型函数重载-1" aria-label="Permalink to &quot;泛型函数重载&quot;">​</a></h4><p>经典复杂排序器</p><p>泛型函数重载准备:</p><ul><li>1.中文排序</li><li>2.字符串自排序</li><li>3.中文+英文、数字数组排序</li><li>4.中文+英文、数字数组 + 数组内部字符串自排序</li><li>5.字符串自排序 +中文+英文、数字数组+数组内部字符串自排序</li><li>素材：<code>var pattern1 = /[ u4e00- u9fa5]+/g</code></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">quickSort</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;.dd&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> chineseArr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;武汉&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;石家庄&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;郑州&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;太原&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;济南&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;沈阳&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;大连&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;青岛&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 中文排序</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sortChinese</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;): </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">preStr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">curstr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> prestr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">localeCompare</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">curstr</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;zh-CN&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> arr</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sortChinese</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">chineseArr</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断是否是中文</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> pattern1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#D19A66;">[\\u4e00-\\u9fa5]+</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isChinese</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;):</span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> pattern1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#D19A66;">[\\u4e00-\\u9fa5]+</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> chineseArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">some</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> pattern</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 字符串的自排序</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> strSelfSort</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> strArr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> strSortArr</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> quickSort</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">strArr</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> strSortArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">strSelfSort</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;xssdsfebzcjd&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结合排序</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> sort</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">undefined</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isChinese</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)){</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> sortChinese</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> quickSort</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;">===</span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> strSelfSort</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sczxbd&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h4 id="泛型工厂函数类型和拓展知识" tabindex="-1">泛型工厂函数类型和拓展知识 <a class="header-anchor" href="#泛型工厂函数类型和拓展知识" aria-label="Permalink to &quot;泛型工厂函数类型和拓展知识&quot;">​</a></h4><p>泛型工厂函数类型定义：可以代表任意一个类构造函数的函数类型</p><p>代码：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> CommercialBank</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E06C75;"> address</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;beijing&quot;</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;wangwu&quot;</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">address</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">address</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> address</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    loan</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot; 银行贷款&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// new 实例化后的类型</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ConstructorTyp</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> CommercialBank</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用interface接口写法</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> ConstrutorInter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    new</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">any</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 构造函数类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// let CommercialBankInstance: ConstructorTyp = CommercialBank</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const cbInstance = new CommercialBankInstance(&quot;wangwu&quot;,</span></span>
<span class="line"><span style="color:#98C379;">&quot;tianjin&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// cbInstance.loan()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 泛型工厂函数类型的应用</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createFactoryConstructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">constructorTyp</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">new</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span><span style="color:#E5C07B;">args</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">constructorTyp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;">&quot;被创建...&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">	new</span><span style="color:#61AFEF;"> constructorTyp</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">createFactoryConstructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CommercialBank</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通用交叉合并的方法</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div>`,82)]))}const C=n(e,[["render",r]]);export{A as __pageData,C as default};
