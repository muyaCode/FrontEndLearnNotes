import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"10.类型声明","description":"","frontmatter":{},"headers":[],"relativePath":"Document/TypeScript/TypeScript语法基础/10-类型声明.md","filePath":"Document/TypeScript/TypeScript语法基础/10-类型声明.md","lastUpdated":1750954157000}'),e={name:"Document/TypeScript/TypeScript语法基础/10-类型声明.md"};function o(r,s,t,c,i,B){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_10-类型声明" tabindex="-1">10.类型声明 <a class="header-anchor" href="#_10-类型声明" aria-label="Permalink to &quot;10.类型声明&quot;">​</a></h1><h2 id="为什么要用声明文件" tabindex="-1">为什么要用声明文件 <a class="header-anchor" href="#为什么要用声明文件" aria-label="Permalink to &quot;为什么要用声明文件&quot;">​</a></h2><p>(1)如果文件使用 TS 编写，在编译成S 文件时可以自动生成声明文件，并在发布的时候将.d.ts 文件一起发布，我们无需编写声明文件。</p><p>(2)当我们在 TS 文件中引入使用第三方库的类型或使用 集成库 时，比: axs 库，ES6 库的 Map 型 ，这些用 开发，不能获取 TS 一样的 举型提示，需要一个声明文件来帮助库的使用者来获取库的类型提示。</p><p>声明文件中只对类型定义，不能进行赋值和实现</p><h2 id="定义和使用声明文件" tabindex="-1">定义和使用声明文件 <a class="header-anchor" href="#定义和使用声明文件" aria-label="Permalink to &quot;定义和使用声明文件&quot;">​</a></h2><ul><li>声明文件可以让我们不需要将typescript重构为TS，只需要加上声明文件就可以使用系统</li><li>类型声明在编译的时候都会被删除，不会影响真正的代码</li><li>关键字 declare 表示声明的意思，我们可以用它来做出各种声明:</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> var</span><span style="color:#ABB2BF;">/</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">const</span><span style="color:#7F848E;font-style:italic;"> // 声明全局变量</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> function</span><span style="color:#7F848E;font-style:italic;"> // 声明全局方法</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> class</span><span style="color:#7F848E;font-style:italic;"> // 声明全局类</span></span>
<span class="line"><span style="color:#E5C07B;">declare</span><span style="color:#E5C07B;"> enum</span><span style="color:#7F848E;font-style:italic;"> // 声明全局枚举类型</span></span>
<span class="line"><span style="color:#E5C07B;">declare</span><span style="color:#E5C07B;"> namespace</span><span style="color:#7F848E;font-style:italic;"> // 声明(含有子属性的)全局对象</span></span>
<span class="line"><span style="color:#E5C07B;">interface</span><span style="color:#ABB2BF;">/</span><span style="color:#E5C07B;">type</span><span style="color:#7F848E;font-style:italic;"> // 声明全局类型</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_12-1-普通类型声明" tabindex="-1">12.1 普通类型声明 <a class="header-anchor" href="#_12-1-普通类型声明" aria-label="Permalink to &quot;12.1 普通类型声明&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">//变量</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">//变量</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> getName</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">//方法</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> }  </span><span style="color:#7F848E;font-style:italic;">//类</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Animal</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>声明jQuery对象</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> $</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">selector</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">//变量</span></span>
<span class="line"><span style="color:#61AFEF;">    click</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    width</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">length</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#root&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#root&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_12-2-外部枚举" tabindex="-1">12.2 外部枚举 <a class="header-anchor" href="#_12-2-外部枚举" aria-label="Permalink to &quot;12.2 外部枚举&quot;">​</a></h2><ul><li>外部枚举是使用<code>declare enum</code>定义的枚举类型</li><li>外部枚举用来描述已经存在的枚举类型的形状</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> Seasons</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    Spring</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    Summer</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    Autumn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    Winter</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> seasons</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Spring</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Summer</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Autumn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Winter</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>declare</code> 定义的类型只会用于编译时的检查，编译结果中会被删除。上例的编译结果如下</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> seasons</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Spring</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Summer</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Autumn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Winter</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>也可以同时使用<code>declare</code> 和 <code>const</code></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> const</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> Seasons</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    Spring</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    Summer</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    Autumn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    Winter</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> seasons</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Spring</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Summer</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Autumn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Seasons</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Winter</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>编译结果</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> seasons</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#D19A66;">    0</span><span style="color:#7F848E;font-style:italic;"> /* Spring */</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">    1</span><span style="color:#7F848E;font-style:italic;"> /* Summer */</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">    2</span><span style="color:#7F848E;font-style:italic;"> /* Autumn */</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">    3</span><span style="color:#7F848E;font-style:italic;"> /* Winter */</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_12-3-namespace命名空间" tabindex="-1">12.3 namespace命名空间 <a class="header-anchor" href="#_12-3-namespace命名空间" aria-label="Permalink to &quot;12.3 namespace命名空间&quot;">​</a></h2><ul><li>如果一个全局变量包括了很多子属性，可能使用namespace</li><li>在声明文件中的<code>namespace</code>表示一个全局变量包含很多子属性</li><li>在命名空间内部不需要使用 declare 声明属性或方法</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> namespace</span><span style="color:#E5C07B;"> $</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">settings</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    namespace</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        function</span><span style="color:#61AFEF;"> extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">object</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/api/users&#39;</span><span style="color:#ABB2BF;">,{});</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">    log</span><span style="color:#ABB2BF;">:</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>类似于js的模块声明</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> module</span><span style="color:#98C379;"> &quot;JQueryModule&quot;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    namespace</span><span style="color:#E5C07B;"> $</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        function</span><span style="color:#61AFEF;"> ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">settings</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        namespace</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            function</span><span style="color:#61AFEF;"> extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">object</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    export</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> $</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">另一个ts模块使用</span><span style="color:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> $</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;">&#39;JQueryModule&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/api/users&#39;</span><span style="color:#ABB2BF;">,{});</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">    log</span><span style="color:#ABB2BF;">:</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="_12-4-类型声明文件" tabindex="-1">12.4 类型声明文件 <a class="header-anchor" href="#_12-4-类型声明文件" aria-label="Permalink to &quot;12.4 类型声明文件&quot;">​</a></h2><ul><li>我们可以把类型声明放在一个单独的类型声明文件中</li><li>可以在类型声明文件中使用类型声明</li><li>文件命名规范为：<code>*.d.ts</code></li><li>观看类型声明文件有助于了解库的使用方式</li></ul><h3 id="_12-4-1-jquery-d-ts" tabindex="-1">12.4.1 jquery.d.ts <a class="header-anchor" href="#_12-4-1-jquery-d-ts" aria-label="Permalink to &quot;12.4.1 jquery.d.ts&quot;">​</a></h3><p>typings/jquery.d.ts</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> $</span><span style="color:#ABB2BF;">:(</span><span style="color:#E06C75;font-style:italic;">selector</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">    click</span><span style="color:#ABB2BF;">():</span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    width</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">length</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_12-4-2-tsconfig-typescripton" tabindex="-1">12.4.2 tsconfig.typescripton <a class="header-anchor" href="#_12-4-2-tsconfig-typescripton" aria-label="Permalink to &quot;12.4.2 tsconfig.typescripton&quot;">​</a></h3><p>tsconfig.typescripton</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#98C379;">  &quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">    &quot;module&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;commontypescript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;target&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ES2015&quot;</span><span style="color:#ABB2BF;">,  </span></span>
<span class="line"><span style="color:#98C379;">    &quot;outDir&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;lib&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#98C379;">  &quot;include&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">    &quot;src/**/*&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;typings/**/*&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_12-4-3-test-typescript" tabindex="-1">12.4.3 test.typescript <a class="header-anchor" href="#_12-4-3-test-typescript" aria-label="Permalink to &quot;12.4.3 test.typescript&quot;">​</a></h3><p>src\\test.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#button&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;#button&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">width</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_12-5-第三方声明文件" tabindex="-1">12.5 第三方声明文件 <a class="header-anchor" href="#_12-5-第三方声明文件" aria-label="Permalink to &quot;12.5 第三方声明文件&quot;">​</a></h2><ul><li>可以安装使用第三方的声明文件</li><li>@types是一个约定的前缀，所有的第三方声明的类型库都会带有这样的前缀</li><li>JavaScript 中有很多内置对象，它们可以在 TypeScript 中被当做声明好了的类型</li><li>内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准</li><li>这些内置对象的类型声明文件，就包含在<a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noreferrer">TypeScript 核心库的类型声明文件</a>中</li></ul><h3 id="_12-5-1-使用jquery" tabindex="-1">12.5.1 使用jquery <a class="header-anchor" href="#_12-5-1-使用jquery" aria-label="Permalink to &quot;12.5.1 使用jquery&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">cnpm</span><span style="color:#E06C75;"> i</span><span style="color:#E06C75;"> jquery</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;">S</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//对于common.typescript风格的模块必须使用 import * as </span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> *</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> jQuery</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;jquery&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/user/1&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_12-5-2-安装声明文件" tabindex="-1">12.5.2 安装声明文件 <a class="header-anchor" href="#_12-5-2-安装声明文件" aria-label="Permalink to &quot;12.5.2 安装声明文件&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">cnpm</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;"> @</span><span style="color:#E06C75;">types</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">jquery</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;">S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_12-5-3-自己编写声明文件" tabindex="-1">12.5.3 自己编写声明文件 <a class="header-anchor" href="#_12-5-3-自己编写声明文件" aria-label="Permalink to &quot;12.5.3 自己编写声明文件&quot;">​</a></h3><ul><li><a href="https://www.tslang.cn/docs/handbook/module-resolution.html" target="_blank" rel="noreferrer">模块查找规则</a></li><li>node_modules@types\\jquery/index.d.ts</li><li>我们可以自己编写声明文件并配置<code>tsconfig.typescripton</code></li></ul><h4 id="_12-5-3-1-index-d-ts" tabindex="-1">12.5.3.1 index.d.ts <a class="header-anchor" href="#_12-5-3-1-index-d-ts" aria-label="Permalink to &quot;12.5.3.1 index.d.ts&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">types</span><span style="color:#ABB2BF;">\\</span><span style="color:#E06C75;">jquery</span><span style="color:#ABB2BF;">\\</span><span style="color:#E5C07B;">index</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ts</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> jQuery</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">selector</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">HTMLElement</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> namespace</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">void</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> jQuery</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_12-5-3-2-tsconfig-typescripton" tabindex="-1">12.5.3.2 tsconfig.typescripton <a class="header-anchor" href="#_12-5-3-2-tsconfig-typescripton" aria-label="Permalink to &quot;12.5.3.2 tsconfig.typescripton&quot;">​</a></h4><ul><li>如果配置了<code>paths</code>,那么在引入包的的时候会自动去<code>paths</code>目录里找类型声明文件</li><li>在 tsconfig.typescripton 中，我们通过 <code>compilerOptions</code> 里的 <code>paths</code> 属性来配置路径映射</li><li><code>paths</code>是模块名到基于<code>baseUrl</code>的路径映射的列表</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#98C379;">  &quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">    &quot;baseUrl&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">// 使用 paths 属性的话必须要指定 baseUrl 的值</span></span>
<span class="line"><span style="color:#98C379;">    &quot;paths&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">      &quot;*&quot;</span><span style="color:#ABB2BF;">:[</span><span style="color:#98C379;">&quot;types/*&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> $</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;jquery&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;get&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_12-5-4-npm声明文件可能的位置" tabindex="-1">12.5.4 npm声明文件可能的位置 <a class="header-anchor" href="#_12-5-4-npm声明文件可能的位置" aria-label="Permalink to &quot;12.5.4 npm声明文件可能的位置&quot;">​</a></h3><ul><li>node_modules/jquery/package.typescripton <ul><li>&quot;types&quot;:&quot;types/xxx.d.ts&quot;</li></ul></li><li>node_modules/jquery/index.d.ts</li><li>node_modules/@types/jquery/index.d.ts</li><li>typings\\jquery\\index.d.ts</li></ul><h3 id="_12-5-5-查找声明文件" tabindex="-1">12.5.5 查找声明文件 <a class="header-anchor" href="#_12-5-5-查找声明文件" aria-label="Permalink to &quot;12.5.5 查找声明文件&quot;">​</a></h3><ul><li>如果是手动写的声明文件，那么需要满足以下条件之一，才能被正确的识别</li><li>给 <code>package.typescripton</code> 中的 <code>types</code> 或 <code>typings</code> 字段指定一个类型声明文件地址</li><li>在项目根目录下，编写一个 <code>index.d.ts</code> 文件</li><li>针对入口文件（package.typescripton 中的 main 字段指定的入口文件），编写一个同名不同后缀的 <code>.d.ts</code> 文件</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;myLib&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;main&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lib/index.typescript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;types&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;myLib.d.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>先找myLib.d.ts</li><li>没有就再找index.d.ts</li><li>还没有再找lib/index.d.typescript</li><li>还找不到就认为没有类型声明了</li></ul><h2 id="_12-6-扩展全局变量的类型" tabindex="-1">12.6 扩展全局变量的类型 <a class="header-anchor" href="#_12-6-扩展全局变量的类型" aria-label="Permalink to &quot;12.6 扩展全局变量的类型&quot;">​</a></h2><h3 id="_12-6-1-扩展局部变量类型" tabindex="-1">12.6.1 扩展局部变量类型 <a class="header-anchor" href="#_12-6-1-扩展局部变量类型" aria-label="Permalink to &quot;12.6.1 扩展局部变量类型&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#C678DD;"> var</span><span style="color:#E06C75;"> String</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">StringConstructor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> StringConstructor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    readonly</span><span style="color:#E06C75;"> prototype</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    toString</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//扩展类的原型</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    double</span><span style="color:#ABB2BF;">():</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">double</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&#39;+&#39;</span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">double</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//扩展类的实例</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Window</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    myname</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">myname</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//export {} 没有导出就是全局扩展</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="_12-6-2-模块内全局扩展" tabindex="-1">12.6.2 模块内全局扩展 <a class="header-anchor" href="#_12-6-2-模块内全局扩展" aria-label="Permalink to &quot;12.6.2 模块内全局扩展&quot;">​</a></h3><p>types\\global\\index.d.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">declare</span><span style="color:#E06C75;"> global</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    interface</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        double</span><span style="color:#ABB2BF;">():</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    interface</span><span style="color:#E5C07B;"> Window</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">        myname</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;">  {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_12-7-合并声明" tabindex="-1">12.7 合并声明 <a class="header-anchor" href="#_12-7-合并声明" aria-label="Permalink to &quot;12.7 合并声明&quot;">​</a></h2><ul><li>同一名称的两个独立声明会被合并成一个单一声明</li><li>合并后的声明拥有原先两个声明的特性</li></ul><table tabindex="0"><thead><tr><th style="text-align:left;">关键字</th><th style="text-align:left;">作为类型使用</th><th style="text-align:left;">作为值使用</th></tr></thead><tbody><tr><td style="text-align:left;">class</td><td style="text-align:left;">yes</td><td style="text-align:left;">yes</td></tr><tr><td style="text-align:left;">enum</td><td style="text-align:left;">yes</td><td style="text-align:left;">yes</td></tr><tr><td style="text-align:left;">interface</td><td style="text-align:left;">yes</td><td style="text-align:left;">no</td></tr><tr><td style="text-align:left;">type</td><td style="text-align:left;">yes</td><td style="text-align:left;">no</td></tr><tr><td style="text-align:left;">function</td><td style="text-align:left;">no</td><td style="text-align:left;">yes</td></tr><tr><td style="text-align:left;">var,let,const</td><td style="text-align:left;">no</td><td style="text-align:left;">yes</td></tr></tbody></table><ul><li>类既可以作为类型使用，也可以作为值使用，接口只能作为类型使用</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p1</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//作为类型使用</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//作为值使用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a1</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> Animal</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//接口类型不能用作值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_12-7-1-合并类型声明" tabindex="-1">12.7.1 合并类型声明 <a class="header-anchor" href="#_12-7-1-合并类型声明" aria-label="Permalink to &quot;12.7.1 合并类型声明&quot;">​</a></h3><ul><li>可以通过接口合并的特性给一个第三方为扩展类型声明</li></ul><p>use.typescript</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a1</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Animal</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">a1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//注意不要加export {} ,这是全局的</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>types\\animal\\index.d.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_12-7-2-使用命名空间扩展类" tabindex="-1">12.7.2 使用命名空间扩展类 <a class="header-anchor" href="#_12-7-2-使用命名空间扩展类" aria-label="Permalink to &quot;12.7.2 使用命名空间扩展类&quot;">​</a></h3><ul><li><p>我们可以使用 namespace 来扩展类，用于表示内部类</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Form</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  username</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Form</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Item</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  password</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Form</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Item</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//Item为Form的内部类</span></span>
<span class="line"><span style="color:#C678DD;">namespace</span><span style="color:#E5C07B;"> Form</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Item</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Form</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Item</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Form</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Item</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h3 id="_12-7-3-使用命名空间扩展函数" tabindex="-1">12.7.3 使用命名空间扩展函数 <a class="header-anchor" href="#_12-7-3-使用命名空间扩展函数" aria-label="Permalink to &quot;12.7.3 使用命名空间扩展函数&quot;">​</a></h3><ul><li>我们也可以使用 <code>namespace</code> 来扩展函数</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> greeting</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> greeting</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">words</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">namespace</span><span style="color:#E5C07B;"> greeting</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    export</span><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> words</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello,&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">greeting</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_12-7-4-使用命名空间扩展枚举类型" tabindex="-1">12.7.4 使用命名空间扩展枚举类型 <a class="header-anchor" href="#_12-7-4-使用命名空间扩展枚举类型" aria-label="Permalink to &quot;12.7.4 使用命名空间扩展枚举类型&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    red</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    yellow</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    blue</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">namespace</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> green</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> purple</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">green</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_12-7-5-扩展store" tabindex="-1">12.7.5 扩展Store <a class="header-anchor" href="#_12-7-5-扩展store" aria-label="Permalink to &quot;12.7.5 扩展Store&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Store</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;redux&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> StoreExt</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Store</span><span style="color:#ABB2BF;"> &amp; {</span></span>
<span class="line"><span style="color:#E06C75;">    ext</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">StoreExt</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ext</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;hello&#39;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_12-8-生成声明文件" tabindex="-1">12.8 生成声明文件 <a class="header-anchor" href="#_12-8-生成声明文件" aria-label="Permalink to &quot;12.8 生成声明文件&quot;">​</a></h2><ul><li>把TS编译成typescript后丢失类型声明，我们可以在编译的时候自动生成一份typescript文件</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">     &quot;declaration&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">/* Generates corresponding &#39;.d.ts&#39; file.*/</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_12-9-类型声明实战" tabindex="-1">12.9 类型声明实战 <a class="header-anchor" href="#_12-9-类型声明实战" aria-label="Permalink to &quot;12.9 类型声明实战&quot;">​</a></h2><ul><li><a href="https://nodetypescript.org/api/events.html" target="_blank" rel="noreferrer">events</a></li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">npm</span><span style="color:#E06C75;"> link</span></span>
<span class="line"><span style="color:#E06C75;">npm</span><span style="color:#E06C75;"> link</span><span style="color:#E06C75;"> zf</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">events</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_12-9-1-index-typescript" tabindex="-1">12.9.1 index.typescript <a class="header-anchor" href="#_12-9-1-index-typescript" aria-label="Permalink to &quot;12.9.1 index.typescript&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">EventEmitter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;zf-events&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">EventEmitter</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">defaultMaxListeners</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> EventEmitter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;message&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">text</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;message&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_12-9-2-index-d-ts" tabindex="-1">12.9.2 index.d.ts <a class="header-anchor" href="#_12-9-2-index-d-ts" aria-label="Permalink to &quot;12.9.2 index.d.ts&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> Listener</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> Type</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">symbol</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> EventEmitter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">   static</span><span style="color:#E06C75;"> defaultMaxListeners</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">   emit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[]): </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">   addListener</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">listener</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Listener</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">   on</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">listener</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Listener</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">   once</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">listener</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Listener</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,92)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
