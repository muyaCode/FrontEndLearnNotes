import{_ as s,c as e,o as n,ah as l}from"./chunks/framework.DqD713j2.js";const r="/FrontEndLearnNotes/assets/image-20240424183133065.Ds_aUY4b.png",t="/FrontEndLearnNotes/assets/7226c99d89a94d328d156ff8299bba7ftplv-k3u1fbpfcp-zoom-in-crop-mark1512000.DMvp-wE2.webp",p="/FrontEndLearnNotes/assets/26925da058fa4c50b8681873b5e0099etplv-k3u1fbpfcp-zoom-in-crop-mark1512000.B5zu6bNO.webp",o="/FrontEndLearnNotes/assets/4039f87d42bb43eba67ea53783c5e9e9tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.xZ3F4A_C.webp",c="/FrontEndLearnNotes/assets/d043c55112f7488a810d2de0c086d92ctplv-k3u1fbpfcp-zoom-in-crop-mark1512000.DxO9867P.webp",i="/FrontEndLearnNotes/assets/70c9e446b7244cd1a1a919056711f004tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.74sk68om.webp",d="/FrontEndLearnNotes/assets/68b31d1af8784ab294999191d74f13f9tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.BUspJ6rR.webp",h="/FrontEndLearnNotes/assets/501cd2b5d0794934b548118d8bb7b537tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.34HDGeHG.webp",k=JSON.parse('{"title":"Flutter 框架和库","description":"","frontmatter":{},"headers":[],"relativePath":"Document/移动端软件开发/Flutter框架/Flutter框架和库.md","filePath":"Document/移动端软件开发/Flutter框架/Flutter框架和库.md","lastUpdated":1750954157000}'),u={name:"Document/移动端软件开发/Flutter框架/Flutter框架和库.md"};function b(g,a,B,y,m,f){return n(),e("div",null,a[0]||(a[0]=[l('<h1 id="flutter-框架和库" tabindex="-1">Flutter 框架和库 <a class="header-anchor" href="#flutter-框架和库" aria-label="Permalink to &quot;Flutter 框架和库&quot;">​</a></h1><h2 id="使用-video-player-封装自己的-flutter-视频播放器" tabindex="-1">使用 video_player 封装自己的 Flutter 视频播放器 <a class="header-anchor" href="#使用-video-player-封装自己的-flutter-视频播放器" aria-label="Permalink to &quot;使用 video_player 封装自己的 Flutter 视频播放器&quot;">​</a></h2><h3 id="效果图" tabindex="-1">效果图 <a class="header-anchor" href="#效果图" aria-label="Permalink to &quot;效果图&quot;">​</a></h3><p>注：亮度调节和音量调节 gif 无法体现，功能是 ok 的，其次默认 Icon 锁的 close 和 open 实在难以分辨。</p><h4 id="竖屏" tabindex="-1">竖屏： <a class="header-anchor" href="#竖屏" aria-label="Permalink to &quot;竖屏：&quot;">​</a></h4><p><img src="'+r+'" alt="image-20240424183133065"></p><h4 id="横屏" tabindex="-1">横屏： <a class="header-anchor" href="#横屏" aria-label="Permalink to &quot;横屏：&quot;">​</a></h4><p><img src="'+t+'" alt="26826EB66BCE4B2A2D4A451028259FFB.jpg"></p><h4 id="gif-详情" tabindex="-1">gif 详情： <a class="header-anchor" href="#gif-详情" aria-label="Permalink to &quot;gif 详情：&quot;">​</a></h4><p><img src="'+p+`" alt="2022-01-20 15_26_30.gif"></p><p>关于 Flutter 视频的播放，会有很多方案，Pub 上也有很多优秀的插件。</p><p>但是完全适合自己的项目总是很难，多数还是需要自己去封装。</p><p>封装一个适合自己项目的 Flutter 视频播放器，毫无疑问选择了官方的播放器插件<code>video_player</code>进行封装自定义。</p><p>过程并不复杂，只要认真看完，相信每一位开发者都能定制属于自己的视频播放器！</p><h3 id="第三方插件" tabindex="-1">第三方插件 <a class="header-anchor" href="#第三方插件" aria-label="Permalink to &quot;第三方插件&quot;">​</a></h3><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 播放器</span></span>
<span class="line"><span style="color:#61AFEF;">video_player</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> ^2.2.11</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 屏幕旋转</span></span>
<span class="line"><span style="color:#61AFEF;">auto_orientation</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> ^2.2.1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 亮度和音量调节</span></span>
<span class="line"><span style="color:#61AFEF;">brightness_volume</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> ^1.0.3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h3><p><img src="`+o+`" alt="3476AB4E-7342-4B7F-9C93-236FA9692ECD.png"></p><h4 id="video-player-utils" tabindex="-1">video_player_utils <a class="header-anchor" href="#video-player-utils" aria-label="Permalink to &quot;video_player_utils&quot;">​</a></h4><p>重点说下这个工具类，因为视频播放，涉及到状态改变有很多，笔者刚开始选择使用<code> InheritedWidget</code>来在众多的 widget 之间共享数据。但是总感觉这样有点繁琐，且不很优雅！</p><p><em>这里非广告，如果是使用<code>GetX</code>就很简单了，笔者也使用了<code>GetX</code>进行封装了，一泻千里的赶脚！，但是笔者还是那句话：刚开始接触 Flutter 的开发者不是很建议使用<code>GetX</code>，可以先熟悉下 Flutter 状态管理的基础原理再行使用。而且为了尽量简洁，还是不引入其他的第三方了。</em></p><p>我们选择对第三方插件进行封装的目的不外乎这几个：</p><ul><li>方便调用</li><li>适配业务需要</li><li>高内聚低耦合</li><li>后期迭代维护</li></ul><p>于是笔者就写了一个工具类<code>VideoPlayerUtils</code>，专门且只用来处理播放器的所有业务。包括暂停、播放、跳转、调节音量、调节亮度、切换视频等操作。在所有的 widget 中不会引用关于<code>video_player</code>或其他第三方插件的任何信息，<code>VideoPlayerUtils</code>负责 widget 与播放器之间的所有操作交互。后续优化迭代或更换播放器插件时，只需针对这个工具类进行修改，对所有 widget 不会有任何的影响，大大的解耦合了。</p><h5 id="public-属性" tabindex="-1">public 属性 <a class="header-anchor" href="#public-属性" aria-label="Permalink to &quot;public 属性&quot;">​</a></h5><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> String</span><span style="color:#C678DD;"> get</span><span style="color:#ABB2BF;"> url =&gt; _instance._url; </span><span style="color:#7F848E;font-style:italic;">// 当前播放的url</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> VideoPlayerState</span><span style="color:#C678DD;"> get</span><span style="color:#ABB2BF;"> state =&gt; _instance._state; </span><span style="color:#7F848E;font-style:italic;">// 当前播放状态</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> bool</span><span style="color:#C678DD;"> get</span><span style="color:#ABB2BF;"> isInitialized =&gt; _instance._isInitialized; </span><span style="color:#7F848E;font-style:italic;">// 视频是否已经完成初始化</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> Duration</span><span style="color:#C678DD;"> get</span><span style="color:#ABB2BF;"> duration =&gt; _instance._duration; </span><span style="color:#7F848E;font-style:italic;">// 视频总时长</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> Duration</span><span style="color:#C678DD;"> get</span><span style="color:#ABB2BF;"> position =&gt; _instance._position; </span><span style="color:#7F848E;font-style:italic;">// 当前视频播放进度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> double</span><span style="color:#C678DD;"> get</span><span style="color:#ABB2BF;"> aspectRatio =&gt; _instance._aspectRatio; </span><span style="color:#7F848E;font-style:italic;">// 视频播放比例</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>其中<code>VideoPlayerState</code>：</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/// 播放状态</span></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> VideoPlayerState</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  stopped, </span><span style="color:#7F848E;font-style:italic;">// 初始状态，已停止或发生错误</span></span>
<span class="line"><span style="color:#ABB2BF;">  playing, </span><span style="color:#7F848E;font-style:italic;">// 正在播放</span></span>
<span class="line"><span style="color:#ABB2BF;">  paused,  </span><span style="color:#7F848E;font-style:italic;">// 暂停</span></span>
<span class="line"><span style="color:#ABB2BF;">  completed </span><span style="color:#7F848E;font-style:italic;">// 播放结束</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>提供以上的公共属性，可以通过<code>VideoPlayerUtils</code>来获取对应的值，使用<code>get</code>只读，使外界不会误修改这些属性，以保证数值的安全性。开发者可根据自身需要自行添加属性。</p><h5 id="public-方法" tabindex="-1">public 方法 <a class="header-anchor" href="#public-方法" aria-label="Permalink to &quot;public 方法&quot;">​</a></h5><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 播放、暂停、切换视频等操作，内部自行判断是播放还是暂停，开发者不用关心</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> playerHandle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> url,{</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> autoPlay </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> looping </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">}) </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 跳转播放</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> seekTo</span><span style="color:#ABB2BF;">({</span><span style="color:#C678DD;">required</span><span style="color:#E5C07B;"> Duration</span><span style="color:#ABB2BF;"> position}) </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 初始化结果监听，回调2个参数：1、初始化是否成功，2、播放的widget，方便setState()</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> initializedListener</span><span style="color:#ABB2BF;">({</span><span style="color:#C678DD;">required</span><span style="color:#E5C07B;"> dynamic</span><span style="color:#ABB2BF;"> key,</span><span style="color:#C678DD;">required</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">Widget</span><span style="color:#ABB2BF;">) listener}){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 移除初始化结果监听</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> removeInitializedListener</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dynamic</span><span style="color:#ABB2BF;"> key){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 播放状态监听，stopped、playing、paused、completed等</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> statusListener</span><span style="color:#ABB2BF;">({</span><span style="color:#C678DD;">required</span><span style="color:#E5C07B;"> dynamic</span><span style="color:#ABB2BF;"> key,</span><span style="color:#C678DD;">required</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">VideoPlayerState</span><span style="color:#ABB2BF;">) listener}){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 移除播放状态监听</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> removeStatusListener</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dynamic</span><span style="color:#ABB2BF;"> key){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 播放进度监听</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> positionListener</span><span style="color:#ABB2BF;">({</span><span style="color:#C678DD;">required</span><span style="color:#E5C07B;"> dynamic</span><span style="color:#ABB2BF;"> key,</span><span style="color:#C678DD;">required</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;">) listener}){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 移除播放进度监听</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> removePositionListener</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dynamic</span><span style="color:#ABB2BF;"> key){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取音量</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> Future</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">double</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">getVolume</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置音量</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> Future</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">setVolume</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">double</span><span style="color:#ABB2BF;"> volume) </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取亮度</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> Future</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">double</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">getBrightness</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置亮度</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> Future</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">setBrightness</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">double</span><span style="color:#ABB2BF;"> brightness) </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置播放速度</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> Future</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">setSpeed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">double</span><span style="color:#ABB2BF;"> speed) </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置是否循环播放</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> Future</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#61AFEF;">setLooping</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> looping) </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置横屏</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> setLandscape</span><span style="color:#ABB2BF;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置竖屏</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> setPortrait</span><span style="color:#ABB2BF;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 简单处理下时间格式化mm:ss （超过1小时可自行处理hh:mm:ss，严格来说不属于播放业务）</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> formatDuration</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">int</span><span style="color:#ABB2BF;"> second){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 释放资源</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> dispose</span><span style="color:#ABB2BF;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 开发者可行添加比如：亮度、音量改变监听回调等。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p>提供以上方法来处理播放器的所有业务。同样的开发者可根据自身需要自行添加或修改。</p><h6 id="playerhandle" tabindex="-1">playerHandle <a class="header-anchor" href="#playerhandle" aria-label="Permalink to &quot;playerHandle&quot;">​</a></h6><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> playerHandle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> url,{</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> autoPlay </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> looping </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">}) </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">{}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>重点说下这个方法，是整个业务的核心方法，控制视频的播放或暂停。开发者只要遇到播放或暂停是均可调用此方法，具体是播放或暂停，内部根据传入的<code>url</code>自行判断，开发者不需要关心。</p><p>切换新视频也是使用此方法，传入的<code>url</code>与上次不一致，自动切换新视频。笔者可根据<code>statusListener</code>来监听播放状态的改变，以此处理自身逻辑。</p><h6 id="initializedlistener" tabindex="-1">initializedListener <a class="header-anchor" href="#initializedlistener" aria-label="Permalink to &quot;initializedListener&quot;">​</a></h6><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 初始化结果监听</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> initializedListener</span><span style="color:#ABB2BF;">({</span><span style="color:#C678DD;">required</span><span style="color:#E5C07B;"> dynamic</span><span style="color:#ABB2BF;"> key,</span><span style="color:#C678DD;">required</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">Widget</span><span style="color:#ABB2BF;">) listener}){}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这个也需要提下，视频播放器在播放新视频时会异步初始化，一般我们的操作是在<code>initState()</code>初始化，成功后再<code>setState()</code>。这里笔者遇到一个让人蛋疼的问题：</p><p>我们看<code>video_player</code>的使用：</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">AspectRatio</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  aspectRatio</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> controller.aspectRatio,</span></span>
<span class="line"><span style="color:#ABB2BF;">  child</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> VideoPlayer</span><span style="color:#ABB2BF;">(controller),</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>VideoPlayer(controller)</code>：widget 中已经持有了 controller。本来笔者封装的目的就是为了让 widget 与 controller 的之间解耦合。</p><p>于是笔者取了巧，写了一个初始化监听器<code>initializedListener</code>，包换 2 个参数：<code>bool,Widget</code>，初始化是否成功；其中 widget 为初始化成功返回需要展示的播放器 UI，失败默认返回<code>const SizedBox()</code>。</p><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><p>到这里就可以简单使用了：</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> _VideoPlayerUIState</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> State</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">VideoPlayerUI</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">  Widget</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> _playerUI;</span></span>
<span class="line"><span style="color:#C678DD;">  @override</span></span>
<span class="line"><span style="color:#C678DD;">  void</span><span style="color:#61AFEF;"> initState</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // TODO: implement initState</span></span>
<span class="line"><span style="color:#E5C07B;">    super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">initState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 播放视频</span></span>
<span class="line"><span style="color:#E5C07B;">    VideoPlayerUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">playerHandle</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://flv3.bn.netease.com/tvmrepo/2018/6/9/R/EDJTRAD9R/SD/EDJTRAD9R-mobile.mp4&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 播放新视频，初始化监听</span></span>
<span class="line"><span style="color:#E5C07B;">    VideoPlayerUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">initializedListener</span><span style="color:#ABB2BF;">(key</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">, listener</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> (initialize,widget){</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;">(initialize){ </span><span style="color:#7F848E;font-style:italic;">// 初始化成功后，更新UI</span></span>
<span class="line"><span style="color:#ABB2BF;">        _playerUI </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> widget;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">mounted) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        setState</span><span style="color:#ABB2BF;">(() {});</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  @override</span></span>
<span class="line"><span style="color:#C678DD;">  void</span><span style="color:#61AFEF;"> dispose</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // TODO: implement dispose</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 移除监听</span></span>
<span class="line"><span style="color:#E5C07B;">    VideoPlayerUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeInitializedListener</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispose</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  @override</span></span>
<span class="line"><span style="color:#E5C07B;">  Widget</span><span style="color:#61AFEF;"> build</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">BuildContext</span><span style="color:#ABB2BF;"> context) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> Container</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">      alignment</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> Alignment</span><span style="color:#ABB2BF;">.center,</span></span>
<span class="line"><span style="color:#ABB2BF;">      width</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 414</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      height</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 414</span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;">9</span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      color</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> Colors</span><span style="color:#ABB2BF;">.black26,</span></span>
<span class="line"><span style="color:#ABB2BF;">      child</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _playerUI </span><span style="color:#C678DD;">??</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> CircularProgressIndicator</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        strokeWidth</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      )</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>没看错，视频播放就是这么简单。</p><h4 id="widget" tabindex="-1">Widget <a class="header-anchor" href="#widget" aria-label="Permalink to &quot;Widget&quot;">​</a></h4><p>如果有更多的业务功能，笔者也按照自己的需求写了一套，同样的开发者可根据自身需要自行添加或修改。</p><h5 id="video-player-gestures" tabindex="-1">video_player_gestures <a class="header-anchor" href="#video-player-gestures" aria-label="Permalink to &quot;video_player_gestures&quot;">​</a></h5><p><code>VideoPlayerGestures</code>主要是处理手势的，比如快进、快退等跳转播放；左侧上下滑动调节亮度；右侧上下滑动调节音量；单击是否开启沉浸式播放，所有 widget 的隐藏与显示；双击播放、暂停等。</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">GestureDetector</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  onTap</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _onTap, </span><span style="color:#7F848E;font-style:italic;">// 单击上下widget隐藏与显示</span></span>
<span class="line"><span style="color:#ABB2BF;">  onDoubleTap</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _onDoubleTap, </span><span style="color:#7F848E;font-style:italic;">// 双击暂停、播放</span></span>
<span class="line"><span style="color:#ABB2BF;">  onVerticalDragStart</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;">_onVerticalDragStart, </span><span style="color:#7F848E;font-style:italic;">// 根据起始位置。确定是调整亮度还是调整声音</span></span>
<span class="line"><span style="color:#ABB2BF;">  onVerticalDragUpdate</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _onVerticalDragUpdate,</span><span style="color:#7F848E;font-style:italic;">// 一般在更新的时候，同步调整亮度或声音</span></span>
<span class="line"><span style="color:#ABB2BF;">  onVerticalDragEnd</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _onVerticalDragEnd, </span><span style="color:#7F848E;font-style:italic;">// 结束后，隐藏百分比提示信息widget</span></span>
<span class="line"><span style="color:#ABB2BF;">  onHorizontalDragStart</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _onHorizontalDragStart,  </span><span style="color:#7F848E;font-style:italic;">// 手势跳转播放起始位置</span></span>
<span class="line"><span style="color:#ABB2BF;">  onHorizontalDragUpdate</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _onHorizontalDragUpdate, </span><span style="color:#7F848E;font-style:italic;">// 根据手势更新快进或快退</span></span>
<span class="line"><span style="color:#ABB2BF;">  onHorizontalDragEnd</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _onHorizontalDragEnd,  </span><span style="color:#7F848E;font-style:italic;">// 手势结束seekTo</span></span>
<span class="line"><span style="color:#ABB2BF;">  child</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> Stack</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    children</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _children,</span></span>
<span class="line"><span style="color:#ABB2BF;">  ),</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>哦，还有<code>PercentageWidget</code>也放到这个文件下了，就是这玩意：</p><p><img src="`+c+'" alt="0D865B79-BE40-4D7E-A758-939FAA4D5EF2.png"></p><p>因为显示的百分比与手势相关，随着手势移动而更新。开发者可自行处理。</p><h5 id="video-player-top" tabindex="-1">video_player_top <a class="header-anchor" href="#video-player-top" aria-label="Permalink to &quot;video_player_top&quot;">​</a></h5><p>笔者处出于简单考虑，就按照整个 UI 的位置命名了。瞅一眼就知道是啥玩意。</p><p><img src="'+i+'" alt="6C829789-F4F2-464E-8FFC-9960F90129D0.png"></p><p>同样的开发者可根据自身需要自行添加或修改。</p><h5 id="video-player-center" tabindex="-1">video_player_center <a class="header-anchor" href="#video-player-center" aria-label="Permalink to &quot;video_player_center&quot;">​</a></h5><p>就是这玩意：</p><p><img src="'+d+'" alt="340DD278-9485-4963-9121-BD4CA4E1AE8F.png"></p><p>同样的开发者可根据自身需要自行添加或修改。话说这个锁的<code>Icon</code>的 open 和 close 是真的难分辨！</p><h5 id="video-player-bottom" tabindex="-1">video_player_bottom <a class="header-anchor" href="#video-player-bottom" aria-label="Permalink to &quot;video_player_bottom&quot;">​</a></h5><p>就是这玩意：</p><p><img src="'+h+`" alt="D9F74B37-B501-436D-8C9A-6309B794C778.png"></p><p>同样的开发者可根据自身需要自行添加或修改。</p><h5 id="video-player-slider" tabindex="-1">video_player_slider <a class="header-anchor" href="#video-player-slider" aria-label="Permalink to &quot;video_player_slider&quot;">​</a></h5><p>这玩意是自定义的，别问，问就是跟产品干一架落了下风</p><p>主要就是自定义这玩意：</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">SliderThemeData</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  trackHeight</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  inactiveTrackColor</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> Colors</span><span style="color:#ABB2BF;">.grey,</span></span>
<span class="line"><span style="color:#ABB2BF;">  activeTrackColor</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> Colors</span><span style="color:#ABB2BF;">.greenAccent,</span></span>
<span class="line"><span style="color:#ABB2BF;">  thumbShape</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> SliderThumbImage</span><span style="color:#ABB2BF;">(image</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _customImage),</span><span style="color:#7F848E;font-style:italic;">// 自定义</span></span>
<span class="line"><span style="color:#ABB2BF;">  trackShape</span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> CustomTrackShape</span><span style="color:#ABB2BF;">(), </span><span style="color:#7F848E;font-style:italic;">// 自定义</span></span>
<span class="line"><span style="color:#ABB2BF;">),</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>同样的开发者可根据自身需要自定义。</p><p>注：这里没有添加缓冲的进度，开发可查看<code>video_player</code>中的源码<code>VideoProgressIndicator</code>，按业务自行定义。</p><h5 id="video-player-page" tabindex="-1">video_player_page <a class="header-anchor" href="#video-player-page" aria-label="Permalink to &quot;video_player_page&quot;">​</a></h5><p>这玩意就是整合以上的 widget，再考虑下全屏的安全区域，没啥东西。开发者可自行处理！</p><div class="language-dart line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dart</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">SafeArea</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  top</span><span style="color:#C678DD;">:</span><span style="color:#56B6C2;"> !</span><span style="color:#ABB2BF;">_isFullScreen,</span></span>
<span class="line"><span style="color:#ABB2BF;">  bottom</span><span style="color:#C678DD;">:</span><span style="color:#56B6C2;"> !</span><span style="color:#ABB2BF;">_isFullScreen,</span></span>
<span class="line"><span style="color:#ABB2BF;">  left</span><span style="color:#C678DD;">:</span><span style="color:#56B6C2;"> !</span><span style="color:#ABB2BF;">_isFullScreen,</span></span>
<span class="line"><span style="color:#ABB2BF;">  right</span><span style="color:#C678DD;">:</span><span style="color:#56B6C2;"> !</span><span style="color:#ABB2BF;">_isFullScreen,</span></span>
<span class="line"><span style="color:#ABB2BF;">  child</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> SizedBox</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    height</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _height,</span></span>
<span class="line"><span style="color:#ABB2BF;">    width</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _width,</span></span>
<span class="line"><span style="color:#ABB2BF;">    child</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _playerUI </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> VideoPlayerGestures</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">      appearCallback</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> (appear){</span></span>
<span class="line"><span style="color:#ABB2BF;">        _top</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">opacityCallback</span><span style="color:#ABB2BF;">(appear);</span></span>
<span class="line"><span style="color:#ABB2BF;">        _lockIcon</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">opacityCallback</span><span style="color:#ABB2BF;">(appear);</span></span>
<span class="line"><span style="color:#ABB2BF;">        _bottom</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">opacityCallback</span><span style="color:#ABB2BF;">(appear);</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">      children</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#E5C07B;">        Center</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">          child</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> _playerUI,</span></span>
<span class="line"><span style="color:#ABB2BF;">        ),</span></span>
<span class="line"><span style="color:#ABB2BF;">        _top</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        _lockIcon</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        _bottom</span><span style="color:#56B6C2;">!</span></span>
<span class="line"><span style="color:#ABB2BF;">      ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    ) </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> Container</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">      alignment</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> Alignment</span><span style="color:#ABB2BF;">.center,</span></span>
<span class="line"><span style="color:#ABB2BF;">      color</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> Colors</span><span style="color:#ABB2BF;">.black26,</span></span>
<span class="line"><span style="color:#ABB2BF;">      child</span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> CircularProgressIndicator</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">        strokeWidth</span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      ),</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">  ),</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="rcfluttervideoplayer" tabindex="-1">RCFlutterVideoPlayer <a class="header-anchor" href="#rcfluttervideoplayer" aria-label="Permalink to &quot;RCFlutterVideoPlayer&quot;">​</a></h3><p>开源：<a href="https://github.com/RchTime/RCFlutterVideoPlayer.git" target="_blank" rel="noreferrer">https://github.com/RchTime/RCFlutterVideoPlayer.git</a></p><p>具体的实现监听器的思路，<a href="https://juejin.cn/post/7008351563798282254" target="_blank" rel="noreferrer">看这里</a>。</p><p>自此一个漂亮的 Flutter 视频播放器就已经结束了。</p><h1 id="flutter-常用库插件" tabindex="-1">Flutter 常用库插件 <a class="header-anchor" href="#flutter-常用库插件" aria-label="Permalink to &quot;Flutter 常用库插件&quot;">​</a></h1><h2 id="网络请求" tabindex="-1">网络请求 <a class="header-anchor" href="#网络请求" aria-label="Permalink to &quot;网络请求&quot;">​</a></h2><h3 id="http" tabindex="-1">http <a class="header-anchor" href="#http" aria-label="Permalink to &quot;http&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/http" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/http</a></p><p><a href="https://github.com/dart-lang/http" target="_blank" rel="noreferrer">https://github.com/dart-lang/http</a></p><p>该软件包包含一组高级函数和类，可以轻松使用 HTTP 资源。它与平台无关，可以在命令行和浏览器上使用。</p><h3 id="dio" tabindex="-1">dio <a class="header-anchor" href="#dio" aria-label="Permalink to &quot;dio&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/dio" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/dio</a></p><p>Dart 的一个强大的 Http 客户端，支持拦截器、全局配置、FormData、请求取消、文件下载、超时等。</p><h3 id="http-multi-server" tabindex="-1">http_multi_server <a class="header-anchor" href="#http-multi-server" aria-label="Permalink to &quot;http_multi_server&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/http_multi_server" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/http_multi_server</a></p><p>dart:io HttpServer 包装器，用于处理来自多个服务器的请求</p><h2 id="图像加载" tabindex="-1">图像加载 <a class="header-anchor" href="#图像加载" aria-label="Permalink to &quot;图像加载&quot;">​</a></h2><p>可使用 Image.network 、 FadeInImage.memoryNetwork 或下面的库加载。</p><h3 id="cached-network-image" tabindex="-1">cached_network_image <a class="header-anchor" href="#cached-network-image" aria-label="Permalink to &quot;cached_network_image&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/cached_network_image" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/cached_network_image</a></p><p>Flutter 库来加载和缓存网络图像。也可以与占位符和错误小部件一起使用。</p><h3 id="flutter-advanced-networkimage" tabindex="-1">flutter_advanced_networkimage <a class="header-anchor" href="#flutter-advanced-networkimage" aria-label="Permalink to &quot;flutter_advanced_networkimage&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_advanced_networkimage" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_advanced_networkimage</a></p><p>高级图像缓存加载和缩放控制。</p><h3 id="transparent-image" tabindex="-1">transparent_image <a class="header-anchor" href="#transparent-image" aria-label="Permalink to &quot;transparent_image&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/transparent_image" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/transparent_image</a></p><p>简单的透明图像，表示为 Uint8List。在加载图片时可以用来做为占位符。</p><h2 id="图像处理" tabindex="-1">图像处理 <a class="header-anchor" href="#图像处理" aria-label="Permalink to &quot;图像处理&quot;">​</a></h2><h3 id="image-jpeg" tabindex="-1">image_jpeg <a class="header-anchor" href="#image-jpeg" aria-label="Permalink to &quot;image_jpeg&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/image_jpeg" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/image_jpeg</a></p><p><a href="https://github.com/yangyxd/image_jpeg" target="_blank" rel="noreferrer">https://github.com/yangyxd/image_jpeg</a></p><p>用于图像上传之前转 jpeg 缩放压缩，调用 Android 或 iOS 原生功能进行处理，性能较高，支持的源图像格式也更多。</p><h3 id="image-picker" tabindex="-1">image_picker <a class="header-anchor" href="#image-picker" aria-label="Permalink to &quot;image_picker&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/image_picker" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/image_picker</a></p><p>用于从 Android 和 iOS 图像库中选择图像，并使用相机拍摄新照片。</p><h3 id="photo" tabindex="-1">photo <a class="header-anchor" href="#photo" aria-label="Permalink to &quot;photo&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/photo" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/photo</a></p><p>用于选择图像，支持多选，而且这个是用 Flutter 做的 UI，可以很方便的自定义修改（强烈推荐）。</p><h3 id="image" tabindex="-1">image <a class="header-anchor" href="#image" aria-label="Permalink to &quot;image&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/image" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/image</a></p><p>DART 库，提供以各种不同的文件格式加载、保存和操作图像的能力。该库不依赖于 DART：IO，因此它可以用于服务器和 Web 应用程序。</p><h3 id="flutter-svg" tabindex="-1">flutter_svg <a class="header-anchor" href="#flutter-svg" aria-label="Permalink to &quot;flutter_svg&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_svg" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_svg</a></p><p>加载 svg 图像。</p><h3 id="zoomable-image" tabindex="-1">zoomable_image <a class="header-anchor" href="#zoomable-image" aria-label="Permalink to &quot;zoomable_image&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/zoomable_image" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/zoomable_image</a></p><p>提供图像查看和手势缩放操作功能。</p><h3 id="image-carousel" tabindex="-1">image_carousel <a class="header-anchor" href="#image-carousel" aria-label="Permalink to &quot;image_carousel&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/image_carousel" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/image_carousel</a></p><p>Flutter 图像展示控件，可以左右划动切换上一张下一张图像，还结合了 zoomable_image 可以点击后缩放查看。支持 Asset 和网络图像。</p><h3 id="carousel-slider" tabindex="-1">carousel_slider <a class="header-anchor" href="#carousel-slider" aria-label="Permalink to &quot;carousel_slider&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/carousel_slider" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/carousel_slider</a></p><p>一个支持手势划动和自动播放的图像展示控件。</p><h3 id="parallax-image" tabindex="-1">parallax_image <a class="header-anchor" href="#parallax-image" aria-label="Permalink to &quot;parallax_image&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/parallax_image" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/parallax_image</a></p><p>视差图像可以与任何可滚动（例如 ListVIEW）一起使用。说白了就是让放在滚动区域内的图像滚动时看起来更平滑。</p><h3 id="camera" tabindex="-1">camera <a class="header-anchor" href="#camera" aria-label="Permalink to &quot;camera&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/camera" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/camera</a></p><p>用于在 Android 和 iOS 上获取有关和控制相机的信息。支持预览相机馈送和捕捉图像。</p><h2 id="ui-相关" tabindex="-1">UI 相关 <a class="header-anchor" href="#ui-相关" aria-label="Permalink to &quot;UI 相关&quot;">​</a></h2><h3 id="fluttertoast" tabindex="-1">fluttertoast <a class="header-anchor" href="#fluttertoast" aria-label="Permalink to &quot;fluttertoast&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/fluttertoast" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/fluttertoast</a></p><p>用于 Android 和 ios 的 toast 库。</p><h3 id="flutter-html-view" tabindex="-1">flutter_html_view <a class="header-anchor" href="#flutter-html-view" aria-label="Permalink to &quot;flutter_html_view&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_html_view" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_html_view</a></p><p>Flutter 没有默认的支持来显示 html，所以需要三方的包来显示。这个包可以将 html 呈现给原生的 Widget。（目前支持的标签比较少）</p><h3 id="flutter-html-textview" tabindex="-1">flutter_html_textview <a class="header-anchor" href="#flutter-html-textview" aria-label="Permalink to &quot;flutter_html_textview&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_html_textview" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_html_textview</a></p><p>将 html 呈现为一个 Widget,在 textview 中呈现 html。</p><h3 id="markdown" tabindex="-1">markdown <a class="header-anchor" href="#markdown" aria-label="Permalink to &quot;markdown&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/markdown" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/markdown</a></p><p>用 Dart 编写的便携式 Markdown 库。它可以在客户端和服务器上将 Markdown 解析为 HTML。</p><h3 id="html2md" tabindex="-1">html2md <a class="header-anchor" href="#html2md" aria-label="Permalink to &quot;html2md&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/html2md" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/html2md</a></p><p>将 html 转换为 Dart 中的 MarkDown.</p><h3 id="flutter-calendar-日历" tabindex="-1">flutter_calendar （日历） <a class="header-anchor" href="#flutter-calendar-日历" aria-label="Permalink to &quot;flutter_calendar （日历）&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_calendar" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_calendar</a></p><p>日历组件.</p><h3 id="flutter-picker" tabindex="-1">flutter_picker <a class="header-anchor" href="#flutter-picker" aria-label="Permalink to &quot;flutter_picker&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_picker" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_picker</a></p><p><a href="https://github.com/yangyxd/flutter_picker" target="_blank" rel="noreferrer">https://github.com/yangyxd/flutter_picker</a></p><p>选择器。可以根据 json 或自定义数据生成选择器。</p><h3 id="flutter-spinkit" tabindex="-1">flutter_spinkit <a class="header-anchor" href="#flutter-spinkit" aria-label="Permalink to &quot;flutter_spinkit&quot;">​</a></h3><p><a href="https://github.com/jogboms/flutter_spinkit" target="_blank" rel="noreferrer">https://github.com/jogboms/flutter_spinkit</a></p><p>加载动画。支持多种常用效果，非常酷炫。</p><h3 id="extended-nested-scroll-view" tabindex="-1">extended_nested_scroll_view <a class="header-anchor" href="#extended-nested-scroll-view" aria-label="Permalink to &quot;extended_nested_scroll_view&quot;">​</a></h3><p><a href="https://github.com/zmtzawqlp/Flutter_Candies/tree/master/extended_nested_scroll_view" target="_blank" rel="noreferrer">https://github.com/zmtzawqlp/Flutter_Candies/tree/master/extended_nested_scroll_view</a></p><p>一个扩展 NestedScrollView，能够更好的处理列表、TabView、Sliver 混合的情况（但是这个插件没有在 pub 找到）</p><h3 id="badge" tabindex="-1">badge <a class="header-anchor" href="#badge" aria-label="Permalink to &quot;badge&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/badge" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/badge</a></p><p>小红点插件，可以用来显示小红点、未读消息数量等，非常方便</p><h2 id="视频-音频" tabindex="-1">视频 &amp; 音频 <a class="header-anchor" href="#视频-音频" aria-label="Permalink to &quot;视频 &amp; 音频&quot;">​</a></h2><h3 id="chewie" tabindex="-1">chewie <a class="header-anchor" href="#chewie" aria-label="Permalink to &quot;chewie&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/chewie" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/chewie</a></p><p>视频播放器，在 video_player 的基础上包装了控制 UI。</p><h3 id="video-player" tabindex="-1">video_player <a class="header-anchor" href="#video-player" aria-label="Permalink to &quot;video_player&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/video_player" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/video_player</a></p><p>用于在 Android 和 iOS 上与其他 Flutter 窗口小部件一起显示内嵌视频。</p><h3 id="video-launcher" tabindex="-1">video_launcher <a class="header-anchor" href="#video-launcher" aria-label="Permalink to &quot;video_launcher&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/video_launcher" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/video_launcher</a></p><p>视频播放器，可播放本地文件和字节流。</p><h3 id="flute-music-player" tabindex="-1">flute_music_player <a class="header-anchor" href="#flute-music-player" aria-label="Permalink to &quot;flute_music_player&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flute_music_player" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flute_music_player</a></p><p>基于 Flutter 的材料设计音乐播放器与音频插件播放本地音乐文件。自带华丽的播放界面。</p><h3 id="audioplayer" tabindex="-1">audioplayer <a class="header-anchor" href="#audioplayer" aria-label="Permalink to &quot;audioplayer&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/audioplayer" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/audioplayer</a></p><p>一个播放远程或本地音频文件 Flutter 音频插件</p><h3 id="audioplayers" tabindex="-1">audioplayers <a class="header-anchor" href="#audioplayers" aria-label="Permalink to &quot;audioplayers&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/audioplayers" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/audioplayers</a></p><p>这是 rxlabz 的 audioplayer 的一个分支，不同之处在于它支持同时播放多个音频并显示音量控制。</p><h3 id="spritewidget" tabindex="-1">spritewidget <a class="header-anchor" href="#spritewidget" aria-label="Permalink to &quot;spritewidget&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/spritewidget" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/spritewidget</a></p><p>SpriteWidget 是用于构建复杂、高性能动画和带有 2D 游戏的插件包，可与其它小部件无缝混合。您可以使用 SpriteWidget 创建任何东西，从动画图标到成熟的游戏。</p><h2 id="路由和消息传递" tabindex="-1">路由和消息传递 <a class="header-anchor" href="#路由和消息传递" aria-label="Permalink to &quot;路由和消息传递&quot;">​</a></h2><h3 id="fluro" tabindex="-1">fluro <a class="header-anchor" href="#fluro" aria-label="Permalink to &quot;fluro&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/fluro" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/fluro</a></p><p><a href="https://github.com/theyakka/fluro" target="_blank" rel="noreferrer">https://github.com/theyakka/fluro</a></p><p>最好用的路由导航框架。功能：简单的路线导航；函数处理程序（映射到函数而不是路径）；通配符参数匹配；查询字符串参数解析；内置常用转换；简单的定制转换创建。</p><h3 id="flutter-local-notifications" tabindex="-1">flutter_local_notifications <a class="header-anchor" href="#flutter-local-notifications" aria-label="Permalink to &quot;flutter_local_notifications&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_local_notifications" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_local_notifications</a></p><p>一个跨平台的显示本地 notifications 的插件。</p><h3 id="local-notifications" tabindex="-1">local_notifications <a class="header-anchor" href="#local-notifications" aria-label="Permalink to &quot;local_notifications&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/local_notifications" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/local_notifications</a></p><p>这个库能让你在 Android 和 iOS 上创建 Notifications 很简单。</p><h3 id="url-launcher" tabindex="-1">url_launcher <a class="header-anchor" href="#url-launcher" aria-label="Permalink to &quot;url_launcher&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/url_launcher" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/url_launcher</a></p><p>用于在 Android 和 iOS 上启动 URL。支持网络，电话，短信和电子邮件方案。</p><h3 id="firebase-messaging" tabindex="-1">firebase_messaging <a class="header-anchor" href="#firebase-messaging" aria-label="Permalink to &quot;firebase_messaging&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/firebase_messaging" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/firebase_messaging</a></p><p>一款跨平台的消息传递解决方案，可让您在 Android 和 iOS 上可靠地传递消息。</p><h3 id="flutter-msg-engine" tabindex="-1">flutter_msg_engine <a class="header-anchor" href="#flutter-msg-engine" aria-label="Permalink to &quot;flutter_msg_engine&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_msg_engine" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_msg_engine</a></p><p><a href="https://github.com/yangyxd/flutter_msg_engine" target="_blank" rel="noreferrer">https://github.com/yangyxd/flutter_msg_engine</a></p><p>消息引擎, 注册一个消息，在任何地方响应并处理。。</p><h3 id="event-bus" tabindex="-1">event_bus <a class="header-anchor" href="#event-bus" aria-label="Permalink to &quot;event_bus&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/event_bus" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/event_bus</a></p><p>一个使用 Dart 流进行解耦应用程序的简单事件总线的库。</p><h2 id="数据存储、缓存有关的库" tabindex="-1">数据存储、缓存有关的库 <a class="header-anchor" href="#数据存储、缓存有关的库" aria-label="Permalink to &quot;数据存储、缓存有关的库&quot;">​</a></h2><h3 id="sqflite" tabindex="-1">sqflite <a class="header-anchor" href="#sqflite" aria-label="Permalink to &quot;sqflite&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/sqflite" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/sqflite</a></p><p>SQLite 的 Flutter 插件，一个自包含的高可靠性嵌入式 SQL 数据库引擎。</p><h3 id="file-cache" tabindex="-1">file_cache <a class="header-anchor" href="#file-cache" aria-label="Permalink to &quot;file_cache&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/file_cache" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/file_cache</a></p><p>为 flutter package 项目缓存 Json,Buffer,FileCacheImage。</p><h3 id="flutter-cache-manager" tabindex="-1">flutter_cache_manager <a class="header-anchor" href="#flutter-cache-manager" aria-label="Permalink to &quot;flutter_cache_manager&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_cache_manager" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_cache_manager</a></p><p>管理你的 app 下载到本地的文件缓存。它使用缓存控制 HTTP 报头有效地检索文件。</p><h2 id="类型编解码的库" tabindex="-1">类型编解码的库 <a class="header-anchor" href="#类型编解码的库" aria-label="Permalink to &quot;类型编解码的库&quot;">​</a></h2><h3 id="html-unescape" tabindex="-1">html_unescape <a class="header-anchor" href="#html-unescape" aria-label="Permalink to &quot;html_unescape&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/html_unescape" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/html_unescape</a></p><p>用于解决 HTML 编码字符串的 Dart 库。支持所有命名字符引用（如<code></code>），小数字符引用（如<code>á</code>）和十六进制字符引用（如<code>ã</code>）。</p><h3 id="html" tabindex="-1">html <a class="header-anchor" href="#html" aria-label="Permalink to &quot;html&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/html" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/html</a></p><p>HTML 解析库。</p><h3 id="crypto" tabindex="-1">crypto <a class="header-anchor" href="#crypto" aria-label="Permalink to &quot;crypto&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/crypto" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/crypto</a></p><p>在纯 DART 中实现的加解密函数库。支持 SHA-1、SHA-256、MD5、HMAC</p><h2 id="序列化" tabindex="-1">序列化 <a class="header-anchor" href="#序列化" aria-label="Permalink to &quot;序列化&quot;">​</a></h2><h3 id="手动序列化" tabindex="-1">手动序列化： <a class="header-anchor" href="#手动序列化" aria-label="Permalink to &quot;手动序列化：&quot;">​</a></h3><p>使用 <code>dart:convert</code> 的内置解码器。包括传入 JSON 原始字符串给 JSON.decode() 方法，然后从 <code>Map&lt;String, dynamic&gt;</code> 中查询你需要的数据。</p><h3 id="自动序列化" tabindex="-1">自动序列化： <a class="header-anchor" href="#自动序列化" aria-label="Permalink to &quot;自动序列化：&quot;">​</a></h3><table tabindex="0"><thead><tr><th>库名</th><th>版本号</th><th>链接</th><th>描述</th></tr></thead><tbody><tr><td>json_serializable</td><td></td><td><a href="https://pub.dartlang.org/packages/json_serializable" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/json_serializable</a></td><td></td></tr><tr><td>built_value</td><td></td><td><a href="https://pub.dartlang.org/packages/built_value" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/built_value</a></td><td>runtime 依赖项</td></tr><tr><td>built_value_generator</td><td></td><td><a href="https://pub.dartlang.org/packages/built_value_generator" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/built_value_generator</a></td><td>dev 依赖项</td></tr><tr><td>built_value_test</td><td></td><td><a href="https://pub.dartlang.org/packages/built_value_test" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/built_value_test</a></td><td>test 依赖项</td></tr></tbody></table><h2 id="json-解析" tabindex="-1">Json 解析 <a class="header-anchor" href="#json-解析" aria-label="Permalink to &quot;Json 解析&quot;">​</a></h2><ul><li><a href="https://github.com/javiercbk/json_to_dart" target="_blank" rel="noreferrer">https://github.com/javiercbk/json_to_dart</a> 根据 json 生成 Dart 实体类</li><li><a href="https://pub.dartlang.org/packages/json_schema" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/json_schema</a> json 解析</li><li><a href="https://github.com/debuggerx01/JSONFormat4Flutter" target="_blank" rel="noreferrer">https://github.com/debuggerx01/JSONFormat4Flutter</a> 这是一个 AS 的辅助插件，将 JSONObject 格式的 String 解析成 Dart 的实体类</li><li>Dson 0.13.2 下载地址 <a href="https://pub.dartlang.org/packages/dson" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/dson</a> 描述：Dson 的 github 地址 <a href="https://github.com/drails-dart/dson" target="_blank" rel="noreferrer">https://github.com/drails-dart/dson</a> DSON 是一个将 Dart 对象转换为 JSON 的库。(用于 web)这个库是 Dartson 的一个分支，但又有不同。</li><li>Dartson 是一个 Dart 库，可用于将 Dart 对象转换为 JSON 字符串。 <a href="https://github.com/eredo/dartson" target="_blank" rel="noreferrer">https://github.com/eredo/dartson</a> （用于 web）</li><li>几个 Json 库的比较：<a href="https://github.com/drails-dart/dart-serialise" target="_blank" rel="noreferrer">https://github.com/drails-dart/dart-serialise</a></li></ul><table tabindex="0"><thead><tr><th>方式</th><th>大小 (js)</th><th>序列化 (dart)</th><th>反序列化 (dart)</th><th>序列化 (js)</th><th>反序列化 (js)</th></tr></thead><tbody><tr><td>json_serializable</td><td>80 KB</td><td>9.09 ms</td><td>6.61 ms</td><td>8.23 ms</td><td>8.12 ms</td></tr><tr><td>Serializable</td><td>79 KB</td><td>6.1 ms</td><td>6.92 ms</td><td>4.37 ms</td><td></td></tr><tr><td>DSON</td><td>94 KB</td><td>12.72 ms</td><td>11.15 ms</td><td>16.64 ms</td><td>17.94 ms</td></tr><tr><td>Dartson</td><td>86 KB</td><td>9.61 ms</td><td>6.81 ms</td><td>8.58 ms</td><td>7.01 ms</td></tr><tr><td>Manual</td><td>86 KB</td><td>8.29 ms</td><td>5.78 ms</td><td>10.7 ms</td><td>7.9 ms</td></tr><tr><td>Interop</td><td>70 KB</td><td>61.55 ms</td><td>14.96 ms</td><td>2.49 ms</td><td>2.93 ms</td></tr><tr><td>Jaguar_serializer</td><td>88 KB</td><td>8.57 ms</td><td>6.58 ms</td><td>10.31 ms</td><td>8.59 ms</td></tr><tr><td>Jackson (Groovy)</td><td></td><td>496 ms</td><td>252 ms</td><td>n/a</td><td>n/a</td></tr></tbody></table><h2 id="国际化和本地化" tabindex="-1">国际化和本地化 <a class="header-anchor" href="#国际化和本地化" aria-label="Permalink to &quot;国际化和本地化&quot;">​</a></h2><h3 id="intl" tabindex="-1">intl <a class="header-anchor" href="#intl" aria-label="Permalink to &quot;intl&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/intl" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/intl</a></p><p>这个包提供国际化和本地化功能，包括消息翻译、复数和性别、日期/数字格式和解析以及双向文本。</p><h2 id="rx-系列" tabindex="-1">rx 系列 <a class="header-anchor" href="#rx-系列" aria-label="Permalink to &quot;rx 系列&quot;">​</a></h2><h3 id="rxdart" tabindex="-1">rxdart <a class="header-anchor" href="#rxdart" aria-label="Permalink to &quot;rxdart&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/rxdart" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/rxdart</a></p><p>RxDart 是一种基于 ReactiveX 的谷歌 Dart 反应性函数编程库。谷歌 Dart 自带了一个非常不错的流 API;RxDart 没有尝试提供这个 API 的替代方案，而是在它上面添加了一些功能。</p><h3 id="rx-widgets" tabindex="-1">rx_widgets <a class="header-anchor" href="#rx-widgets" aria-label="Permalink to &quot;rx_widgets&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/rx_widgets" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/rx_widgets</a></p><p>rx_widgets 是一个包含基于流的 Flutter Widgets 和 Widget 帮助程序/便利类的程序包，它们有助于反应式编程风格，特别是与 RxDart 和 RxCommands 结合使用。</p><h3 id="rx-command" tabindex="-1">rx_command <a class="header-anchor" href="#rx-command" aria-label="Permalink to &quot;rx_command&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/rx_command" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/rx_command</a></p><p>RxCommand 是针对事件处理程序的基于 Reactive Extensions（Rx）的抽象。它基于 ReactiveUI 框架的 ReactiveCommand。它大量使用了 RxDart 包。</p><h2 id="系统平台有关的库" tabindex="-1">系统平台有关的库 <a class="header-anchor" href="#系统平台有关的库" aria-label="Permalink to &quot;系统平台有关的库&quot;">​</a></h2><h3 id="path-provider-获取本地文件" tabindex="-1">path_provider (获取本地文件) <a class="header-anchor" href="#path-provider-获取本地文件" aria-label="Permalink to &quot;path_provider (获取本地文件)&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/path_provider" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/path_provider</a></p><p>用于获取 Android 和 iOS 文件系统上的常用位置，例如 temp 和 app 数据目录。</p><h3 id="shared-preferences-读写-sp-文件" tabindex="-1">shared_preferences (读写 sp 文件) <a class="header-anchor" href="#shared-preferences-读写-sp-文件" aria-label="Permalink to &quot;shared_preferences (读写 sp 文件)&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/shared_preferences" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/shared_preferences</a></p><p>用于读写简单键值对的 Flutter 插件。包装 iOS 上的 NSUserDefaults 和 Android 上的 SharedPreferences。</p><h3 id="connectivity-网络状态" tabindex="-1">connectivity (网络状态) <a class="header-anchor" href="#connectivity-网络状态" aria-label="Permalink to &quot;connectivity (网络状态)&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/connectivity" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/connectivity</a></p><p>用于发现 Android 和 iOS 上的网络状态（WiFi 和移动/蜂窝）连接。</p><h3 id="device-info-设备信息" tabindex="-1">device_info (设备信息) <a class="header-anchor" href="#device-info-设备信息" aria-label="Permalink to &quot;device_info (设备信息)&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/device_info" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/device_info</a></p><p>提供有关设备（品牌，型号等）的详细信息，以及应用程序正在运行的 Android 或 iOS 版本。</p><h3 id="flutter-blue-蓝牙" tabindex="-1">flutter_blue (蓝牙) <a class="header-anchor" href="#flutter-blue-蓝牙" aria-label="Permalink to &quot;flutter_blue (蓝牙)&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_blue" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_blue</a></p><p>这是跨平台的蓝牙 sdk.</p><h3 id="share-分享" tabindex="-1">share (分享) <a class="header-anchor" href="#share-分享" aria-label="Permalink to &quot;share (分享)&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/share" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/share</a></p><p>支持分享的 flutter 插件</p><h3 id="open-file-打开文件" tabindex="-1">open_file (打开文件) <a class="header-anchor" href="#open-file-打开文件" aria-label="Permalink to &quot;open_file (打开文件)&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/open_file" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/open_file</a></p><p>调用平台打开文件。比如直接打开一个 apk 文件会调起平台的安装向导。</p><h2 id="权限库" tabindex="-1">权限库 <a class="header-anchor" href="#权限库" aria-label="Permalink to &quot;权限库&quot;">​</a></h2><h3 id="simple-permissions" tabindex="-1">simple_permissions <a class="header-anchor" href="#simple-permissions" aria-label="Permalink to &quot;simple_permissions&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/simple_permissions" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/simple_permissions</a></p><p>用于 android 和 ios 的请求权限的库</p><h3 id="flutter-simple-permissions" tabindex="-1">flutter_simple_permissions <a class="header-anchor" href="#flutter-simple-permissions" aria-label="Permalink to &quot;flutter_simple_permissions&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_simple_permissions" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_simple_permissions</a></p><h2 id="地图-地图显示、定位、经纬度等" tabindex="-1">地图（地图显示、定位、经纬度等） <a class="header-anchor" href="#地图-地图显示、定位、经纬度等" aria-label="Permalink to &quot;地图（地图显示、定位、经纬度等）&quot;">​</a></h2><h3 id="map-view" tabindex="-1">map_view <a class="header-anchor" href="#map-view" aria-label="Permalink to &quot;map_view&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/map_view" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/map_view</a></p><p>一个用于在 iOS 和 Android 上显示谷歌地图的 Flutter 插件</p><h3 id="flutter-map" tabindex="-1">flutter_map <a class="header-anchor" href="#flutter-map" aria-label="Permalink to &quot;flutter_map&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_map" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_map</a></p><p>基于 leaflet 的 Flutter 地图包</p><h3 id="location" tabindex="-1">location <a class="header-anchor" href="#location" aria-label="Permalink to &quot;location&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/location" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/location</a></p><p>这个插件 处理 Android 和 iOS 上的位置。它还提供位置更改时的回调。</p><h3 id="latlong" tabindex="-1">latlong <a class="header-anchor" href="#latlong" aria-label="Permalink to &quot;latlong&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/latlong" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/latlong</a></p><p>LatLong 是一个计算通用的纬度和经度的轻量级库。</p><h3 id="flutter-amap" tabindex="-1">flutter_amap <a class="header-anchor" href="#flutter-amap" aria-label="Permalink to &quot;flutter_amap&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_amap" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_amap</a></p><p>高德地图 3d flutter 组件。展示原生 android、ios 高德地图，并与 flutter 交互。</p><h2 id="二维码" tabindex="-1">二维码 <a class="header-anchor" href="#二维码" aria-label="Permalink to &quot;二维码&quot;">​</a></h2><h3 id="barcode-scan" tabindex="-1">barcode_scan <a class="header-anchor" href="#barcode-scan" aria-label="Permalink to &quot;barcode_scan&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/barcode_scan" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/barcode_scan</a></p><p>用于扫描 2D 条形码和 QRCodes 的 Flutter 插件。</p><h3 id="qrcode-reader" tabindex="-1">qrcode_reader <a class="header-anchor" href="#qrcode-reader" aria-label="Permalink to &quot;qrcode_reader&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/qrcode_reader" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/qrcode_reader</a></p><p>使用相机读取二维码的 Flutter 插件。</p><h2 id="webview" tabindex="-1">WebView <a class="header-anchor" href="#webview" aria-label="Permalink to &quot;WebView&quot;">​</a></h2><h3 id="flutter-webview-plugin" tabindex="-1">flutter_webview_plugin <a class="header-anchor" href="#flutter-webview-plugin" aria-label="Permalink to &quot;flutter_webview_plugin&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_webview_plugin" target="_blank" rel="noreferrer">pub.dartlang.org/packages/fl…</a></p><p>允许 Flutter 与原生 Webview 进行通信的插件。</p><h2 id="图表库" tabindex="-1">图表库 <a class="header-anchor" href="#图表库" aria-label="Permalink to &quot;图表库&quot;">​</a></h2><h3 id="charts-common" tabindex="-1">charts-common <a class="header-anchor" href="#charts-common" aria-label="Permalink to &quot;charts-common&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/charts_flutter" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/charts_flutter</a></p><p>Material Design 风格的图表库</p><h3 id="charts-flutter" tabindex="-1">charts-flutter <a class="header-anchor" href="#charts-flutter" aria-label="Permalink to &quot;charts-flutter&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/charts_common" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/charts_common</a></p><p>通用的图表库组件</p><h3 id="flutter-circular-chart" tabindex="-1">flutter_circular_chart <a class="header-anchor" href="#flutter-circular-chart" aria-label="Permalink to &quot;flutter_circular_chart&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_circular_chart" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_circular_chart</a></p><p>一个让你使用 flutter 轻松创建的动画圆形图控件的库。</p><h2 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h2><h3 id="pwa" tabindex="-1">pwa <a class="header-anchor" href="#pwa" aria-label="Permalink to &quot;pwa&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/pwa" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/pwa</a></p><p>基于 Dart 的 PWA 应用程序的</p><h3 id="fluwx-微信" tabindex="-1">fluwx (微信) <a class="header-anchor" href="#fluwx-微信" aria-label="Permalink to &quot;fluwx (微信)&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/fluwx" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/fluwx</a></p><p>适用于 Flutter 的微信 SDK，方便快捷。</p><h3 id="alipay-me-支付宝" tabindex="-1">alipay_me (支付宝) <a class="header-anchor" href="#alipay-me-支付宝" aria-label="Permalink to &quot;alipay_me (支付宝)&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/alipay_me" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/alipay_me</a></p><p>支付宝插件，支持登录、支付。android 还支持本地计算签名。</p><h3 id="flutter-qq-qq" tabindex="-1">flutter_qq (QQ) <a class="header-anchor" href="#flutter-qq-qq" aria-label="Permalink to &quot;flutter_qq (QQ)&quot;">​</a></h3><p><a href="https://pub.dartlang.org/packages/flutter_qq" target="_blank" rel="noreferrer">https://pub.dartlang.org/packages/flutter_qq</a></p><p>QQ 登录、分享到 QQ、分享到 QQ 空间。</p><h2 id="学习资料" tabindex="-1">学习资料 <a class="header-anchor" href="#学习资料" aria-label="Permalink to &quot;学习资料&quot;">​</a></h2><p><a href="https://github.com/AweiLoveAndroid/Flutter-learning" target="_blank" rel="noreferrer">https://github.com/AweiLoveAndroid/Flutter-learning</a></p><p>网友阿韦整理的学习资料和 demo.</p><p>Flutter 实用例子进阶课程</p>`,337)]))}const F=s(u,[["render",b]]);export{k as __pageData,F as default};
