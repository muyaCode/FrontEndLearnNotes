import{_ as a,c as n,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const F=JSON.parse('{"title":"ECMAScript-15(ES2024)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-15(ES2024).md","filePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-15(ES2024).md","lastUpdated":1750954157000}'),o={name:"Document/JavaScript笔记/ECMAScript语法/ECMAScript-15(ES2024).md"};function e(r,s,t,c,B,y){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="ecmascript-15-es2024" tabindex="-1">ECMAScript-15(ES2024) <a class="header-anchor" href="#ecmascript-15-es2024" aria-label="Permalink to &quot;ECMAScript-15(ES2024)&quot;">​</a></h1><p>ECMAScript 2024（ES15） 即将发布（2024年6月），新的版本带来了非常多全新的特性。其中有 5 个全新的 JS 方法。</p><h2 id="提案" tabindex="-1">提案 <a class="header-anchor" href="#提案" aria-label="Permalink to &quot;提案&quot;">​</a></h2><p>GitHub：<a href="https://github.com/tc39/proposal-temporal" target="_blank" rel="noreferrer">https://github.com/tc39/proposal-temporal</a></p><p>文档：<a href="https://github.com/tc39/proposal-temporal" target="_blank" rel="noreferrer">https://github.com/tc39/proposal-temporal</a></p><h2 id="temporal" tabindex="-1">Temporal <a class="header-anchor" href="#temporal" aria-label="Permalink to &quot;Temporal&quot;">​</a></h2><p><a href="https://juejin.cn/post/7348832432080355379" target="_blank" rel="noreferrer">2024 年 5 个令人兴奋的 JavaScript 新功能 - 掘金 (juejin.cn)</a></p><h2 id="_01-promise-withresolvers" tabindex="-1">01：Promise.withResolvers <a class="header-anchor" href="#_01-promise-withresolvers" aria-label="Permalink to &quot;01：Promise.withResolvers&quot;">​</a></h2><p>这个功能引入了一个新方法来创建一个 promise，直接返回 resolve 和 reject 的回调。使用 Promise.withResolvers ，我们可以创建直接在其执行函数之外 resolve 和 reject</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">reject</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">withResolvers</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Resolved after 2 seconds&#39;</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_02-object-groupby" tabindex="-1">02：Object.groupBy() <a class="header-anchor" href="#_02-object-groupby" aria-label="Permalink to &quot;02：Object.groupBy()&quot;">​</a></h2><p>Object.groupBy() 方法是一项新添加的功能，允许我们按照特定属性将数组中的 <strong>对象分组</strong>，从而使数据处理变得更加容易。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pets</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;男&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;张三&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;女&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;李四&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  { </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;男&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;王五&#39;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">groupBy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pets</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pet</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> pet</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   女: [{ gender: &#39;女&#39;, name: &#39;李四&#39; }]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   男: [{ gender: &#39;男&#39;, name: &#39;张三&#39; }, { gender: &#39;男&#39;, name: &#39;王五&#39; }],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_03-temporal" tabindex="-1">03：Temporal <a class="header-anchor" href="#_03-temporal" aria-label="Permalink to &quot;03：Temporal&quot;">​</a></h2><p>Temporal提案引入了一个新的API，以更直观和高效的方式 <strong>处理日期和时间</strong>。例如，Temporal API提供了新的日期、时间和持续时间的数据类型，以及用于创建、操作和格式化这些值的函数。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> today</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Temporal</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">PlainDate</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">year</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">month</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">day</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">19</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">today</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// 输出: 2023-11-19</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> duration</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Temporal</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">hours</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">minutes</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> tomorrow</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> today</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">duration</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tomorrow</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// 输出: 2023-11-20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_04-records-和-tuples" tabindex="-1">04：Records 和 Tuples <a class="header-anchor" href="#_04-records-和-tuples" aria-label="Permalink to &quot;04：Records 和 Tuples&quot;">​</a></h2><p>Records 和 Tuples 是全新的数据结构，提供了一种更简洁和类型安全的方式来创建对象和数组。</p><ul><li>Records 类似于对象，但具有具体类型的固定属性集。</li><li>Tuples 类似于数组，但具有固定长度，每个元素可以具有不同类型。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> record</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> #{</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;JavaScript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  year</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2024</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">record</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 输出: JavaScript</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_05-装饰器-decorators" tabindex="-1">05：装饰器（Decorators） <a class="header-anchor" href="#_05-装饰器-decorators" aria-label="Permalink to &quot;05：装饰器（Decorators）&quot;">​</a></h2><p>装饰器（Decorators）是一种提议的语法，用于添加元数据或修改类、函数或属性的行为。装饰器可用于实现各种功能，如日志记录、缓存和依赖注入。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> logged</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">descriptor</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> original</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> descriptor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  descriptor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Calling </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> with\`</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> original</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> descriptor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Example</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E06C75;">logged</span></span>
<span class="line"><span style="color:#61AFEF;">  sum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> e</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Example</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 输出：[1, 2]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>ES15 还提供了很多其他的新提案，比如：新的正则<code>v</code>、管道符<code>|&gt;</code>、<code>String.prototype.isWellFormed()</code>、<code>ArrayBuffer.prototype.resize</code> 等等。大家有兴趣的同学可以额外到 mdn 网站上进行了解~~</p>`,25)]))}const A=a(o,[["render",e]]);export{F as __pageData,A as default};
