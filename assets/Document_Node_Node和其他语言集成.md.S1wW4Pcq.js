import{_ as r,c as t,o,ah as a}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"Node 和其他语言集成","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node/Node和其他语言集成.md","filePath":"Document/Node/Node和其他语言集成.md","lastUpdated":1750954157000}'),n={name:"Document/Node/Node和其他语言集成.md"};function s(c,e,d,i,p,l){return o(),t("div",null,e[0]||(e[0]=[a('<h1 id="node-和其他语言集成" tabindex="-1">Node 和其他语言集成 <a class="header-anchor" href="#node-和其他语言集成" aria-label="Permalink to &quot;Node 和其他语言集成&quot;">​</a></h1><h2 id="napi-rs" tabindex="-1">napi.rs <a class="header-anchor" href="#napi-rs" aria-label="Permalink to &quot;napi.rs&quot;">​</a></h2><p>NAPI-RS 是一个使用 Rust 构建预编译 Node.js 原生扩展的框架</p><p>官网：<a href="https://napi.rs/docs/introduction/getting-started" target="_blank" rel="noreferrer">入门 – NAPI-RS --- Getting started – NAPI-RS</a></p><p>开源地址：<a href="https://github.com/napi-rs/napi-rs" target="_blank" rel="noreferrer">https://github.com/napi-rs/napi-rs</a></p><p>教程：</p><ul><li><a href="https://juejin.cn/post/7226879080415395897" target="_blank" rel="noreferrer">初识 NAPI-RS - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7243413934765408315" target="_blank" rel="noreferrer">如何基于 napi-rs 打造 Rust 前端工具链？ - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7202541740934709303" target="_blank" rel="noreferrer">NAPI-RS 是怎么工作的: 从 NAPI 到 Build Script &amp; FFI - 掘金 (juejin.cn)</a></li></ul><h2 id="neon" tabindex="-1">neon <a class="header-anchor" href="#neon" aria-label="Permalink to &quot;neon&quot;">​</a></h2><p>开源地址：<a href="https://github.com/neon-bindings/neon" target="_blank" rel="noreferrer">https://github.com/neon-bindings/neon</a></p><p>官网：<a href="https://www.neon-bindings.com/" target="_blank" rel="noreferrer">www.neon-bindings.com/</a></p><p>它包含一组工具和胶水代码，能够帮助 <code>Node.js</code> 开发者提高开发效率，允许他们在 <code>Rust</code> 中编写原生的 <code>Node.js</code> 模块，并在<code>JavaScript</code> 代码中无缝集成。使用 <code>neon</code> 可以像在 <code>C/ C++</code> 中一样创建一个原生 <code>Node</code> 模块，并且使用起来很简单，不会让用户在不安全的代码中 <strong>(Rust 特性之一就是编写安全代码)</strong> 感到害怕或头疼。使用 <code>Rust</code> 编写原生模块具有如下的好处：</p><ul><li>提供原生的性能</li><li>可以编写多线程的并发程序</li><li>可以使用 <code>Rust</code> 的社区生态，各种开源包</li><li>可以调用本地操作系统的 <code>API</code></li></ul><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><p><code>Native addon(原生扩展)</code> 可以做到 <code>JavaScript</code> 做不到的一些事情，比如调用系统库、打开一个窗口、调用 <code>GPU</code> 等一些系统指令，另外在一些 <code>CPU</code> 密集计算的地方，比如说区块链货币计算，文件加密解密等等需要比较高的计算能力，此时我们就可以使用原生模块来进行扩展，原生模块的本质就是一个二进制文件。而前端目前都有哪些比较出名的应用场景呢？</p><p>比如：</p><ul><li>swc(<a href="https://github.com/swc-project/swc" target="_blank" rel="noreferrer">swc-project/swc</a>)：<code>swc</code> 是一个使用 <code>Rust</code> 编写的超级超级快的 <code>Typescript / Javascript</code> 编译器（类似于 <code>babel</code>），它是一个可以同时给 <code>Rust</code> 和 <code>Javascript</code> 使用的库。想要在 <code>Rust</code> 中使用，可以参考这里的 <a href="https://rustdoc.swc.rs/swc/" target="_blank" rel="noreferrer">swc - Rust</a>，想要在 <code>Javascript</code> 中使用，可以参考这里的 <a href="https://swc.rs/docs/getting-started" target="_blank" rel="noreferrer">Getting Started – SWC</a>。</li><li>next.js(&gt; v12.0): 最新的 <code>next.js</code> 中也使用到了 <code>Rust</code> 构建的原生模块作为编译器， <code>next.js</code> 的编译器是基于上述所说的 <code>swc</code> 来写的，根据官方的介绍，使用了最新的编译器之后本地重新编译速度<strong>提升了 3 倍以上</strong>，生产环境的打包速度<strong>提升了 5 倍以上</strong>，并且编译速度<strong>比 Babel 快 17 倍以上</strong>。 <a href="https://nextjs.org/blog/next-12#faster-builds-and-fast-refresh-with-rust-compiler" target="_blank" rel="noreferrer">Next.js 12 | Next.js (nextjs.org)</a>在这里。</li><li>另外还有一些第三方开源的使用 <code>Rust</code> 编写的 <code>npm</code> 包，比如加密算法 <a href="https://github.com/napi-rs/node-rs/tree/master/packages/bcrypt" target="_blank" rel="noreferrer">node-rs/packages/bcrypt</a> ，中文分词 <a href="https://github.com/napi-rs/node-rs/tree/master/packages/jieba" target="_blank" rel="noreferrer">node-rs/packages/jieba</a> 等，其中都涉及到复杂的计算。</li></ul><p>教程：<a href="https://juejin.cn/post/7028838434957443086" target="_blank" rel="noreferrer">Node 和 Rust 之间能碰撞出什么火花? - 掘金 (juejin.cn)</a></p><h2 id="node-gyp" tabindex="-1">node-gyp <a class="header-anchor" href="#node-gyp" aria-label="Permalink to &quot;node-gyp&quot;">​</a></h2><p><code>node-gyp</code>是一个用 Node.js 编写的跨平台命令行工具，用于为 Node.js 编译本机插件模块。</p><p>它包含之前由 Chromium 团队使用的 gyp-next 项目的供应副本，扩展以支持 Node.js 原生插件的开发。</p><p><a href="https://juejin.cn/post/6844903971220357134" target="_blank" rel="noreferrer">node-gyp 实现 nodejs 调用 C++ - 掘金 (juejin.cn)</a></p>',21)]))}const g=r(n,[["render",s]]);export{u as __pageData,g as default};
