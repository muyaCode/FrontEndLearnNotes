import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"6.结构类型系统兼容性","description":"","frontmatter":{},"headers":[],"relativePath":"Document/TypeScript/TypeScript语法基础/6-结构类型系统兼容性.md","filePath":"Document/TypeScript/TypeScript语法基础/6-结构类型系统兼容性.md","lastUpdated":1750954157000}'),o={name:"Document/TypeScript/TypeScript语法基础/6-结构类型系统兼容性.md"};function e(r,s,c,t,B,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_6-结构类型系统兼容性" tabindex="-1">6.结构类型系统兼容性 <a class="header-anchor" href="#_6-结构类型系统兼容性" aria-label="Permalink to &quot;6.结构类型系统兼容性&quot;">​</a></h1><h2 id="_1-接口的兼容性" tabindex="-1">1 接口的兼容性 <a class="header-anchor" href="#_1-接口的兼容性" aria-label="Permalink to &quot;1 接口的兼容性&quot;">​</a></h2><ul><li>如果传入的变量和声明的类型不匹配，TS就会进行兼容性检查</li><li>原理是<code>Duck-Check</code>,就是说只要目标类型中声明的属性变量在源类型中都存在就是兼容的</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    gender</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 要判断目标类型\`Person\`是否能够兼容输入的源类型\`Animal\`</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">animal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> animal</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    gender</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 只有在传参的时候两个变量之间才会进行兼容性的比较，赋值的时候并不会比较,会直接报错</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    gender</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="_2-基本类型的兼容性" tabindex="-1">2 基本类型的兼容性 <a class="header-anchor" href="#_2-基本类型的兼容性" aria-label="Permalink to &quot;2 基本类型的兼容性&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 基本数据类型也有兼容性判断</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> str</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;zhufeng&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">num</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> str</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 只要有toString()方法就可以赋给字符串变量</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> num2</span><span style="color:#ABB2BF;"> : {</span></span>
<span class="line"><span style="color:#61AFEF;">  toString</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> str2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;jiagou&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">num2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> str2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_3-类的兼容性" tabindex="-1">3 类的兼容性 <a class="header-anchor" href="#_3-类的兼容性" aria-label="Permalink to &quot;3 类的兼容性&quot;">​</a></h2><ul><li>在TS中是结构类型系统，只会对比结构而不在意类型</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Bird</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">   swing</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Bird</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Bird</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 并不是父类兼容子类，子类不兼容父类</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Animal</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果父类和子类结构一样，也可以的</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Bird</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Bird</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Bird</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Animal</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//甚至没有关系的两个类的实例也是可以的</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Bird</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;"> ;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Bird</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Bird</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Animal</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="_4-函数的兼容性" tabindex="-1">4 函数的兼容性 <a class="header-anchor" href="#_4-函数的兼容性" aria-label="Permalink to &quot;4 函数的兼容性&quot;">​</a></h2><ul><li>比较函数的时候是要先比较函数的参数，再比较函数的返回值</li></ul><h3 id="_4-1-比较参数" tabindex="-1">4.1 比较参数 <a class="header-anchor" href="#_4-1-比较参数" aria-label="Permalink to &quot;4.1 比较参数&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> sumFunc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> sum</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">sumFunc</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> f1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">sum</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> f1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以省略一个参数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> f2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">   return</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">sum</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> f2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以省略二个参数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> f3</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">sum</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> f3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 多一个参数可不行</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> f4</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">sum</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> f4</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_4-2-比较返回值" tabindex="-1">4.2 比较返回值 <a class="header-anchor" href="#_4-2-比较返回值" aria-label="Permalink to &quot;4.2 比较返回值&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> GetPerson</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> getPerson</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">GetPerson</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值一样可以</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> g1</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">getPerson</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> g1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值多一个属性也可以</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> g2</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;male&#39;</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">getPerson</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> g2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值少一个属性可不行</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> g3</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zhufeng&#39;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">getPerson</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> g3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 因为有可能要调用返回值上的方法</span></span>
<span class="line"><span style="color:#61AFEF;">getPerson</span><span style="color:#ABB2BF;">().</span><span style="color:#E5C07B;">age</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toFixed</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="_5-函数参数的协变与逆变" tabindex="-1">5 函数参数的协变与逆变 <a class="header-anchor" href="#_5-函数参数的协变与逆变" aria-label="Permalink to &quot;5 函数参数的协变与逆变&quot;">​</a></h2><ul><li>协变（Covariant）：只在同一个方向；</li><li>逆变（Contravariant）：只在相反的方向；</li><li>双向协变（Bivariant）：包括同一个方向和不同方向；</li><li>不变（Invariant）：如果类型不完全相同，则它们是不兼容的。</li><li>A ≼ B 意味着 A 是 B 的子类型。</li><li>A → B 指的是以 A 为参数类型，以 B 为返回值类型的函数类型。</li><li>x : A 意味着 x 的类型为 A</li><li>返回值类型是协变的，而参数类型是逆变的</li><li>返回值类型可以传子类,参数可以传父类</li><li>参数逆变父类 返回值协变子类 搀你父,返鞋子</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">{}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Dog</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;Dog&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> BlackDog</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Dog</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> WhiteDog</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Dog</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E06C75;"> home</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;北京&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> animal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> blackDog</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">BlackDog</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> whiteDog</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">WhiteDog</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Callback</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">dog</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Dog</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">Dog</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">Callback</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">    callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">whiteDog</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 不行  callback(redDog);</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ChildToChild</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">blackDog</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">BlackDog</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> BlackDog</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> childToChild</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ChildToChild</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">blackDog</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">BlackDog</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">BlackDog</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> blackDog</span></span>
<span class="line"><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">childToChild</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 也不行,理由同上</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ChildToParent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">blackDog</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">BlackDog</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> childToParent</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ChildToParent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">blackDog</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">BlackDog</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Animal</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> animal</span></span>
<span class="line"><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">childToParent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 不行 因为有可能调用返回的Dog的方法</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ParentToParent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">animal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Animal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> parentToParent</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ParentToParent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">animal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Animal</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> animal</span></span>
<span class="line"><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentToParent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以,所有的狗都是动物,返回的不管什么狗都是狗</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ParentToChild</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">animal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> BlackDog</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> parentToChild</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ParentToChild</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">animal</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Animal</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">BlackDog</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> blackDog</span></span>
<span class="line"><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentToChild</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// (Animal → Greyhound) ≼ (Dog → Dog)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回值类型很容易理解：黑狗是狗的子类。但参数类型则是相反的：动物是狗的父类！</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// string | number|boolean 是 string | number的父类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// string是string|number的子类型</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Callback2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> exec2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Callback2</span><span style="color:#ABB2BF;">):</span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">    callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ParentToChild2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> parentToChild2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ParentToChild2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">exec2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentToChild2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Callback3</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> exec3</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Callback2</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> ParentToParent3</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> parentToParent3</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ParentToParent3</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">exec3</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parentToChild3</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><ul><li>在 TypeScript 中， 参数类型是双向协变的 ，也就是说既是协变又是逆变的，而这并不安全。但是现在你可以在 TypeScript 2.6 版本中通过 <code>--strictFunctionTypes</code> 或 <code>--strict</code> 标记来修复这个问题</li></ul><h2 id="_6-泛型的兼容性" tabindex="-1">6 泛型的兼容性 <a class="header-anchor" href="#_6-泛型的兼容性" aria-label="Permalink to &quot;6 泛型的兼容性&quot;">​</a></h2><ul><li>泛型在判断兼容性的时候会先判断具体的类型,然后再进行兼容性判断</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 接口内容为空没用到泛型的时候是可以的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1.接口内容为空没用到泛型的时候是可以的</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Empty</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;{}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">!:</span><span style="color:#E5C07B;">Empty</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">!:</span><span style="color:#E5C07B;">Empty</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.接口内容不为空的时候不可以</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> NotEmpty</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;{</span></span>
<span class="line"><span style="color:#E06C75;">  data</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">T</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x1</span><span style="color:#ABB2BF;">!:</span><span style="color:#E5C07B;">NotEmpty</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> y1</span><span style="color:#ABB2BF;">!:</span><span style="color:#E5C07B;">NotEmpty</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#E06C75;">x1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> y1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现原理如下,称判断具体的类型再判断兼容性</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> NotEmptyString</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> NotEmptyNumber</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> xx2</span><span style="color:#ABB2BF;">!:</span><span style="color:#E5C07B;">NotEmptyString</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> yy2</span><span style="color:#ABB2BF;">!:</span><span style="color:#E5C07B;">NotEmptyNumber</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">xx2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> yy2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="_7-枚举的兼容性" tabindex="-1">7 枚举的兼容性 <a class="header-anchor" href="#_7-枚举的兼容性" aria-label="Permalink to &quot;7 枚举的兼容性&quot;">​</a></h2><ul><li>枚举类型与数字类型兼容，并且数字类型与枚举类型兼容</li><li>不同枚举类型之间是不兼容的</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 数字可以赋给枚举</span></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Colors</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Red</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Yellow</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Colors</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Colors</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;1&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 枚举值可以赋给数字</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Colors</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Red</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,25)]))}const C=n(o,[["render",e]]);export{b as __pageData,C as default};
