import{_ as p,c as e,o as t,ah as r}from"./chunks/framework.DqD713j2.js";const g=JSON.parse('{"title":"技术提升","description":"","frontmatter":{},"headers":[],"relativePath":"Document/技术提升和职业规划/skillUpgrading.md","filePath":"Document/技术提升和职业规划/skillUpgrading.md","lastUpdated":1750954157000}'),o={name:"Document/技术提升和职业规划/skillUpgrading.md"};function l(i,a,n,s,d,h){return t(),e("div",null,a[0]||(a[0]=[r('<h1 id="技术提升" tabindex="-1">技术提升 <a class="header-anchor" href="#技术提升" aria-label="Permalink to &quot;技术提升&quot;">​</a></h1><h2 id="经验分享-如何在创业小厂里做技术领导" tabindex="-1">经验分享，如何在创业小厂里做技术领导 <a class="header-anchor" href="#经验分享-如何在创业小厂里做技术领导" aria-label="Permalink to &quot;经验分享，如何在创业小厂里做技术领导&quot;">​</a></h2><p>今天有位老板朋友问：他在创业，融资、推广、运营、内容都没问题，唯独缺少技术研发带头人，应该怎么去找这类人才，或者将来面试招聘的时候应该注重哪些方面？</p><p>创业公司的技术领导者不仅要负责开发产品，还要管理团队、建设基础设施、解决技术难题，是一项充满挑战和机遇的工作，需要具备多方面的能力和素质。这篇博客从工具、流程、规范三个方面，介绍了如何培养技术领导力： 🔔 工具</p><p>▢ Git：版本管理工具 ▢ 自动化测试：对产品质量的提升非常明显 ▢ 代码静态分析：提升代码质量、减少安全隐患 ▢ 故障收集：提前发现问题、解决问题</p><p>🔔 流程</p><p>▢ 立会：团队成员汇报前一天的工作结果，公开今天的计划，寻求帮助或协作 ▢ 需求评审会：判断是否有必要、是否已完成设计、是否包含数据预期与验证标准 ▢ 技术评审会：了解解决问题的思路、选择此方案的原因、潜在风险、其它备选方案、优劣对比 ▢ Code Review：检查代码质量、逻辑正确性、注释完整性、测试覆盖率等</p><p>🔔 规范</p><p>▢ Code Style：代码风格规范 ▢ 需求规范：明确需求描述、设计图、验收标准等 ▢ 代码架构规范：规定代码结构、模块划分、接口定义等 ▢ 文档规范：要求编写完善的文档 ▢ 版本管理规范：约定分支管理、提交信息、合并请求等</p><p><a href="https://blog.meathill.com/management/how-to-be-a-tech-leader-in-startup.html" target="_blank" rel="noreferrer">⋙ 来源</a></p><h2 id="🤖-2023-年程序员生存指南" tabindex="-1">🤖 2023 年程序员生存指南 <a class="header-anchor" href="#🤖-2023-年程序员生存指南" aria-label="Permalink to &quot;🤖 2023 年程序员生存指南&quot;">​</a></h2><p>▢ 不要在互联网公司做低代码项目</p><p>▢ 保证一定强度的刷题，不要用 go 刷题，用 cpp 或者 java，性价比更高</p><p>▢ 凡是要求名校的岗位，一定是不需要名校就可以干的，不去也罢</p><p>▢ 去有增长的地方，比如 temu 和飞书之间选 temu，身体累比心累强，996 比失业强</p><p>▢ 确定想出国就选外企，不然别选，中美博弈大背景下不稳定</p><p>▢ 失业了就坚持锻炼身体，高强度学习，一边兼职一边等待机会</p><p>▢ 找到队友</p><p>▢ 不要相信任何人的经验，因为大部分人的经验都不曾经历过现在的寒潮 （脉脉）</p><h2 id="学习参考" tabindex="-1">学习参考 <a class="header-anchor" href="#学习参考" aria-label="Permalink to &quot;学习参考&quot;">​</a></h2><p>第 1 关 不畏惧,需要什么就学什么</p><p>第 ⒉ 关 了解 EggJS 的基本概念、它的使用场景，看看相关的博客</p><p>第 3 关 把 EggJS 相关的 Demo 工程/仓库下载到本地，粗略看看目录结构</p><p>第 4 关 根据官方配套的教程(或市面上免费/付费的教程)，看看如何在命令行中把它 runy 运行起来</p><p>第 5 关进一步阅读它的文档，了解各种配置、开关，逐个测试下，完整的掌握它的具体使用方法</p><p>第 6 关 看看它如何运维发布，找个玩具项目，完整的走一遍从 0 到 1 的构建发布过程</p><p>第 7 关 把它引入到自己的个人/业务项目中，给它编写中间件或者插件</p><p>第 8 关 把它引入到生产环境中，看看它在真实环境中表现如何，当然可以多做一些性能压测</p><p>第 9 关 开发和运行一段时间后，看看它有没有什么报错或者 Bug，缺陷,尝试修复它</p><p>第 10 关 如果修复不了，就阅读 EggJS 源码，找到有问题的位置，分析下这里的调用流程</p><p>第 11 关 如果是跨领域问题，补充与问题相关的知识（比如网络知识)﹐来寻找理论支撑</p><p>第 12 关 依然解决不了，就各种 Google/issue/阿里云工单/付费请教....不择手段，看如何求助搞定</p><p>第 13 关 最终依然要到源码层面，逐行 Debug，彻底把该流程弄通，问题点和解决方案搞懂</p><p>第 14 关 提交代码的 Fix/Feature 之类的分支，向官方社区提交缺陷修复后的代码</p><p>第 15 关 把这些过程中典型的问题和沉淀的知识,整理成一篇篇的文档，记录下来</p><p>第 16 关把如上的沉淀，通过大会/公开分享/直播...，亲口讲出来，教给别人，增强自己的理论体系</p><p>第 17 关 如此反复如上 7~16，根据自己的需求，一点点对 EggJS 做进一步的定制改造/二次开发</p><p>第 18 关 玩溜了之后，开发一个比 EggJS 更好的框架，或者自研更符合需求的新的替代方案</p><hr><h2 id="前端基建项目" tabindex="-1">前端基建项目 <a class="header-anchor" href="#前端基建项目" aria-label="Permalink to &quot;前端基建项目&quot;">​</a></h2>',40)]))}const u=p(o,[["render",l]]);export{g as __pageData,u as default};
