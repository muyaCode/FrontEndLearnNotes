import{_ as n,c as a,o as e,ah as l}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"WebSocket","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端进阶技巧/综合能力提升/WebSocket.md","filePath":"Document/前端进阶技巧/综合能力提升/WebSocket.md","lastUpdated":1750954157000}'),o={name:"Document/前端进阶技巧/综合能力提升/WebSocket.md"};function p(r,s,t,c,B,i){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h1><p><strong>MDN文档</strong>：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API" target="_blank" rel="noreferrer">WebSocket API - Web API | MDN (mozilla.org)</a></p><p><a href="https://zh.javascript.info/websocket" target="_blank" rel="noreferrer">WebSocket (javascript.info)</a></p><p><a href="https://www.runoob.com/html/html5-websocket.html" target="_blank" rel="noreferrer">HTML5 WebSocket | 菜鸟教程 (runoob.com)</a></p><h2 id="websocket简介" tabindex="-1">WebSocket简介 <a class="header-anchor" href="#websocket简介" aria-label="Permalink to &quot;WebSocket简介&quot;">​</a></h2><p><strong>WebSocket API</strong> 是一种先进的技术，可在用户浏览器和服务器之间开启双向交互式通信会话。利用该 API，可以向服务器发送信息，并接收事件驱动的响应，而无需轮询服务器以获得回复。</p><p><strong>备注：</strong> 虽然 WebSocket 连接在功能上与标准 Unix 风格的 socket 有些类似，但两者并无关联。</p><h2 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h2><h3 id="websocket-1" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer"><code>WebSocket</code></a> <a class="header-anchor" href="#websocket-1" aria-label="Permalink to &quot;[\`WebSocket\`](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket)&quot;">​</a></h3><p><strong>用于连接 WebSocket 服务器的主要接口，之后可以在这个连接上发送和接收数据。</strong></p><h3 id="closeevent" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CloseEvent" target="_blank" rel="noreferrer"><code>CloseEvent</code></a> <a class="header-anchor" href="#closeevent" aria-label="Permalink to &quot;[\`CloseEvent\`](https://developer.mozilla.org/zh-CN/docs/Web/API/CloseEvent)&quot;">​</a></h3><p><strong>连接关闭时 WebSocket 对象触发的事件。</strong></p><h3 id="messageevent" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MessageEvent" target="_blank" rel="noreferrer"><code>MessageEvent</code></a> <a class="header-anchor" href="#messageevent" aria-label="Permalink to &quot;[\`MessageEvent\`](https://developer.mozilla.org/zh-CN/docs/Web/API/MessageEvent)&quot;">​</a></h3><p><strong>当从服务器获取到消息的时候 WebSocket 对象触发的事件。</strong></p><h2 id="websocket-api的基本使用" tabindex="-1">WebSocket API的基本使用 <a class="header-anchor" href="#websocket-api的基本使用" aria-label="Permalink to &quot;WebSocket API的基本使用&quot;">​</a></h2><p>WebSocket API：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">WebSocket - Web API 接口 |MDN的 (mozilla.org)</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建ws连接</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> ws</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WebSocket</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ws://localhost:8080/test&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">ws</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onopen</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;WebSocket 连接已经建立。&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    ws</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello, server!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">ws</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onmessage</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;收到服务器消息：&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">ws</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onerror</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;WebSocket 连接出现错误：&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">ws</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclose</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;WebSocket 连接已经关闭。&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="编写-websocket-客户端应用" tabindex="-1">编写 WebSocket 客户端应用 <a class="header-anchor" href="#编写-websocket-客户端应用" aria-label="Permalink to &quot;编写 WebSocket 客户端应用&quot;">​</a></h2><p>MDN文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications" target="_blank" rel="noreferrer">编写 WebSocket 客户端应用 - Web API | MDN (mozilla.org)</a></p><h2 id="编写-websocket-服务器" tabindex="-1">编写 WebSocket 服务器 <a class="header-anchor" href="#编写-websocket-服务器" aria-label="Permalink to &quot;编写 WebSocket 服务器&quot;">​</a></h2><p>MDN文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API/Writing_WebSocket_servers" target="_blank" rel="noreferrer">编写 WebSocket 服务器 - Web API | MDN (mozilla.org)</a></p><h2 id="deno用-javascript-编写-websocket-服务器" tabindex="-1">Deno用 JavaScript 编写 WebSocket 服务器 <a class="header-anchor" href="#deno用-javascript-编写-websocket-服务器" aria-label="Permalink to &quot;Deno用 JavaScript 编写 WebSocket 服务器&quot;">​</a></h2><p>参考：<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_a_WebSocket_server_in_JavaScript_Deno#code" target="_blank" rel="noreferrer">使用 JavaScript 编写 WebSocket 服务器 （Deno） - Web API |MDN的 (mozilla.org)</a></p><p>此示例演示如何使用 Deno 创建 WebSocket API 服务器，并附带一个网页。</p><p>Deno 是一个 JavaScript 运行时，它支持 TypeScript 即时编译和缓存。Deno 内置了格式化程序、linter、测试运行器等，还实现了许多 Web API。通过符合 Web 标准，所有特定于 Deno 的 API 都在命名空间下实现。<code>Deno</code></p><p><a href="https://deno.com/" target="_blank" rel="noreferrer">Deno 网站</a>提供了安装 Deno 的说明。</p><p>代码将包含在两个文件中，一个用于服务器，一个用于客户端。</p><h3 id="服务端" tabindex="-1">服务端 <a class="header-anchor" href="#服务端" aria-label="Permalink to &quot;服务端&quot;">​</a></h3><p>创建一个<code>main.js</code>文件。此文件将包含简单 HTTP 服务器的代码，该服务器也将为客户端 HTML 提供服务。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Deno</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">serve</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">  handler</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // If the request is a websocket upgrade,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // we need to use the Deno.upgradeWebSocket helper</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;upgrade&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;websocket&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">socket</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Deno</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">upgradeWebSocket</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">      socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onopen</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;CONNECTED&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      };</span></span>
<span class="line"><span style="color:#E5C07B;">      socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onmessage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`RECEIVED: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;pong&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      };</span></span>
<span class="line"><span style="color:#E5C07B;">      socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclose</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;DISCONNECTED&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">      socket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onerror</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ERROR:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> response</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // If the request is a normal HTTP request,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // we serve the client HTML file.</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> file</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> Deno</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./index.html&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">read</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Response</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readable</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><code>Deno.upgradeWebSocket()</code>将连接升级到 WebSocket 连接，<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism" target="_blank" rel="noreferrer">这在协议升级机制</a>中有进一步说明。</p><p><a href="https://deno.land/api@v1.36.4?s=Deno.serve" target="_blank" rel="noreferrer"><code>Deno.serve()</code></a> 在后台使用 <code>Deno.listen()</code>和 <code>Deno.serveHttp()</code>，是一个更高级的接口，可以轻松设置 HTTP 服务器。</p><p>如果没有它，代码将如下所示。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#C678DD;"> await</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> conn</span><span style="color:#C678DD;"> of</span><span style="color:#E5C07B;"> Deno</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;"> })) {</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#C678DD;"> await</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">respondWith</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">of</span><span style="color:#E5C07B;"> Deno</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">serveHttp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">conn</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">    respondWith</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">​</a></h3><p>创建一个<code>index.html</code>文件。此文件将包含一个脚本，该脚本将在建立连接后每五秒对服务器执行一次 ping 操作。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">doctype</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;WebSocket Test&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;Sends a ping every five seconds&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;output&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> wsUri</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;ws://127.0.0.1/&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> output</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#output&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> websocket</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WebSocket</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">wsUri</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> pingInterval</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> writeToScreen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    output</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertAdjacentHTML</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;afterbegin&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">\`&lt;p&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">message</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/p&gt;\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> sendMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    writeToScreen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`SENT: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">message</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    websocket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  websocket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onopen</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    writeToScreen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;CONNECTED&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    sendMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ping&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    pingInterval</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      sendMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ping&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  websocket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclose</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    writeToScreen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;DISCONNECTED&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    clearInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pingInterval</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  websocket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onmessage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    writeToScreen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`RECEIVED: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  websocket</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onerror</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    writeToScreen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`ERROR: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="运行代码" tabindex="-1">运行代码 <a class="header-anchor" href="#运行代码" aria-label="Permalink to &quot;运行代码&quot;">​</a></h3><p>使用这两个文件，使用 Deno 运行应用程序。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">deno</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> --allow-net=0.0.0.0:80</span><span style="color:#D19A66;"> --allow-read=./index.html</span><span style="color:#98C379;"> main.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Deno 要求我们为可以在主机上访问的内容提供明确的权限。</p><ul><li><code>--allow-net=0.0.0.0:80</code>允许应用在端口 80 上附加到 localhost</li><li><code>--allow-read=./index.html</code>允许访问客户端的 HTML 文件</li></ul><h2 id="在线工具" tabindex="-1">在线工具 <a class="header-anchor" href="#在线工具" aria-label="Permalink to &quot;在线工具&quot;">​</a></h2><p><a href="http://www.websocket-test.com/" target="_blank" rel="noreferrer">websocket在线测试 (websocket-test.com)</a></p><h2 id="工具库" tabindex="-1">工具库 <a class="header-anchor" href="#工具库" aria-label="Permalink to &quot;工具库&quot;">​</a></h2><ul><li><a href="https://www.asyncapi.com/" target="_blank" rel="noreferrer">AsyncAPI</a>：用于描述基于 WebSocket 等协议的事件驱动架构的规范。可以使用它来描述基于 WebSocket 的 API，就像使用 OpenAPI 规范描述 REST API 一样。了解<a href="https://www.asyncapi.com/blog/websocket-part1" target="_blank" rel="noreferrer">为什么要考虑将 AsyncAPI 与 WebSocket 结合使用</a>和<a href="https://www.asyncapi.com/blog/websocket-part2" target="_blank" rel="noreferrer">如何使用</a>。</li><li><a href="https://hacks.mozilla.org/2017/06/introducing-humblenet-a-cross-platform-networking-library-that-works-in-the-browser/" target="_blank" rel="noreferrer">HumbleNet</a>：一个在浏览器中工作的跨平台网络库。它由 WebSocket 和 WebRTC 的 C 语言封装器组成，可抽象出跨浏览器的差异，便于为游戏和其他应用程序创建多用户网络功能。</li><li><a href="https://github.com/uNetworking/uWebSockets" target="_blank" rel="noreferrer">µWebSockets</a>：由 <a href="https://isocpp.org/" target="_blank" rel="noreferrer">C++11</a> 和 <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> 实现的高度可扩展的 WebSocket 服务器和客户端。</li><li><a href="https://socket.io/" target="_blank" rel="noreferrer">Socket.IO</a>：基于长轮询和 WebSocket 的 <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> 第三方传输协议。</li><li><a href="https://socketcluster.io/" target="_blank" rel="noreferrer">SocketCluster</a>：适用于 <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> 的 pub/sub WebSocket 框架，注重可扩展性。</li><li><a href="https://github.com/theturtle32/WebSocket-Node" target="_blank" rel="noreferrer">WebSocket-Node</a>：用 <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> 实现的 WebSocket 服务器 API。</li><li><a href="https://www.totaljs.com/" target="_blank" rel="noreferrer">Total.js</a>：用 <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> 实现的 Web 应用程序框架（例如：<a href="https://github.com/totaljs/examples/tree/master/websocket" target="_blank" rel="noreferrer">WebSocket 聊天</a>）。</li><li><a href="https://www.npmjs.com/package/faye-websocket" target="_blank" rel="noreferrer">Faye</a>：用于 <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> 服务器和客户端的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer"><code>WebSocket</code></a>（双向连接）和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource" target="_blank" rel="noreferrer">EventSource</a>（单向连接）。</li><li><a href="https://dotnet.microsoft.com/zh-cn/apps/aspnet/signalr" target="_blank" rel="noreferrer">SignalR</a>：当 WebSocket 可用时，SignalR 将在覆盖范围内使用 WebSocket；当 WebSocket 不可用时，SignalR 将优雅地回退到其他技术，而应用程序代码保持不变。</li><li><a href="https://caddyserver.com/" target="_blank" rel="noreferrer">Caddy</a>：能够将任意命令（stdin/stdout）代理为 websocket 的 web 服务器。</li><li><a href="https://github.com/websockets/ws" target="_blank" rel="noreferrer">ws</a>：流行的 WebSocket 客户端和服务器 <a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node.js</a> 库。</li><li><a href="https://github.com/bigstepinc/jsonrpc-bidirectional" target="_blank" rel="noreferrer">jsonrpc-bidirectional</a>：异步 RPC，在一个连接上，服务器和客户端可以同时导出函数（客户端可以调用服务器，服务器也可以调用客户端）。</li><li><a href="https://github.com/ninenines/cowboy" target="_blank" rel="noreferrer">cowboy</a>：Cowboy 是一款小型、快速、现代的 Erlang/OTP HTTP 服务器，支持 WebSocket。</li><li><a href="https://zeromq.org/" target="_blank" rel="noreferrer">ZeroMQ</a>：ZeroMQ 是一个可嵌入的网络库，可通过进程内、IPC、TCP、UDP、TIPC、组播和 WebSocket 传输消息。</li><li><a href="https://websocketking.com/" target="_blank" rel="noreferrer">WebSocket King</a>：帮助开发、测试和使用 WebSocket 服务器的客户端工具。</li><li><a href="https://github.com/napengam/phpWebSocketServer" target="_blank" rel="noreferrer">PHP WebSocket Server</a>：用 PHP 编写的服务器，用于处理通过 websocket wss:// 或 ws:// 以及通过 ssl:// 和 tcp:// 的普通套接字进行的连接。</li><li><a href="https://channels.readthedocs.io/en/stable/index.html" target="_blank" rel="noreferrer">Channels</a>：增加了对 WebSocket（以及其他需要长时间运行异步连接的协议）的支持的 Django 库。</li><li><a href="https://hexdocs.pm/phoenix/channels.html" target="_blank" rel="noreferrer">Channels</a>：在 Elixir Phoenix 框架中使用 WebSocket 进行可扩展的实时通信。</li><li><a href="https://github.com/phoenixframework/phoenix_live_view" target="_blank" rel="noreferrer">LiveView</a>：在 Elixir Phoenix 框架中通过 WebSocket 实现实时交互式网络体验。</li><li><a href="https://flask-socketio.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">Flask-SocketIO</a>：让 Flask 应用程序可以在客户端和服务器之间进行低延迟的双向通信。</li><li><a href="https://pkg.go.dev/github.com/gorilla/websocket" target="_blank" rel="noreferrer">Gorilla WebSocket</a>：Gorilla WebSocket 是 WebSocket 协议的 <a href="https://go.dev/" target="_blank" rel="noreferrer">Go</a> 实现。</li></ul><h2 id="规范" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API#%E8%A7%84%E8%8C%83" target="_blank" rel="noreferrer">规范</a> <a class="header-anchor" href="#规范" aria-label="Permalink to &quot;[规范](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API#规范)&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">Specification</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://websockets.spec.whatwg.org/#the-websocket-interface" target="_blank" rel="noreferrer">WebSockets Standard # the-websocket-interface</a></td></tr></tbody></table><h2 id="教程" tabindex="-1">教程 <a class="header-anchor" href="#教程" aria-label="Permalink to &quot;教程&quot;">​</a></h2><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1103327377678688" target="_blank" rel="noreferrer">使用ws - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p><p><a href="https://www.cnblogs.com/chyingp/p/websocket-deep-in.html" target="_blank" rel="noreferrer">WebSocket协议：5分钟从入门到精通 - 程序猿小卡 - 博客园 (cnblogs.com)</a></p><p>其他教程：</p><p><a href="https://juejin.cn/post/7348362217145172006" target="_blank" rel="noreferrer">基于WebRtc和WebSocket实现视频聊天 - 掘金 (juejin.cn)</a></p><p>websocket封装：<a href="https://juejin.cn/post/7371365854012276747" target="_blank" rel="noreferrer">赶快收藏！全网最佳websocket封装：完美支持断网重连、自动心跳！ - 掘金 (juejin.cn)</a></p>`,54)]))}const F=n(o,[["render",p]]);export{b as __pageData,F as default};
