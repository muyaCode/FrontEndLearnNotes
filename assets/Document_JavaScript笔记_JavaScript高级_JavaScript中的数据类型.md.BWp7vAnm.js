import{_ as a,c as n,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"JavaScript中的数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/JavaScript高级/JavaScript中的数据类型.md","filePath":"Document/JavaScript笔记/JavaScript高级/JavaScript中的数据类型.md","lastUpdated":1750954157000}'),o={name:"Document/JavaScript笔记/JavaScript高级/JavaScript中的数据类型.md"};function e(r,s,c,t,i,B){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="javascript中的数据类型" tabindex="-1">JavaScript中的数据类型 <a class="header-anchor" href="#javascript中的数据类型" aria-label="Permalink to &quot;JavaScript中的数据类型&quot;">​</a></h1><p>JavaScript 有 5 种简单数据类型：<code>Undefined、Null、Boolean、Number、String</code> 和 1 种复杂数据类型 <code>Object</code> 。</p><h2 id="基本类型-值类型" tabindex="-1">基本类型（值类型） <a class="header-anchor" href="#基本类型-值类型" aria-label="Permalink to &quot;基本类型（值类型）&quot;">​</a></h2><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li></ul><h2 id="复杂类型-引用类型" tabindex="-1">复杂类型（引用类型） <a class="header-anchor" href="#复杂类型-引用类型" aria-label="Permalink to &quot;复杂类型（引用类型）&quot;">​</a></h2><ul><li>Object</li><li>Array</li><li>Date</li><li>RegExp</li><li>Function</li><li>基本包装类型 <ul><li>Boolean</li><li>Number</li><li>String</li></ul></li><li>单体内置对象 <ul><li>Global</li><li>Math</li></ul></li></ul><h2 id="类型检测" tabindex="-1">类型检测 <a class="header-anchor" href="#类型检测" aria-label="Permalink to &quot;类型检测&quot;">​</a></h2><ul><li><code>typeof</code></li><li><code>instanceof</code></li><li><code>Object.prototype.toString.call()</code></li></ul><h2 id="值类型和引用类型在内存中的存储方式-画图说明" tabindex="-1">值类型和引用类型在内存中的存储方式（画图说明） <a class="header-anchor" href="#值类型和引用类型在内存中的存储方式-画图说明" aria-label="Permalink to &quot;值类型和引用类型在内存中的存储方式（画图说明）&quot;">​</a></h2><ul><li>值类型按值存储</li><li>引用类型按引用存储</li></ul><h2 id="值类型复制和引用类型复制-画图说明" tabindex="-1">值类型复制和引用类型复制（画图说明） <a class="header-anchor" href="#值类型复制和引用类型复制-画图说明" aria-label="Permalink to &quot;值类型复制和引用类型复制（画图说明）&quot;">​</a></h2><ul><li>值类型按值复制</li><li>引用类型按引用复制</li></ul><h2 id="值类型和引用类型参数传递-画图说明" tabindex="-1">值类型和引用类型参数传递（画图说明） <a class="header-anchor" href="#值类型和引用类型参数传递-画图说明" aria-label="Permalink to &quot;值类型和引用类型参数传递（画图说明）&quot;">​</a></h2><ul><li>值类型按值传递</li><li>引用类型按引用传递</li></ul><h2 id="值类型与引用类型的差别" tabindex="-1">值类型与引用类型的差别 <a class="header-anchor" href="#值类型与引用类型的差别" aria-label="Permalink to &quot;值类型与引用类型的差别&quot;">​</a></h2><ul><li>基本类型在内存中占据固定大小的空间，因此被保存在栈内存中</li><li>从一个变量向另一个变量复制基本类型的值，复制的是值的副本</li><li>引用类型的值是对象，保存在堆内存</li><li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针</li><li>从一个变量向另一个变量复制引用类型的值的时候，复制是引用指针，因此两个变量最终都指向同一个对象</li></ul><h2 id="伪数组和数组" tabindex="-1">伪数组和数组 <a class="header-anchor" href="#伪数组和数组" aria-label="Permalink to &quot;伪数组和数组&quot;">​</a></h2><p>在JavaScript中，除了5种原始数据类型之外，其他所有的都是对象，包括函数（Function）。</p><h3 id="对象与数组的关系" tabindex="-1">对象与数组的关系 <a class="header-anchor" href="#对象与数组的关系" aria-label="Permalink to &quot;对象与数组的关系&quot;">​</a></h3><p>在说区别之前，需要先提到另外一个知识，就是 JavaScript 的原型继承。 所有 JavaScript 的内置构造函数都是继承自 <code>Object.prototype</code> 。 在这个前提下，可以理解为使用 <code>new Array()</code> 或 <code>[]</code> 创建出来的数组对象，都会拥有 <code>Object.prototype</code> 的属性值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span><span style="color:#7F848E;font-style:italic;">// 拥有 Object.prototype 的属性值</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//使用数组直接量创建的数组，由于 Array.prototype 的属性继承自 Object.prototype，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//那么，它将同时拥有 Array.prototype 和 Object.prototype 的属性值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可以得到对象和数组的第一个区别：对象没有数组 Array.prototype 的属性值。</p><h3 id="什么是数组" tabindex="-1">什么是数组 <a class="header-anchor" href="#什么是数组" aria-label="Permalink to &quot;什么是数组&quot;">​</a></h3><p>数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;a&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;a&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// =&gt; a</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// =&gt; a</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; undefined</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>obj[2]输出&#39;a&#39;，是因为对象就是普通的键值对存取数据</li><li>而arr[2]输出&#39;a&#39; 则不同，数组是通过索引来存取数据，arr[2]之所以输出&#39;a&#39;，是因为数组arr索引2的位置已经存储了数据</li><li>obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined</li><li>而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值</li><li>为什么arr.length输出3，而不是1 <ul><li>在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数</li></ul></li></ul><h3 id="什么是伪数组" tabindex="-1">什么是伪数组 <a class="header-anchor" href="#什么是伪数组" aria-label="Permalink to &quot;什么是伪数组&quot;">​</a></h3><ol><li>拥有 length 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)</li><li>不具有数组所具有的方法</li></ol><p>伪数组，就是像数组一样有 <code>length</code> 属性，也有 <code>0、1、2、3</code> 等属性的对象，看起来就像数组一样，但不是数组，比如:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> fakeArray</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">  &quot;0&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;first&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">  &quot;1&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;second&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">  &quot;2&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;third&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  length</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> fakeArray</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fakeArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">join</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fakeArray</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;+&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>常见的伪数组有：</p><ul><li>函数内部的 <code>arguments</code></li><li>DOM 对象列表（比如通过 <code>document.getElementsByTags</code> 得到的列表）</li><li>jQuery 对象（比如 <code>$(&quot;div&quot;)</code> ）</li></ul><p>伪数组是一个 Object，而真实的数组是一个 Array。</p><p>伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多方法，比如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">forEach</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 循环arguments对象</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// push</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// some</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// every</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// filter</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// map</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>以上在借用数组的原型方法的时候都可以通过数组直接量来简化使用：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D19A66;">  0</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">  1</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">  2</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  length</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">;[].</span><span style="color:#E5C07B;">push</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;d&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">([].</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">;[].</span><span style="color:#E5C07B;">forEach</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="数组和伪数组小结" tabindex="-1">数组和伪数组小结 <a class="header-anchor" href="#数组和伪数组小结" aria-label="Permalink to &quot;数组和伪数组小结&quot;">​</a></h3><ul><li>对象没有数组 Array.prototype 的属性值，类型是 Object ，而数组类型是 Array</li><li>数组是基于索引的实现， length 会自动更新，而对象是键值对</li><li>使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法</li></ul><p>伪数组和数组的区别：</p><ul><li>真数组的长度是可变的</li><li>伪数组的长度不可变</li><li>真数组可以使用数组中的方法</li><li>伪数组不可以使用数组中的方法</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>类型检测方式</li><li>值类型和引用类型的存储方式</li><li>值类型复制和引用类型复制</li><li>方法参数中 值类型数据传递 和 引用类型数据传递</li></ul><h2 id="javascript-执行过程" tabindex="-1">JavaScript 执行过程 <a class="header-anchor" href="#javascript-执行过程" aria-label="Permalink to &quot;JavaScript 执行过程&quot;">​</a></h2><p>JavaScript 运行分为两个阶段：</p><ul><li>预解析 <ul><li>全局预解析（所有变量和函数声明都会提前；同名的函数和变量函数的优先级高）</li><li>函数内部预解析（所有的变量、函数和形参都会参与预解析） <ul><li>函数</li><li>形参</li><li>普通变量</li></ul></li></ul></li><li>执行</li></ul><p>先预解析全局作用域，然后执行全局作用域中的代码， 在执行全局代码的过程中遇到函数调用就会先进行函数预解析，然后再执行函数内代码。</p>`,47)]))}const b=a(o,[["render",e]]);export{u as __pageData,b as default};
