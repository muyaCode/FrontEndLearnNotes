import{_ as a,c as l,o as n,ah as e}from"./chunks/framework.DqD713j2.js";const p="/FrontEndLearnNotes/assets/%E4%B8%8D%E5%90%8C%E9%A2%84%E8%AE%BE%E7%9A%84%E7%A4%BA%E4%BE%8B%E7%BB%93%E6%9E%9C%E5%AF%B9%E6%AF%941.BgKcdStY.jpg",o="/FrontEndLearnNotes/assets/%E4%B8%8D%E5%90%8C%E9%A2%84%E8%AE%BE%E7%9A%84%E7%A4%BA%E4%BE%8B%E7%BB%93%E6%9E%9C%E5%AF%B9%E6%AF%942.D-BzaOld.jpg",t="/FrontEndLearnNotes/assets/%E5%9F%BA%E4%BA%8E%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C%E5%B9%B3%E5%8F%B0%E7%9A%84%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91.KNRznn6W.jpg",r="/FrontEndLearnNotes/assets/%E9%9D%A2%E5%90%91%E5%87%86%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E7%9A%84%E6%97%A0%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E4%BA%A7%E5%93%81%E4%B8%80%E4%B8%80%E6%9B%B4%E4%B8%BA%E5%A4%9A%E6%A0%B7%E5%8C%96%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.LgWoZZFN.jpg",i="/FrontEndLearnNotes/assets/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80.CWE1cC6A.jpg",c="/FrontEndLearnNotes/assets/%E4%B8%8A%E9%9D%A2%E4%B8%A4%E8%80%85%E7%9A%84%E5%AF%B9%E6%AF%94.CFBA9g13.jpg",u="/FrontEndLearnNotes/assets/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E4%BE%9D%E6%AC%A1%E5%8A%A0%E8%BD%BD%E4%BE%9D%E8%B5%96%E6%A8%A1%E5%9D%97.BeoBb7h6.jpg",d="/FrontEndLearnNotes/assets/%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84JS%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E5%8A%9F%E8%83%BD.C-GuF9S6.jpg",h="/FrontEndLearnNotes/assets/CircleCI%E9%A1%B9%E7%9B%AE%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%A4%BA%E4%BE%8B%E7%95%8C%E9%9D%A2.B7dnLjXx.jpg",b="/FrontEndLearnNotes/assets/%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.DnWbIAFT.jpg",f=JSON.parse('{"title":"前端效率工程化","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Project-Engineering/前端工程化/前端效率工程化.md","filePath":"Document/Project-Engineering/前端工程化/前端效率工程化.md","lastUpdated":1750954157000}'),B={name:"Document/Project-Engineering/前端工程化/前端效率工程化.md"};function y(m,s,g,C,F,k){return n(),l("div",null,s[0]||(s[0]=[e(`<h1 id="前端效率工程化" tabindex="-1">前端效率工程化 <a class="header-anchor" href="#前端效率工程化" aria-label="Permalink to &quot;前端效率工程化&quot;">​</a></h1><p><a href="https://vkc4zz0ocm.feishu.cn/wiki/wikcnsDyZCFIbm2W0KhEncxGZke#mindmap" target="_blank" rel="noreferrer">https://vkc4zz0ocm.feishu.cn/wiki/wikcnsDyZCFIbm2W0KhEncxGZke#mindmap</a><a href="https://github.com/ruanyf/jstraining/blob/master/docs/engineering.md" target="_blank" rel="noreferrer">https://github.com/ruanyf/jstraining/blob/master/docs/engineering.md</a></p><hr><p>一个中高级前端工程师</p><ul><li>完成业务功能开发目标</li><li>对所开发项目的效率、性能、质量等工程化维度去制定和实施技术优化目标</li></ul><p>以提升效率为目标的优化技术和工具属于<strong>效率工程化</strong>的范畴</p><p>效率提升通常会被作为技术层面的一个重点优化方向。面试中，对效率工程化的理解程度和实践中的优化产出情况，是衡量前端工程师能力高低的常见标准。</p><p>投身在业务开发中的前端同学，在效率工程化方面经常面临的困扰</p><ul><li><strong>缺乏系统化知识</strong>，对于项目中的效率问题常常不知从何处着手，甚至找错解决方向</li><li><strong>缺少工程化的视野</strong>，难以发现工作中的效率提升点和制定针对性的提升方案</li><li>技术晋升和面试求职中，<strong>缺少方法论和深度思考</strong>，很难在能力表现上脱颖而出</li></ul><p><strong>找到自己的短板来做针对性提升</strong>：</p><p>全面、系统地掌握效率的影响因素以及其中的技术细节</p><p>在这一节中，梳理了前端开发工作流程中和效率提升相关的知识点和案例</p><p>希望借此帮你构筑一个系统性的前端效率知识体系，建立正确的问题解决思路</p><h2 id="一、开发效率" tabindex="-1">一、开发效率 <a class="header-anchor" href="#一、开发效率" aria-label="Permalink to &quot;一、开发效率&quot;">​</a></h2><h3 id="_1-项目基石-前端脚手架工具探秘" tabindex="-1">1.项目基石:前端脚手架工具探秘 <a class="header-anchor" href="#_1-项目基石-前端脚手架工具探秘" aria-label="Permalink to &quot;1.项目基石:前端脚手架工具探秘&quot;">​</a></h3><h4 id="_1-1-脚手架工具" tabindex="-1">1.1 脚手架工具 <a class="header-anchor" href="#_1-1-脚手架工具" aria-label="Permalink to &quot;1.1 脚手架工具&quot;">​</a></h4><ul><li>利用脚手架工具，可以经过几个简单的选项快速生成项目的基础代码</li><li>使用脚手架工具生成的项目模板通常是经过经验丰富的开发者提炼和检验的</li><li>脚手架工具支持使用自定义模板，可以根据项目中的实际经验总结、定制一个脚手架模</li></ul><h4 id="_1-2-前端工程师要掌握的基本能力" tabindex="-1">1.2 前端工程师要掌握的基本能力 <a class="header-anchor" href="#_1-2-前端工程师要掌握的基本能力" aria-label="Permalink to &quot;1.2 前端工程师要掌握的基本能力&quot;">​</a></h4><p>通过技术选型来确定所需要使用的技术栈然后根据技术栈</p><p>选择合适的脚手架工具，来做项目代码的初始化</p><h4 id="_1-3-什么是脚手架" tabindex="-1">1.3 什么是脚手架？ <a class="header-anchor" href="#_1-3-什么是脚手架" aria-label="Permalink to &quot;1.3 什么是脚手架？&quot;">​</a></h4><p>工程施工领域：**脚手架 (Scaffold)**一一为了保证施工过程顺利而搭建的工作平台</p><p>软件开发领域：<strong>脚手架指通过各种工具来生成项目基础代码的技术</strong>。代码中通常包含项目开发流程中所需的工作目录内的通用基础设施</p><h5 id="对于日常的前端开发流程-项目内有哪些部分属于通用基础设施呢" tabindex="-1">对于日常的前端开发流程，项目内有哪些部分属于通用基础设施呢？ <a class="header-anchor" href="#对于日常的前端开发流程-项目内有哪些部分属于通用基础设施呢" aria-label="Permalink to &quot;对于日常的前端开发流程，项目内有哪些部分属于通用基础设施呢？&quot;">​</a></h5><h4 id="_1-4-进入开发前的准备" tabindex="-1">1.4 进入开发前的准备 <a class="header-anchor" href="#_1-4-进入开发前的准备" aria-label="Permalink to &quot;1.4 进入开发前的准备&quot;">​</a></h4><ul><li>1.需要有 package.json ，它是 npm 依赖管理体系下的基础配置文件</li><li>2.然择使用 npm 或 Yarn 作为包管理器</li><li>3.确定项目技术栈，在明确选择后安装相关依赖包并在 src 目录中建立入口源码文件</li><li>4.选择构建工具，主流选择是 webpack (除非项目已先锋性地考虑尝试 nobundle 方案) <ul><li>对应项目里需要增加相关的 webpack 配置文件，可以考虑针对开发/生产环境使用不同配置文件</li></ul></li><li>5.打通构建流程，安装与配置各种 Loader、插件和其他配置项</li><li>6.优化构建流程，针对开发/生产环境的不同特点进行各自优化</li><li>7.选择和调试辅助工具，例如代码检查工具和单元测试工具，安装相应依赖并调试配置文件</li><li>8.检查各主要环节的脚本是否工作正常，编写说明文档 READMEmd <ul><li>不需要纳入版本管理的文件目录记入 gitignore 等</li></ul></li></ul><h4 id="_1-5-示例项目模板" tabindex="-1">1.5 示例项目模板 <a class="header-anchor" href="#_1-5-示例项目模板" aria-label="Permalink to &quot;1.5 示例项目模板&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">package.json</span><span style="color:#D19A66;">               1</span><span style="color:#ABB2BF;">)npm 项目文件</span></span>
<span class="line"><span style="color:#61AFEF;">packagelock.json</span><span style="color:#D19A66;">           2</span><span style="color:#ABB2BF;">)npm 依赖lock 文件</span></span>
<span class="line"><span style="color:#61AFEF;">public/</span><span style="color:#D19A66;">                    3</span><span style="color:#ABB2BF;">)预设的静态目录</span></span>
<span class="line"><span style="color:#61AFEF;">src/</span><span style="color:#D19A66;">                       3</span><span style="color:#ABB2BF;">)源代码目录</span></span>
<span class="line"><span style="color:#61AFEF;">    main.ts</span><span style="color:#D19A66;">                3</span><span style="color:#ABB2BF;">)源代码中的初始入口文件</span></span>
<span class="line"><span style="color:#61AFEF;">    router.ts</span><span style="color:#D19A66;">              3</span><span style="color:#ABB2BF;">)源代码中的路由文件</span></span>
<span class="line"><span style="color:#61AFEF;">    store/</span><span style="color:#D19A66;">                 3</span><span style="color:#ABB2BF;">)源代码中的数据流模块目录</span></span>
<span class="line"><span style="color:#61AFEF;">webpack/</span><span style="color:#D19A66;">                   4</span><span style="color:#ABB2BF;">)webpack配置目录</span></span>
<span class="line"><span style="color:#61AFEF;">    common.config.js</span><span style="color:#D19A66;">       4</span><span style="color:#ABB2BF;">)webpack 通用配置文件</span></span>
<span class="line"><span style="color:#61AFEF;">    dev.config.js</span><span style="color:#D19A66;">          4</span><span style="color:#ABB2BF;">)webpack 开发环境配置文件</span></span>
<span class="line"><span style="color:#61AFEF;">    prod.config.js</span><span style="color:#D19A66;">         4</span><span style="color:#ABB2BF;">)webpack 生产环境配置文件</span></span>
<span class="line"><span style="color:#61AFEF;">    .browserlistrc</span><span style="color:#D19A66;">         5</span><span style="color:#ABB2BF;">)浏览器兼容描述 browserlist 配置文件</span></span>
<span class="line"><span style="color:#61AFEF;">babel.config.js</span><span style="color:#D19A66;">            5</span><span style="color:#ABB2BF;">)ES 转换工具 babel配置文件</span></span>
<span class="line"><span style="color:#61AFEF;">tsconfig.json</span><span style="color:#D19A66;">              5</span><span style="color:#ABB2BF;">)TypeScript 配置文件</span></span>
<span class="line"><span style="color:#61AFEF;">postcss.config.js</span><span style="color:#D19A66;">          5</span><span style="color:#ABB2BF;">)CSS后处理工具 postcss 配置文件</span></span>
<span class="line"><span style="color:#61AFEF;">eslintrc</span><span style="color:#D19A66;">                   7</span><span style="color:#ABB2BF;">)代码检查工具eslint 配置文件</span></span>
<span class="line"><span style="color:#61AFEF;">jest.config.js</span><span style="color:#D19A66;">             7</span><span style="color:#ABB2BF;">)单元测试工具iest 配置文件</span></span>
<span class="line"><span style="color:#61AFEF;">.gitignore</span><span style="color:#D19A66;">                 8</span><span style="color:#ABB2BF;">)Git 忽略配置文件</span></span>
<span class="line"><span style="color:#61AFEF;">README.md</span><span style="color:#D19A66;">                  8</span><span style="color:#ABB2BF;">)默认文档文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_1-6-代表性的脚手架工具" tabindex="-1">1.6 代表性的脚手架工具 <a class="header-anchor" href="#_1-6-代表性的脚手架工具" aria-label="Permalink to &quot;1.6 代表性的脚手架工具&quot;">​</a></h4><table tabindex="0"><thead><tr><th>名称</th><th style="text-align:center;">模板框架</th><th style="text-align:center;">多选项生成</th><th style="text-align:center;">支持自定义模板</th><th style="text-align:center;">特点</th></tr></thead><tbody><tr><td>Yeoman</td><td style="text-align:center;">-</td><td style="text-align:center;">是</td><td style="text-align:center;">是</td><td style="text-align:center;">庞大的生成器仓库</td></tr><tr><td>Create-React-App</td><td style="text-align:center;">React</td><td style="text-align:center;">否</td><td style="text-align:center;">是</td><td style="text-align:center;">React 官方维护</td></tr><tr><td>Vue CLI</td><td style="text-align:center;">Vue</td><td style="text-align:center;">是</td><td style="text-align:center;">是</td><td style="text-align:center;">Vue 官方维护</td></tr></tbody></table><ul><li>Yeoman 由 Googlel/0 在 2012 年首次发布功能:基于特定生成器(Generator)来创建项目基础代码它提供足够的开放性和自由度。 <ul><li>但缺乏某一技术栈的深度集成和技术生态。</li><li>Yeoman 更多用于一些开发流程里特定片段代码的生成</li></ul></li><li>Create React App (简称 CRA) 是 Facebook 官方提供的 React 开发工具集 <ul><li>create-react-app 用于选择脚手架创建项目.</li><li>react-scripts 提供了封装后的项目启动、编译、测试等基础工具</li><li>CRA 将一个项目开发运行时的各种配置细节 完全封装在一个 react-scripts 依赖包中 但为后期的用户自定义优化带来了困难</li></ul></li><li>Vue CLI 由 Vue.js 官方维护，其定位是 Vue.js 快速开发的完整系统完整的 VueCLI 由三部分组成 <ul><li>作为全局命令的 @vue/cli</li><li>作为项目内集成工具的 @vue/cli-service</li><li>作为功能插件系统的 @vue/cli-plugin- <ul><li>VueCLI 保留了创建项目开箱即用的优点提供了用于覆盖修改原有配置的自定义构建配置文件和其他工具配置文件</li><li>VueCLI 提供了通过用户交互自行选择的一些定制化选项例如是否集成路由、 TypeScript 等</li></ul></li></ul></li></ul><h5 id="三者的理念和优缺点" tabindex="-1">三者的理念和优缺点 <a class="header-anchor" href="#三者的理念和优缺点" aria-label="Permalink to &quot;三者的理念和优缺点&quot;">​</a></h5><p><strong>Yeoman 代表一般开源工具的理念</strong></p><ul><li>它专注于实现脚手架生成器的逻辑和提供展示第三方生成器，主要目标群体是生成器的开发者</li></ul><p>CRA 代表面向某一技术栈降低开发复杂度的理念</p><ul><li>它提供一个包含各开发工具的集成工具集和标准化的开发-构建测试三步流程脚本</li></ul><p>Vue CLI 代表更灵活折中的理念</p><ul><li>继承了 CRA 降低配置复杂度的优点</li><li>在创建项目的过程中提供更多交互式选项来配置技术栈的细节，允许在项目中使用自定义配置</li></ul><h5 id="了解脚手架模板中的技术细节" tabindex="-1">了解脚手架模板中的技术细节 <a class="header-anchor" href="#了解脚手架模板中的技术细节" aria-label="Permalink to &quot;了解脚手架模板中的技术细节&quot;">​</a></h5><p>对脚手架足够熟悉，能减少花费的时间，提升开发效率要了解一个脚手架，需要学会如何使用脚手架来创建项目还需要了解它提供的具体功能边界，提供了哪些功能、哪些优化</p><p>除了通过脚手架模板生成项目外项目内部分别使用 react-scripts 和 vue-cli-service 作为开发流程的集成工具</p><h4 id="_1-7-webpack-工具系统" tabindex="-1">1.7 webpack 工具系统 <a class="header-anchor" href="#_1-7-webpack-工具系统" aria-label="Permalink to &quot;1.7 webpack 工具系统&quot;">​</a></h4><h5 id="webpack-loades-工具系统" tabindex="-1">webpack loades 工具系统 <a class="header-anchor" href="#webpack-loades-工具系统" aria-label="Permalink to &quot;webpack loades 工具系统&quot;">​</a></h5><h5 id="webpack-plugins-插件系统" tabindex="-1">webpack plugins 插件系统 <a class="header-anchor" href="#webpack-plugins-插件系统" aria-label="Permalink to &quot;webpack plugins 插件系统&quot;">​</a></h5><h5 id="webpack-optimize" tabindex="-1">webpack.optimize <a class="header-anchor" href="#webpack-optimize" aria-label="Permalink to &quot;webpack.optimize&quot;">​</a></h5><p>两者在代码优化配置中相同的部分包括:</p><ul><li>都使用 TerserPlugin 压缩 JavaScript ，都使用 splitChunks 做自动分包 (参数不同)</li><li>CSS 的压缩分别采用 OptimizeCssAssetsWebpackPlugin 和 OptimizeCssNanoPlugin</li><li>react-scripts 中开启了 runtimeChunk 以优化缓存</li></ul><h5 id="webpack-resolve" tabindex="-1">webpack resolve <a class="header-anchor" href="#webpack-resolve" aria-label="Permalink to &quot;webpack resolve&quot;">​</a></h5><p>在 resolve 和 resolveloader 部分</p><ul><li>两者都使用 PnpWebpackPlugin (pnp)</li><li>来加速使用 Yarn 作为包管理器时的模块安装和解析</li></ul><h4 id="_1-8-如何定制一个脚手架模板" tabindex="-1">1.8 如何定制一个脚手架模板 <a class="header-anchor" href="#_1-8-如何定制一个脚手架模板" aria-label="Permalink to &quot;1.8 如何定制一个脚手架模板&quot;">​</a></h4><p>对通过这些脚手架创建的模板项目进行定制化，例如:</p><ul><li>1.为项目引入新的通用特性</li><li>2.针对构建环节的 webpack 配置优化，来提升开发环境的效率和生产环境的性能等</li><li>3.定制符合团队内部规范的代码检测规则配置</li><li>4.定制单元测试等辅助工具模块的配置项</li><li>5.定制符合团队内部规范的目录结构与通用业务模块，例如业务组件库、辅助工具类、页面模板等</li></ul><p>通过将实际项目开发中所需要做的定制化修改输出为标准的脚手架模板</p><ul><li>最大程度减少大家在开发中处理重复事务的时间</li><li>减少因为开发风格不一导致的团队内项目维护成本的增加</li></ul><h4 id="_1-9-使用创建定制脚手架模板" tabindex="-1">1.9 使用创建定制脚手架模板 <a class="header-anchor" href="#_1-9-使用创建定制脚手架模板" aria-label="Permalink to &quot;1.9 使用创建定制脚手架模板&quot;">​</a></h4><h5 id="为-create-react-app-创建自定义模板" tabindex="-1">为 create-react-app 创建自定义模板 <a class="header-anchor" href="#为-create-react-app-创建自定义模板" aria-label="Permalink to &quot;为 create-react-app 创建自定义模板&quot;">​</a></h5><p>个最简化的 CRA 模板中包含如下必要文件:</p><ul><li><strong>README.md</strong>：用于在 npm 仓库中显示的模板说明</li><li><strong>packagejson</strong>：用于描述模板本身的元信息 (例如名称、运行脚本、依赖包名和版本等)</li><li><strong>template.json</strong>：用于描述基于模板创建的项目中的 package.json 信息</li><li><strong>template 目录</strong>：用于复制到创建后的项目中，其中.gitignore 在复制后重命名为 gitignorepublic/index.html 和 src/index 为运行 react-scripts 的必要文件</li></ul><p>将模板通过 npm link 命令映射到全局依赖中，或发布到 npm 仓库中然后执行创建项目的命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> create-react-app</span><span style="color:#ABB2BF;"> [app-name] --template [template-name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="为-vuecli-创建自定义模板" tabindex="-1">为 VueCLI 创建自定义模板 <a class="header-anchor" href="#为-vuecli-创建自定义模板" aria-label="Permalink to &quot;为 VueCLI 创建自定义模板&quot;">​</a></h5><p>meta.js/json 文件：描述创建过程中的用户交互信息以及用户选项对于模板文件的过滤等</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[template-name]/</span></span>
<span class="line"><span style="color:#61AFEF;">README.md(for</span><span style="color:#98C379;"> npm</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">meta.js</span><span style="color:#98C379;"> or</span><span style="color:#98C379;"> meta.json</span></span>
<span class="line"><span style="color:#61AFEF;">template</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用自定义模板创建项目的</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install-g</span><span style="color:#98C379;"> @vue/cli-init</span></span>
<span class="line"><span style="color:#61AFEF;">vue</span><span style="color:#98C379;"> init</span><span style="color:#ABB2BF;"> [template-name] [app-name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-界面调试-浏览器热更新-hrm-技术如何开着飞机修引擎" tabindex="-1">2.界面调试:浏览器热更新(HRM)技术如何开着飞机修引擎? <a class="header-anchor" href="#_2-界面调试-浏览器热更新-hrm-技术如何开着飞机修引擎" aria-label="Permalink to &quot;2.界面调试:浏览器热更新(HRM)技术如何开着飞机修引擎?&quot;">​</a></h3><h4 id="_2-1-什么是浏览器的热更新" tabindex="-1">2.1 什么是浏览器的热更新 <a class="header-anchor" href="#_2-1-什么是浏览器的热更新" aria-label="Permalink to &quot;2.1 什么是浏览器的热更新&quot;">​</a></h4><p>看见浏览器热更新，很容易想到 webpack 和 webpack-dev-server 简单地执行 npm start(cra) 或 npm run serve(vue cli)，就能体验到热更新的效果</p><h5 id="浏览器的热更新-指的是" tabindex="-1">浏览器的热更新，指的是 <a class="header-anchor" href="#浏览器的热更新-指的是" aria-label="Permalink to &quot;浏览器的热更新，指的是&quot;">​</a></h5><p>在本地开发的同时打开浏览器进行预览，当代码文件发生变化时，浏览器自动更新页面内容的技术</p><p>自动更新，表现上分为：</p><ul><li>自动刷新整个页面</li><li>页面整体无刷新而只更新页面的部分内容</li></ul><p><strong>以 webpack 工具为例，来看下四种不同配置对结果的影响</strong>：完整示例代码：<a href="https://github.com/fe-efficiency/lessons_fe_efficiency/02_webpack_hmr" target="_blank" rel="noreferrer">https://github.com/fe-efficiency/lessons_fe_efficiency/02_webpack_hmr</a></p><h5 id="一切依赖手动模式-auto-compile" tabindex="-1">一切依赖手动模式（Auto Compile） <a class="header-anchor" href="#一切依赖手动模式-auto-compile" aria-label="Permalink to &quot;一切依赖手动模式（Auto Compile）&quot;">​</a></h5><p>src/index0.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">	div</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	div</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello Worldo&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>webpack.config.basic.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	entry</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./src/index0.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;development&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>package.json</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;build:basic&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;webpack --config webpack.config.basic.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="wath-模式" tabindex="-1">wath 模式 <a class="header-anchor" href="#wath-模式" aria-label="Permalink to &quot;wath 模式&quot;">​</a></h5><p>webpack.config.watch.js</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;watch&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>package.json</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;script&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;build:watch&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;webpack --config webpack.config.watch.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>为了看到执行效果，需要在浏览器中进行预览</p><p>但在预览时会发现，即使产物文件发生了变化</p><p>在浏览器里依然需要手动点击刷新才能看到变更后的效果</p><h5 id="live-reload" tabindex="-1">Live Reload <a class="header-anchor" href="#live-reload" aria-label="Permalink to &quot;Live Reload&quot;">​</a></h5><p>webpack.config.reload.js</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;devServer&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;contentBase&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/dist&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 为./dist目录中的静态页面文件提供本地服务渲染</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;open&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#7F848E;font-style:italic;"> // 启动服务后自动打开浏览器网页</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>package.json</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;script&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;build:watch&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;webpack --config webpack.config.reload.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在浏览器中输入网址：<a href="http://localhost:8080/index.html" target="_blank" rel="noreferrer">http://localhost:8080/index.html</a></p><p>(也可以在 devServer 的配置中加入 open 和 openPage 来自动打开网页)并打开控制台网络面板</p><p>在开发调试过程中会在网页中进行一些操作</p><p>例如输入了一些表单数据想要调试错误提示的样式、打开了一个弹窗想要调试其中按钮的位置</p><p>切换回编辑器，修改样式文件进行保存</p><p>网页刷新后回到了初始化的状态，不得不再次重复操作才能确认改动后的效果</p><h5 id="hot-module-replacement" tabindex="-1">Hot Module Replacement <a class="header-anchor" href="#hot-module-replacement" aria-label="Permalink to &quot;Hot Module Replacement&quot;">​</a></h5><p>src/index1.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> ./</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">css</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>src/style.css</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>webpack.config.hmr.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    entry</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;./src/index1.js&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#E06C75;">    devServer</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">        hot</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    module</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">        rules</span><span style="color:#ABB2BF;">:[</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span></span>
<span class="line"><span style="color:#E06C75;">                test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">csss</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                use</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;style-loader&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;css-loader&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        ]</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>package.json</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;script&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;build:watch&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;webpack --config webpack.config.hmr.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>浏览器打开页面后，查看网页源码，会发现 css 会添加在页面 head 标签里面的 style 里</p><p>浏览器打开页面后新增了两个请求: hot-update.json 和 hot-update.js</p><hr><h5 id="热更新是保存后自动编译-auto-compile-吗-还是自动刷新浏览器-live-reload-还是指-hmr-hot-module-replacement-模块热替换" tabindex="-1">热更新是保存后自动编译 (Auto Compile) 吗? 还是自动刷新浏览器(Live Reload) ? 还是指 HMR(Hot Module Replacement，模块热替换) ? <a class="header-anchor" href="#热更新是保存后自动编译-auto-compile-吗-还是自动刷新浏览器-live-reload-还是指-hmr-hot-module-replacement-模块热替换" aria-label="Permalink to &quot;热更新是保存后自动编译 (Auto Compile) 吗? 还是自动刷新浏览器(Live Reload) ? 还是指 HMR(Hot Module Replacement，模块热替换) ?&quot;">​</a></h5><h5 id="这些不同的效果背后的技术原理是什么呢" tabindex="-1">这些不同的效果背后的技术原理是什么呢? <a class="header-anchor" href="#这些不同的效果背后的技术原理是什么呢" aria-label="Permalink to &quot;这些不同的效果背后的技术原理是什么呢?&quot;">​</a></h5><h5 id="为什么导入的-css-能触发模块热替换而-js-文件的内容修改就失效了呢" tabindex="-1">为什么导入的 CSS 能触发模块热替换而 JS 文件的内容修改就失效了呢？ <a class="header-anchor" href="#为什么导入的-css-能触发模块热替换而-js-文件的内容修改就失效了呢" aria-label="Permalink to &quot;为什么导入的 CSS 能触发模块热替换而 JS 文件的内容修改就失效了呢？&quot;">​</a></h5><p>webpack 中的热更新原理</p><p>![webpack 中的热更新原理](.\\img\\webpack 中的热更新原理.jpg)</p><p>可以基于 Node.js 中提供的文件模块 <code>fs.watch</code> 来实现对文件和文件夹的监控</p><p>也可以使用 sockjs-node 或 socket.io 来实现 Websocket 的通信</p><h4 id="_2-2-webpack-中的打包流程" tabindex="-1">2.2 webpack 中的打包流程 <a class="header-anchor" href="#_2-2-webpack-中的打包流程" aria-label="Permalink to &quot;2.2 webpack 中的打包流程&quot;">​</a></h4><ul><li>module: 指在模块化编程中我们把应用程序分割成的独立功能的代码模块</li><li>chunk: 指模块间按照引用关系组合成的代码块，一个 chunk 中可以包含多个 module</li><li>chunk group: 指通过配置入口点 (entry point) 区分的块组一个 chunk group 中可包含一到多个 chunk</li><li>bundling: webpack 打包的过程 asset/bundle: 打包产物</li></ul><p>.......等等 webpack 的热更新功能</p><h3 id="_3-构建提速-如何正确使用-sourcemap" tabindex="-1">3.构建提速:如何正确使用 SourceMap? <a class="header-anchor" href="#_3-构建提速-如何正确使用-sourcemap" aria-label="Permalink to &quot;3.构建提速:如何正确使用 SourceMap?&quot;">​</a></h3><p>为什么我的项目在开发环境下每次构建还是很卡?每次保存完代码都要过 1~2 秒才能看到效果？这是怎么回事呢?</p><p>前端库开发基础中，编写的源代码会经过多重处理 (编译、封装、压缩等)，最后形成产物代码</p><h4 id="什么是-source-map" tabindex="-1">什么是 Source Map <a class="header-anchor" href="#什么是-source-map" aria-label="Permalink to &quot;什么是 Source Map&quot;">​</a></h4><p>source-map 的基本原理，在编译处理的过程中：在生成产物代码的同时生成产物代码中被转换的部分与源代码中相应部分的映射关系表</p><p>通过 Chrome 控制台中的&quot;Enable Javascript source map&quot;来实现调试时的显示与定位源代码功能</p><ul><li>对于同一个源文件，根据不同的目标，可以生成不同效果的 source map</li><li>在构建速度、质量(反解代码与源代码的接近程度以及调试时行号列号等辅助信息的对应情况)</li><li>访问方式(在产物文件中或是单独生成 source map 文件)和文件大小等方面各不相同</li></ul><p>对于 source map 功能的期望不同:</p><ul><li><strong>在开发环境中</strong>，通常关注的是构建速度快，质量高，以便于提升开发效率</li><li><strong>在生产环境中</strong>，通常更关注是否需要提供线上 source map 生成的文件大小和访问方式是否会对页面性能造成影响等，其次才是质量和构建速度</li></ul><h4 id="webpack-中的-source-map-预设" tabindex="-1">webpack 中的 source map 预设 <a class="header-anchor" href="#webpack-中的-source-map-预设" aria-label="Permalink to &quot;webpack 中的 source map 预设&quot;">​</a></h4><p>webpack/lib/WebpackOptionsApply.js:232</p><h4 id="source-map-名称关键字" tabindex="-1">Source Map 名称关键字 <a class="header-anchor" href="#source-map-名称关键字" aria-label="Permalink to &quot;Source Map 名称关键字&quot;">​</a></h4><ul><li><strong>false</strong>:不开启 source map 功能，其他不符合上述规则的赋值也等价于 false</li><li><strong>eval</strong>: 在编译器中使用 EvalDevToolModulePlugin 作为 sourcemap 的处理插件</li><li><strong>[xxx-...]source-map</strong>: 根据 devtool 对应值中是否有 eval 关键字来决定使用 EvalSourceMapDevToolPlugin 或 SourceMapDevToolPlugin 作为 sourcemap 的处理插件其余关键字则决定传入到插件的相关字段赋值</li><li><strong>inline</strong>: 决定是否传入插件的 filename 参数，作用是决定单独生成 source map 文件还是在行内显示该参数在 eval- 参数存在时无效</li><li><strong>hidden</strong>: 决定传入插件 append 的赋值，作用是判断是否添加 SourceMappingURL 的注释该参数在 eval- 参数存在时无效</li><li><strong>module</strong>: 为 true 时传入插件的 module 为 true ，作用是为加载器(Loaders) 生成 source map</li><li><strong>cheap</strong>: 当 module 为 false 时，它决定插件 module 参数的最终取值，最终取值与 cheap 相反决定插件 columns 参数的取值，作用是决定生成的 source map 中是否包含列信息在不包含列信息的情况下，调试时只能定位到指定代码所在的行</li><li><strong>nosource</strong>: 决定插件中 noSource 变量的取值，作用是决定生成的 source map 中是否包含源代码信息不包含源码情况下只能显示调用堆栈信息</li></ul><h4 id="source-map-处理插件" tabindex="-1">Source Map 处理插件 <a class="header-anchor" href="#source-map-处理插件" aria-label="Permalink to &quot;Source Map 处理插件&quot;">​</a></h4><ul><li><strong>EvalDevToolModulePlugin</strong>: 模块代码后添加 sourceURL=webpack:///+ 模块引用路径不生成 source map 内容，模块产物代码通过 eval()封装</li><li><strong>EvalSourceMapDevToolPlugin</strong>: 生成 base64 格式的 source map 并附加在模块代码之后 source map 后添加 sourceURL=webpack:///+ 模块引用路径，模块产物代码通过 eval()封装</li><li><strong>SourceMapDevToolPlugin</strong>: 生成单独的.map 文件，模块产物代码不通过 eval 封装</li></ul><p>不同参数组合下的各种预设对 source map 生成又各自会产生什么样的效果呢？</p><p>不同预设的示例结果对比</p><p><img src="`+p+'" alt="不同预设的示例结果对比1"></p><p><img src="'+o+`" alt="不同预设的示例结果对比2"></p><p>注 1:<em>“/” 前后分别表示产物 is 大小和对应.map 大小</em></p><p>注 2:<em>“/” 前后分别表示初次构建时间和开启 watch 模式下 rebuild 时间</em>。对应统计的是 development 模式下的笔者机器环境下几次构建时间的平均值，只作为相对快慢与量级的比较</p><h4 id="不同预设的效果总结" tabindex="-1">不同预设的效果总结 <a class="header-anchor" href="#不同预设的效果总结" aria-label="Permalink to &quot;不同预设的效果总结&quot;">​</a></h4><h5 id="质量" tabindex="-1">质量 <a class="header-anchor" href="#质量" aria-label="Permalink to &quot;质量&quot;">​</a></h5><p>对应的调试便捷性依次降低:</p><ul><li>源代码&gt;缺少列信息的源代码 &gt;loader 转换后的代码&gt;生成后的产物代码&gt;无法显示代码</li></ul><p>对应对质量产生影响的预设关键字优先级:</p><ul><li>souce-map = eval-source-map &gt; cheap-module- &gt; cheap- &gt; eval= none &gt; nosource-</li></ul><h5 id="构建速度" tabindex="-1">构建速度 <a class="header-anchor" href="#构建速度" aria-label="Permalink to &quot;构建速度&quot;">​</a></h5><p><strong>在开发环境下</strong>:一直开着 devServer ，再次构建的速度对效率影响远大于初次构建的速度 eval-对应的 EvalSourceMapDevToolPlugin 整体要快于不带 eval-的 SourceMapDevToolPlugin</p><p><strong>在生产环境下</strong>:通常不会开启再次构建，初次构建的速度更值得关注对构建速度以外因素的考虑要优先于对构建速度的考虑</p><h5 id="包的大小和生成方式" tabindex="-1">包的大小和生成方式 <a class="header-anchor" href="#包的大小和生成方式" aria-label="Permalink to &quot;包的大小和生成方式&quot;">​</a></h5><ul><li>需要关注速度和质量来保证高效开发体验</li><li>其他的部分则是在生产环境下需要考虑的问题</li></ul><h4 id="不同质量的源码示例" tabindex="-1">不同质量的源码示例 <a class="header-anchor" href="#不同质量的源码示例" aria-label="Permalink to &quot;不同质量的源码示例&quot;">​</a></h4><p>1.源码且包含列信息</p><p>2.源码不包含列信息</p><p>3.loader 转换后代码</p><p>4.生成后的产物代码</p><h4 id="开发环境下-source-map-推荐预设" tabindex="-1">开发环境下 Source Map 推荐预设 <a class="header-anchor" href="#开发环境下-source-map-推荐预设" aria-label="Permalink to &quot;开发环境下 Source Map 推荐预设&quot;">​</a></h4><ul><li>开发环境首选哪一种预设取决于 source map 对于我们的帮助程度</li><li>如果对项目代码了如指掌，可以关闭 devtool 或使用 eval 来获得最快构建速度</li><li>如果在调试时，需要通过 source map 来快速定位到源代码优先考虑使用 eval-cheap-modulesource-map ，它的质量与初次/再次构建速度都属于次优级</li><li>根据对质量要求更高或是对速度要求更高的不同情况可以分别考虑使用 eval-source-map 或 eval-cheap-source-map</li></ul><h4 id="几种工具和脚手架中的默认预设" tabindex="-1">几种工具和脚手架中的默认预设 <a class="header-anchor" href="#几种工具和脚手架中的默认预设" aria-label="Permalink to &quot;几种工具和脚手架中的默认预设&quot;">​</a></h4><ul><li><strong>webpack</strong> 配置中，默认值 eval，模块代码后多了 sourceURL 以帮助定位模块的文件名称</li><li><strong>create-react-app</strong> 中 <ul><li>生产环境下，根据 shouldUseSourceMap 参数决定使用 source-map’或 false</li><li>开发环境下，使用 cheap-module-source-map(不包含列信息的源代码，但更快)</li></ul></li><li><strong>vue-cli-service</strong> 中，与 creat-react-app 中相同</li></ul><h4 id="evalsourcemapdevtoolplugin-的使用" tabindex="-1">EvalSourceMapDevToolPlugin 的使用 <a class="header-anchor" href="#evalsourcemapdevtoolplugin-的使用" aria-label="Permalink to &quot;EvalSourceMapDevToolPlugin 的使用&quot;">​</a></h4><p>EvalSourceMapDevToolPlugin 的传入参数</p><ul><li>预设相关的 filename、append、module、columns</li><li>影响注释内容的 moduleFilenameTemplate 和 protocol</li><li>影响处理范围的 test、include、exclude</li></ul><h5 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h5><p>webpack.config.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//devtool: &#39;eval-source-map&#39;,</span></span>
<span class="line"><span style="color:#E06C75;">devtool</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#C678DD;">    new</span><span style="color:#E5C07B;"> webpack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">EvalSourceMapDevToolPlugin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">        texclude</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /node_modules/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        module</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        columns</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_4-接口调试-mock-工具如何快速进行接口调试" tabindex="-1">4.接口调试: Mock 工具如何快速进行接口调试? <a class="header-anchor" href="#_4-接口调试-mock-工具如何快速进行接口调试" aria-label="Permalink to &quot;4.接口调试: Mock 工具如何快速进行接口调试?&quot;">​</a></h3><p>什么是 Mock？</p><ul><li>在程序设计中使用模拟(Mock)的对象来替代真实对象以测试其他对象的行为</li><li>在前端开发流程中指模拟数据(俗称假数据)以及生成和使用模拟数据的工具与流程</li></ul><p>在一个前后端分离的开发项目中</p><ul><li>前端开发时间 t1，后端开发时间 t2，前后端联调时间 t3</li><li>整体的项目开发时间是 <code>&lt;=max (t1，t2) + t3</code></li><li>将整个开发流程按功能点进行更细粒度地拆分部分功能开发完成后立即进行联调</li></ul><p>前端需要依赖一定的数据模型来组织页面与组件中的交互流程</p><p>数模型依赖着后端提供的 API 接口</p><p>如何实现前端的无依赖的独立开发以提升效率呢？</p><p>答案就是：使用 Mock 数据</p><ul><li>假设在后端实际 API 功能完成之前</li><li>能获得对应的模拟数据作为接口的返回值来处理前端交互中的数据模型</li><li>待开发完成进入联调后将假数据的部分切换到真实的后端服务接口数据</li></ul><h4 id="选择-mock-方案的考量标准" tabindex="-1">选择 Mock 方案的考量标准 <a class="header-anchor" href="#选择-mock-方案的考量标准" aria-label="Permalink to &quot;选择 Mock 方案的考量标准&quot;">​</a></h4><ul><li>1.直接在代码中侵入式地书写静态返回数据来调试相关逻辑 <ul><li>方法的优缺点</li></ul></li><li>2.使用后端开发服务作为 Mock 服务，将未实现的功能在后端返回 Mock 数据 <ul><li>方法的优缺点</li></ul></li><li>3.通过一些本地 Mock 工具，使用项目本地化的 Mock 规则文件来生成 Mock 数据 <ul><li>方法的优缺点</li></ul></li><li>4.使用功能更丰富的接口管理工具来提供独立的 Mock 能力 <ul><li>方法的优缺点</li></ul></li></ul><h5 id="仿真度" tabindex="-1">仿真度 <a class="header-anchor" href="#仿真度" aria-label="Permalink to &quot;仿真度&quot;">​</a></h5><ul><li>Mock 数据需要在接口定义上尽可能与后端实际提供接口的各方面保持一致</li><li>数据定义的仿真度是决定实际模拟过程效率和质量的首要因素</li><li>通常在开发初期通过接口文档的方式来提供，或由提供类似功能的 Mock 工具来提供</li></ul><h5 id="易用性" tabindex="-1">易用性 <a class="header-anchor" href="#易用性" aria-label="Permalink to &quot;易用性&quot;">​</a></h5><ul><li>高效的 Mock 工具需要具备将接口文档自动转换为 Mock 接口的能力</li><li>当接口发生变化时会首先更新到文档中，并自动反映到提供的 Mock 数据中</li><li>后端提供的真实服务应当完整通过 Mock 接口的测试</li></ul><h5 id="灵活性" tabindex="-1">灵活性 <a class="header-anchor" href="#灵活性" aria-label="Permalink to &quot;灵活性&quot;">​</a></h5><ul><li>实际的接口调用中会根据不同的调用方式与传入参数等条件来输出不同的返回值</li><li>前端根据不同条件下返回值的差异做不同的交互处理</li></ul><h4 id="mock-js" tabindex="-1">Mock.js <a class="header-anchor" href="#mock-js" aria-label="Permalink to &quot;Mock.js&quot;">​</a></h4><p>Mock.is 的核心能力是</p><p>定义了两类生成模拟数据的规范，以及实现了应用相应规范生成模拟数据的方法</p><h5 id="数据模板定义规范-data-template-definition-dtd" tabindex="-1">数据模板定义规范 (Data Template Definition,DTD) <a class="header-anchor" href="#数据模板定义规范-data-template-definition-dtd" aria-label="Permalink to &quot;数据模板定义规范 (Data Template Definition,DTD)&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mock</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#98C379;">	&quot;number|1-100&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: number为1-100内随机数，例如fnumber: 73</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mock</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#98C379;">	&quot;boo|1-100&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: boo为true或false，其中true的概率为1%，例如boo: false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mock</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#98C379;">	&quot;str|1-100&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: str为1-100个随机长度的字符串1。例如{str:&#39;111119&#39;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="数据占位符定义规范-data-placeholder-definition-dpd" tabindex="-1">数据占位符定义规范 (Data Placeholder Definition,DPD) <a class="header-anchor" href="#数据占位符定义规范-data-placeholder-definition-dpd" aria-label="Permalink to &quot;数据占位符定义规范 (Data Placeholder Definition,DPD)&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mock</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@email&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Result: 随机单词连接成的email数据，例如: n.clark@miller.io</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mock</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@city(true)&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Result: 随机中国省份+省内城市数据，例如:“吉林省 辽源市</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Mock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mock</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#98C379;">	&quot;aa|1-3&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;@cname()&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">}); </span><span style="color:#7F848E;font-style:italic;">// Result: aa值为随机3个中文姓名的数组，例如faa:[&#39;张三!李四，王五个</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">image</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;200x100&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;#894FC4&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;#FFF&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;png&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: 利用dummyimage库生成的图片url。&quot;http://dummyimage.com/200x100/894FC4/FFF.png&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>占位符既可以用于单独返回指定类型的随机数据，又能结合数据模板作为模板中属性值的部分来生成更复杂的数据类型。Mock.js 中定义了 9 大类共 42 种占位符</p><h5 id="其他功能" tabindex="-1">其他功能 <a class="header-anchor" href="#其他功能" aria-label="Permalink to &quot;其他功能&quot;">​</a></h5><ul><li>1.Ajax 请求拦截 <ul><li>Mock.mock 方法中支持传入 Ajax 请求的 url 和 type</li><li>Mock.setup 方法设置拦截 Ajax 请求后的响应时间</li></ul></li><li>2.数据验证 <ul><li>Mock.valid 方法验证指定数据和数据模板是否匹配</li><li>用于验证后端 API 接口的返回值与对应 Mock 数据的规则描述是否冲突</li></ul></li><li>3.模板导出 <ul><li>Mock.to.JSONSchema</li><li>用于将数据模板导入到支持 JSON Schema 格式的工具中</li></ul></li></ul><h4 id="faker-js" tabindex="-1">Faker.js <a class="header-anchor" href="#faker-js" aria-label="Permalink to &quot;Faker.js&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 单独使用api方法</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> randomName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> faker</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findName</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Rowan Nikolaus</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> randomEmail</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> faker</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">internet</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">email</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Kassandra.Haley@erich.biz</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> randomCard</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> faker</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">helpers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createCard</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// random contact card containing</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// many properties</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用fake来组合api</span></span>
<span class="line"><span style="color:#E5C07B;">faker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fake</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{{name.lastName}}, {{name.firstName}} {{name.suffix}}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// outputs: &quot;Marks, Dean Sr.&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="两种方法对比" tabindex="-1">两种方法对比 <a class="header-anchor" href="#两种方法对比" aria-label="Permalink to &quot;两种方法对比&quot;">​</a></h4><p>两种工具都需要在项目本地编写数据生成模板或方法</p><p>根据一定的方式拦截 API 请求并指向本地生成的 Mock 数据</p><p>拦截的方法:</p><ul><li>可以类似 Mock.js 的覆盖 API 调用对象</li><li>通过网络代理将后端域名指向本地目录</li></ul><p>本地植入模拟数据生成器的方式从整体前后端工作的效率而言，并非最佳选择：</p><ul><li>1.数据模板和 TypeScript 类型需要通过人工来保持一致，缺乏自动检验的功能 <strong>(基于 TypeScript 接口类型描述对象来自动生成模拟数据)</strong></li><li>2.仍然需要后端编写完整的接口文档后才能开始编写数据生成逻辑</li><li>3.本地模拟数据规则本质上和接口文档脱离</li><li>2 和 3 <strong>(可以将接口文档和 Mock 数据服务以及接口测试工具结合在一起)</strong></li></ul><h4 id="mock-数据服务以及接口测试工具" tabindex="-1">Mock 数据服务以及接口测试工具 <a class="header-anchor" href="#mock-数据服务以及接口测试工具" aria-label="Permalink to &quot;Mock 数据服务以及接口测试工具&quot;">​</a></h4><h4 id="yapi" tabindex="-1">YApi <a class="header-anchor" href="#yapi" aria-label="Permalink to &quot;YApi&quot;">​</a></h4><h4 id="apifox" tabindex="-1">Apifox <a class="header-anchor" href="#apifox" aria-label="Permalink to &quot;Apifox&quot;">​</a></h4><p>Apifox 解决了接口定义与 Mock 数据脱离的问题</p><ul><li>1.在接口定义阶段，支持后端服务内定义的 OPEN API 风格的接口定义数据直接导入生成接口文档也支持在工具界面内填写字段创建，创建时支持设定返回值的 Mock 描述</li><li>2.在接口定义完成后，即可直接访问工具提供的 Mock 服务接口供前端调用</li><li>3.在后端接口开发过程中，可通过工具提供的接口调试功能进行开发调试</li><li>4.在接口完成后的任意时间点，支持接口的自动化测试来保证功能与描述的一致性</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>讨论了 Mock 工具在前后端分离开发流程中起到的作用，以及选择 Mock 方案的一般考量标准</p><p>重点介绍了几种 Mock 工具:</p><ul><li>专注于提供生成模拟数据这一核心能力的 Mock.js 和 Fakerojs</li><li>更平台化的内置 Mock 功能的 YApi 和 Apifox</li></ul><h3 id="_5-编码效率-如何提高编写代码的效率" tabindex="-1">5.编码效率:如何提高编写代码的效率? <a class="header-anchor" href="#_5-编码效率-如何提高编写代码的效率" aria-label="Permalink to &quot;5.编码效率:如何提高编写代码的效率?&quot;">​</a></h3><h4 id="_5-1-通过脚手架生成一个项目的基础代码-免去了投入其中的时间" tabindex="-1">5.1 通过脚手架生成一个项目的基础代码，免去了投入其中的时间 <a class="header-anchor" href="#_5-1-通过脚手架生成一个项目的基础代码-免去了投入其中的时间" aria-label="Permalink to &quot;5.1 通过脚手架生成一个项目的基础代码，免去了投入其中的时间&quot;">​</a></h4><ul><li><p>预处理语言：通过对应的预处理器将预处理语言在编译时转换为更完整的普通语法代码</p><ul><li>预处理语言可以在原有语言的语法基础上提供更多新的内置功能及精简语法以便提高代码复用性和书写效率</li><li>三种目前主流的 CSS 预处理语言：Sass (2006) ， Less (2009) 和 Stylus (2010) <ul><li>react-scripts 集成了 sass-loader ，vue-cli-service 同时支持这三种预处理器</li><li>Bootstrap4、Antd 和 iView 使用 Less ， ElementUl 使用 Sass</li><li>三种 CSS 的预处理语言都实现了： <ul><li>变量 (Variables) 、嵌套 (Nesting) 、混合 (Mixins) 、运算 (Operators)父选择器引用 (Parent Reference) 、扩展 (Extend) 和大量内建函数 (Build-in Functions)</li></ul></li><li>不同： <ul><li>Less 缺少自定义函数的功能 (可以使用 Mixins 结合 Guard 实现类似效果)</li><li>Stylus 更有利于编写复杂的计算函数</li></ul></li><li>语法对比： <ul><li>Sass 支持.scss 与 sass 两种文件格式</li><li>Less 的整体语法更接近于.scss</li><li>Stylus 同时支持类似.sass 的精简语法和普通 CSS 语法</li></ul></li><li>安装方式： <ul><li>Sass 有两种 npm 编译安装包，基于 LibSass 的 node-sass 和基于 dart-sass 的 Sass</li><li>使用 webpack 构建，三种语言对应的预处理器是 sass-loader、less-loader、stvlus-loader 注意:sass-loader 和 stylus-loader 安装时需要同时安装独立编译包 Sass/node-sass 和 Stylussass-loader 处理 partial 文件中的资源路径时需要增加 resolve-url-loader(以及 sass-loader 中需要开启 sourceMap 参数) 以避免编译时的报错 stylus-loader 需要增加“resolve url”参数</li></ul></li></ul></li><li>html 模板预处理生成语言 <ul><li>Pug：Pug 的前身名叫 Jade (2010</li><li>Pug 支持迭代、扩展 (Extend)(lteration) 、条件(Condition) 包含 (Include) 、混合(Mixins) 等逻辑功能</li><li>各个开发框架的支持： <ul><li>Vue 文件的 template 支持添加 lang=&quot;pug</li><li>在 vue-cli-service 的 webpack 配置中，内置了 pug-loader 作为预处理器</li><li>在 React 开发中，通过 babel 插件获得支持</li></ul></li></ul></li><li>其他： <ul><li>具有精简语法功能的有--对应 JavaScript 的 CoffeeScript 和对应 JSON 的 YAML 等</li><li>YAML 语言目前主要在一些配置上使用 例如 Dockerfile 和一些持续集成工具 (CI)的配置文件</li></ul></li></ul></li><li><p>代码生成：以达到在编写时自动生成代码的作用</p><ul><li><p>1.使用 IDE (Integrated Development Environment，集成开发环境) 的相关预设功能帮助生成代码</p><ul><li>功能主要包括：智能帮助、Snippet 和 Emmet 在 IDE 中会默认内置一些智能帮助功能，例如输入时的联想匹配、自动完成、类型提示、语法检查等</li></ul></li><li><p>2.VSCode 的 Snippet 插件 一一 开发过程中用户在 IDE 内使用的可复用代码片段</p><ul><li><p>自定义代码片段：sample.code-snippets</p></li><li><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;Typescript Interface&quot;</span><span style="color:#ABB2BF;">:{ </span><span style="color:#7F848E;font-style:italic;">// 片段名称，下面描述不存在时显示在IDE智能提示中</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;scope&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;typescript&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 语言的作用域，不填写时默认对所有文件有效</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;prefix&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;tif&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 触发片段的输入前缀字符(输入第一个字符时即开始匹配)</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;body&quot;</span><span style="color:#ABB2BF;">:[ </span><span style="color:#7F848E;font-style:italic;">// 片段内容</span></span>
<span class="line"><span style="color:#98C379;">            &quot;interface \${1:IFName}{&quot;</span><span style="color:#7F848E;font-style:italic;"> // $1,$2..为片段生成后光标位置，通过tab切换</span></span>
<span class="line"><span style="color:#98C379;">              &quot;t\${2:key}: \${3:value}&quot;</span><span style="color:#7F848E;font-style:italic;">// S{n:xx}的xx为占位文本</span></span>
<span class="line"><span style="color:#98C379;">            &quot;}&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        ],</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;output typescript interface&quot;</span><span style="color:#7F848E;font-style:italic;"> // 描述，显示在智能提示中</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>任意.ts 文件中输入 <code>tif + 回车</code> 即可生成下面的代码，同时兴标停留在 IFName 处</p></li><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">interface</span><span style="color:#98C379;"> IFName</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;"> key:</span><span style="color:#98C379;"> value</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li><li><p>3.Emmet (前身为 Zen Coding) (VSCode 集成了)是一个面向各种编辑器的 web 开发插件用于高速编写和编辑结构化的代码</p><ul><li><p>缩写代码块</p></li><li><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#main&gt;h1#header+ol&gt;.item-SS List ItemS]*3footer</span><span style="color:#ABB2BF;"> // 转换为</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;main&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;header&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">ol</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">li</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item-01&quot;</span><span style="color:#ABB2BF;">&gt;List ltem1&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">li</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item-02&quot;</span><span style="color:#ABB2BF;">&gt;List ltem2&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">li</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item-03&quot;</span><span style="color:#ABB2BF;">&gt;List ltem3&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">ol</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">footer</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">footer</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>CSS 缩写:支持常用属性和值的联合缩写</p></li><li><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">m10 =</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;"> margin:10px</span></span>
<span class="line"><span style="color:#C678DD;">p100p =</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;"> padding:100%?</span></span>
<span class="line"><span style="color:#C678DD;">bdrsle =</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> border-radius</span><span style="color:#C678DD;">: lem;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>自定义片段</p></li><li><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;html&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;snippets&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;dltd&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;dl&gt;(dt+dd)*2&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;css&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;snippets&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;wsnp&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;white-space: no-wrap&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul></li></ul></li></ul><h4 id="_5-2-上述工具的一般使用建议一-html" tabindex="-1">5.2 上述工具的一般使用建议一 Html <a class="header-anchor" href="#_5-2-上述工具的一般使用建议一-html" aria-label="Permalink to &quot;5.2 上述工具的一般使用建议一 Html&quot;">​</a></h4><ul><li>Html 语言作为一个组件的模板存在</li><li>组件模板中通常由框架提供了数据注入 (Interpolation) 以及循环、条件等语法</li><li>组件化本身解决了包含、混入等代码复用的问题</li><li>简化标签书写可以选择使用 Pug 语言，也可以使用 Emmet</li><li>Emmet 取消缩进后作为替代需要通过关系标识符来作为连接</li></ul><h4 id="_5-3-上述工具的一般使用建议一-css" tabindex="-1">5.3 上述工具的一般使用建议一 CSS <a class="header-anchor" href="#_5-3-上述工具的一般使用建议一-css" aria-label="Permalink to &quot;5.3 上述工具的一般使用建议一 CSS&quot;">​</a></h4><ul><li>使用预处理语言赋予的更强的代码抽象和组织能力，同时结合 Emmet 提供的属性缩写功能，能提升整体 CSS 开发的效率</li><li>项目中主要使用 UI 组件库来呈现界面，而只需要少量编写自定义样式的话，使用 Emmet 的优先级更高</li><li>CSS 预处理语言的选择上，由于主要功能的相似性，团队统一选择其一即可</li></ul><h4 id="_5-4-上述工具的一般使用建议一-javascript-typescript" tabindex="-1">5.4 上述工具的一般使用建议一-JavaScript/TypeScript <a class="header-anchor" href="#_5-4-上述工具的一般使用建议一-javascript-typescript" aria-label="Permalink to &quot;5.4 上述工具的一般使用建议一-JavaScript/TypeScript&quot;">​</a></h4><p>JS/TS 的开发过程是非结构化的，提效工具主要是使用 Snippet</p><p>第三方扩展提供的常用语句的缩写，结合开发者自定义的常用片段，再次提升编码效率</p><h4 id="_5-5-总结" tabindex="-1">5.5 总结 <a class="header-anchor" href="#_5-5-总结" aria-label="Permalink to &quot;5.5 总结&quot;">​</a></h4><p>这一课时讨论了两种类型的提效工具: 预处理语言和代码生成工具</p><p>功能重叠的场景，例如 Pug 和 Emmet 中的 html 生成</p><h3 id="_6-团队工具-如何利用云开发提升团队开发效率" tabindex="-1">6.团队工具:如何利用云开发提升团队开发效率? <a class="header-anchor" href="#_6-团队工具-如何利用云开发提升团队开发效率" aria-label="Permalink to &quot;6.团队工具:如何利用云开发提升团队开发效率?&quot;">​</a></h3><h4 id="_6-1-软件开发环境的对比一一个人电脑开发环境" tabindex="-1">6.1 软件开发环境的对比一一个人电脑开发环境 <a class="header-anchor" href="#_6-1-软件开发环境的对比一一个人电脑开发环境" aria-label="Permalink to &quot;6.1 软件开发环境的对比一一个人电脑开发环境&quot;">​</a></h4><ul><li>1.基础环境准备:准备开发环境所需设施，下载安装开发所需各种应用程序，调试各种配置文件，安装必要 IDE 插件并调试 IDE 配置项等</li><li>2.下载代码:将项目源代码从代码仓库 (例如 Git Repo) 中下载到个人电脑的开发目录下</li><li>3.安装项目依赖</li><li>4.运行开发服务</li><li>5.编码和调试</li><li>6.执行任务(Lint 检查、格式化检查、单元测试等)</li></ul><h4 id="_6-2-软件开发环境的对比一一远程开发" tabindex="-1">6.2 软件开发环境的对比一一远程开发 <a class="header-anchor" href="#_6-2-软件开发环境的对比一一远程开发" aria-label="Permalink to &quot;6.2 软件开发环境的对比一一远程开发&quot;">​</a></h4><p>将开发环境部署到远程服务器，通过个人电脑的 IDE(IntegratedDevelopment Environment ，集成开发环境)进行远程连接来进行开发的方式</p><h5 id="远程开发优势" tabindex="-1">远程开发优势 <a class="header-anchor" href="#远程开发优势" aria-label="Permalink to &quot;远程开发优势&quot;">​</a></h5><ul><li>01.由远程的开发服务器来承载项目数据存储和运行计算的需求</li><li>02.减少了访问设备变更对于项目开发的影响</li></ul><h5 id="远程开发的主要问题" tabindex="-1">远程开发的主要问题 <a class="header-anchor" href="#远程开发的主要问题" aria-label="Permalink to &quot;远程开发的主要问题&quot;">​</a></h5><ul><li>需要申请单独的开发机资源</li><li>新申请的开发机需要人工进行基础环境的准备工作</li><li>将开发机单独用于远程开发，资源分配上可能存在资源利用不充分的问题</li></ul><h4 id="_6-3-云开发" tabindex="-1">6.3 云开发 <a class="header-anchor" href="#_6-3-云开发" aria-label="Permalink to &quot;6.3 云开发&quot;">​</a></h4><ul><li>1.云开发模式是将开发环境托管，由远程开发服务器变更为云服务</li><li>2.个人电脑通过 IDE 或云服务提供的浏览器界面访问云端工作区进行开发</li></ul><h5 id="云开发优势" tabindex="-1">云开发优势 <a class="header-anchor" href="#云开发优势" aria-label="Permalink to &quot;云开发优势&quot;">​</a></h5><ul><li>1.提升开发环境准备的效率</li><li>2.简化使用流程</li><li>3.提升团队协作效率</li><li>4.有利于资源利用率的提升和硬件资产成本的降低</li></ul><h4 id="_6-4-典型的云开发产品" tabindex="-1">6.4 典型的云开发产品 <a class="header-anchor" href="#_6-4-典型的云开发产品" aria-label="Permalink to &quot;6.4 典型的云开发产品&quot;">​</a></h4><table tabindex="0"><thead><tr><th>产品</th><th>厂商</th><th>基础 IDE</th><th>IDE 类型</th><th>代码托管方式</th></tr></thead><tbody><tr><td>VS Codespace</td><td>微软</td><td>VS Code</td><td>Web/VS/VSC</td><td>云端 (Asure) /自维护</td></tr><tr><td>Gitpod</td><td>Eclipse</td><td>Theia</td><td>Web/Desktop</td><td>云端/自维护(限制用户数量)</td></tr><tr><td>CloudIDE</td><td>阿里云</td><td>KAITIAN IDE</td><td>Web</td><td>云端</td></tr><tr><td>Cloud Studio</td><td>Coding.net(腾讯云)</td><td>VS Code</td><td>Web</td><td>云端 (5 个工作空间)</td></tr><tr><td>Cloud9</td><td>AWS</td><td>Cloud9</td><td>Web</td><td>云端(AWS)</td></tr></tbody></table><h5 id="微软-visual-studio-codespace" tabindex="-1">微软: Visual Studio Codespace <a class="header-anchor" href="#微软-visual-studio-codespace" aria-label="Permalink to &quot;微软: Visual Studio Codespace&quot;">​</a></h5><ul><li>1.支持三种访问客户端:VS Code，Visual StudioIDE，Web</li><li>2.提供收费的云托管(Azure) 环境与免费的自维护环境两种服务方式</li><li>3.内置多人协作工具 Live Share 和 AI 智能代码提示功能 InteliCode</li><li>5.自定义个性化配置，定制环境中各类配置文件</li><li>4.自定义环境基础配置，可定制化开发环境基础设施</li></ul><h5 id="eclipse-theia" tabindex="-1">Eclipse: Theia <a class="header-anchor" href="#eclipse-theia" aria-label="Permalink to &quot;Eclipse: Theia&quot;">​</a></h5><p>Eclipse Theia(以下简称 Theia) 的定位是以 NodeJS 和 TS 为技术栈开发的云端和桌面端的 IDE 基础架</p><p>2018 年发布了对应的 Web 端 IDE 产品 Gitpod</p><h6 id="theia-和-vs-code-的技术相同点" tabindex="-1">Theia 和 VS Code 的技术相同点 <a class="header-anchor" href="#theia-和-vs-code-的技术相同点" aria-label="Permalink to &quot;Theia 和 VS Code 的技术相同点&quot;">​</a></h6><ul><li>1.编辑器核心都基于 Monaco Editor</li><li>2.都支持 Language Server Protocol (LSP)</li><li>3.都支持 VSCode 的插件体系</li><li>4.都支持 DebugAdepterProtocol(DAP)</li></ul><h6 id="与-vs-code-相比-theia-的不同之处在于" tabindex="-1">与 VS Code 相比，Theia 的不同之处在于 <a class="header-anchor" href="#与-vs-code-相比-theia-的不同之处在于" aria-label="Permalink to &quot;与 VS Code 相比，Theia 的不同之处在于&quot;">​</a></h6><ul><li>1.从一开始就被设计成同时运行于桌面和云端</li><li>2.架构上更模块化，更易于自定义</li><li>3.由厂商中立的开源基金会开发维护</li><li>4.开发独立的 WebIDE 是云开发产品的首选，但 Thiea 有开源可定制化的版本</li></ul><h4 id="_6-5-云开发模式的技术要素" tabindex="-1">6.5 云开发模式的技术要素 <a class="header-anchor" href="#_6-5-云开发模式的技术要素" aria-label="Permalink to &quot;6.5 云开发模式的技术要素&quot;">​</a></h4><p>WebIDE</p><ul><li>便于平台化定制 <ul><li>在团队使用时可通过定制 WebIDE 来实现通用的功能扩展和升级</li></ul></li><li>流程体验上更平滑 <ul><li>通过和代码仓库以及 CI/CD 工具的对接，可以在很多流程节点上做到平滑的体验</li></ul></li></ul><p>容器化</p><ul><li>1.每个用户的每个项目创建独立的工作空间</li><li>2.便于团队成员维护相同项目时提升环境创建效率</li><li>3.有利于提升资源利用率，同时环境搭建更便捷</li></ul><p>对接其他云服务</p><ul><li>与其他上下游服务的对接，例如在阿里云的 CloudIDE 产品中，包含了一键部署等功能</li></ul><h4 id="_6-6-云开发的效率提升应用场景一一项目篇" tabindex="-1">6.6 云开发的效率提升应用场景一一项目篇 <a class="header-anchor" href="#_6-6-云开发的效率提升应用场景一一项目篇" aria-label="Permalink to &quot;6.6 云开发的效率提升应用场景一一项目篇&quot;">​</a></h4><ul><li><strong>加速创建新项目</strong>：在云开发模式下，可以将包含依赖安装的项目模板存储为镜像</li><li><strong>项目依赖版本统一</strong>：免去安装依赖，以达到各环境下依赖版本的统一管理，同时也提升了各环境的处理效率</li></ul><h4 id="_6-7-云开发的效率提升应用场景一一工具篇" tabindex="-1">6.7 云开发的效率提升应用场景一一工具篇 <a class="header-anchor" href="#_6-7-云开发的效率提升应用场景一一工具篇" aria-label="Permalink to &quot;6.7 云开发的效率提升应用场景一一工具篇&quot;">​</a></h4><ul><li><strong>开箱即用的开发环境</strong>：可以将开发所需的不同基础环境以及各种应用程序制作成开发环境镜像，供开发者自由选择</li><li><strong>自定义辅助工具的快速共享和共建</strong>：辅助工具都可以在云平台的模式下快速落地，集成到各开发者的工作空间中</li></ul><h4 id="_6-8-云开发的效率提升应用场景一一流程篇" tabindex="-1">6.8 云开发的效率提升应用场景一一流程篇 <a class="header-anchor" href="#_6-8-云开发的效率提升应用场景一一流程篇" aria-label="Permalink to &quot;6.8 云开发的效率提升应用场景一一流程篇&quot;">​</a></h4><ul><li><strong>连接代码仓库与开发环境</strong>：从代码仓库的任意 commit 直连创建云端工作空间或进入已有工作空间</li><li><strong>连接 Pipeline 与开发环境</strong>：通过对应的提交信息，直连创建临时修复用途的项目工作空间</li></ul><h4 id="_6-9-使用云开发的注意点" tabindex="-1">6.9 使用云开发的注意点 <a class="header-anchor" href="#_6-9-使用云开发的注意点" aria-label="Permalink to &quot;6.9 使用云开发的注意点&quot;">​</a></h4><p>代码安全问题</p><ul><li>在代码仓库中设置具体项目的访问权限</li><li>在使用云开发模式时应当首选支持内部部署的云服务或搭建自维护的云服务</li></ul><p>服务搭建与维护</p><ul><li>对于大厂，搭建自维护的云开发服务</li><li>对于中小规模的技术团队，购买使用一些支持内部部署的现有云开发服务</li></ul><p>服务降级与备份</p><ul><li>云开发模式下将开发环境与工作代码都存储于云端需要考虑当云端服务异常时的降级策略</li></ul><h4 id="_6-10-总结" tabindex="-1">6.10 总结 <a class="header-anchor" href="#_6-10-总结" aria-label="Permalink to &quot;6.10 总结&quot;">​</a></h4><ul><li>介绍了云开发的概念，以及它能解决哪些方面的问题</li><li>了解了几款有代表性的云产品，重点关注的是 VS Code 系的 Codespace 产品如果对定制 WebIDE 感兴趣，从 Theia 入手会较好</li><li>讨论了云开发这种模式的一般技术要素，以及使用它所能带来的</li><li>几个比较明确的效率提升场景几个新技术对应的风险点</li></ul><h3 id="_7-低代码工具-如何用更少的代码实现更灵活的需求" tabindex="-1">7.低代码工具:如何用更少的代码实现更灵活的需求? <a class="header-anchor" href="#_7-低代码工具-如何用更少的代码实现更灵活的需求" aria-label="Permalink to &quot;7.低代码工具:如何用更少的代码实现更灵活的需求?&quot;">​</a></h3><h4 id="_7-1-什么是低代码开发" tabindex="-1">7.1 什么是低代码开发？ <a class="header-anchor" href="#_7-1-什么是低代码开发" aria-label="Permalink to &quot;7.1 什么是低代码开发？&quot;">​</a></h4><p><strong>低代码开发</strong>(Low-Code Development 简称 LCD)</p><ul><li>开发者主要通过图形化用户界面和配置来创建应用软件</li></ul><p><strong>低代码开发平台</strong>(Low-CodeDevelopment Platform 简称 LCDP)</p><ul><li><p>低代码开发模式的开发者通过平台的功能和约束来实现专业代码的产出</p><p>1.在高度定制化的场景中，基于经验总结，找到那些相对固定的产品形态，开放少量的编辑入口，让非专业开发者也能使用</p><p>2.尝试以组件化和数据绑定为基础，通过抽象语法或 IDE 来实现自由度更高、交互复杂度上限更高的页面搭建流程</p></li></ul><h4 id="_7-2-低代码开发的典型应用场景" tabindex="-1">7.2 低代码开发的典型应用场景 <a class="header-anchor" href="#_7-2-低代码开发的典型应用场景" aria-label="Permalink to &quot;7.2 低代码开发的典型应用场景&quot;">​</a></h4><p>低代码开发的一类典型应用场景是在 PC 端中后台系统的开发流程中</p><ul><li>可以基于统一的 UI 组件库来实现搭建，通过组件拖拽组合即可灵活组织成不同形态功能的页面</li><li>中后台系统涉及到数据的增删改查，需要有一定的编码调试能力，不适用无代码开发模式</li></ul><p><strong>以中后台为开发目标，可以分为以下两种</strong>：</p><h5 id="_1-基于编写-json-的开发方式" tabindex="-1">1.基于编写 JSON 的开发方式 <a class="header-anchor" href="#_1-基于编写-json-的开发方式" aria-label="Permalink to &quot;1.基于编写 JSON 的开发方式&quot;">​</a></h5><ul><li>01 一个项目的前端部分本质上呈现的是通过路由连接的不同页面</li><li>02 每一个页面的内容在浏览器中，最终都归结为 DOM 语法树(DOM Tree) +样式 (Style) +动态交互逻辑 (Dynamic Logic)</li><li>03 页面的内容可以定义为，组件树(Component Tree) +动态交互逻辑(Dynamic Logic)</li></ul><h6 id="基于-json-schema-的低代码开发的切入逻辑" tabindex="-1">基于 JSON-Schema 的低代码开发的切入逻辑 <a class="header-anchor" href="#基于-json-schema-的低代码开发的切入逻辑" aria-label="Permalink to &quot;基于 JSON-Schema 的低代码开发的切入逻辑&quot;">​</a></h6><ul><li>1.在特定场景下，例如开发中后台增删改查页面时，大部分前端手动编写的代码是模式化的</li><li>2.页面组件结构模板和相应数据模型的代码组织，可以替换为更高效的 JSON 语法树描述</li><li>3.通过制定用于编写的 JSON 语法图式(JSON Schema) ，以及封装能够渲染对应 JSON 语法树的运行时工具集，可以提升开发效率，降低开发技术要求</li></ul><p>代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h6 id="编写-json-开发的高效性" tabindex="-1">编写 JSON 开发的高效性 <a class="header-anchor" href="#编写-json-开发的高效性" aria-label="Permalink to &quot;编写 JSON 开发的高效性&quot;">​</a></h6><ul><li>由于只用编写 JSON ，隐藏了前端开发所需的大量技术细节 (构建、框架等等) ，降低了对开发人员的编码要求</li><li>大量的辅助代码集成在工具内部，整体上减少了需要生成的代码量</li><li>可以对中后台系统所使用的常用业务组件进行抽象，然后以示例页面或示例组件的方式，供用户选择</li></ul><h6 id="编写-json-开发的缺点" tabindex="-1">编写 JSON 开发的缺点 <a class="header-anchor" href="#编写-json-开发的缺点" aria-label="Permalink to &quot;编写 JSON 开发的缺点&quot;">​</a></h6><ul><li>输入效率</li><li>学习记忆成本</li><li>复用性和可维护性</li><li>问题排查难度增加</li></ul><h5 id="_2-基于可视化操作平台的开发方式" tabindex="-1">2.基于可视化操作平台的开发方式 <a class="header-anchor" href="#_2-基于可视化操作平台的开发方式" aria-label="Permalink to &quot;2.基于可视化操作平台的开发方式&quot;">​</a></h5><p><img src="`+t+'" alt="基于可视化操作平台的低代码开发"></p><h6 id="可视化操作平台的基本使用方式" tabindex="-1">可视化操作平台的基本使用方式 <a class="header-anchor" href="#可视化操作平台的基本使用方式" aria-label="Permalink to &quot;可视化操作平台的基本使用方式&quot;">​</a></h6><ul><li>1.首先，在左侧面板中选择组件</li><li>2.然后，拖入中间预览区域，并放置到合适的容器块内</li><li>3.最后，试右侧面板中新移入的组件属性</li><li>4.调试完成后，进行下一个组件的循环操作直到整个页面搭建完成</li></ul><h6 id="可视化操作平台的生产效率影响因素" tabindex="-1">可视化操作平台的生产效率影响因素 <a class="header-anchor" href="#可视化操作平台的生产效率影响因素" aria-label="Permalink to &quot;可视化操作平台的生产效率影响因素&quot;">​</a></h6><p>编写 JSON 的产出效率更大程度上取决于编写页面的开发者的技术熟练度</p><ul><li>平台的功能完备性直接决定了用户产出的上限</li><li>平台的逻辑自洽性决定了用户产出的质量</li><li>平台提供的交互易用性决定了用户的产出效率</li></ul><h6 id="低代码开发的产品" tabindex="-1">低代码开发的产品 <a class="header-anchor" href="#低代码开发的产品" aria-label="Permalink to &quot;低代码开发的产品&quot;">​</a></h6><ul><li>商用的产品：例如 Kony、OutSystems、Mendix、Appian、iVX(国内)等</li><li>开源类的产品：例如阿里飞冰、百度 Amis、贝壳河图 Vvvebjs、react-visual-editor 等</li></ul><h4 id="_7-3-总结" tabindex="-1">7.3 总结 <a class="header-anchor" href="#_7-3-总结" aria-label="Permalink to &quot;7.3 总结&quot;">​</a></h4><p>介绍了低代码开发的概念和它的基本应用场景</p><p>了解了低代码开发的两种基本开发模式:基于编写 JSON 的方式和基于可视化操作平台的方式</p><ul><li>基于编写 JSON 的方式：降低了使用者的技术要求提升了开发的效率，但是在一些方面仍然不甚理想</li><li>基于可视化操作平台的方式：解决了编写 JSON 模式下的一些问题，但搭建一个功能完备、使用逻辑自洽和交互性良好的平台并非易事</li></ul><p>低代码工具主要面向什么样的用户群体呢</p><p>具有一定技术基础的开发人员：使用组件开发模式的人</p><h3 id="_8-无代码工具-如何做到不写代码就能高效交付" tabindex="-1">8.无代码工具:如何做到不写代码就能高效交付? <a class="header-anchor" href="#_8-无代码工具-如何做到不写代码就能高效交付" aria-label="Permalink to &quot;8.无代码工具:如何做到不写代码就能高效交付?&quot;">​</a></h3><h4 id="_8-1-无代码开发模式的出现" tabindex="-1">8.1 无代码开发模式的出现 <a class="header-anchor" href="#_8-1-无代码开发模式的出现" aria-label="Permalink to &quot;8.1 无代码开发模式的出现&quot;">​</a></h4><ul><li>需求量大且更新频率快的小型项目</li><li>开发人员成本昂贵，供不应求</li><li>项目流程模式基本相同但又具有一定的定制性</li><li>非互联网企业缺少技术资源</li></ul><h4 id="_8-2-无代码开发介绍" tabindex="-1">8.2 无代码开发介绍 <a class="header-anchor" href="#_8-2-无代码开发介绍" aria-label="Permalink to &quot;8.2 无代码开发介绍&quot;">​</a></h4><h5 id="无代码开发" tabindex="-1">无代码开发 <a class="header-anchor" href="#无代码开发" aria-label="Permalink to &quot;无代码开发&quot;">​</a></h5><p>(No-Code Development/ Codeless Development) 指通过非手写代码工具来产出代码的方式</p><h5 id="无代码开发平台" tabindex="-1">无代码开发平台 <a class="header-anchor" href="#无代码开发平台" aria-label="Permalink to &quot;无代码开发平台&quot;">​</a></h5><p>(No-Code Development Platform，NCDP)</p><h4 id="_8-3-无代码开发和低代码开发的区别" tabindex="-1">8.3 无代码开发和低代码开发的区别 <a class="header-anchor" href="#_8-3-无代码开发和低代码开发的区别" aria-label="Permalink to &quot;8.3 无代码开发和低代码开发的区别&quot;">​</a></h4><table tabindex="0"><thead><tr><th>区别维度</th><th>低代码开发</th><th>无代码开发 (面向非开发)</th><th>无代码开发 (面向准开发)</th></tr></thead><tbody><tr><td>目标人群</td><td>主要面向有一定技术基础的开发人员</td><td>主要面向非开发岗位人员 (例如运营人员，设计人员)</td><td>主要面向准开发人员 (对开发思维的需求随项目难度递增)</td></tr><tr><td>目标产品</td><td>主要为 B 端中后台</td><td>主要为 C 端活动或 H5</td><td>结合前两者</td></tr><tr><td>开发模式</td><td>编写 JSON/操作图形化交互平台(偏重前端)</td><td>操作图形化交互平台 (偏重前)</td><td>操作图形化交互平台(前端到后端)</td></tr><tr><td>基础设施</td><td>通用的组件库与渲染流程</td><td>典型的页面/项目模板，以及与视觉呈现相关的组件</td><td>前后端组件</td></tr><tr><td>可自由定制的内容</td><td>组件的选择、布局、属性、数据交互</td><td>可视化数据 (文本、媒体、动画等)的编辑</td><td>前端可视化数据，后端数据与逻辑功能等</td></tr><tr><td>数据接口</td><td>通常由独立后端单独开发提供</td><td>无数据接口，或通常由平台方提供标准化的接口</td><td>基于云基础设施的数据功能</td></tr><tr><td>部署</td><td>可单独部署</td><td>通常由平台方提供云服务部署</td><td>通常由平台方提供云服务部署</td></tr></tbody></table><h4 id="_8-4-典型产品分析" tabindex="-1">8.4 典型产品分析 <a class="header-anchor" href="#_8-4-典型产品分析" aria-label="Permalink to &quot;8.4 典型产品分析&quot;">​</a></h4><h5 id="面向非开发人员的无代码开发产品" tabindex="-1">面向非开发人员的无代码开发产品 <a class="header-anchor" href="#面向非开发人员的无代码开发产品" aria-label="Permalink to &quot;面向非开发人员的无代码开发产品&quot;">​</a></h5><ul><li>设计目标是将一些固定类型的项目生产流程由代码开发转变为操作图形化交互工具</li></ul><h5 id="企业内部的定制化搭建平台" tabindex="-1">企业内部的定制化搭建平台 <a class="header-anchor" href="#企业内部的定制化搭建平台" aria-label="Permalink to &quot;企业内部的定制化搭建平台&quot;">​</a></h5><ul><li>1.产品确定活动流程，交付产品文档与原型</li><li>2.设计师设计页面，交付设计稿</li><li>3.前端工程师开发活动的前端代码</li><li>4.后端工程师开发活动的后端代码</li><li>5.前后端联调后交付测试</li><li>6.测试通过后部署上线</li></ul><p>针对同一类型的活动项目前后端工程师可以开发出对应的可视化活动搭建平台</p><ul><li>01 选择活动类型并预览效果的功能</li><li>02 文本、图片、活动金额、上下线时间等元素替换功能</li><li>03 数据统计等辅助模块</li></ul><h5 id="外部无代码搭建平台" tabindex="-1">外部无代码搭建平台 <a class="header-anchor" href="#外部无代码搭建平台" aria-label="Permalink to &quot;外部无代码搭建平台&quot;">​</a></h5><p>百度 H5 生成平台</p><ul><li>01 场景类型固定</li><li>02 设计模板丰富</li><li>03 定制化功能多样</li><li>04 后端功能较少</li><li>05 部署在云端</li><li>06 使用人群细化</li></ul><p>面向准开发人员的无代码开发产品一一更为多样化的应用场景</p><p><img src="'+r+'" alt="面向准开发人员的无代码开发产品一一更为多样化的应用场景"></p><p>面向准开发人员的无代码开发产品一一目标人群的变化</p><ul><li>1.能够吸引更多有产品思维但缺少实际开发经验的个人或缺少开发资源的团队尝试使用</li><li>2.开发一个复杂的项目，对开发人员的要求不只体现在代码能力方面，还需要开发人员对产品全栈架构与交互逻辑层面有一定的认识和理解</li><li>3.使用者对这类全新的开发工具和流程的开发经验的掌握，很难迁移到其他开发工具和流程中</li></ul><h4 id="_8-5-总结" tabindex="-1">8.5 总结 <a class="header-anchor" href="#_8-5-总结" aria-label="Permalink to &quot;8.5 总结&quot;">​</a></h4><p>对比了低代码开发和无代码开发两种开发模式不同维度的区别</p><p>介绍了无代码开发的两种不同方向: <strong>面向非开发人员的产品</strong> 与 <strong>面向准开发人员的产品</strong></p><h5 id="面向非开发人员的无代码" tabindex="-1">面向非开发人员的无代码 <a class="header-anchor" href="#面向非开发人员的无代码" aria-label="Permalink to &quot;面向非开发人员的无代码&quot;">​</a></h5><h6 id="在企业内部" tabindex="-1">在企业内部 <a class="header-anchor" href="#在企业内部" aria-label="Permalink to &quot;在企业内部&quot;">​</a></h6><ul><li>将一些频率高的常用简易开发流程，固化为无代码开发产品，供运营或其他岗位人员使用</li></ul><h6 id="在企业外部" tabindex="-1">在企业外部 <a class="header-anchor" href="#在企业外部" aria-label="Permalink to &quot;在企业外部&quot;">​</a></h6><ul><li>有免费或收费的无代码平台，将开发工具提供给缺乏技术资源的企业与个人</li><li>设计师可以制作自己的设计模板提供给用户</li></ul><h5 id="面向准开发人员的无代码产品" tabindex="-1">面向准开发人员的无代码产品 <a class="header-anchor" href="#面向准开发人员的无代码产品" aria-label="Permalink to &quot;面向准开发人员的无代码产品&quot;">​</a></h5><ul><li>具有更广泛的使用场景</li><li>通过提供后端数据与逻辑的描述功能，用户可以通过 IDE 开发出具备前后端数据交互的复杂应用，近一步减少与普通代码开发的功能边界的差距</li></ul><h2 id="二、构建效率" tabindex="-1">二、构建效率 <a class="header-anchor" href="#二、构建效率" aria-label="Permalink to &quot;二、构建效率&quot;">​</a></h2><h3 id="_1-构建总览-前端构建工具的演进" tabindex="-1">1.构建总览:前端构建工具的演进 <a class="header-anchor" href="#_1-构建总览-前端构建工具的演进" aria-label="Permalink to &quot;1.构建总览:前端构建工具的演进&quot;">​</a></h3><h4 id="_1-1-前端开发语言" tabindex="-1">1.1 前端开发语言 <a class="header-anchor" href="#_1-1-前端开发语言" aria-label="Permalink to &quot;1.1 前端开发语言&quot;">​</a></h4><p><img src="'+i+`" alt="前端开发语言"></p><h4 id="_1-2-前端开发工具" tabindex="-1">1.2 前端开发工具 <a class="header-anchor" href="#_1-2-前端开发工具" aria-label="Permalink to &quot;1.2 前端开发工具&quot;">​</a></h4><h5 id="_1-文件压缩和合并工具" tabindex="-1">1.文件压缩和合并工具 <a class="header-anchor" href="#_1-文件压缩和合并工具" aria-label="Permalink to &quot;1.文件压缩和合并工具&quot;">​</a></h5><ul><li>2001 年：Douglas Crockfold 发布了 JSMin 工具，用于去除 JS 代码中的注释和空格</li><li>2004 年：DaveShea 在他的文章中参考早期游戏开发中使用的 Sprite 图方案，提出了 CsS Sprite 的概念，即将多张小图合成为一张大图，然后通过 CSS 控制在不同元素中使用图片的局部区域，从而减少网络请求，提升网页性能</li><li>2006 年：Yahoo 发布了 YUI 库，其中包含了基于 Java 的代码压缩工具 YU Compressor</li><li>2009 年：Google 发布了 Closure Toolkit.其中包含的 Closure Compiler 提供了比 YUICompressor 更多的代码优化功能，并支持 Source Map 和多文件合并</li><li>2010 年：Mihai Bazon 发布了压缩工具 UglifyJS，并在 2012 年的升级版本 UglifyJS2 中增加了对 Source Map 的支持</li></ul><h6 id="文件压缩工具" tabindex="-1">文件压缩工具 <a class="header-anchor" href="#文件压缩工具" aria-label="Permalink to &quot;文件压缩工具&quot;">​</a></h6><p>从 JSMin、YUICompressor 到 ClosureCompiler 和 UglifyJS，压缩与优化的性能不断完善</p><h6 id="在合并工具方面" tabindex="-1">在合并工具方面 <a class="header-anchor" href="#在合并工具方面" aria-label="Permalink to &quot;在合并工具方面&quot;">​</a></h6><p>CSS Sprite 技术解决了网页中大量素材图片的加载性能问题。代码文件的合并，可以在命令行中通过输出到文件手动完成; 在 Closure Compiler 工具中包含了将多个文件合并为一个的参数</p><h5 id="_2-包管理工具" tabindex="-1">2.包管理工具 <a class="header-anchor" href="#_2-包管理工具" aria-label="Permalink to &quot;2.包管理工具&quot;">​</a></h5><ul><li>2009：Ryan Dahl 发布了第一个版本的 Node.js</li><li>2010：Node.is 核心开发人员 lsaacZSchlueter 编写了对应环境的包管理工具 npm</li><li>2012：Twitter 发布了名为 Bower 的前端依赖包管理工具</li><li>2016：Facebook 发布了 npmregistry 的兼容客户端 Yarn</li><li>pnpm</li></ul><p>许多原先基于其他语言开发的工具包如今可以通过 NodeJS 来实现，并通过 npm (Node Package Manager，即 node 包管理器)来安装使用</p><p>安装到本地的依赖包在前端项目中如何引用开始受到关注</p><h6 id="npm-工具的缺点" tabindex="-1">npm 工具的缺点 <a class="header-anchor" href="#npm-工具的缺点" aria-label="Permalink to &quot;npm 工具的缺点&quot;">​</a></h6><p>...</p><h6 id="yarn-工具的优缺点" tabindex="-1">yarn 工具的优缺点 <a class="header-anchor" href="#yarn-工具的优缺点" aria-label="Permalink to &quot;yarn 工具的优缺点&quot;">​</a></h6><p>...</p><h6 id="pnpm-工具的优缺点" tabindex="-1">pnpm 工具的优缺点 <a class="header-anchor" href="#pnpm-工具的优缺点" aria-label="Permalink to &quot;pnpm 工具的优缺点&quot;">​</a></h6><p>...</p><h5 id="_3-任务式构建工具" tabindex="-1">3.任务式构建工具 <a class="header-anchor" href="#_3-任务式构建工具" aria-label="Permalink to &quot;3.任务式构建工具&quot;">​</a></h5><ul><li>2012 年：Eric Schoffstall 发布了流式的构建工具 Gulp</li><li>2013 年：BenAlman 发布了基于任务的构建工具 Grunt</li></ul><h6 id="grunt-和-gulp-两种任务式的构建工具的基本组成" tabindex="-1">Grunt 和 Gulp 两种任务式的构建工具的基本组成 <a class="header-anchor" href="#grunt-和-gulp-两种任务式的构建工具的基本组成" aria-label="Permalink to &quot;Grunt 和 Gulp 两种任务式的构建工具的基本组成&quot;">​</a></h6><ul><li>配置文件(Gruntfile/Gulpfile)</li><li>核心的处理工具(grunt-cli/gulp-cli)</li><li>常用的任务插件(clean、Watch、Copy、Concat、Uglify、CssMin、Spritesmith.......)</li></ul><h6 id="grunt-vs-gulp" tabindex="-1">Grunt vs Gulp <a class="header-anchor" href="#grunt-vs-gulp" aria-label="Permalink to &quot;Grunt vs Gulp&quot;">​</a></h6><ul><li><strong>读写速度</strong>：在读写速度上 Gulp 要快于 Grunt</li><li><strong>社区使用规模</strong>：Gulp 周下载量为 1,200,000+，约是 Grunt 的两倍。Grunt 社区提供超过 6000 个不同功能的插件，Gulp 社区插件数量是 4000 多个</li><li><strong>配置文件的易用性</strong>：使用 pipe 函数描述任务处理过程的方式通常更配置文件易于阅读，但编写时需要对数据流有更深入的理解</li></ul><h5 id="_4-模块化-模块定义与模块化的构建工具" tabindex="-1">4.模块化:模块定义与模块化的构建工具 <a class="header-anchor" href="#_4-模块化-模块定义与模块化的构建工具" aria-label="Permalink to &quot;4.模块化:模块定义与模块化的构建工具&quot;">​</a></h5><ul><li>2009 年：Kevin Dangoor 发起了 ServerJS 项目，后更名为 CommonJS，其目标是指定浏览器外的 JSAPI 规范以及模块规范 Modules/1.0。这一规范也成为同年发布的 NodeJS 中的模块定义的参照规范</li><li>2011 年：RequireJS 1.0 版本发布作为客户端的模块加载器提供了异步加载模块的能力。作者在之后提交了 CommonJS 的 Module/Transfer/C 提案，这一提案最终发展为了独立的 AMD 规范</li><li>2013 年：面向浏览器端模块的打包工具 Browserify 发布</li><li>2014 年：跨平台的前后端兼容的模块化定义语法 UMD 发布</li><li>2014 年：Sebastian McKenzie 发布了将 ES6 语法转换为 ES5 语法的工具 6to5，并在之后更名为 Babel</li><li>2014 年：Guy Bedford 对外发布了 SystemJS 和 jspm 工具，用于简化模块加载和处理包管理</li><li>2014 年：打包工具 Webpack 发布了第一个稳定版本</li><li>2015 年：ES6(ES2015) 规范正式发布，第一次从语言规范上定义了 JS 中的模块化</li><li>2015 年：Rich Harris 发布的 Rollup 项目基于 ES6 模块化，提供了 Treeshaking 的功能</li></ul><p>模块化的不同规范--CommonJS</p><ul><li><strong>服务标识</strong>：一个模块即是一个 JS 文件，代码中自带 module 指向当前模块对象自带 exports=module.exports，且 exports 只能是对象，用于添加导出的属性和方法自带 require 方法用于引用其他模块</li><li><strong>模块引用</strong>：通过引用 require()函数来实现模块的引用，参数可以是相对路径也可以是绝对路径在绝对路径的情况下，会按照 node modules 规则递归查找</li><li><strong>模块加载</strong>：require()的执行过程是同步的，执行时即进入到被依赖模块的执行上下文中，执行完毕后再执行依赖模块的后续代码</li></ul><p>模块化的不同规范--AMD</p><p>CommonJS 的 Modules/1.0 规范只能用于服务端，不能用于浏览器端</p><ul><li><strong>模块定义</strong>：通过 define(id?,dependencies?,factory)函数定义模块，id 为模块标识，dependencies 为依赖的模块，factory 为工厂函数</li><li><strong>模块引用</strong>：最早需要通过 require([id],callback)方式引用，也支持类似 CommonJS 的 var a=require(&#39;a)的写法</li></ul><p>模块化的不同规范--UMD</p><ul><li>UMD 本质上是兼容 CommonJS 与 AMD 这两种规范的代码语法糖通过判断执行上下文中是否包含 define 或 module 来包装模块代码适用于需要跨前后端的模块</li></ul><p>模块化的不同规范--ES Module</p><p>模块定义：</p><ul><li>通过 export 关键字导出任意个数的变量</li><li>通过 export default 导出，一个模块中只能包含一个 default 的导出类型</li></ul><p>模块引用：</p><p>通过 import 关键字引用其他模块</p><ul><li>静态引用格式为 importimportClause from ModuleSpecifierimport 表达式需要写在文件最外层上下文中</li><li>动态引用的方式是 import()，返回 promise 对象</li></ul><h5 id="_5-模块化的构建工具" tabindex="-1">5.模块化的构建工具 <a class="header-anchor" href="#_5-模块化的构建工具" aria-label="Permalink to &quot;5.模块化的构建工具&quot;">​</a></h5><ul><li><strong>Browserify</strong>：目标是让 CommonJS 风格的代码也运行在浏览器端</li><li><strong>RequireJS</strong>：核心功能是支持 AMD 风格的模块化代码运行</li><li><strong>Rollup</strong>：实现了 Tree Shaking 功能，以及天然支持 ES6 模块的打包</li><li><strong>Babel</strong>：定位是 Transformer，即语法转换器，它承担着将 ES6、JSX 等语法转换为 ES5 语法的核心功能</li><li><strong>SystemJS</strong>：兼容各种模块化规范的运行时工具</li><li><strong>Webpack</strong>：兼容各种模块化规范的标识方法；将模块化的概念延伸到其他类型的文件中</li></ul><h4 id="_1-3-总结" tabindex="-1">1.3 总结 <a class="header-anchor" href="#_1-3-总结" aria-label="Permalink to &quot;1.3 总结&quot;">​</a></h4><p>前端构建工具的演进</p><ul><li>01：单独功能的压缩与合并工具</li><li>02：NodeJS 与包管理工具</li><li>03：任务式构建工具的发展</li><li>04：模块化概念与工具</li></ul><h3 id="_2-流程分解-webpack-的完整构建流程" tabindex="-1">2.流程分解:Webpack 的完整构建流程 <a class="header-anchor" href="#_2-流程分解-webpack-的完整构建流程" aria-label="Permalink to &quot;2.流程分解:Webpack 的完整构建流程&quot;">​</a></h3><h4 id="_01-通过-webpack-的源码来了解具体函数执行的逻辑" tabindex="-1">01：通过 Webpack 的源码来了解具体函数执行的逻辑 <a class="header-anchor" href="#_01-通过-webpack-的源码来了解具体函数执行的逻辑" aria-label="Permalink to &quot;01：通过 Webpack 的源码来了解具体函数执行的逻辑&quot;">​</a></h4><h5 id="_2-1-webpack-的基本工作流程" tabindex="-1">2.1 Webpack 的基本工作流程 <a class="header-anchor" href="#_2-1-webpack-的基本工作流程" aria-label="Permalink to &quot;2.1 Webpack 的基本工作流程&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 第一种: 基于命令行的方式</span></span>
<span class="line"><span style="color:#E06C75;">webpack</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;">config</span><span style="color:#E5C07B;"> webpack</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第二种:基于代码的方式</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> webpack</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;webpack&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> config</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./webpack.config&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">webpack</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">stats</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>1.创建编译器 Compiler 实例</li><li>2.根据 Webpack 参数加载参数中的插件以及程序内置插件</li><li>3.执行编译流程:创建编译过程 Compilation 实例，从入口递归添加与构建模块，模块构建完成后冻结模块，并进行优化</li><li>4.构建与优化过程结束后提交产物，将产物内容写到输出文件中</li></ul><h5 id="_2-1-1-webpack-js-中的基本流程" tabindex="-1">2.1.1.webpack.js 中的基本流程 <a class="header-anchor" href="#_2-1-1-webpack-js-中的基本流程" aria-label="Permalink to &quot;2.1.1.webpack.js 中的基本流程&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> webpack</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    options</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ... </span><span style="color:#7F848E;font-style:italic;">// 处理options默认值</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> compiler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Compiler</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 处理参数中的插件等</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 分析参数，加载各内部插件</span></span>
<span class="line"><span style="color:#E5C07B;">    compiler</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">options</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WebpackOptionsApply</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">compiler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#E5C07B;">        compiler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> compiler</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="_2-1-2-compiler-js-中的基本流程" tabindex="-1">2.1.2.Compiler.js 中的基本流程 <a class="header-anchor" href="#_2-1-2-compiler-js-中的基本流程" aria-label="Permalink to &quot;2.1.2.Compiler.js 中的基本流程&quot;">​</a></h5><h6 id="readrecords" tabindex="-1">readRecords <a class="header-anchor" href="#readrecords" aria-label="Permalink to &quot;readRecords&quot;">​</a></h6><ul><li>读取构建记录，用于分包缓存优化，在未设置 recordsPath 时直接返回</li></ul><h6 id="complie-的主要构建过程" tabindex="-1">complie 的主要构建过程 <a class="header-anchor" href="#complie-的主要构建过程" aria-label="Permalink to &quot;complie 的主要构建过程&quot;">​</a></h6><ul><li>newCompilationParams <ul><li>创建 NormalModule 和 ContextModule 的工厂实例，用于创建后续模块实例</li></ul></li><li>newCompilation <ul><li>创建编译过程 Compilation 实例，传入上一步的两个工厂实例作为参数</li></ul></li><li>compiler.hooks.make.callAsync <ul><li>触发 make 的 Hook，执行所有监听 make 的插件</li></ul></li><li>compilation.seal <ul><li>编译过程的 seal 方法</li></ul></li><li>compilation.finish <ul><li>编译过程实例的 finish 方法，触发相应的 Hook 并报告构建模块的错误和警告</li></ul></li></ul><p>emitAssets</p><ul><li>调用 compilation.getAssets()，将产物内容写入输出文件中</li></ul><p>emitRecords</p><ul><li>对应第一步的 readRecords，用于写入构建记录，在未设置 recordsPath 时直接返回</li></ul><p>addEntry</p><ul><li>从 entry 开始递归添加和构建模块</li></ul><p>seal</p><ul><li>冻结模块，进行一系列优化以及触发各优化阶段的 Hooks</li></ul><h4 id="_02-通过-webpack-对外暴露的声明周期-hooks-理解整体流程的阶段划分" tabindex="-1">02：通过 Webpack 对外暴露的声明周期 Hooks，理解整体流程的阶段划分 <a class="header-anchor" href="#_02-通过-webpack-对外暴露的声明周期-hooks-理解整体流程的阶段划分" aria-label="Permalink to &quot;02：通过 Webpack 对外暴露的声明周期 Hooks，理解整体流程的阶段划分&quot;">​</a></h4><h5 id="读懂-webpack-的生命周期" tabindex="-1">读懂 Webpack 的生命周期 <a class="header-anchor" href="#读懂-webpack-的生命周期" aria-label="Permalink to &quot;读懂 Webpack 的生命周期&quot;">​</a></h5><p>Compiler 和 Compilation 都扩展自 Tapable 类用于实现工作流程中的生命周期划分，其中所暴露出来的生命周期节点称为 Hook (俗称子)</p><h5 id="webpack-中的插件" tabindex="-1">Webpack 中的插件 <a class="header-anchor" href="#webpack-中的插件" aria-label="Permalink to &quot;Webpack 中的插件&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> HelloWorldPlugin</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">compiler</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		compiler</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hooks</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">run</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tap</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;HelloWorldPlugin&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">compilation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello world&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> HelloWorldPlugin</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="hook-的使用方式" tabindex="-1">Hook 的使用方式 <a class="header-anchor" href="#hook-的使用方式" aria-label="Permalink to &quot;Hook 的使用方式&quot;">​</a></h5><p>lib/Compiler.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hooks</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#E06C75;">    make</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> SyncHook</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;compilation&#39;&#39;params&#39;</span><span style="color:#ABB2BF;">]), </span><span style="color:#7F848E;font-style:italic;">// 1.定义Hook..</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hooks</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">compilation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">compilation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 4.调用Hook</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>lib/dependencies/CommonJsPlugin.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 2.在插件中注册Hook</span></span>
<span class="line"><span style="color:#E5C07B;">compiler</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hooks</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">compilation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tap</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;CommonJSPlugin&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">compilation</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;font-style:italic;">contextModuleFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;font-style:italic;">normalModuleFactory</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>lib/WebpackOptionsApply.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 3.生成插件实例，运行apply方法</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> CommonJsPlugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">module</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">compiler</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="compiler-hooks" tabindex="-1">Compiler Hooks <a class="header-anchor" href="#compiler-hooks" aria-label="Permalink to &quot;Compiler Hooks&quot;">​</a></h5><p>构建器实例的生命周期</p><ul><li>初始化阶段 <ul><li><strong>environment、afterEnvironment</strong> 在创建完 compiler 实例且执行了配置内定义的插件的 apply 方法后触发</li><li><strong>entryOption、afterPlugins、afterResolvers</strong> 在 WebpackOptionsApply.js 中，这 3 个 Hooks 分别在执行 EntryOptions 插件和其他 Webpack 内置插件，以及解析了 resolver 配置后触发</li></ul></li><li>构建过程阶段 <ul><li><strong>normalModuleFactory、 contextModuleFactory</strong> 在两类模块工厂创建后触发</li><li><strong>beforeRun、run、watchRun、</strong><strong>beforeCompile、compile、thisCompilation.compilation、make、afterCompile</strong> 在运行构建过程中触发</li></ul></li><li>产物生成阶段 <ul><li><strong>shouldEmit、emit、assetEmitted、afterEmit</strong> 在两类模块工厂创建后触发</li><li><strong>failed、done</strong> 在达到最终结果状态时触发</li></ul></li></ul><h5 id="compilation-hooks-一构建阶段" tabindex="-1">Compilation Hooks 一构建阶段 <a class="header-anchor" href="#compilation-hooks-一构建阶段" aria-label="Permalink to &quot;Compilation Hooks 一构建阶段&quot;">​</a></h5><p>01：addEntry、failedEntry、succeedEntry</p><p>在添加入口和添加入口结束时触发 (Webpack 5 中移除)</p><p>02：buildModule、rebuildModule、finishRebuildingModule、failedModule、succeedModule</p><p>在构建单个模块时触发</p><p>03：finishModules</p><p>在所有模块构建完成后触发</p><h5 id="compilation-hooks-一一优化阶段" tabindex="-1">Compilation Hooks 一一优化阶段 <a class="header-anchor" href="#compilation-hooks-一一优化阶段" aria-label="Permalink to &quot;Compilation Hooks 一一优化阶段&quot;">​</a></h5><ul><li>1.优化依赖项</li><li>2.生成 Chunk</li><li>3.优化 Module</li><li>4.优化 chunk</li><li>5.优化 Tree</li><li>6.优化 ChunkModules</li><li>7.生成 Module lds</li><li>8.生成 Chunklds</li><li>9.生成 Hash</li><li>10.生成 ModuleAssets</li><li>11.生成 ChunkAssets</li><li>12.优化 Assets</li></ul><p><strong>seal、needAdditionalSeal、 unseal、afterSeal</strong>：分别在 seal 函数的起始和结束的位置触发</p><p><strong>optimizeDependencies、afterOptimizeDependencies</strong>：触发优化依赖的插件执行，例如 FlagDependencyUsagePlugin</p><p><strong>beforeChunks、afterChunks</strong>：分别在生成 Chunks 的过程的前后触发</p><p><strong>Optimize</strong>：在生成 chunks 之后，开始执行优化处理的阶段触发</p><p><strong>optimizeModule、afterOptimizeModule</strong>：在优化模块过程的前后触发</p><p><strong>optimizeChunks、afterOptimizeChunks</strong>：在优化 Chunk 过程的前后触发，用于 Tree Shaking</p><p><strong>optimizeTree、afterOptimizeTree</strong>：在优化模块和 chunk 过程的前后触发</p><p><strong>optimizeChunkModules、afterOptimizeChunkModules</strong>：在优化 chunkModules 的过程前后触发</p><p><strong>shouldRecord、recordModules、recordChunks、recordHash</strong>：在 shouldRecord 返回为 true 的情况下，依次触发 recordModules、recordChunks、recordHash</p><p><strong>reviveModules、beforeModulelds、modulelds、optimizeModulelds、afterOptimizeModuleld</strong>：在生成模块 ld 过程的前后触发</p><p><strong>reviveChunks、beforeChunklds、optimizeChunklds、afterOptimizeChunklds</strong>：在生成 Chunkid 过程的前后触发 <strong>beforeHash、afterHash</strong>：在生成模块与 Chunk 的 hash 过程的前后触发</p><p><strong>beforeModuleAssets、moduleAsset</strong>：在生成模块产物数据过程的前后触发 <strong>shouldGenerateChunkAssets、beforeChunkAssets、chunkAsset</strong>：在创建 Chunk 产物数据过程的前后触发</p><p><strong>additionalAssets、optimizeChunkAssets、afterOptimizeChunkAssets、optimizeAssets、afterOptimizeAssets</strong>：在优化产物过程的前后触发</p><h5 id="代码实践-编写一个简单的统计插件" tabindex="-1">代码实践：编写一个简单的统计插件 <a class="header-anchor" href="#代码实践-编写一个简单的统计插件" aria-label="Permalink to &quot;代码实践：编写一个简单的统计插件&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> SamplePlugin</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">compiler</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> statsHooks</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;environment&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;entryOption&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;afterPlugins&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;compile&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> statsAsyncHooks</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [ </span><span style="color:#98C379;">&#39;beforeRun&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;beforeCompile&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;make&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;afterCompile&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;emit&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;done&#39;</span><span style="color:#ABB2BF;"> ];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    statsHooks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">hookName</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        compiler</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hooks</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">hookNamel</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">tap</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Sample Plugin&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Compiler Hook </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">hookName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">, Time: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> start</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">ms\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> SamplePlugin</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>执行插件：webpack --config webpack.config.js</p><p>Webpack 社区中有一些较成熟的统计插件，例如 speed-measure-webpack-plugin 等</p><h5 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h5><ul><li>1.通过对三个源码文件的分析，让你对执行构建命令后的内部流程有一个基本概念</li><li>2.讨论了 Compiler 和 Compilation 工作流程中的生命周期 Hooks，以及插件的基本工作方式</li><li>3.编写了一个简单的统计插件</li></ul><h3 id="_3-编译提效-如何为-webpack-编译阶段提速" tabindex="-1">3.编译提效:如何为 Webpack 编译阶段提速? <a class="header-anchor" href="#_3-编译提效-如何为-webpack-编译阶段提速" aria-label="Permalink to &quot;3.编译提效:如何为 Webpack 编译阶段提速?&quot;">​</a></h3><p>在 Compiler 和 Compilation 的各生命周期阶段里通常耗时最长的分别是哪个阶段呢？</p><ul><li>对于 Compiler 实例耗时最长的是生成编译过程实例后的 make 阶段</li><li>对于 Compilation 实例编译模块和后续优化阶段的生成产物并压缩代码的过程都比较耗时</li></ul><h4 id="编译模块阶段提速" tabindex="-1">编译模块阶段提速 <a class="header-anchor" href="#编译模块阶段提速" aria-label="Permalink to &quot;编译模块阶段提速&quot;">​</a></h4><h5 id="优化前的准本工作" tabindex="-1">优化前的准本工作 <a class="header-anchor" href="#优化前的准本工作" aria-label="Permalink to &quot;优化前的准本工作&quot;">​</a></h5><ul><li>准备基于产物内容的分析工具：例如 speed-measure-webpack-plugin</li><li>准备基于时间的分析工具：使用 webpack-bundle-analyzer 分析产物内容</li></ul><p>提升这一阶段的构建效率，大致分为三个方向</p><ul><li>减少执行编译的模块</li><li>提升单个模块构建的速度</li><li>并行构建以提升总体效率</li></ul><h4 id="_1-减少执行构建的模块" tabindex="-1">1.减少执行构建的模块 <a class="header-anchor" href="#_1-减少执行构建的模块" aria-label="Permalink to &quot;1.减少执行构建的模块&quot;">​</a></h4><p>提升编译模块阶段效率的第一个方向。减少执行编译的模块</p><h5 id="_1-lgnoreplugin" tabindex="-1">1.lgnorePlugin <a class="header-anchor" href="#_1-lgnoreplugin" aria-label="Permalink to &quot;1.lgnorePlugin&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> webpack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">IgnorePlugin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    resourceRegExp</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#56B6C2;">\\.\\/</span><span style="color:#E06C75;">locale</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    contextRegExp</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /moment</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}),</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="_2-按需引入类库模块" tabindex="-1">2.按需引入类库模块 <a class="header-anchor" href="#_2-按需引入类库模块" aria-label="Permalink to &quot;2.按需引入类库模块&quot;">​</a></h5><ul><li>Tree Shaking 需要相应导入的依赖包使用 ES6 模块化，而 lodash 还是基于 CommonJS 需要替换为 lodash-es 才能生效</li><li>相应的操作是在优化阶段进行的，Tree Shaking 并不能减少模块编译阶段的构建时间</li></ul><h5 id="_3-dllplugin" tabindex="-1">3.DllPlugin <a class="header-anchor" href="#_3-dllplugin" aria-label="Permalink to &quot;3.DllPlugin&quot;">​</a></h5><p>略</p><h5 id="_4-externals" tabindex="-1">4.Externals <a class="header-anchor" href="#_4-externals" aria-label="Permalink to &quot;4.Externals&quot;">​</a></h5><ul><li>1.Webpack 的配置方面，externals 更简单，DllPlugin 需要独立的配置文件</li><li>2.DllPlugin 包含了依赖包的独立构建流程，externals 配置中通常使用已传入 CDN 的依赖包</li><li>3.externals 配置的依赖包需要单独指定依赖模块的加载方式:全局对象、CommonJS、AMD 等</li><li>4.在引用依赖包的子模块时，DllPlugin 无须更改，而 externals 则会将子模块打入项目包中</li></ul><h4 id="_2-提升单个模块构建的速度" tabindex="-1">2.提升单个模块构建的速度 <a class="header-anchor" href="#_2-提升单个模块构建的速度" aria-label="Permalink to &quot;2.提升单个模块构建的速度&quot;">​</a></h4><p>提升编译阶段效率的第二个方向在保持构建模块数量不变的情况下，提升单个模块构建的速度</p><h5 id="_1-include-exclude" tabindex="-1">1.include/exclude <a class="header-anchor" href="#_1-include-exclude" aria-label="Permalink to &quot;1.include/exclude&quot;">​</a></h5><h5 id="_2-noparse" tabindex="-1">2.noParse <a class="header-anchor" href="#_2-noparse" aria-label="Permalink to &quot;2.noParse&quot;">​</a></h5><h5 id="_3-source-map" tabindex="-1">3.Source Map <a class="header-anchor" href="#_3-source-map" aria-label="Permalink to &quot;3.Source Map&quot;">​</a></h5><ul><li>对于生产环境的代码构建而言，会根据项目实际情况判断是否开启 Source Map 在</li><li>开启 Source Map 的情况下，优先选择与源文件分离的类型</li><li>有条件也可以配合错误监控系统，将 Source Map 的构建和使用在线下监控后台中进行</li></ul><h5 id="_4-typescript-编译优化" tabindex="-1">4.TypeScript 编译优化 <a class="header-anchor" href="#_4-typescript-编译优化" aria-label="Permalink to &quot;4.TypeScript 编译优化&quot;">​</a></h5><ul><li>由于 ts-loader 默认在编译前进行类型检查，因此编译时间往往比较慢</li><li>通过加上配置项 transpileOnly: true，可以在编译时忽略类型检查</li><li>babel-loader 需要单独安装 @babel/preset-typescript 来支持编译 TS</li></ul><h5 id="_5-resolve" tabindex="-1">5.Resolve <a class="header-anchor" href="#_5-resolve" aria-label="Permalink to &quot;5.Resolve&quot;">​</a></h5><ul><li>resolve.modules：指定查找模块的目录范围</li><li>resolve.extensions：指定查找模块的文件类型范围</li><li>resolve.mainFields：指定查找模块的 package.json 中主文件的属性名</li><li>resolve.symlinks：指定在查找模块时是否处理软连接</li></ul><h4 id="_3-并行构建以提升总体效率" tabindex="-1">3.并行构建以提升总体效率 <a class="header-anchor" href="#_3-并行构建以提升总体效率" aria-label="Permalink to &quot;3.并行构建以提升总体效率&quot;">​</a></h4><p>第三个编译阶段提效的方向使用并行的方式来提升构建的效率</p><h5 id="happypack-与-thread-loader" tabindex="-1">HappyPack 与 thread-loader <a class="header-anchor" href="#happypack-与-thread-loader" aria-label="Permalink to &quot;HappyPack 与 thread-loader&quot;">​</a></h5><h5 id="parallel-webpack" tabindex="-1">parallel-webpack <a class="header-anchor" href="#parallel-webpack" aria-label="Permalink to &quot;parallel-webpack&quot;">​</a></h5><h4 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li>以减少执行构建的模块数量为目的的方向</li><li>以提升单个模块构建速度为目的的方向</li><li>通过并行构建以提升整体构建效率的方向</li></ul><h3 id="_4-打包提效-如何为-webpack-打包阶段提速" tabindex="-1">4.打包提效:如何为 Webpack 打包阶段提速? <a class="header-anchor" href="#_4-打包提效-如何为-webpack-打包阶段提速" aria-label="Permalink to &quot;4.打包提效:如何为 Webpack 打包阶段提速?&quot;">​</a></h3><h4 id="准备分析工具" tabindex="-1">准备分析工具 <a class="header-anchor" href="#准备分析工具" aria-label="Permalink to &quot;准备分析工具&quot;">​</a></h4><p>WebpackTimingPlugin.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> lifeHooks</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;optimizeDependencies&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		start</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;optimizeDependencies&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		end</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;afterOptimizeDependencies&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	{ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;createChunks&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;beforeChunks&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">end</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;afterChunks&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> startTime</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">compilation</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hooks</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">tap</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">PluginName</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	startTime</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">compilation</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hooks</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">end</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">tap</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">PluginName</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> cost</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> startTime</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`[Step </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">] costs: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">chalk</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">red</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">cost</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">ms\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="优化阶段效率提升的整体分析" tabindex="-1">优化阶段效率提升的整体分析 <a class="header-anchor" href="#优化阶段效率提升的整体分析" aria-label="Permalink to &quot;优化阶段效率提升的整体分析&quot;">​</a></h4><ul><li>1.优化依赖项</li><li>2.生成 Chunk</li><li>3.优化 Module</li><li>4.优化 chunk</li><li>5.优化 Tree</li><li>6.优化 ChunkModules</li><li>7.生成 Module lds</li><li>8.生成 Chunklds</li><li>9.生成 Hash</li><li>10.生成 ModuleAssets</li><li>11.生成 ChunkAssets</li><li>12.优化 Assets</li></ul><h4 id="以提升当前任务工作效率为目标的方案" tabindex="-1">以提升当前任务工作效率为目标的方案 <a class="header-anchor" href="#以提升当前任务工作效率为目标的方案" aria-label="Permalink to &quot;以提升当前任务工作效率为目标的方案&quot;">​</a></h4><p>针对某些任务，使用效率更高的工具或配置项，从而提升当前任务的工作效率</p><ul><li>生成 ChunkAssets：即根据 chunk 信息生成 chunk 的产物代码</li><li>优化 Assets：即压缩 chunk 产物代码</li></ul><p>第一个任务主要在 Webpack 引擎内部的模块中处理</p><h5 id="面向-js-的压缩工具" tabindex="-1">面向 JS 的压缩工具 <a class="header-anchor" href="#面向-js-的压缩工具" aria-label="Permalink to &quot;面向 JS 的压缩工具&quot;">​</a></h5><p>Webpack 4 中内置了 TerserWebpackPlugin 作为默认的 JS 压缩工具</p><p>之前的版本则需要在项目配置中单独引入，早期主要使用的是 UglifyJSWebpackPlugin</p><table tabindex="0"><thead><tr><th>源文件</th><th>使用 Terser 的整体构建时间</th><th>使用 UglifyJS 的整体构建时间</th></tr></thead><tbody><tr><td>example-lodash.js</td><td>2427ms</td><td>3060ms</td></tr><tr><td>example-moment.js</td><td>4730ms</td><td>5010ms</td></tr><tr><td>example-antd.js</td><td>16518ms</td><td>19286ms</td></tr></tbody></table><h5 id="terser-和-uglifyjs-插件中的效率优化" tabindex="-1">Terser 和 UglifyJS 插件中的效率优化 <a class="header-anchor" href="#terser-和-uglifyjs-插件中的效率优化" aria-label="Permalink to &quot;Terser 和 UglifyJS 插件中的效率优化&quot;">​</a></h5><p>Terser 原本是 Fork 自 uglify-es 的项目，其绝大部分的 API 和参数都与 uglify-es 和 uglify-js@3 兼容</p><ul><li>Cache 选项：默认开启，使用缓存能够极大程度上提升再次构建时的工作效率</li><li>Parallel 选项：默认开启，并发选项在大多数情况下能够提升该插件的工作效率，但具体提升的程度则因项目而异</li><li>terserOptions 选项：即 Terser 工具中的 minify 选项集合。这些选项是对具体压缩处理过程产生影响的配置项</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 源代码./src/example-terser-opts.js</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> HelloWorld</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> foo</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;1234&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">HelloWorld</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 默认配置项compress = {},mangle=true的压缩后代码</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">t</span><span style="color:#ABB2BF;">){</span><span style="color:#56B6C2;">!</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> e</span><span style="color:#ABB2BF;">(){</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;1234&quot;</span><span style="color:#ABB2BF;">)}()};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// compress=false的压缩后代码</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">r</span><span style="color:#ABB2BF;">){ </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> t</span><span style="color:#ABB2BF;">(){ </span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;1234&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">)}</span><span style="color:#61AFEF;">t</span><span style="color:#ABB2BF;">()};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// mangle=false的压缩代码</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">exports</span><span style="color:#ABB2BF;">) { </span><span style="color:#56B6C2;">!</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> HelloWorld</span><span style="color:#ABB2BF;">(){</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;1234&quot;</span><span style="color:#ABB2BF;">)}()};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// compress=false，mangle=false的压缩后代码</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">exports</span><span style="color:#ABB2BF;">){ </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> HelloWorld</span><span style="color:#ABB2BF;">() { </span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> foo</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;1234&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">HelloWorld</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">)} </span><span style="color:#61AFEF;">HelloWorld</span><span style="color:#ABB2BF;">()};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><table tabindex="0"><thead><tr><th>compress 参数</th><th>mangle 参数</th><th>产物代码大小(MB)</th><th>压缩阶段耗时 ms</th></tr></thead><tbody><tr><td>{} (默认)</td><td>true (默认)</td><td>1.45</td><td>4008</td></tr><tr><td>false</td><td>true</td><td>1.5</td><td>1794</td></tr><tr><td>{}</td><td>false</td><td>1.68</td><td>3258</td></tr></tbody></table><h5 id="面向-css-的压缩工具" tabindex="-1">面向 CSS 的压缩工具 <a class="header-anchor" href="#面向-css-的压缩工具" aria-label="Permalink to &quot;面向 CSS 的压缩工具&quot;">​</a></h5><ul><li>OptimizeCSSAssetsPlugin (在 Create-React-App 中使用)</li><li>OptimizeCSSNanoPlugin (在 VUE-CLI 中使用)</li><li>CSSMinimizerWebpackPlugin (2020 年 Webpack 社区新发布的 CSS 压缩插件)</li></ul><table tabindex="0"><thead><tr><th>插件名称</th><th>构建时间 (ms)</th><th>带 sourceMap 的构建时间(ms)</th></tr></thead><tbody><tr><td>OptmizeCSSAssetsPlugin</td><td>1820</td><td>1936</td></tr><tr><td>OptimizeCSSNanoPlugin</td><td>1813</td><td>2059</td></tr><tr><td>CSSMinimizerWebpackPlugin</td><td>1938(*1645)</td><td>2540 (-)</td></tr></tbody></table><hr><h4 id="以提升后续环节工作效率为目标的方案" tabindex="-1">以提升后续环节工作效率为目标的方案 <a class="header-anchor" href="#以提升后续环节工作效率为目标的方案" aria-label="Permalink to &quot;以提升后续环节工作效率为目标的方案&quot;">​</a></h4><p>提升特定任务的优化效果，以减少传递给下一任务的数据量，从而提升后续环节的工作效率</p><h5 id="split-chunks-分包" tabindex="-1">Split Chunks (分包) <a class="header-anchor" href="#split-chunks-分包" aria-label="Permalink to &quot;Split Chunks (分包)&quot;">​</a></h5><p><strong>Split chunks (分包)</strong> 是指在 chunk 生成之后将原先以入口点来划分的 chunks 根据一定的规则分离出子 chunk 的过程</p><p>./src/example-split1.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">slice</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;lodash&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;slice&#39;</span><span style="color:#61AFEF;"> slice</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>./src/example-split2.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">join</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;lodash&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;join&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">], [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>./webpack.split.config.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#E06C75;">optimization</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">	splitChunks</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		chunks</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;all&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>对于示例中多入口静态引用相同依赖包的情况，设置为 chunks: &#39;all&#39;</p><p>SplitChunksPlugin 的工作阶段是在 optimizeChunks 阶段</p><p>压缩代码是在 optimizeChunkAssets 阶段，从而起到提升后续环节工作效率的作用</p><table tabindex="0"><thead><tr><th>执行语句</th><th>压缩代码阶段时长</th><th>产物大小</th></tr></thead><tbody><tr><td>import_from &#39;lodash&#39; // 不调用</td><td>1013ms</td><td>72.2KB</td></tr><tr><td>import_from &#39;lodash-es&#39; / / 不调用</td><td>40ms</td><td>951 bytes</td></tr><tr><td>import<em>from &#39;lodash&#39;<br>console.log(</em>.slice)</td><td>1012ms</td><td>72.2KB</td></tr><tr><td>import<em>from &#39;lodash-es&#39;<br>console.log(</em>.slice)</td><td>1036ms</td><td>85.5KB</td></tr><tr><td>import * as_from &#39;lodash-es&#39;<br>console.log(.slice)</td><td>99ms</td><td>3.32KB</td></tr><tr><td>import {slice} from &#39;lodash&#39;<br>console.log(slice)</td><td>1036ms</td><td>72.2KB</td></tr><tr><td>import {slice} from &#39;lodash-es&#39;<br>console.log(slice)</td><td>97ms</td><td>3.32KB</td></tr><tr><td>// use babel &amp; rule.sideEffects: true<br>import_from &#39;lodash&#39; // 不调用</td><td>1039ms</td><td>85.5KB</td></tr><tr><td>// optimizations.sideEffects: false<br>import_from &#39;lodash&#39; // 不调用</td><td>1029ms</td><td>85.5KB</td></tr><tr><td>// use babel &amp; babel-preset-env<br>import_from &#39;lodash-es&#39; // 不调用</td><td>2008ms<br>(构建总时长 6478ms)</td><td>275KB</td></tr><tr><td>// use babel &amp; @babel/preset-env<br>import_from &#39;lodash-es&#39; // 不调用</td><td>39ms<br>(构建总时长 3223ms)</td><td>951 bytes</td></tr></tbody></table><h5 id="tree-shaking-摇树" tabindex="-1">Tree Shaking(摇树) <a class="header-anchor" href="#tree-shaking-摇树" aria-label="Permalink to &quot;Tree Shaking(摇树)&quot;">​</a></h5><h6 id="_1-es6-模块" tabindex="-1">1.ES6 模块 <a class="header-anchor" href="#_1-es6-模块" aria-label="Permalink to &quot;1.ES6 模块&quot;">​</a></h6><p>只有 ES6 类型的模块才能进行 Tree Shaking</p><p>CommonJS 类型的模块 lodash，需要依赖第三方提供的插件才能实现动态删除无效代码</p><p>ES6 风格的模块 lodash-es，则可以进行 Tree Shaking 优化</p><h6 id="_2-引入方式" tabindex="-1">2.引入方式 <a class="header-anchor" href="#_2-引入方式" aria-label="Permalink to &quot;2.引入方式&quot;">​</a></h6><p>以 default 方式引入的模块，无法被 Tree Shaking</p><p>引入单个导出对象的方式，使用 import * as xxx 的语法，还是 import{xxx}的语法</p><p>都可以进行 Tree Shaking</p><h6 id="_3-sideeffects" tabindex="-1">3.sideEffects <a class="header-anchor" href="#_3-sideeffects" aria-label="Permalink to &quot;3.sideEffects&quot;">​</a></h6><p>在 Webpack 4 中，会根据依赖模块 package.json 中的 sideEffects 属性，来确认对应的依赖包代码是否会产生副作用</p><p><strong>rule.sideEffects (默认为 false)</strong> ：指代在要处理的模块中是否有副作用</p><p><strong>optimization.sideEffects (默认为 true)</strong> ：指代在优化过程中是否遵循依赖模块的副作用描述</p><h6 id="_4-babel" tabindex="-1">4.Babel <a class="header-anchor" href="#_4-babel" aria-label="Permalink to &quot;4.Babel&quot;">​</a></h6><p>在 Babel7 之前的 babel-preset-env 中，modules 的默认选项为&#39;commonjs‘</p><p>在 Babel7 之后的 @babel/preset-env 中，modules 选项默认为 auto</p><h4 id="总结-3" tabindex="-1">总结 <a class="header-anchor" href="#总结-3" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>这节主要讨论了代码优化阶段效率提升的方向和方法</p><p><strong>以提升当前任务工作效率为目标的方案</strong></p><p>讨论了压缩 JS 时选择合适的压缩工具与配置优化项，以及压缩 CSS 时对优化工具的选择</p><p><strong>以提升后续环节工作效率为目标的方案</strong></p><p>讨论了 splitChunks 的作用和配置项，以及应用 Tree Shaking 的一些注意事项</p><h4 id="要让引入的模块支持-tree-shaking-需要注意" tabindex="-1">要让引入的模块支持 Tree Shaking，需要注意 <a class="header-anchor" href="#要让引入的模块支持-tree-shaking-需要注意" aria-label="Permalink to &quot;要让引入的模块支持 Tree Shaking，需要注意&quot;">​</a></h4><ul><li>01：引入的模块需要是 ES6 类型的 CommonJS 类型的则不支持</li><li>02：引入方式不能使用 default</li><li>03：引用第三方依赖包的情况下，对应的 package.json 需要设置。sideEffects:false 来表明无副作用</li><li>04：使用 Babel 的情况下，需要注意不同版本 Babel 对于模块化的预设不同</li></ul><h3 id="_5-缓存优化-那些基于缓存的优化方案" tabindex="-1">5.缓存优化:那些基于缓存的优化方案 <a class="header-anchor" href="#_5-缓存优化-那些基于缓存的优化方案" aria-label="Permalink to &quot;5.缓存优化:那些基于缓存的优化方案&quot;">​</a></h3><h4 id="缓存优化的基本原理" tabindex="-1">缓存优化的基本原理 <a class="header-anchor" href="#缓存优化的基本原理" aria-label="Permalink to &quot;缓存优化的基本原理&quot;">​</a></h4><p>terser-webpack-plugin/src/index.js:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEnabled</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> taskResult</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		taskResult</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> cacheget</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 读取缓存</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">ignoreError</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> enqueue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//缓存未命中情况下执行任务</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	task</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">taskResult</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 缓存命中情况下返回缓存结果</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#61AFEF;"> enqueue</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">task</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> taskResult</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEnabled</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">taskResult</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			await</span><span style="color:#E5C07B;"> cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">store</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">taskResult</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 写入缓存</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="编译阶段的缓存优化一-babel-loader" tabindex="-1">编译阶段的缓存优化一-Babel-loader <a class="header-anchor" href="#编译阶段的缓存优化一-babel-loader" aria-label="Permalink to &quot;编译阶段的缓存优化一-Babel-loader&quot;">​</a></h4><ul><li><strong>cacheDirectory</strong>：默认为 false，即不开启缓存。当值为 true 时开启缓存并使用默认缓存目录，也可以指定其他路径值作为缓存目录</li><li><strong>cacheldentifier</strong>：默认使用 Babel 相关依赖包的版本、babelrc 配置文件的内容，以及环境变量等与模块内容一起参与计算缓存标识符</li><li><strong>cacheCompression</strong>：默认为 true，将缓存内容压缩为 gz 包以减小缓存目录的体积。在设为 false 的情况下将跳过压缩和解压的过程</li></ul><h4 id="编译阶段的缓存优化-cache-loader" tabindex="-1">编译阶段的缓存优化--Cache-loader <a class="header-anchor" href="#编译阶段的缓存优化-cache-loader" aria-label="Permalink to &quot;编译阶段的缓存优化--Cache-loader&quot;">​</a></h4><p>./webpack.cache.config.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">module</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    rules</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#E06C75;">            test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /.js</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            use</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;cache-loader&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;babel-loader&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面两者的对比</p><p><img src="`+c+`" alt="上面两者的对比"></p><h4 id="优化打包阶段的缓存优化" tabindex="-1">优化打包阶段的缓存优化 <a class="header-anchor" href="#优化打包阶段的缓存优化" aria-label="Permalink to &quot;优化打包阶段的缓存优化&quot;">​</a></h4><h5 id="生成-chunkasset-时的缓存优化" tabindex="-1">生成 ChunkAsset 时的缓存优化 <a class="header-anchor" href="#生成-chunkasset-时的缓存优化" aria-label="Permalink to &quot;生成 ChunkAsset 时的缓存优化&quot;">​</a></h5><p>在 Webpack4 中，生成 ChunkAsset 过程中的缓存优化是受限制的</p><p>只有在 watch 模式下，且配置中开启 cache 时 (development 模式下自动开启)，才能在这一阶段执行缓存的逻辑</p><h4 id="代码压缩时的缓存优化" tabindex="-1">代码压缩时的缓存优化 <a class="header-anchor" href="#代码压缩时的缓存优化" aria-label="Permalink to &quot;代码压缩时的缓存优化&quot;">​</a></h4><p><strong>对于 JS 的压缩</strong>，TerserWebpackPlugin 和 UglifyJSPlugin 都是支持缓存设置的</p><p><strong>对于 CSS 的压缩</strong>，目前最新发布的 CSSMinimizerWebpackPlugin 支持且默认开启缓存。其他的插件如 OptimizeCSSAssetsplugin 和 OptimizeCSSNanoplugin 目前还不支持使用缓存</p><h4 id="缓存失效" tabindex="-1">缓存失效 <a class="header-anchor" href="#缓存失效" aria-label="Permalink to &quot;缓存失效&quot;">​</a></h4><p>如何最大程度地让缓存命中 成为我们选择缓存方案后首先要考虑的事情</p><h5 id="缓存标识符发生变化导致的缓存失效" tabindex="-1">缓存标识符发生变化导致的缓存失效 <a class="header-anchor" href="#缓存标识符发生变化导致的缓存失效" aria-label="Permalink to &quot;缓存标识符发生变化导致的缓存失效&quot;">​</a></h5><p>支持缓存的 Loader 和插件中，会根据一些固定字段的值加上所处理的模块或 Chunk 的数据 hash 值来生成对应缓存的标识符，例如特定依赖包的版本、对应插件的配置项信息、环境变量等</p><p>注意：在许多项目的集成构建环境中，特定依赖包由于安装时所生成的语义化版本导致构建版本时常自动更新，并造成缓存失效</p><h5 id="编译阶段的缓存失效" tabindex="-1">编译阶段的缓存失效 <a class="header-anchor" href="#编译阶段的缓存失效" aria-label="Permalink to &quot;编译阶段的缓存失效&quot;">​</a></h5><p>偏译阶段的执行时间由每个模块的编译时间相加而成</p><p>在开启缓存的情况下，代码发生变化的模块将被重新编译旦不影响它所依赖的及依赖它的其他模块，其他模块将继续使用缓存</p><h5 id="优化打包阶段的缓存失效" tabindex="-1">优化打包阶段的缓存失效 <a class="header-anchor" href="#优化打包阶段的缓存失效" aria-label="Permalink to &quot;优化打包阶段的缓存失效&quot;">​</a></h5><p>知道失效原因后，对应的优化思路尽可能地把那些不变的处理成本高昂的模块打入单独的 Chunk 中</p><h5 id="使用-splitchunks-优化缓存利用率" tabindex="-1">使用 splitChunks 优化缓存利用率 <a class="header-anchor" href="#使用-splitchunks-优化缓存利用率" aria-label="Permalink to &quot;使用 splitChunks 优化缓存利用率&quot;">​</a></h5><p>./webpack.cache-miss.config.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#E06C75;">optimization</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">	splitChunks</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		chunks</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;all&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="其他使用缓存的注意事项" tabindex="-1">其他使用缓存的注意事项 <a class="header-anchor" href="#其他使用缓存的注意事项" aria-label="Permalink to &quot;其他使用缓存的注意事项&quot;">​</a></h5><p><strong>CI/CD 中的缓存目录问题</strong></p><p>在许多自动化集成的系统中，项目的构建空间会在每次构建执行完毕后，立即回收清理</p><p>在集成化的平台中构建部署的项目，如果需要使用缓存</p><p>需要根据对应平台的规范，将缓存设置到公共缓存目录下</p><p><strong>缓存的清理</strong></p><p>缓存的便利性本质在于用磁盘空间换取构建时间</p><p>对于一个大量使用缓存的项目，随着时间的流逝，缓存空间会不断增大</p><p>对于上述多项目的集成环境而言，则需要考虑对缓存区域的定期清理</p><h5 id="与产物的持久化缓存相区别" tabindex="-1">与产物的持久化缓存相区别 <a class="header-anchor" href="#与产物的持久化缓存相区别" aria-label="Permalink to &quot;与产物的持久化缓存相区别&quot;">​</a></h5><p>浏览器端加载资源的缓存问题</p><p>以及相对应的如何在 Webpack 中生成产物的持久化缓存方法 (hash、chunkhash、contenthash)</p><p>这一部分知识所影响的是项目访问的性能，而对构建的效率没有影响</p><h4 id="总结-4" tabindex="-1">总结 <a class="header-anchor" href="#总结-4" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>Webpack 的构建缓存优化分为两个阶段:</p><ul><li>优化打包阶段的针对压缩代码过程的缓存优化</li><li>编译阶段的针对 Loader 的缓存优化</li></ul><p>在使用缓存时还需要额外注意如何减少缓存的失效</p><p>针对不同的构建环境，还需要考虑到缓存目录的留存与清理等问题</p><hr><p>上面介绍的几种支持缓存的插件 (TerserWebpackPlugin，CSSMinimizerWebpackPlugin) 和 Loader (babel-loader，cache-loader) 在缓存方面有哪些相同的配置项呢？</p><ul><li>01：用于指定是否开启缓存以及指定缓存目录</li><li>02：用于指定缓存标识符的计算参数</li></ul><h3 id="_6-增量构建-webpack-中的增量构建" tabindex="-1">6.增量构建:Webpack 中的增量构建 <a class="header-anchor" href="#_6-增量构建-webpack-中的增量构建" aria-label="Permalink to &quot;6.增量构建:Webpack 中的增量构建&quot;">​</a></h3><p>为什么我只改了一行代码，却需要花 5 分钟才能构建完成？</p><p>尽管只改动了一行代码，但是在执行构建时要完整执行所有模块的编译、优化和生成产物的处理过程</p><h4 id="webpack-中的增量构建" tabindex="-1">Webpack 中的增量构建 <a class="header-anchor" href="#webpack-中的增量构建" aria-label="Permalink to &quot;Webpack 中的增量构建&quot;">​</a></h4><p>在开启 devServer 的时候，执行 webpack-dev-server 命令后，Webpack 会进行一次初始化的构建。构建完成后启动服务并进入到等待更新的状态</p><h4 id="增量构建的影响因素一一-watch-配置" tabindex="-1">增量构建的影响因素一一 watch 配置 <a class="header-anchor" href="#增量构建的影响因素一一-watch-配置" aria-label="Permalink to &quot;增量构建的影响因素一一 watch 配置&quot;">​</a></h4><h4 id="增量构建的影响因素一一-cache-配置" tabindex="-1">增量构建的影响因素一一 cache 配置 <a class="header-anchor" href="#增量构建的影响因素一一-cache-配置" aria-label="Permalink to &quot;增量构建的影响因素一一 cache 配置&quot;">​</a></h4><ul><li><strong>布尔值</strong>：般情况下默认为 false 在开发模式开启 watch 配置的情况下，默认值变更为 true</li><li><strong>对象类型</strong>：表示使用该对象来作为缓存对象，用于多个编译器 compiler 的调用情况</li></ul><p>体积最大的 react、react-dom 等模块和入口模块打入了同一个 Chunk 中</p><p>即使修改的模块是单独分离的 barjs 但它的产物名称的变化仍然需要反映在入口 Chunk 的 runtime 模块中</p><h4 id="增量构建的实现原理" tabindex="-1">增量构建的实现原理 <a class="header-anchor" href="#增量构建的实现原理" aria-label="Permalink to &quot;增量构建的实现原理&quot;">​</a></h4><p>为什么在配置项中需要同时启用 watch 和 cache 配置才能获得增量构建的效果呢？</p><h5 id="watch-配置的作用" tabindex="-1">watch 配置的作用 <a class="header-anchor" href="#watch-配置的作用" aria-label="Permalink to &quot;watch 配置的作用&quot;">​</a></h5><p>lib/Watching.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#61AFEF;">_go</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">compiler</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hooks</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">watchRun</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callAsync</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">compiler</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#61AFEF;"> onCompiled</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">compilation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">compiler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">onCompiled</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="cache-配置的作用" tabindex="-1">cache 配置的作用 <a class="header-anchor" href="#cache-配置的作用" aria-label="Permalink to &quot;cache 配置的作用&quot;">​</a></h5><p>CachePlugin.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">compiler</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">hooks</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">thisCompilation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tap</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;CachePlugin&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">compilation</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	compilation</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Compilation.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">addModule</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cacheGroup</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cacheName</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> cacheModule</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cacheName</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 缓存模块存在情况下判断是否需要rebuild</span></span>
<span class="line"><span style="color:#E06C75;">        rebuild</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">rebuild</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // ...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 无需rebuild情况下返回cacheModule，并标记build:false</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                module</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">cacheModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                issuer</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                build</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                dependencies</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        createChunkAssets</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cachel</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cacheName</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cacheName</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">hash</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> usedHash</span><span style="color:#ABB2BF;"> ) {</span></span>
<span class="line"><span style="color:#E06C75;">                source</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">cacheNamel</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span><span style="color:#E06C75;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                source</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fileManifest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>通过 Webpack 内置的 cache 插件，将整个构建中相对耗时的两个内部处理环节一一<strong>编译模块和生成产物</strong>进行缓存的读写处理，从而实现增量构建处理</p><h4 id="生产环境下使用增量构建的阻碍" tabindex="-1">生产环境下使用增量构建的阻碍 <a class="header-anchor" href="#生产环境下使用增量构建的阻碍" aria-label="Permalink to &quot;生产环境下使用增量构建的阻碍&quot;">​</a></h4><p>增量构建之所以快是因为<strong>将构建所需的数据都保留在内存中</strong></p><p>对于管理多项目的构建系统，构建过程是任务式的：<strong>任务结束后即结束进程并回收系统资源</strong></p><p>要想在生产环境下提升构建速度，<strong>首要条件是将缓存写入到文件系统中</strong></p><h5 id="webpack-4" tabindex="-1">Webpack 4 <a class="header-anchor" href="#webpack-4" aria-label="Permalink to &quot;Webpack 4&quot;">​</a></h5><p>cache 配置只支持基于内存的缓存，并不支持文件系统的缓存</p><h5 id="webpack-5" tabindex="-1">Webpack 5 <a class="header-anchor" href="#webpack-5" aria-label="Permalink to &quot;Webpack 5&quot;">​</a></h5><p>正式支持基于文件系统的持久化缓存(Persistent Cache)</p><h4 id="总结-5" tabindex="-1">总结 <a class="header-anchor" href="#总结-5" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p><strong>增量构建</strong>在每次执行构建时，只编译处理内容有修改的少量文件，极大地提升构建效率</p><p>在 Webpack4 中，有两个配置项与增量构建相关: watch 和 cache</p><p><strong>watch</strong> 保留进程，使得初次构建后的数据对象能够在再次构建时复用 <strong>cache</strong> 在添加模块与生成产物代码时可以利用 cache 对象进行相应阶段结果数据的读写</p><hr><p>为什么在开启增量构建后，有时候 rebuild 还是会很慢呢?</p><p>1.Webpack 4 中的增量构建只运用到了新增模块与生成 chunk 产物阶段，其他处理过程仍需通过其他方式进行优化</p><p>2.过程中的一些处理会额外增加构建时间</p><h3 id="_7-版本特性-webpack-5-中的优化细节" tabindex="-1">7.版本特性:Webpack 5 中的优化细节 <a class="header-anchor" href="#_7-版本特性-webpack-5-中的优化细节" aria-label="Permalink to &quot;7.版本特性:Webpack 5 中的优化细节&quot;">​</a></h3><p>与构建效率相关的主要功能点:</p><h4 id="_1-persistent-caching" tabindex="-1">1.Persistent Caching <a class="header-anchor" href="#_1-persistent-caching" aria-label="Permalink to &quot;1.Persistent Caching&quot;">​</a></h4><h5 id="持久化缓存的示例" tabindex="-1">持久化缓存的示例 <a class="header-anchor" href="#持久化缓存的示例" aria-label="Permalink to &quot;持久化缓存的示例&quot;">​</a></h5><p>./webpack.cache.config.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	cache</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;filesystem&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		cacheLocation</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;.appcache&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">		buildDependencies</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			config</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">__filename</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="cache-基本配置" tabindex="-1">Cache 基本配置 <a class="header-anchor" href="#cache-基本配置" aria-label="Permalink to &quot;Cache 基本配置&quot;">​</a></h5><p>Webpack 4 中</p><ul><li>cache 只是单个属性的配置，所对应的赋值为 true 或 false</li></ul><p>Webpack 5 中</p><ul><li>cache 配置除了原本的 true 和 false 外，还增加了许多子配置项</li></ul><h6 id="webpack-5-中新增配置" tabindex="-1">Webpack 5 中新增配置 <a class="header-anchor" href="#webpack-5-中新增配置" aria-label="Permalink to &quot;Webpack 5 中新增配置&quot;">​</a></h6><p>cache.type</p><ul><li>值为&#39;memory&#39; 或&#39;filesystem&#39;分别代表基于内存的临时缓存以及基于文件系统的持久化缓存</li></ul><p>cache.name</p><ul><li>缓存名称。是 cacheDirectory 中的子目录命名，默认值为 Webpack 的 Sfconfignamel-Sfconfig.model</li></ul><p>cache.cacheDirectory</p><ul><li>缓存目录。默认目录为：node modules/.cache/webpack</li></ul><p>cache.cacheLocation</p><ul><li>缓存真正的存放地址默认使用的是：path.resolve(cache.cacheDirectory,cache.name)</li></ul><h5 id="单个模块的缓存失效" tabindex="-1">单个模块的缓存失效 <a class="header-anchor" href="#单个模块的缓存失效" aria-label="Permalink to &quot;单个模块的缓存失效&quot;">​</a></h5><p>Webpack 5 会跟踪每个模块的依赖项</p><ul><li>fileDependencies</li><li>contextDependencies</li><li>missingDependencies</li></ul><p>注意:对于 nodemodules 中的第三方依赖包中的模块 Webpack 会依据依赖包里 package.json 的 name 和 version 字段来判断模块是否发生变更</p><h5 id="全局的缓存失效" tabindex="-1">全局的缓存失效 <a class="header-anchor" href="#全局的缓存失效" aria-label="Permalink to &quot;全局的缓存失效&quot;">​</a></h5><p>当模块代码没有发生变化，但是构建处理过程本身发生变化时可能对构建后的产物代码产生影响<strong>在这种情况下需要让全局缓存失效，重新构建并生成新的缓存</strong></p><h5 id="builddependencies" tabindex="-1">buildDependencies <a class="header-anchor" href="#builddependencies" aria-label="Permalink to &quot;buildDependencies&quot;">​</a></h5><p><code>cache.buildDependencies</code>一一用于指定可能对构建过程产生影响的依赖项</p><p>默认选项是：<code>{defaultWebpack:[&quot;webpack/lib&quot;]}</code></p><p><code>{config:[__filename]}</code>：作用是当配置文件内容或配置文件依赖的模块文件发生变化时，当前的构建缓存即失效</p><h5 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">​</a></h5><p><strong>使用 version 配置来防止在外部依赖不同的情况下混用了相同的缓存</strong></p><ul><li>传入 cache:fversion: process.env.NODE_ENVH</li><li>达到当不同环境切换时彼此不共用缓存的效果</li></ul><h5 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h5><p>缓存的名称除了作为默认的缓存目录下的子目录名称外，也起到区分缓存数据的作用</p><p>例如，可以传入 <code>cache:{ name: process.env.NODE_ENV }</code> 来防止在不同的环境中同时生成两个缓存文件。</p><ul><li>name 的特殊性：name 在默认情况下是作为缓存的子目录名称存在的，可以利用 name 保留多套缓存在 name 切换时，若已存在同名称的缓存，则可以复用之前的缓存</li><li>当 cacheLocation 配置存在时，将忽略 name 的缓存目录功能上述多套缓存复用的功能也将失效</li></ul><h5 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h5><p>cache 还支持其他属性: managedPath、hashAlgorithm、store、idleTimeout</p><p><strong>Webpack 4 中</strong></p><p>部分插件默认启用缓存功能</p><p><strong>Webpack 5 中</strong></p><p>忽略各插件的缓存设置，由引擎自身提供构建各环节的缓存读写逻辑</p><h4 id="_2-tree-shaking" tabindex="-1">2.Tree Shaking <a class="header-anchor" href="#_2-tree-shaking" aria-label="Permalink to &quot;2.Tree Shaking&quot;">​</a></h4><p>Webpack4 中的 Tree Shaking 功能在使用上存在限制只支持 ES6 类型的模块代码分析，且需要相应的依赖包或需要函数声明为无副作用等</p><h5 id="nested-tree-shaking" tabindex="-1">Nested Tree Shaking <a class="header-anchor" href="#nested-tree-shaking" aria-label="Permalink to &quot;Nested Tree Shaking&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ./src/inner-module.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;inner_a&#39;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;inner_b&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// .src/nested-module.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> *</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> inner</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;./inner-module&#39;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> nested</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;nested&#39;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">inner</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">nested</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ./src/example-tree-nested.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> *</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> nested</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;./nested-module&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">nested</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">inner</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ./dist/tree-nest.js</span></span>
<span class="line"><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">    &quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;inner_a&quot;</span><span style="color:#ABB2BF;">)})();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="inner-module-tree-shaking" tabindex="-1">Inner Module Tree Shaking <a class="header-anchor" href="#inner-module-tree-shaking" aria-label="Permalink to &quot;Inner Module Tree Shaking&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// .src/inner-module.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;inner_a&#39;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;inner_b&#39;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;inner_c&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ./src/example-tree-nested.js 同上面示例</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//.src/nested-module.js</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> useB</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> inner</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> usingB</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> useB</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ./dist/tree-nest.js (e??e??optimization.innerGraph = true)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> t</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;inner _a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">n</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;inner_b&quot;</span><span style="color:#ABB2BF;">} ...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ./dist/tree-nest.js (optimization.innerGraph = false)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;inner_a&quot;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h5 id="commonjs-tree-shaking" tabindex="-1">CommonJS Tree Shaking <a class="header-anchor" href="#commonjs-tree-shaking" aria-label="Permalink to &quot;CommonJS Tree Shaking&quot;">​</a></h5><p>Webpack5 中增加了对一些 CommonJS 风格模块代码的静态分析功功能</p><ul><li>01：支持 exports.xxx、this.exports.xxxmodule.exports.xxx 语法的导出分析</li><li>02：支持 obiect.defineProperty(exports, &quot;xxxx&quot;,...) 语法的导出分析</li><li>03：支持 require(&#39;xxxx&#39;).xxx 语法的导入分析</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ./src/commonjs-module.js</span></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;">11</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 22</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;">33</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;module&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ./src/example-tree-commonjs.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/commonjs-module&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">a</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ./dist/tree-commonjs.js</span></span>
<span class="line"><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{ </span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> o</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">263</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">o</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">r</span><span style="color:#ABB2BF;">){ </span><span style="color:#E5C07B;">r</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 11</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;module&quot;</span><span style="color:#ABB2BF;">)}}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_3-logs" tabindex="-1">3.Logs <a class="header-anchor" href="#_3-logs" aria-label="Permalink to &quot;3.Logs&quot;">​</a></h4><p>webpack 4 中构建</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">LOG</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> webpack.buildChunkGraph.visitModules</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; prepare: 0.581067ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; visiting: 0.64386ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; calculating available modules: 0.040637ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; merging available modules: 0.011906ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; visiting: 0.024662ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>webpack 5 中构建</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">LOGfromweback.Comoiler</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; make hook: 63.34753 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; finish make hook: @.875754 msfinish compilation: 2.163349 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; seal compilation: 153.249396 mst&gt;ct&gt;afterCompile hook: 0.105597 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; emitAssets: 1.965609 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; emitRecords: .085795 msdone hook: 0.226861 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; beginIdle: 0.090658 ms</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">LOG</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> webpack.ResolverCachePlugin0%</span><span style="color:#98C379;"> really</span><span style="color:#98C379;"> resolyed</span><span style="color:#ABB2BF;"> (0 </span><span style="color:#98C379;">real</span><span style="color:#98C379;"> resolyes</span><span style="color:#98C379;"> with</span><span style="color:#D19A66;"> 0</span><span style="color:#98C379;"> cached</span><span style="color:#98C379;"> but</span><span style="color:#98C379;"> invalid,</span><span style="color:#D19A66;"> 2</span><span style="color:#98C379;"> cached</span><span style="color:#98C379;"> valid,</span><span style="color:#D19A66;"> 0</span><span style="color:#98C379;"> concurrent</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">LOG</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> webpack.FlagDependencyExportsPluginctzrestore</span><span style="color:#98C379;"> cached</span><span style="color:#98C379;"> provided</span><span style="color:#98C379;"> exports:</span><span style="color:#D19A66;"> 0.541466</span><span style="color:#98C379;"> mstsfiqure</span><span style="color:#98C379;"> out</span><span style="color:#98C379;"> provided</span><span style="color:#98C379;"> exports:</span><span style="color:#98C379;"> @.014885</span><span style="color:#98C379;"> ms%</span><span style="color:#E5C07B;">*</span><span style="color:#98C379;"> of</span><span style="color:#98C379;"> exports</span><span style="color:#98C379;"> of</span><span style="color:#98C379;"> modules</span><span style="color:#98C379;"> have</span><span style="color:#98C379;"> ben</span><span style="color:#98C379;"> determined</span><span style="color:#ABB2BF;"> ( </span><span style="color:#98C379;">not</span><span style="color:#98C379;"> cached,</span><span style="color:#D19A66;"> 0</span><span style="color:#98C379;"> flagged</span><span style="color:#98C379;"> uncacheable,</span><span style="color:#D19A66;"> 2</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> cache,</span><span style="color:#D19A66;"> 0</span><span style="color:#98C379;"> additional</span><span style="color:#98C379;"> calculations</span><span style="color:#98C379;"> due</span><span style="color:#98C379;"> to</span><span style="color:#98C379;"> dependencies</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; store provided exports into cache: .048856 ms</span></span>
<span class="line"><span style="color:#61AFEF;">LOG</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> webpack.Compilationfinish</span><span style="color:#98C379;"> modules:</span><span style="color:#98C379;"> 1.570761c</span><span style="color:#ABB2BF;">t&gt;</span><span style="color:#98C379;">ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; report dependency errorsand warnings: 0.492546 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; optimize dependencies: 1.994 mscreate chunks: 3.077758 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; optimize: 11.360441 msmodules hashed (</span><span style="color:#61AFEF;">0.5</span><span style="color:#98C379;"> variants</span><span style="color:#98C379;"> per</span><span style="color:#98C379;"> module</span><span style="color:#98C379;"> in</span><span style="color:#98C379;"> average</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; module hashing: 1.54114 ms0% code generated (</span><span style="color:#61AFEF;">0</span><span style="color:#98C379;"> generated,</span><span style="color:#D19A66;"> 1</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> cache</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; code generation: 1.01569 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; runtime requirements: 1.311863 msinitialize hash: 0.004017 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; hashing:hashing:</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; sort chunks: .005157 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; hashing:hash runtimemodules: 0.091376 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; hashing:hash chunks: 1.713927 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; hash digest:0.062296 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; hashing:hashing:process fullhash modules: 0.001745 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; hashing: 2.201677 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; record hash: 0.029649 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; module assets: 0.13887 mscreate chunk assets: 1.693072 ms</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;t&gt; process assets: 127.357463 ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h4 id="_4-其他优化项" tabindex="-1">4.其他优化项 <a class="header-anchor" href="#_4-其他优化项" aria-label="Permalink to &quot;4.其他优化项&quot;">​</a></h4><p>Webpack 5 中新增了改变微前端构建运行流程的 Module Federation 和对产物代码进行优化处理的 Runtime Modules 优化了处理模块的工作队列，在生命周期 Hooks 中增加了 stage 选项等</p><h4 id="_5-总结" tabindex="-1">5.总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5.总结&quot;">​</a></h4><p>Webpack5 的稳定版本将对外发布 (2020 年 10 月 10 日)</p><p>本节主要了解了 Webpack 最新版本与构建效率相关的几个优化功能点</p><p>重点是 Webpack 5 中引入的持久化缓存的特性</p><ul><li>讨论了如何开启和定制持久化缓存</li><li>通过哪些方式可以让缓存主动失效，以确保在项目里可以安全地享受缓存带来的效率提升</li><li>Webpack5 中对于 Tree Shaking 的优化能更好地优化项目依赖，减小构建产物的体积</li></ul><h4 id="webpack-5-中的持久化缓存究竟会影响哪些构建环节呢" tabindex="-1">Webpack 5 中的持久化缓存究竟会影响哪些构建环节呢？ <a class="header-anchor" href="#webpack-5-中的持久化缓存究竟会影响哪些构建环节呢" aria-label="Permalink to &quot;Webpack 5 中的持久化缓存究竟会影响哪些构建环节呢？&quot;">​</a></h4><ul><li>编译模块：ResolverCachePlugin、Compilation/modules</li><li>优化模块：FlagDependencyExportsPlugin、ModuleConcatenationPlugin</li><li>生成代码：Compilation/codeGeneration、Compilation/assets</li><li>优化产物：TerserWebpackPlugin、RealContentHashPlugin</li></ul><h3 id="_8-无包构建-盘点那些-no-bundle-的构建方案" tabindex="-1">8.无包构建:盘点那些 No-bundle 的构建方案 <a class="header-anchor" href="#_8-无包构建-盘点那些-no-bundle-的构建方案" aria-label="Permalink to &quot;8.无包构建:盘点那些 No-bundle 的构建方案&quot;">​</a></h3><h4 id="_1-什么是无包构建" tabindex="-1">1.什么是无包构建 <a class="header-anchor" href="#_1-什么是无包构建" aria-label="Permalink to &quot;1.什么是无包构建&quot;">​</a></h4><ul><li><strong>打包工具</strong>：基于一个或多个入口点模块，通过依赖分析将有依赖关系的模块打包到一起最后形成少数几个产物代码包</li><li><strong>无包构建</strong>：在构建时只需处理模块的编译而无须打包，把模块间的依赖关系完全交给浏览器来处理</li></ul><p>./src/index.html</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;module&quot;</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./modules/foo.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>.src/modules/foo.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;/bar.js&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">appendHTML</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./common.js&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://cdn.jsdelivr.net/npm/lodash-es@4.17.15/slice.js&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>浏览器会依次加载所有依赖模块</p><p><img src="`+u+'" alt="浏览器会依次加载依赖模块"></p><h4 id="_2-基于浏览器的-js-模块加载功能" tabindex="-1">2.基于浏览器的 JS 模块加载功能 <a class="header-anchor" href="#_2-基于浏览器的-js-模块加载功能" aria-label="Permalink to &quot;2.基于浏览器的 JS 模块加载功能&quot;">​</a></h4><p>[图片来源: <a href="https://caniuse.com/es6-module" target="_blank" rel="noreferrer">https://caniuse.com/es6-module</a>]</p><p><img src="'+d+`" alt="基于浏览器的JS模块加载功能"></p><h5 id="html-中的-script-引用" tabindex="-1">HTML 中的 Script 引用 <a class="header-anchor" href="#html-中的-script-引用" aria-label="Permalink to &quot;HTML 中的 Script 引用&quot;">​</a></h5><ul><li>01：入口模块文件在页面中引用时需要带上 type=&quot;module&quot;属性</li><li>02：带有 type=&quot;module&quot;属性的 script 在浏览器中通过 defer 的方式异步执行</li><li>03：带有 type=&quot;module&quot;属性且带有 async 属性的 script，在浏览器中通过 async 的方式异步执行</li><li>04：即使多次加载相同模块，也只会执行一次</li></ul><h5 id="模块内依赖的引用" tabindex="-1">模块内依赖的引用 <a class="header-anchor" href="#模块内依赖的引用" aria-label="Permalink to &quot;模块内依赖的引用&quot;">​</a></h5><ul><li>只能使用 import...from ... 的 ES6 风格的模块导入方式，或者使用 import(...).then(..)的 ES6 动态导入方式，不支持其他模块化规范的引用方式 (例如 require、define 等)</li><li>导入的模块只支持使用相对路径(&#39;/xxx&#39;, &#39;./xxx&#39;, &#39;&#39;../xxx&#39;)和 URL 方式(<a href="https://xn--xxxhttp-zt93b://xxx)%E8%BF%9B%E8%A1%8C%E5%BC%95%E7%94%A8%EF%BC%8C%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E5%8C%85%E5%90%8D%E5%BC%80%E5%A4%B4%E7%9A%84%E6%96%B9%E5%BC%8F(&#39;xxxx&#39;%EF%BC%8C&#39;xxx/xxx" target="_blank" rel="noreferrer">https://xxx，http://xxx)进行引用，不支持直接使用包名开头的方式(&#39;xxxx&#39;，&#39;xxx/xxx</a>&#39;)</li><li>只支持引用 MIMEType 为 text/iavascript 方式的模块，不支持其他类型文件的加载(例如 CSS 等)</li></ul><h5 id="为什么需要构建工具" tabindex="-1">为什么需要构建工具 <a class="header-anchor" href="#为什么需要构建工具" aria-label="Permalink to &quot;为什么需要构建工具&quot;">​</a></h5><ul><li>01：许多第三方依赖包在通过第三方 URL 引用时过程烦琐，难以进行灵活的版本控制与更新</li><li>02：许多其他类型的文件需要编译处理为 ES6 模块才能被浏览器正常加载</li><li>03：对于现实中的项目开发而言，一些便利的辅助开发技术需要由构建工具来提供</li></ul><h4 id="_3-vite" tabindex="-1">3.Vite <a class="header-anchor" href="#_3-vite" aria-label="Permalink to &quot;3.Vite&quot;">​</a></h4><p>Vite 是 Vue 框架的作者尤雨溪最新推出的基于 Native-ESM 的 Web 构建工具在开发环境下基于 Native-ESM 处理构建过程，只编译不打包，在生产环境下基于 Rollup 打包</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> init</span><span style="color:#98C379;"> vite-app</span><span style="color:#98C379;"> example-vite</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> example-vite</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="对-html-文件的预处理" tabindex="-1">对 HTML 文件的预处理 <a class="header-anchor" href="#对-html-文件的预处理" aria-label="Permalink to &quot;对 HTML 文件的预处理&quot;">​</a></h5><p>当启动 Vite 时，会通过 serverPluginHtml.ts 注入/vite/client 运行时的依赖模块该模块用于处理热更新，以及提供更新 CSS 的方法 updateStyle</p><h5 id="对外部依赖包-bare-modules-的解析" tabindex="-1">对外部依赖包(Bare Modules) 的解析 <a class="header-anchor" href="#对外部依赖包-bare-modules-的解析" aria-label="Permalink to &quot;对外部依赖包(Bare Modules) 的解析&quot;">​</a></h5><p>...</p><h5 id="对-vue-文件的解析" tabindex="-1">对 Vue 文件的解析 <a class="header-anchor" href="#对-vue-文件的解析" aria-label="Permalink to &quot;对 Vue 文件的解析&quot;">​</a></h5><p>通过 serverPluginVue.ts 处理的，分离出 Vue 代码中的 script/template/style 代码片段并分别转换为 JS 模块，然后将 template/style 模块的 import 写到 script 模块代码的头部</p><h5 id="对-css-文件的解析" tabindex="-1">对 CSS 文件的解析 <a class="header-anchor" href="#对-css-文件的解析" aria-label="Permalink to &quot;对 CSS 文件的解析&quot;">​</a></h5><p>对 CSS 文件的解析是通过 serverPlugincss.ts 处理的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">updateStyle</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot; /vite/client&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> css</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;...&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">updateStyle</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&quot;...&quot;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">css</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// id, cssContent</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> css</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 Vite 源码中还包含了其他更多文件类型的解析器，例如 JSON、TS、SASS 等</p><h5 id="vite-中的其他辅助功能" tabindex="-1">Vite 中的其他辅助功能 <a class="header-anchor" href="#vite-中的其他辅助功能" aria-label="Permalink to &quot;Vite 中的其他辅助功能&quot;">​</a></h5><ul><li>多框架：支持在 React 和 Preact 项目中使用。工具默认提供了 Vue、React 和 Preact 对应的脚手架模板</li><li>热更新 (HMR)：默认的 3 种框架的脚手架模板中都内置了 HMR 功能，也提供了 HMR 的 API 供第三方插件或项目代码使用</li><li>自定义配置文件：支持使用自定义配置文件来细化构建配置，配置项功能参考 config.ts</li><li>HTTPS 与 HTTP/2：支持使用--https 启动参数来开启使用 HTTPS 和 HTTP/2 协议的开发服务器</li><li>服务代理：在自定义配置中支持配置代理，将部分请求代理到第三方服务</li><li>模式与环境变量：支持通过 mode 来指定构建模式为 development 或 production 相应模式下自动读取 dotenv 类型的环境变量配置文件</li><li>生产环境打包：生产环境使用 Rollup 进行打包，支持传入自定义配置，配置项功能参考 build/index.ts</li></ul><h5 id="vite-的使用限制" tabindex="-1">Vite 的使用限制 <a class="header-anchor" href="#vite-的使用限制" aria-label="Permalink to &quot;Vite 的使用限制&quot;">​</a></h5><ul><li>面向支持 ES6 的现代浏览器，在生产环境下，编译目标参数 esBuildTarget 的默认值为 es2019，最低支持版本为 es2015</li><li>对 Vue 框架的支持目前仅限于最新的 Vue 3 版本，不兼容更低版本</li></ul><h4 id="snowpack" tabindex="-1">Snowpack <a class="header-anchor" href="#snowpack" aria-label="Permalink to &quot;Snowpack&quot;">​</a></h4><p>Snowpack 在生产环境下默认使用无包构建而非打包模式 Vite 仅在开发模式下使用</p><h5 id="snowpack-与-vite-相同的功能点" tabindex="-1">Snowpack 与 Vite 相同的功能点 <a class="header-anchor" href="#snowpack-与-vite-相同的功能点" aria-label="Permalink to &quot;Snowpack 与 Vite 相同的功能点&quot;">​</a></h5><p>Snowpack 与 Vite 两者都支持 各种代码转换加载器、热更新、环境变量 (需要安装 dotenv 插件)、服务代理、HTTPS 与 HTTP/2 等</p><h5 id="snowpack-与-vite-的差异点" tabindex="-1">Snowpack 与 Vite 的差异点 <a class="header-anchor" href="#snowpack-与-vite-的差异点" aria-label="Permalink to &quot;Snowpack 与 Vite 的差异点&quot;">​</a></h5><ul><li>相同的功能，实现细节不同：Vite 支持类似“AAA/BBB”类型的子模块引用方式。而 Snowpack 目前尚不支持</li><li>工具稳定性：Vite 的最新版本为 v1.0.0-rc4。Snowpack 更新到了 v2.11.1 版本</li><li>插件体系：Snowpack 提供了较完善的插件体系，Vite 目前并没有提供自定义插件的相关文档</li><li>打包工具：Vite 使用 Rollup 作为打包工具。Snowpack 需要引入插件实现打包功能</li><li>特殊优化：Vite 中内置了对 Vue 的大量构建优化</li></ul><h5 id="无包构建的优点" tabindex="-1">无包构建的优点 <a class="header-anchor" href="#无包构建的优点" aria-label="Permalink to &quot;无包构建的优点&quot;">​</a></h5><ul><li>01：初次构建启动快</li><li>02：按需编译</li><li>03：增量构建速度快</li></ul><h5 id="无包构建的缺点" tabindex="-1">无包构建的缺点 <a class="header-anchor" href="#无包构建的缺点" aria-label="Permalink to &quot;无包构建的缺点&quot;">​</a></h5><ul><li>浏览器网络请求数量剧增</li><li>浏览器的兼容性</li></ul><h4 id="总结-6" tabindex="-1">总结 <a class="header-anchor" href="#总结-6" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>无包构建产生的基础是浏览器对 JS 模块加载的支持</p><p>主要介绍了无包构建工具中的 Vite 和 Snowpack</p><h2 id="三、部署效率" tabindex="-1">三、部署效率 <a class="header-anchor" href="#三、部署效率" aria-label="Permalink to &quot;三、部署效率&quot;">​</a></h2><h3 id="_1-部署初探-为什么一般不在开发环境下部署代码" tabindex="-1">1.部署初探:为什么一般不在开发环境下部署代码? <a class="header-anchor" href="#_1-部署初探-为什么一般不在开发环境下部署代码" aria-label="Permalink to &quot;1.部署初探:为什么一般不在开发环境下部署代码?&quot;">​</a></h3><p>两个问题：</p><p>在前端项目的构建部署流程里，除了使用构建工具执行构建，还有哪些因素会影响整个部署流程的工作效率?</p><p>在部署系统中进行项目构建时，又会面临哪些和环境相关的问题和优化方案?</p><h4 id="_1-前端项目的一般部署流程" tabindex="-1">1.前端项目的一般部署流程 <a class="header-anchor" href="#_1-前端项目的一般部署流程" aria-label="Permalink to &quot;1.前端项目的一般部署流程&quot;">​</a></h4><ul><li>01：获取代码</li><li>02：安装依赖</li><li>03：源码构建</li><li>04：产物打包</li><li>05：推送代码</li><li>06：重启服务</li></ul><h4 id="_2-本地部署相比部署系统的优势" tabindex="-1">2.本地部署相比部署系统的优势 <a class="header-anchor" href="#_2-本地部署相比部署系统的优势" aria-label="Permalink to &quot;2.本地部署相比部署系统的优势&quot;">​</a></h4><ul><li><strong>获取代码的环节</strong>：直接获取更新内容并切换分支或版本的处理要更快一些</li><li><strong>安装依赖的环节</strong>：更新依赖包的时间比在空目录下完整安装依赖包的时间更短</li><li><strong>增量构建</strong>：在构建配置与项目依赖不发生变化的情况下，理论上，本地部署可以让构建进程长时间地驻留</li><li><strong>快速调试</strong>：本地部署时，构建过程会直接在本地进行，远程的部署系统需要将一定的时间消耗在链路反馈和本地环境切换上</li></ul><h4 id="_3-流程安全风险一一环境一致性" tabindex="-1">3.流程安全风险一一环境一致性 <a class="header-anchor" href="#_3-流程安全风险一一环境一致性" aria-label="Permalink to &quot;3.流程安全风险一一环境一致性&quot;">​</a></h4><ul><li>同一个项目，不同开发人员的本地环境都可能存在差异</li><li>由于 NodeJS 语义化版本(Semantic Version)在安装时自动升级的问题，不同开发人员的本地 node_modules 中的依赖包版本也可能存在差异</li><li>开发人员的本地环境和部署代码的目标服务器环境之间也可能存在差异</li></ul><h5 id="使用远程统一的部署系统" tabindex="-1">使用远程统一的部署系统 <a class="header-anchor" href="#使用远程统一的部署系统" aria-label="Permalink to &quot;使用远程统一的部署系统&quot;">​</a></h5><ul><li>避免了不同开发人员的本地环境差异性</li><li>部署系统的工作环境可以与线上服务环境保持一致</li></ul><h4 id="_4-流程安全风险一一过程一致性" tabindex="-1">4.流程安全风险一一过程一致性 <a class="header-anchor" href="#_4-流程安全风险一一过程一致性" aria-label="Permalink to &quot;4.流程安全风险一一过程一致性&quot;">​</a></h4><p>过程的一致性：是尽可能地让每次部署的流程顺序、各环节的处理过程都保持一致，从而打造规范化的部署流程</p><h4 id="_5-工作效率问题一一可回溯性" tabindex="-1">5.工作效率问题一一可回溯性 <a class="header-anchor" href="#_5-工作效率问题一一可回溯性" aria-label="Permalink to &quot;5.工作效率问题一一可回溯性&quot;">​</a></h4><ul><li>日志：在部署过程中遇到各种问题，例如构建失败、单元测试执行失败、推送代码失败、部署后启动服务失败等需要有相应的日志来帮助定位</li><li>产物：部署系统中会留存最近几次部署的构建产物包，以便当部署后的代码存在问题时能够快速回滚发布本地部署在项目的开发目录下执行，通常只会保留最近一次的构建产物</li></ul><h4 id="_6-工作效率问题一一人员分工" tabindex="-1">6.工作效率问题一一人员分工 <a class="header-anchor" href="#_6-工作效率问题一一人员分工" aria-label="Permalink to &quot;6.工作效率问题一一人员分工&quot;">​</a></h4><ul><li>01：部署过程需要耗费时间</li><li>02：如果一个项目只有个别开发者的本地环境拥有部署权限，增加对有权限的开发者的工作时间的占用</li><li>03：部署流程会主动由测试人员而非开发人员发起，增加了相应的沟通成本</li></ul><h4 id="_7-工作效率问题一一-ci-cd" tabindex="-1">7.工作效率问题一一 CI/CD <a class="header-anchor" href="#_7-工作效率问题一一-ci-cd" aria-label="Permalink to &quot;7.工作效率问题一一 CI/CD&quot;">​</a></h4><p><strong>持续集成 (Continuous Integration，CI)</strong> 和 <strong>持续交付 (Continuous Delivery，CD)</strong></p><p>开发人员提交代码后，由 CI/CD 系统自动化地执行合并、构建、测试和部署等一系列管道化 Pipeline) 的流程从而尽早发现和反馈代码问题，以小步快跑的方式加速软件的版本迭代过程</p><h4 id="总结-7" tabindex="-1">总结 <a class="header-anchor" href="#总结-7" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>这节课主要讨论了相比远程部署系统，本地部署的优缺点</p><p>优点</p><ul><li>流程简化</li><li>快速调试</li></ul><p>缺点</p><ul><li>流程安全风险</li><li>人员效率</li></ul><h3 id="_2-工具盘点-掌握那些流行的代码部署工具" tabindex="-1">2.工具盘点:掌握那些流行的代码部署工具 <a class="header-anchor" href="#_2-工具盘点-掌握那些流行的代码部署工具" aria-label="Permalink to &quot;2.工具盘点:掌握那些流行的代码部署工具&quot;">​</a></h3><h4 id="一个优秀的部署系统" tabindex="-1">一个优秀的部署系统 <a class="header-anchor" href="#一个优秀的部署系统" aria-label="Permalink to &quot;一个优秀的部署系统&quot;">​</a></h4><ul><li>提供过程日志、历史版本构建包、通知邮件等各类辅助功能模块，来打造更完善的部署工作流程</li><li>自动化地完整部署流程的各环节，能保证环境与过程的一致性，增强流程的稳定性，降低外部因素导致的风险</li></ul><h4 id="工具盘点-掌握那些流行的代码部署工具" tabindex="-1">工具盘点:掌握那些流行的代码部署工具 <a class="header-anchor" href="#工具盘点-掌握那些流行的代码部署工具" aria-label="Permalink to &quot;工具盘点:掌握那些流行的代码部署工具&quot;">​</a></h4><h4 id="_1-jenkins" tabindex="-1">1.Jenkins <a class="header-anchor" href="#_1-jenkins" aria-label="Permalink to &quot;1.Jenkins&quot;">​</a></h4><p>Jenkins 是诞生较早且使用广泛的开源持续集成工具</p><p>2004 年，Sun 公司推出它的前身 Husdon，2011 年更名为 Jenkins</p><h5 id="jenkins-一一功能特点" tabindex="-1">Jenkins 一一功能特点 <a class="header-anchor" href="#jenkins-一一功能特点" aria-label="Permalink to &quot;Jenkins 一一功能特点&quot;">​</a></h5><ul><li><strong>搭建方式</strong>：基于 Java 的应用程序，支持分布式的服务方式，各任务可以在不同的节点服务器上运行</li><li><strong>收费方式</strong>：完全免费的开源产品</li><li><strong>多类型 Job</strong>：自定义项目、流水线、文件夹/多配置项目、Github 组织等</li><li><strong>插件系统</strong>：Jenkins 架构中内置的插件系统为它提供了极强的功能扩展性</li></ul><h5 id="api-调用" tabindex="-1">API 调用 <a class="header-anchor" href="#api-调用" aria-label="Permalink to &quot;API 调用&quot;">​</a></h5><p>Jenkins 提供了 Restful 的 API 接口，可用于外部调用控制节点、任务、配置、构建等处理过程</p><h4 id="_2-circlecl" tabindex="-1">2.CircleCl <a class="header-anchor" href="#_2-circlecl" aria-label="Permalink to &quot;2.CircleCl&quot;">​</a></h4><h5 id="circleci-一功能特点" tabindex="-1">CircleCI 一功能特点 <a class="header-anchor" href="#circleci-一功能特点" aria-label="Permalink to &quot;CircleCI 一功能特点&quot;">​</a></h5><ul><li>1.<strong>云端服务</strong>：无需搭建和管理即可直接使用，提供了收费的本地化搭建服务方式</li><li>2.<strong>收费方式</strong>：分为免费与收费两种</li><li>3.<strong>缓存优化</strong>：CircleCI 的任务构建是基于容器化的，能够缓存依赖安装的数据、</li><li>4.<strong>SSH 调试</strong>：提供基于 SSH 访河构建容器的功能，便于在构建错误时快速地进入容器内进行调试</li><li>5.<strong>配置简化</strong>：提供了开箱即用的用户体验</li><li>6.<strong>API 调用</strong>：提供了 Restfull 的 API 接口，可用于访问项目、构建和产物</li></ul><h5 id="circleci-项目流水线示例界面" tabindex="-1">CircleCI 项目流水线示例界面 <a class="header-anchor" href="#circleci-项目流水线示例界面" aria-label="Permalink to &quot;CircleCI 项目流水线示例界面&quot;">​</a></h5><p><img src="`+h+`" alt="CircleCI项目流水线示例界面"></p><h4 id="_3-github-actions" tabindex="-1">3.Github Actions <a class="header-anchor" href="#_3-github-actions" aria-label="Permalink to &quot;3.Github Actions&quot;">​</a></h4><p>Github Actions (GHA) 是 Github 官方提供的 CI/CD 流程工具用于为 Github 中的开源项目提供简单易用的持续集成工作流能力</p><h5 id="github-actions-一一功能特点" tabindex="-1">Github Actions 一一功能特点 <a class="header-anchor" href="#github-actions-一一功能特点" aria-label="Permalink to &quot;Github Actions 一一功能特点&quot;">​</a></h5><ul><li>多系统：提供 Linux、Mac、Windows 等各主流操作系统环境下的运行能力，同时也支持在容器中运行</li><li>矩阵运行：支持同时在多个操作系统或不同环境下运行构建和测试流程</li><li>多语言：支持 NodeJS、JAVA、PHP、Python、Go、Rust 等各种编程语言的工作流程</li><li>多容器测试：支持直接使用 Docker-Compose 进行多容器关联的测试 (CircleCl 中需要先执行安装才能使用)</li><li>社区支持：Github 社区中提供众多工作流的模板可供选择，例如构建并发布 npm 包、构建并提交到 DockerHub 等</li><li>费用情况：对于公开的仓库，以及在自运维执行器的情况下是免费的。对于私有仓库则提供一定额度的免费执行时间和免费存储空间，超出部分需要收费</li></ul><h5 id="github-actions-的工作流模板" tabindex="-1">Github Actions 的工作流模板 <a class="header-anchor" href="#github-actions-的工作流模板" aria-label="Permalink to &quot;Github Actions 的工作流模板&quot;">​</a></h5><h5 id="github-actions-中的矩阵执行示例" tabindex="-1">Github Actions 中的矩阵执行示例 <a class="header-anchor" href="#github-actions-中的矩阵执行示例" aria-label="Permalink to &quot;Github Actions 中的矩阵执行示例&quot;">​</a></h5><h4 id="_4-gitlab-cl" tabindex="-1">4.Gitlab Cl <a class="header-anchor" href="#_4-gitlab-cl" aria-label="Permalink to &quot;4.Gitlab Cl&quot;">​</a></h4><ul><li>Gitlab 是由 Gitlab inc.开发的基于 Git 的版本管理与软件开发平台</li><li>具有在线编辑、Wiki、CI/CD 等功能</li><li>提供了免费的社区版本 (Community Edition，CE) 和免费或收费的商用版本 (Enterprise Edition，EE)</li></ul><h5 id="gitlab-ci-一一功能特点" tabindex="-1">Gitlab CI 一一功能特点 <a class="header-anchor" href="#gitlab-ci-一一功能特点" aria-label="Permalink to &quot;Gitlab CI 一一功能特点&quot;">​</a></h5><ul><li>Gitlab CI 使用 yml 文件作为 CI/CD 工作流程的配置文件，默认的配置文件名为 gitlab-ci.yml</li><li>在配置文件中涵盖了任务流水线 (Pipeline) 的处理过程细节： <ul><li>例如在配置文件中可以定义一到多个任务 (Job)；</li><li>每个任务可以指定一个任务运行的阶段 (Stage) 和一到多个执行脚本 (Script)等</li></ul></li><li><strong>Gitlab 中需要单独安装执行器</strong><strong>Gitlab Runner 的作用</strong>是执行任务，并将结果反馈到 Gitlab 中</li><li>开发者在独立的服务器上安装 Gitlab Runner 工具 然后依次执行 gitlab-runner register 注册特定配置的 Runner。最后执行 gitlab-runner start 启动相应服务</li></ul><h5 id="gitlab-ci-cd-的任务列表示例界面" tabindex="-1">Gitlab CI/CD 的任务列表示例界面 <a class="header-anchor" href="#gitlab-ci-cd-的任务列表示例界面" aria-label="Permalink to &quot;Gitlab CI/CD 的任务列表示例界面&quot;">​</a></h5><p>![Gitlab CICD的任务列表示例界面](.\\img\\Gitlab CICD 的任务列表示例界面.jpg)</p><h4 id="_5-总结-1" tabindex="-1">5.总结 <a class="header-anchor" href="#_5-总结-1" aria-label="Permalink to &quot;5.总结&quot;">​</a></h4><h5 id="jenkins" tabindex="-1">Jenkins <a class="header-anchor" href="#jenkins" aria-label="Permalink to &quot;Jenkins&quot;">​</a></h5><p>优点一一插件功能丰富且完全开源免费缺点一一缺少特定语言环境工作流的配置模板，使用成本相对较高，服务器需要独立部署和运维</p><h5 id="circleci-和-github-actions" tabindex="-1">CircleCI 和 Github Actions <a class="header-anchor" href="#circleci-和-github-actions" aria-label="Permalink to &quot;CircleCI 和 Github Actions&quot;">​</a></h5><p>都提供了基于容器化的云端服务的能力 提供不同的收费策略以满足普通小型开源项目和大型私有项目的各类需求</p><h5 id="circlecl" tabindex="-1">CircleCl <a class="header-anchor" href="#circlecl" aria-label="Permalink to &quot;CircleCl&quot;">​</a></h5><p>支持 BitBucket、Heroku 等平台的流程对接</p><h5 id="github-actions" tabindex="-1">Github Actions <a class="header-anchor" href="#github-actions" aria-label="Permalink to &quot;Github Actions&quot;">​</a></h5><p>使用成本最低，提供了矩阵运行、多容器测试、多工作流模板等特色功能</p><h5 id="gitlab" tabindex="-1">Gitlab <a class="header-anchor" href="#gitlab" aria-label="Permalink to &quot;Gitlab&quot;">​</a></h5><p>Gitlab CI 是企业中较受欢迎的版本管理工具 Gitlab 中内置 CI/CD 工具，使用 yml 格式的配置文件，需要独立安装与配置 Runner</p><h4 id="如果你所在的企业需要选择一款-ci-cd-工具你选择的主要依据有哪些呢" tabindex="-1">如果你所在的企业需要选择一款 CI/CD 工具你选择的主要依据有哪些呢？ <a class="header-anchor" href="#如果你所在的企业需要选择一款-ci-cd-工具你选择的主要依据有哪些呢" aria-label="Permalink to &quot;如果你所在的企业需要选择一款 CI/CD 工具你选择的主要依据有哪些呢？&quot;">​</a></h4><ul><li>选择付费系统还是免费系统，选择云服务还是自运维</li><li>所选的方案是否便于对接上下游系统流程</li><li>使用配置是否便捷，对用户而言是否有学习成本......</li></ul><h3 id="_3-安装提效-部署流程中的依赖安装效率优化" tabindex="-1">3.安装提效:部署流程中的依赖安装效率优化 <a class="header-anchor" href="#_3-安装提效-部署流程中的依赖安装效率优化" aria-label="Permalink to &quot;3.安装提效:部署流程中的依赖安装效率优化&quot;">​</a></h3><h4 id="_3-1-五种前端依赖的安装方式" tabindex="-1">3.1 五种前端依赖的安装方式 <a class="header-anchor" href="#_3-1-五种前端依赖的安装方式" aria-label="Permalink to &quot;3.1 五种前端依赖的安装方式&quot;">​</a></h4><ul><li>npm：NodeJS 自带的包管理工具，测试时，使用默认安装命令 npm install</li><li>Yarn：Yarn 是 Facebook 于 2016 年发布的包管理工具，Yarn 在依赖版本稳定性和安装效率方面通常更优测试时使用默认安装命令 Yarn</li><li>Yarn with PnP：抛弃作为包管理目录的 node_modules，使用软链接到本地缓存目录的方式来提升安装和模块解析的效率测试时使用 yarn -pnp</li><li>Yarn v2：Yarn 在 2020 年初发布了 v2 版本，通过 Set Version 的方式安装在项目内部测试时使用安装命令 Yarn</li><li>pnpm：它支持依赖版本的确定性安装特性，同时使用硬连接与符号连接缓存目录的方式测试时使用安装命令 pnpm install</li></ul><h4 id="_3-2-依赖安装的基本流程" tabindex="-1">3.2 依赖安装的基本流程 <a class="header-anchor" href="#_3-2-依赖安装的基本流程" aria-label="Permalink to &quot;3.2 依赖安装的基本流程&quot;">​</a></h4><ul><li>01：解析依赖关系阶段: 分析项目中各依赖包的依赖关系和版本信息</li><li>02：下载阶段：这个阶段的主要功能是下载依赖包</li><li>03：链接阶段: 处理项目依赖目录和缓存之间的硬链接和符号连接</li></ul><h4 id="_3-3-如何获取执行时间" tabindex="-1">3.3 如何获取执行时间 <a class="header-anchor" href="#_3-3-如何获取执行时间" aria-label="Permalink to &quot;3.3 如何获取执行时间&quot;">​</a></h4><p>使用系统提供的 time 命令获取执行时间</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;"> npm i</span></span>
<span class="line"><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;"> yarn</span></span>
<span class="line"><span style="color:#C678DD;">time</span><span style="color:#ABB2BF;"> pnpm i</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-4-如何获取执行日志" tabindex="-1">3.4 如何获取执行日志 <a class="header-anchor" href="#_3-4-如何获取执行日志" aria-label="Permalink to &quot;3.4 如何获取执行日志&quot;">​</a></h4><ul><li>npm：使用 npm 安装时需要在执行命令后增加--verbose 来显示完整日志</li><li>Yarn v1：Yarn v1 版本(包括 Yarn --PnP) 通过增加--verbose 来显示完整日志</li><li>Yarn v2：Yarn v2 版本默认显示完整日志，可通过--ison 参数变换日志格式</li><li>pnpm：pnpm 安装时需要在执行命令后增加 --reporterndison 来显示完整日志</li></ul><h4 id="_3-5-环境状态的五个分析维度" tabindex="-1">3.5 环境状态的五个分析维度 <a class="header-anchor" href="#_3-5-环境状态的五个分析维度" aria-label="Permalink to &quot;3.5 环境状态的五个分析维度&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:center;">场景名称</th><th style="text-align:center;">Lock 文件</th><th style="text-align:center;">历史安装目录</th><th style="text-align:center;">本地缓存</th><th style="text-align:center;">示例中日志名称</th></tr></thead><tbody><tr><td style="text-align:center;">纯净环境</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">clean install.log</td></tr><tr><td style="text-align:center;">Lock 环境</td><td style="text-align:center;">Y</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">lock_install.log</td></tr><tr><td style="text-align:center;">缓存环境</td><td style="text-align:center;">Y</td><td style="text-align:center;">-</td><td style="text-align:center;">Y</td><td style="text-align:center;">cached install.log</td></tr><tr><td style="text-align:center;">无缓存的重复安装环境</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">-</td><td style="text-align:center;">nocache reinstall.log</td></tr><tr><td style="text-align:center;">重复安装环境</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">Y</td><td style="text-align:center;">cached_reinstall.log</td></tr></tbody></table><h4 id="_3-6-纯净环境" tabindex="-1">3.6 纯净环境 <a class="header-anchor" href="#_3-6-纯净环境" aria-label="Permalink to &quot;3.6 纯净环境&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:center;">安装工具</th><th style="text-align:center;">npm(v6.9)</th><th style="text-align:center;">Yarn(v.1.21.1)</th><th style="text-align:center;">Yarn -PnP(v1.21.1)</th><th style="text-align:center;">Yarn(2.2.2)</th><th style="text-align:center;">pnpm(v5.8.0)</th></tr></thead><tbody><tr><td style="text-align:center;">安装时间</td><td style="text-align:center;">17.31s</td><td style="text-align:center;">29.6s</td><td style="text-align:center;">24.97s</td><td style="text-align:center;">62.4s</td><td style="text-align:center;">18.16s</td></tr><tr><td style="text-align:center;">解析依赖阶段</td><td style="text-align:center;">4.52s</td><td style="text-align:center;">5.39s</td><td style="text-align:center;">6.82s</td><td style="text-align:center;">11.38s</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">下载阶段</td><td style="text-align:center;">10.01s</td><td style="text-align:center;">16.57s</td><td style="text-align:center;">16.63s</td><td style="text-align:center;">46.74s</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">链接阶段</td><td style="text-align:center;">2.78s</td><td style="text-align:center;">7.64s</td><td style="text-align:center;">1.52S</td><td style="text-align:center;">4.49s</td><td style="text-align:center;">-</td></tr></tbody></table><p>npm &lt; pnpm &lt; Yarn v1 --PnP &lt; Yarn v1 &lt; Yarn v2</p><h4 id="_3-7-lock-环境" tabindex="-1">3.7 Lock 环境 <a class="header-anchor" href="#_3-7-lock-环境" aria-label="Permalink to &quot;3.7 Lock 环境&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:center;">安装工具</th><th style="text-align:center;">npm(v6.9)</th><th style="text-align:center;">Yarn(v.1.21.1)</th><th style="text-align:center;">Yarn -PnP(v1.21.1)</th><th style="text-align:center;">Yarn(2.2.2)</th><th style="text-align:center;">pnpm(v5.8.0)</th></tr></thead><tbody><tr><td style="text-align:center;">安装时间</td><td style="text-align:center;">13.12s</td><td style="text-align:center;">22.69s</td><td style="text-align:center;">21.03s</td><td style="text-align:center;">49.25s</td><td style="text-align:center;">11.51s</td></tr><tr><td style="text-align:center;">解析依赖阶段</td><td style="text-align:center;">0.847s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">0.05s</td></tr><tr><td style="text-align:center;">下载阶段</td><td style="text-align:center;">10.19s</td><td style="text-align:center;">15.92s</td><td style="text-align:center;">19.79s</td><td style="text-align:center;">46.9s</td><td style="text-align:center;">10.3s</td></tr><tr><td style="text-align:center;">链接阶段</td><td style="text-align:center;">2.08s</td><td style="text-align:center;">6.77s</td><td style="text-align:center;">1.24S</td><td style="text-align:center;">2.17s</td><td style="text-align:center;">1.16s</td></tr></tbody></table><h4 id="_3-8-缓存-环境" tabindex="-1">3.8 缓存 环境 <a class="header-anchor" href="#_3-8-缓存-环境" aria-label="Permalink to &quot;3.8 缓存 环境&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:center;">安装工具</th><th style="text-align:center;">npm(v6.9)</th><th style="text-align:center;">Yarn(v.1.21.1)</th><th style="text-align:center;">Yarn -PnP(v1.21.1)</th><th style="text-align:center;">Yarn(2.2.2)</th><th style="text-align:center;">pnpm(v5.8.0)</th></tr></thead><tbody><tr><td style="text-align:center;">安装时间</td><td style="text-align:center;">8.11s</td><td style="text-align:center;">6.54s</td><td style="text-align:center;">1.95s</td><td style="text-align:center;">2.61s</td><td style="text-align:center;">5.25s</td></tr><tr><td style="text-align:center;">解析依赖阶段</td><td style="text-align:center;">0.859s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">0.05s</td></tr><tr><td style="text-align:center;">下载阶段</td><td style="text-align:center;">5.23s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">0.24s</td><td style="text-align:center;">4.38s</td></tr><tr><td style="text-align:center;">链接阶段</td><td style="text-align:center;">2.01s</td><td style="text-align:center;">6.54s</td><td style="text-align:center;">1.8S</td><td style="text-align:center;">2.37s</td><td style="text-align:center;">0.87s</td></tr></tbody></table><p>本地缓存主要优化的是下载依赖包阶段的耗时</p><h4 id="_3-9-无缓存的重复安装环境" tabindex="-1">3.9 无缓存的重复安装环境 <a class="header-anchor" href="#_3-9-无缓存的重复安装环境" aria-label="Permalink to &quot;3.9 无缓存的重复安装环境&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:center;">安装工具</th><th style="text-align:center;">npm(v6.9)</th><th style="text-align:center;">Yarn(v.1.21.1)</th><th style="text-align:center;">Yarn -PnP(v1.21.1)</th><th style="text-align:center;">Yarn(2.2.2)</th><th style="text-align:center;">pnpm(v5.8.0)</th></tr></thead><tbody><tr><td style="text-align:center;">安装时间</td><td style="text-align:center;">2.79s</td><td style="text-align:center;">0.41s</td><td style="text-align:center;">19.51s</td><td style="text-align:center;">47.63s</td><td style="text-align:center;">1.13s</td></tr><tr><td style="text-align:center;">解析依赖阶段</td><td style="text-align:center;">0.964s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">0.076s</td></tr><tr><td style="text-align:center;">下载阶段</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">19.11s</td><td style="text-align:center;">46.68s</td><td style="text-align:center;">0.033s</td></tr><tr><td style="text-align:center;">链接阶段</td><td style="text-align:center;">1.83s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">0.4s</td><td style="text-align:center;">0.77s</td><td style="text-align:center;">0.222s</td></tr></tbody></table><p>存在安装目录这一条件首先对链接阶段能起到优化的作用</p><h4 id="_3-10-有缓存的重复安装环境" tabindex="-1">3.10 有缓存的重复安装环境 <a class="header-anchor" href="#_3-10-有缓存的重复安装环境" aria-label="Permalink to &quot;3.10 有缓存的重复安装环境&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:center;">安装工具</th><th style="text-align:center;">npm(v6.9)</th><th style="text-align:center;">Yarn(v.1.21.1)</th><th style="text-align:center;">Yarn -PnP(v1.21.1)</th><th style="text-align:center;">Yarn(2.2.2)</th><th style="text-align:center;">pnpm(v5.8.0)</th></tr></thead><tbody><tr><td style="text-align:center;">安装时间</td><td style="text-align:center;">2.76s</td><td style="text-align:center;">0.51s</td><td style="text-align:center;">0.84s</td><td style="text-align:center;">1.55s</td><td style="text-align:center;">1.10s</td></tr><tr><td style="text-align:center;">解析依赖阶段</td><td style="text-align:center;">0.936s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">0.076s</td></tr><tr><td style="text-align:center;">下载阶段</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">0.24s</td><td style="text-align:center;">0.035s</td></tr><tr><td style="text-align:center;">链接阶段</td><td style="text-align:center;">1.44s</td><td style="text-align:center;">~0s</td><td style="text-align:center;">0.69s</td><td style="text-align:center;">0.76s</td><td style="text-align:center;">0.221s</td></tr></tbody></table><h4 id="_3-11-不同安装条件" tabindex="-1">3.11 不同安装条件 <a class="header-anchor" href="#_3-11-不同安装条件" aria-label="Permalink to &quot;3.11 不同安装条件&quot;">​</a></h4><p>项目的依赖安装过程，效率最高的 3 个条件：存在 Lock 文件存在，存在本地缓存存在和存在安装记录</p><ul><li><strong>Lock 文件</strong>的留存是最容易做到的，也是最可能被忽略的，大部分项目都会保留在代码仓库中</li><li><strong>本地缓存</strong>是当安装记录不存在时最重要的优化手段。对于大部分部署系统，注意磁盘空间与效率的平衡在部署服务的个别项目中，执行清除缓存的操作也会影响其他项目。</li><li><strong>本地安装记录</strong>对于部署系统需要占据较多的磁盘空间，建议确认所使用的部署系统是否支持相关设定</li><li>安装条件方面，有一些额外的不容易量化的条件，例如网速、磁盘 I/0 速度等</li></ul><h4 id="_3-12-不同安装工具" tabindex="-1">3.12 不同安装工具 <a class="header-anchor" href="#_3-12-不同安装工具" aria-label="Permalink to &quot;3.12 不同安装工具&quot;">​</a></h4><p><strong>单从效率而言，各工具在不同安装条件下的优劣各有不同</strong></p><ul><li>如果考虑各种场景下的综合表现，pnpm 是最稳定高效的</li><li>如果考虑现实情况中，Yarn v1 是更好的选择</li><li>如果考虑只有 Lock 文件的情况，则 npm 的表现要优于 Yarn</li><li>在无安装目录的情况下，Yarn v1 的 PnP 模式效率要高于普通模式</li><li>Yarnv2 支持针对单个项目清除缓存而不影响全局</li></ul><p><strong>不同的安装工具对构建过程会产生影响</strong></p><ul><li>Yarn v1 普通模式可以作为 npm 的直接替代，不对构建产生影响</li><li>PnP 模式、Yarn v2 和 pnpm 在项目中选择工具时需要综合考虑</li></ul><h4 id="_3-13-总结" tabindex="-1">3.13 总结 <a class="header-anchor" href="#_3-13-总结" aria-label="Permalink to &quot;3.13 总结&quot;">​</a></h4><p>这一课时主要讨论了部署流程中的依赖安装环节的执行细节问题</p><h4 id="如果项目中使用的是-npm-在最佳条件下是否可以像-yarn-那样耗时更趋近于零呢" tabindex="-1">如果项目中使用的是 npm，在最佳条件下是否可以像 Yarn 那样耗时更趋近于零呢？ <a class="header-anchor" href="#如果项目中使用的是-npm-在最佳条件下是否可以像-yarn-那样耗时更趋近于零呢" aria-label="Permalink to &quot;如果项目中使用的是 npm，在最佳条件下是否可以像 Yarn 那样耗时更趋近于零呢？&quot;">​</a></h4><p>当然可以</p><h5 id="_1-提升依赖下载速度" tabindex="-1">1 提升依赖下载速度 <a class="header-anchor" href="#_1-提升依赖下载速度" aria-label="Permalink to &quot;1 提升依赖下载速度&quot;">​</a></h5><p>依赖包下载源 (registry)</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># npm设置下载源</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> config</span><span style="color:#98C379;"> set</span><span style="color:#98C379;"> registry</span><span style="color:#98C379;"> xxxx</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># yarn设置下载源</span></span>
<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> config</span><span style="color:#98C379;"> set</span><span style="color:#98C379;"> registry</span><span style="color:#98C379;"> xxxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>进制下载源</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> config</span><span style="color:#98C379;"> set</span><span style="color:#98C379;"> sass-binary-site</span><span style="color:#98C379;"> https://npm.taobao.org/mirrors/node-sass</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> config</span><span style="color:#98C379;"> set</span><span style="color:#98C379;"> puppeteer_download</span><span style="color:#98C379;"> host</span><span style="color:#98C379;"> https://npm.taobao.org/mirrors</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_2-多项目共用依赖缓存" tabindex="-1">2 多项目共用依赖缓存 <a class="header-anchor" href="#_2-多项目共用依赖缓存" aria-label="Permalink to &quot;2 多项目共用依赖缓存&quot;">​</a></h5><p>对于使用多台构建服务器的分布式 CI 系统，要考虑的是<strong>如何最大化地利用缓存</strong></p><p>例如让使用相同依赖工具的项目共用相同的服务器，以及让技术栈相同的项目共用相同的服务器</p><h5 id="_3-安装目录缓存" tabindex="-1">3 安装目录缓存 <a class="header-anchor" href="#_3-安装目录缓存" aria-label="Permalink to &quot;3 安装目录缓存&quot;">​</a></h5><p><strong>缓存写入</strong></p><p>以 package-lock.json 文件内容的 Hash 值作为缓存的 Key</p><p>将 node modules 目录压缩打包存储到缓存空间内</p><p><strong>缓存读取</strong></p><p>判断当前代码的 package-lock.ison 内容的 Hash 值</p><p>是否能够命中缓存目录中的 Key 值如果命中缓存，直接使用缓存中的 node modules 压缩包解压</p><p><strong>使用时注意点</strong></p><ul><li>原生的依赖缓存：以单个依赖包为存储单元缓存空间中只会新增变更的版本数据</li><li>人工缓存安装目录：以 Lock 文件的 Hash 值为 Key，当个别依赖版本发生变更时，需要在依赖安装结束后重新缓存整个安装目录</li></ul><h5 id="影响安装的关联因素" tabindex="-1">影响安装的关联因素 <a class="header-anchor" href="#影响安装的关联因素" aria-label="Permalink to &quot;影响安装的关联因素&quot;">​</a></h5><ul><li>前端项目：执行安装后的依赖包内容和项目中的依赖版本相关还和执行安装时的操作系统以及 NodeJS 版本有关</li><li>分布式的 CI 系统：如果共用缓存空间，必须在生成缓存 Key 时将这些变量因素也加入其中参与计算</li></ul><h5 id="检测项目-lock-文件" tabindex="-1">检测项目 Lock 文件 <a class="header-anchor" href="#检测项目-lock-文件" aria-label="Permalink to &quot;检测项目 Lock 文件&quot;">​</a></h5><p><strong>Lock 文件对于依赖安装过程的重要性</strong></p><ul><li>01：需要项目的开发者注意对 Lock 文件的保存和维护</li><li>02：在 CI 系统的工作流程中加入对 Lock 文件的检测</li></ul><h3 id="_4-流程优化-部署流程中的构建流程策略优化" tabindex="-1">4.流程优化:部署流程中的构建流程策略优化 <a class="header-anchor" href="#_4-流程优化-部署流程中的构建流程策略优化" aria-label="Permalink to &quot;4.流程优化:部署流程中的构建流程策略优化&quot;">​</a></h3><h4 id="_4-1-代码构建阶段的提效" tabindex="-1">4.1 代码构建阶段的提效 <a class="header-anchor" href="#_4-1-代码构建阶段的提效" aria-label="Permalink to &quot;4.1 代码构建阶段的提效&quot;">​</a></h4><p>构建阶段是整个部署流程中最耗时的一个环节</p><h5 id="ci-系统中的持化缓存" tabindex="-1">CI 系统中的持化缓存 <a class="header-anchor" href="#ci-系统中的持化缓存" aria-label="Permalink to &quot;CI 系统中的持化缓存&quot;">​</a></h5><ul><li>CI 系统中项目的构建空间通常是临时的</li><li>在开始部署时创建项目工作目录，在部署结束后删除工作目录，以达到节约资源的目的</li></ul><p>弊端一一无法利用构建过程中的持久化缓存机制</p><p>以 Webpack 为例</p><ul><li>项目执行构建后，中间过程的缓存默认存放于 node_modules/.cache 目录下</li><li>再次构建时，无法利用持久化缓存来提升再次构建的效率</li></ul><h6 id="备份" tabindex="-1">备份 <a class="header-anchor" href="#备份" aria-label="Permalink to &quot;备份&quot;">​</a></h6><ul><li>项目构建结束后，对项目的目录结构进行扫描，找到.cache 目录</li><li>依据其相对项目根目录的路径生成备份目录名称</li><li>例如把项目中/client/node modules/.cache 多层目录转换为折叠目录</li><li>client _node_modules .cache，然后将其备份到 CI 系统专用的持久化缓存备份空间中</li></ul><h6 id="还原" tabindex="-1">还原 <a class="header-anchor" href="#还原" aria-label="Permalink to &quot;还原&quot;">​</a></h6><ul><li>在部署过程进行到开始构建的阶段时，查看备份空间中是否存在对应项目的持久化缓存目录</li><li>若存在，则直接解析目录结构，将.cache 还原回项目相应的目录中</li></ul><h4 id="_4-2-产物打包阶段的提效" tabindex="-1">4.2 产物打包阶段的提效 <a class="header-anchor" href="#_4-2-产物打包阶段的提效" aria-label="Permalink to &quot;4.2 产物打包阶段的提效&quot;">​</a></h4><p>CI 系统在构建结束后，需要将产物进行压缩打包，以便归档和在推送产物到服务器时减少传输数据量，提升传输效率</p><h5 id="提升压缩效率的工具" tabindex="-1">提升压缩效率的工具 <a class="header-anchor" href="#提升压缩效率的工具" aria-label="Permalink to &quot;提升压缩效率的工具&quot;">​</a></h5><table tabindex="0"><thead><tr><th>压缩工具</th><th>压缩速度 (MB/s)</th><th>解压速度 (MB/s)</th><th>CPU 占用%</th><th>压缩率</th></tr></thead><tbody><tr><td>Gzip (default level 6)</td><td>29.81</td><td>161.71</td><td>99</td><td>3.1067</td></tr><tr><td>Gzip (level 1)</td><td>78.34</td><td>161.71</td><td>99</td><td>2.7396</td></tr><tr><td>Pigz (default level 9)</td><td>72.71</td><td>301.69</td><td>776</td><td>3.0857</td></tr><tr><td>Pigz (level 1)</td><td>326.03</td><td>301.69</td><td>742</td><td>2.7087</td></tr><tr><td>Zstd (default level 3)</td><td>449.19</td><td>374.33</td><td>646</td><td>3.1777</td></tr><tr><td>Zstd (level 1)</td><td>1263.36</td><td>652.06</td><td>576</td><td>2.8802</td></tr></tbody></table><h5 id="使用时需要注意" tabindex="-1">使用时需要注意 <a class="header-anchor" href="#使用时需要注意" aria-label="Permalink to &quot;使用时需要注意&quot;">​</a></h5><ul><li>如果待压缩的内容体积不大可以使用默认的 Gzip 压缩</li><li>Pigz 和 Zstd 都启用了并行处理，处理过程中 CPU 和内存的占用会比 Gzip 更高</li><li>Pigz 的压缩产物和 Gzip 格式是兼容的，Zstd 是不兼容的，往往被用于压缩与解压流程闭环的应用场景中</li></ul><h4 id="_4-3-总结" tabindex="-1">4.3 总结 <a class="header-anchor" href="#_4-3-总结" aria-label="Permalink to &quot;4.3 总结&quot;">​</a></h4><ul><li>01：依赖安装阶段的多维度提升安装效率</li><li>02：代码构建阶段的持久化缓存备份</li><li>03：产物打包阶段的提升压缩效率</li></ul><h4 id="本节课我们在哪些方案中使用了缓存机制-它们各自的作用分别是什么呢" tabindex="-1">本节课我们在哪些方案中使用了缓存机制？它们各自的作用分别是什么呢？ <a class="header-anchor" href="#本节课我们在哪些方案中使用了缓存机制-它们各自的作用分别是什么呢" aria-label="Permalink to &quot;本节课我们在哪些方案中使用了缓存机制？它们各自的作用分别是什么呢？&quot;">​</a></h4><p>三种缓存机制：</p><ul><li>多项目共用依赖缓存 <ul><li>作用：</li></ul></li><li>依赖安装目录的缓存 <ul><li>作用：</li></ul></li><li>构建过程的持久化缓存备份 <ul><li>作用：</li></ul></li></ul><h3 id="_5-容器方案-从构建到部署-容器化方案的优势有哪些" tabindex="-1">5.容器方案:从构建到部署，容器化方案的优势有哪些? <a class="header-anchor" href="#_5-容器方案-从构建到部署-容器化方案的优势有哪些" aria-label="Permalink to &quot;5.容器方案:从构建到部署，容器化方案的优势有哪些?&quot;">​</a></h3><h4 id="_5-1-什么是容器化" tabindex="-1">5.1 什么是容器化 <a class="header-anchor" href="#_5-1-什么是容器化" aria-label="Permalink to &quot;5.1 什么是容器化&quot;">​</a></h4><p>容器化 (Containerization) 通常指以 Docker 技术为代表，将操作系统内核虚拟化的技术占用空间更小、性能开销更低、启动更快、支持弹性伸缩以及支持容器间互联等优势</p><h4 id="_5-2-docker" tabindex="-1">5.2 Docker <a class="header-anchor" href="#_5-2-docker" aria-label="Permalink to &quot;5.2 Docker&quot;">​</a></h4><p>Docker 指运行在 Linux/Windows/macoS 中开源的虚拟化引擎用于创建、管理和编排容器</p><h5 id="docker-镜像-image" tabindex="-1">Docker 镜像（Image） <a class="header-anchor" href="#docker-镜像-image" aria-label="Permalink to &quot;Docker 镜像（Image）&quot;">​</a></h5><p>镜像一一创建容器实例的基础虚拟化模板</p><p>通过一个镜像可以创建多个容器实例，镜像之间也存在继承关系</p><p>一个基于 node:14 的镜像，在创建时包含了运行 node14 版本所需的 Linux 系统环境</p><p>还包含了额外打入到镜像内的 Yarn 程序</p><h5 id="容器-container" tabindex="-1">容器 (Container) <a class="header-anchor" href="#容器-container" aria-label="Permalink to &quot;容器 (Container)&quot;">​</a></h5><p>通常一个容器内包含了一个或多个应用程序以及运行它们所需要的完整相关环境依赖</p><p>通过 Docker 引擎可以对容器进行创建、删除、停止、恢复、与容器交互等操作</p><h5 id="数据挂载与数据卷" tabindex="-1">数据挂载与数据卷 <a class="header-anchor" href="#数据挂载与数据卷" aria-label="Permalink to &quot;数据挂载与数据卷&quot;">​</a></h5><p>解决持久化保留数据的两种方式：</p><ul><li>挂载容器的宿主环境的目录</li><li>使用数据卷</li></ul><h5 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-label="Permalink to &quot;网络&quot;">​</a></h5><p>Docker 容器的网络有多种驱动类型，例如 bridge、host、overlay 等</p><p><strong>bridge</strong> 一一用于点对点访问容器间端口或者将容器端口映射到宿主环境下</p><p><strong>host</strong>一一直接使用宿主环境的网络</p><h4 id="_5-3-容器化的构建部署" tabindex="-1">5.3 容器化的构建部署 <a class="header-anchor" href="#_5-3-容器化的构建部署" aria-label="Permalink to &quot;5.3 容器化的构建部署&quot;">​</a></h4><p>容器化的构建部署把原先在部署服务器中执行的项目部署流程的各个环节，改为使用容器化的技术来完成</p><h5 id="操作镜像阶段" tabindex="-1">操作镜像阶段 <a class="header-anchor" href="#操作镜像阶段" aria-label="Permalink to &quot;操作镜像阶段&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#通过FROM指定父镜像</span></span>
<span class="line"><span style="color:#61AFEF;">FROM</span><span style="color:#98C379;"> node:12-slim</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 通过RUN命令依次在镜像中安装git，make和curl程序</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> apt-get</span><span style="color:#98C379;"> update</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> apt-get</span><span style="color:#D19A66;"> -y</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> git</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> apt-get</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -y</span><span style="color:#98C379;"> build-essential</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> apt-get</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -y</span><span style="color:#98C379;"> curl</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 Dockerfile 所在目录下执行构建命令，即可创建相应镜像</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> --network</span><span style="color:#98C379;"> host</span><span style="color:#D19A66;"> --tag</span><span style="color:#98C379;"> foo:bar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其他指令参照官方文档：</p><h5 id="操作容器阶段" tabindex="-1">操作容器阶段 <a class="header-anchor" href="#操作容器阶段" aria-label="Permalink to &quot;操作容器阶段&quot;">​</a></h5><p>容器阶段的主要目标是基于项目的工作镜像创建执行部署过程的容器并操作容器执行相应的各部署环节:获取代码、安装依赖、执行构建、产物打包、推送产物等</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 创建容器</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -dit</span><span style="color:#D19A66;"> --name</span><span style="color:#98C379;"> container_1</span><span style="color:#98C379;"> foo:bar</span><span style="color:#98C379;"> bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 容器内执行命令</span></span>
<span class="line"><span style="color:#61AFEF;">docker</span><span style="color:#98C379;"> exec</span><span style="color:#D19A66;"> -it</span><span style="color:#98C379;"> container_1</span><span style="color:#98C379;"> xxxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_5-4-容器化部署过程的优势" tabindex="-1">5.4 容器化部署过程的优势 <a class="header-anchor" href="#_5-4-容器化部署过程的优势" aria-label="Permalink to &quot;5.4 容器化部署过程的优势&quot;">​</a></h4><ul><li>环境隔离：防止共用一台服务器时可能产生的互相影响保证每个项目都可以自由定制专属的环境依赖</li><li>多环境构建：针对同一个项目生成多套不同的构建环境使项目可以同时检测多套环境下的集成过程</li><li>便于调试：通过 Xterm+SSH 的方式，通过浏览器访问部署系统中的容器环境容器化的方式可以在部署遇到问题时让用户第一时间进入容器环境中进行现调试</li><li>环境一致性与迁移效率：在支持 Docker 引擎的任意服务器中使用，无须考虑不同服务器操作系统的差异，在迁移时可以做到一键迁移</li></ul><h4 id="_5-5-缓存问题" tabindex="-1">5.5 缓存问题 <a class="header-anchor" href="#_5-5-缓存问题" aria-label="Permalink to &quot;5.5 缓存问题&quot;">​</a></h4><h5 id="依赖缓存" tabindex="-1">依赖缓存 <a class="header-anchor" href="#依赖缓存" aria-label="Permalink to &quot;依赖缓存&quot;">​</a></h5><p>默认情况，容器内的依赖缓存目录与宿主环境缓存目录不互通，每次部署流程都在新容器中进行</p><ul><li>生成容器时挂载宿主环境依赖缓存目录</li><li>安装目录缓存</li></ul><h5 id="构建缓存" tabindex="-1">构建缓存 <a class="header-anchor" href="#构建缓存" aria-label="Permalink to &quot;构建缓存&quot;">​</a></h5><p>容器化的情况，每次部署过程都会基于新容器环境重新执行各部署环节构建过程的缓存数据会随着部署结束、容器移除而消失</p><ul><li>在宿主环境中创建构建缓存目录并挂载到容器中，并在项目构建配置中将缓存目录设置为该目录</li><li>将缓存备份到宿主服务器或远程存储服务器中，在新部署流程中进行还原使用</li></ul><h5 id="性能问题" tabindex="-1">性能问题 <a class="header-anchor" href="#性能问题" aria-label="Permalink to &quot;性能问题&quot;">​</a></h5><ul><li>01.容器资源限制：创建容器时通过参数限制容器使用的 CPU 核心数和内存大小，限制系统资源在一定程度上导致执行过程性能的降低</li><li>02.copy-to-write：容器中环境的数据来自镜像层，新增的数据来自写入容器层。如果修改或删除的是镜像层的数据，容器会先将数据从镜像层复制到容器层，然后进行相应操作</li></ul><h4 id="_5-6-总结" tabindex="-1">5.6 总结 <a class="header-anchor" href="#_5-6-总结" aria-label="Permalink to &quot;5.6 总结&quot;">​</a></h4><ul><li>01：以 Docker 为代表的容器化技术的基本概念: 镜像、容器、数据挂载和网络等</li><li>02：容器化构建部署流程: 先创建镜像，然后根据镜像创建容器，最后在容器内执行相关部署环节</li><li>03：容器化部署具有隔离性高、支持多环境矩阵执行、易于调试和环境标准化等优势</li></ul><h4 id="容器化技术可以应用在部署过程中也更广泛地被应用在部署后的项目服务运行中试比较这两种场景下对容器化技术需求的差异性" tabindex="-1">容器化技术可以应用在部署过程中也更广泛地被应用在部署后的项目服务运行中试比较这两种场景下对容器化技术需求的差异性 <a class="header-anchor" href="#容器化技术可以应用在部署过程中也更广泛地被应用在部署后的项目服务运行中试比较这两种场景下对容器化技术需求的差异性" aria-label="Permalink to &quot;容器化技术可以应用在部署过程中也更广泛地被应用在部署后的项目服务运行中试比较这两种场景下对容器化技术需求的差异性&quot;">​</a></h4><ul><li>容器持续时间不同：容器化部署的容器只在部署时创建使用，部署完成后即删除;容器化服务通常长时间运行</li><li>容器互联：容器化部署中的容器通常无须访问其他容器;容器化服务涉及多容器互联，以及更多弹性伸缩的容器特性</li><li>容器资源：容器化部署中涉及构建等 CPU 和 I/0 密集型处理;容器化服务对网络负载更敏感</li></ul><h3 id="_6-案例分析-搭建基本的前端高效部署系统" tabindex="-1">6.案例分析:搭建基本的前端高效部署系统 <a class="header-anchor" href="#_6-案例分析-搭建基本的前端高效部署系统" aria-label="Permalink to &quot;6.案例分析:搭建基本的前端高效部署系统&quot;">​</a></h3><p>分析一个基本的前端部署系统的工作流程、基本架构和主要功能模块的技术点</p><h4 id="_6-1-构建部署工作流程" tabindex="-1">6.1 构建部署工作流程 <a class="header-anchor" href="#_6-1-构建部署工作流程" aria-label="Permalink to &quot;6.1 构建部署工作流程&quot;">​</a></h4><p><img src="`+b+`" alt="构建部署工作流程"></p><h5 id="_1-webhook" tabindex="-1">1.Webhook <a class="header-anchor" href="#_1-webhook" aria-label="Permalink to &quot;1.Webhook&quot;">​</a></h5><p>部署系统将一个 Webhook 接口注册到代码管理系统(CVS) 中提交代码后，触发 CVS 的 Webhook，由 CVS 将提交事件通知给部署系统</p><h5 id="_2-项目构建" tabindex="-1">2.项目构建 <a class="header-anchor" href="#_2-项目构建" aria-label="Permalink to &quot;2.项目构建&quot;">​</a></h5><p>构建任务在执行时依次执行 代码获取、依赖安装、代码构建和产物打包等环节</p><h5 id="_3-产物部署" tabindex="-1">3.产物部署 <a class="header-anchor" href="#_3-产物部署" aria-label="Permalink to &quot;3.产物部署&quot;">​</a></h5><h6 id="push-模式" tabindex="-1">Push 模式 <a class="header-anchor" href="#push-模式" aria-label="Permalink to &quot;Push 模式&quot;">​</a></h6><p>部署系统通过 SCP 等方式将产物包推送到目标服务器，并执行解压重启等发布流程</p><h6 id="pull-模式" tabindex="-1">Pull 模式 <a class="header-anchor" href="#pull-模式" aria-label="Permalink to &quot;Pull 模式&quot;">​</a></h6><p>提供下载接口，由下游发布环节调用，获取产物包以便执行后续发布流程，下游环节调用反馈接口，将发布结果反馈至部署系统</p><h5 id="_4-结果反馈" tabindex="-1">4.结果反馈 <a class="header-anchor" href="#_4-结果反馈" aria-label="Permalink to &quot;4.结果反馈&quot;">​</a></h5><p>构建结果与部署结果会通过通知模块(消息、邮件等)的方式反馈至开发与测试人员</p><h4 id="_6-2-系统使用辅助流程" tabindex="-1">6.2 系统使用辅助流程 <a class="header-anchor" href="#_6-2-系统使用辅助流程" aria-label="Permalink to &quot;6.2 系统使用辅助流程&quot;">​</a></h4><ul><li>登录与用户管理：获取使用者的基本信息，并对其在系统内的使用权限进行管理</li><li>项目流程：系统内新增项目、修改项目部署配置获取项目列表与查看项目详情等</li><li>构建流程：呈现项目的构建记录列表、构建详情等信息并能通过界面操控构建任务的状态变更</li><li>发布流程：呈现项目的发布记录列表，并能通过界面操控构建记录的发布等</li></ul><h5 id="部署服务器环境准备" tabindex="-1">部署服务器环境准备 <a class="header-anchor" href="#部署服务器环境准备" aria-label="Permalink to &quot;部署服务器环境准备&quot;">​</a></h5><p>项目构建部署的服务器需要具备构建部署流程所需的相关环境条件</p><p>在非容器化的情况下，如果搭建的是分布式的服务，则需要尽量保证一些环境条件的一致</p><ul><li><p>01：NodeJS</p></li><li><p>02：全局依赖工具</p></li><li><p>03：各类配置文件与环境变量</p></li><li><p>04：统所需其他工具</p></li><li><p>05：服务目录划分与维护</p></li></ul><h5 id="webhook" tabindex="-1">Webhook <a class="header-anchor" href="#webhook" aria-label="Permalink to &quot;Webhook&quot;">​</a></h5><ul><li>01：在 CVS 系统中创建 Web 应用</li><li>02：在部署系统中新增接收 Webhook 消息的路由</li><li>03：在部署系统中新增项目时，调用创建 Webhook 的接口，根据需求设置特定的 Webhook 参数</li></ul><h5 id="任务队列" tabindex="-1">任务队列 <a class="header-anchor" href="#任务队列" aria-label="Permalink to &quot;任务队列&quot;">​</a></h5><p>在部署系统接收到 Webhook 传递的代码提交信息后</p><p>根据提交信息创建构建记录，并执行构建任务</p><ul><li>需要使用容器化构建部署，构建任务在独立容器内进行</li><li>需要对整个部署系统的同时执行任务数(Concurrency) 设定限制</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建任务队列</span></span>
<span class="line"><span style="color:#E06C75;">queue</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Queue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">qname</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	redis</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">redisConfig</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">promiseDone</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">process</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">job</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">done</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> config</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> job</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> task</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BuildTask</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 创建并执行构建任务</span></span>
<span class="line"><span style="color:#E5C07B;">	queue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">promiseDone</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> done</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 将任务完成函数赋值给外部属性，用于异步完成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> queue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> queueJobComplete</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">promiseDone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> queueJobFail</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">promiseDone</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> queueJobAdd</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		jobld</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// jobld of queue</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="_6-3-构建任务阶段与插件系统" tabindex="-1">6.3 构建任务阶段与插件系统 <a class="header-anchor" href="#_6-3-构建任务阶段与插件系统" aria-label="Permalink to &quot;6.3 构建任务阶段与插件系统&quot;">​</a></h4><ul><li><p>初始化阶段</p></li><li><p>获取代码阶段</p></li><li><p>依赖安装阶段</p></li><li><p>构建执行阶段</p></li><li><p>产物打包阶段</p><p>1.明确构建执行进展，当构建中断时便于定位到具体的执行阶段</p><p>2.各阶段独立统计耗时便于针对性优化</p><p>3.使用 Tapable 定义各阶段的 Hooks，将复杂的构建任务执行过程拆分到各功能插件中</p></li></ul><h4 id="_6-4-任务命令与子进程" tabindex="-1">6.4 任务命令与子进程 <a class="header-anchor" href="#_6-4-任务命令与子进程" aria-label="Permalink to &quot;6.4 任务命令与子进程&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 依赖安装</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 执行构建</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> build</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 产物打包</span></span>
<span class="line"><span style="color:#61AFEF;">tar</span><span style="color:#D19A66;"> -zcf</span><span style="color:#98C379;"> client.tar.gz</span><span style="color:#98C379;"> dist/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">spawn</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;child process&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> spawnPromise</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;font-style:italic;">commands</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cwd</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">onStdout</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">onStderr</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        onStdout</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> onStdout</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> (() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {})</span></span>
<span class="line"><span style="color:#E06C75;">        onStderr</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> onStderr</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> (() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {})</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> subProcess</span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;bash&#39;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">detached</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cwd</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        subProcess</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;close&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">signal</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">signal</span><span style="color:#56B6C2;">===</span><span style="color:#98C379;">&#39;SIGHUP&#39;</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // abort callbackimmediately after kill</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#61AFEF;"> reject</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#61AFEF;">                resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ok&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                reject</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        subProcess</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stdout</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setEncoding</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;utf8&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        subProcess</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stderr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setEncoding</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;utf8&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">        subProcess</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stdout</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;data&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onStdout</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        subProcess</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stderr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;data&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">onStderr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        subProcess</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stdin</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;error&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            notifySysError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;subprocess stdin error&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">            reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        commands</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">command</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            subProcess</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stdin</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">command</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        subProcess</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stdin</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h4 id="_6-5-状态、事件与-socket" tabindex="-1">6.5 状态、事件与 Socket <a class="header-anchor" href="#_6-5-状态、事件与-socket" aria-label="Permalink to &quot;6.5 状态、事件与 Socket&quot;">​</a></h4><ul><li>初始化：已部署服务接收到了 Webhook 的提交信息，并提取了构建所需的所有配置数据</li><li>同时也已创建了对应的构建记录</li><li>队列中：该构建任务已列入等待队列中</li><li>进行中：任务已开始执行</li><li>已取消：任务已被用户主动取消执行</li><li>已成功：构建任务已完成，用户可以进行下一步的发布流程已失败: 构建任务已失败，需要用户确认失败原因并调试修复</li><li>已超时：构建任务已超时</li></ul><h5 id="反馈过程" tabindex="-1">反馈过程 <a class="header-anchor" href="#反馈过程" aria-label="Permalink to &quot;反馈过程&quot;">​</a></h5><ul><li>构建任务：当达到特定终止状态时由服务进程触发相应事件</li><li>构建事件处理器：根据监听到的不同事件执行相应的处理</li><li>Socket 处理器：服务器端触发相应的 Socket 消息，网页端接收到 Socket 消息后，会变更页面中的构建记录显示状态</li></ul><h4 id="_6-7-总结" tabindex="-1">6.7 总结 <a class="header-anchor" href="#_6-7-总结" aria-label="Permalink to &quot;6.7 总结&quot;">​</a></h4><ul><li>流程梳理</li><li>核心技术模块分析</li></ul><p><strong>流程梳理</strong></p><ul><li>需要对构建部署的整体工作流程有一个比较清晰的认知掌握服务内部用户界面的各模块操作流程</li></ul><p><strong>核心构建流程的模块分析</strong></p><ul><li>了解操作层面的服务器环境的准备工作</li><li>代码架构层面的任务队列、构建任务阶段与状态拆分等</li></ul><h2 id="前端效率工程化总结" tabindex="-1">前端效率工程化总结 <a class="header-anchor" href="#前端效率工程化总结" aria-label="Permalink to &quot;前端效率工程化总结&quot;">​</a></h2><h3 id="开发效率" tabindex="-1">开发效率 <a class="header-anchor" href="#开发效率" aria-label="Permalink to &quot;开发效率&quot;">​</a></h3><ul><li>脚手架工具</li><li>开发构建 <ul><li>热更新</li><li>sourceMap</li></ul></li><li>mock 工具</li><li>编码效率工具</li><li>云开发</li><li>低代码开发</li><li>无代码开发</li></ul><h3 id="构建效率" tabindex="-1">构建效率 <a class="header-anchor" href="#构建效率" aria-label="Permalink to &quot;构建效率&quot;">​</a></h3><ul><li>构建工具历史</li><li>webpack 构建流程分解</li><li>编译阶段提效</li><li>打包阶段提效</li><li>缓存优化</li><li>增量构建</li><li>webpack 5</li><li>no-bundle</li></ul><h3 id="部署效率" tabindex="-1">部署效率 <a class="header-anchor" href="#部署效率" aria-label="Permalink to &quot;部署效率&quot;">​</a></h3><ul><li>部署环境对比</li><li>部署工具介绍</li><li>安装阶段提效</li><li>流程策略优化</li><li>容器化部署</li><li>构建部署系统架构</li></ul><h2 id="前端效率工程化的未来展望" tabindex="-1">前端效率工程化的未来展望 <a class="header-anchor" href="#前端效率工程化的未来展望" aria-label="Permalink to &quot;前端效率工程化的未来展望&quot;">​</a></h2><h3 id="云工作流" tabindex="-1">云工作流 <a class="header-anchor" href="#云工作流" aria-label="Permalink to &quot;云工作流&quot;">​</a></h3><p>开发效率方面，由 WebIDE 发展而来的云开发工具目前正逐渐成为几个大型厂商探索的方向之一</p><h3 id="ai-生成页面" tabindex="-1">AI 生成页面 <a class="header-anchor" href="#ai-生成页面" aria-label="Permalink to &quot;AI 生成页面&quot;">​</a></h3><p>基于 AI 的生成页面工具(例如微软的 Sketch2Code) 可以进一步解放生产力</p><p>仍有各自的局限性</p><ul><li>基于设计稿 (sketch/PSD) 的精准生成方式</li><li>基于草图乃至描述语句的 AI 匹配生成方式</li></ul><h3 id="go-rust" tabindex="-1">Go/Rust <a class="header-anchor" href="#go-rust" aria-label="Permalink to &quot;Go/Rust&quot;">​</a></h3><p>Webpack 5 带来了更完整的缓存策略和代码优化策略</p><p>但构建工具本身的性能仍然受到 NodeJS 自身语言的限制</p><p>基于 GoRust 等高性能语言的编译工具在未来或许能成为性能突破点之一</p><h3 id="no-bundle-http-3" tabindex="-1">No bundle &amp; HTTP/3 <a class="header-anchor" href="#no-bundle-http-3" aria-label="Permalink to &quot;No bundle &amp; HTTP/3&quot;">​</a></h3><p>无包构建工具在生产环境下仍然采用打包构建的方式</p><p>随着网络技术的发展，或许最终可以在生产环境下同样采用无包构建</p><p>渐进式的使用方式也可能很快成为可实现的方向</p><h3 id="总结-8" tabindex="-1">总结 <a class="header-anchor" href="#总结-8" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>如果你目前主要做的是具体项目的开发维护工作，分析现有项目的构建工具、构建配置是一个很好的入手点</li><li>如果你目前承担着多个项目的选型与架构工作，希望开发效率模块的一些视角可以为你带来思路</li><li>如果你目前从事前端基础建设的相关工作，希望课程中提到的一些新的开发、构建和部署工具能为你提供一些着手方向</li></ul><h1 id="前端自动化-工程化" tabindex="-1">前端自动化/工程化 <a class="header-anchor" href="#前端自动化-工程化" aria-label="Permalink to &quot;前端自动化/工程化&quot;">​</a></h1><h2 id="前端模块化规范" tabindex="-1">前端模块化规范 <a class="header-anchor" href="#前端模块化规范" aria-label="Permalink to &quot;前端模块化规范&quot;">​</a></h2><h3 id="浏览器模块化规范-过时不推荐" tabindex="-1">浏览器模块化规范 (过时不推荐) <a class="header-anchor" href="#浏览器模块化规范-过时不推荐" aria-label="Permalink to &quot;浏览器模块化规范 (过时不推荐)&quot;">​</a></h3><ul><li><p>AMD</p><ul><li>require.js <ul><li><a href="http://www.requirejs.cn/" target="_blank" rel="noreferrer">http://www.requirejs.cn/</a></li></ul></li></ul></li><li><p>CMD</p><ul><li>sea.js <ul><li><a href="https://seajs.github.io/seajs/docs" target="_blank" rel="noreferrer">https://seajs.github.io/seajs/docs</a></li></ul></li></ul></li></ul><h3 id="服务器端模块化规范" tabindex="-1">服务器端模块化规范 <a class="header-anchor" href="#服务器端模块化规范" aria-label="Permalink to &quot;服务器端模块化规范&quot;">​</a></h3><ul><li><p>CommonJS</p><ul><li><p>1.模块分为单文件 与 包</p></li><li><p>2.模块成员导出：module.exports 和 exports</p></li><li><p>3.模块成员导入：require(&#39;模块标识符&#39;)</p></li></ul></li></ul><h3 id="大一统的模块化规范-es6-模块化" tabindex="-1">大一统的模块化规范- ES6 模块化 <a class="header-anchor" href="#大一统的模块化规范-es6-模块化" aria-label="Permalink to &quot;大一统的模块化规范- ES6 模块化&quot;">​</a></h3><ul><li><p>是浏览器端与服务端通用的模块化开发规范</p></li><li><p>ES6 模块化规范中定义：</p><ul><li><p>每个 js 文件都是一个独立的模块</p></li><li><p>导入模块成员 使用 import 关键字</p></li><li><p>暴露模块成员 使用 export 关键字</p></li></ul></li></ul><h2 id="前端工程化" tabindex="-1">前端工程化 <a class="header-anchor" href="#前端工程化" aria-label="Permalink to &quot;前端工程化&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><ul><li><p>开发流程</p></li><li><p>技术选型</p></li><li><p>代码规范</p></li><li><p>构建发布</p></li></ul><h3 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h3><h4 id="grunt-构建工具" tabindex="-1">grunt 构建工具 <a class="header-anchor" href="#grunt-构建工具" aria-label="Permalink to &quot;grunt 构建工具&quot;">​</a></h4><ul><li><p>对需要反复重复的任务，例如压缩、编译、单元测试、linting 等，自动化工具可以减轻劳动，简化操作</p></li><li><p>可用的 Grunt 插件</p><ul><li><p>coffeescript</p></li><li><p>handlebars</p></li><li><p>iade</p></li><li><p>JSHint</p></li><li><p>less</p></li><li><p>sass</p></li><li><p>stylus</p></li><li><p>require.js</p></li></ul></li><li><p>安装</p><ul><li><p>官网</p><ul><li>www.gruntjs.net</li></ul></li><li><p>官网有教程</p></li></ul></li></ul><h4 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;webpack&quot;">​</a></h4><h5 id="概念-作用和官网" tabindex="-1">概念/作用和官网 <a class="header-anchor" href="#概念-作用和官网" aria-label="Permalink to &quot;概念/作用和官网&quot;">​</a></h5><ul><li><p>前端资源构建工具：前端的所有资源文件(js/json/css/img/css 预处理文件)都做模块化处理。 会根据模块依赖的关系进行静态分析，打包生成对应的静态资源(bundle)</p></li><li><p>作用</p><ul><li><p>资源的压缩</p></li><li><p>代码的混淆</p></li><li><p>代码检查</p></li><li><p>转义</p><ul><li><p>ES6</p></li><li><p>JSX</p></li></ul></li><li><p>预处理</p></li><li><p>开发-热更新</p><ul><li><p>webpack-dev-server</p></li><li><p>webpack-dev-middleware</p></li></ul></li></ul></li><li><p>官网</p><ul><li><a href="https://webpack.js.org/" target="_blank" rel="noreferrer">https://webpack.js.org/</a></li></ul></li></ul><h5 id="环境配置" tabindex="-1">环境配置 <a class="header-anchor" href="#环境配置" aria-label="Permalink to &quot;环境配置&quot;">​</a></h5><h5 id="webpack-5-1" tabindex="-1">webpack 5 <a class="header-anchor" href="#webpack-5-1" aria-label="Permalink to &quot;webpack 5&quot;">​</a></h5><ul><li><p>新特点</p><ul><li><p>- 通过持久缓存提高构建性能.</p></li><li><p>- 使用更好的算法和默认值来改善长期缓存.</p></li><li><p>- 通过更好的树摇和代码生成来改善捆绑包大小.</p></li><li><p>- 清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改.</p></li><li><p>- 通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5.</p></li></ul></li><li><p>下载安装</p><ul><li>npm i webpack@next webpack-cli -D</li></ul></li></ul><h4 id="gulp" tabindex="-1">gulp <a class="header-anchor" href="#gulp" aria-label="Permalink to &quot;gulp&quot;">​</a></h4><ul><li><p>官网</p></li><li><p>核心概念</p><ul><li><p>tasks</p></li><li><p>pipeline</p></li></ul></li><li><p>插件</p><ul><li><p>资源处理</p><ul><li><p>gulp-uglify</p></li><li><p>gulp-sass</p></li><li><p>gulp-imagemin</p></li><li><p>gulp-concat</p></li></ul></li><li><p>任务及状态管理</p><ul><li><p>gulp-plumber</p></li><li><p>run-sequence</p></li></ul></li><li><p>代码检查</p><ul><li><p>gulp-jshint</p></li><li><p>gulp-eslint</p></li></ul></li><li><p>热更新</p><ul><li><p>gulp-livereload</p></li><li><p>browser-sync</p></li></ul></li></ul></li></ul><h4 id="yeoman" tabindex="-1">yeoman <a class="header-anchor" href="#yeoman" aria-label="Permalink to &quot;yeoman&quot;">​</a></h4><ul><li><p>现代应用程序的 Web 的脚手架工具</p></li><li><p>官网</p><ul><li><a href="https://yeoman.io/" target="_blank" rel="noreferrer">https://yeoman.io/</a></li></ul></li><li><p>安装</p><ul><li>npm install -g yo <ul><li>全局安装</li></ul></li></ul></li><li><p>yo 命令</p><ul><li><p>yo brian-gulp</p><ul><li>下载形成项目文件目录</li></ul></li><li><p>yo run build</p><ul><li>运行</li></ul></li></ul></li><li><p>构建脚手架 generator</p><ul><li><p>全局安装</p><ul><li>npm install -g generator-generator</li></ul></li><li><p>运行</p><ul><li>yo generator</li></ul></li><li><p>发布</p><ul><li><p>npm config set registry <a href="https://registry.npmjs.org/" target="_blank" rel="noreferrer">https://registry.npmjs.org/</a></p></li><li><p>npm login</p><ul><li>输入用户名密码登录</li></ul></li><li><p>npm publish</p><ul><li>发布</li></ul></li></ul></li><li><p>使用</p><ul><li>npm 官网查看</li></ul></li></ul></li></ul><h2 id="团队协作" tabindex="-1">团队协作 <a class="header-anchor" href="#团队协作" aria-label="Permalink to &quot;团队协作&quot;">​</a></h2><h3 id="版本管理" tabindex="-1">版本管理 <a class="header-anchor" href="#版本管理" aria-label="Permalink to &quot;版本管理&quot;">​</a></h3><h4 id="版本格式" tabindex="-1">版本格式 <a class="header-anchor" href="#版本格式" aria-label="Permalink to &quot;版本格式&quot;">​</a></h4><ul><li><p>1.2.3-beta.1 + meta</p><ul><li><p>1</p><ul><li>主版本 <ul><li>API 的变化和接口的重启</li></ul></li></ul></li><li><p>2</p><ul><li>次版本 <ul><li>可能会有 api 的更新或者迭代</li></ul></li></ul></li><li><p>3</p><ul><li>修订号 <ul><li>解决小 bug</li></ul></li></ul></li><li><p>beta.1</p><ul><li>先行测试版本</li></ul></li><li><p>meta</p><ul><li>元数据</li></ul></li></ul></li><li><p>常见版本名称释义</p><ul><li><p>alpha</p><ul><li><p>内部测试版本</p></li><li><p>有很多未测试的漏洞</p></li></ul></li><li><p>beta</p><ul><li><p>公测版本</p></li><li><p>消除了严重的错误，但是还会有很多小 bug</p></li></ul></li><li><p>rc</p><ul><li><p>发行候选版本</p></li><li><p>不会加入新功能，主要是排错修改 bug</p></li></ul></li><li><p>release</p><ul><li>发行版本</li></ul></li></ul></li></ul><h4 id="git-版本管理" tabindex="-1">Git(版本管理) <a class="header-anchor" href="#git-版本管理" aria-label="Permalink to &quot;Git(版本管理)&quot;">​</a></h4><ul><li><p>1.下载和安装 Git</p><ul><li><p>官网下载</p></li><li><p>傻瓜式安装</p><ul><li>一直点下一步</li></ul></li></ul></li><li><p>2.git 基本工作流程</p><ul><li><p>1.开发者向 git 提交项目状态</p></li><li><p>2.提交的状态会存在暂存区</p></li><li><p>3.然后再将暂存区的文件提交到项目工作目录</p></li></ul></li><li><p>3.git 使用前配置</p><ul><li><p>1.配置提交人姓名</p><ul><li>git config --global user.name zhangsan</li></ul></li><li><p>2.配置提交人邮箱</p><ul><li>git config --global user.email <a href="mailto:38781672@qq.com" target="_blank" rel="noreferrer">38781672@qq.com</a></li></ul></li><li><p>3.查看 git 配置信息</p><ul><li>git config --list</li></ul></li><li><p>配置只需执行一次，如果要对配置修改，重复上述命令即可</p></li><li><p>配置文件可找：C:\\Users\\admin 目录下的 .gitconfig 就是 git 配置文件 ，也可以在这里修改</p></li></ul></li><li><p>4.提交步骤</p><ul><li><p>1.初始化 git 仓库</p><ul><li><p>git init</p></li><li><p>目录文件下会生成隐藏的.git 文件夹</p></li></ul></li><li><p>2.查看文件状态</p><ul><li><p>git status</p></li><li><p>显示信息</p><ul><li><p>No commits yet</p><ul><li>当前目录下没有任何提交</li></ul></li><li><p>Untracked files: <code>(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</code></p><ul><li>未被 git 跟踪管理的文件</li></ul></li></ul></li></ul></li><li><p>3.文件列表，追踪管理文件</p><ul><li>git add</li></ul></li><li><p>4.提交信息-向仓库中提交代码</p><ul><li>git commit -m 第一次提交 <ul><li>后面跟的是提交说明</li></ul></li></ul></li><li><p>5.查看提交记录</p><ul><li><p>git log</p></li><li><p>日志说明</p><ul><li><p>commit</p><ul><li>后面是提交的 ID</li></ul></li><li><p>Author:</p><ul><li>后面是提交的用户名和邮箱</li></ul></li><li><p>Date:</p><ul><li>后面跟着的是提交的时间</li></ul></li><li><p>最下面</p><ul><li>提交的说明</li></ul></li></ul></li></ul></li></ul></li><li><p>5.恢复记录(撤销)</p><ul><li><p>git checkout 文件</p><ul><li>恢复 暂存区中的文件到本地目录覆盖</li></ul></li><li><p>git rm --cached 文件</p><ul><li>将文件从暂存区中删除</li></ul></li><li><p>git rest --hard commitID</p><ul><li><p>将 git 仓库中 指定的 更新记录恢复出来，并覆盖暂存区和工作目录</p></li><li><p>先 git log 查看日志 查看并选定 copy commitID，再执行此命令+commitID 的值</p></li></ul></li></ul></li><li><p>6.分支管理</p><ul><li><p>分支详细</p><ul><li><p>主分支(master)</p><ul><li>第一次向 git 仓库中提交更新记录自动产生的一个分支</li></ul></li><li><p>开发分支(develop)</p><ul><li>作为开发的分支，基于 master 分支创建</li></ul></li><li><p>功能分支(feature)</p><ul><li>作为开发具体功能的分支，基于开发分支创建</li></ul></li></ul></li><li><p>分支命令</p><ul><li><p>git branch</p><ul><li>查看分支</li></ul></li><li><p>git branch 分支名称</p><ul><li>创建分支</li></ul></li><li><p>git checkout -b 子分支名</p><ul><li>创建子分支</li></ul></li><li><p>git checkout 分支名称</p><ul><li><p>切换分支</p></li><li><p>切换分支前，当前分支工作区要先提交到仓库中，保证当前分支是完全干净的状态，否则会出现问题(后面的暂时保存和更改命令)</p></li><li><p>暂时保存和更改</p><ul><li><p>存储临时改动</p><ul><li>git stash</li></ul></li><li><p>恢复改动</p><ul><li>git stash pop</li></ul></li><li><p>切换分支前使用</p></li></ul></li></ul></li><li><p>git merge 来源分支</p><ul><li><p>合并分支</p></li><li><p>在主分支上合并开发分支</p></li></ul></li><li><p>git branch -d 分支名称</p><ul><li>删除分支(分支被合并后才允许删除)(-D 强制删除)</li></ul></li><li><p>git push -u origin 分支名</p><ul><li>推送新创建的分支到仓库</li></ul></li><li><p>git push</p></li></ul></li></ul></li><li><p>Git 语法</p><ul><li><p>git flow</p><ul><li><p>命令</p><ul><li><p>git pull</p></li><li><p>git push</p></li><li><p>合并相关</p><ul><li><p>git merge</p></li><li><p>git fetch</p></li><li><p>git diff</p></li></ul></li><li><p>进阶</p><ul><li><p>git submodule</p></li><li><p>git subtree</p></li></ul></li></ul></li><li><p>冲突管理</p><ul><li><p>merge request</p></li><li><p>code review</p></li><li><p>comment</p></li><li><p>rebase</p></li><li><p>reset</p></li></ul></li></ul></li><li><p>git repo</p><ul><li><p>gitlab</p></li><li><p>gittea</p></li><li><p>github</p></li><li><p>gitee</p></li></ul></li></ul></li><li><p>git 工具</p><ul><li><p>git bash</p></li><li><p>GUI</p><ul><li><p>GitHub for Desktop</p></li><li><p>Source Tree</p></li><li><p>TortoiseGit</p></li></ul></li><li><p>IDE</p><ul><li><p>webstorm</p></li><li><p>VSCode</p><ul><li>GitLens</li></ul></li><li><p>Xcode</p></li><li><p>Visual Studio</p><ul><li>Git Integration &amp; GitHub Extension</li></ul></li></ul></li></ul></li><li><p><a href="https://juejin.cn/post/7134487982597210120" target="_blank" rel="noreferrer">git commit 提交规范</a></p></li></ul><h4 id="代码托管服务平台" tabindex="-1">代码托管服务平台 <a class="header-anchor" href="#代码托管服务平台" aria-label="Permalink to &quot;代码托管服务平台&quot;">​</a></h4><ul><li><p>GitHub</p><ul><li><p>代码托管服务和开源社区</p></li><li><p>多人协作开发流程</p><ul><li><p>1.项目经理在自己的计算机中创建本地仓库</p></li><li><p>2.项目经理在 GitHub 中创建远程仓库</p></li><li><p>3.项目经理本地仓库推送到远程仓库</p></li><li><p>4.其他开发人员克隆远程仓库到本地开发</p></li><li><p>5.其他开发人员将本地仓库开发的内容推送到远程仓库</p></li><li><p>6.项目经理和其他开发人员将远程仓库中的最新内容拉到本地</p></li></ul></li><li><p>流程方法</p><ul><li><p>1.创建仓库</p></li><li><p>2.本地推送到远程仓库</p></li><li><p>3.远程仓库克隆到本地</p></li><li><p>子主题 4</p></li><li><p>6.解决冲突</p></li><li><p>7.跨团队协作</p></li><li><p>8.ssh 免登录</p></li><li><p>9.Git 忽略清单</p></li><li><p>10.仓库添加详细说明</p></li></ul></li></ul></li><li><p>码云 Gitee</p></li><li><p>Gitlab</p><ul><li>官网 <ul><li><a href="https://about.gitlab.com/" target="_blank" rel="noreferrer">https://about.gitlab.com/</a></li></ul></li></ul></li><li><p>Bitbucket</p><ul><li>官网 <ul><li><a href="https://bitbucket.org/product/" target="_blank" rel="noreferrer">https://bitbucket.org/product/</a></li></ul></li></ul></li><li><p>Codeberg</p><ul><li>官网 <ul><li><a href="https://codeberg.org/" target="_blank" rel="noreferrer">https://codeberg.org/</a></li></ul></li></ul></li><li><p>sourcehut</p><ul><li>官网 <ul><li><a href="https://sr.ht/" target="_blank" rel="noreferrer">https://sr.ht/</a></li></ul></li></ul></li><li><p>Gitee</p><ul><li>官网 <ul><li><a href="https://gitee.com/" target="_blank" rel="noreferrer">https://gitee.com/</a></li></ul></li></ul></li><li><p>gitrea</p></li></ul><h4 id="git-服务器软件" tabindex="-1">Git 服务器软件 <a class="header-anchor" href="#git-服务器软件" aria-label="Permalink to &quot;Git 服务器软件&quot;">​</a></h4><ul><li><p>开源的 Git 服务器软件</p><ul><li><p><a href="https://about.gitlab.com/install/ce-or-ee/" target="_blank" rel="noreferrer">Gitlab CE</a></p></li><li><p><a href="https://gitea.io/zh-cn/" target="_blank" rel="noreferrer">Gitea</a></p></li><li><p><a href="https://gogs.io/" target="_blank" rel="noreferrer">Gogs</a></p></li><li><p><a href="https://github.com/theonedev/onedev" target="_blank" rel="noreferrer">Onedev</a></p><ul><li><p><a href="https://github.com/theonedev/onedev" target="_blank" rel="noreferrer">https://github.com/theonedev/onedev</a></p></li><li><p>一个自托管的 Git 服务器，类似于开源的 GitHub/GitLab，自带 CI/CD 和看板功能。</p></li></ul></li></ul></li></ul><h4 id="bower" tabindex="-1">Bower <a class="header-anchor" href="#bower" aria-label="Permalink to &quot;Bower&quot;">​</a></h4><ul><li><p>一款包管理器</p><ul><li><p>可以处理前端的静态资源</p></li><li><p>配合 npm 使用</p></li></ul></li></ul><h4 id="fis" tabindex="-1">FIS <a class="header-anchor" href="#fis" aria-label="Permalink to &quot;FIS&quot;">​</a></h4><ul><li><p>百度前端开源工具框架</p></li><li><p>官网</p><ul><li>fis.baidu.com</li></ul></li></ul><h4 id="cs-入门技能树-csdn-net" tabindex="-1"><a href="https://edu.csdn.net/skill/gml/" target="_blank" rel="noreferrer">CS 入门技能树 (csdn.net)</a> <a class="header-anchor" href="#cs-入门技能树-csdn-net" aria-label="Permalink to &quot;[CS 入门技能树 (csdn.net)](https://edu.csdn.net/skill/gml/)&quot;">​</a></h4><h3 id="缺陷控制" tabindex="-1">缺陷控制 <a class="header-anchor" href="#缺陷控制" aria-label="Permalink to &quot;缺陷控制&quot;">​</a></h3><h4 id="概念-1" tabindex="-1">概念 <a class="header-anchor" href="#概念-1" aria-label="Permalink to &quot;概念&quot;">​</a></h4><ul><li>在项目的全生命周期 旨在提高软件的质量</li></ul><h4 id="方法论" tabindex="-1">方法论 <a class="header-anchor" href="#方法论" aria-label="Permalink to &quot;方法论&quot;">​</a></h4><ul><li><p>常见问题</p><ul><li><p>需求变更频繁</p></li><li><p>无代码 Review</p></li><li><p>团队各自为战</p></li><li><p>工期太紧</p></li></ul></li><li><p>最佳实践</p><ul><li><p>路径</p><ul><li><p>质量</p><ul><li><p>预防</p></li><li><p>监测</p></li></ul></li><li><p>成本</p><ul><li><p>人工</p></li><li><p>时间</p></li><li><p>资源投入</p></li></ul></li><li><p>进度</p></li></ul></li><li><p>分析原因</p></li><li><p>解决方法</p><ul><li><p>进度</p><ul><li><p>赶工</p></li><li><p>资源协调</p></li><li><p>客户沟通</p></li><li><p>压缩工期</p></li></ul></li><li><p>质量</p><ul><li><p>改进</p></li><li><p>返工</p></li><li><p>沟通</p></li></ul></li><li><p>成本</p></li></ul></li></ul></li></ul><h4 id="工作流" tabindex="-1">工作流 <a class="header-anchor" href="#工作流" aria-label="Permalink to &quot;工作流&quot;">​</a></h4><ul><li><p>质量管理</p><ul><li><p>需求阶段</p><ul><li><p>沟通</p></li><li><p>形成文档</p></li><li><p>客户确认</p></li></ul></li><li><p>开发阶段</p><ul><li><p>Lint 工具</p></li><li><p>Code Review</p></li><li><p>规范</p><ul><li><p>运维规范</p></li><li><p>开发规范</p></li></ul></li><li><p>测试</p><ul><li><p>编写测试用例</p></li><li><p>自动化测试</p></li></ul></li></ul></li><li><p>运维阶段</p><ul><li><p>监控</p></li><li><p>日志</p></li><li><p>更新迭代</p><ul><li><p>责任到人</p></li><li><p>功能到点</p></li><li><p>时间设限</p></li></ul></li></ul></li></ul></li><li><p>进度管理</p><ul><li><p>需求阶段</p><ul><li><p>从下至上分析</p></li><li><p>类比分析</p></li><li><p>经验分析</p></li></ul></li><li><p>开发阶段</p></li><li><p>运维阶段</p></li></ul></li></ul><h4 id="工具-1" tabindex="-1">工具 <a class="header-anchor" href="#工具-1" aria-label="Permalink to &quot;工具&quot;">​</a></h4><ul><li><p>代码类</p><ul><li><p>ESLint</p></li><li><p>JSLint</p></li><li><p>StyleLint</p></li></ul></li><li><p>流程类</p><ul><li><p>禅道</p></li><li><p>Jira</p></li><li><p>Redmine</p></li></ul></li><li><p>工具类</p><ul><li><p>teambition</p></li><li><p>Trello</p><ul><li>轻量</li></ul></li><li><p>worktile</p></li><li><p>钉钉</p></li><li><p>石墨</p></li></ul></li></ul><h3 id="自动化测试流程" tabindex="-1">自动化测试流程 <a class="header-anchor" href="#自动化测试流程" aria-label="Permalink to &quot;自动化测试流程&quot;">​</a></h3><h4 id="文档管理分类" tabindex="-1">文档管理分类 <a class="header-anchor" href="#文档管理分类" aria-label="Permalink to &quot;文档管理分类&quot;">​</a></h4><ul><li><p>单元测试</p></li><li><p>组件测试(集成测试)</p></li><li><p>e2e 测试</p></li></ul><h4 id="framework" tabindex="-1">framework <a class="header-anchor" href="#framework" aria-label="Permalink to &quot;framework&quot;">​</a></h4><ul><li><p>Mocha+Chai</p></li><li><p>jasmine</p></li><li><p>jest</p></li><li><p>Karma</p></li></ul><h4 id="工具-2" tabindex="-1">工具 <a class="header-anchor" href="#工具-2" aria-label="Permalink to &quot;工具&quot;">​</a></h4><ul><li><p>断言</p><ul><li><p>Chai</p></li><li><p>Unexprected</p></li></ul></li><li><p>快照测试</p></li><li><p>覆盖率</p><ul><li><p>Istanbul</p></li><li><p>Jest</p></li><li><p>Blanket</p></li><li><p>codecov(展示)</p></li></ul></li><li><p>e2e</p><ul><li><p>Cypress</p></li><li><p>nightwatch</p></li><li><p>testcafe</p></li></ul></li></ul><h3 id="文档管理" tabindex="-1">文档管理 <a class="header-anchor" href="#文档管理" aria-label="Permalink to &quot;文档管理&quot;">​</a></h3><h4 id="文档分类" tabindex="-1">文档分类 <a class="header-anchor" href="#文档分类" aria-label="Permalink to &quot;文档分类&quot;">​</a></h4><ul><li><p>接口文档</p></li><li><p>项目文档</p><ul><li><p>使用说明</p></li><li><p>功能介绍</p></li></ul></li><li><p>需求文档</p><ul><li><p>流程图</p></li><li><p>原型图</p></li><li><p>详细需求</p></li><li><p>项目规划</p></li><li><p>成本估算</p></li></ul></li><li><p>标准类文档</p><ul><li><p>代码规范</p></li><li><p>运维规范</p></li><li><p>测试规范</p></li></ul></li></ul><h4 id="文档管理工具" tabindex="-1">文档管理工具 <a class="header-anchor" href="#文档管理工具" aria-label="Permalink to &quot;文档管理工具&quot;">​</a></h4><h5 id="协同工具" tabindex="-1">协同工具 <a class="header-anchor" href="#协同工具" aria-label="Permalink to &quot;协同工具&quot;">​</a></h5><ul><li><p>国外</p><ul><li><p>Google Docs</p></li><li><p>Ofiice 365</p></li><li><p>Alfresco</p></li><li><p>LogiclDOC CE</p></li></ul></li><li><p>国内</p><ul><li><p>WPS 云</p></li><li><p>语雀</p></li><li><p>石墨文档</p></li><li><p>有道云</p></li><li><p>一起写</p></li><li><p>其他</p></li></ul></li></ul><h5 id="接口文档工具" tabindex="-1">接口文档工具 <a class="header-anchor" href="#接口文档工具" aria-label="Permalink to &quot;接口文档工具&quot;">​</a></h5><ul><li><p>Showdoc</p></li><li><p>elLinker</p></li><li><p>MinDoc</p></li><li><p>apizza</p></li></ul><h5 id="功能分类" tabindex="-1">功能分类 <a class="header-anchor" href="#功能分类" aria-label="Permalink to &quot;功能分类&quot;">​</a></h5><ul><li><p>协同</p></li><li><p>版本控制</p></li><li><p>在线编辑</p></li><li><p>文件保存</p></li><li><p>分享</p></li><li><p>本地化部署</p></li><li><p>其他</p></li></ul><h5 id="其他-1" tabindex="-1">其他 <a class="header-anchor" href="#其他-1" aria-label="Permalink to &quot;其他&quot;">​</a></h5><ul><li><p>gitbook</p></li><li><p>blog</p></li><li><p>注释产出 Api 文档</p></li><li><p>mock</p><ul><li><p>RAP</p></li><li><p>APIJSON</p></li></ul></li></ul><h2 id="打包构建工具" tabindex="-1">打包构建工具 <a class="header-anchor" href="#打包构建工具" aria-label="Permalink to &quot;打包构建工具&quot;">​</a></h2><h3 id="webpack-1" tabindex="-1">webpack <a class="header-anchor" href="#webpack-1" aria-label="Permalink to &quot;webpack&quot;">​</a></h3><h3 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;vite&quot;">​</a></h3><h3 id="turbopack" tabindex="-1">Turbopack <a class="header-anchor" href="#turbopack" aria-label="Permalink to &quot;Turbopack&quot;">​</a></h3><ul><li><p>介绍</p><ul><li><p>Turbopack 是建立在 Turbo 之上的，Turbo 是基于 Rust 的开源、增量记忆化框架</p></li><li><p>Turbopack 建立在新的增量体系结构上，以获得最快的开发体验。在大型应用中，它展示出了 10 倍于 Vite 的速度，700 倍于 Webpack 的速度。在更大的应用中，差异更加巨大 —— 通常比 Vite 快 20 倍。</p></li><li><p>Turbopack 在开发环境只打包需要的最小资产，所以启动飞快。在一个 3000 个模块的应用里，Turbopack 只花了 1.8 秒启动，Vite 花了 11.4 秒</p></li></ul></li><li><p>特性</p><ul><li><p>1、天生增量，构建过的绝不重新构建</p></li><li><p>2、生态友好，支持 TypeScript、JSX、CSS、CSS Modules、WebAssembly 等</p></li><li><p>3、热更极快，比 Vite 快 10 倍</p></li><li><p>4、原生支持 RSC（React Server Components）</p></li><li><p>5、支持多环境，比如 Browser、Server、Edge、SSR、RSC</p></li><li><p>6、支持 NextJS</p></li></ul></li><li><p>为啥快</p><ul><li><p>1、基于 Rust 二进制语言</p></li><li><p>2、内置增量计算引擎。该引擎结合 Turborepo 以及 Google 的 Bazel 的增量计算的创新，可以将缓存提高到单个函数的水平</p></li><li><p>3、缓存。但现在只支持内存缓存，未来会支持持久化缓存，存文件系统或远程服务器</p></li><li><p>4、基于请求的按需编译。</p></li></ul></li><li><p>网址</p><ul><li><p>官网</p><ul><li><a href="https://turbo.build/repo" target="_blank" rel="noreferrer">https://turbo.build/repo</a></li></ul></li><li><p>github</p><ul><li><a href="https://github.com/vercel/turbo" target="_blank" rel="noreferrer">https://github.com/vercel/turbo</a></li></ul></li><li><p>Turbo 的讲解</p><ul><li><a href="https://turbo.build/pack/docs/core-concepts" target="_blank" rel="noreferrer">https://turbo.build/pack/docs/core-concepts</a></li></ul></li><li><p>Vercel Remote Caching</p><ul><li><a href="https://vercel.com/docs/concepts/monorepos/remote-caching" target="_blank" rel="noreferrer">https://vercel.com/docs/concepts/monorepos/remote-caching</a></li></ul></li></ul></li></ul><h3 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-label="Permalink to &quot;esbuild&quot;">​</a></h3><h2 id="其他项目工具" tabindex="-1">其他项目工具 <a class="header-anchor" href="#其他项目工具" aria-label="Permalink to &quot;其他项目工具&quot;">​</a></h2><h3 id="项目管理-monorepo-方式" tabindex="-1">项目管理(Monorepo)方式 <a class="header-anchor" href="#项目管理-monorepo-方式" aria-label="Permalink to &quot;项目管理(Monorepo)方式&quot;">​</a></h3><ul><li><p>什么是 monorepo ?</p><ul><li><p>Monorepo 是一种项目管理方式，在 Monorepo 之前，代码仓库管理方式是 MultiRepo，即每个项目都对应着一个单独的代码仓库每个项目进行分散管理这就会导致许多弊端，例如可能每个项目的基建以及工具库都是差不多的，基础代码的重复复用问题等等...</p></li><li><p>Monorepo 就是把多个项目放在一个仓库里面</p></li></ul></li><li><p>Turborepo</p><ul><li><p>介绍</p><ul><li><p>TurboRepo 是构建 Javascript，Typescript 的 monorepo 高性能构建系统,Turborepo 抽象出所有烦人的配置、脚本和工具，减少项目配置的复杂性，可以让我们专注于业务的开发</p></li><li><p>用于 JavaScript 和 TypeScript 代码库的高性能构建系统。</p></li></ul></li><li><p>网址</p><ul><li><p>官网</p><ul><li><a href="https://turborepo.org/" target="_blank" rel="noreferrer">https://turborepo.org/</a></li></ul></li><li><p>github</p><ul><li><a href="https://github.com/vercel/turborepo" target="_blank" rel="noreferrer">https://github.com/vercel/turborepo</a></li></ul></li></ul></li><li><p><a href="https://juejin.cn/post/7129267782515949575" target="_blank" rel="noreferrer">🚀Turborepo：发布当月就激增 3.8k Star，这款超神的新兴 Monorepo 方案，你不打算尝试下吗？ - 掘金 (juejin.cn)</a></p></li></ul></li><li><p>Bit</p><ul><li><p>用于组件驱动开发的工具链</p></li><li><p>网址</p><ul><li><p>官网</p><ul><li><a href="https://bit.dev/" target="_blank" rel="noreferrer">https://bit.dev/</a></li></ul></li><li><p>github</p><ul><li><a href="https://github.com/teambit/bit" target="_blank" rel="noreferrer">https://github.com/teambit/bit</a></li></ul></li></ul></li></ul></li><li><p>Rush</p><ul><li><p>一个可扩展的 web 单仓库管理器。</p></li><li><p>网址</p><ul><li><p>官网</p><ul><li><a href="https://rushjs.io/" target="_blank" rel="noreferrer">https://rushjs.io/</a></li></ul></li><li><p>github</p><ul><li><a href="https://github.com/microsoft/rushstack" target="_blank" rel="noreferrer">https://github.com/microsoft/rushstack</a></li></ul></li></ul></li></ul></li><li><p>Nx</p><ul><li><p>具有一流的 monorepo 支持和强大集成的下一代构建系统。</p></li><li><p>网址</p><ul><li><p>官网</p><ul><li><a href="https://nx.dev/" target="_blank" rel="noreferrer">https://nx.dev/</a></li></ul></li><li><p>github</p><ul><li><a href="https://github.com/nrwl/nx" target="_blank" rel="noreferrer">https://github.com/nrwl/nx</a></li></ul></li></ul></li></ul></li><li><p>Lernajs</p><ul><li><p>用于管理包含多个软件包的项目</p></li><li><p>网址</p><ul><li><p>官网</p><ul><li><a href="https://www.lernajs.cn/" target="_blank" rel="noreferrer">https://www.lernajs.cn/</a></li></ul></li><li><p>github</p></li></ul></li></ul></li></ul><h3 id="项目代码风格指南" tabindex="-1">项目代码风格指南 <a class="header-anchor" href="#项目代码风格指南" aria-label="Permalink to &quot;项目代码风格指南&quot;">​</a></h3><ul><li><p>京东凹凸实验室前端代码规范</p><ul><li><p>介绍</p><ul><li><p>对比腾讯的代码规范，我更推荐凹凸实验室的代码规范，比较齐全。</p></li><li><p>HTML 规范</p><ul><li>基于 W3C、苹果开发者等官方文档，并结合团队日常业务需求以及团队在日常开发过程中总结提炼出的经验而约定。</li></ul></li><li><p>图片规范</p><ul><li>了解各种图片格式特性，根据特性制定图片规范，包括但不限于图片的质量约定、图片引入方式、图片合并处理等。</li></ul></li><li><p>CSS 规范</p><ul><li>统一团队 CSS 代码书写和 SASS 预编译语言的语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。</li></ul></li><li><p>命名规范</p><ul><li>从 “目录命名”、“图片命名”、“ClassName” 命名等层面约定规范团队的命名习惯，增强团队代码的可读性。</li></ul></li><li><p>JavaScript 规范</p><ul><li>统一团队的 JS 语法风格和书写习惯，减少程序出错的概率，其中也包含了 ES6 的语法规范和最佳实践。</li></ul></li></ul></li><li><p>网址</p><ul><li><p>官网</p><ul><li><a href="https://guide.aotu.io/index.html" target="_blank" rel="noreferrer">https://guide.aotu.io/index.html</a></li></ul></li><li><p>github</p><ul><li><a href="https://github.com/o2team/guide" target="_blank" rel="noreferrer">https://github.com/o2team/guide</a></li></ul></li></ul></li></ul></li><li><p>腾讯前端代码规范</p><ul><li><p>网址</p><ul><li><p><a href="https://tgideas.qq.com/doc/frontend/spec/common/" target="_blank" rel="noreferrer">页面规范 · TGideas 文档库 (qq.com)</a></p></li><li><p><a href="https://tgideas.qq.com/doc/index.html" target="_blank" rel="noreferrer">TGideas 文档库 (qq.com)</a></p></li></ul></li><li><p>介绍</p><ul><li><p>PC 端专题：快速上手、文件目录、页面头部、通用 title、通用 foot、统计代码、兼容测试</p></li><li><p>移动端专题：快速上手、文件目录、页面头部、REM 布局、通用 foot、统计代码、分享组件、兼容要求</p></li></ul></li></ul></li><li><p>百度前端代码规范文档</p><ul><li><p>介绍</p><ul><li><p>JavaScript 编码规范、HTML、CSS、Less、E-JSON 数据传输标准、模块和加载器、包结构、项目目录结构、图表库标准、react 编码规范</p></li><li><p>比如：缩进</p></li><li><p>[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。</p></li><li><p>[强制] switch 下的 case 和 default 必须增加一个缩进层级。</p></li></ul></li><li><p>网址</p><ul><li><p><a href="https://github.com/ecomfe/spec" target="_blank" rel="noreferrer">https://github.com/ecomfe/spec</a></p></li><li><p><a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md" target="_blank" rel="noreferrer">https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md</a></p></li></ul></li></ul></li><li><p>网易编码规范</p><ul><li><p>介绍</p><ul><li><p>CSS 规范：一系列规则和方法，帮助你架构并管理好样式</p></li><li><p>HTML 规范：一系列建议和方法，帮助你搭建简洁严谨的结构</p></li><li><p>工程师规范：前端页面开发工程师的工作流程和团队协作规范</p></li><li><p>但是并不止于此，还有更多：</p></li><li><p><img src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/preview/boxcnwlmAWmnPncFjgnDZh9hKyh?preview_type=16" alt="img"></p></li></ul></li><li><p>网址</p><ul><li><a href="http://nec.netease.com/standard" target="_blank" rel="noreferrer">http://nec.netease.com/standard</a></li></ul></li></ul></li><li><p>谷歌开源项目风格指南</p><ul><li><p>开源地址：</p><ul><li><p><a href="https://github.com/google/styleguide" target="_blank" rel="noreferrer">https://github.com/google/styleguide</a></p></li><li><p><a href="https://google.github.io/styleguide/" target="_blank" rel="noreferrer">Google Style Guides | styleguide</a></p></li><li><p><a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noreferrer">Google JavaScript Style Guide</a></p></li></ul></li></ul></li><li><p>JavaScript Standard Style</p><ul><li><p>除很多公司组织外，很多个人也在项目中使用的规范。</p></li><li><p><a href="https://github.com/standard/standard" target="_blank" rel="noreferrer">https://github.com/standard/standard</a></p></li></ul></li><li><p>Airbnb 公司 JavaScript 风格指南</p><ul><li><p>介绍</p><ul><li>包含了：类型、对象、数组、字符串、函数、属性、变量、提升、比较运算符 &amp; 等号、块、注释、空白、逗号、分号、类型转化、命名规则、存取器、构造函数、事件、模块、jQuery、ECMAScript 5 兼容性、测试、性能、资源、JavaScript 风格指南说明</li></ul></li><li><p>网址</p><ul><li><p><a href="https://github.com/airbnb/javascript" target="_blank" rel="noreferrer">https://github.com/airbnb/javascript</a></p></li><li><p><a href="https://airbnb.io/javascript/" target="_blank" rel="noreferrer">Airbnb JavaScript Style Guide() { | Airbnb JavaScript Style Guide</a></p></li><li><p>中文版</p><ul><li><a href="https://github.com/BingKui/javascript-zh" target="_blank" rel="noreferrer">https://github.com/BingKui/javascript-zh</a></li></ul></li></ul></li></ul></li><li><p>阿里巴巴</p><ul><li><p>eslint-config-airbnb 翻译版</p></li><li><p>包含类型、对象、数组、字符串、函数、属性、变量、提升、比较运算符 &amp; 等号、块、注释、空白、逗号、分号、类型转化、命名规则、存取器、构造函数、事件、模块、jQuery、ECMAScript 5 兼容性、测试、性能、资源、JavaScript 风格指南说明.</p></li><li><p><a href="https://github.com/lin-123/javascript" target="_blank" rel="noreferrer">https://github.com/lin-123/javascript</a></p></li></ul></li><li><p>Vue 官方代码风格指南</p><ul><li><p>介绍</p><ul><li><p>这里是官方的 Vue 特有代码的风格指南。</p></li><li><p>如果在工程中使用 Vue，为了回避错误、小纠结和反模式，该指南是份不错的参考。</p></li><li><p>不过我们也不确信风格指南的所有内容对于所有的团队或工程都是理想的。</p></li><li><p>所以根据过去的经验、周围的技术栈、个人价值观做出有意义的偏差是可取的。</p></li></ul></li><li><p><a href="https://github.com/ecomfe/spec" target="_blank" rel="noreferrer">https://github.com/ecomfe/spec</a></p></li></ul></li><li><p>阮一峰的 ES6 编程风格</p><ul><li><p>介绍</p><ul><li>如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。</li></ul></li><li><p><a href="https://es6.ruanyifeng.com/#docs/style" target="_blank" rel="noreferrer">编程风格 - ECMAScript 6 入门 (ruanyifeng.com)</a></p></li></ul></li><li><p>Bootstrap 编码风格</p><ul><li><p>介绍</p><ul><li><p>内容包含 HTML 和 CSS。</p></li><li><p>HTML</p><ul><li>语法、HTML5 doctype、语言属性、IE 兼容模式、字符编码、引入 CSS 和 JavaScript 文件、实用为王、属性顺序、布尔型属性、减少标签的数量、JavaScript 生成的标签。</li></ul></li><li><p>CSS</p><ul><li>语法、声明顺序、不要使用 <a href="https://github.com/import" target="_blank" rel="noreferrer">@import</a>、媒体查询（Media query）的位置、带前缀的属性、单行规则声明、简写形式的属性声明、Less 和 Sass 中的嵌套、Less 和 Sass 中的操作符、注释、class 命名、选择器、代码组织。</li></ul></li></ul></li><li><p>网址</p><ul><li><a href="https://codeguide.bootcss.com/" target="_blank" rel="noreferrer">https://codeguide.bootcss.com/</a></li></ul></li></ul></li></ul><h3 id="风格检查美化工具" tabindex="-1">风格检查美化工具 <a class="header-anchor" href="#风格检查美化工具" aria-label="Permalink to &quot;风格检查美化工具&quot;">​</a></h3><ul><li><p>ESLint</p><ul><li><p>介绍</p><ul><li><p>目前绝大多数前端项目都会用到的 可组装的 JavaScrip t 和 JSX 检查工具。</p></li><li><p>发现问题</p><ul><li>ESLint 静态分析您的代码以快速发现问题。ESLint 内置于大多数文本编辑器中，您可以将 ESLint 作为持续集成管道的一部分运行。</li></ul></li><li><p>自动修复</p><ul><li>ESLint 发现的许多问题都可以自动修复。ESLint 修复程序可识别语法，因此您不会遇到传统的查找和替换算法引入的错误。</li></ul></li><li><p>定制</p><ul><li>预处理代码，使用自定义解析器，并编写与 ESLint 内置规则一起使用的自己的规则。您可以自定义 ESLint，使其完全按照项目所需的方式工作。</li></ul></li></ul></li><li><p>网址</p><ul><li><p>ESLint: <a href="https://eslint.org/" target="_blank" rel="noreferrer">https://eslint.org/</a></p></li><li><p>ESLint 中文网：<a href="https://eslint.bootcss.com/" target="_blank" rel="noreferrer">https://eslint.bootcss.com/</a></p></li></ul></li></ul></li><li><p>Prettier</p><ul><li><p>介绍</p><ul><li><p>Prettier 是一个“有主见”的代码格式化工具。</p></li><li><p>简而言之，这个工具能够使输出代码保持风格一致。</p></li><li><p>也是目前绝大多数前端项目都会用到的哦。</p></li></ul></li><li><p>网址</p><ul><li><p>github</p><ul><li><a href="https://github.com/prettier/prettier" target="_blank" rel="noreferrer">https://github.com/prettier/prettier</a></li></ul></li><li><p>官网</p><ul><li><a href="https://prettier.io/" target="_blank" rel="noreferrer">https://prettier.io/</a></li></ul></li></ul></li></ul></li></ul><h3 id="实用-gitignore-文件模版-gitignore" tabindex="-1">实用 .gitignore 文件模版：gitignore <a class="header-anchor" href="#实用-gitignore-文件模版-gitignore" aria-label="Permalink to &quot;实用 .gitignore 文件模版：gitignore&quot;">​</a></h3><ul><li><p>介绍</p><ul><li>.gitignore 文件会告诉 git 要忽略项目中的哪些文件或文件夹。gitignore 是 GitHub 官方提供的 .gitignore 文件模版，收录了大量实用 .gitignore 模版，而该项目也是目前拥有 125k star、70.1 fork，是个实打实的明星项目。</li></ul></li><li><p>网址</p><ul><li><a href="https://github.com/github/gitignore" target="_blank" rel="noreferrer">https://github.com/github/gitignore</a></li></ul></li></ul><h3 id="前端工程化工具-feflow" tabindex="-1">前端工程化工具 Feflow <a class="header-anchor" href="#前端工程化工具-feflow" aria-label="Permalink to &quot;前端工程化工具 Feflow&quot;">​</a></h3><ul><li><p>介绍</p><ul><li>Feflow 是腾讯开源的用于提升工程效率的前端工作流和规范工具。目前已经在 NOW 直播、花样直播、花样交友、手 Q 附近、群视频、群送礼、回音、应用宝、企鹅号等业务广泛使用。</li></ul></li><li><p>网址</p><ul><li><p>github</p><ul><li><a href="https://github.com/Tencent/feflow" target="_blank" rel="noreferrer">https://github.com/Tencent/feflow</a></li></ul></li><li><p>官网</p><ul><li><a href="http://feflowjs.com/" target="_blank" rel="noreferrer">feflowjs.com/</a></li></ul></li></ul></li></ul><h3 id="javascript-obfuscator-tool-javascript-代码混淆工具" tabindex="-1">JavaScript Obfuscator Tool：JavaScript 代码混淆工具 <a class="header-anchor" href="#javascript-obfuscator-tool-javascript-代码混淆工具" aria-label="Permalink to &quot;JavaScript Obfuscator Tool：JavaScript 代码混淆工具&quot;">​</a></h3><ul><li><p>介绍</p><ul><li>一个强大的 JavaScript 和 Node 混淆器.js</li></ul></li><li><p>网址</p><ul><li><p>github</p><ul><li><a href="https://github.com/javascript-obfuscator/javascript-obfuscator" target="_blank" rel="noreferrer">https://github.com/javascript-obfuscator/javascript-obfuscator</a></li></ul></li><li><p>官网</p><ul><li><a href="https://obfuscator.io/" target="_blank" rel="noreferrer">https://obfuscator.io/</a></li></ul></li></ul></li></ul><h2 id="项目架构" tabindex="-1">项目架构 <a class="header-anchor" href="#项目架构" aria-label="Permalink to &quot;项目架构&quot;">​</a></h2><h3 id="ui" tabindex="-1">UI <a class="header-anchor" href="#ui" aria-label="Permalink to &quot;UI&quot;">​</a></h3><h3 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h3><ul><li><p>Git 命令</p></li><li><p>Node 环境</p></li><li><p>其他依赖环境</p></li></ul><h3 id="框架技术栈" tabindex="-1">框架技术栈 <a class="header-anchor" href="#框架技术栈" aria-label="Permalink to &quot;框架技术栈&quot;">​</a></h3><h3 id="动画" tabindex="-1">动画 <a class="header-anchor" href="#动画" aria-label="Permalink to &quot;动画&quot;">​</a></h3><h3 id="项目架构-1" tabindex="-1">项目架构 <a class="header-anchor" href="#项目架构-1" aria-label="Permalink to &quot;项目架构&quot;">​</a></h3><ul><li><p>跨域方案</p></li><li><p>目录规范</p></li><li><p>CSS 模块化</p></li><li><p>常用插件</p></li><li><p>路由封装</p></li><li><p>路由预加载和懒加载</p></li><li><p>缓存封装</p></li><li><p>接口请求封装</p></li><li><p>错误捕捉</p></li><li><p>打包构建优化</p><ul><li><p>性能</p></li><li><p>js 压缩</p></li><li><p>开启 gzip 压缩</p></li></ul></li><li><p>性能优化</p></li></ul><h3 id="其他知识" tabindex="-1">其他知识 <a class="header-anchor" href="#其他知识" aria-label="Permalink to &quot;其他知识&quot;">​</a></h3><ul><li><p>开发调试技巧</p></li><li><p>接口代理</p></li><li><p>Git 配置</p></li><li><p>服务器配置，Nginx 配置</p></li><li><p>项目部署</p><ul><li><p>服务器购买和配置</p></li><li><p>Nginx 安装和配置</p></li><li><p>Node 环境安装和配置</p></li><li><p>项目部署和二级域名配置</p></li></ul></li></ul><h2 id="项目开发-plugin" tabindex="-1">项目开发 Plugin <a class="header-anchor" href="#项目开发-plugin" aria-label="Permalink to &quot;项目开发 Plugin&quot;">​</a></h2><p>有效利用 esLint、prettier、husky 以及 commitizen，因为使用了 TypeScript+ esLint 所以对代码的书写规范、类型、接口的使用必须有很高的要求，如果使用了不当的类型或者书写不规范，第一会导致代码提交到远程再到其他同学本地，会出现很多的 error，对这种情况，我们可以在 git 提交的钩子中进行代码的 per-commit，在这个阶段，主要是进行 lint&amp;typecheck 操作，而且在进行 typecheck 的时候一定要加 noEmit，禁止有 error 的代码提交，同时使用 commitizen 规范 git commit 的信息，遵守 augular 规范。</p><h2 id="模块化的导出和导入的区别" tabindex="-1">模块化的导出和导入的区别 <a class="header-anchor" href="#模块化的导出和导入的区别" aria-label="Permalink to &quot;模块化的导出和导入的区别&quot;">​</a></h2><ul><li><p><a href="https://blog.csdn.net/qq_35087256/article/details/84144647" target="_blank" rel="noreferrer">require 和 import 区别_邵天宇 Soy 的博客-CSDN 博客_import 和 require 的区别</a></p></li><li><p><a href="https://www.jianshu.com/p/a38cf1262cd5" target="_blank" rel="noreferrer">module.exports、require 和 export、import 的关系 - 简书 (jianshu.com)</a></p></li><li><p><a href="https://blog.csdn.net/qq_34301722/article/details/85416866" target="_blank" rel="noreferrer">如何理解 import、require、export、module.export_飞不动的笨鸟的博客-CSDN 博客</a></p></li></ul><h2 id="mock-数据方案" tabindex="-1">Mock 数据方案 <a class="header-anchor" href="#mock-数据方案" aria-label="Permalink to &quot;Mock 数据方案&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7026165301255340045" target="_blank" rel="noreferrer">【前端 MOCK 数据】这么好的工具为啥不用啊？🚀 - 掘金 (juejin.cn)</a></li></ul>`,1118)]))}const q=a(B,[["render",y]]);export{f as __pageData,q as default};
