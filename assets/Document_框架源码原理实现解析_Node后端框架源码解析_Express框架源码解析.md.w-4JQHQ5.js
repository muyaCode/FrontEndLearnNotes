import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/image-20240303010330472.DS2sq_-n.png",o="/FrontEndLearnNotes/assets/1ea2b7519c414aa38d6d3200de84ea03tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.DzDIdadk.webp",r="/FrontEndLearnNotes/assets/d10d1ff37311419b801be82dc9136183tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.ZPMxbpTp.webp",t="/FrontEndLearnNotes/assets/c4b7323996a346cdb506a0ed724c9b45tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.ByHZbKK6.webp",c="/FrontEndLearnNotes/assets/284c90293365494ea44e8b213f70278dtplv-k3u1fbpfcp-zoom-in-crop-mark1512000.DGCEd-Eh.webp",B="/FrontEndLearnNotes/assets/125051f73d9248cf8afb2258104ae8a0tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.dhkUBx2C.webp",m=JSON.parse('{"title":"Express 框架源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"Document/框架源码原理实现解析/Node后端框架源码解析/Express框架源码解析.md","filePath":"Document/框架源码原理实现解析/Node后端框架源码解析/Express框架源码解析.md","lastUpdated":1750954157000}'),y={name:"Document/框架源码原理实现解析/Node后端框架源码解析/Express框架源码解析.md"};function i(F,s,b,u,A,C){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="express-框架源码解析" tabindex="-1">Express 框架源码解析 <a class="header-anchor" href="#express-框架源码解析" aria-label="Permalink to &quot;Express 框架源码解析&quot;">​</a></h1><h2 id="express-框架源码下载和源码目录" tabindex="-1">Express 框架源码下载和源码目录 <a class="header-anchor" href="#express-框架源码下载和源码目录" aria-label="Permalink to &quot;Express 框架源码下载和源码目录&quot;">​</a></h2><p>Express 框架源码：<a href="https://github.com/expressjs/express" target="_blank" rel="noreferrer">https://github.com/expressjs/express</a></p><p>源码如下：</p><p><img src="'+e+`" alt="image-20240303010330472"></p><p>Express 框架的源码结构如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">lib目录下</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> application.js</span><span style="color:#7F848E;font-style:italic;">  # 创建Express应用后可直接调用的api均在此处（核心）</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> express.js</span><span style="color:#7F848E;font-style:italic;">  # 入口文件，创建一个Express应用</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> request.js</span><span style="color:#7F848E;font-style:italic;">  # 丰富了http中request实例上的功能</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> response.js</span><span style="color:#7F848E;font-style:italic;">  # 丰富了http中response实例上的功能</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> utils.js</span><span style="color:#7F848E;font-style:italic;">  # 工具函数</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> view.js</span><span style="color:#7F848E;font-style:italic;">  # 与模板渲染相关的内容</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> router</span><span style="color:#7F848E;font-style:italic;">  # 与路由相关的内容（核心）</span></span>
<span class="line"><span style="color:#61AFEF;">    ├──</span><span style="color:#98C379;"> index.js</span></span>
<span class="line"><span style="color:#61AFEF;">    ├──</span><span style="color:#98C379;"> layer.js</span></span>
<span class="line"><span style="color:#61AFEF;">    └──</span><span style="color:#98C379;"> route.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> middleware</span><span style="color:#7F848E;font-style:italic;">  # 与中间件相关的内容</span></span>
<span class="line"><span style="color:#61AFEF;">    ├──</span><span style="color:#98C379;"> init.js</span><span style="color:#7F848E;font-style:italic;">  # 会将新增加在request和response新增加的功能挂载到原始请求的request和response的原型上</span></span>
<span class="line"><span style="color:#61AFEF;">    └──</span><span style="color:#98C379;"> query.js</span><span style="color:#7F848E;font-style:italic;">  # 将请求url中的query部分添加到request的query属性上</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="express-项目开发工作流程——基本概念和原理" tabindex="-1">Express 项目开发工作流程——基本概念和原理 <a class="header-anchor" href="#express-项目开发工作流程——基本概念和原理" aria-label="Permalink to &quot;Express 项目开发工作流程——基本概念和原理&quot;">​</a></h2><h3 id="express-框架的基本概念和原理" tabindex="-1">Express 框架的基本概念和原理 <a class="header-anchor" href="#express-框架的基本概念和原理" aria-label="Permalink to &quot;Express 框架的基本概念和原理&quot;">​</a></h3><p>Express 框架的核心概念包括：</p><ul><li>应用</li><li>中间件</li><li>路由</li><li>请求</li><li>响应</li></ul><p>Express 框架的基本原理是：</p><ul><li>使用中间件处理请求</li><li>使用路由匹配请求</li><li>使用回调函数处理请求</li></ul><h3 id="express-框架的工作流程" tabindex="-1">Express 框架的工作流程 <a class="header-anchor" href="#express-框架的工作流程" aria-label="Permalink to &quot;Express 框架的工作流程&quot;">​</a></h3><ol><li>创建一个 Express 应用。</li><li>使用 use()方法注册中间件。</li><li>使用 get()、post()、put()、delete()等方法注册路由。</li><li>使用 listen()方法启动服务器。</li></ol><p><strong>当一个 HTTP 请求到来时，Express 框架会按照以下步骤进行处理：</strong></p><ol><li>遍历所有中间件，并执行所有匹配的中间件。</li><li>遍历所有路由，并找到第一个匹配的路由。</li><li>执行路由的回调函数。</li><li>将响应发送回客户端。</li></ol><h2 id="express-源码解析" tabindex="-1">Express 源码解析 <a class="header-anchor" href="#express-源码解析" aria-label="Permalink to &quot;Express 源码解析&quot;">​</a></h2><h3 id="文件方法解析" tabindex="-1">文件方法解析 <a class="header-anchor" href="#文件方法解析" aria-label="Permalink to &quot;文件方法解析&quot;">​</a></h3><ul><li>1.middleware(中间件)下主要有 init.js 和 query.js，init.js 的作用是初始化 request，response，而 query.js 中间件的作用是格式化 url，将 url 中的 rquest 参数剥离,储存到 req.query 中；</li><li>2.router 文件夹为 router 组件，包括 index.js、route.js 和 layer.js，router 组件负责中间件的插入和链式执行，具体将在下面讲解；</li><li>3.express.js（入口文件）和 application.js 是主要的框架文件，暴露了 express 的 api；</li><li>4.request.js 和 response.js 提供了一些方法丰富 request 和 response 实例的功能,如 req.is、req.get、req.params、req.originalUrl 等；</li><li>5.view.js 封装了模板渲染引擎，通过 res.render()调用引擎渲染网页。</li></ul><h3 id="抽象接口" tabindex="-1">抽象接口 <a class="header-anchor" href="#抽象接口" aria-label="Permalink to &quot;抽象接口&quot;">​</a></h3><p>对源码的目录结构有了一定了解，下面利用 UML 类图对该系统各个模块的依赖关系进一步了解，为后续源码分析打好基础。</p><p><img src="`+o+'" alt="img"></p><h3 id="设计原理" tabindex="-1">设计原理 <a class="header-anchor" href="#设计原理" aria-label="Permalink to &quot;设计原理&quot;">​</a></h3><blockquote><p>这一部分是整个 Express 框架的核心，下图是整个框架的运行流程，一看是不是很懵逼，为了搞清楚这一部分，需要明确四个概念：Application、Router、Layer、Route。</p></blockquote><p><img src="'+r+`" alt="img"></p><blockquote><p>为了明确上述四个概念，先引入一段代码</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> express</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./express&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./response&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;/test1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;one&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;two&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;/test2&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;three&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;four&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;four&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><ol><li>Application：表示一个 Express 应用，通过 express()即可进行创建。</li><li>Router：路由系统，用于调度整个系统的运行，在上述代码中该路由系统包含 app.get(&#39;/test1&#39;,……)和 app.get(&#39;/test2&#39;,……)两大部分</li><li>Layer：代表一层，对于上述代码中 app.get(&#39;/test1&#39;,……)和 app.get(&#39;/test2&#39;,……)都可以成为一个 Layer</li><li>Route：一个 Layer 中会有多个处理函数的情况，这多个处理函数构成了 Route，而 Route 中的每一个函数又成为 Route 中的 Layer。对于上述代码中，app.get(&#39;/test1&#39;,……)中的两个函数构成一个 Route，每个函数又是 Route 中的 Layer。</li></ol><blockquote><p>了解完上述概念后，结合该幅图，就大概能对整个流程有了直观感受。首先启动服务，然后客户端发起了：<a href="http://localhost:3000/test2" target="_blank" rel="noreferrer">http://localhost:3000/test2</a> 的请求，该过程应该如何运行呢？</p><ol><li>启动服务时会依次执行程序，将该路由系统中的路径、请求方法、处理函数进行存储（这些信息根据一定结构存储在 Router、Layer 和 Route 中）</li><li>对相应的地址进行监听，等待请求到达。</li><li>请求到达，首先根据请求的 path 去从上到下进行匹配，路径匹配正确则进入该 Layer，否则跳出该 Layer。</li><li>若匹配到该 Layer，则进行请求方式的匹配，若匹配方式匹配正确，则执行该对应 Route 中的函数。</li></ol></blockquote><p><strong>上述解释的比较简单，后续会在细节部分进一步阐述。</strong></p><h3 id="体会细节" tabindex="-1">体会细节 <a class="header-anchor" href="#体会细节" aria-label="Permalink to &quot;体会细节&quot;">​</a></h3><blockquote><p>通过上述对 Express 设计原理的分析，下面将从两个方面做进一步的源码解读，下面流程图是一个常见的 Express 项目的过程，首先会进行 app 实例初始化、然后调用一系列中间件，最后建立监听。对于整个工程的运行来说，主要分为两个阶段：初始化阶段、请求处理阶段，下面将以 app.get()为例来阐述一下该核心细节。</p></blockquote><p><img src="`+t+'" alt="img"></p><h4 id="_1-初始化阶段" tabindex="-1">1 初始化阶段 <a class="header-anchor" href="#_1-初始化阶段" aria-label="Permalink to &quot;1 初始化阶段&quot;">​</a></h4><blockquote><p>下面利用 app.get()这个路由来了解一下工程的初始化阶段。</p></blockquote><p><img src="'+c+`" alt="img"></p><p>1.首先来看一下 app.get()的内容(源代码中 app.get()是通过遍历 methods 的方式产生)</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ……</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lazyrouter</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> route</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">get</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>2.在 app.lazyrouter()会完成 router 的实例化过程</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lazyrouter</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> lazyrouter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_router</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_router</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Router</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			caseSensitive</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">enabled</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;case sensitive routing&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">			strict</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">enabled</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;strict routing&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 此处会使用一些中间件</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">query</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;query parser fn&quot;</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">middleware</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>注意：该过程中其实是利用了单例模式，保证整个过程中获取 router 实例的唯一性。</p><p>3.调用 router.route()方法完成 layer 的实例化、处理及保存，并返回实例化后的 route。(注意源码中是 proto.route)</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">route</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> route</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> route</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Route</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> layer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Layer</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			sensitive</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">caseSensitive</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			strict</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">strict</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			end</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E5C07B;">		route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dispatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">route</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> route</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 把route放到layer上</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">layer</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 把layer放到数组中</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> route</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>4.将该 app.get()中的函数存储到 route 的 stack 中。(注意源码中也是通过遍历 method 的方式将 get 挂载到 route 的 prototype 上)</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> handles</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> flatten</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> handles</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> handle</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> handles</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ……</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 给route添加layer，这个层中需要存放方法名和handler</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> layer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Layer</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, {}, </span><span style="color:#E06C75;">handle</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> method</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">layer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>注意：上述代码均删除了源码中一些异常判断逻辑，方便读者看清整体框架。</strong></p><blockquote><p>通过上述的分析，可以看出初始化阶段主要做了两件事情：</p><ol><li>将路由处理方式（app.get()、app.post()……）、app.use()等划分为路由系统中的一个 Layer。</li><li>对于每一个层中的处理函数全部存储至 Route 对象中，一个 Route 对象与一个 Layer 相互映射。</li></ol></blockquote><h4 id="_2-请求处理阶段" tabindex="-1">2 请求处理阶段 <a class="header-anchor" href="#_2-请求处理阶段" aria-label="Permalink to &quot;2 请求处理阶段&quot;">​</a></h4><blockquote><p>当服务启动后即进入监听状态，等待请求到达后进行处理。</p></blockquote><p><img src="`+B+`" alt="img"></p><p>1.app.listen()使服务进入监听状态（实质上是调用了 http 模块）</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> listen</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> server</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> server</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">listen</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">server</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>2.当连接建立会调用 app 实例，app 实例中会立即执行 app.handle()函数，app.handle()函数会立即调用路由系统的处理函数 router.handle()</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> handle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_router</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果路由系统中处理不了这个请求，就调用done方法</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> done</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E06C75;">		callback</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#61AFEF;">		finalhandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">			env</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;env&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">			onerror</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">logerror</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//……</span></span>
<span class="line"><span style="color:#E5C07B;">	router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>3.router.handle()主要是根据路径获取是否有匹配的 layer，当匹配到之后则调用 layer.prototype.handle_request()去执行 route 中内容的处理</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> handle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">out</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这个地方参数out就是done，当所有都匹配不到，就从路由系统中出来，名字很形象</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> self</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ……</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> stack</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stack</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ……</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ……</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// get pathname of request</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getPathname</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// find next matching layer</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> layer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> match</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> route</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">match</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> true</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> idx</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> stack</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			layer</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> stack</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">idx</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">			match</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> matchLayer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">layer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			route</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// ……</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// no match</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">match</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> done</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">layerError</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ……</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Capture one-time layer values</span></span>
<span class="line"><span style="color:#E5C07B;">		req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mergeParams</span></span>
<span class="line"><span style="color:#C678DD;">			?</span><span style="color:#61AFEF;"> mergeParams</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentParams</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			:</span><span style="color:#E5C07B;"> layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> layerPath</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this should be done for the layer</span></span>
<span class="line"><span style="color:#E5C07B;">		self</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">process_params</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">layer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">paramcalled</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">layerError</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> layer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle_request</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">			trim_prefix</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">layer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">layerError</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">layerPath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> trim_prefix</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">layer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">layerError</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">layerPath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ……</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">layerError</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			layer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle_error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">layerError</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			layer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle_request</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><p>4.layer.handle_request()会调用 route.dispatch()触发 route 中内容的执行</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle_request</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> handle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> fn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handle</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// not a standard request handler</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>5.route 中的通过判断请求的方法和 route 中 layer 的方法是否匹配，匹配的话则执行相应函数，若所有 route 中的 layer 都不匹配，则调到外层的 layer 中继续执行。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Route</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">done</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> idx</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> stack</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stack</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> done</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> method</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ……</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 此next方法是用户调用的next，如果调用next会执行内层的next方法，如果没有匹配到会调用外层的next方法</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ……</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> layer</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> stack</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">idx</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">layer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> done</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果当前route中的layer的方法匹配到了，执行此layer上的handler</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			layer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle_error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			layer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle_request</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><blockquote><p>通过上述的分析，可以看出初始化阶段主要做了两件事情：</p><ol><li>首先判断 layer 中的 path 和请求的 path 是否一致，一致则会进入 route 进行处理，否则调到下一层 layer</li><li>在 route 中会判断 route 中的 layer 与请求方法是否一致，一致的话则函数执行，否则不执行，所有 route 中的 layer 执行完后跳到下层的 layer 进行执行。</li></ol></blockquote><h3 id="调试-express-源码" tabindex="-1">调试 Express 源码 <a class="header-anchor" href="#调试-express-源码" aria-label="Permalink to &quot;调试 Express 源码&quot;">​</a></h3><p>调试 Express 源码可以帮助您更好地理解源码的执行流程。可以使用 Node.js 的 debugger 工具进行调试。</p><h2 id="核心源码解析" tabindex="-1">核心源码解析 <a class="header-anchor" href="#核心源码解析" aria-label="Permalink to &quot;核心源码解析&quot;">​</a></h2><p><a href="https://juejin.cn/post/7095550340883283976#heading-6" target="_blank" rel="noreferrer">超详细的《Express》核心原理解析（上） - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7100748215145725960" target="_blank" rel="noreferrer">超详细的《Express》核心原理解析（下） - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6844903573663416334" target="_blank" rel="noreferrer">Express 中间件原理详解 - 掘金 (juejin.cn)</a></p>`,68)]))}const d=n(y,[["render",i]]);export{m as __pageData,d as default};
