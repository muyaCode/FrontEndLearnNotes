import{_ as a,c as n,o as e,ah as l}from"./chunks/framework.DqD713j2.js";const m=JSON.parse('{"title":"Git 提交流程","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Git/04_Git提交流程.md","filePath":"Document/Git/04_Git提交流程.md","lastUpdated":1750954157000}'),p={name:"Document/Git/04_Git提交流程.md"};function o(t,s,r,i,c,b){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="git-提交流程" tabindex="-1">Git 提交流程 <a class="header-anchor" href="#git-提交流程" aria-label="Permalink to &quot;Git 提交流程&quot;">​</a></h1><p>在使用 Git 的过程中如果没有清晰流程和规划，否则，每个人都提交一堆杂乱无章的 commit，项目很快就会变得难以协调和维护。Git 版本管理同样需要一个清晰的流程和规范。业内普遍采用的 git 工作流程就是 git flow，使得团队协作效率大大提高 ‌</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">1.</span><span style="color:#98C379;"> 从远程仓库中克隆Git资源作为本地仓库，同时从本地仓库中checkout代码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">2.</span><span style="color:#98C379;"> 提交代码：提交到暂存区-</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#98C379;">提交到本地仓库-</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#98C379;">代码push到远程仓库</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="git-flow-的工作流程" tabindex="-1">git flow 的工作流程 <a class="header-anchor" href="#git-flow-的工作流程" aria-label="Permalink to &quot;git flow 的工作流程&quot;">​</a></h2><h3 id="_1、git-flow-的常用分支" tabindex="-1">1、Git Flow 的常用分支 <a class="header-anchor" href="#_1、git-flow-的常用分支" aria-label="Permalink to &quot;1、Git Flow 的常用分支&quot;">​</a></h3><h4 id="生产分支-main-‌" tabindex="-1">生产分支（main）‌ <a class="header-anchor" href="#生产分支-main-‌" aria-label="Permalink to &quot;生产分支（main）‌&quot;">​</a></h4><p>main 分支是仓库的主分支，也有人叫 Production 分支，这个分支包含最近发布到生产环境的代码，最近发布的 Release， 这个分支只能从其他分支合并，不能在这个分支直接修改 ‌</p><h4 id="补丁分支-hotfix-‌" tabindex="-1">补丁分支（hotfix）‌ <a class="header-anchor" href="#补丁分支-hotfix-‌" aria-label="Permalink to &quot;补丁分支（hotfix）‌&quot;">​</a></h4><p>当我们在生产环境发现新的 Bug 时候，我们需要基于 main 分支创建一个 Hotfix 分支，然后在 Hotfix 分支上修复 bug，完成 Hotfix 后，我们要把 hotfix 分支合并回 main 和 Develop 分支 ‌，所以 Hotfix 的改动会进入下一个 Release</p><h4 id="发布分支-release-‌" tabindex="-1">发布分支（release)‌ <a class="header-anchor" href="#发布分支-release-‌" aria-label="Permalink to &quot;发布分支（release)‌&quot;">​</a></h4><p>当你需要发布一个新功能的时候，要基于 Develop 分支创建一个 Release 分支，在 Release 分支测试并修复 bug，完成 release 后，把 release 合并到 main 和 develop 分支 ‌</p><h4 id="开发分支-develop-‌" tabindex="-1">开发分支（develop）‌ <a class="header-anchor" href="#开发分支-develop-‌" aria-label="Permalink to &quot;开发分支（develop）‌&quot;">​</a></h4><p>这个分支是我们的主开发分支，包含所有要发布到下一个 Release 的代码，这个主要合并与其他分支，比如 Feature 分支 ‌</p><h4 id="功能分支-feature-‌" tabindex="-1">功能分支（feature）‌ <a class="header-anchor" href="#功能分支-feature-‌" aria-label="Permalink to &quot;功能分支（feature）‌&quot;">​</a></h4><p>feature 分支主要是用来开发一个新的功能，一旦开发完成，我们合并回 Develop 分支进入下一个 Release‌</p><h3 id="_2、git-flow-的具体使用细节" tabindex="-1">2、git flow 的具体使用细节 <a class="header-anchor" href="#_2、git-flow-的具体使用细节" aria-label="Permalink to &quot;2、git flow 的具体使用细节&quot;">​</a></h3><p>当我们新建 git 仓库之后，默认会创建一个主分支也就是 main 分支，由于 main 分支是用于发布生产环境，所有必须保证 main 上代码的稳定性，所以我们不能直接在 main 分支上修改提交。我们要基于 main 分支创建一个 develop 分支，develop 分支用于保存开发好的相对稳定的功能，main 分支和 develop 分支是仓库的常驻分支，一直会保留在仓库中</p><p>当新的开发任务来了之后，就要编写代码了，我们尽量不要在 develop 分支上写代码，要保证 develop 分支的相对稳定，所以这时我要就要基于 develop 分支创建一个临时的开发分支，然后在开发分支上编写代码，等功能开发完之后我们再把开发分支合并到 develop 上</p><p>新功能合并到 develop 分支之后，我们想把新功能发布到生产环境，首先基于 develop 分支创建 release 分支，然后在 release 分支测试完成之后，把 release 分别合并到 main 分支和 develop 分支</p><h4 id="release-分支合并到-main-分支之后-在-main-分支上打标签用于发布" tabindex="-1">release 分支合并到 main 分支之后，在 main 分支上打标签用于发布 <a class="header-anchor" href="#release-分支合并到-main-分支之后-在-main-分支上打标签用于发布" aria-label="Permalink to &quot;release 分支合并到 main 分支之后，在 main 分支上打标签用于发布&quot;">​</a></h4><p>我们把代码发布到了生产环境，用户在使用的时候给我们反馈了一个 bug，这时我们需要基于 main 分支创建一个 hotfix 分支，用于修复 bug，bug 修好之后，把 hotfix 分支分别合并到 main 分支和 develop 分支</p><h3 id="_3、git-flow-工具" tabindex="-1">3、Git flow 工具 <a class="header-anchor" href="#_3、git-flow-工具" aria-label="Permalink to &quot;3、Git flow 工具&quot;">​</a></h3><p>如果你理解了上面的流程，你完全可以不使用 Git flow 工具，但是如果你想更标准化的执行 git flow，可以尝试使用 git flow 工具 ‌</p><p>安装 ‌<strong>SourceTree</strong>：<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noreferrer">https://www.sourcetreeapp.com/</a></p><h4 id="初始化-git-flow" tabindex="-1">初始化 Git flow <a class="header-anchor" href="#初始化-git-flow" aria-label="Permalink to &quot;初始化 Git flow&quot;">​</a></h4><p>点击右上角的 “Git 工作流” ，初次会提示我们 “使用 Git Flow 来初始化此仓库”，已经帮助我们预定义好了一些配置，我们只需要点击 “确定” 按钮即可</p><p>点击“确定”按钮后，我们会发现 SourceTree 为我们自动创建了 develop 分支，并且切换到了 develop 分支。</p><h4 id="git-flow-建立新功能" tabindex="-1">Git flow: 建立新功能 <a class="header-anchor" href="#git-flow-建立新功能" aria-label="Permalink to &quot;Git flow: 建立新功能&quot;">​</a></h4><p>继续点击右上角的 “Git 工作流” ，这次会提示我们选择具体的下一个流程动作，这里我们演示一个 “建立新的功能” 流程。</p><p>点击 “建议新的功能” ，会让我们对即将要开发的功能进行命名（名称请使用英文），这里我们输入 simple-git-flow，点击确定按钮，会自动帮助我们创建 feature/simple-git-flow 分支，并切换到该分支上。</p><p>同时我们也能看到 SourceTree 帮助我们执行了什么命令来达到这样的效果。</p><p>已经自动切换到 feature/simple-git-flow 分支。</p><h4 id="提交代码" tabindex="-1">提交代码 <a class="header-anchor" href="#提交代码" aria-label="Permalink to &quot;提交代码&quot;">​</a></h4><p>此时我们可以在分支上开发我们的新功能，可以在分支上管理代码，而不影响到其他同事的开发工作。</p><p>为了简单演示，我们修改下 readme.md 的内容如下：</p><p>在 SourceTree 界面，我们需要在 未暂存文件 区域选中 readme.md 并点击 暂存所选 按钮，此时 readme.md 文件会进入到 已暂存文件 区域。只有 已暂存文件 的文件会进行 提交操作 。</p><p>在下方的空白区域输入本次提交的说明：a simple git flow 后点击提交按钮，就会提交源码。</p><p>如下图所示：可以看到刚刚提交的代码记录</p><h4 id="完成新功能开发" tabindex="-1">完成新功能开发 <a class="header-anchor" href="#完成新功能开发" aria-label="Permalink to &quot;完成新功能开发&quot;">​</a></h4><p>经过不断的代码完善，并且经过单元测试后，代码已经完成后，此时就可以完成 新功能的开发，继续点击 Git 工作流</p><p>点击 “完成功能”，默认会如下图所示，在正常的开发流程下，我们不需要更改任何设置，直接点击确定即可。</p><p>SourceTree 展示所执行的命令及结果。</p><p>完成后，我们会发现 feature/simple-git-flow 分支已经不见了，同时在 develop 分支上多了一个 a simple git flow 的提交信息。</p><p>至此整个 “建议新功能” 的 git flow 流程就完毕了。</p><h4 id="如何修改之前的-commit-信息" tabindex="-1">如何修改之前的 commit 信息？ <a class="header-anchor" href="#如何修改之前的-commit-信息" aria-label="Permalink to &quot;如何修改之前的 commit 信息？&quot;">​</a></h4><p>其实并不复杂，我们只需要这样做:</p><ol><li><p>将当前分支无关的工作状态进行暂存</p><blockquote><p>git stash</p></blockquote></li><li><p>将 HEAD 移动到需要修改的 commit 上</p><blockquote><p>git rebase 9633cf0919^ --interactive</p></blockquote></li><li><p>找到需要修改的 commit ,将首行的 pick 改成 edit</p></li><li><p>开始着手解决你的 bug</p></li><li><p>git add 将改动文件添加到暂存</p></li><li><p>git commit –amend 追加改动到提交</p></li><li><p>git rebase –continue 移动 HEAD 回最新的 commit</p></li><li><p>恢复之前的工作状态</p><blockquote><p>git stash pop</p></blockquote></li></ol><h3 id="_4、项目中使用" tabindex="-1">4、项目中使用 <a class="header-anchor" href="#_4、项目中使用" aria-label="Permalink to &quot;4、项目中使用&quot;">​</a></h3><p>这时候问题又来了，为什么我提交的时候会有警告，这个又是如何做到的呢?</p><p>这时候，我们需要一款 Node 插件 validate-commit-msg 来检查项目中 Commit message 是否规范。</p><ol><li><p>首先，安装插件：</p><p><code>npm install --save-dev validate-commit-msg</code></p></li><li><p>使用方式一，建立 .vcmrc 文件：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;types&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">		&quot;feat&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;fix&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;docs&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;style&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;refactor&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;perf&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;build&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;ci&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;chore&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;revert&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scope&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;required&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;allowed&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;validate&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;multiple&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;warnOnFail&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;maxSubjectLength&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;subjectPattern&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;.+&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;subjectPatternErrorMsg&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;subject does not match subject pattern!&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;helpMessage&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;autoFix&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></li><li><p>使用方式二：写入 package.json</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;config&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;validate-commit-msg&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			/* your config here */</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>可是我们如果想自动使用 ghooks 钩子函数呢？</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#FFFFFF;">…</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">&quot;config&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  &quot;ghooks&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    &quot;pre-commit&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;gulp lint&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    &quot;commit-msg&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;validate-commit-msg&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    &quot;pre-push&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;make test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    &quot;post-merge&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;npm install&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    &quot;post-rewrite&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;npm install&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFFFFF;">    …</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFFFFF;">…</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div></li></ol><p>在 ghooks 中我们可以做很多事情，当然不只是 validate-commit-msg</p><p>更多细节请参考：validate-commit-msg</p><h3 id="_5、commit-规范的作用" tabindex="-1">5、Commit 规范的作用 <a class="header-anchor" href="#_5、commit-规范的作用" aria-label="Permalink to &quot;5、Commit 规范的作用&quot;">​</a></h3><ul><li><p>提供更多的信息，方便排查与回退;</p></li><li><p>过滤关键字，迅速定位;</p></li><li><p>方便生成文档;</p></li></ul><h3 id="_6、生成-change-log" tabindex="-1">6、生成 Change log <a class="header-anchor" href="#_6、生成-change-log" aria-label="Permalink to &quot;6、生成 Change log&quot;">​</a></h3><p>正如上文提到的生成文档，如果我们的提交都按照规范的话，那就很简单了。生成的文档包括以下三个部分：</p><ul><li>New features</li><li>Bug fixes</li><li>Breaking changes.</li></ul><p>每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。</p><p>这里需要使用工具 Conventional Changelog 生成 Change log ：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> conventional-changelog </span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> jartto-domo </span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">conventional-changelog</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> angular</span><span style="color:#D19A66;"> -i</span><span style="color:#98C379;"> CHANGELOG.md</span><span style="color:#D19A66;"> -w</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>为了方便使用，可以将其写入 package.json 的 scripts 字段。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;changelog&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;conventional-changelog -p angular -i CHANGELOG.md -w -r 0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样，使用起来就很简单了：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span> npm run changelog</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> status</span><span style="color:#98C379;">                                                                       日志</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .</span><span style="color:#98C379;">                                                                        orm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> status</span><span style="color:#98C379;"> （能够省略）开发</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> “[修改] TASK_NAME</span><span style="color:#98C379;"> 修改客户的登陆权限”</span><span style="color:#98C379;">  （提交代码格式）</span><span style="color:#98C379;">    rem</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;"> git</span><span style="color:#98C379;"> checkout develop</span><span style="color:#98C379;">                                                                    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> pull git@YourIp:ProjectName.git develop:develop</span><span style="color:#98C379;"> （必须有）         </span><span style="color:#98C379;">      </span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> merge</span><span style="color:#D19A66;"> --no-ffJIRA_NAME[](http://www.javashuo.com/link</span><span style="color:#ABB2BF;">?</span><span style="color:#D19A66;">url=http://10.5.30.94:8080/browse/HYBRIS-3482</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;"> git</span><span style="color:#98C379;"> push git@YourIp:ProjectName.git develop:develop </span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> fetch</span><span style="color:#ABB2BF;"> ( </span><span style="color:#98C379;">可选 </span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -d JIRA_NAME[](http://www.javashuo.com/link</span><span style="color:#ABB2BF;">?</span><span style="color:#D19A66;">url=http://10.5.30.94:8080/browse/HYBRIS-3482</span><span style="color:#ABB2BF;">)（必须）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p><strong>远程分支拉到本地开发：</strong></p><p>git checkout develop2[远程分支名]</p><p>git pull <a href="mailto:git@10.5.2.121" target="_blank" rel="noreferrer">git@10.5.2.121</a>:MFR/hybris5511.git<a href="http://www.javashuo.com/link?url=http://10.5.2.121:8080/gitlab/MFR/hybris5511/commit/c9ef4d47714abb94ee05bcdfaa3856de0c39719d" target="_blank" rel="noreferrer"></a>develop2:develop2</p><p>git checkout -bJIRA_NAMEdevelop2[远程分支名]</p><p>git commit -m “[修改] TASK_NAME 把远程分支客户的登陆逻辑修改了”</p><p>git checkout develop2[远程分支名]</p><p>git pull <a href="mailto:git@10.5.2.121" target="_blank" rel="noreferrer">git@10.5.2.121</a>:MFR/hybris5511.gitdevelop2 :develop2</p><p>git merge --no-ffJIRA_NAME</p><p>git push <a href="mailto:git@10.5.2.121" target="_blank" rel="noreferrer">git@10.5.2.121</a>:MFR/hybris5511.gitdevelop2 :develop2</p><p><strong>特殊说明：</strong></p><p>git 单个提交文件不能大于 100M。不然<strong>Push rejected: D:\\MavenSpace\\thinkinjava: push main to origin/main was rejected by remote</strong></p><p><strong>回撤版本号：</strong></p><p>git reset --hard ab868a89</p><p>git reset --hard 99e8a874</p><p>git reset --hard c0f125bd02c8c84ea2de2dfb4d408b8f54b3b8c1</p><p><strong>本地仓库撤回到暂存区：</strong></p><p>git reset HEAD~1 【回撤一个版本】</p><p>git reset HEAD~2 【回撤两个版本】</p><p>须要从新 Commit。</p><p><strong>设置 git 日志格式以及查找 JIRA 任务：</strong></p><p>git config --global alias.lg50 &quot;log -50 --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset&#39; --abbrev-commit --date=relative&quot;</p><p>git lg50 --grep= SIRBYH-8888</p><p>Quick Start</p><ol><li>全局安装 commitizen &amp; cz-conventional-changelog<br> commitizen 是一个撰写合格 commit message 的工具，用于代替 git commit 指令，而 cz-conventional-changelog 适配器提供 conventional-changelog 标准（约定式提交标准）。基于不同需求，也可以使用不同适配器。</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> commitizen</span><span style="color:#98C379;"> cz-conventional-changelog</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &#39;{ &quot;path&quot;: &quot;cz-conventional-changelog&quot; }&#39;</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">~/.czrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>安装完毕后，可直接使用 git cz 来取代 git commit。</p><p>全局模式下，需要 ~/.czrc 配置文件, 为 commitizen 指定 Adapter。</p><ol start="2"><li>项目内安装 commitlint &amp; husky<br> commitlint 负责用于对 commit message 进行格式校验，husky 负责提供更易用的 git hook。</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">Use</span><span style="color:#98C379;"> npm</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -D</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> @commitlint/config-conventional</span><span style="color:#98C379;"> @commitlint/cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Use</span><span style="color:#98C379;"> yarn</span></span>
<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> @commitlint/config-conventional</span><span style="color:#98C379;"> @commitlint/cli</span><span style="color:#D19A66;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>commitlint 只能做格式规范，无法触及内容。对于内容质量的把控只能靠我们自己。</p><ol start="3"><li>添加相应配置<br> 创建 commitlint.config.js</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;"> In</span><span style="color:#98C379;"> the</span><span style="color:#98C379;"> same</span><span style="color:#98C379;"> path</span><span style="color:#98C379;"> as</span><span style="color:#98C379;"> package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &#39;module.exports = {extends: [&quot;@commitlint/config-conventional&quot;]};&#39;</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">./commitlint.config.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>引入 husky</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">//</span><span style="color:#98C379;"> package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">&quot;husky&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  &quot;hooks&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    &quot;commit-msg&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;commitlint -e </span><span style="color:#E06C75;">$GIT_PARAMS</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="4"><li>使用<br> 执行 git cz 进入 interactive 模式，根据提示依次填写</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">1.Select</span><span style="color:#98C379;"> the</span><span style="color:#98C379;"> type</span><span style="color:#98C379;"> of</span><span style="color:#98C379;"> change</span><span style="color:#98C379;"> that</span><span style="color:#98C379;"> you&#39;re committing 选择改动类型 ()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">2.What is the scope of this change (e.g. component or file name)? 填写改动范围 ()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">3.Write a short, imperative tense description of the change: 写一个精简的描述 ()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">4.Provide a longer description of the change: (press enter to skip) 对于改动写一段长描述 ()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">5.Are there any breaking changes? (y/n) 是破坏性修改吗？默认n ()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">6.Does this change affect any openreve issues? (y/n) 改动修复了哪个问题？默认n ()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>生成的 commit message 格式如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;type</span><span style="color:#98C379;">&gt;(</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#98C379;">scope</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#98C379;">)</span><span style="color:#ABB2BF;">: &lt;subject&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;BLANK LINE&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;BLANK LINE&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;footer&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>填写完毕后，husky 会调用 commitlint 对 message 进行格式校验，默认规定 type 及 subject 为必填项。</p><p>任何 git commit 指令的 option 都能用在 git cz 指令上, 例如 git cz -a</p><p>Commit message 规范在 rrd-fe 落地使用情况<br> 针对团队目前使用的情况，我们讨论后拟定了 commit message 每一部分的填写规则。</p><ol><li>type<br> type 为必填项，用于指定 commit 的类型，约定了 feat、fix 两个主要 type，以及 docs、style、build、refactor、revert 五个特殊 type，其余 type 暂不使用。</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>主要type</span></span>
<span class="line"><span></span></span>
<span class="line"><span>feat:     增加新功能</span></span>
<span class="line"><span>fix:      修复bug</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 特殊type</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docs:     只改动了文档相关的内容</span></span>
<span class="line"><span>style:    不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</span></span>
<span class="line"><span>build:    构造工具的或者外部依赖的改动，例如webpack，npm</span></span>
<span class="line"><span>refactor: 代码重构时使用</span></span>
<span class="line"><span>revert:   执行git revert打印的message</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 暂不使用type</span></span>
<span class="line"><span></span></span>
<span class="line"><span>test:     添加测试或者修改现有测试</span></span>
<span class="line"><span>perf:     提高性能的改动</span></span>
<span class="line"><span>ci:       与CI（持续集成服务）有关的改动</span></span>
<span class="line"><span>chore:    不修改src或者test的其余修改，例如构建过程或辅助工具的变动</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>当一次改动包括主要 type 与特殊 type 时，统一采用主要 type。</p><ol start="2"><li>scope<br> scope 也为必填项，用于描述改动的范围，格式为项目名/模块名，例如：node-pc/common rrd-h5/activity，而 we-sdk 不需指定模块名。如果一次 commit 修改多个模块，建议拆分成多次 commit，以便更好追踪和维护。</li><li>body<br> body 填写详细描述，主要描述改动之前的情况及修改动机，对于小的修改不作要求，但是重大需求、更新等必须添加 body 来作说明。</li><li>break changes<br> break changes 指明是否产生了破坏性修改，涉及 break changes 的改动必须指明该项，类似版本升级、接口参数减少、接口删除、迁移等。</li><li>affect issues<br> affect issues 指明是否影响了某个问题。例如我们使用 jira 时，我们在 commit message 中可以填写其影响的 JIRA_ID，若要开启该功能需要先打通 jira 与 gitlab。参考文档：<a href="https://docs.gitlab.com/ee/user/project/" target="_blank" rel="noreferrer">Organize work with projects | GitLab</a></li></ol><p>填写方式例如：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">re</span><span style="color:#7F848E;font-style:italic;"> #JIRA_ID</span></span>
<span class="line"><span style="color:#61AFEF;">fix</span><span style="color:#7F848E;font-style:italic;"> #JIRA_ID</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>完整的 commit message 示例</p><p><a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9KZExrRUk5c1pmY2ExZzVpYjZzZVk1U2ZLR1ZzMWJhc1RCVGh3UzdpY3htWm1vMXBzbVRpYkhPSW8wVE5OY1p2UjNZY1lPcWZtNEQ2bXFEU2NMMkpFb0dZdy82NDA?x-oss-process=image/format,png" target="_blank" rel="noreferrer">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9KZExrRUk5c1pmY2ExZzVpYjZzZVk1U2ZLR1ZzMWJhc1RCVGh3UzdpY3htWm1vMXBzbVRpYkhPSW8wVE5OY1p2UjNZY1lPcWZtNEQ2bXFEU2NMMkpFb0dZdy82NDA?x-oss-process=image/format,png</a></p><p>相应的 git log</p><p><a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9KZExrRUk5c1pmY2ExZzVpYjZzZVk1U2ZLR1ZzMWJhc1QwTXRzZDhQY09qWG1DZW1ibE1pYTNvaWJwQVUySnVLd2lhZlNtZHk3NGRUZ3FlNERHcWpBT3dIb2cvNjQw?x-oss-process=image/format,png" target="_blank" rel="noreferrer">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy9KZExrRUk5c1pmY2ExZzVpYjZzZVk1U2ZLR1ZzMWJhc1QwTXRzZDhQY09qWG1DZW1ibE1pYTNvaWJwQVUySnVLd2lhZlNtZHk3NGRUZ3FlNERHcWpBT3dIb2cvNjQw?x-oss-process=image/format,png</a></p><h2 id="git-团队协作" tabindex="-1">Git 团队协作 <a class="header-anchor" href="#git-团队协作" aria-label="Permalink to &quot;Git 团队协作&quot;">​</a></h2><p>每个人要完成的代码功能不同，创建不同分支，相互不冲突，开发完成时候再合并代码到一个分支或者新分支</p><h3 id="代码冲突" tabindex="-1">代码冲突 <a class="header-anchor" href="#代码冲突" aria-label="Permalink to &quot;代码冲突&quot;">​</a></h3><h3 id="团队协作的分支管理" tabindex="-1">团队协作的分支管理 <a class="header-anchor" href="#团队协作的分支管理" aria-label="Permalink to &quot;团队协作的分支管理&quot;">​</a></h3><h2 id="git-跨团队协作" tabindex="-1">Git 跨团队协作 <a class="header-anchor" href="#git-跨团队协作" aria-label="Permalink to &quot;Git 跨团队协作&quot;">​</a></h2><p>邀请别人进项目，别人克隆代码，别人新建分支，写代码，提交代码，别人申请他自己写的代码，和原来的代码合并</p><p>项目管理者同意合并他的代码合并进项目代码中</p><h2 id="解决合并时发生的冲突" tabindex="-1">解决合并时发生的冲突 <a class="header-anchor" href="#解决合并时发生的冲突" aria-label="Permalink to &quot;解决合并时发生的冲突&quot;">​</a></h2><ul><li>√git merge [branch name]</li><li>√git status 查看冲突原因</li><li>Vgit merge-abort 忽略合并</li><li>√ 手动选择正确内容</li><li>√git commit</li></ul><h2 id="git-提交描述规范" tabindex="-1">Git 提交描述规范 <a class="header-anchor" href="#git-提交描述规范" aria-label="Permalink to &quot;Git 提交描述规范&quot;">​</a></h2><p><a href="https://juejin.cn/post/7343811223208050729" target="_blank" rel="noreferrer">【规范】看看人家 Git 提交描述，那叫一个规矩 - 掘金 (juejin.cn)</a></p>`,128)]))}const d=a(p,[["render",o]]);export{m as __pageData,d as default};
