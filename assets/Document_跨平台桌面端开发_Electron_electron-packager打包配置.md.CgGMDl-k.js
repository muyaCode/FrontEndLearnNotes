import{_ as a,c as r,o as t,ah as c}from"./chunks/framework.DqD713j2.js";const h=JSON.parse('{"title":"electron-packager 打包配置","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Electron/electron-packager打包配置.md","filePath":"Document/跨平台桌面端开发/Electron/electron-packager打包配置.md","lastUpdated":1750954157000}'),p={name:"Document/跨平台桌面端开发/Electron/electron-packager打包配置.md"};function o(l,e,n,i,s,k){return t(),r("div",null,e[0]||(e[0]=[c('<h1 id="electron-packager-打包配置" tabindex="-1">electron-packager 打包配置 <a class="header-anchor" href="#electron-packager-打包配置" aria-label="Permalink to &quot;electron-packager 打包配置&quot;">​</a></h1><p>electron-packager：<a href="https://github.com/electron/electron-packager" target="_blank" rel="noreferrer">https://github.com/electron/electron-packager</a></p><p>electron-packager 配置文档：<a href="https://npm.im/electron-packager" title="https://npm.im/electron-packager" target="_blank" rel="noreferrer">npm.im/electron-packager</a></p><p>electron-packager npm：<a href="https://www.npmjs.com/package/electron-packager" target="_blank" rel="noreferrer">https://www.npmjs.com/package/electron-packager</a></p><hr><h2 id="使用-electron-packager-打包" tabindex="-1">使用 electron-packager 打包 <a class="header-anchor" href="#使用-electron-packager-打包" aria-label="Permalink to &quot;使用 electron-packager 打包&quot;">​</a></h2><p>使用 electron-packager 打包特点：操作简单，打包后的目录就是程序的运行目录，相当于已经安装过，不用安装操作后才能运行，如果需要打包成安装器，需要使用 electron-builder 打包。</p><h3 id="_1、安装-electron-packager-npm-install-electron-packager-save-dev" tabindex="-1">1、安装：<code>electron-packager npm install electron-packager --save-dev</code> <a class="header-anchor" href="#_1、安装-electron-packager-npm-install-electron-packager-save-dev" aria-label="Permalink to &quot;1、安装：`electron-packager npm install electron-packager --save-dev`&quot;">​</a></h3><p>npm install electron-packager -g</p><h3 id="_2、快速打包命令-electron-packager" tabindex="-1">2、快速打包命令：<code>electron-packager</code> <a class="header-anchor" href="#_2、快速打包命令-electron-packager" aria-label="Permalink to &quot;2、快速打包命令：`electron-packager`&quot;">​</a></h3><h3 id="_3、使用配置文件打包" tabindex="-1">3、使用配置文件打包 <a class="header-anchor" href="#_3、使用配置文件打包" aria-label="Permalink to &quot;3、使用配置文件打包&quot;">​</a></h3><h4 id="在项目的-package-json-文件中的-scipts-节点中添加代码" tabindex="-1">在项目的 package.json 文件中的 scipts 节点中添加代码 <a class="header-anchor" href="#在项目的-package-json-文件中的-scipts-节点中添加代码" aria-label="Permalink to &quot;在项目的 package.json 文件中的 scipts 节点中添加代码&quot;">​</a></h4><p><code>electron-packager --platform= --arch= --out=out --icon=assets/app.ico --asar --overwrite --ignore=.git</code></p><ul><li><p>sourcedir：项目源文件所在路径（唯一的必须参数）</p></li><li><p>appname：项目名称（直接使用 package.json 文件中的 name 属性更方便）</p></li><li><p>platform：要构建哪个平台的应用（Windows、Mac 还是 Linux）</p></li><li><p>arch：构建架构 包含 ia32,x64,armv7l,arm64</p></li><li><p>out：打包后的地址</p></li><li><p>icon：打包图标</p></li><li><p>asar：是否生成 app.asar, 不然就是自己的源码</p></li><li><p>overwrite：覆盖上次打包</p></li><li><p>ignore：不进行打包的文件</p></li></ul><p>打包的路径不能出现中文或者特殊字符，第一次打包需要下载二进制的包耗时会久一些，以后走缓存就快的多了。</p><h5 id="下面是在设置了比较简单的打包代码-在-scipts-节点添加下面代码" tabindex="-1">下面是在设置了比较简单的打包代码（在 scipts 节点添加下面代码） <a class="header-anchor" href="#下面是在设置了比较简单的打包代码-在-scipts-节点添加下面代码" aria-label="Permalink to &quot;下面是在设置了比较简单的打包代码（在 scipts 节点添加下面代码）&quot;">​</a></h5><p><code>&quot;packager&quot;: &quot;electron-packager ./ testapp --win --out ./outputs&quot;</code></p><ul><li><p>./：sourcedir，项目路径</p></li><li><p>testapp：appname，打包后可执行程序(.exe)的名字</p></li><li><p>–win：platform，构建 win 平台的打包</p></li><li><p>–out：打包后的地址，./outputs 就是打包后的地址</p></li></ul><h3 id="_4、配置完-package-json-文件后就可以使用命令-npm-run-packager-打包了" tabindex="-1">4、配置完 package.json 文件后就可以使用命令 <code>npm run packager</code> 打包了 <a class="header-anchor" href="#_4、配置完-package-json-文件后就可以使用命令-npm-run-packager-打包了" aria-label="Permalink to &quot;4、配置完 package.json 文件后就可以使用命令 `npm run packager` 打包了&quot;">​</a></h3><p>打包后跟目录生成 outputs 文件夹：</p><p>目录里面 exe 就是打包后可执行程序文件，</p>',21)]))}const d=a(p,[["render",o]]);export{h as __pageData,d as default};
