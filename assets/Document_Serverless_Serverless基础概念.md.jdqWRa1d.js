import{_ as a,c as s,o as l,ah as r}from"./chunks/framework.DqD713j2.js";const n="/FrontEndLearnNotes/assets/%E5%AE%B9%E5%99%A8%E6%97%B6%E4%BB%A3%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84.CNe9QXd9.jpg",i="/FrontEndLearnNotes/assets/Serverless%E6%97%B6%E4%BB%A3%E7%9A%84%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84.CBE1pKH7.jpg",v=JSON.parse('{"title":"Serverless入门","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Serverless/Serverless基础概念.md","filePath":"Document/Serverless/Serverless基础概念.md","lastUpdated":1750954157000}'),o={name:"Document/Serverless/Serverless基础概念.md"};function p(t,e,c,u,h,d){return l(),s("div",null,e[0]||(e[0]=[r('<h1 id="serverless入门" tabindex="-1">Serverless入门 <a class="header-anchor" href="#serverless入门" aria-label="Permalink to &quot;Serverless入门&quot;">​</a></h1><p>Serverless 时代已来临</p><p>国外 Serverless 生态迅速发展诞生了如 Serverless Framework、Vercel 等很多优秀的产品</p><p>2017年后 国内的阿里云和腾讯云也陆续发布了Serverless产品</p><p>国内的 Serverless 产品：函数计算和云函数</p><h2 id="serverless-带来的机遇" tabindex="-1">Serverless 带来的机遇 <a class="header-anchor" href="#serverless-带来的机遇" aria-label="Permalink to &quot;Serverless 带来的机遇&quot;">​</a></h2><ul><li>购买机器</li><li>分布式缓存</li><li>安装环境</li><li>流量控制</li><li>负载均衡</li></ul><p>开箱即用，解决你不会服务器运维的困难</p><ul><li>Serverless对后端工程师也有很大的影响</li><li>专注于业务开发深入业务细节使业务快速迭代</li><li>深入底层去构建 Serverless基础设施,让技术为更多开发者服务</li></ul><h3 id="serverless-的开发框架、webide" tabindex="-1">Serverless 的开发框架、WebIDE <a class="header-anchor" href="#serverless-的开发框架、webide" aria-label="Permalink to &quot;Serverless 的开发框架、WebIDE&quot;">​</a></h3><h2 id="学习-serverless-所面临的挑战" tabindex="-1">学习 Serverless 所面临的挑战 <a class="header-anchor" href="#学习-serverless-所面临的挑战" aria-label="Permalink to &quot;学习 Serverless 所面临的挑战&quot;">​</a></h2><p>Serverless</p><p>开发者的 Serverless学习过程变得极其困难很多知识盲点都要自己探索，无法建立自己的知识体系</p><p>随着国内云厂商对 Serverless 的支持越来越完善些大厂和实践者也开始推出 Serverless 的开发教程，但</p><ul><li>越来越多的企业和开发者开始尝试使用 Serverless</li><li>落地经验输出还非常少</li><li>导致开发者在使用 Serverless 开发复杂业务时缺少经验、容易踩坑</li></ul><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>Severless 架构兴起</p><ul><li>主流云服务商推出 Serverless 相关的云产品和新功能</li><li>AWS Lambda、阿里云函数计算、腾讯云云函数</li><li>各种关于 Serverless 的商业和开源产品也层出不穷</li><li>Serverless Framework、OpenFaaS、kubeless</li></ul><h3 id="那你是否思考过serverless-为什么这么火呢" tabindex="-1">那你是否思考过Serverless 为什么这么火呢？ <a class="header-anchor" href="#那你是否思考过serverless-为什么这么火呢" aria-label="Permalink to &quot;那你是否思考过Serverless 为什么这么火呢？&quot;">​</a></h3><p>云计算</p><p>云计算的发展史就是 Serverless 的兴起史：</p><ul><li>物理机时代：物理机时代，网站上线和稳定运行面临的最大问题就是服务器等硬件问题 <ul><li>1955——分时操作系统理论：通过时间片轮转的方式把一个操作系统给多个用户使用</li><li>1959——虚拟化概念：</li><li>1969——ARPANET发布：</li><li>1970——虚拟机(VMs)概念：</li><li>1972——VM 发布：</li><li>1974——虚拟机理论完善：</li><li>1990——万维网发明：</li><li>1997——云计算定义：Ramnath Chellapa教授提出一种新的计算范式，其中计算的边界将由经济原理决定，而不仅仅是技术限制云计算不只是虚拟化技术，还是云服务商提供计算资源，使用者购买计算资源</li></ul></li><li>虚拟机时代： <ul><li>2000——无虚拟化的硬件</li><li>2001——虚拟化--发布ESX和GSX--vmware <ul><li>2001年VMWare带来的针对x86服务器的虚拟化产品使虚拟机逐渐普及通过虚拟化技术，它可以把一台物理机分割成多台虚拟机提供给多用户使用充分利用硬件资源，而且速度和弹性也远超物理机</li><li>2001年之后，虚拟化技术逐渐成熟，因此也出现了很多基于虚拟化的云厂商和产品 AWS的EC2、阿里云ECS、Azure VirtualMachines，这种云计算形态也被叫作 laaS (软件即服务)</li><li>测试与入侵 云数据库有专门的服务器，并且还提供了备份容灾比自己在服务器上安装数据库更稳性能更强 对象存储能无限扩容，不用担心磁盘不够了 <ul><li>服务器就只负责处理用户的请求</li><li>把计算和存储分离开来，既降低了系统负载，也提升了数据安全性</li><li>单机应用升级为了集群应用，通过负载均衡，会把用户流量均匀分配到每台服务器上</li></ul></li></ul></li><li>2006——laaS--发布S3和EC2--amazon web services</li><li>2009——PaaS--HEROKU</li><li>2010——开源laaS--openstack</li><li>2011——开源 PaaS--CLOUDFQUNDRY</li></ul></li><li>容器时代： <ul><li>2008——LXC容器发布</li><li>2013——Docker 发布 <ul><li>代表着容器技术替代了虚拟化技术，云计算进入容器时代容器就是把代码和运行环境打包在一起，这样代码就可以在任何地方运行当容器多了的时候，如何管理就成了一个问题，于是出现了容器编排技术比如2014 年 Google 开源的 Kubernetes</li><li>创建流程 <ul><li>搭建 Kubernetes 集群</li><li>构建容器镜像</li><li>部署镜像</li></ul></li><li>容器时代网站部署架构</li><li><img src="'+n+'" alt="容器时代网站部署架构"></li></ul></li><li>2014——Google 开源Docker 发布Kubernetes</li><li>2015——OCI组织成立</li><li>2015——CNCF 组织成立</li><li>2017——Docker 宣布支持 Kubernetes <ul><li>问题 容器时代架构：1.需要去规划节点和 Pod的 CPU、内存、磁盘等资源 2.需要编写复杂的YAML去部署 Pod、服务，需要经常排查 Pod 出现的异常 3.需要学习专业的运维知识</li></ul></li></ul></li><li>Serverless 时代：指构建和运行不需要服务器管理的一种概念。前面三种电商网站部署的方式，都属于Serverful的架构它就像使用低级的汇编语言编程 而Serverless的架构就像使用 Python 这样的高级语言进行编程 <ul><li>2014——Lambda</li><li>2017——函数计算</li><li>2017——云函数</li><li>2018.07——knative</li><li>2019——Cloud Run</li><li>2020——</li></ul></li></ul><h3 id="serverless的实现" tabindex="-1">Serverless的实现 <a class="header-anchor" href="#serverless的实现" aria-label="Permalink to &quot;Serverless的实现&quot;">​</a></h3><p><strong>BaaS(后端即服务)</strong>：</p><p>将后端能力封装成了服务，并以接口的形式提供服务</p><p><strong>FaaS(函数即服务)</strong>：</p><p>提供了运行函数代码的能力，并且具有自动弹性伸缩</p><h3 id="serverless的网站架构" tabindex="-1">Serverless的网站架构 <a class="header-anchor" href="#serverless的网站架构" aria-label="Permalink to &quot;Serverless的网站架构&quot;">​</a></h3><p><img src="'+i+`" alt="Serverless时代的网站架构"></p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ul><li>物理机时代：2000年之前，我们需要通过物理机部署网站</li><li>虚拟机时代：2000 年之后，虚拟化技术发展成熟，云计算行业蓬勃发展，我们可以基于laaS和PaaS 部署应用，提高稳定性</li><li>容器时代：2013年云计算进入容器时代，我们可以通过容器技术打包应用及运行依赖，不用关心运行环境</li><li>Serverless 时代：2017年后，云计算进入 Serverless 时代，我们不再需要关心服务器应用也天然具有弹性</li></ul><p>Serverless 技术</p><ul><li>能够让我们不再关心传统的运维工作，让我们更专注于业务的实现以更快的速度、更低的成本完成应用的开发迭代，进而创造出更大的价值</li></ul><h2 id="serverle-基础概念" tabindex="-1">Serverle 基础概念 <a class="header-anchor" href="#serverle-基础概念" aria-label="Permalink to &quot;Serverle 基础概念&quot;">​</a></h2><h3 id="广义的-serverless" tabindex="-1">广义的 Serverless <a class="header-anchor" href="#广义的-serverless" aria-label="Permalink to &quot;广义的 Serverless&quot;">​</a></h3><p>广义的 Serverless 是指构建和运行软件时不需要关心服务器的一种架构思想</p><p>基于Serverless 思想实现的软件架构就是Serverless 架构</p><ul><li>备份容灾</li><li>弹性伸缩</li><li>日志监控</li></ul><p>Serverless 就是为了解决上述这些问题诞生的</p><h4 id="serverless-和-serverful-的架构区别" tabindex="-1">Serverless 和 Serverful 的架构区别 <a class="header-anchor" href="#serverless-和-serverful-的架构区别" aria-label="Permalink to &quot;Serverless 和 Serverful 的架构区别&quot;">​</a></h4><ul><li>资源分配：不用关心应用运行的资源，只提供一份代码就行</li><li>计费方式：按实际使用量计费，计费粒度也精确到了毫秒级</li><li>弹性伸缩：可以快速根据业务并发扩容更多的实例甚至允许缩容到零实例状态来实现零费用</li></ul><p>一个应用如果是<strong>Serverless 架构的，必须要实现自动弹性伸缩和按量付费</strong></p><p>这也是 Serverless 的核心特点</p><h3 id="狭义的-serverless" tabindex="-1">狭义的 Serverless <a class="header-anchor" href="#狭义的-serverless" aria-label="Permalink to &quot;狭义的 Serverless&quot;">​</a></h3><p>FaaS Function as a Service</p><ul><li>Lambda</li><li>Azure Functions</li><li>函数计算</li><li>云函数</li></ul><p>BaaS Backend as a Service</p><ul><li>云数据库</li><li>文件存储</li><li>消息队列</li><li>OAuth</li></ul><p>![狭义的 Serverless](.\\img\\狭义的 Serverless.jpg)</p><p>狭义的 Serverless 是 FaaS 和 BaaS 的组合</p><h3 id="什么不是-serverless" tabindex="-1">什么不是 Serverless <a class="header-anchor" href="#什么不是-serverless" aria-label="Permalink to &quot;什么不是 Serverless&quot;">​</a></h3><p>1.PaaS(平台即服务)云计算虚拟机时代的主要形态之一，但不是Serverless</p><p>2.Kubernetes：本身也不是 Serverless，只是在概念方面有些类似</p><ul><li>Kubernetes 是一种容器编排技术基于Kubernetes，你能很方便地进行 Pod的管理，并且实现应用的弹性伸缩</li><li>从运维的角度来看主流的 Kubernetes 服务提供商，提供的都是 Kubernetes 集群托管和运维服务</li><li>从成本的角度来看Kubernetes 按照资源数量计费</li></ul><p>3.云原生指的是原生为云设计的架构模式</p><ul><li>Serverless 是云原生的一种实现</li><li>云原生的另一种实现是 Kubernetes</li></ul><h3 id="相关技术" tabindex="-1">相关技术 <a class="header-anchor" href="#相关技术" aria-label="Permalink to &quot;相关技术&quot;">​</a></h3><h4 id="laas-基设施即服务" tabindex="-1">laaS(基设施即服务) <a class="header-anchor" href="#laas-基设施即服务" aria-label="Permalink to &quot;laaS(基设施即服务)&quot;">​</a></h4><p>略</p><h4 id="paas-平台即服务" tabindex="-1">Paas(平台即服务) <a class="header-anchor" href="#paas-平台即服务" aria-label="Permalink to &quot;Paas(平台即服务)&quot;">​</a></h4><p>PaaS(平台即服务)云计算虚拟机时代的主要形态之一</p><ul><li>付费标准：按资源付费，而不是按实际使用量付费</li><li>弹性伸缩：只能针对底层的服务器进行扩缩容</li></ul><h4 id="faas-function-as-a-service-函数即服务" tabindex="-1">FaaS(Function as a Service)(函数即服务) <a class="header-anchor" href="#faas-function-as-a-service-函数即服务" aria-label="Permalink to &quot;FaaS(Function as a Service)(函数即服务)&quot;">​</a></h4><p>![FaaS (Function as a Service)](.\\img\\FaaS (Function as a Service).jpg)</p><h5 id="特征-特点" tabindex="-1">特征|特点 <a class="header-anchor" href="#特征-特点" aria-label="Permalink to &quot;特征|特点&quot;">​</a></h5><ul><li>无需运维</li><li>按量付费</li><li>自动弹性伸缩</li><li>事件驱动</li></ul><h5 id="基于faas实现接口" tabindex="-1">基于FaaS实现接口 <a class="header-anchor" href="#基于faas实现接口" aria-label="Permalink to &quot;基于FaaS实现接口&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // data 数组就是接口的返回数据</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> data</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="实现一个计算pv的接口" tabindex="-1">实现一个计算PV的接口 <a class="header-anchor" href="#实现一个计算pv的接口" aria-label="Permalink to &quot;实现一个计算PV的接口&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用全局变量存储当前 PV</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> pv</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 用户每访问一次就给 PV 的值加 1</span></span>
<span class="line"><span style="color:#E06C75;">    pv</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> pv</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>当你把函数部署到 FaaS，然后访问接口时，会发现得到的结果永远都是1</p><p>这是 FaaS的另一个特点，<strong>无状态</strong></p><h4 id="baas-backend-as-a-service-后端即服务" tabindex="-1">BaaS(Backend as a Service)(后端即服务) <a class="header-anchor" href="#baas-backend-as-a-service-后端即服务" aria-label="Permalink to &quot;BaaS(Backend as a Service)(后端即服务)&quot;">​</a></h4><p>BaaS本质上就是把后端功能封装起来，以接口的形式提供服务</p><p>常见的BaaS产品有AWS DynamoDB、阿里云表格存储、消息中间件等。这些服务都可以通过API进行访问</p><p><strong>实现 pv 统计功能</strong>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> tablestore</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;tablestore&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 从表格存储中获取当前PV</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> pv</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> tablestore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 用户每访问一次就给 pv 的值加1</span></span>
<span class="line"><span style="color:#E06C75;">    pv</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 保存最新PV</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> tablestore</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pv</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> pv</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="技术总结" tabindex="-1">技术总结 <a class="header-anchor" href="#技术总结" aria-label="Permalink to &quot;技术总结&quot;">​</a></h4><p>基于FaaS和Baas的架构，是一种计算和存储分离的架构</p><h4 id="容器技术-docker、containerd-等" tabindex="-1">容器技术(Docker、containerd 等) <a class="header-anchor" href="#容器技术-docker、containerd-等" aria-label="Permalink to &quot;容器技术(Docker、containerd 等)&quot;">​</a></h4><p>略</p><h3 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h3><p>开发简单、节省成本、提高效率、无需运维、自动弹性伸缩、易于扩展、降低风险</p><h3 id="劣势" tabindex="-1">劣势 <a class="header-anchor" href="#劣势" aria-label="Permalink to &quot;劣势&quot;">​</a></h3><p>依赖第三方云服务（一个云厂商转移到另一个云厂商成本高）、底层硬件多样性和不确定性、应用性能瓶颈、函数通信效率低、开发调试复杂</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>广义上来讲，Serverless 是一种架构思想</li><li>狭义上来讲，Serverless是Faas和 BaaS 的组合</li></ul><p>Serverless 架构的主要特点是按量付费、弹性伸缩、不用运维</p><h2 id="serverless-的能力" tabindex="-1">Serverless 的能力 <a class="header-anchor" href="#serverless-的能力" aria-label="Permalink to &quot;Serverless 的能力&quot;">​</a></h2><h3 id="一、计算能力" tabindex="-1">一、计算能力 <a class="header-anchor" href="#一、计算能力" aria-label="Permalink to &quot;一、计算能力&quot;">​</a></h3><p>资源按需分配，无需申请资源</p><p>Mwm：租户级别强镜离 ，Docker: 进程级别隔离</p><p>Mwm+Docker 轻量级资源毫秒级启动</p><p>实时扩容，阶梯缩容，按需收费</p><h3 id="二、系统运维能力" tabindex="-1">二、系统运维能力 <a class="header-anchor" href="#二、系统运维能力" aria-label="Permalink to &quot;二、系统运维能力&quot;">​</a></h3><h4 id="_1-性能保障" tabindex="-1">1.性能保障 <a class="header-anchor" href="#_1-性能保障" aria-label="Permalink to &quot;1.性能保障&quot;">​</a></h4><p>(1) 整个链路耗时毫秒级内，并支持 VPC 内网访问</p><h4 id="_2-安全保障" tabindex="-1">2.安全保障 <a class="header-anchor" href="#_2-安全保障" aria-label="Permalink to &quot;2.安全保障&quot;">​</a></h4><ul><li>(1)资源对用户不可见，安全由腾讯云提供专业的保障</li><li>(2)提供进程级和用户级安全隔离</li><li>(3)访问控制管理</li></ul><h4 id="_3自动性护缩容" tabindex="-1">3自动性护缩容 <a class="header-anchor" href="#_3自动性护缩容" aria-label="Permalink to &quot;3自动性护缩容&quot;">​</a></h4><ul><li>(1) 根据 CPU 内容网络 IO 自动扩容底层资源</li><li>(2) 根据请求数自动扩缩容函数实例，业务高峰期扩容，满足业务高并发需求，业务低峰期缩容，释放资源，降低成本</li></ul><h4 id="_4-自愈能力" tabindex="-1">4.自愈能力 <a class="header-anchor" href="#_4-自愈能力" aria-label="Permalink to &quot;4.自愈能力&quot;">​</a></h4><p>(1) 每一次请求都是一个健康的实例</p><p>Serverless 中云函数被第一次调用会执行冷启动，Serverless 中云函数被多次连续调用会执行热启动</p><p><strong>冷启动</strong>是指你在服务器中新开辟一块空间供一个函数实例运行,这个过程有点像你把这个函数放到虚拟机里去运行，每次运行前都要先启动虚拟机加载这个函数，以前冷启动非常耗时，但是目前云厂商已经能做到毫秒级别的冷启动，这个过程我们也不需要关心，但是需要注意的是使用 Seesion 的时候可能会导致 Session 丢失，所以我们的 Seesion 建议保存到数据库。</p><p><strong>热启动</strong>则是说如果一个云函数被持续触发，那我就先不释放这个云函数实例，下次请求仍然由之前已经创建了的云函数实例来运行,就好比我们打开虚拟机运行完这个函数之后没有关闭虚拟机，而是让它待机，等待下一次被重新触发调用运行，这样做的好处就是省去了</p>`,106)]))}const S=a(o,[["render",p]]);export{v as __pageData,S as default};
