import{_ as a,c as l,o as p,ah as e}from"./chunks/framework.DqD713j2.js";const n="/FrontEndLearnNotes/assets/%E5%A4%A7%E5%8E%82%E7%A0%94%E5%8F%91%E6%9E%B6%E6%9E%84%E5%9B%BE.C9ggW93K.jpg",o="/FrontEndLearnNotes/assets/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.C3lJqDOO.png",r="/FrontEndLearnNotes/assets/image-20240228220000651.DG761bZg.png",t="/FrontEndLearnNotes/assets/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%89%A7%E8%A1%8C%E7%9A%84%E5%85%A8%E8%BF%87%E7%A8%8B.DwWU0-U2.jpg",c="/FrontEndLearnNotes/assets/%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1%E9%98%B6%E6%AE%B5.BIrtGwfe.jpg",i="/FrontEndLearnNotes/assets/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%96%BD%E9%98%B6%E6%AE%B5.DE674sNk.jpg",B="/FrontEndLearnNotes/assets/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%B6%E6%9E%84%E5%9B%BE.pj3061xy.jpg",y="/FrontEndLearnNotes/assets/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%B6%E6%9E%84%E5%9B%BE%E8%A7%86%E8%A7%89.k_XgX55s.jpg",h=JSON.parse('{"title":"脚手架架构设计和框架搭建开发","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Project-Engineering/项目系统架构/脚手架架构设计和框架搭建开发.md","filePath":"Document/Project-Engineering/项目系统架构/脚手架架构设计和框架搭建开发.md","lastUpdated":1750954157000}'),b={name:"Document/Project-Engineering/项目系统架构/脚手架架构设计和框架搭建开发.md"};function u(d,s,F,m,C,A){return p(),l("div",null,s[0]||(s[0]=[e('<h1 id="脚手架架构设计和框架搭建开发" tabindex="-1">脚手架架构设计和框架搭建开发 <a class="header-anchor" href="#脚手架架构设计和框架搭建开发" aria-label="Permalink to &quot;脚手架架构设计和框架搭建开发&quot;">​</a></h1><p>项目源码：<a href="https://github.com/imooc-lego/imooc-cli" target="_blank" rel="noreferrer">imooc-lego/imooc-cli: 慕课网前端统一研发脚手架 (github.com)</a></p><ul><li>脚手架的实现原理</li><li>Lerna 库的常见用法</li><li>架构设计技巧和架构图绘制方法</li></ul><h2 id="主要内容" tabindex="-1">主要内容 <a class="header-anchor" href="#主要内容" aria-label="Permalink to &quot;主要内容&quot;">​</a></h2><ul><li>学习如何以架构师的角度思考基础架构问题</li><li>专注多 Package 项目管理痛点和解决方案，基于 Lerna 脚手架框架搭建</li><li>imooc-cli 脚手架需求分析和架构设计，架构设计图</li></ul><h3 id="附赠内容" tabindex="-1">附赠内容 <a class="header-anchor" href="#附赠内容" aria-label="Permalink to &quot;附赠内容&quot;">​</a></h3><ul><li>脚手架调试技巧</li><li>Lerna 源码分析</li><li>Node 的 module 模块分析 yargs 使用方法</li><li>剖析 Lerna 架构设计</li></ul><h3 id="学习方法" tabindex="-1">学习方法 <a class="header-anchor" href="#学习方法" aria-label="Permalink to &quot;学习方法&quot;">​</a></h3><p>架构三部曲：掌握原理-&gt; 独立思考-&gt; 总结反思</p><p>深度剖析优秀开源项目，由表及里，由浅入深</p><p>视角切换：多切换到架构师视角，从全局思考问题</p><p>优秀的程序员不止能够实现功能，更能读懂别人的代码，读懂别人的想法</p><p>从知名的开源项目中汲取养分，为我所用，助我成长</p><h3 id="前端研发脚手架-imooc-cli-核心功能演示" tabindex="-1">前端研发脚手架 imooc-cli 核心功能演示 <a class="header-anchor" href="#前端研发脚手架-imooc-cli-核心功能演示" aria-label="Permalink to &quot;前端研发脚手架 imooc-cli 核心功能演示&quot;">​</a></h3><ul><li>安装 imooc-cli 脚手架： <code>npm i -g @imooc-cli/core</code></li><li>查看脚手架相关内容：<code>imooc-cli</code></li><li>通过脚手架新建项目：<code>imooc-cli init</code></li><li>项目发布到测试环境： <code>imooc-cli publish</code></li><li>项目发布到正式环境：<code>imooc-cli publish --prod</code></li></ul><h2 id="站在前端研发的视角-分析开发脚手架的必要性" tabindex="-1">站在前端研发的视角，分析开发脚手架的必要性 <a class="header-anchor" href="#站在前端研发的视角-分析开发脚手架的必要性" aria-label="Permalink to &quot;站在前端研发的视角，分析开发脚手架的必要性&quot;">​</a></h2><h3 id="研发效能" tabindex="-1">研发效能 <a class="header-anchor" href="#研发效能" aria-label="Permalink to &quot;研发效能&quot;">​</a></h3><p>开发项目脚手架的核心目标是：提升前端研发效能</p><p>大厂研发架构图：</p><p><img src="'+n+'" alt="大厂研发架构图"></p><p><strong>创建项目 + 通用代码</strong>：埋点、HTTP 请求、工具方法、组件库</p><p><strong>git 操作</strong>：创建仓库、代码冲突、远程代码同步、创建版本、发布打 tag</p><p><strong>构建 + 发布上线</strong>：依赖安装和构建、资源上传 CDN、域名绑定、测试/正式服务器</p><h3 id="脚手架核心价值" tabindex="-1">脚手架核心价值 <a class="header-anchor" href="#脚手架核心价值" aria-label="Permalink to &quot;脚手架核心价值&quot;">​</a></h3><p><strong>将研发过程</strong></p><ul><li>自动化：项目重复代码拷贝、<code>git</code> 操作、发布上线操作</li><li>标准化：项目创建、git flow、发布流程、回滚流程</li><li>数据化：研发过程系统化、数据化、使得研发过程可量化</li></ul><h3 id="脚手架和自动化构建工具的区别" tabindex="-1">脚手架和自动化构建工具的区别 <a class="header-anchor" href="#脚手架和自动化构建工具的区别" aria-label="Permalink to &quot;脚手架和自动化构建工具的区别&quot;">​</a></h3><p>问题：<code>jenkins</code>，<code>travis</code> 等自动化构建工具已经很成熟了，为什么还要自研脚手架？</p><ul><li>不满足需求：<code>jenkins</code>，<code>travis</code> 通常在 <code>git hooks</code> 中触发，需要在服务端执行，无法覆盖研发人员本地的功能，如：创建项目自动化，本地 <code>git</code> 操作自动化等。</li><li>定制复杂： <code>jenkins</code>，<code>travis</code> 定制过程需要开发插件，其过程较为复杂，需要使用 <code>java</code> 语言，对前端同学不太友好。</li></ul><h2 id="从使用的角度理解什么是脚手架" tabindex="-1">从使用的角度理解什么是脚手架 <a class="header-anchor" href="#从使用的角度理解什么是脚手架" aria-label="Permalink to &quot;从使用的角度理解什么是脚手架&quot;">​</a></h2><p>脚手架本质是一个操作系统的客户端，他通过命令行执行，比如：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">vue</span><span style="color:#98C379;"> create</span><span style="color:#98C379;"> vue-test-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面这条命令由 <strong>3</strong> 个部分组成：</p><ul><li><strong>主命令</strong>：<code>vue</code></li><li><strong>command</strong>：<code>create</code></li><li><strong>command 的 param</strong>：<code>vue-test-app</code></li></ul><p>它表示创建一个 <code>vue</code> 项目，项目的名称为 <code>vue-test-app</code>，这是一个比较简单的脚手架命令，但实际场景往往更加复杂，比如：</p><p>当前目录已经有文件了，我们需要覆盖当前目录的文件，强制进行安装 <code>vue</code> 项目，此时我们就可以输入</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">vue</span><span style="color:#98C379;"> create</span><span style="color:#98C379;"> vue-test-app</span><span style="color:#D19A66;"> --force</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里的 <code>--force</code> 叫做 <code>option</code> ，用来辅助脚手架确认在特定场景下用户的选择（可以理解为配置）。还有一种场景：</p><p>通过 <code>vue create</code> 创建项目时，会自动执行 <code>npm install</code> 帮助用户安装依赖，如果我们希望使用淘宝源来安装，可以输入命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">vue</span><span style="color:#98C379;"> create</span><span style="color:#98C379;"> vue-test-app</span><span style="color:#D19A66;"> --force</span><span style="color:#D19A66;"> -r</span><span style="color:#98C379;"> https://registry.npm.taobao.org</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里的 <code>-r</code> 也叫做 <code>option</code>，它与 <code>--force</code> 不同的是它使用 <code>-</code> ，并且使用简写，这里的 <code>-r</code> 也可以替换成 <code>--registry</code>，输入下面的命令就可以看到 <code>vue create</code> 支持的所有 <code>options</code>。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">vue</span><span style="color:#98C379;"> create</span><span style="color:#D19A66;"> --helps</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>-r</code> 后面的 <code>https://registry.npm.taobao.org</code> 成为 <code>option</code> 的 <code>param</code> ，其实 <code>--force</code> 可以理解为：<code>--force true</code> ，简写为 <code>--force</code> 或 <code>-f</code> 。</p><h3 id="脚手架的执行原理" tabindex="-1">脚手架的执行原理 <a class="header-anchor" href="#脚手架的执行原理" aria-label="Permalink to &quot;脚手架的执行原理&quot;">​</a></h3><p><img src="'+o+'" alt="img"></p><p><strong>脚手架执行原理如下</strong></p><ul><li>在终端输入<code>vue create project</code></li><li>终端解析出 <code>vue</code></li><li>在环境变量中通过 <code>which vue</code> 找到 <code>vue</code> 命令, 目录所在 <code>/node/bin/vue</code>，所以我们执行的 <code>vue</code>，实际上运行的是<code>/node/bin/vue</code> 的这个 <code>vue</code></li><li>这个 <code>vue</code> 只是一个链接，终端根据 <code>vue</code> 命令链接到实际文件 <code>/node/lib/node_modules/@vue/cli/bin/vue.js</code></li><li>终端利用 <code>node</code> 执行 <code>vue.js</code></li><li><code>vue.js</code> 解析 <code>command/options</code> 以及 <code>param</code></li><li><code>vue.js</code> 执行 <code>command</code></li><li>执行完毕，退出执行</li></ul><h3 id="从应用角度-如何开发一个脚手架" tabindex="-1">从应用角度，如何开发一个脚手架 <a class="header-anchor" href="#从应用角度-如何开发一个脚手架" aria-label="Permalink to &quot;从应用角度，如何开发一个脚手架&quot;">​</a></h3><p><strong>以 vue-cli 为例</strong></p><ul><li>开发一个 <code>npm</code> 项目，该项目中应包含一个 <code>bin/vue.js</code> 文件，并将这个项目发布到 <code>npm</code>；</li><li>将这个项目发布到 <code>npm</code></li><li>将 <code>npm</code> 项目上的项目全局安装到 <code>node</code> 的 <code>lib/node_modules</code></li><li>在 <code>node</code> 的 <code>bin</code> 目录下配置 <code>vue</code> 软链接指向 <code>lib/node_modules/@vue/cli/bin/vue.js</code></li></ul><p>这样我们在执行 <code>vue</code> 命令的时候就可以找到 <code>vue.js</code> 进行相关操作。</p><h2 id="脚手架的实现原理问题" tabindex="-1">脚手架的实现原理问题 <a class="header-anchor" href="#脚手架的实现原理问题" aria-label="Permalink to &quot;脚手架的实现原理问题&quot;">​</a></h2><p>可以使用(Node.js)、Python、Ruby 等各种语言编写。</p><p>执行流程原理图：</p><p><img src="'+r+`" alt="image-20240228220000651"></p><p>这里需要理解几个基本概念</p><ul><li>环境变量(相当于操作系统级别的全局变量)</li><li>软链接(相当于 Windows 系统的快捷方式)</li><li>这里:vue、which、env、node 本质都是脚手架</li></ul><p>脚手架的执行原理如下：</p><ul><li>在终端输入：<code>vue create vue-test-app</code></li><li>终端解析出 <code>vue</code>命令</li><li>终端在环境变量中找到 <code>vue</code> 命令终端</li><li>根据 <code>vue</code> 命令链接到实际文件 vue.js 终端利用 <code>node</code> 执行 <code>vue.js</code></li><li><code>vue.js</code> 解析 command/options</li><li><code>vue.js</code> 执行 command</li><li>执行完毕，退出执行</li></ul><h3 id="三个问题" tabindex="-1">三个问题 <a class="header-anchor" href="#三个问题" aria-label="Permalink to &quot;三个问题&quot;">​</a></h3><p>如果你能回答以下 3 个问题，就掌握了脚手架的实现原理：</p><p><strong>1.为什么全局安装 @vue/cli 后会添加一个 vue 的命令呢？</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> @vue/cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行 <code>vue</code> 命令时，实际走的是 <code>node/bin/vue</code> ，而这个文件只是一个软连接，指向<code>lib/node_modules/@vue/cli/bin/vue.js</code>。</p><p>回到上级目录 <code>lib/node_modules/@vue/cli</code>，打开 <code>package.json</code> 文件，里面的 <code>bin</code> 字段定义了这样的绑定关系。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// lib/node_modules/@vue/cli/package.json</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#98C379;">  &quot;bin&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">    &quot;vue&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bin/vue.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>总结：执行 <code>vue</code> 命令的时候，启动的是 <code>bin/vue</code> 这个文件，而这个文件指向<code>lib/node_modules/@vue/cli/bin/vue.js</code> ，所以最终启动的是 <code>lib/node_modules/@vue/cli/bin/vue.js</code></p><p>答：这是因为通过 which vue 后我们会看到 vue 所在目录，而这个 vue 是一个软链接，指向的是@vue/cli。确定这个 vue 命令名称的是在<code>node/v12.16.1/lib/node_modules/@vue/cli</code>目录下 package.json 中的 bin 的键值。</p><p><strong>2.全局安装 @vue/cli 的时候发生了什么？</strong></p><ul><li>1.把 <code>@vue/cli</code> 的包通过 <code>npm</code> 安装下载到 <code>node/lib/node_modules</code> 这个目录下。</li><li>2.解析 <code>package.json</code> 文件 ，根据文件中的 <code>bin</code> 字段，在 <code>/node/bin</code> 目录下创建软连接，软连接指向 <code>bin</code> 字段中规定的文件，也就是 <code>lib/node_modules/@vue/cli/bin/vue.js</code>。</li></ul><p>答：</p><p>1.执行 npm install -g @vue/cli 的时候，首先 node 会把我们当前包下载到 node 下的 node_modules 中去。</p><p>2.下载完成后，会在下载好的包中查找 package.json 中是否有 bin，如果有，会通过 package.json 中的 bin 中的键去配置软链接。</p><p>上面两个问题其实问题二在前，问题一在后，两个问题说的是一个流程的双向解释，理解了问题二，问题一就清楚了。</p><p><strong>3.执行 <code>vue</code> 命令时发生了什么？</strong></p><ul><li>根据 <code>which vue</code> 这条指令（在环境变量中查找），找到 <code>vue</code> 命令所在文件</li><li>运行这个文件，执行 <code>vue</code> 和执行 <code>node/bin/vue</code> 的结果是一样的</li><li>根据软连接，执行真实的 <code>lib/node_modules/@vue/cli/bin/vue.js</code> 文件</li></ul><p>答：</p><p>1.首先执行 vue 命令，与执行 which vue 打印出来的地址 效果是等价的(即执行的是 which vue 的那个软连接：/Users/test-cli/.nvm/versions/node/v12.16.1/bin/vue)。</p><p>2.而软连接又指向它的实际文件存在路径：(…/lib/node_modules/@vue/cli/bin/vue.js)。</p><p>3.一个 test.js 文件可以通过 node 执行，但不能单独执行，这是因为它没有可执行权限。 ————我们在<code>/Users/test-cli/Desktop</code>目录下新建一个 test.js 文件，我们可以给这个 js 文件一个执行权限：</p><p>chmod 777 test.js ，然后在命令行直接输入：<code>./test.js</code>仍然不可以执行。</p><p>这是因为 js 文件需要一个解释器来进行执行，这个 node 就是一个解释器。(.py 文件需要 python 解释器执行，.java 文件需要 java 解释器进行执行)。</p><p><strong>4.为什么 <code>vue</code> 指向一个 <code>js</code> 文件，我们却可以直接通过 <code>vue</code> 命令去执行它？</strong></p><p>查看 <code>lib/node_modules/@vue/cli/bin/vue.js</code> 文件的源码，会发现第一行代码是这样的</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/env node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>告诉我们的操作系统，直接调用这个文件的时候，到环境变量中查找 node 命令执行。 (/usr/bin/env 是我们的环境变量)</p><p>使用<code>./test.js</code> 命令执行 js 文件：<code>test.js</code>文件中第一行加入这行代码 <code>#!/usr/bin/env node</code> ，然后命令行直接输入 ：<code>./test.js</code> 即可执行这个 js 文件。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 因为这句命令等于直接执行node 命令</span></span>
<span class="line"><span style="color:#61AFEF;">/usr/bin/env</span><span style="color:#98C379;"> node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果不想用 <code>./test.js</code> 这样的方式执行 js 文件，我们想通过一个像<code>vue</code>命令，创建个 <code>test</code> 命令来 指向执行这个<code>test.js</code>文件，该如何做呢？</p><ul><li>第一种方式，我们去找环境变量，通过命令： <code>echo $PATH</code>，找到环境变量 <ul><li>1.创建一个环境变量： <ul><li>1.找到 node 的 bin 目录：<code>cd /Users/admin/.nvm/versions/node/v12.16.1/bin</code></li><li>2.创建环境变量——软连接：<code>ln -s test /Users/admin/Desktop/test.js</code>，格式：<code>ln -s [目录文件] [变量名]</code></li></ul></li><li>2.软连接创建完毕后，就可以看到一个 test 软连接，我们在任何目录的命令行执行 <code>test</code> 就可以执行<code>test.js</code>文件了。</li></ul></li></ul><p>扩展一下，有的同学可能会问下面两种写法的区别?</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 第一种是在环境变量中查找 node（可靠的）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 第二种是直接执行/usr/bin/目录下的node</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="脚手架原理进阶" tabindex="-1">脚手架原理进阶 <a class="header-anchor" href="#脚手架原理进阶" aria-label="Permalink to &quot;脚手架原理进阶&quot;">​</a></h3><p>掌握上节内容后，我们可以继续尝试回答以下 2 个问题：</p><p><strong>5.为什么说脚手架本质是操作系统的客户端？它和我们在 PC 上安装的应用/软件有什么区别？</strong></p><p>因为 <code>node</code> 本身是一个客户端，在 <code>windows</code> 系统下，可以看到 <code>node</code> 的安装目录中，<code>node</code> 是以 <code>node.exe</code> 的形式出现的。</p><p>而我们编写的脚手架文件，如 <code>vue.js</code> 只是 <code>node</code> 运行时的一个参数。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">node</span><span style="color:#98C379;"> vue.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>答：脚手架执行起来的本质是靠 node 这个命令，node 是一个操作系统客户端，而 test.js 这个文件仅仅是作为一个参数注入到 node 命令中。</p><p>node 本质上是一个可执行文件(在 window 操作系统中可以看到 node 的扩展名为.exe 的)。</p><p>node 和 PC 上安装的应用/软件 本质来说没有区别。区别仅仅是安装的应用软件会提供一个 GUI，而 node 并没有提供 GUI，Node 通过命令行参数执行</p><p><strong>6.如何为 node 脚手架创建别名？</strong></p><p>软连接是可以嵌套的，只需让别名指向原来的名字即可。</p><p>方法一：即为上文提到的创建一个软连接。 接着，我们希望继续为上文提到的 <code>test</code> 软连接继续添加一个别名，我们需要这么做 在上文的 bin 目录下，执行命令 <code>ln -s ./test test2</code> 即 软连接可以嵌套。</p><p><strong>描述脚手架命令执行的全过程</strong></p><p><img src="`+t+`" alt="img"></p><p>过程：</p><h1 id="脚手架框架搭建" tabindex="-1">脚手架框架搭建 <a class="header-anchor" href="#脚手架框架搭建" aria-label="Permalink to &quot;脚手架框架搭建&quot;">​</a></h1><h2 id="_1-脚手架开发入门" tabindex="-1">1.脚手架开发入门 <a class="header-anchor" href="#_1-脚手架开发入门" aria-label="Permalink to &quot;1.脚手架开发入门&quot;">​</a></h2><p>1.创建 <code>npm</code> 项目</p><p>2.创建脚手架入口文件，最上方添加</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/env node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.配置 <code>package.json</code> 文件，添加 <code>bin</code> 属性，指定脚手架名称和入口文件地址例如 vue 的</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;bin&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;vue&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bin/vue.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>4.编写脚手架代码</p><p>5.将脚手架发布到 <code>npm</code></p><p>6.就可以在 npm 安装脚手架了</p><h2 id="_2-脚手架使用流程" tabindex="-1">2.脚手架使用流程 <a class="header-anchor" href="#_2-脚手架使用流程" aria-label="Permalink to &quot;2.脚手架使用流程&quot;">​</a></h2><p>以 @vue/cli 脚手架为例</p><p>1.安装脚手架</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">npm</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;">g</span><span style="color:#ABB2BF;"> @</span><span style="color:#E06C75;">vue</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.使用脚手架</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">vue</span><span style="color:#E06C75;"> create</span><span style="color:#E06C75;"> project</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-脚手架开发难点" tabindex="-1">3.脚手架开发难点 <a class="header-anchor" href="#_3-脚手架开发难点" aria-label="Permalink to &quot;3.脚手架开发难点&quot;">​</a></h2><ul><li><p>分包：将复杂的系统拆分成多个模块</p></li><li><p>命令注册：</p></li><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">vue</span><span style="color:#98C379;"> create</span></span>
<span class="line"><span style="color:#61AFEF;">vue</span><span style="color:#98C379;"> add</span></span>
<span class="line"><span style="color:#61AFEF;">vue</span><span style="color:#98C379;"> invoke</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>参数解析：</p></li><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">vue</span><span style="color:#98C379;"> command</span><span style="color:#ABB2BF;"> [options] &lt;params&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>options 全称：<code>--version</code>、 <code>--help</code></li><li>options 简写：<code>-v</code>、<code>-h</code></li><li>带 params 的 options：<code>--path /Users/sam/Desktop/vue-test</code></li></ul></li><li><p>帮助文档</p><ul><li>global help <ul><li>Usage</li><li>Options</li><li>Commands</li></ul></li></ul><p>示例：<code>vue</code>的帮助信息：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><p>还有很多，比如：</p><ul><li><p>命令行交互（提示和选择）</p></li><li><p>日志打印（打印信息）</p></li><li><p>命令行文字变色</p></li><li><p>网络通信：<code>HTTP/WebSocket</code></p></li><li><p>文件处理</p></li><li><p>等等... ...</p></li></ul><h2 id="_4-开发一个简单的脚手架" tabindex="-1">4.开发一个简单的脚手架 <a class="header-anchor" href="#_4-开发一个简单的脚手架" aria-label="Permalink to &quot;4.开发一个简单的脚手架&quot;">​</a></h2><h3 id="test-cli-脚手架开发" tabindex="-1">test-cli 脚手架开发 <a class="header-anchor" href="#test-cli-脚手架开发" aria-label="Permalink to &quot;test-cli 脚手架开发&quot;">​</a></h3><p>1.新建项目文件夹 <code>test-cli</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">mkdir</span><span style="color:#98C379;"> test-cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.进入到 <code>test-cli</code> ，- 初始化 <code>npm</code> 包，通过 <code>code .</code> 可以快速使用 <code>vscode</code> 打开当前文件夹。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 进入项目文件夹</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> test-cli</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 初始化项目package.json</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> init</span><span style="color:#D19A66;"> -y</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 使用VSCode打开当前项目</span></span>
<span class="line"><span style="color:#61AFEF;">code</span><span style="color:#98C379;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>3.添加 <code>bin/index.js</code> 文件，内容如下</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;🚀🚀~ 脚手架开发 测试&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>4.修改 <code>package.json</code> 文件，添加 <code>bin</code> 属性，指定脚手架名称和入口文件地址</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// package.json</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test-cli-0174&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;bin&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;test-cli&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bin/index.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;main&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;test&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;echo </span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">Error: no test specified</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;"> &amp;amp;&amp;amp; exit 1&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;keywords&quot;</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;author&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;license&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ISC&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>5.发布脚手架包到 <code>npm</code></p><p>发布 npm 包看教程：👉👉 <a href="https://juejin.cn/post/6997182885769773063" target="_blank" rel="noreferrer">从 0 到 1 发布属于自己的库到 npm </a></p><p>6.全局安装刚刚发布的脚手架</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> test-cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>7.安装脚手架后，在命令行执行命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">test-cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>结果会在控制台输出： <code>🚀🚀~ 脚手架开发 测试</code></p><p>8.看看 <code>test-cli</code> 命令的软链接指向</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">which</span><span style="color:#98C379;"> test-cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="脚手架本地调试" tabindex="-1">脚手架本地调试 <a class="header-anchor" href="#脚手架本地调试" aria-label="Permalink to &quot;脚手架本地调试&quot;">​</a></h3><p><strong>方式一</strong>：如上文所说，直接在 Desktop 目录下执行以下命令，即调试本地包：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 全局安装自己上传npm的脚手架</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> test-cli</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 移除本地全局安装的脚手架包</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> remove</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> test-cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>方式二</strong>：直接在 test-cli 项目文件目录下，执行以下命令，软链指向的 node_modules 源文件指向本地包：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> link</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>进入到 <code>test-cli</code> 目录中</p><p>先全局移除之前通过 <code>npm</code> 安装的包，然后执行 <code>npm link</code></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> remove</span><span style="color:#98C379;"> test-cli</span><span style="color:#D19A66;"> -g</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> link</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>就会安装本地的脚手架了</p><p>随便修改本地代码后，然后再通过命令 <code>test-cli</code> 去启动脚手架</p><p><strong>方式三</strong>：<strong>分包调试</strong>：如果工程很复杂需要分包</p><p>1.新建一个 <code>test-cli-lib</code> 项目目录，同样进行初始化。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 初始化项目</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> init</span><span style="color:#D19A66;"> -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>2.然后新建 <code>lib/index.js</code> 文件，写上一个方法。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	sum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>3.修改 <code>test-cli-lib</code> 根目录的 <code>package.json</code> 文件中的 <code>main</code> 属性，改成</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;main&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lib/index.js&quot;</span><span style="color:#ABB2BF;">,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4.进入 <code>test-cli-lib</code> 目录 ， 执行 <code>npm link</code> ，把这个包也安装到本地。</p><p>5.进入 <code>test-cli</code> 项目目录，软链接 <code>test-cli-lib</code>项目</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 链接</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> link</span><span style="color:#98C379;"> test-cli-lib</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看链接是否成功</span></span>
<span class="line"><span style="color:#56B6C2;">which</span><span style="color:#98C379;"> test-cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 拓展：解除链接</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># npm unlink test-cli-lib</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>6.链接完后然后手动的修改 <code>package.json</code> 文件中的 <code>dependencies</code> 属性，手动指定<code>test-cli-lib</code>包的版本</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">  &quot;dependencies&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;test-cli-lib&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>7.就可以把这个包连接起来了，然后再修改 <code>test-cli</code> 项目代码：<code>test-cli/bin/index.js</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// test-cli/bin/index.js</span></span>
<span class="line"><span style="color:#ABB2BF;">#</span><span style="color:#56B6C2;">!/</span><span style="color:#E06C75;">usr</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">bin</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">env</span><span style="color:#E06C75;"> node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> lib</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test-cli-lib&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">lib</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;🚀🚀~ 本地脚手架开发 测试!!!!&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>8.运行 <code>test-cli</code> 命令</p><p>可以把函数正常的打印出来了</p><p>注意：当开发完成后需要发布到 <code>npm</code> 上，然后通过 <code>npm</code> 安装的时候，需要执行</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> unlink</span><span style="color:#98C379;">  test-cli</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> unlink</span><span style="color:#98C379;">  test-cli-lib</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> remove</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> test-cli</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> remove</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> test-cli-lib</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后再通过 <code>npm</code> 安装就行了</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> test-cli</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> test-cli-lib</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="脚手架本地调试标准流程总结" tabindex="-1">脚手架本地调试标准流程总结 <a class="header-anchor" href="#脚手架本地调试标准流程总结" aria-label="Permalink to &quot;脚手架本地调试标准流程总结&quot;">​</a></h3><p><strong>链接本地脚手架</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> your-cli-dir</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> link</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>链接本地库文件</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> your-lib-dir</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 链接本地库文件</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> link</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> your-cli-dir</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> link</span><span style="color:#98C379;"> your-lib-dir</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>取消链接本地库文件</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> your-lib-dir</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 取消链接本地库文件</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> unlink</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> your-cli-dir</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># link存在，取消链接</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> unlink</span><span style="color:#98C379;"> your-lib-dir</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># link不存在，删除node_modules</span></span>
<span class="line"><span style="color:#61AFEF;">rm</span><span style="color:#D19A66;"> -rf</span><span style="color:#98C379;"> node_modules</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 安装远程库文件</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -S</span><span style="color:#98C379;"> your-lib-dir</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>理解 npm link</strong></p><ul><li><code>npm link</code>：将当前项目链接到 node 全局 node_modules 中作为一个库文件，并解析 bin 配置创建可执行文件。</li><li><code>npm link your-lib</code>：将当前项目中 node_modules 下指定的库文件链接到 node 全局 node_modules 下的库文件</li></ul><p><strong>理解 npm unlink</strong></p><ul><li><code>npm unlink</code>：将当前项目从 node 全局 node_modules 中移除</li><li><code>npm unlink your-lib</code>：将当前项目中的库文件依赖删除。</li></ul><h3 id="脚手架命令注册和参数解析" tabindex="-1">脚手架命令注册和参数解析 <a class="header-anchor" href="#脚手架命令注册和参数解析" aria-label="Permalink to &quot;脚手架命令注册和参数解析&quot;">​</a></h3><p>process 是 node 的内置库 我们在 index.js 中写代码： <code>console.log(require(&#39;process&#39;))</code> 通过命令行执行 test-test init 会看到 process 有许许多多个属性，其中有一个 argv 属性。 通过分析这个 argv 属性，我们就看到了 init 这个属性。</p><p>因此我们可以通过 argv 来判断是否输入了 init 这个命令。</p><p><code>test-cli</code> 项目，<code>/bin/index.js</code> 文件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> lib</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;imooc-test-lib&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 注册一个命令：imooc-test init</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> argv</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;process&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> command</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> argv</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 截取命令参数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> argv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">option</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">	option</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> option</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;--&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">lib</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#E06C75;">			lib</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">command</span><span style="color:#ABB2BF;">]({ </span><span style="color:#E06C75;">option</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;无效的命令&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;请输入命令&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实现参数解析 --version 和 init --name</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">command</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startswith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;--&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#E5C07B;"> command</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startswith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;-&quot;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> globalOption</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> command</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/--</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">-/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">globaloption</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">globalOption</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;version&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> globaloption</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;V&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 输出版本号</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p><code>test-cli-lib</code> 项目，<code>/lib/index.js</code> 文件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	sum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	mul</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	init</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">option</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;执行init流程&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">option</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="脚手架项目发布" tabindex="-1">脚手架项目发布 <a class="header-anchor" href="#脚手架项目发布" aria-label="Permalink to &quot;脚手架项目发布&quot;">​</a></h3><blockquote><p>npm publish 通过判断 argv 输入的参数，在 test-cli-lib 中与 test-cli 中加入相关逻辑 实现 test-cli init 与 test-cli -V 的输出显示 然后分别发布，remove 掉本地链接。</p></blockquote><p><code>test-cli-lib</code> 项目</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 解除软连接</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> unlink</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 发布（如果版本存在便需要在package.json中升级version版本）</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> publish</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="原生脚手架开发痛点-为什么需要-lerna" tabindex="-1">原生脚手架开发痛点(为什么需要 Lerna) <a class="header-anchor" href="#原生脚手架开发痛点-为什么需要-lerna" aria-label="Permalink to &quot;原生脚手架开发痛点(为什么需要 Lerna)&quot;">​</a></h2><p>痛点一：重复操作</p><ul><li>多 Package 本地 link</li><li>多 Package 依赖安装</li><li>多 Package 单元测试</li><li>多 Package 代码提交</li><li>多 Package 代码发布</li></ul><p>痛点二：版本一致性</p><ul><li>发布时版本一致性</li><li>发布后相互依赖版本升级</li></ul><blockquote><p>package 越多，管理复杂度越高</p></blockquote><h2 id="commander-包" tabindex="-1">commander 包 <a class="header-anchor" href="#commander-包" aria-label="Permalink to &quot;commander 包&quot;">​</a></h2><p><strong>用来给自己的脚手架实现命令参数的选项解析</strong></p><p>Commander 负责将参数解析为选项和命令参数，为问题显示使用错误，并实现一个有帮助的系统。</p><p>完整的 <a href="http://nodejs.org/" target="_blank" rel="noreferrer">node.js</a> 命令行解决方案。</p><p>开源地址：<a href="https://github.com/tj/commander.js" target="_blank" rel="noreferrer">https://github.com/tj/commander.js</a></p><p>npm：<a href="https://www.npmjs.com/package/commander" target="_blank" rel="noreferrer">commander - npm (npmjs.com)</a></p><p>中文文档：<a href="https://github.com/tj/commander.js/blob/HEAD/Readme_zh-CN.md" target="_blank" rel="noreferrer">commander.js/Readme_zh-CN.md</a></p><h2 id="lerna-源码解析" tabindex="-1">Lerna 源码解析 <a class="header-anchor" href="#lerna-源码解析" aria-label="Permalink to &quot;Lerna 源码解析&quot;">​</a></h2><p>Lerna 开源 GitHub 地址：<a href="https://github.com/lerna/lerna" target="_blank" rel="noreferrer">lerna/lerna: 🐉 Lerna is a fast, modern build system for managing and publishing multiple JavaScript/TypeScript packages from the same repository. (github.com)</a></p><p>Lerna 官网：<a href="https://lerna.js.org/" target="_blank" rel="noreferrer">Documentation | Lerna</a></p><p>Lerna 文档：<a href="https://lerna.js.org/docs/getting-started" target="_blank" rel="noreferrer">Getting Started | Lerna</a></p><h3 id="lerna-的基本概念简介" tabindex="-1">Lerna 的基本概念简介 <a class="header-anchor" href="#lerna-的基本概念简介" aria-label="Permalink to &quot;Lerna 的基本概念简介&quot;">​</a></h3><p>lerna 是一个优化基于 git+npm 的多 package 项目的管理工具。</p><p>可以让你在主项目下管理多个子项目，从而解决了多个包互相依赖，且发布时需要手动维护多个包的问题，每个 package 都有自己的依赖项（package.json），能够作为独立的 npm package 发布，只是源码放在一起维护，公共包可以放在根目录中的 package.json 中维护。</p><p>特性：</p><ul><li>1、根据 Git 提交信息，自动生成 changelog</li><li>2、提交代码，代码检查 hook</li><li>3、遵循 semver 版本规范</li></ul><p>优势：</p><ul><li>大幅减少重复操作</li><li>提升操作的标准化</li></ul><blockquote><p>Lerna 是架构优化的产物，它揭示了一个架构真理: 项目复杂度提升后，就需要对项目进行架构优化。架构优化的主要目标往往都是以效能为核心</p></blockquote><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">目录结构</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> lerna.json</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> package.json</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#98C379;"> packages</span></span>
<span class="line"><span style="color:#61AFEF;">    ├──</span><span style="color:#98C379;"> package1</span></span>
<span class="line"><span style="color:#61AFEF;">    │</span><span style="color:#98C379;">   └──</span><span style="color:#98C379;"> package.json</span></span>
<span class="line"><span style="color:#61AFEF;">    ├──</span><span style="color:#98C379;"> package2</span></span>
<span class="line"><span style="color:#61AFEF;">        └──</span><span style="color:#98C379;"> package.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="lerna-能做什么" tabindex="-1">Lerna 能做什么？ <a class="header-anchor" href="#lerna-能做什么" aria-label="Permalink to &quot;Lerna 能做什么？&quot;">​</a></h3><p>Lerna 两个基本的的命令是：<code>lerna bootstrap</code> 和 <code>lerna publish</code>。</p><ul><li><code>bootstrap</code> 会将库中的依赖联系起来。</li><li><code>publish</code> 将发布任何更新的包。</li></ul><h3 id="lerna-不能做什么" tabindex="-1">Lerna 不能做什么？ <a class="header-anchor" href="#lerna-不能做什么" aria-label="Permalink to &quot;Lerna 不能做什么？&quot;">​</a></h3><p>Lerna 不是无服务器 <a href="https://github.com/babel/babel/blob/master/doc/design/monorepo.md" target="_blank" rel="noreferrer">monorepos</a> 的部署工具。<a href="https://github.com/lerna/lerna/blob/main/doc/hoist.md" target="_blank" rel="noreferrer">Hoisting</a> 可能与传统的无服务器 <a href="https://github.com/babel/babel/blob/master/doc/design/monorepo.md" target="_blank" rel="noreferrer">monorepos</a> 部署技术不兼容。</p><h4 id="使用-lerna-管理的案例" tabindex="-1">使用 Lerna 管理的案例 <a class="header-anchor" href="#使用-lerna-管理的案例" aria-label="Permalink to &quot;使用 Lerna 管理的案例&quot;">​</a></h4><p>使用 Lerna 管理的大型项目:</p><ul><li>babel：<a href="https://github.com/babel/babel" target="_blank" rel="noreferrer">https://github.com/babel/babel</a></li><li>vus-cli：<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noreferrer">https://github.com/vuejs/vue-cli</a></li><li>create-react-app：<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noreferrer">https://github.com/facebook/create-react-app</a></li></ul><h3 id="lerna-实现原理" tabindex="-1">Lerna 实现原理 <a class="header-anchor" href="#lerna-实现原理" aria-label="Permalink to &quot;Lerna 实现原理&quot;">​</a></h3><ul><li>通过 import-local 优先调用本地 lerna 命令</li><li>用过 Yargs 生成脚手架，先注册全局属性，再注册命令，最后通过 parse 方法解析参数</li><li>lerna 命令注册时需要传入 builder 和 handler 两个方法， builder 方法用于注册命令专属的 options，handler 用来处理命令的业务逻辑</li><li>lerna 通过配置 npm 本地依赖的方式进行本地开发，具体写法是在 package.json 的依赖中写入：fill:your-kicak-module-path，在 lerna publish 时会自动将该路径替换</li></ul><h3 id="基于-lerna-创建项目管理" tabindex="-1">基于 Lerna 创建项目管理 <a class="header-anchor" href="#基于-lerna-创建项目管理" aria-label="Permalink to &quot;基于 Lerna 创建项目管理&quot;">​</a></h3><h4 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 初始化 Lerna 项目</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> init</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建 Package</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> create</span><span style="color:#98C379;"> @diao-cli/core</span><span style="color:#98C379;"> packages</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 安装依赖</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> mocha</span><span style="color:#98C379;"> packages/core</span><span style="color:#D19A66;"> --dev</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 删除依赖</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> clean</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 安装依赖</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> boorstaap</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 执行单元测试</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> test</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 执行特定包单元测试</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> test</span><span style="color:#98C379;"> @diao-cli/core</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># link 项目</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> link</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 发布项目</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> publish</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_1、安装-初始化-lerna" tabindex="-1">1、安装/初始化 lerna <a class="header-anchor" href="#_1、安装-初始化-lerna" aria-label="Permalink to &quot;1、安装/初始化 lerna&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> lerna</span><span style="color:#D19A66;"> -g</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>lerna.json 配置</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;private&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;packages&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;packages/*&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;command&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;publish&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 忽略修改文件</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;ignoreChanges&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;ignored-file&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;*.md&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;message&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;chore(release): publish&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;bootstrap&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;ignore&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;component-*&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.3&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_2、新增包" tabindex="-1">2、新增包 <a class="header-anchor" href="#_2、新增包" aria-label="Permalink to &quot;2、新增包&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 创建一个包，name包名，loc 位置可选</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> create</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">nam</span><span style="color:#ABB2BF;">e&gt; [loc]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看包</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3、安装依赖-bootstrap" tabindex="-1">3、安装依赖 bootstrap <a class="header-anchor" href="#_3、安装依赖-bootstrap" aria-label="Permalink to &quot;3、安装依赖 bootstrap&quot;">​</a></h4><p>包之间可以建立链接，当修改 A 包的源代码时，B 的 node_modules 中引用的 A 包也会相应修改</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> bootstrap</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 给A添加以依赖B</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> A</span><span style="color:#D19A66;"> --scope=B</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 这条命令会给所有的package安装依赖</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> bootstarp</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 安装某个依赖包</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> bootstrap</span><span style="color:#D19A66;"> --scope=package</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 提升公共包到根目录</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> bootstrap</span><span style="color:#D19A66;"> --hoist</span><span style="color:#98C379;"> axios</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 删除所有依赖</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> clean</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 删除某个包的依赖</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> clean</span><span style="color:#D19A66;"> --scope=package</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_4、运行-package" tabindex="-1">4、运行 package <a class="header-anchor" href="#_4、运行-package" aria-label="Permalink to &quot;4、运行 package&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 所有包都会执行打包命令</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> build</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 运行某个包中的script命令</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> start</span><span style="color:#D19A66;"> --scope=package</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_5、发布版本-publish" tabindex="-1">5、发布版本 publish <a class="header-anchor" href="#_5、发布版本-publish" aria-label="Permalink to &quot;5、发布版本 publish&quot;">​</a></h4><p>当执行 lerna publish 后会在项目根目录以及每个 packages 包下，生成 CHANGELOG.md</p><p>这个命令 识别出修改的包 --&gt; 创建新的版本号 --&gt; 修改 package.json --&gt; 提交修改 打上版本的 tag --&gt; 推送到 git 上。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> publish</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 忽略修改强制生成版本</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> version</span><span style="color:#D19A66;"> --force-publish</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>创建 changelog</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 安装changlog插件</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> conventional-changelog-cli</span><span style="color:#D19A66;"> --save</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 使用了这个选项， lerna 会收集日志， 自动生成 CHANGELOG</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> version</span><span style="color:#D19A66;"> --conventional-commits</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="lerna-开发脚手架流程" tabindex="-1">Lerna 开发脚手架流程 <a class="header-anchor" href="#lerna-开发脚手架流程" aria-label="Permalink to &quot;Lerna 开发脚手架流程&quot;">​</a></h3><h4 id="_1、脚手架项目初始化" tabindex="-1">1、脚手架项目初始化 <a class="header-anchor" href="#_1、脚手架项目初始化" aria-label="Permalink to &quot;1、脚手架项目初始化&quot;">​</a></h4><ul><li>1.初始化 npm 项目</li><li>2.安装 lerna</li><li>3.lerna init 初始化项目</li></ul><h4 id="_2、创建-package" tabindex="-1">2、创建 package <a class="header-anchor" href="#_2、创建-package" aria-label="Permalink to &quot;2、创建 package&quot;">​</a></h4><ul><li>1.lerna create 创建 Pacakge</li><li>2.lerna add 安装依赖</li><li>3.lerna link 链接依赖</li></ul><h4 id="_3、脚手架开发和测试" tabindex="-1">3、脚手架开发和测试 <a class="header-anchor" href="#_3、脚手架开发和测试" aria-label="Permalink to &quot;3、脚手架开发和测试&quot;">​</a></h4><ul><li>lerna exec 执行 shell 脚本</li><li>lerna run 执行 npm 命令</li><li>lerna clean 清空依赖</li><li>lerna bootstrap 重装依赖</li></ul><h4 id="_4、脚手架发布上线" tabindex="-1">4、脚手架发布上线 <a class="header-anchor" href="#_4、脚手架发布上线" aria-label="Permalink to &quot;4、脚手架发布上线&quot;">​</a></h4><ul><li>lerna yersion || bump version</li><li>lerna changed 查看上版本以来的所有变更</li><li>lerna diff 查看 diff</li><li>lerna publish 项目发布</li></ul><h3 id="【实战】基于-lerna-搭建脚手架框架" tabindex="-1">【实战】基于 lerna 搭建脚手架框架 <a class="header-anchor" href="#【实战】基于-lerna-搭建脚手架框架" aria-label="Permalink to &quot;【实战】基于 lerna 搭建脚手架框架&quot;">​</a></h3><h4 id="_1-项目目录搭建" tabindex="-1">1.项目目录搭建 <a class="header-anchor" href="#_1-项目目录搭建" aria-label="Permalink to &quot;1.项目目录搭建&quot;">​</a></h4><p><strong>本节使用命令依次如下</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 1.创建项目文件夹</span></span>
<span class="line"><span style="color:#61AFEF;">mkdir</span><span style="color:#98C379;"> test-cli-dev</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 2.进入创建好的项目文件夹</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> test-cli-dev</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 3.初始化项目的package.json</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> init</span><span style="color:#D19A66;"> -y</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 4.全局安装lerna</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> lerna</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 5.项目中安装lerna</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -S</span><span style="color:#98C379;"> lerna</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 6.在项目文件夹中：使用lerna命令初始化项目，生成lerna.json配置文件，和新建了一个packages目录</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> init</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 7.在项目文件夹中：使用lerna命令，在packages目录下创建core核心文件夹，然后有选择配置选项</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> create</span><span style="color:#98C379;"> core</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 8.在项目文件夹中：使用lerna命令，在packages目录下创建utils创建工具文件夹，然后有选择配置选项</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> create</span><span style="color:#98C379;"> utils</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_2-lerna-核心操作" tabindex="-1">2.Lerna 核心操作 <a class="header-anchor" href="#_2-lerna-核心操作" aria-label="Permalink to &quot;2.Lerna 核心操作&quot;">​</a></h4><p>本节使用命令依次如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 在packages目录下所有包中安装test-test包</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> test-cli</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 在指定包core中添加依赖</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> test-cli</span><span style="color:#98C379;"> packages/core</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 指定包添加依赖</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> @test-cli/utils</span><span style="color:#98C379;"> packages/core/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 清除packages目录下的依赖</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> clean</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将刚清除的所有依赖，重新安装依赖，并完成软连接</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> bootstrap</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 开发的版本互相存在依赖，可用此命令完成</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> link</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 脚手架开发和测试</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> exec</span><span style="color:#98C379;"> –</span><span style="color:#ABB2BF;"> […args]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 删除packages目录下utils的【上下文为packages目录】</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> exec</span><span style="color:#D19A66;"> --scope</span><span style="color:#98C379;"> @test-cli/utils–rm</span><span style="color:#D19A66;"> -rf</span><span style="color:#98C379;"> node_modules</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 删除packages目录下的所有node_modules文件夹</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> exec</span><span style="color:#98C379;"> –</span><span style="color:#98C379;"> rm</span><span style="color:#D19A66;"> -rf</span><span style="color:#98C379;"> node_modules</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 脚手架测试</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> test</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 执行core包package.json中script标签的test属性</span></span>
<span class="line"><span style="color:#61AFEF;">lerna</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> --scope</span><span style="color:#98C379;"> @test-cli/core</span><span style="color:#98C379;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="_3-lerna-发布上线流程-lerna-使用总结" tabindex="-1">3.Lerna 发布上线流程(lerna 使用总结) <a class="header-anchor" href="#_3-lerna-发布上线流程-lerna-使用总结" aria-label="Permalink to &quot;3.Lerna 发布上线流程(lerna 使用总结)&quot;">​</a></h4><ul><li><p><code>lerna init </code>：会自动完成 git 初始化，但不会创建 .gitignore，这个必须要手动添加，否则会将 node_modules 目录都上传到 git</p></li><li><p><code>lerna add</code>：第一个参数：添加 npm 包名 第二个参数：本地 package 的路径（如果不加，则全部安装） 可选参数：–dev：将依赖安装到 devDependencies,不加时安装到 dependencies</p></li><li><p><code>lerna link</code>：如果未发布上线，需要手动添加到 package.json 中再执行。</p></li><li><p><code>lerna clean</code>：只会删除 node_modules,不会删除 package.json 中的依赖</p></li><li><p><code>lerna exec 和 lerna run</code>：–scope 属性后添加的是包名，不是 package 的路径，这点和 lerna add 不同</p></li><li><p><code>lerna changed</code>：查看哪些改变将会被发布</p></li><li><p><code>lerna diff</code>：查看变更的代码片段</p></li><li><p><code>lerna version</code>：选择当前项目的版本号</p></li><li><p><code>lerna publish</code>：</p><ul><li><p>发布时会自动执行 <code>git add package-lock.json</code>，所以该文件不能加入到 <code>.gitignore</code> 中去。</p></li><li><p>发布时先创建远程仓库，且 push 代码。</p></li><li><p>执行 <code>npm publish</code> ，之前完成 npm 官网的登录： <code>npm login</code>，否则会发布失败，需要登录后，重新修改再发布</p></li><li><p>如果发布的包名为 @xxxx/yyy 的格式，需要在 npmjs.org 上注册 organization</p></li><li><p>发布到 npm group 时默认为 private，<code>package.json</code>中需手动添加配置：</p></li><li><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;publishConfig&quot;</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">&quot;access&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;public&quot;</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul><p>建议所有操作完成闭环，才接着后续</p><h3 id="lerna-源码解析-1" tabindex="-1">Lerna 源码解析 <a class="header-anchor" href="#lerna-源码解析-1" aria-label="Permalink to &quot;Lerna 源码解析&quot;">​</a></h3><blockquote><p>源码仓库：<a href="https://github.com/lerna/lerna" target="_blank" rel="noreferrer">https://github.com/lerna/lerna</a></p></blockquote><h4 id="为什么要做源码解析" tabindex="-1">为什么要做源码解析 <a class="header-anchor" href="#为什么要做源码解析" aria-label="Permalink to &quot;为什么要做源码解析&quot;">​</a></h4><ul><li>自我成长、提升编码能力和技术深度的需要</li><li>为我所用，应用到实际开发，实际产生效益</li><li>学习借鉴，站在巨人的肩膀上，登高望远</li></ul><h4 id="为什么要分析-lerna-源码" tabindex="-1">为什么要分析 Lerna 源码 <a class="header-anchor" href="#为什么要分析-lerna-源码" aria-label="Permalink to &quot;为什么要分析 Lerna 源码&quot;">​</a></h4><ul><li>3W+ star 的明星项目</li><li>Lerna 是脚手架，对我们开发脚手架有借鉴意义</li><li>Lerna 项目中蕴含大量的最佳实践，值得深入研究和学习</li></ul><h4 id="学习目标" tabindex="-1">学习目标 <a class="header-anchor" href="#学习目标" aria-label="Permalink to &quot;学习目标&quot;">​</a></h4><ul><li>Lerna 源码结构和执行流程分析</li><li><code>import-local</code> 源码深度精读</li></ul><h4 id="学习收获" tabindex="-1">学习收获 <a class="header-anchor" href="#学习收获" aria-label="Permalink to &quot;学习收获&quot;">​</a></h4><ul><li>如何将源码分析写进简历</li><li>学习明星项目的架构设计</li><li>获得脚手架执行流程的一种实现思路</li><li>获得脚手架调试本地源码的另一种方式</li><li>Node.js 加载 node_modules 模块的流程 ✨✨✨✨✨</li><li>各种文件操作算法和最佳实践</li></ul><h4 id="_1-lerna-源码结构分析和调试技巧" tabindex="-1">1.lerna 源码结构分析和调试技巧 <a class="header-anchor" href="#_1-lerna-源码结构分析和调试技巧" aria-label="Permalink to &quot;1.lerna 源码结构分析和调试技巧&quot;">​</a></h4><p>准备源码：</p><ul><li>1.克隆或下载源码：<a href="https://github.com/lerna/lerna" target="_blank" rel="noreferrer">https://github.com/lerna/lerna</a></li><li>2.安装源码依赖</li><li>3.VSCode 打开</li></ul><p>源码阅读准备完成的标准(划重点)</p><ul><li>找到入口文件</li><li>能够本地调试</li></ul><h5 id="源码结构" tabindex="-1">源码结构 <a class="header-anchor" href="#源码结构" aria-label="Permalink to &quot;源码结构&quot;">​</a></h5><p>入口文件：<code>lerna/packages/core/lerna/package.json</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;bin&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;lerna&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;dist/cli.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>入口文件代码：<code>lerna\\packages\\lerna\\src\\cli.js</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* eslint-disable */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> importLocal</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;import-local&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">importLocal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__filename</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">	require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;npmlog&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cli&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;using local version of lerna&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">)(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>源码 debug 操作步骤</strong>：</p><ul><li>1.github 下载 lerna 源码到本地且安装依赖</li><li>2.使用 VSCode 编辑器打开源码，找到入口文件 <code>lerna/packages/core/lerna/package.json</code> 中的 bin 属性。</li><li>3.VSCode 添加调试：在要调试的代码打上断点，然后在 VSCode 的图标栏【运行和调试】上，选择 Node.js 调试，开始运行和调试。</li></ul><h4 id="_2-node-源码调试过程中必会的小技巧" tabindex="-1">2.Node 源码调试过程中必会的小技巧 <a class="header-anchor" href="#_2-node-源码调试过程中必会的小技巧" aria-label="Permalink to &quot;2.Node 源码调试过程中必会的小技巧&quot;">​</a></h4><p>【运行和调试】的面板：</p><p>右上角三个点的图标，可以设置显示什么和不显示什么</p><h4 id="_3-lerna-初始化过程源码详细分析" tabindex="-1">3.lerna 初始化过程源码详细分析 <a class="header-anchor" href="#_3-lerna-初始化过程源码详细分析" aria-label="Permalink to &quot;3.lerna 初始化过程源码详细分析&quot;">​</a></h4><p>通过前面分析，我们知道，入口文件为：<code>lerna\\packages\\lerna\\src\\cli.js</code> 文件，从这里开始看源码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">)(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>require(&#39;.&#39;)</code>：这里的 <code>.</code> 是相对路径,相当于是 <code>require(&#39;./index.ts&#39;)</code></li><li>到这行代码后，先加载与该 <code>cli.js</code> 同级别目录下的 <code>index.ts</code> 文件。</li><li>等文件加载完毕后，将<code>process.argv.slice(2)</code>参数， 也就是我们写入的参数，传入到 <code>index.ts</code> 文件中 <code>module.exports</code> 出来的方法 <code>main</code></li></ul><h4 id="_4-【高能知识点】npm-项目本地依赖引用方法" tabindex="-1">4.【高能知识点】npm 项目本地依赖引用方法 <a class="header-anchor" href="#_4-【高能知识点】npm-项目本地依赖引用方法" aria-label="Permalink to &quot;4.【高能知识点】npm 项目本地依赖引用方法&quot;">​</a></h4><p>引用本地包的方式可以使用 <code>file:本地路径</code> 的方式，这是因为 <code>lerna publish</code> 的时候可以在线上环境把 <code>file:本地路径</code> 的方式改成引用线上包的方式。这种方式可以去除之前使用 <code>npm link</code> 的方式。</p><p>理解了这里本地依赖的 <code>file</code> 引用后，回到之前的 <code>lerna-publish</code> 发布流程项目，将本地引用的<code>@cloudscope-cli/utils</code> 改为 <code>file</code> 引用，这里需要注意：在 <code>@cloudscope-cli/core</code> 中使用 file 方式引用了本地的 utils 包后，需要 npm install 一下。</p><p>package.json 本地依赖引用</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">&quot;dependencies&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    &quot;@test-cli-dev/utils&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;file:../utils&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_5-使用脚手架框架-yargs-库-入门" tabindex="-1">5.使用脚手架框架 yargs 库 入门 <a class="header-anchor" href="#_5-使用脚手架框架-yargs-库-入门" aria-label="Permalink to &quot;5.使用脚手架框架 yargs 库 入门&quot;">​</a></h4><p>yargs 的 npm 地址：<a href="https://www.npmjs.com/package/yargs" target="_blank" rel="noreferrer">yargs - npm (npmjs.com)</a></p><p>具体操作如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 1.创建项目文件夹</span></span>
<span class="line"><span style="color:#61AFEF;">mkdir</span><span style="color:#98C379;"> test-cli-yargs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 2.初始化目录</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> init</span><span style="color:#D19A66;"> -y</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 3.新建lib/index.js文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 4.package.json文件添加:</span></span>
<span class="line"><span style="color:#61AFEF;">&quot;bin&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> {</span><span style="color:#98C379;"> &quot;lib/index.js&quot;</span><span style="color:#98C379;"> }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 5.安装yarns</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -S</span><span style="color:#98C379;"> yarns</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 6.安装dedent</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -S</span><span style="color:#98C379;"> dedent</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>然后，开始编辑 <code>index.js</code> 文件，进行 yargs 相关用法的学习：</p><h4 id="_6-yargs-库高级用法讲解" tabindex="-1">6.yargs 库高级用法讲解 <a class="header-anchor" href="#_6-yargs-库高级用法讲解" aria-label="Permalink to &quot;6.yargs 库高级用法讲解&quot;">​</a></h4><p>关于 yargs 的 command 用法，我们从 npm 的 yargs 官网：<a href="https://www.npmjs.com/package/yargs" target="_blank" rel="noreferrer">yargs - npm (npmjs.com)</a>，看到示例如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> yargs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;yargs/yargs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">hideBin</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;yargs/helpers&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">yargs</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">hideBin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 定义自己的命令</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">command</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;serve [port]&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;start the server&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E06C75;font-style:italic;">yargs</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> yargs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">positional</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;port&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">				describe</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;port to bind on&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">verbose</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`start server on :</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">port</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			serve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">port</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">option</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;verbose&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		alias</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;v&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;boolean&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Run with verbose logging&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>通过以上代码，我们可以看到定义 command 的时候，传入了四个参数：</p><ul><li><code>&#39;serve [port]&#39;</code>：command 的格式，port 为我们自定义的 option，相当于 <code>test-cli serve</code></li><li><code>&#39;start the serve&#39;</code>：关于此 serve command 命令的补充描述</li><li>第三个参数为 builder 函数：在执行此 command 具体命令之前做的动作，比如上文为 serve 这个命令定义了一个参数 port，且给定 port 的默认值为 5000</li><li>第四个参数我们叫做 handler：是用来具体执行 command 的一个行为</li></ul><p><strong>高级用法</strong>：<code>bin/yargs.js</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> yargs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;yargs/yargs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dedent</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dedent&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入配置</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pkg</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../package.json&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cli</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> yargs</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> argv</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 使用配置的版本</span></span>
<span class="line"><span style="color:#E06C75;">	imoocVersion</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">pkg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">cli</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">usage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Usage: $0 [command] &lt;options&gt;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">demandCommand</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#D19A66;">		1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;A command is required. Pass --help to see all available commands and options.&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">strict</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">recommendCommands</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">fail</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">alias</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;h&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;help&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">alias</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;v&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;version&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">wrap</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">cli</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">terminalWidth</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">epilogue</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">		dedent</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">      When a command fails, all logs are written to lerna-debug.log in the current working directory.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">      For more information, find our manual at https://github.com/lerna/lerna</span></span>
<span class="line"><span style="color:#98C379;">    \`</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">options</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		debug</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;boolean&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			describe</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Bootstrap debug mode&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			alias</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;d&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">option</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;registry&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		describe</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Define global registry&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		alias</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;r&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">group</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;debug&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&quot;Dev Options:&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">group</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;registry&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&quot;Extra Options:&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">command</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;init [name]&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;Do init a project&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E06C75;font-style:italic;">yargs</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			yargs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">option</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				describe</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Name of a project&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				alias</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;n&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">command</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		command</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		aliases</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;ls&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;la&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;ll&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">		describe</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;List local packages&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		builder</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">yargs</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#61AFEF;">		handler</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> fs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fs&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// native module</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> dedent</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dedent&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// cached local module</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> local</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// relative path</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> utils</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/Users/sam/Desktop/vue-test/imooc-test/bin/utils&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// absolute path</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> pkg</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../../imooc-test-lib/package.json&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// load json</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> undefinedModule</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./file&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// undefined module</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><p>其他</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> yargs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;yargs/yargs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 一个ES6字符串标签，从多行字符串中去除缩进。</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dedent</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dedent&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cli</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> yargs</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> argv</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 注入额外参数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	diaoVersion</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E06C75;">cli</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 开启严格模式，输入无效命令会报错无法识别命令</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">strict</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 在头部输出一段信息</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">usage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Usage: diao-cli [command] &lt;options&gt;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置需要输入命令的最小值，这里设置最少输入一个命令，否则则抛出错误信息</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">demandCommand</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#D19A66;">		1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;A command is required. Pass --help to see all available commands and options.&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果没有找到匹配的命令，yargs提供关于类似命令的建议</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">recommendCommands</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 在有错误的时候执行，可以在这里自定义错误信息</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">fail</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;err:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置 command 的别名</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">alias</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;h&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;help&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">alias</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;v&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;version&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置命令行输出时候的宽度</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">wrap</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">cli</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">terminalWidth</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 在命令行末尾打印的消息</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">epilogue</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">		dedent</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#98C379;">    When a command fails, all logs are written to lerna-debug.log in the current working directory.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">    For more information, find our manual at https://github.com/lerna/lerna</span></span>
<span class="line"><span style="color:#98C379;">  \`</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 配置额外选项</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">options</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		debug</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;boolean&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			describe</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Bootstrap debug mode&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			alias</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;d&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 配置额外选项</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">option</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;registry&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		describe</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Define global registry&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		alias</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;r&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 对选项进行分组</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">group</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;debug&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&quot;Dev Options&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">group</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;registry&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&quot;Extra Options&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 注册命令</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">command</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&quot;init [name]&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;Do init a project&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E06C75;font-style:italic;">yargs</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			yargs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">option</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				describe</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Name of a project&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				alias</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;n&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 注册命令</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">command</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		command</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		aliases</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;ls&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;la&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;ll&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">		describe</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;List local packages&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		builder</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">yargs</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#61AFEF;">		handler</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">argv</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 解析命令输入参数</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">argv</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br></div></div><h4 id="_7-lerna-脚手架初始化过程超详细讲解" tabindex="-1">7.lerna 脚手架初始化过程超详细讲解 <a class="header-anchor" href="#_7-lerna-脚手架初始化过程超详细讲解" aria-label="Permalink to &quot;7.lerna 脚手架初始化过程超详细讲解&quot;">​</a></h4><p>通过 yargs 使用方法，分析 lerna 脚手架的初始化过程讲解。</p><h4 id="_8-lerna-脚手架-command-执行过程详解" tabindex="-1">8.lerna 脚手架 Command 执行过程详解 <a class="header-anchor" href="#_8-lerna-脚手架-command-执行过程详解" aria-label="Permalink to &quot;8.lerna 脚手架 Command 执行过程详解&quot;">​</a></h4><p><code>class Command</code> 类方法和 <code>class ListCommand</code> 类方法</p><h4 id="_9-【关键知识复习】javascript-事件循环–eventloop" tabindex="-1">9.【关键知识复习】javascript 事件循环–EventLoop <a class="header-anchor" href="#_9-【关键知识复习】javascript-事件循环–eventloop" aria-label="Permalink to &quot;9.【关键知识复习】javascript 事件循环–EventLoop&quot;">​</a></h4><ul><li>EventLoop 中存在两种事件：<strong>宏任务(MacroTask)</strong> 和 <strong>微任务(MicroTask)</strong></li><li>JavaScript 脚本中加入到宏任务中去</li><li>当宏任务队列中任务执行完毕后，会将微任务队列中任务清空，清空之后再去执行宏任务队列。这种循环往复的执行流程就称为事件循环–EventLoop。</li><li>然后：我们在宏任务中加入一个 setTimeout。</li><li>接着，我们在宏任务队列中加入一个 Promise.then() , Promise.then()中的内容会被加入到微任务队列中去。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>题目描述：通过前面章节，我们了解到 Lema 源码中利用了 EventLoop 机制将脚手架初始化和命今执行逻辑解，这是 EventLoop 的一个典型应用，然而 Nodejs 的 EventLoop 和 Web 的 EventLoop 井不相同，你 D 道他们之间有些美景吗?你是否在实际项目中应用 Nodes 的 setmmediate 和 process.nextTick 法如果有，遗分享你在感些场景下使用了这些方法，并指出你为什么在这种场景使用，它会带来什么好处?</p><p>关键提炼:</p><p>1、Node.js 事件循环：<a href="http://nodejs.cn/learn/the-nodejs-event-loop" target="_blank" rel="noreferrer">http://nodejs.cn/learn/the-nodejs-event-loop</a></p><p>2、什么是 process.nextTick：<a href="http://nodejs.cn/learn/understanding-process-nexttick" target="_blank" rel="noreferrer">http://nodejs.cn/learn/understanding-process-nexttick</a></p><p>3、什么是 setlmmediate：<a href="http://nodejs.cn/learn/understanding-setimmediate" target="_blank" rel="noreferrer">http://nodejs.cn/learn/understanding-setimmediate</a></p><p>4、Web 和 Nodejs 事件循环对比：<a href="http://www.ruanyifeng.com/blog/2014/10/event-oop.html" target="_blank" rel="noreferrer">http://www.ruanyifeng.com/blog/2014/10/event-oop.html</a></p><p>回答：</p><h4 id="_10-import-local-执行流程深度分析" tabindex="-1">10.import-local 执行流程深度分析 <a class="header-anchor" href="#_10-import-local-执行流程深度分析" aria-label="Permalink to &quot;10.import-local 执行流程深度分析&quot;">​</a></h4><p>在<code>cli.ts</code> 中：<code>require(&quot;import-local&quot;);</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/usr/bin/env node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* eslint-disable import/no-dynamic-require, global-require */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> importLocal</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;import-local&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">importLocal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__filename</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">	require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;npmlog&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cli&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;using local version of lerna&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">)(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">argv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>import-local</code> 的作用是：当我们的项目当中本地存在一个脚手架命令，同时全局在 node 当中也存在一个脚手架命令的时候，优先选用本地的 node_modules 中的版本。</p><p>在执行一个 node 代码的时候，默认会向 node 代码当中注入一些变量：<code>__filename</code>、 <code>__dirname</code> 、 <code>require</code>、 <code>module</code>、<code>exports</code></p><p>首先，执行 lerna 命令的时候，会执行 node 全局下的 lerna，即 <code>which lerna</code> 指向的：</p><p>软连接：/Users/test-cli/.nvm/versions/node/v12.16.1，</p><p>实际指向：/Users/test-cli/.nvm/versions/node/v12.16.1/lib/node_modules/lerna/cli.js<code>[PRATIC]</code></p><p>通过上面分析我们知道了执行流程，现在的重点就是看代码中的 <code>require(&#39;import-local&#39;)</code> 中的源码。</p><p>我们进入到 <code>import-local</code>源码中：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> resolveCwd</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;resolve-cwd&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pkgDir</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;pkg-dir&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">filename</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> globalDir</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pkgDir</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sync</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dirname</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> relativePath</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">relative</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">globalDir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> pkg</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">globalDir</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;package.json&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> localFile</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> resolveCwd</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">silent</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pkg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">relativePath</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> localFile</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">relative</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">localFile</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#C678DD;">		?</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">localFile</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		:</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p><code>path.dirname(filename)</code>：这句代码的意思是获取到文件 filename 的上级目录。</p></blockquote><h4 id="_11-pkg-dir-源码解析-一大波优秀的文件操作库" tabindex="-1">11.pkg-dir 源码解析（一大波优秀的文件操作库) <a class="header-anchor" href="#_11-pkg-dir-源码解析-一大波优秀的文件操作库" aria-label="Permalink to &quot;11.pkg-dir 源码解析（一大波优秀的文件操作库)&quot;">​</a></h4><p>本节分析上面代码，对<code>import-local</code> 源码细节分析，本节分析代码流程为 globalDir 是如何获得的：</p><blockquote><p><code>const pkgDir = require(&#39;pkg-dir&#39;)</code> pkg-dir：字面意思为，获得 package.json 文件的上级目录</p></blockquote><p>进入 pkg-dir 源码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> findUp</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;find-up&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">cwd</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">	findUp</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;package.json&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">cwd</span><span style="color:#ABB2BF;"> }).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">fp</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">fp</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dirname</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fp</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sync</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">cwd</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> fp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> findUp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sync</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;package.json&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">cwd</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> fp</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dirname</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fp</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>分析 pkg-dir 代码可知：pkg-dir 这个库向我们暴露了两个方法：默认 cwd 和 sync 方法，其中 sync 方法会以同步的方式执行。 同时，这里又引用 find-up 这个库</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> locatePath</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;locate-path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">filename</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">opts</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> startDir</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cwd</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">startDir</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> filenames</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [].</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dir</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			locatePath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filenames</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">cwd</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;"> }).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">file</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">					resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">dir</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> root</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">					resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					find</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dirname</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		})(</span><span style="color:#E06C75;">startDir</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sync</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">filename</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">opts</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> dir</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cwd</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> filenames</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [].</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// eslint-disable-next-line no-constant-condition</span></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> file</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> locatePath</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filenames</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">cwd</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">dir</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> root</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E06C75;">		dir</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dirname</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><blockquote><p>同理，find-up 这个库也是默认的 module.exports 方法与同步返回的 sync 方法。 这里我们继续分析 find-up 这个库的 sync 方法，一行一行代码解析：</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> dir</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cwd</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>path.resolve 是我 node 当中经常使用的方法，它主要作用是把两个相对路径进行结合。 <code>path.resolve(&#39;/Users&#39;, &#39;/test-cli&#39;)</code>，返回的路径为 /test-cli path.join(&#39;/Users&#39;,&#39;/test-cli&#39;),返回的路径为 /Users/test-cli 这里有个注意点是 <code>path.resolve(&#39;.&#39;)</code> 返回的是当前路径，而<code>path.join(&#39;.&#39;)</code>，返回的就是. 不会帮我们判定当前的 . 与上级路径的关系。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">root</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p><code>path.parse(&quot;/Users/test-cli/Documents/imoocCourse/Web前端架构师/lerna/core&quot;)</code> 返回的结果为：</p></blockquote><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;root&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;dir&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/Users/test-cli/Documents/imoocCourse/Web前端架构师/lerna/core&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;base&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lerna&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;ext&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lerna&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> filenames</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [].</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>通过分析上下文，我们知道这行代码的 filename 指的是 package.json,于是 filenames = [&#39;package.json&#39;]</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>这里是个无限循环，需要注意的一点是退出条件</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> file</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> locatePath</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">filenames</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">cwd</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>这里又调用了这个 locatePath 这个库的 sync 方法，local-path 这个库的作用是磁盘中是否存在这个路径，如果存在会把第一个文件返回。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sync</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">iterable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  cwd</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cwd</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;"> }, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;"> for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> el</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> iterable</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">pathExists</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sync</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cwd</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">))) {</span></span>
<span class="line"><span style="color:#C678DD;">   return</span><span style="color:#E06C75;"> el</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>通过上面的代码，我们看到上面又用到了一个库：pathExists(通过名字我们显而易见的知道，这个库的作用是判断传入的一个路径是否存在的)，pathExists 这个库源码不贴了，主要的一行代码是：fs.accessSync(fp),这行代码就是判断是否能到达一个文件，如果报错就会被 try catch 捕获返回 false</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>通过前面分析 <code>path.join(dir, file)</code> 返回的就是 /Users/test-cli/Documents/imoocCourse/Web 前端架构师/lerna/core/lerna/package.json</p></blockquote><p>最终获得 <code>globalDir</code></p><h4 id="_12-resolve-from-源码解析-彻底搞懂-node-modules-模块加载逻辑" tabindex="-1">12.resolve-from 源码解析（彻底搞懂 node_modules 模块加载逻辑） <a class="header-anchor" href="#_12-resolve-from-源码解析-彻底搞懂-node-modules-模块加载逻辑" aria-label="Permalink to &quot;12.resolve-from 源码解析（彻底搞懂 node_modules 模块加载逻辑）&quot;">​</a></h4><p>我们回到 <code>import-local</code>源码，继续看：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> relativePath</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">relative</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">globalDir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p><code>demo: const relativePath = path.relative(&quot;/a/b/c&quot;, &#39;/a/b/c/d.js&#39;);</code> relativePath 返回值为 d.js</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> pkg</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">globalDir</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;package.json&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>这里获得 package.json 这个文件</p></blockquote><p>import-local 最关键的一部分来了：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> localFile</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> resolveCwd</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">silent</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">([</span><span style="color:#E5C07B;">pkg</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;">http</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//pkg.name/), relativePath));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>resolveCwd 的含义是给出一个包名和主进入文件名，去本地文件中查找是否存在这样的路径</p></blockquote><p>然后我们就进入 resolveCwd 这个引用库的源码，查看是如何实现的(传入的参数为 lerna/cli.js)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> resolveFrom</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;resolve-from&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">moduleId</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> resolveFrom</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cwd</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">moduleId</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">silent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">moduleId</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">	resolveFrom</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">silent</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cwd</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">moduleId</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里又引用了 resolve-from 这个库的 silent 静默方法(源码见下)： 这里需要引起注意一点的是 resolve-from 这个库传入的两个参数分别是上面提到的 lerna/cli.js 以及 process.cwd()这个参数，这个 process.cwd 的传入参数为 Working directory：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&#39;use strict&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;path&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Module</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;module&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> resolveFrom</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fromDir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">moduleId</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">silent</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> fromDir</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;string&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TypeError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Expected \`</span><span style="color:#61AFEF;">fromDir</span><span style="color:#98C379;">\` to be of type \`</span><span style="color:#61AFEF;">string</span><span style="color:#98C379;">\`, got \`</span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">{typeof </span><span style="color:#E06C75;">fromDir</span><span style="color:#ABB2BF;">}</span><span style="color:#98C379;">\`\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> moduleId</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &#39;string&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TypeError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Expected \`</span><span style="color:#61AFEF;">moduleId</span><span style="color:#98C379;">\` to be of type \`</span><span style="color:#61AFEF;">string</span><span style="color:#98C379;">\`, got \`</span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">{typeof </span><span style="color:#E06C75;">moduleId</span><span style="color:#ABB2BF;">}</span><span style="color:#98C379;">\`\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">	fromDir</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fromDir</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> fromFile</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fromDir</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;noop.js&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#61AFEF;"> resolveFileName</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_resolveFilename</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">moduleId</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">fromFile</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		filename</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">fromFile</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		paths</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_nodeModulePaths</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fromDir</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">silent</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#61AFEF;"> resolveFileName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> resolveFileName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fromDir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">moduleId</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> resolveFrom</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fromDir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">moduleId</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">silent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fromDir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">moduleId</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> resolveFrom</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fromDir</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">moduleId</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>分析上面代码，最关键的代码为：<code>Module._nodeModulePaths</code>是路径</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> resolveFileName</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">	Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_resolveFilename</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">moduleId</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">fromFile</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		filename</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">fromFile</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		paths</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_nodeModulePaths</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fromDir</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>Module：node 的内置模块，(通常开发过程中是不需要使用的)，Module 中的 下划线(_)方法，都称为内置方法 <code>_resolveFilename</code> 方法，是我们 node 中 require 方法实现的核心方法之一，关于 require 方法的实现，参考阮一峰老师的这篇文章：<a href="http://www.ruanyifeng.com/blog/2015/05/require.html" target="_blank" rel="noreferrer">require()源码解读</a> 分析上面这段代码，<code>Module._resolveFilename</code> 的作用是解析模块的真实路径，这个方法传进去两个参数，其中第一个 options 我们发现了： <code>Module._nodeModulesPaths(fromDir)</code>这个方法，这个方法的作用是生成 node_modules 的可能路径。 在对这个方法源码进行学习前，我们预先从老师那了解到了这个方法的实现逻辑：</p></blockquote><p>然后我们进入到 <code>Module._nodeModulesPaths</code> 方法中：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_nodeModulePaths</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Guarantee that &#39;from&#39; is absolute.</span></span>
<span class="line"><span style="color:#E06C75;">	from</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Return early not only to avoid unnecessary work, but to *avoid* returning</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// an array of two items for a root: [ &#39;//node_modules&#39;, &#39;/node_modules&#39; ]</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">from</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;/&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;/node_modules&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// note: this approach *only* works when the path is guaranteed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// to be absolute.  Doing a fully-edge-case-correct path.split</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// that works on both Windows and Posix is non-trivial.</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> paths</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">last</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> from</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> code</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> from</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> CHAR_FORWARD_SLASH</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">p</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> nmLen</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">last</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;/node_modules&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			last</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			p</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">p</span><span style="color:#56B6C2;"> !==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">nmChars</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#E06C75;"> code</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#56B6C2;">				++</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				p</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Append /node_modules to handle root paths.</span></span>
<span class="line"><span style="color:#E5C07B;">	paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/node_modules&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><blockquote><p>分析以上代码，这里我们的 from 是：/Users/test-cli/Documents/imoocCourse/Web 前端架构师/lerna 然后通过上面算法计算，</p><p>最后得到的结果是：</p><p>[</p><p>/Users/test-cli/Documents/imoocCourse/Web 前端架构师/lerna/node_modules,</p><p>/Users/test-cli/Documents/imoocCourse/Web 前端架构师/node_modules,</p><p>/Users/test-cli/Documents/imoocCourse/node_modules,</p><p>/Users/test-cli/Documents/node_modules,</p><p>/Users/test-cli/node_modules, /Users/node_modules, /node_modules</p><p>]</p></blockquote><p>将这个数组返回后，我们继续分析 <code>Module._resolveFilename</code> 这个方法的源码： 同样在对这个方法源码进行学习前，我们也预先从老师那了解到了这个方法的实现逻辑：</p><h4 id="_13-node-模块加载核心方法-resovlefilename-源码深入解析" tabindex="-1">13.Node 模块加载核心方法_resovleFileName 源码深入解析 <a class="header-anchor" href="#_13-node-模块加载核心方法-resovlefilename-源码深入解析" aria-label="Permalink to &quot;13.Node 模块加载核心方法\\_resovleFileName 源码深入解析&quot;">​</a></h4><p>首先，关于 <code>Module._resolveFileName</code> 的源码分析要更为复杂，这是因为算法部分较多。</p><p><code>Module._resolveFilename</code> 这个方法的源码为如下(代码逻辑添加注释)：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_resolveFilename</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">isMain</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">NativeModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">canBeRequiredByUsers</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">)) {  </span><span style="color:#7F848E;font-style:italic;">// 判断是否为可加载的内置模块</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> options</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;object&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> options</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 我们在这传入的options是 undefined，因此之间跳过到else中---即执行Module._resolveLookupPaths(request, parent);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">ArrayIsArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">paths</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> isRelative</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#E5C07B;">          request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;../&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#ABB2BF;">          ((</span><span style="color:#E06C75;">isWindows</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;.</span><span style="color:#56B6C2;">\\&#39;</span><span style="color:#98C379;">)) |</span><span style="color:#FFFFFF;">|</span></span>
<span class="line"><span style="color:#E5C07B;">          request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;..</span><span style="color:#56B6C2;">\\&#39;</span><span style="color:#98C379;">))</span><span style="color:#FFFFFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isRelative</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        paths</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">paths</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      } </span><span style="color:#E06C75;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        const </span><span style="color:#E06C75;">fakeParent</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Module</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">        paths</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">let</span><span style="color:#E06C75;font-style:italic;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;"> &lt; options.paths.length; </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">++) {</span></span>
<span class="line"><span style="color:#C678DD;">          const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">paths</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">          fakeParent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">paths</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_nodeModulePaths</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">          const</span><span style="color:#E5C07B;"> lookupPaths</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_resolveLookupPaths</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fakeParent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">          for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> j</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> lookupPaths</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">lookupPaths</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">]))</span></span>
<span class="line"><span style="color:#E5C07B;">              paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">lookupPaths</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#E06C75;">else</span><span style="color:#61AFEF;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">paths</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      paths</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_resolveLookupPaths</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#E06C75;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      throw new </span><span style="color:#61AFEF;">ERR_INVALID_OPT_VALUE</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;options.paths&#39;</span><span style="color:#ABB2BF;">, options.paths);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#E06C75;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    paths</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_resolveLookupPaths</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 然后就进入了_resolveLookPaths，进行了paths的一些合并，拿到合并的数组</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">) {      </span><span style="color:#7F848E;font-style:italic;">// 我们这里是有filename的</span></span>
<span class="line"><span style="color:#ABB2BF;">    const </span><span style="color:#E06C75;">filename</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> trySelf</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isMain</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">filename</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      emitExperimentalWarning</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Package name self resolution&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> cacheKey</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> request</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;x00&#39;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#ABB2BF;">          (</span><span style="color:#E5C07B;">paths</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;x00&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">      Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_pathCache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cacheKey</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> filename</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> filename</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Look up the filename first, since that&#39;s the cache key.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 重点</span></span>
<span class="line"><span style="color:#E06C75;">  const</span><span style="color:#E06C75;"> filename</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_findPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">paths</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isMain</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 另一非常有难度的方法，源代码见下面的下面</span></span>
<span class="line"><span style="color:#61AFEF;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">return</span><span style="color:#E06C75;"> filename</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  const</span><span style="color:#E06C75;"> requireStack</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#61AFEF;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">let</span><span style="color:#E06C75;"> cursor</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> parent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    cursor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    cursor</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cursor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    requireStack.push(cursor.filename || cursor.id);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  let</span><span style="color:#E06C75;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`Cannot find module &#39;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">request</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&#39;\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">requireStack</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    message</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> message</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;nRequire stack:n- &#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> requireStack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;n- &#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // eslint-disable-next-line no-restricted-syntax</span></span>
<span class="line"><span style="color:#E06C75;">  const</span><span style="color:#E06C75;"> err</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">  err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;MODULE_NOT_FOUND&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">requireStack</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> requireStack</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  throw</span><span style="color:#E06C75;"> err</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><p><code>Module._resolveLookupPaths</code> 这个方法的源码为如下(代码逻辑添加注释)： 主要功能就是将 paths 和环境变量<code>node_modules</code>合并</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_resolveLookupPaths</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">parent</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">NativeModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">canBeRequiredByUsers</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">)) {   </span><span style="color:#7F848E;font-style:italic;">// 先判断是否为内置模块</span></span>
<span class="line"><span style="color:#61AFEF;">    debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;looking for %j in []&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // Check for node modules paths.</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &#39;.&#39;</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#ABB2BF;">      (</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">      request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &#39;.&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">      request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &#39;/&#39;</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">      (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isWindows</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &#39;</span><span style="color:#56B6C2;">\\&#39;</span><span style="color:#98C379;">))) </span><span style="color:#FFFFFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    let</span><span style="color:#E06C75;"> paths</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> modulePaths</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">// 环境变量中存储的一些node_modules目录</span></span>
<span class="line"><span style="color:#61AFEF;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">paths</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">paths</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      paths</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">paths</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 与之前传进来的paths进行合并</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;looking for %j in %j&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">paths</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    return</span><span style="color:#E5C07B;"> paths</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> paths</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// 将合并的paths返回</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // In REPL, parent.filename is null.</span></span>
<span class="line"><span style="color:#61AFEF;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> ||</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> ||</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Make require(&#39;./path/to/foo&#39;) work - normally the path is taken</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // from realpath(__filename) but in REPL there is no filename</span></span>
<span class="line"><span style="color:#ABB2BF;">    const </span><span style="color:#E06C75;">mainPaths</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;looking for %j in %j&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">mainPaths</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    return mainPaths;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;RELATIVE: requested: %s from parent.id %s&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  const</span><span style="color:#E06C75;"> parentDir</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dirname</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">)];</span></span>
<span class="line"><span style="color:#61AFEF;">  debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;looking for %j&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parentDir</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">  return</span><span style="color:#E06C75;"> parentDir</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p><code>Module._findPath</code>要解决的问题是在 paths 中解析模块的真实路径， 同样在对这个方法源码进行学习前，我们也预先从老师那了解到了这个方法的实现逻辑：</p><p>源码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_findPath</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">paths</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">isMain</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> absoluteRequest</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isAbsolute</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">//判断是否为绝对路径</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">absoluteRequest</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    paths</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">paths</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> paths</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 通过 x00 生成一大段的cacheKey</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> cacheKey</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> request</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;x00&#39;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#ABB2BF;">                (</span><span style="color:#E5C07B;">paths</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> paths</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;x00&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> entry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_pathCache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cacheKey</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">entry</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> entry</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> exts</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // trailingSlash判断request是否已 / 结尾的</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> trailingSlash</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">    request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#E5C07B;"> CHAR_FORWARD_SLASH</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 若不是以 / 结尾，</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">trailingSlash</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 会以正则进行匹配，这里的正则在下下节专门学习，这里暂时略过，这里的结论：该正则表示的结果为  是否是以&quot;/..、/.、.. 、 . &quot;结尾</span></span>
<span class="line"><span style="color:#E06C75;">    trailingSlash</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /(?:</span><span style="color:#C678DD;">^</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">/).</span><span style="color:#D19A66;">?</span><span style="color:#E06C75;">.</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // For each path</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> paths</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Don&#39;t search further if path doesn&#39;t exist</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 一次拿出paths中存储的值</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> curPath</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> paths</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //stat(curPath)返回结果 1是文件夹，0为文件，我们这里第一个返回的是文件夹 1，因此，不会跳出循环，继续向下执行</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">curPath</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> stat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">curPath</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里的意思就是将我们的curPath与request做一个结合</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> basePath</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> resolveExports</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">curPath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">absoluteRequest</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> filename</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // stat(basePath)看上面合成的文件是否存在，为0说明为文件且文件存在</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> rc</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> stat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">basePath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 判断结尾是不是一个 /</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">trailingSlash</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     // 判断当前的basePath是否为一个文件</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">rc</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {  </span><span style="color:#7F848E;font-style:italic;">// File.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     	// isMain是否传入</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isMain</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 是否阻止去做超链接，根据我们的分析，这里不是 preserveSymlinks为false</span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">preserveSymlinks</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            filename</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">basePath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // toRealPath：我们的分析 basePath在这里为软连接，然后通过此方法，找到真实的文件路径。然后，我们进入下一节，看看这个toRealPath是如何实现的</span></span>
<span class="line"><span style="color:#E06C75;">            filename</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> toRealPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">basePath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">preserveSymlinksMain</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // For the main module, we use the preserveSymlinksMain flag instead</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // mainly for backward compatibility, as the preserveSymlinks flag</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // historically has not applied to the main module.  Most likely this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // was intended to keep .bin/ binaries working, as following those</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // symlinks is usually required for the imports in the corresponding</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // files to resolve; that said, in some use cases following symlinks</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // causes bigger problems which is why the preserveSymlinksMain option</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // is needed.</span></span>
<span class="line"><span style="color:#E06C75;">          filename</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">basePath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">          filename</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> toRealPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">basePath</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // Try it with each of the extensions</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">exts</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">          exts</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ObjectKeys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_extensions</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        filename</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> tryExtensions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">basePath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">exts</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isMain</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">filename</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> rc</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {  </span><span style="color:#7F848E;font-style:italic;">// Directory.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // try it with each of the extensions at &quot;index&quot;</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">exts</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">        exts</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ObjectKeys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_extensions</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">      filename</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> tryPackage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">basePath</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">exts</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">isMain</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">filename</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      Module</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_pathCache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cacheKey</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> filename</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> filename</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br></div></div><h4 id="_14-fs-模块-torealpath-源码深入解析" tabindex="-1">14.fs 模块 toRealPath 源码深入解析 <a class="header-anchor" href="#_14-fs-模块-torealpath-源码深入解析" aria-label="Permalink to &quot;14.fs 模块 toRealPath 源码深入解析&quot;">​</a></h4><p>我们到<code>toRealPath</code>方法后，使用 node 调试工具，点击继续 Step Into 到该方法中，代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 通过代码，我们知道toRealPath的方法实现，正如上面的逻辑图显示的，使用的是 fs.realpathSync这个模块。</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> toRealPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">requestPath</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 该方法传入两个参数，一个路径地址 requestPath，以及一个options</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// realpathCache为一个chche，表示的是当前已经做过路径判断的所有路径缓存</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 绝大多数的key值与value值是一样的，并没有软链接，但是也存在少量的有软连接的：key与value值不同</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">realpathSync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">requestPath</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">		[</span><span style="color:#E5C07B;">internalFS</span><span style="color:#E06C75;">.realpathCacheKey</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">realpathCache</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>同样的，我们在进去 toRealPath 这个方法，看到 fs.realpathSync 实现之前，我们先从老师哪里有拿到逻辑图，并根据图进行分析学习该代码里面的逻辑：</p><p>然后我们继续 Step Into 到 <code>fs.realpathSync</code> 这个方法中，源码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// options 为Symbol</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> realpathSync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> emptyObj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	else</span><span style="color:#E06C75;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getOptions</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">emptyObj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">	p</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> toPathIfFileURL</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果不是string格式的，进行格式转换</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		p</span><span style="color:#56B6C2;"> +=</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断该路径是否为有效路径</span></span>
<span class="line"><span style="color:#61AFEF;">	validatePath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// pathModule 与我们直接引用的path模块没有区别：相对路径转为绝对路径</span></span>
<span class="line"><span style="color:#E06C75;">	p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pathModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// cache为一个map对象</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> cache</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">realpathCacheKey</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 查找缓存</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> maybeCachedResult</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cache</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 是否查到了缓存，如果查到直接返回，如果没有查到，继续向后</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">maybeCachedResult</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> maybeCachedResult</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 定义所有软连接的缓存，ObjectCreate(null)创建的对象没有原型链，好处为它是一个纯粹的对象，节约内存空间</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> seenLinks</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ObjectCreate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> knownHard</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> ObjectCreate</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将传入的path保存下来，做了一个缓存，这里的p相当于缓存中的key(若是软连接，则为软连接路径)，original相当于value(实际路径)，这么做的原因为：这里的p我们后面可能会发生改变</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> original</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 然后下面代码，进入到上图流程图中的路径是否存在/这个流程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Current character position in p</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> pos</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// The partial path so far, including a trailing slash if any</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// The partial path without a trailing slash (except when pointing at a root)</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> base</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// The partial path scanned in the previous round, with slash</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> previous</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Skip over roots</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 找到p中的根路径</span></span>
<span class="line"><span style="color:#E06C75;">	current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> base</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> splitRoot</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">	pos</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// On windows, check that the root exists. On unix there is no need.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里是windows系统的逻辑，我们是mac的，所以可以先跳过</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isWindows</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">knownHard</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;">		binding</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lstat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pathModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toNamespacedPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		handleErrorFromBinding</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		knownHard</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Walk down the path, swapping out linked path parts for their real</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// values</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// NB: p.length changes.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 然后开始循环 由上文得知，我们的pos长度为1，p的长度为传入的path的长度</span></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">pos</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// find the next part</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// nextPart这里调用的就是p.indexOf(&#39;/&#39;,pos),这个方法举例如下：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// &quot;/xxx/yyy&quot;.indexOf(&#39;/&#39;)  =&gt; 0  这里我们找到的是第一个&quot;/&quot;的位置，如果我们想找第二个&quot;/&quot;位置</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// &quot;/xxx/yyy&quot;.indexOf(&#39;/&#39;,1) =&gt; 4,这里的1指的是跳过第一个元素，从第二个元素开始寻找</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> nextPart</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		previous</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">result</span><span style="color:#56B6C2;"> ===</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> last</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			current</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			base</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> previous</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			pos</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			current</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">result</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			base</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> previous</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			pos</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 判断一下在cahe中是否存在</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Continue if not a symlink, break if a pipe/socket</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">knownHard</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cache</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#E06C75;"> base</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 判断是否为一个file</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isFileType</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">statValues</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S_IFIFO</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> isFileType</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">statValues</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S_IFSOCK</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">				break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> resolvedLink</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 判断是不是软链接，从缓存中去拿</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> maybeCachedResolved</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cache</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">maybeCachedResolved</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			resolvedLink</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> maybeCachedResolved</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// Use stats array directly to avoid creating an fs.Stats instance just</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// for our internal use.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 没有拿到，然后做处理</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> baseLong</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pathModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toNamespacedPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// stats可以打印出 文件在操作系统下的各种信息/ dev_t:文件的设备编号 ino_t:文件在此设备的唯一标识</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> stats</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> binding</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lstat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">baseLong</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			handleErrorFromBinding</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 判断是否为一个软连接</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isFileType</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stats</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">S_IFLNK</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果不是软连接，将判断过的路径放入到 knowHard当中</span></span>
<span class="line"><span style="color:#E06C75;">				knownHard</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 判断到该路径是一个软连接，然后继续执行下面的代码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// Read the link if it wasn&#39;t read before</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// dev/ino always return 0 on windows, so skip the check.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// linkTarget 软连接实际的路径地址</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> linkTarget</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 判断是否为window操作系统</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isWindows</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 拿到stat的0号元素，即我们上面注释提到的文件设备编号</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> dev</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> stats</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">32</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 拿到stat的7号元素，即我们上面注释提到的文件唯一标识</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 拿到这两个是想生成一个唯一键：这个文件在当下PC系统下的唯一键</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> ino</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> stats</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">32</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">				id</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">dev</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">:</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">ino</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 通过这两个唯一键生成的唯一键作为 seenLinks的唯一键</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 下面代码为在seenLinks中查找是否有这个id，如果有就直接拿出来</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">seenLinks</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#E06C75;">					linkTarget</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> seenLinks</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 没有这个软连接的实际路径地址</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">linkTarget</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;">				binding</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">baseLong</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">				handleErrorFromBinding</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 拿到软连接的实际路径</span></span>
<span class="line"><span style="color:#E06C75;">				linkTarget</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> binding</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readlink</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">baseLong</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">				handleErrorFromBinding</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E06C75;">			resolvedLink</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pathModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">previous</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">linkTarget</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resolvedLink</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isWindows</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">seenLinks</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> linkTarget</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Resolve the link, then start over</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将path真实路径重新生成</span></span>
<span class="line"><span style="color:#E06C75;">		p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pathModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolvedLink</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Skip over roots</span></span>
<span class="line"><span style="color:#E06C75;">		current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> base</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> splitRoot</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		pos</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// On windows, check that the root exists. On unix there is no need.</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isWindows</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">knownHard</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;">			binding</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lstat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pathModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toNamespacedPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">			handleErrorFromBinding</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			knownHard</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">cache</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">original</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> encodeRealpathResult</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br></div></div><h4 id="_15-高难度的正则表达式" tabindex="-1">15.高难度的正则表达式 <a class="header-anchor" href="#_15-高难度的正则表达式" aria-label="Permalink to &quot;15.高难度的正则表达式&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">trailingSlash</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /(?:</span><span style="color:#C678DD;">^</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">/).</span><span style="color:#D19A66;">?</span><span style="color:#E06C75;">.</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/(?:</span><span style="color:#C678DD;">^</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">/).</span><span style="color:#D19A66;">?</span><span style="color:#E06C75;">.</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">--&gt;</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/(?:</span><span style="color:#C678DD;">^</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">/).</span><span style="color:#D19A66;">?</span><span style="color:#E06C75;">.</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;…&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">--&gt;</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/(?:</span><span style="color:#C678DD;">^</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">/).</span><span style="color:#D19A66;">?</span><span style="color:#E06C75;">.</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/…&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">--&gt;</span><span style="color:#D19A66;"> true</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/(?:</span><span style="color:#C678DD;">^</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">/).</span><span style="color:#D19A66;">?</span><span style="color:#E06C75;">.</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/Users&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">--&gt;</span><span style="color:#D19A66;"> false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_16-大招-如何快速拿到面试-一血-面试简历如何增加修改" tabindex="-1">16.大招：如何快速拿到面试 &quot;一血&quot;（面试简历如何增加修改） <a class="header-anchor" href="#_16-大招-如何快速拿到面试-一血-面试简历如何增加修改" aria-label="Permalink to &quot;16.大招：如何快速拿到面试 &quot;一血&quot;（面试简历如何增加修改）&quot;">​</a></h4><h5 id="简历简介" tabindex="-1">简历简介 <a class="header-anchor" href="#简历简介" aria-label="Permalink to &quot;简历简介&quot;">​</a></h5><blockquote><p>简历中简介部分至关重要，因为它位于简历的第一屏，是面试官最容易关注的部分，所以我们应该在简介部分充分突出我们的个人特长和优势</p></blockquote><h5 id="认真学完本章内容后应该怎么修改简历" tabindex="-1">认真学完本章内容后应该怎么修改简历？ <a class="header-anchor" href="#认真学完本章内容后应该怎么修改简历" aria-label="Permalink to &quot;认真学完本章内容后应该怎么修改简历？&quot;">​</a></h5><ul><li>熟悉 yargs 脚手架开发框架</li><li>熟悉多 Package 管理工具 lerna 的使用方法和使用原理</li><li>深入理解 Node.js 模块路径解析流程</li></ul><p><strong>面试官问起细节后如何回答？</strong></p><ul><li>如何通过 yargs 开发一个脚手架？</li></ul><p>答：比如 vue-cli 的脚手架创建为：<code>vue create myProjectName</code></p><h6 id="脚手架的构成一般由三个部分构成" tabindex="-1">脚手架的构成一般由三个部分构成： <a class="header-anchor" href="#脚手架的构成一般由三个部分构成" aria-label="Permalink to &quot;脚手架的构成一般由三个部分构成：&quot;">​</a></h6><blockquote><p>bin：主命令，它是在 packag.json 中配置的，通过 npm link 进行本地安装</p><p>command：命令</p><p>options：参数(boolean/string/number)，然后需要的一点是主命令 bin 的配置指向的主文件中，需要在文件顶部加上 <code>#!/usr/bin/env node</code>，就是说在环境变量中找到 node 命令来执行。</p></blockquote><h6 id="脚手架的初始化流程" tabindex="-1">脚手架的初始化流程 <a class="header-anchor" href="#脚手架的初始化流程" aria-label="Permalink to &quot;脚手架的初始化流程&quot;">​</a></h6><ul><li>第一步：首先是直接调用 Yargs 的构造函数，直接去生成一个脚手架：<code>Yargs();</code></li><li>第二步：会调用一系列的 Yargs 提供的常用方法，对脚手架功能进行一个增强。 比如 <ul><li>yargs.usage：用法</li><li>yargs.options：注册一些脚手架参数熟悉</li><li>yargs.group：来对脚手架参数熟悉进行分组</li><li>yargs.fail：对脚手架异常进行监听</li><li>yargs.elipogue()：包括<code>yargs</code>尾部结语的设置</li><li>yargs.wrap()：脚手架窗口设置</li><li>yargs.decomandrecommed：至少输入一个参数</li><li>yargs.recommedCommands()：推荐命令的提示等</li><li>Yargs.options</li><li>Yargs.option</li><li>Yargs.group</li><li>Yargs.demandCommand</li><li>Yargs.recommendCommands</li><li>Yargs.strict</li><li>Yargs.fail</li><li>Yargs.alias</li><li>Yargs.wrap</li><li>Yargs.epilogue</li></ul></li><li>第三步：脚手架参数解析方法：需要对脚手架的参数进行一些解析： <ul><li><code>hideBin(process.argv)</code>：其实也就是直接取出从第三个开始的参数，调用的时候直接 yargs.argv；</li><li><code>yargs.parse(argv,options)</code>：</li></ul></li><li>第四步：命令注册方法：当脚手架的参数解析完成之后，我们要进行命令注册： <ul><li><code>yargs.command()</code>：</li><li>command 的注册方式有两种：第一种是一次传参(command, describe, builder, handler)，还有一种方式就是传入一个对象，对象属性与第一种方式传入的相同。 <ul><li>Yargs.command(command, describe, builder, handler)</li><li>Yargs.command({ command, describe, builder, handler })</li></ul></li></ul></li></ul><p><strong>lerna：熟悉多 Package 管理工具 lerna 的使用方法和使用原理</strong></p><blockquote><p>答：首先 lerna 是基于一个 git + npm 的多 package，也就是多包的项目管理工具，像一些开源的大型库：<code>vue-vcli/create-react-app/babel</code> 等都是基于 lerna 进行多包管理的。</p></blockquote><p>lerna 的作用：降低包的管理操作成本，提高开发效率。</p><ul><li>像包的安装、依赖的添加、依赖的解除以及包的发布、打标签等功能。</li></ul><p>lerna 的实现原理：</p><ul><li>1.首先就是通过 <code>import-local</code> 这个库优先调用 lerna 的本地命令</li><li>2.然后通过 yargs 生成一个脚手架、生成脚手架后生成一些全局参数、然后注册命令，通过 yargs.parse 方法进行参数解析。</li><li>3.需要注意的是 lerna 的命令注册过程中，需要传入 builder 以及 handler 两个方法，builder 命令用于注册命令专属的 options，而 handelr 用来处理命令的业务逻辑。</li><li>4.有一点非常值得学习的内容就是 lerna 它是通过配置本地依赖的方式进行开发的，具体写法就是在 package.json 的依赖当中通过 <code>file:你的本地包的名字</code>的格式书写，在 lerna publish 的时候再将该路径替换。</li></ul><p><strong>对 Node.js 模块路径解析流程的一个理解</strong></p><ul><li>第一：首先 Node.js 模块的路径解析是通过 <code>require.resolve()</code> 方法来实现的</li><li>第二：<code>require.resolve()</code> 方法就是<code>Module._resolveFileName()</code>方法 它的作用就是我们给定一个模块名称的时候，查找处这个模块的真实路径。</li><li>然后，他的核心实现原理的流程有 3 点： <ul><li>1.在执行流程中判断当前路径是否为内置模块，若是内置模块直接返回</li><li>2.若不是内置模块，它会继续调用自身的 <code>Module._resolveLookupPaths()</code>方法生成 node_modules 的所有可能路径</li><li>3.最后再通过 <code>Module._findPath()</code>去查询模块的真实路径。</li></ul></li><li>这里关于 <code>Module._findPaths()</code>方法的核心实现流程有 4 步： <ul><li>1.查询缓存（将 <code>request[模块名称]</code> 和 <code>paths[上面返回的所有可生成的node_modules路径]</code> 通过 <code>x00</code> 合并成 <code>cacheKey</code>）</li><li>2.缓存查不到，就会遍历 paths，将每一个 path 与 request 结合组成文件路径 basePath</li><li>3.然后判断这个 basePath 路径是否存在，如果存在会调用 <code>fs.realPathSync()</code> 方法获取文件的真实路径，不存在就会继续遍历。</li><li>4.同时，将文件的真实路径缓存到 <code>Module._pathcache()</code> 中。</li></ul></li><li>这里关于 <code>fs.realPathsync()</code> 方法的核心流程有 3 点： <ul><li>1.仍然是查询缓存，缓存的 key 就是我们的 path，即 basePath，</li><li>2.如果这个 key 没有找到，就会将这个 key 从左到右开始遍历，通过 <code>/</code> 进行循环遍历，拆分路径，然后判断这个路径是否为软链接，如果是软链接，就去查询它的真实路径，并生成新的 path 路径，这个新的 path 路径继续传入这个遍历函数，继续往后遍历，(这里有一个细节需要注意的是：遍历过程中生成的子路径 base 会缓存在 knowHard 和 ache 中，避免重复查询)。</li><li>3.遍历完成后，就会得到模块的真实路径，并且将原始路径，也就是我们说的软连接路径作为 key 值，将真实值作为 value 值，保存在缓存中</li></ul></li></ul><p>在 require 中还有一个方法是 <code>require.resolve.paths()</code> 方法，这个方法的作用是用于获取所有 node_modules 可能存在的路径，他的核心内容就是<code>Module._resolveLookupPaths()</code></p><p><code>Module._resolveLookupPaths()</code> 的实现原理有 2 点：</p><ul><li>第一点，如果是 / 路径，就在后面加入 node_modules</li><li>第二点，将路径从后往前遍历，如果查询到 <code>/</code> ，就拆分路径，在后面加上 node_modules，一直遍历到查找不到 <code>/</code> 路径，就会返回这个 paths 数组。</li></ul><h2 id="脚手架的核心流程开发" tabindex="-1">脚手架的核心流程开发 <a class="header-anchor" href="#脚手架的核心流程开发" aria-label="Permalink to &quot;脚手架的核心流程开发&quot;">​</a></h2><h3 id="将收获什么" tabindex="-1">将收获什么 <a class="header-anchor" href="#将收获什么" aria-label="Permalink to &quot;将收获什么&quot;">​</a></h3><ul><li>架构设计和技术方案设计全过程</li><li>脚手架执行核心流程和 commander 框架</li><li>如何让 Node 项目支持 ES Module</li></ul><h3 id="主要内容-1" tabindex="-1">主要内容 <a class="header-anchor" href="#主要内容-1" aria-label="Permalink to &quot;主要内容&quot;">​</a></h3><ul><li>脚手架需求分析和架构设计</li><li>脚手架模块拆分策略和 core 模块技术方案</li><li>脚手架执行准备过程实现</li><li>脚手架命令注册实现(基于 commander)</li></ul><h3 id="附赠内容-1" tabindex="-1">附赠内容 <a class="header-anchor" href="#附赠内容-1" aria-label="Permalink to &quot;附赠内容&quot;">​</a></h3><p>Node 项目如何支持 ES Module</p><h3 id="关键词" tabindex="-1">关键词 <a class="header-anchor" href="#关键词" aria-label="Permalink to &quot;关键词&quot;">​</a></h3><ul><li>脚手架-掌握脚手架需求分析和架构设计</li><li>架构设计-图解架构设计图+绘图技巧</li><li>commander-脚手架开发框架</li></ul><h3 id="学习方法-1" tabindex="-1">学习方法 <a class="header-anchor" href="#学习方法-1" aria-label="Permalink to &quot;学习方法&quot;">​</a></h3><ul><li>学以致用：将上一章中学到的知识进行实际应用 (import-local/local dependencies /Promise chain 等)</li><li>动手实践：听完课程讲解后一定要动手画图、跟着老师把代码敲一遍，有很多技术细节需要在自己开发过程中去感悟和理解</li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li>本章前半部分偏架构设计，这部分内容很重要，是架构师的工作日常</li><li>大厂架构师很多时候不是边写边想，而是把整体和局部都想清楚了再开始</li><li>做注意培养自己的思考能力，将代码实现细节的内容抽象，通过系统论的思想构建复杂系统</li></ul><h3 id="谈一谈大厂怎么做项目的" tabindex="-1">谈一谈大厂怎么做项目的 <a class="header-anchor" href="#谈一谈大厂怎么做项目的" aria-label="Permalink to &quot;谈一谈大厂怎么做项目的&quot;">​</a></h3><p>项目设计阶段：</p><ul><li>业务痛点 —— 需求——原型——目标——技术方案的设计： <ul><li>技术的选型</li><li>技术的架构</li><li>API 的定义</li><li>技术调研</li><li>评估技术的风险</li></ul></li><li>项目立项</li><li>项目排期计划</li><li>项目实施：交互设计交付——&gt;开发阶段</li></ul><p>项目开发阶段：</p><p>项目测试阶段：</p><p>项目验收阶段：</p><p>项目发布上线</p><p><img src="`+c+'" alt="项目设计阶段"></p><p><img src="'+i+'" alt="项目实施阶段"></p><h3 id="脚手架需求分析" tabindex="-1">脚手架需求分析 <a class="header-anchor" href="#脚手架需求分析" aria-label="Permalink to &quot;脚手架需求分析&quot;">​</a></h3><h4 id="痛点分析" tabindex="-1">痛点分析 <a class="header-anchor" href="#痛点分析" aria-label="Permalink to &quot;痛点分析&quot;">​</a></h4><p>从这张图看起，分析研发过程的痛点：</p><p><img src="'+n+'" alt="大厂研发架构图"></p><p>痛点分析:</p><ul><li>创建项目/组件时，存在大量重复代码拷贝：快速复用已有沉淀</li><li>协同开发时，由于 git 操作不规范，导致分支混乱，操作耗时：制定标准的 gt 操作规范并集成到脚手架。</li><li>发布上线耗时，而且容易出现各种错误：制定标准的上线流程和规范并集成到脚手架</li></ul><h3 id="脚手架需求分析-1" tabindex="-1">脚手架需求分析 <a class="header-anchor" href="#脚手架需求分析-1" aria-label="Permalink to &quot;脚手架需求分析&quot;">​</a></h3><ul><li>通用的研发脚手架</li><li>通用的项目/组件创建能力 <ul><li>模板支持定制，定制后能够快速生效</li><li>模板支持快速接入，极低的接入成本</li></ul></li><li>通用的项目/组件发布能力 <ul><li>发布过程自动完成标准的 git 操作</li><li>发布成功后自动删除开发分支并创建 tag</li><li>发布后自动完成云构建、OSS 上传、CDN 上传、域名绑定</li><li>发布过程支持测试/正式两种模式</li></ul></li></ul><h3 id="大厂的-git-操作规范" tabindex="-1">大厂的 git 操作规范 <a class="header-anchor" href="#大厂的-git-操作规范" aria-label="Permalink to &quot;大厂的 git 操作规范&quot;">​</a></h3><p>开发的时候在 dev 分支开发，上线新创建一个 release 分支，分支格式如下：</p><ul><li>dev/0.01（上线之后再删除这个分支，然后再基于上个分支创建新分支，创建一个 tag，并基于此分支继续开发：dev/0.02）</li><li>release/0.0.1</li></ul><h3 id="脚手架架构设计-架构图" tabindex="-1">脚手架架构设计 + 架构图 <a class="header-anchor" href="#脚手架架构设计-架构图" aria-label="Permalink to &quot;脚手架架构设计 + 架构图&quot;">​</a></h3><h4 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h4><ul><li>脚手架核心框架 <ul><li>执行准备</li><li>命令注册</li><li>命令执行</li></ul></li><li>标准 git 操作体系 <ul><li>仓库创建</li><li>开发模式 <ul><li>代码仓库 <ul><li>GithHub</li><li>Gitee</li></ul></li></ul></li><li>发布模式</li></ul></li><li>初始化体系 <ul><li>项目初始化</li><li>组件初始化</li><li>初始化模式</li></ul></li><li>发布体系 <ul><li>项目发布</li><li>组件发布</li><li>发布模式</li></ul></li><li>OPEN API <ul><li>项目/组件模板</li><li>静态资源查询</li><li>配置信息</li></ul></li><li>WebSocket 服务 <ul><li>云构建</li><li>云发布</li><li>发布模式</li></ul></li></ul><h4 id="自己画的架构图" tabindex="-1">自己画的架构图 <a class="header-anchor" href="#自己画的架构图" aria-label="Permalink to &quot;自己画的架构图&quot;">​</a></h4><h4 id="视觉架构图" tabindex="-1"><img src="'+B+'" alt="脚手架架构图">视觉架构图 <a class="header-anchor" href="#视觉架构图" aria-label="Permalink to &quot;![脚手架架构图](.\\img\\脚手架架构图.jpg)视觉架构图&quot;">​</a></h4><p><img src="'+y+'" alt="脚手架架构图视觉"></p><h3 id="脚手架拆包策略" tabindex="-1">脚手架拆包策略 <a class="header-anchor" href="#脚手架拆包策略" aria-label="Permalink to &quot;脚手架拆包策略&quot;">​</a></h3><ul><li>核心流程：core</li><li>命令：commander <ul><li>初始化</li><li>发布</li><li>清除缓存</li><li>...</li></ul></li><li>模型层：models <ul><li>Command 命令</li><li>Project 项目</li><li>Component 组件</li><li>Npm 模块</li><li>Git 仓库</li></ul></li><li>支撑模块：utils <ul><li>Git 操作</li><li>云构建 0</li><li>工具方法</li><li>API 请求</li><li>Git API</li></ul></li></ul><h4 id="拆分原则" tabindex="-1">拆分原则 <a class="header-anchor" href="#拆分原则" aria-label="Permalink to &quot;拆分原则&quot;">​</a></h4><p>根据模块的功能拆分:</p><ul><li>核心模块: core</li><li>命令模块: commands</li><li>模型模块: modeis</li><li>工具模块: utils</li></ul><h3 id="core-模块的技术方案" tabindex="-1">core 模块的技术方案 <a class="header-anchor" href="#core-模块的技术方案" aria-label="Permalink to &quot;core 模块的技术方案&quot;">​</a></h3><h4 id="命令执行流程" tabindex="-1">命令执行流程 <a class="header-anchor" href="#命令执行流程" aria-label="Permalink to &quot;命令执行流程&quot;">​</a></h4><ul><li>准备阶段 prepare： <ul><li>检查版本号</li><li>检查 node 版本</li><li>检查 root 启动</li><li>检查用户主目录</li><li>检查入参</li><li>检查环境变量</li><li>检查是否为最新版本</li><li>提示更新</li></ul></li><li>命令注册 registerCommand： <ul><li>注册 init 命令</li><li>注册 publish 命令</li><li>注册 clean 命令</li><li>支持 debug</li></ul></li><li>命令执行 execCommand：</li></ul><h4 id="涉及技术点" tabindex="-1">涉及技术点 <a class="header-anchor" href="#涉及技术点" aria-label="Permalink to &quot;涉及技术点&quot;">​</a></h4><h5 id="核心库" tabindex="-1">核心库 <a class="header-anchor" href="#核心库" aria-label="Permalink to &quot;核心库&quot;">​</a></h5><ul><li>import-loca</li><li>commander</li></ul><h5 id="工具库" tabindex="-1">工具库 <a class="header-anchor" href="#工具库" aria-label="Permalink to &quot;工具库&quot;">​</a></h5><ul><li>npmlog：<a href="https://www.npmjs.com/package/npmlog" target="_blank" rel="noreferrer">npmlog - npm (npmjs.com)</a></li><li>fs-extra：<a href="https://www.npmjs.com/package/fs-extra" target="_blank" rel="noreferrer">fs-extra - npm (npmjs.com)</a></li><li>semver：<a href="https://www.npmjs.com/package/semver" target="_blank" rel="noreferrer">semver - npm (npmjs.com)</a></li><li>colors：<a href="https://www.npmjs.com/package/colors" target="_blank" rel="noreferrer">https://www.npmjs.com/package/colors</a></li><li>userhome| untildify： <ul><li><a href="https://www.npmjs.com/package/userhome" target="_blank" rel="noreferrer">userhome - npm (npmjs.com)</a></li><li><a href="https://www.npmjs.com/package/untildify" target="_blank" rel="noreferrer">untildify - npm (npmjs.com)</a></li></ul></li><li>dotenv：<a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="noreferrer">dotenv - npm (npmjs.com)</a></li><li>root-check | is-root： <ul><li><a href="https://www.npmjs.com/package/root-check" target="_blank" rel="noreferrer">root-check - npm (npmjs.com)</a></li><li><a href="https://www.npmjs.com/package/is-root" target="_blank" rel="noreferrer">is-root - npm (npmjs.com)</a></li></ul></li></ul><h3 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h3><p>github：</p>',486)]))}const g=a(b,[["render",u]]);export{h as __pageData,g as default};
