import{_ as t,c as r,o as i,ah as a}from"./chunks/framework.DqD713j2.js";const T=JSON.parse('{"title":"1-初识TypeScript","description":"","frontmatter":{},"headers":[],"relativePath":"Document/TypeScript/TypeScript开发前置/1-初识TypeScript.md","filePath":"Document/TypeScript/TypeScript开发前置/1-初识TypeScript.md","lastUpdated":1750954157000}'),e={name:"Document/TypeScript/TypeScript开发前置/1-初识TypeScript.md"};function c(l,p,o,s,S,n){return i(),r("div",null,p[0]||(p[0]=[a('<h1 id="_1-初识typescript" tabindex="-1">1-初识TypeScript <a class="header-anchor" href="#_1-初识typescript" aria-label="Permalink to &quot;1-初识TypeScript&quot;">​</a></h1><p>菜鸟教程-TypeScript教程文档：<a href="https://www.runoob.com/typescript/ts-tutorial.html" target="_blank" rel="noreferrer">https://www.runoob.com/typescript/ts-tutorial.html</a></p><hr><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28ca61cc160c417c8497a00defdca5f0~tplv-k3u1fbpfcp-watermark.image" alt="TS与JS.png"></p><h2 id="typescript-的介绍" tabindex="-1">TypeScript 的介绍 <a class="header-anchor" href="#typescript-的介绍" aria-label="Permalink to &quot;TypeScript 的介绍&quot;">​</a></h2><p>TypeScript 是一种由微软开发的开源、跨平台的编程语言。它是 JavaScript 的超集，最终会被编译为 JavaScript 代码。</p><p>2012 年 10 月，微软发布了首个公开版本的 TypeScript，2013 年 6 月 19 日，在经历了一个预览版之后微软正式发布了正式版 TypeScript</p><p>TypeScript 的作者是安德斯·海尔斯伯格，C#的首席架构师。它是开源和跨平台的编程语言。</p><p>TypeScript 扩展了 JavaScript 的语法，所以任何现有的 JavaScript 程序可以运行在 TypeScript 环境中。</p><p>TypeScript 是为大型应用的开发而设计，并且可以编译为 JavaScript。</p><p>TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6+ 的支持，它由 Microsoft 开发，代码开源于 GitHub 上</p><p><strong>TypeScript 是 JavaScript 的一个超集</strong>，主要提供了<strong>类型系统</strong>和<strong>对 ES6+ 的支持</strong>，它由 Microsoft 开发，代码 <a href="https://github.com/Microsoft/TypeScript" target="_blank" rel="noreferrer">开源于 GitHub</a> 上</p><ul><li><p>是JavaScript的超集，主要提供了类型系统和对 ES6+ 的支持</p></li><li><p>以JavaScript为基础构建的语言</p></li><li><p>可以在任何支持JavaScript的平台中执行</p></li><li><p>本质上添加了可选的静态类型和基于类的面向对象编程</p></li><li><p>TypeScript 扩展了JavaScript，并添加了类型</p></li><li><p>优势</p><ul><li><p>1.开发过程中，能发现潜在的问题</p></li><li><p>2.更友好的编辑器自动提示</p></li><li><p>3.类型的声明，让我们看到代码里的直观语义</p></li></ul></li><li><p>TypeScript增加了什么</p><ul><li><p>类型</p></li><li><p>支持ES的新特性</p></li><li><p>强大的开发工具</p></li><li><p>添加ES不具备的新特性</p></li><li><p>丰富的配置选项</p></li></ul></li></ul><h2 id="typescript-的特点" tabindex="-1">TypeScript 的特点 <a class="header-anchor" href="#typescript-的特点" aria-label="Permalink to &quot;TypeScript 的特点&quot;">​</a></h2><p>TypeScript 主要有 3 大特点：</p><ul><li><strong>始于 JavaScript，归于 JavaScript</strong></li></ul><p>TypeScript 可以编译出纯净、 简洁的 JavaScript 代码，并且可以运行在任何浏览器上、Node.js 环境中和任何支持 ECMAScript 3（或更高版本）的 JavaScript 引擎中。</p><ul><li><strong>强大的类型系统</strong></li></ul><p><strong>类型系统</strong>允许 JavaScript 开发者在开发 JavaScript 应用程序时使用高效的开发工具和常用操作比如静态检查和代码重构。</p><ul><li><strong>先进的 JavaScript</strong></li></ul><p>TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件。</p><h2 id="typescript-优势" tabindex="-1">TypeScript 优势 <a class="header-anchor" href="#typescript-优势" aria-label="Permalink to &quot;TypeScript 优势&quot;">​</a></h2><ul><li><strong>优势1：编译时静态类型检测</strong>：函数或方法传参或变量赋值不匹配时，会出现编译错误提示，规避了开发期间的大量低级错误，省时，省力。</li><li><strong>优势2：自动提示更清晰明确。</strong></li><li>优势3：引入了泛型和一系列的 TS 特有的类型</li><li><strong>优势4：强大的 d.ts 声明文件</strong>：声明文件像一个书的目录一样，清晰直观展示了依赖库文件的接口，type类型，类，函数，变量等声明。</li><li><strong>优势5：轻松编译成 JS 文件</strong>：即使 TS 文件有错误，绝大多数情况也能编译出JS 文件</li><li><strong>优势6：灵活性高</strong>：尽管 TS 是一门 强类型检查语言，但也提供了 any 类型 和 as any 断言，这提供了 TS 的灵活度。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>TypeScript 在社区的流行度越来越高，它非常适用于一些大型项目，也非常适用于一些基础库，极大地帮助我们提升了开发效率和体验。</p>',25)]))}const u=t(e,[["render",c]]);export{T as __pageData,u as default};
