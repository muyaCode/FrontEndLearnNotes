import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97.BzQMcgZG.jpg",o="/FrontEndLearnNotes/assets/%E5%9F%BA%E4%BA%8E%E8%AF%A5%E5%87%BD%E6%95%B0%E6%9D%A5%E5%88%9B%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8.HfIcG24C.jpg",r="/FrontEndLearnNotes/assets/%E6%8A%8A%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%8B%86%E5%88%86%E5%88%B0%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E4%B9%8B%E5%A4%96.CkQB_Sjk.jpg",t="/FrontEndLearnNotes/assets/API%E7%BD%91%E5%85%B3%E8%A7%A6%E5%8F%91%E5%99%A8.Dkw9Ejnz.jpg",c="/FrontEndLearnNotes/assets/%E5%AE%9A%E6%97%B6%E8%A7%A6%E5%8F%91%E5%99%A8.Cnxv9aAd.jpg",i="/FrontEndLearnNotes/assets/%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA.Dnh_g4Cq.jpg",B="/FrontEndLearnNotes/assets/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.B_Ysnu-u.jpg",y="/FrontEndLearnNotes/assets/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8.DC_Z-t1D.jpg",b="/FrontEndLearnNotes/assets/%E5%87%BD%E6%95%B0%E5%90%8C%E6%AD%A5%E8%B0%83%E7%94%A8.sb2KvtFT.jpg",u="/FrontEndLearnNotes/assets/%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0.Bs66f3oW.jpg",d="/FrontEndLearnNotes/assets/%E5%87%BD%E6%95%B0%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4.BlHrZTxR.jpg",F="/FrontEndLearnNotes/assets/%E5%86%B7%E5%90%AF%E5%8A%A8%E5%92%8C%E7%83%AD%E5%90%AF%E5%8A%A8.Bl6lJkbM.jpg",m="/FrontEndLearnNotes/assets/%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%B7%E6%B1%82.f_kU7cCa.jpg",C="/FrontEndLearnNotes/assets/%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC.CX7iqA5p.jpg",A="/FrontEndLearnNotes/assets/%E5%BC%80%E5%8F%91%E9%80%82%E9%85%8D%E6%A0%87%E5%87%86.aECKMP4h.jpg",E="/FrontEndLearnNotes/assets/%E4%B8%BB%E6%B5%81%E7%9A%84Serverless%E7%9A%84%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.DoUWqtBF.jpg",h="/FrontEndLearnNotes/assets/%E5%87%BD%E6%95%B0%E5%AE%9E%E4%BE%8B.CXy-qkzL.jpg",v="/FrontEndLearnNotes/assets/java%E8%AF%AD%E8%A8%80%E7%BC%96%E8%AF%91.DCujMWIM.jpg",q="/FrontEndLearnNotes/assets/FaaS%E7%9A%84%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86.DvgJcF-f.jpg",D="/FrontEndLearnNotes/assets/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8E%9F%E7%90%86.BBBd6EeQ.jpg",g="/FrontEndLearnNotes/assets/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%90%E8%A1%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B.B1QHEFEe.jpg",f="/FrontEndLearnNotes/assets/%E6%B5%8B%E8%AF%95%E9%87%91%E5%AD%97%E5%A1%94.Bok0dkjP.jpg",N=JSON.parse('{"title":"Serverle 应用开发","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Serverless/Serverle应用开发.md","filePath":"Document/Serverless/Serverle应用开发.md","lastUpdated":1750954157000}'),k={name:"Document/Serverless/Serverle应用开发.md"};function S(x,s,P,w,_,j){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="serverle-应用开发" tabindex="-1">Serverle 应用开发 <a class="header-anchor" href="#serverle-应用开发" aria-label="Permalink to &quot;Serverle 应用开发&quot;">​</a></h1><h2 id="serverless-的厂商" tabindex="-1">Serverless 的厂商 <a class="header-anchor" href="#serverless-的厂商" aria-label="Permalink to &quot;Serverless 的厂商&quot;">​</a></h2><p>云产品：AWS、Lambda、阿里云函数计算、腾讯云云函数等</p><p>开源产品：OpenFaaS、Fission、Kubeless 等</p><p>网址：</p><p>1.亚马逊 AWS Lambda：<a href="https://aws.amazon.com/cn/lambda/" target="_blank" rel="noreferrer">https://aws.amazon.com/cn/lambda/</a></p><p>2.谷歌 Google Cloud Functions：<a href="https://cloud.google.com/functions" target="_blank" rel="noreferrer">https://cloud.google.com/functions</a></p><p>3.微软 Microsoft Azure：<a href="https://www.azure.cn/" target="_blank" rel="noreferrer">https://www.azure.cn/</a></p><p>4.阿里云函数计算：<a href="https://www.aliyun.com/product/fc" target="_blank" rel="noreferrer">https://www.aliyun.com/product/fc</a></p><p>5.腾讯云云函数 SCF (Serverless Cloud Function)：<a href="https://cloud.tencent.com/product/scf" target="_blank" rel="noreferrer">https://cloud.tencent.com/product/scf</a></p><ul><li><p>腾讯云文档：<a href="https://cloud.tencent.com/document/product/583/9705" target="_blank" rel="noreferrer">云函数 触发器概述-触发器-文档中心-腾讯云 (tencent.com)</a></p></li><li><p>腾讯云开发--文档中心：<a href="https://cloud.tencent.com/document/product" target="_blank" rel="noreferrer">云产品文档中心_云产品帮助中心 (tencent.com)</a></p><p>6.华为云 FunctionGraph：<a href="https://www.huaweicloud.com/product/functiongraph.html" target="_blank" rel="noreferrer">https://www.huaweicloud.com/product/functiongraph.html</a></p></li></ul><h3 id="选择适合的-faas-平台" tabindex="-1">选择适合的 FaaS 平台 <a class="header-anchor" href="#选择适合的-faas-平台" aria-label="Permalink to &quot;选择适合的 FaaS 平台&quot;">​</a></h3><h4 id="faas-产品对比" tabindex="-1">FaaS 产品对比 <a class="header-anchor" href="#faas-产品对比" aria-label="Permalink to &quot;FaaS 产品对比&quot;">​</a></h4><table tabindex="0"><thead><tr><th></th><th>Lambda (国外)</th><th>Azure Functions (国外)</th><th>函数计算 (国内)</th><th>云函数 (国内)</th></tr></thead><tbody><tr><td>编程语言</td><td>Node.js/Python/Ruby/Java/Go/C#/PowerShell</td><td>JavaScript/TypeScript/PythonRuby/Java/C#/PowerShell</td><td>Node.js/Python/PHP/Java/C#</td><td>Node.js/Python/Go/Java</td></tr><tr><td>触发器</td><td>API Gateway/AWS IoT/CloudFront/CodeCommit/MQ/S3/SNS/EventBridge/...</td><td>HTTP/Azure Cosmos DB/loT Hub/Notifications Hub/Queue Storage/Kafka/TableStorage/Timer/...</td><td>HTTP/OSS/MNS/日志服务/Tablestore/CDN/定时触发器/云监控触发器/...</td><td>API 网关/COS/定时触发器/CMQ Topic/CKafka/...</td></tr><tr><td>免费额度</td><td>100 万次函数执行次数；40 万 GB-s 执行时间</td><td>100 万次函数执行次数；40 万 GB-s 执行时间</td><td>100 万次函数执行次数；40 万 GB-s 执行时间</td><td>100 万次函数执行次数；40 万 GB-s 执行时间</td></tr></tbody></table><ul><li>FaaS 平台都支持 Node.js、Python 、Java 等编程语言</li><li>FaaS 平台都支持 HTTP 和定时触发器</li><li>FaaS 的计费都差不多，且每个月都提供一定的免费额度</li></ul><p>资源分配：在 Serverless 架构中，你不用关心应用运行的资源(比如服务配置、磁盘大小) 只提供一份代码就行。</p><p>计费方式：在 Serverless 架构中，计费方式按实际使用量计费(比如函数调用次数、运行时长)，不按传统的执行代码所需的资源计费(比如固定 CPU)。计费粒度也精确到了毫秒级，而不是传统的小时级别。</p><table tabindex="0"><thead><tr><th></th><th>腾讯云</th><th>阿里云</th></tr></thead><tbody><tr><td>计算量</td><td>40 万 G 免费；0.00011108 元/GBs</td><td>40 万 G 免费；0.000110592 元/GBs</td></tr><tr><td>调用量</td><td>100 万次免费；0.0133 元/万次</td><td>100 万次免费；0.0133 元/万次</td></tr></tbody></table><ul><li><p>每天有 100 万次请求，云函数配置 128MB 内存；</p></li><li><p>每次处理请求的平均运行时间为 70 ms；</p></li><li><p>个别云厂商推出了每个月的免费额度，比如腾讯云提供了<strong>每个月 40 万 GBs 的资源使用额度和 100 万次调用次数的免费额度</strong>。中小企业的网站访问量不是特别大的话完全可以免费使用。</p></li></ul><p>弹性伸缩：Serverless 架构的弹性伸缩更自动化、更精确，可以快速根据业务并发扩容更多的实例，甚至允许缩容到零实例状态来实现零费用，对用户来说是完全无感知的。而传统架构对服务器 (虚拟机)进行扩容，虚拟机的启动速度也比较慢，需要几分钟甚至更久。</p><h4 id="_1、为什么不使用亚马逊、谷歌、微软、ibm-的-serverless" tabindex="-1">1、为什么不使用亚马逊、谷歌、微软、IBM 的 serverless? <a class="header-anchor" href="#_1、为什么不使用亚马逊、谷歌、微软、ibm-的-serverless" aria-label="Permalink to &quot;1、为什么不使用亚马逊、谷歌、微软、IBM 的 serverless?&quot;">​</a></h4><p>答：在国内阿里云 腾讯云使用的更多一些。就和大家购买域名、购买服务器一样,首先想到的肯定不是国外的运营商，当然你如果英文特别好也可以尝试的使用一下。</p><h4 id="_2、阿里云-腾讯云-华为云我们为什么选择了腾讯云" tabindex="-1">2、阿里云 腾讯云 华为云我们为什么选择了腾讯云? <a class="header-anchor" href="#_2、阿里云-腾讯云-华为云我们为什么选择了腾讯云" aria-label="Permalink to &quot;2、阿里云 腾讯云 华为云我们为什么选择了腾讯云?&quot;">​</a></h4><p>答：</p><ul><li>1、微信小程序的云开发就是基于腾讯云，选择腾讯云更方便和小程序对接</li><li>2、腾讯云在 serverless 方面相比其他厂商支持更好一些</li><li>3、腾讯云的技术在线客服非常棒</li><li>4、腾讯云和 serverless 合作在腾讯云中集成了 serverless Framework 让我们可 以用我们喜欢的框架开发 serverless 应用。也可以让我们快速部署老项目。</li><li>5、价格更便宜</li></ul><h4 id="_3、会使用腾讯云的-serverless-以后-其他服务商的-serverless-也会了吗" tabindex="-1">3、会使用腾讯云的 serverless 以后，其他服务商的 serverless 也会了吗? <a class="header-anchor" href="#_3、会使用腾讯云的-serverless-以后-其他服务商的-serverless-也会了吗" aria-label="Permalink to &quot;3、会使用腾讯云的 serverless 以后，其他服务商的 serverless 也会了吗?&quot;">​</a></h4><p>答：是的</p><h2 id="一-开发-serverless-应用的步骤" tabindex="-1">一.开发 Serverless 应用的步骤 <a class="header-anchor" href="#一-开发-serverless-应用的步骤" aria-label="Permalink to &quot;一.开发 Serverless 应用的步骤&quot;">​</a></h2><p>这里主要给大家介绍的是如何通过 Serverless Framework 提供的云函数 SCF 组件快速创建与部署一个云函数项目。后期我们还会详细给大家讲解，这里只是演示。</p><p>前提条件：Serverless Framework 帮助您将项目快速部署到腾讯云 Serverless 平台，因此在部署前，请确认您已经 注册腾讯云账号 并完成 实名认证。</p><h3 id="_1-安装-serverless" tabindex="-1">1.安装 serverless <a class="header-anchor" href="#_1-安装-serverless" aria-label="Permalink to &quot;1.安装 serverless&quot;">​</a></h3><p>本地电脑上安装</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> serveress</span></span>
<span class="line"><span style="color:#61AFEF;">serverless</span><span style="color:#D19A66;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-创建项目" tabindex="-1">2.创建项目 <a class="header-anchor" href="#_2-创建项目" aria-label="Permalink to &quot;2.创建项目&quot;">​</a></h3><p>自己要创建项目的目录上面，命令行运行 serverless</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">serverless</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后选择一个合适自己的模板</p><p>以下面功能为例</p><p>这个 Serverless 应用的功能是：提供一个所有人都可访问的“Hello World!” 接口，并且能够根据请求参数进行响应</p><h3 id="如何把接口分享给别人" tabindex="-1">如何把接口分享给别人 <a class="header-anchor" href="#如何把接口分享给别人" aria-label="Permalink to &quot;如何把接口分享给别人&quot;">​</a></h3><h4 id="传统应用开发流程" tabindex="-1">传统应用开发流程 <a class="header-anchor" href="#传统应用开发流程" aria-label="Permalink to &quot;传统应用开发流程&quot;">​</a></h4><ul><li>1.代码开发</li><li>2.初始化服务器安装 Node.js、Nginx)</li><li>3.启动 Nodejs Server( node index.js )</li><li>4.解析域名</li><li>5.配置 Nginx</li></ul><h4 id="serverless-应用开发流程" tabindex="-1">Serverless 应用开发流程 <a class="header-anchor" href="#serverless-应用开发流程" aria-label="Permalink to &quot;Serverless 应用开发流程&quot;">​</a></h4><ul><li>1.代码开发</li><li>2.代码部署 FaaS 函数)</li><li>3.创建触发器</li></ul><h3 id="serverless-应用开发流程-使用-函数计算-为例" tabindex="-1">Serverless 应用开发流程：使用 函数计算 为例 <a class="header-anchor" href="#serverless-应用开发流程-使用-函数计算-为例" aria-label="Permalink to &quot;Serverless 应用开发流程：使用 函数计算 为例&quot;">​</a></h3><h4 id="_1-以函数计算为例-可以进入函数计算的控制台-创建和编写函数" tabindex="-1">1.以函数计算为例，可以进入函数计算的控制台，创建和编写函数 <a class="header-anchor" href="#_1-以函数计算为例-可以进入函数计算的控制台-创建和编写函数" aria-label="Permalink to &quot;1.以函数计算为例，可以进入函数计算的控制台，创建和编写函数&quot;">​</a></h4><p><img src="`+e+`" alt="函数计算"></p><p>示例函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 函数计算</span></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从request 中获取</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">iname</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">queries</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 设置 HTTP 响应</span></span>
<span class="line"><span style="color:#E5C07B;">	response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setStatusCode</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;application/json&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`Hello, </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;"> }));</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_2-基于该函数来创建触发器" tabindex="-1">2.基于该函数来创建触发器 <a class="header-anchor" href="#_2-基于该函数来创建触发器" aria-label="Permalink to &quot;2.基于该函数来创建触发器&quot;">​</a></h4><p><img src="`+o+`" alt="基于该函数来创建触发器"></p><p>用该 APIEndpoint 对函数进行测试，我们通过 curl 命令测试一下:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curl</span><span style="color:#98C379;"> https://1457216987974698.cn-hangzhou.fc.aliyuncs.com/2016-0815/proxy/serverless/hello-world/</span><span style="color:#56B6C2;">\\?</span><span style="color:#98C379;">name</span><span style="color:#56B6C2;">\\=</span><span style="color:#98C379;">Serverless</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Hello</span><span style="color:#98C379;"> Serverless!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="如何解决返回结果在浏览器中以附件的方式下载" tabindex="-1">如何解决返回结果在浏览器中以附件的方式下载? <a class="header-anchor" href="#如何解决返回结果在浏览器中以附件的方式下载" aria-label="Permalink to &quot;如何解决返回结果在浏览器中以附件的方式下载?&quot;">​</a></h5><p>使用自定义域名绑定到你的函数上</p><h3 id="使用-lambda-为例" tabindex="-1">使用 Lambda 为例 <a class="header-anchor" href="#使用-lambda-为例" aria-label="Permalink to &quot;使用 Lambda 为例&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Lambda</span></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 从event 中获取 URL query 参数</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">queryStringParameters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 定义HTTP Response</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        statusCode</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">            &quot;Content-Type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;application/json&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;">        body</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`Hello </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>与 HTTP 触发器不同的是，API 网关触发器入参是 event ，event 对象就是</p><h3 id="开发-serverless-应用的步骤总结" tabindex="-1">开发 Serverless 应用的步骤总结 <a class="header-anchor" href="#开发-serverless-应用的步骤总结" aria-label="Permalink to &quot;开发 Serverless 应用的步骤总结&quot;">​</a></h3><p>开发一个 Serverless 应用可以分为三个步骤</p><ul><li>代码开发</li><li>函数部署</li><li>触发器创建</li></ul><h2 id="二-开发-serverless-应用的基础知识" tabindex="-1">二.开发 Serverless 应用的基础知识 <a class="header-anchor" href="#二-开发-serverless-应用的基础知识" aria-label="Permalink to &quot;二.开发 Serverless 应用的基础知识&quot;">​</a></h2><h3 id="入口函数" tabindex="-1">入口函数 <a class="header-anchor" href="#入口函数" aria-label="Permalink to &quot;入口函数&quot;">​</a></h3><p>Serverless 应用是由一个个函数组成的，与 main 函数对应的就是 FaaS 中的入口函数，一般名为 handler</p><p>FaaS 函数可以包含多个源文件，然后按照编程语言的模块机制相互引入</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// hello.js</span></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> \`Hello, </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>index.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> hello</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从request 中获取</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">queries</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 处理业务逻辑</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> hello</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//设置 HTTP 响应</span></span>
<span class="line"><span style="color:#E5C07B;">	response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setStatusCode</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;application/json&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;"> }));</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="把业务逻辑拆分到入口函数之外" tabindex="-1">把业务逻辑拆分到入口函数之外 <a class="header-anchor" href="#把业务逻辑拆分到入口函数之外" aria-label="Permalink to &quot;把业务逻辑拆分到入口函数之外&quot;">​</a></h3><p><img src="`+r+`" alt="把业务逻辑拆分到入口函数之外"></p><h3 id="函数定义" tabindex="-1">函数定义 <a class="header-anchor" href="#函数定义" aria-label="Permalink to &quot;函数定义&quot;">​</a></h3><ul><li>函数定义本质上是由云厂商、触发器和编程语言等多个条件决定的</li><li>标准的函数定义是：function(event,context)，event 是事件对象</li><li>触发器不同，event 的值可能不同调用方式</li><li>第二个参数 context：函数的上下文对象</li></ul><h4 id="不同编程语言的入口函数示例" tabindex="-1">不同编程语言的入口函数示例 <a class="header-anchor" href="#不同编程语言的入口函数示例" aria-label="Permalink to &quot;不同编程语言的入口函数示例&quot;">​</a></h4><p>Node.is 异步函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Hello World!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Node.is 同步函数，目前仅 Lambda 支持</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &quot;Hello World!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Python</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">def</span><span style="color:#61AFEF;"> handler</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;font-style:italic;">context</span><span style="color:#ABB2BF;">):</span></span>
<span class="line"><span style="color:#C678DD;"> return</span><span style="color:#98C379;"> &quot;Hello World!&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Java</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#C678DD;"> example</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> com.aliyun.fc.runtime.Context</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> com.aliyun.fc.runtime.StreamRequestHandler</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.lOException</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.lnputStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E5C07B;"> java.io.OutputStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HelloWorld</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> StreamRequestHandler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> handleRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">InputStream</span><span style="color:#E06C75;font-style:italic;"> inputStream</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">OutputStream</span><span style="color:#E06C75;font-style:italic;"> outputStream</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Context</span><span style="color:#E06C75;font-style:italic;"> context</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">         outputStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello world&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">getBytes</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Node.js 中，仅 Lambda 的入口函数支持支持异步 async 写法</p><p>其他 FaaS 平台需要入口函数有第三个参数 callback</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> sayHello</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &quot;hello world&#39;</span><span style="color:#FFFFFF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    sayHello</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="触发器及事件对象" tabindex="-1">触发器及事件对象 <a class="header-anchor" href="#触发器及事件对象" aria-label="Permalink to &quot;触发器及事件对象&quot;">​</a></h4><p>触发器：HTTP 触发器、定时触发器、消息触发器等</p><h5 id="http-触发器" tabindex="-1">HTTP 触发器 <a class="header-anchor" href="#http-触发器" aria-label="Permalink to &quot;HTTP 触发器&quot;">​</a></h5><p>![HTTP 触发器](.\\img\\HTTP 触发器.jpg)</p><p>HTTP 触发器 request 参数</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;method&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;GET&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;clientlp&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;42.120.75.133&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;url&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/2016-08-15/proxy/serverless/hello-world/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;path&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;queries&quot;</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;World&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;headers&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;accept&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;*/*&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;content-length&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;content-type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;application/x-www-form-urlencoded&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;host&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1457216987974698.cn-hangzhou.fc.aliyuncs.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;user-agent&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;curl/7.64.1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;x-forwarded-proto&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;https&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h5 id="api-网关触发器" tabindex="-1">API 网关触发器 <a class="header-anchor" href="#api-网关触发器" aria-label="Permalink to &quot;API 网关触发器&quot;">​</a></h5><p><img src="`+t+`" alt="API网关触发器"></p><p>Lambda API 网关触发器 event 参数示例</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;2.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;routeKey&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ANY /hello-world&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;rawPath&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/default/hello-world&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;rawQueryString&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;name=1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;headers&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;accept&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;*/*&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;content-length&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;o&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;host&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;gwfk38f70e.execute-api.us-east-1.amazonaws.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;user-agent&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;curl/7.64.1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;x-amzn-trace-id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Root=1-5fb47a82-5cf8a8f3573b039d538fdea2&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;x-forwarded-for&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;42.120.75.133&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;x-forwarded-port&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;443&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;x-forwarded-proto&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;https&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;queryStringParameters&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;requestContext&quot;</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;isBase64Encoded&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h5 id="基于功能选择适合业务场景的触发器" tabindex="-1">基于功能选择适合业务场景的触发器 <a class="header-anchor" href="#基于功能选择适合业务场景的触发器" aria-label="Permalink to &quot;基于功能选择适合业务场景的触发器&quot;">​</a></h5><p>略...</p><h5 id="定时触发器" tabindex="-1">定时触发器 <a class="header-anchor" href="#定时触发器" aria-label="Permalink to &quot;定时触发器&quot;">​</a></h5><p><img src="`+c+`" alt="定时触发器"></p><p>函数计算定时触发器 event 参数示例</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;triggerTime&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;2020-11-22T17:42:20Z&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;triggerName&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;timer&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;payload&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>触发器决定了一个 Serverless 应用如何提供服务，也决定了代码应该如何编写</p><h4 id="日志输出" tabindex="-1">日志输出 <a class="header-anchor" href="#日志输出" aria-label="Permalink to &quot;日志输出&quot;">​</a></h4><p>在 Serverless 中，日志输出和传统应用的日志输出没有太大区别，只是日志的存储和查询方式变了</p><p><img src="`+i+'" alt="日志输出"></p><p>国内 Serverless 应用的日志存储分析、系统监控报警相关产品非常少</p><h4 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h4><p><img src="'+B+`" alt="异常处理"></p><p>建议编写代码时，充分考虑程序的异常，保证代码的健壮性，进一步提升系统稳定性</p><h3 id="开发-serverless-应用的基础知识总结" tabindex="-1">开发 Serverless 应用的基础知识总结 <a class="header-anchor" href="#开发-serverless-应用的基础知识总结" aria-label="Permalink to &quot;开发 Serverless 应用的基础知识总结&quot;">​</a></h3><ul><li>Serverless 的应用基本组成单位是函数，函数之间互相独立因此 Serverless 能提高应用稳定性</li><li>函数定义与触发器和编程语言相关，不同 FaaS 平台的实现不尽相同</li><li>为了使代码扩展性更强，建议你将业务逻辑拆分到入口函数之外</li><li>为了使应用稳定性更好，建议你编写函数代码时充分考虑程序异常</li></ul><h2 id="三-serverless-应用运行原理" tabindex="-1">三.Serverless 应用运行原理 <a class="header-anchor" href="#三-serverless-应用运行原理" aria-label="Permalink to &quot;三.Serverless 应用运行原理&quot;">​</a></h2><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>Serverless 实时处理日志，每次处理结果都是相同的，函数执行过程可能存在执行上下文重用</p><h3 id="案例背景" tabindex="-1">案例背景 <a class="header-anchor" href="#案例背景" aria-label="Permalink to &quot;案例背景&quot;">​</a></h3><p>日志服务 ==原始请求日志==&gt; FaaS(以每分钟为时间窗口聚合日志) ==分钟纬度的 PV/UV==&gt; MysQL</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取当前时间,例如2020-12-0112:01:05</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> now</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> format</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 取前一分钟的整点时间作为开始时间，例如2020-12-0112:00:00</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> start_time</span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getStartTime</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 取当前分钟的整点时间作为开始时间，例如2020-12-0112:01:00</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> end_time</span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> getEndTime</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">now</span><span style="color:#ABB2BF;">);.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 日志服务 client 实例，可以用来查询日志</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Client</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 数据库实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> DB0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 计算前一分钟内的 PV</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> countPV</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> sql</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`SELECT COUNT(*) FROM log WHERE time &gt;= </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">start_time</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> AND time &lt; </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">end_time</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">query</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sql</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 计算前一分钟的 UV</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> countUV</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> sql</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`SELECT COUNT(DISTINCT user_id) FROM log WHERE time &gt;= </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">start_time</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">AND time &lt; </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">end_time</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">query</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sql</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将 UV和 PV 信息存入数据库</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> saveDataToDB</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> pv</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> countPV</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> uv</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> countUV</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> sql</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;INSERT INTO user(uv, pv) values(?,?)&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">query</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sql</span><span style="color:#ABB2BF;">,[</span><span style="color:#E06C75;">uv</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pv</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 入口函数</span></span>
<span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    saveDataToDB</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>在 Serverless 中运行上述代码，就存在两个比较严重的问题</p><ul><li>函数并发限制</li><li>执行上下文重用</li></ul><h3 id="serverelss-的运行原理" tabindex="-1">Serverelss 的运行原理 <a class="header-anchor" href="#serverelss-的运行原理" aria-label="Permalink to &quot;Serverelss 的运行原理&quot;">​</a></h3><p>Serverelss 的运行原理，本质上就是函数的运行原理</p><h4 id="函数调用链路" tabindex="-1">函数调用链路 <a class="header-anchor" href="#函数调用链路" aria-label="Permalink to &quot;函数调用链路&quot;">​</a></h4><h5 id="事件驱动函数执行" tabindex="-1">事件驱动函数执行 <a class="header-anchor" href="#事件驱动函数执行" aria-label="Permalink to &quot;事件驱动函数执行&quot;">​</a></h5><p><img src="`+y+'" alt="事件驱动"></p><h4 id="函数调用方式" tabindex="-1">函数调用方式 <a class="header-anchor" href="#函数调用方式" aria-label="Permalink to &quot;函数调用方式&quot;">​</a></h4><h5 id="faas-运行-支持同步调用函数和异步调用函数" tabindex="-1">FaaS 运行：支持同步调用函数和异步调用函数 <a class="header-anchor" href="#faas-运行-支持同步调用函数和异步调用函数" aria-label="Permalink to &quot;FaaS 运行：支持同步调用函数和异步调用函数&quot;">​</a></h5><p>![FaaS 运行](.\\img\\FaaS 运行.jpg)</p><h5 id="同步调用函数" tabindex="-1">同步调用函数 <a class="header-anchor" href="#同步调用函数" aria-label="Permalink to &quot;同步调用函数&quot;">​</a></h5><p><img src="'+b+`" alt="函数同步调用"></p><p>例子：使用函数计算 Node.is SDK 来同步调用函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> client</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FCClient</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&lt;account id&gt;&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	accessKeylD</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&lt;access key id&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	accessKeySecret</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&lt;access key secret&gt;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	region</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cn-shanghai&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">		&quot;x-fc-invocation-type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Sync&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#E5C07B;"> client</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">invokeFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">serviceName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">funcNameevent</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;event&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>同步执行结果</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">        &#39;x-fc-request-id&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ed2248al-eaa4-487f-8402-67fa9355a3df&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &#39;content-length&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;11&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;hello world&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="异步调用函数" tabindex="-1">异步调用函数 <a class="header-anchor" href="#异步调用函数" aria-label="Permalink to &quot;异步调用函数&quot;">​</a></h5><p><img src="`+u+`" alt="异步调用函数"></p><p>对于函数计算来说，<strong>定时触发器</strong>就是异步调用的</p><p>通过 API 实现异步调用的结果</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">        &#39;x-fc-request-id&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;db7a27d8-189d-42c5-82b5-8e159f148d4c&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &#39;content-length&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    data</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h6 id="异步调用怎么重试" tabindex="-1">异步调用怎么重试? <a class="header-anchor" href="#异步调用怎么重试" aria-label="Permalink to &quot;异步调用怎么重试?&quot;">​</a></h6><p>对于异步调用，如果你关心调用结果的正确性，可以为函数配置**“异步调用目标“**，将调用结果发送到消息队列或其他服务中，通过监听消息判断得到异步执行结果了</p><h6 id="函数超时时间" tabindex="-1">函数超时时间 <a class="header-anchor" href="#函数超时时间" aria-label="Permalink to &quot;函数超时时间&quot;">​</a></h6><p><img src="`+d+'" alt="函数超时时间"></p><p>new Date()方法可能会导致函数延迟执行，应该使用的是<code>event.triggerTime</code>事件方法</p><h4 id="函数生命周期" tabindex="-1">函数生命周期 <a class="header-anchor" href="#函数生命周期" aria-label="Permalink to &quot;函数生命周期&quot;">​</a></h4><h5 id="冷启动和热启动" tabindex="-1">冷启动和热启动 <a class="header-anchor" href="#冷启动和热启动" aria-label="Permalink to &quot;冷启动和热启动&quot;">​</a></h5><p><img src="'+F+'" alt="冷启动和热启动"></p><h6 id="函数的请求" tabindex="-1">函数的请求 <a class="header-anchor" href="#函数的请求" aria-label="Permalink to &quot;函数的请求&quot;">​</a></h6><p><img src="'+m+`" alt="函数的请求"></p><p>如果函数每分钟都执行，则函数几乎都是热启动的，也就是会重复使用之前的执行上下文</p><p>这也就是为什么函数每次处理到的都是同一份数据</p><h3 id="serverless-运行原理总结" tabindex="-1">Serverless 运行原理总结 <a class="header-anchor" href="#serverless-运行原理总结" aria-label="Permalink to &quot;Serverless 运行原理总结&quot;">​</a></h3><p>传统应用部署</p><ul><li>直接进行处理无须启动应用</li><li>一直消耗硬件资源</li></ul><p>Serverless 的优势</p><ul><li>应用的百毫秒启动</li><li>资源利用率和业务性能的平衡</li></ul><p>内容总结</p><ul><li>组成 Serverless 应用的函数是事件驱动的但也可以直接同 API 调用函数</li><li>函数可以同步调用或异步调用，定时触发器函数是异步调用的，异步调用函数建议主动记录并处理异步调用结果</li><li>函数的启动过程分为下载代码、启动容器、启动运行环境、执行代码四个步骤。前三个步骤称为冷启动，最后一个步骤是热启动</li><li>执行上下文重用可以提高 Serverless 应用性能，但在编写代码时要注意执行上下文重用带来的风险</li></ul><p>通过本节了解</p><ul><li>函数并发限制导致函数执行时间延迟</li><li>执行上下文重用导致每次处理的都是同一份数据</li></ul><h2 id="四-serverless-开发框架提高应用开发调试和部署效率" tabindex="-1">四.Serverless 开发框架提高应用开发调试和部署效率 <a class="header-anchor" href="#四-serverless-开发框架提高应用开发调试和部署效率" aria-label="Permalink to &quot;四.Serverless 开发框架提高应用开发调试和部署效率&quot;">​</a></h2><h3 id="开发流程" tabindex="-1">开发流程 <a class="header-anchor" href="#开发流程" aria-label="Permalink to &quot;开发流程&quot;">​</a></h3><ul><li><p>本地调试</p></li><li><p>构建</p></li><li><p>部署</p></li><li><p>日志</p></li><li><p>监控报警</p></li></ul><h3 id="前言-1" tabindex="-1">前言 <a class="header-anchor" href="#前言-1" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>基于 FaaS 开发 Serverless 应用的问题</p><ul><li>函数太多如何管理?</li><li>本地开发时如何进行调试?</li><li>代码开发完成后如何部署?</li></ul><p>这就需要用到 Serverless 开发框架</p><p><strong>Serverless 开发框架：是集成 Serverless 思想、贯穿 Serverless 应用从开发到上线全流程的工具</strong></p><h3 id="如何设计-serverless-的开发框架" tabindex="-1">如何设计 Serverless 的开发框架 <a class="header-anchor" href="#如何设计-serverless-的开发框架" aria-label="Permalink to &quot;如何设计 Serverless 的开发框架&quot;">​</a></h3><h4 id="_1-应用管理" tabindex="-1">1.应用管理 <a class="header-anchor" href="#_1-应用管理" aria-label="Permalink to &quot;1.应用管理&quot;">​</a></h4><p>应用的管理也就是函数的管理</p><p>服务 (service)</p><ul><li>函数 1</li><li>函数 2</li></ul><p>Serverless 应用</p><p>![Serverless 应用](.\\img\\Serverless 应用.jpg)</p><p>serverless.yaml 文件配置</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 应用名称</span></span>
<span class="line"><span style="color:#E06C75;">service</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">myservice</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 函数列表</span></span>
<span class="line"><span style="color:#E06C75;">functions</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    # 函数1</span></span>
<span class="line"><span style="color:#E06C75;">    hello</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">     handler</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">hello.main</span><span style="color:#7F848E;font-style:italic;"> # 函数入口</span></span>
<span class="line"><span style="color:#E06C75;">     runtime</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">nodejs12</span></span>
<span class="line"><span style="color:#E06C75;">     events</span><span style="color:#ABB2BF;">: </span><span style="color:#7F848E;font-style:italic;"># 函数触发器，一个函数可能有多个触发器</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#98C379;">http</span></span>
<span class="line"><span style="color:#ABB2BF;">     - </span><span style="color:#98C379;">timer</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    # 函数2</span></span>
<span class="line"><span style="color:#E06C75;">    goodbye</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">     handler</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">goodbye.main</span></span>
<span class="line"><span style="color:#E06C75;">     runtime</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">nodejs12</span></span>
<span class="line"><span style="color:#E06C75;">     events</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#98C379;">http</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_2-应用开发" tabindex="-1">2.应用开发 <a class="header-anchor" href="#_2-应用开发" aria-label="Permalink to &quot;2.应用开发&quot;">​</a></h4><p>生成目录</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> serverless</span><span style="color:#98C379;"> init</span><span style="color:#D19A66;"> --template</span><span style="color:#98C379;"> hello-world</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">--</span><span style="color:#98C379;"> hello.js</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">--</span><span style="color:#98C379;"> serverless.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>serverless.yaml 配置</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">service</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">myservice</span></span>
<span class="line"><span style="color:#E06C75;">functions</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  hello</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">    handler</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">hello.main</span></span>
<span class="line"><span style="color:#E06C75;">    events</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#98C379;">http</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>各个开发平台也开发了自己的 WebIDE</p><p>如 Cloud9，腾讯的 Coding</p><h4 id="_3-应用调试" tabindex="-1">3.应用调试 <a class="header-anchor" href="#_3-应用调试" aria-label="Permalink to &quot;3.应用调试&quot;">​</a></h4><p>Serverless 开发中，应用调试是很麻烦的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 从 event 中获取 URL query 参数</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">queryStringParameters</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 定义HTTP Response</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		statusCode</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">			&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;application/json&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		body</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`Hello </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">!\`</span><span style="color:#ABB2BF;"> }),</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#61AFEF;">	callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="如何让开发者方便调试" tabindex="-1">如何让开发者方便调试 <a class="header-anchor" href="#如何让开发者方便调试" aria-label="Permalink to &quot;如何让开发者方便调试&quot;">​</a></h5><ul><li><p>远程调试：将代码部署到 FaaS 平台，然后直接调用 FaaS 平台的接口执行函数再得到函数运行日志及返回结果</p></li><li><p>本地调试：由开发框架模拟函数运行时环境，构造函数参数来执行函数</p></li></ul><p>对一个 Serverless 开发框架来说，这两种调试方式都需要。</p><p>也就是需要实现 <strong>serverless invoke</strong> 和 <strong>serverless localinvoke</strong> 两个命令</p><h4 id="_4-应用部署" tabindex="-1">4.应用部署 <a class="header-anchor" href="#_4-应用部署" aria-label="Permalink to &quot;4.应用部署&quot;">​</a></h4><p>根据 serverless.yaml 文件配置，解析出相关配置的服务名称和函数列表，然后调用 FaaS 平台的接口，来创建或者更新服务函数</p><p>需要注意的是，在创建函数的时候，FaaS 平台中的函数代码，通常以压缩包的方式压缩：ZIP 的方式，存储在文件的存储服务中，所以部署函数之前，先在本地把代码压缩成.zip 文件。</p><p>而在部署应用的时候，代码调试可以把函数部署到 FaaS 平台中进行调试，那可能每次代码改动都会影响线上服务，如果有版本控制，那就可以避免了，FaaS 平台提供了提供了函数版本功能(默认是 LATEST 版本)，通过版本控制，开发时使用 LATEST 版本进行开发，测试稳定之后，再发布稳定的新版本，用稳定版本，提供线上服务</p><p><img src="`+C+'" alt="开发版本"></p><p>各个版本发布</p><p>至此，部署结束</p><h5 id="账号设置与多平台支持" tabindex="-1">账号设置与多平台支持 <a class="header-anchor" href="#账号设置与多平台支持" aria-label="Permalink to &quot;账号设置与多平台支持&quot;">​</a></h5><p>应用要部署到哪个云账号上?</p><ul><li>AccessKeyld</li><li>AccessKeySecret</li></ul><p>Serverless 开发框架最好还要抹平不同 Serverless 平台的差异，让应用能够在不同 Serverless 平台中进行平滑迁移，甚至让开发者使用一个开发框架、一套开发流程就能实现多云部署，以上是 Serverless 开发框架的核心竞争力之一</p><p>开发适配标准</p><p><img src="'+A+'" alt="开发适配标准"></p><p>以上便是完整的 Serverless 的开发框架的设计思路，也是主流的 Serverless 的开发框架实现原理</p><h3 id="主流的-serverless-的开发框架实现原理" tabindex="-1">主流的 Serverless 的开发框架实现原理 <a class="header-anchor" href="#主流的-serverless-的开发框架实现原理" aria-label="Permalink to &quot;主流的 Serverless 的开发框架实现原理&quot;">​</a></h3><h4 id="主流的-serverless-工具链" tabindex="-1">主流的 Serverless 工具链 <a class="header-anchor" href="#主流的-serverless-工具链" aria-label="Permalink to &quot;主流的 Serverless 工具链&quot;">​</a></h4><ul><li><p>WebIDE</p></li><li><p>Serverless Framework</p></li><li><p>Vercel</p></li><li><p>Midway FaaS</p></li></ul><p><img src="'+E+`" alt="主流的Serverless的开发框架实现原理"></p><h4 id="serverless-framework-安装" tabindex="-1">Serverless Framework 安装 <a class="header-anchor" href="#serverless-framework-安装" aria-label="Permalink to &quot;Serverless Framework 安装&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> serverless</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> serverless</span><span style="color:#D19A66;"> --version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Framework</span><span style="color:#98C379;"> Core:</span><span style="color:#D19A66;"> 2.15.0</span></span>
<span class="line"><span style="color:#61AFEF;">Plugin:</span><span style="color:#D19A66;"> 4.2.0</span></span>
<span class="line"><span style="color:#61AFEF;">SDK:</span><span style="color:#D19A66;"> 2.3.2</span></span>
<span class="line"><span style="color:#61AFEF;">Components:</span><span style="color:#D19A66;"> 3.4.3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="账号设置" tabindex="-1">账号设置 <a class="header-anchor" href="#账号设置" aria-label="Permalink to &quot;账号设置&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">serverless</span><span style="color:#98C379;"> config</span><span style="color:#98C379;"> credentials</span><span style="color:#D19A66;"> --provider</span><span style="color:#98C379;"> aws</span><span style="color:#D19A66;"> --key</span><span style="color:#98C379;"> key</span><span style="color:#D19A66;"> --secret</span><span style="color:#98C379;"> secret</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>--provider 具体的 Serverless 平台</li><li>--keyAWS 账号的 aws_access_key_id</li><li>--secret AWS 账号的 aws_secret_access_key</li></ul><h4 id="应用配置" tabindex="-1">应用配置 <a class="header-anchor" href="#应用配置" aria-label="Permalink to &quot;应用配置&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> serverless</span><span style="color:#98C379;"> create</span><span style="color:#D19A66;"> --template</span><span style="color:#98C379;"> aws-nodejs</span></span>
<span class="line"><span style="color:#61AFEF;">Serverless:</span><span style="color:#98C379;"> Generating</span><span style="color:#98C379;"> boilerplate..</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="应用调试" tabindex="-1">应用调试 <a class="header-anchor" href="#应用调试" aria-label="Permalink to &quot;应用调试&quot;">​</a></h4><p>远程调试</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 命令</span></span>
<span class="line"><span style="color:#61AFEF;">serverless</span><span style="color:#98C379;"> invoke</span><span style="color:#D19A66;"> --function</span><span style="color:#98C379;"> hello</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 生成</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;"> &quot;statusCode&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> 200,</span></span>
<span class="line"><span style="color:#61AFEF;"> &quot;body&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;{\\n </span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">message</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">:</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">Go Serverless v1.0! Your function executed successfully!</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">,\\n </span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">input</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">:</span><span style="color:#56B6C2;">\\&quot;\\&quot;</span><span style="color:#98C379;">\\n}&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>本地调试</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 命令</span></span>
<span class="line"><span style="color:#61AFEF;">serverless</span><span style="color:#98C379;"> invoke</span><span style="color:#98C379;"> local</span><span style="color:#D19A66;"> --function</span><span style="color:#98C379;"> hello</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 生成</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;"> &quot;statusCode&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> 200,</span></span>
<span class="line"><span style="color:#61AFEF;"> &quot;body&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;{\\n </span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">message</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">:</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">Go Serverless v1.0! Your function executed successfully!</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">,\\n </span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">input</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">:</span><span style="color:#56B6C2;">\\&quot;\\&quot;</span><span style="color:#98C379;">\\n}&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="应用部署" tabindex="-1">应用部署 <a class="header-anchor" href="#应用部署" aria-label="Permalink to &quot;应用部署&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 部署命令</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> serverless</span><span style="color:#98C379;"> deploy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 执行完上面的命令后查看项目目录</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> tree</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>函数计算 Fun(阿里云团队)</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 安装</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> @alicloud/fun</span><span style="color:#D19A66;"> -g</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 版本查看</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> fun</span><span style="color:#D19A66;"> --version</span></span>
<span class="line"><span style="color:#61AFEF;">3.6.20</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 配置查看</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> fun</span><span style="color:#98C379;"> config</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> cat</span><span style="color:#98C379;"> ~/.fcli/config.yaml</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>项目根目录.env 文件配置信息</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">ACCOUNT_ID</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">*****</span></span>
<span class="line"><span style="color:#E06C75;">REGION</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">cn-hangzhou</span></span>
<span class="line"><span style="color:#E06C75;">ACCESS_KEY_ID</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">******</span></span>
<span class="line"><span style="color:#E06C75;">ACCESS_KEY_SECRET</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">******</span></span>
<span class="line"><span style="color:#E06C75;">TIMEOUT</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">10</span></span>
<span class="line"><span style="color:#E06C75;">RETRIES</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">3</span></span>
<span class="line"><span style="color:#E06C75;">FC_ENDPOINT</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">******</span></span>
<span class="line"><span style="color:#E06C75;">ENABLE_CUSTOM_ENDPOINT</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>再执行命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 初始化</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> fun</span><span style="color:#98C379;"> init</span><span style="color:#98C379;"> event-nodejs12</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 列出文件</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> ls-l</span></span>
<span class="line"><span style="color:#61AFEF;">index.js</span><span style="color:#98C379;"> template.yaml</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过 funinvokefunctionName 命令对函数进行远程调试</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> invoke</span><span style="color:#98C379;"> hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过 fun deploy 进行应用部署</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#98C379;"> fun</span><span style="color:#98C379;"> deploy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="开发调试和部署效率总结" tabindex="-1">开发调试和部署效率总结 <a class="header-anchor" href="#开发调试和部署效率总结" aria-label="Permalink to &quot;开发调试和部署效率总结&quot;">​</a></h3><p>开发框架的意义就在于帮助开发者提升 Serverless 应用的开发效率</p><ul><li>Serverless Framework 特点是功能完善、支持平台丰富</li><li>Fun 的特点是只为函数计算服务</li></ul><p>结语</p><ul><li>与 FaaS、Baas 等基础技术一样 Serverless 开发框架也是 Serverless 领域中的非常重要的一部分</li><li>一个优秀的 Serverless 开发框架，可以让开发者很容易开发一个 Serverless 架构的应用也能让企业轻易将现有业务演化到 Serverless 架构</li><li>Serverless 开发框架需要具备的基本能力是应用管理、应用调试和应用部署</li></ul><h2 id="五-serverless-应用的依赖管理" tabindex="-1">五.Serverless 应用的依赖管理 <a class="header-anchor" href="#五-serverless-应用的依赖管理" aria-label="Permalink to &quot;五.Serverless 应用的依赖管理&quot;">​</a></h2><h3 id="前言-2" tabindex="-1">前言 <a class="header-anchor" href="#前言-2" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>Serverless 应用代码都是独立的函数，不涉及其他依赖</p><p>而在实际进行应用开发时，大部分情况下都会有第三方依赖</p><p>代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mysql</span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;mysql2/promise&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取数据库连接</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> connection</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> mysql</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createConnection</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">host</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;localhost&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 查询数据库</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">rows</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">fields</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> connection</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;SELECT * FROM \`table\` WHERE \`name\` = ?AND \`age\` &gt;?&#39;</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;Morty&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">14</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> rows</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    main</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>为什么安装依赖这么难？如何安装依赖？</p><p>将会从 Node.js、Python、Java 三种语言来安装依赖</p><h3 id="依赖管理" tabindex="-1">依赖管理 <a class="header-anchor" href="#依赖管理" aria-label="Permalink to &quot;依赖管理&quot;">​</a></h3><h4 id="为什么安装依赖很困难" tabindex="-1">为什么安装依赖很困难 <a class="header-anchor" href="#为什么安装依赖很困难" aria-label="Permalink to &quot;为什么安装依赖很困难&quot;">​</a></h4><p>主要是因为它运行在 FaaS 平台上，而 FaaS 平台的运行环境由云广商提供且预制开发者只能进行有限的定制</p><h4 id="函数实例" tabindex="-1">函数实例 <a class="header-anchor" href="#函数实例" aria-label="Permalink to &quot;函数实例&quot;">​</a></h4><p><img src="`+h+'" alt="函数实例"></p><h4 id="运行环境" tabindex="-1">运行环境 <a class="header-anchor" href="#运行环境" aria-label="Permalink to &quot;运行环境&quot;">​</a></h4><ul><li>编程语言是你创建函数时指定的某个具体版本的编程语言，由 FaaS 平台提供</li><li>内置模块就是该编程语言的一些内置模块</li><li>此外为了让开发者使用更方便，FaaS 平台一般还会默认安装一些依赖</li><li>函数实例创建时，会从存储服务中将你的代码下载下来并加载到运行环境中</li></ul><h4 id="实践难点" tabindex="-1">实践难点 <a class="header-anchor" href="#实践难点" aria-label="Permalink to &quot;实践难点&quot;">​</a></h4><ul><li>大多编程语言的依赖，通常安装在全局系统目录</li><li>安装依赖过程中可能涉及代码编译环境不统一会导致编译产物有差异</li><li>系统依赖通常不可移植应用运行时依赖一些系统级别的动态链接库和软件</li></ul><h4 id="应该如何安装依赖-难度从上到下递增" tabindex="-1">应该如何安装依赖(难度从上到下递增) <a class="header-anchor" href="#应该如何安装依赖-难度从上到下递增" aria-label="Permalink to &quot;应该如何安装依赖(难度从上到下递增)&quot;">​</a></h4><h5 id="_1-java-语言应用安装依赖" tabindex="-1">1.Java 语言应用安装依赖 <a class="header-anchor" href="#_1-java-语言应用安装依赖" aria-label="Permalink to &quot;1.Java 语言应用安装依赖&quot;">​</a></h5><p>虽然部署 jar 包不用关心依赖了，但这也带来了问题：部署前需要<strong>先编译</strong></p><p><img src="'+v+`" alt="java语言编译"></p><h5 id="_2-node-js-语言应用安装依赖" tabindex="-1">2.Node.js 语言应用安装依赖 <a class="header-anchor" href="#_2-node-js-语言应用安装依赖" aria-label="Permalink to &quot;2.Node.js 语言应用安装依赖&quot;">​</a></h5><p>Node.js 中分为两种依赖类型：</p><ul><li><strong>全局依赖</strong>：全局依赖安装在系统目录中</li><li><strong>项目依赖</strong>：项目依赖安装在项目目录中</li></ul><p>避免使用全局依赖，把所有依赖都安装到项目目录中</p><p>可以通过命令，查看依赖查找路径</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">module.paths</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对于 Node.is 来说，除了可以直接安装在 node moduels 中的 JS 依赖外还会使用 C++ 来编写一些 Nodejs 扩展</p><h6 id="node-js-c-扩展的依赖安装" tabindex="-1">Node.js C++ 扩展的依赖安装 <a class="header-anchor" href="#node-js-c-扩展的依赖安装" aria-label="Permalink to &quot;Node.js C++ 扩展的依赖安装&quot;">​</a></h6><p>nodejs-addon</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#清除已有编译文件</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> mpm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> clean</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 开生成 C++ 工程</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> mpm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> configure</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 编译 C++ 扩展</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> mpm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> bufld</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 部署团数</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> fun</span><span style="color:#98C379;"> deploy</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h6 id="依赖包体积太大-导致函数无法部署的问题" tabindex="-1">依赖包体积太大，导致函数无法部署的问题 <a class="header-anchor" href="#依赖包体积太大-导致函数无法部署的问题" aria-label="Permalink to &quot;依赖包体积太大，导致函数无法部署的问题&quot;">​</a></h6><p>函数计算限制是：100MB</p><p>在 Node.js 中，代码体积问题尤为常见</p><p>解决方法：</p><p>减小模块体积：参考 Java 等编译型语言的做法，对 Node.js 代码也进行编译</p><ul><li>webpack</li><li>Vercel</li></ul><h5 id="_3-python-语言应用安装依赖" tabindex="-1">3.Python 语言应用安装依赖 <a class="header-anchor" href="#_3-python-语言应用安装依赖" aria-label="Permalink to &quot;3.Python 语言应用安装依赖&quot;">​</a></h5><p>给 Python 项目安装依赖比较麻烦的地方就在于使用 pip 安装的依赖通常会散落在系统的各个文件中</p><h6 id="方法一-使用-install-option-参数" tabindex="-1">方法一：使用--install-option 参数 <a class="header-anchor" href="#方法一-使用-install-option-参数" aria-label="Permalink to &quot;方法一：使用--install-option 参数&quot;">​</a></h6><table tabindex="0"><thead><tr><th>文件类型</th><th>可选项</th></tr></thead><tbody><tr><td>Python modules</td><td>--install-purelib</td></tr><tr><td>extension modules</td><td>--install-platlib</td></tr><tr><td>all modules</td><td>--install-lib</td></tr><tr><td>scripts</td><td>--install-scripts</td></tr><tr><td>data</td><td>--install-data</td></tr><tr><td>C headers</td><td>-install-headers</td></tr></tbody></table><p>例子</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 将模块安装到当面目录</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> pip</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --install-option=</span><span style="color:#98C379;">&quot;--install-lib=$(</span><span style="color:#56B6C2;">pwd</span><span style="color:#98C379;">)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">PyMysQL</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h6 id="方法二-target-参数" tabindex="-1">方法二：--target 参数 <a class="header-anchor" href="#方法二-target-参数" aria-label="Permalink to &quot;方法二：--target 参数&quot;">​</a></h6><p>targe 参数可以将依赖直接安装到当前目录，不会产生 <code>lib/python3.7/site-packages</code> 子目录解构</p><h6 id="方法三-使用-virtualenv" tabindex="-1">方法三：使用 virtualenv <a class="header-anchor" href="#方法三-使用-virtualenv" aria-label="Permalink to &quot;方法三：使用 virtualenv&quot;">​</a></h6><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pip</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> virtualenv</span></span>
<span class="line"><span style="color:#61AFEF;">virtualenv</span><span style="color:#98C379;"> path/to/my/virtual-env</span></span>
<span class="line"><span style="color:#56B6C2;">source</span><span style="color:#98C379;"> path/to/my/virtual-env/bin/activate</span></span>
<span class="line"><span style="color:#61AFEF;">pip</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> PyMySQL</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Python 解析依赖的路径</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&gt;&gt;&gt;</span><span style="color:#61AFEF;">import</span><span style="color:#98C379;"> sys</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;&gt;&gt; </span><span style="color:#56B6C2;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">&#39;\\n&#39;</span><span style="color:#61AFEF;">.join(sys.path</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#61AFEF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">/usr/lib/python/3.7</span></span>
<span class="line"><span style="color:#61AFEF;">/usr/lib/python/3.7/lib-dynload</span></span>
<span class="line"><span style="color:#61AFEF;">/usr/lib/Python/3.7/lib/python/site-packages</span></span>
<span class="line"><span style="color:#61AFEF;">/usr/local/lib/python3.7/site-packages</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#index.py</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#将lib/目录添加到 sys.path</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> sys</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> os</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    # 检查 sys.path 中是否存在 lib/目录</span></span>
<span class="line"><span style="color:#ABB2BF;">    sys.path.</span><span style="color:#61AFEF;">index</span><span style="color:#ABB2BF;">(os.</span><span style="color:#61AFEF;">getcwd</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;/lib/python3.7/site-packages&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">except</span><span style="color:#ABB2BF;"> ValueError:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> # 如果lib/目录不存在 sys.path 中，则将其添加到 sys.path 数组的最前面</span></span>
<span class="line"><span style="color:#ABB2BF;">    sys.path.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, os.</span><span style="color:#61AFEF;">getcwd</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;/lib/python3.7/site-packages&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> pymysql.cursors</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="依赖安装总结" tabindex="-1">依赖安装总结 <a class="header-anchor" href="#依赖安装总结" aria-label="Permalink to &quot;依赖安装总结&quot;">​</a></h3><p>不同编程语言包管理机制不同，安装依赖的方式也不尽相同但本质上，都是需要将依赖安装到应用项目中，并且随项目一起部署到 FaaS 平台</p><ul><li>Serverless 应用的代码依赖和系统依赖都需要安装在项目中并和应用代码一起部署到 FaaS 平台</li><li>FaaS 对代码体积大小有限制，所以最好要精简依赖体积</li><li>如果代码或依赖需要编译，则编译环境需要和 FaaS 运行环境兼容，不然编译后的产物可能无法运行</li></ul><h3 id="作业-编写并部署一个需要安装依赖的函数代码" tabindex="-1">作业：编写并部署一个需要安装依赖的函数代码 <a class="header-anchor" href="#作业-编写并部署一个需要安装依赖的函数代码" aria-label="Permalink to &quot;作业：编写并部署一个需要安装依赖的函数代码&quot;">​</a></h3><h2 id="六-自定义函数运行时" tabindex="-1">六.自定义函数运行时 <a class="header-anchor" href="#六-自定义函数运行时" aria-label="Permalink to &quot;六.自定义函数运行时&quot;">​</a></h2><h3 id="前言-3" tabindex="-1">前言 <a class="header-anchor" href="#前言-3" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>FaaS 平台支持的编程语言有限，当你想用 TypeScript 或其他语言时，可以使用<strong>自定义运行时</strong></p><h4 id="提要" tabindex="-1">提要 <a class="header-anchor" href="#提要" aria-label="Permalink to &quot;提要&quot;">​</a></h4><p>主流的 FaaS 平台自定义运行时实现原理</p><ul><li>原理：了解一个通用的 FaaS 自定义运行时原理</li><li>实现：分别实现一个 TypeScript 运行时，和 Golang 的运行时</li></ul><h3 id="自定义运行时的原理" tabindex="-1">自定义运行时的原理 <a class="header-anchor" href="#自定义运行时的原理" aria-label="Permalink to &quot;自定义运行时的原理&quot;">​</a></h3><p><strong>运行时(Runtime)</strong>：是程序运行时所依赖的环境</p><p>如 Node.js 运行时</p><ul><li>ali-oss</li><li>tablestore</li></ul><h3 id="faas-的运行原理" tabindex="-1">FaaS 的运行原理 <a class="header-anchor" href="#faas-的运行原理" aria-label="Permalink to &quot;FaaS 的运行原理&quot;">​</a></h3><p><img src="`+q+'" alt="FaaS的运行原理"></p><h3 id="怎么才能让函数在自己定义的运行环境中执行" tabindex="-1">怎么才能让函数在自己定义的运行环境中执行? <a class="header-anchor" href="#怎么才能让函数在自己定义的运行环境中执行" aria-label="Permalink to &quot;怎么才能让函数在自己定义的运行环境中执行?&quot;">​</a></h3><p>安装依赖的本质就是要把函数运行所需要的依赖都<strong>打包上传到 FaaS 中</strong>，依赖可以如下：</p><ul><li>代码依赖包</li><li>系统依赖库</li><li>函数运行时</li></ul><h4 id="faas-平台的自定义运行" tabindex="-1">FaaS 平台的自定义运行 <a class="header-anchor" href="#faas-平台的自定义运行" aria-label="Permalink to &quot;FaaS 平台的自定义运行&quot;">​</a></h4><p>用 TypeScript 编写代码</p><ul><li>runtime:custom：告诉 FaaS 你使用的时自定义运行时</li><li>bootstrap:ts-node index.ts：告诉 FaaS 函数启动时</li><li>使用 ts-node：运行 index.ts</li></ul><h4 id="faas-平台在运行函数时会有很多参数-这些参数怎么传递给自定义运行时呢" tabindex="-1">FaaS 平台在运行函数时会有很多参数，这些参数怎么传递给自定义运行时呢? <a class="header-anchor" href="#faas-平台在运行函数时会有很多参数-这些参数怎么传递给自定义运行时呢" aria-label="Permalink to &quot;FaaS 平台在运行函数时会有很多参数，这些参数怎么传递给自定义运行时呢?&quot;">​</a></h4><p>本质上是远程数据通信问题</p><p><img src="'+D+`" alt="自定义运行时原理"></p><p>需要把 HTTP 服务制定一个启动命令，bootstrap 文件示例</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;">./node_modules/ts-node/dist/bin.js</span><span style="color:#98C379;"> server.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="自定义运行时的实现" tabindex="-1">自定义运行时的实现 <a class="header-anchor" href="#自定义运行时的实现" aria-label="Permalink to &quot;自定义运行时的实现&quot;">​</a></h3><p>TypeScript 运行时 + Golang 运行时</p><ul><li>typescript-custom-runtIme TypeScript 运行时</li><li>golang-custom-runtime Golang 运行时</li><li>nodejs15-custom-runtime Node.js 15 运行时</li></ul><h4 id="实现一个-typescript-运行时" tabindex="-1">实现一个 TypeScript 运行时 <a class="header-anchor" href="#实现一个-typescript-运行时" aria-label="Permalink to &quot;实现一个 TypeScript 运行时&quot;">​</a></h4><p>TypeScript 为 JS 代码增加了类型系统，可以大大提升代码的可读性和可维护性</p><p><strong>ts-node</strong></p><p>1.本地创建 typescript 项目</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -S</span><span style="color:#98C379;"> ts-node</span></span>
<span class="line"><span style="color:#61AFEF;">npmi-S</span><span style="color:#98C379;"> typescript</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i-D</span><span style="color:#98C379;"> @types/node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2.使用 typescript 来编写一个 http 服务</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> *</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> http</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;http&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 你可以在这里实现具体的业务逻辑</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> \`Hello, </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个HTTP 服务</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> server</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	req</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lncomingMessage</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	res</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ServerResponse</span></span>
<span class="line"><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取 Requestld</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> requestld</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">headers</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;x-fc-request-id&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`FCInvoke Start Requestld: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">requestld</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 拼接请求参数</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> rawData</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;data&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">chunk</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		rawData</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> chunk</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#E5C07B;">	req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;end&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 处理业务逻辑，比如这里是输出欢迎语</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> body</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> sayHello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rawData</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 设置 HTTP 响应</span></span>
<span class="line"><span style="color:#E5C07B;">		res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeHead</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`FCInvoke End Requestld: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">requestld</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">server</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">timeout</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">server</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keepAliveTimeout</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 启动 HTTP 服务并监听9000端口</span></span>
<span class="line"><span style="color:#E5C07B;">server</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">9000</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0.0.0.0&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;FunctionCompute typescript runtime initialized.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>3.通过安装在项目中的 ts-node 命令来运行</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 启动HTTP 服务</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> ./node_modules/ts-node/dist/bin.js</span><span style="color:#98C379;"> server.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>4.在另一个终端中使用 curl 命令进行测试</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curl</span><span style="color:#98C379;"> 0.0.0.0:9000</span><span style="color:#D19A66;"> -X</span><span style="color:#98C379;"> POST</span><span style="color:#D19A66;"> -d</span><span style="color:#98C379;">&quot;Serverless&quot;</span><span style="color:#D19A66;"> -H</span><span style="color:#98C379;"> &quot;x-fc-request-id:abcde&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">Hello,</span><span style="color:#98C379;"> Serverless</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>至此，自定义运行时完成</p><p>5.让 FaaS 知道如何启动你的自定义运行时</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#61AFEF;">./node</span><span style="color:#98C379;"> modules/ts-node/dist/bin.js</span><span style="color:#98C379;"> server.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>6.添加函数计算的 template.yaml 配置</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">ROSTemplateFormatVersion</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#E06C75;">Transform</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#E06C75;">Resources</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;"> custom-typescript-demo</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  Type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Aliyun::Serverless::Servicel‘</span></span>
<span class="line"><span style="color:#98C379;">  Properties:</span></span>
<span class="line"><span style="color:#98C379;">   Description: &#39;helloworld&#39;</span></span>
<span class="line"><span style="color:#E06C75;">  typescript-demo</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  Type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Aliyun::Serverless::Function&#39;</span></span>
<span class="line"><span style="color:#E06C75;">  Properties</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">   Runtime</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">custom</span></span>
<span class="line"><span style="color:#98C379;">   MemorySize:512</span></span>
<span class="line"><span style="color:#E06C75;">   Handler</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">index.handler</span></span>
<span class="line"><span style="color:#E06C75;">   CodeUri</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;./&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>7.部署</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 部署</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> fun</span><span style="color:#98C379;"> deploy</span><span style="color:#D19A66;"> -y</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 测试</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> fun</span><span style="color:#98C379;"> invoke</span><span style="color:#D19A66;"> -e</span><span style="color:#98C379;"> &quot;Serverless&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="实现一个-golang-的运行时" tabindex="-1">实现一个 Golang 的运行时 <a class="header-anchor" href="#实现一个-golang-的运行时" aria-label="Permalink to &quot;实现一个 Golang 的运行时&quot;">​</a></h4><p>将运行环境和代码打包，这种思想是不是和容器技术很像?</p><ul><li>容器技术就是将应用和运行所依赖环境打包为镜像这样应用可以轻松迁移、部署</li></ul><p>自定义运行时使用流程</p><p><img src="`+g+`" alt="自定义运行时原理"></p><p>仓库地址：registry.&lt;地域&gt;.aliyuncs.com/&lt;命名空间/&lt;仓库名&gt;</p><h4 id="使用-golang-实现一个-http-服务" tabindex="-1">使用 Golang 实现一个 HTTP 服务 <a class="header-anchor" href="#使用-golang-实现一个-http-服务" aria-label="Permalink to &quot;使用 Golang 实现一个 HTTP 服务&quot;">​</a></h4><p>1.Golang 实现一个 HTTP 服务</p><div class="language-go line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">package</span><span style="color:#E5C07B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;"> &quot;fmt&quot;</span></span>
<span class="line"><span style="color:#98C379;">    &quot;net/http&quot;</span></span>
<span class="line"><span style="color:#98C379;">    &quot;runtime&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">func</span><span style="color:#61AFEF;"> HelloHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">w</span><span style="color:#E5C07B;"> http</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ResponseWriter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">r</span><span style="color:#C678DD;"> *</span><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Request</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    fmt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Fprintf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">w</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;Hello Serverless! This is Golang runtime, version: </span><span style="color:#D19A66;">%s</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">runtime</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Version</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">func</span><span style="color:#E06C75;"> main</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E06C75;">    http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">HandleFunc</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">HelloHandler</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ListenAndServe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:8080&quot;</span><span style="color:#D19A66;"> nil</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>2.本地测试</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#启动 HTTP服务</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> go</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> main.go</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>3.新开一个终端，通过 curl 命令测试</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 新开一个终端，通过 curl 命令测试</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> curllocalhost:8080</span></span>
<span class="line"><span style="color:#61AFEF;">Hello</span><span style="color:#98C379;"> Serverless!</span><span style="color:#98C379;"> This</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> Golang</span><span style="color:#98C379;"> runtime,</span><span style="color:#98C379;"> version:go1.13.5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>4.构建包含 Golang 运行时及代码的镜像</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># Dockerfile</span></span>
<span class="line"><span style="color:#61AFEF;">FROM</span><span style="color:#98C379;"> golang:1.15.6-alpine3.12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">WORKDIR/go/src/app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 将代码复制到工作目录</span></span>
<span class="line"><span style="color:#61AFEF;">COPY..</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 编译</span></span>
<span class="line"><span style="color:#61AFEF;">RUN</span><span style="color:#98C379;"> go</span><span style="color:#98C379;"> build</span><span style="color:#98C379;"> main.go</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 暴露 8080端口</span></span>
<span class="line"><span style="color:#61AFEF;">EXPOSE</span><span style="color:#D19A66;"> 8080</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">#启动应用</span></span>
<span class="line"><span style="color:#61AFEF;">ENTRYPOINT[</span><span style="color:#61AFEF;">&quot;./main&quot;</span><span style="color:#61AFEF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>5.构建并上传镜像</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 指定镜像名称，例如registry.cn-</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">hangzhou.aliyuncs.com/serverless-image/golang:v0.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> export</span><span style="color:#98C379;"> IMAGE_NAME=&quot;你的镜像仓库:版本&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> docker</span><span style="color:#98C379;"> build</span><span style="color:#D19A66;"> -t</span><span style="color:#E06C75;"> $IMAGE_NAME</span><span style="color:#98C379;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> docker</span><span style="color:#98C379;"> push</span><span style="color:#E06C75;"> $IMAGE_NAME</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>6.创建 template.yaml 配置文件</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">ROSTemplateFormatVersion</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;2015-09-01&#39;</span></span>
<span class="line"><span style="color:#E06C75;">Transform</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Aliyun::Serverless-2018-04-03&#39;</span></span>
<span class="line"><span style="color:#E06C75;">Resources</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;"> serverless</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  Type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Aliyun::Serverless::Service’</span></span>
<span class="line"><span style="color:#98C379;">  Properties:</span></span>
<span class="line"><span style="color:#98C379;">   Policies:</span></span>
<span class="line"><span style="color:#98C379;">    - AliyunContainerRegistryReadOnlyAccess</span></span>
<span class="line"><span style="color:#98C379;">   InternetAccess: true</span></span>
<span class="line"><span style="color:#98C379;">  golang-runtime:</span></span>
<span class="line"><span style="color:#98C379;">   Type: &#39;Aliyun::Serverless::Function‘</span></span>
<span class="line"><span style="color:#E06C75;">   Properties</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">    Description:&#39;Golang Runtime’</span></span>
<span class="line"><span style="color:#E06C75;">    Runtime</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">custom-container</span></span>
<span class="line"><span style="color:#E06C75;">    Timeout</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">60</span></span>
<span class="line"><span style="color:#98C379;">    CAPort:8080</span></span>
<span class="line"><span style="color:#E06C75;">    Handler</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">not-used</span></span>
<span class="line"><span style="color:#E06C75;">    MemorySize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1024</span></span>
<span class="line"><span style="color:#98C379;">    CodeUri:./</span></span>
<span class="line"><span style="color:#E06C75;">    CustomContainerConfig</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">    lmage</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;registry.cn-hangzhou.aliyuncs.com/serverless-image/golang:v0.1&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>7.通过 fun deploy 进行部署，fun invoke 进行测试</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> fun</span><span style="color:#98C379;"> deploy</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> fun</span><span style="color:#98C379;"> invoke</span></span>
<span class="line"><span style="color:#61AFEF;">Hello</span><span style="color:#98C379;"> Serverless!This</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> Golang</span><span style="color:#98C379;"> runtime,</span><span style="color:#98C379;"> version:</span><span style="color:#98C379;"> gol.15.6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="自定义运行时总结" tabindex="-1">自定义运行时总结 <a class="header-anchor" href="#自定义运行时总结" aria-label="Permalink to &quot;自定义运行时总结&quot;">​</a></h3><ul><li>FaaS 平台提供了有限的编程语言及版本的支持使用自定义运行时，可以自定义编程语言进行开发</li><li>自定义运行时的原理是在函数中实现一个 HTTP 服务 FaaS 平台将触发器事件转发到你的 HTTP 服务</li><li>可以通过将运行时上传到 FaaS 在 bootstrap 中定义启动命令来实现自定义运行时</li><li>可以通过自定义容器镜像来实现任意编程语言的自定义运行时</li></ul><p>自定义运行时是 Serverless 应用开中非常重要的一个功能。基于容器实现自定义运行时你可以很方便地安装依赖，因为依赖都打包到了镜像中</p><h2 id="七-serverless-应用代码单元测试" tabindex="-1">七.Serverless 应用代码单元测试 <a class="header-anchor" href="#七-serverless-应用代码单元测试" aria-label="Permalink to &quot;七.Serverless 应用代码单元测试&quot;">​</a></h2><h3 id="前言-4" tabindex="-1">前言 <a class="header-anchor" href="#前言-4" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>单元测试是保证代码质量和应用稳定性的重要手段</p><h3 id="使用-serverless-的难点" tabindex="-1">使用 Serverless 的难点 <a class="header-anchor" href="#使用-serverless-的难点" aria-label="Permalink to &quot;使用 Serverless 的难点&quot;">​</a></h3><ul><li>Serverless 架构是分布式的，组成 Serverless 应用的函数是单独运行的。这些函数集合到一起组成分布式架构，你需要对独立函数和分布式应用都进行测试</li><li>Serverless 架构依赖很多云服务，比如各种 FaaS、BaaS 等，这些云服务很难在本地模拟</li><li>Serverless 架构是事件驱动的事件驱动这种异步工作模式也很难在本地模拟</li></ul><h3 id="serverless-单元测试准则" tabindex="-1">Serverless 单元测试准则 <a class="header-anchor" href="#serverless-单元测试准则" aria-label="Permalink to &quot;Serverless 单元测试准则&quot;">​</a></h3><p>测试金字塔理论</p><p><img src="`+f+`" alt="测试金字塔"></p><p>Serverless 应用依赖很多云服务函数参数也与触发器强相关</p><ul><li>将业务逻辑和依赖的云服务分开，保持业务代码独立使其更易于扩展和测试</li><li>对业务逻辑编写充分的单元测试保证业务代码的正确性</li><li>对业务代码和云服务编写集成测试保证应用的正确性</li></ul><p>要解决这些难点主要就是要将业务代码和依赖的云服务分离开来，这样才能方便测试</p><p>假设实现一个功能：保存用户信息，保存成功后并发送欢迎邮件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// handler.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;db&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mailer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mailer&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		email</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">email</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		created_at</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将用户信息存入数据库</span></span>
<span class="line"><span style="color:#E5C07B;">	db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">userld</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;保存用户信息失败&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 存入成功后，为用户发送一封邮件</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> success</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> mailer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sendWelcomeEmail</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">email</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果发送邮件成功，则通过回调函数返回 userld</span></span>
<span class="line"><span style="color:#61AFEF;">				callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">userld</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果发送邮件失败，则通过回调函数告诉调用方发送邮件失败</span></span>
<span class="line"><span style="color:#61AFEF;">				callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`发送邮件{user.email}失败\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>上面代码重构后</p><p>src/users.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Users</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">db</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">mailer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">db</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> db</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mailer</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> mailer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">email</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			email</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">email</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			created_at</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 将用户信息存入数据库</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">				callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;保存用户信息失败&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 存入成功后，为用户发送一封邮件</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> success</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> mailer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sendWelcomeEmail</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">email</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 如果发送邮件成功，则通过回调函数返回 userld</span></span>
<span class="line"><span style="color:#61AFEF;">					callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 如果发送邮件失败，则通过回调函数告诉调用方发送邮件失败</span></span>
<span class="line"><span style="color:#61AFEF;">					callback</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`发送邮件{email}失败\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> Users</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>handler.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;db&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mailer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mailer&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Users</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./src/users&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 初始化 User 实例</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> users</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Users</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">db</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mailer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveUser</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	users</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">email</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>代码重构准则</p><ul><li>准则一：代码更易于扩展--提供一个 handlerjs 使其适用于新的 FaaS 平台，从而避免云厂商绑定</li><li>准则二：需要对 User 类编写单元测试</li></ul><h3 id="serverless-单元测试实践" tabindex="-1">Serverless 单元测试实践 <a class="header-anchor" href="#serverless-单元测试实践" aria-label="Permalink to &quot;Serverless 单元测试实践&quot;">​</a></h3><p>Node.js 使用 jest 框架做单元测试</p><p>1.创建一个<code>__test__</code> 目录</p><p>2.新建 <code>users.test.js</code>文件编写 Users 类的测试</p><p>3.测试可能的情况</p><ul><li><p>用户信息写入数据库成功，发送邮件成功</p></li><li><p>用户信息写入数据库失败</p></li><li><p>用户信息写入数据库成功，发送邮件失败</p><p>3.1 对 db.saveUser 和 mailer.sendWelcomeEmail 函数进行模拟</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	saveUser</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">jest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mailer</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	sendWelcomeEmail</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">jest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>4.针对 save 方法编写第一个测试用例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Users</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;../src/users&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;用户信息写入数据库成功，发送邮件成功&#39;</span><span style="color:#ABB2BF;">,() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //模拟db.saveUser，并调用成功</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        saveUser</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">jest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cb</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> cb</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">))，</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 模拟 mailer.sendWelcomeEmail，并调用成功</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> mailer</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        sendWelcomeEmail</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">jest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> users</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Users</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">db</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mailer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> email</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;test@gmail.com&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    users</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">email</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">userld</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 第一个断言，保存用户信息后的结果为 null</span></span>
<span class="line"><span style="color:#61AFEF;">        expect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toBeNull</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //第二个断言，保存并发送</span></span>
<span class="line"><span style="color:#61AFEF;">        expect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">userld</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toBe</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;用户信息写入数据库成功，发送邮件失败&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        saveUser</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">jest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cb</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> cb</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> mailer</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        sendWelcomeEmail</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">jest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> users</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Users</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">db</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mailer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> email</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;test@gmail.com&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    users</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">email</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">userld</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        expect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toBe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`发送邮件{email}失败\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">        sexpect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">userld</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toBeUndefined</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;用户信息写入数据库失败&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        saveUser</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">jest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">user</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cb</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> cb</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Internal Error&#39;</span><span style="color:#ABB2BF;">))),</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> mailer</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        sendWelcomeEmail</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">jest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> users</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Users</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">db</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mailer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> email</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;test@gmail.com&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    users</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">email</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">userld</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        expect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toBe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;保存用户信息失败&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">        sexpect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">userld</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toBeUndefined</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><p>5.使用 npm run test 测试</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>6.运行单元测试并生成测试覆盖率</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> test:coverage</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 运行之后查看输出，看看单元测试覆盖率怎么样</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>7.业务逻辑的变更，如何修改单元测试</p><p>为了更好地管理代码，建议单元测试的目录结构和业务代码结构保持一致，也就是 src 下的目录结构和<code>__test__</code> 的目录结构一样</p><h3 id="单元测试的最佳实践" tabindex="-1">单元测试的最佳实践 <a class="header-anchor" href="#单元测试的最佳实践" aria-label="Permalink to &quot;单元测试的最佳实践&quot;">​</a></h3><ul><li>速度</li><li>隔离外部调用</li><li>模拟</li><li>单一职责</li><li>自描述</li></ul><h3 id="单元测试总结" tabindex="-1">单元测试总结 <a class="header-anchor" href="#单元测试总结" aria-label="Permalink to &quot;单元测试总结&quot;">​</a></h3><ul><li>Serverless 应用由于其分布式、依赖云服务、事件驱动等特性导致编写单元测试很困难</li><li>为了方便编写单元测试需要将业务逻辑和依赖的云服务分离开来</li><li>编写单元测试时，需要考虑速度、隔离性、单一职责等因素避免单元测试成为开发的负担</li><li>好的单元测试应该是自描述的能对代码进行解释说明</li></ul><p>对 Serverless 应用编写单元测试的前提是：<strong>将业务代码和云服务依赖分离</strong></p>`,398)]))}const H=n(k,[["render",S]]);export{N as __pageData,H as default};
