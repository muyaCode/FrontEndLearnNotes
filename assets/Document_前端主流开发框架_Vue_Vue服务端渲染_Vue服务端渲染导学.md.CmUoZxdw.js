import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"Vue服务端渲染导学","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端主流开发框架/Vue/Vue服务端渲染/Vue服务端渲染导学.md","filePath":"Document/前端主流开发框架/Vue/Vue服务端渲染/Vue服务端渲染导学.md","lastUpdated":1750954157000}'),e={name:"Document/前端主流开发框架/Vue/Vue服务端渲染/Vue服务端渲染导学.md"};function o(t,s,r,c,i,B){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="vue服务端渲染导学" tabindex="-1">Vue服务端渲染导学 <a class="header-anchor" href="#vue服务端渲染导学" aria-label="Permalink to &quot;Vue服务端渲染导学&quot;">​</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><ul><li><strong>SSR</strong> （server side render）服务端渲染，是指由服务侧（server side）完成页面的 DOM 结构拼接，然后发送到浏览器，为其绑定状态与事件，成为完全可交互页面的过程。</li><li><strong>CSR</strong>（client side render）客户端渲染，是指由客户端（client side）JS 完成页面和数据的拼接，生成 DOM 结构再交由浏览器渲染成页面的过程。</li><li><strong>SPA</strong>（single page application）单页面应用，指只有一张 WEB 页面的应用，也就是说在导航切换的过程中页面不会刷新，只是局部更新内容。SPA 实现的原理就采用了 CSR，页面中所有内容由 JS 控制，需要浏览器进行 JS 解析才能显示出来。</li><li><strong>SEO</strong>（search engine optimization）搜索引擎优化，利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。</li><li><strong>SSG</strong>（static side generate），无需服务器实时动态编译，在构建时针对特定路由简单的生成静态 HTML 文件，我们也可称之为预渲染。</li><li><strong>AJAX</strong>（Asynchronous Javascript And XML）异步 JS&amp;XML，前台发送 AJAX 请求后并不会阻塞其他操作，数据接手后再异步更新页面，也就是说可以在不重新加载整个网页的情况下，对网页的局部数据进行更新。</li></ul><h2 id="发展背景" tabindex="-1">发展背景 <a class="header-anchor" href="#发展背景" aria-label="Permalink to &quot;发展背景&quot;">​</a></h2><ul><li><p>早些年的互联网时代，应用逻辑相对比较简单，与用户的交互并不是很多，所以大部分的网站都是由前端工程师开发好 HTML 页面，后台拿到页面后转成后台模板语法，将动态的数据添加进去，如 JSP、Velocity 等。后台开发完成后启动服务，当我们访问页面时，后台定位到请求的路径，按照页面需求从数据库抓取数据，随之进行 HTML 文件的拼接，最后返回给浏览器。这也就是<strong>初级的服务端渲染</strong>。</p></li><li><p>随着应用复杂性提高，用户对于界面的要求越来越高，前端交互也越发显得重要。同时，AJAX 的兴起把传统的开发模式带入到一个新时代：<strong>前后端分离式开发</strong>，即前端有自己的服务，不依赖于后台，前后端通过 AJAX 进行数据交互。前端发送请求，通过后台提供的 api 获取数据，然后通过前端 js 进行 HTML 页面的生成，展示给浏览器。这也就是所谓的<strong>客户端渲染</strong>。<br><img src="https://img-blog.csdnimg.cn/20210602101008650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NyYXp5X2ppYWxpbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>SPA 单页面应用就是这个时代的产物，一些框架也由此盛行，如 Vue、React、Angular 等，配合着 webpack、gulp 等打包工具，实现了前端开发环境热更新部署，生产环境的压缩优化打包，让前端开发效率及质量大大提高。</p></li><li><p>SPA 单页面应用虽好，但同时也伴随着一些弊端的产生：</p><ol><li>对 SEO（搜索引擎优化）不友好，因为他们的源码长这样:<br><img src="https://img-blog.csdnimg.cn/20210318164948427.png" alt="在这里插入图片描述"><br> SEO 是通过抓取我们网页源码中的关键字来建立索引库的，所以这种源码中没有内容，而是通过 js 添加进去的网站就会被搜索引擎直接 pass 掉了。</li><li>首屏加载速度慢，因为页面内容是由 js 拼接出来的，所以浏览器会等待 js 处理完成后才能渲染真正的 DOM 结构，多了一些等待时间。</li></ol></li><li><p>为了解决 SEO 和首屏加载慢的问题，前端攻城狮们在浏览器与后台服务间搭建一个服务器（一般是用 node.js 搭建的），专门用于<strong>服务端渲染</strong>。其流程是这样的：<br><img src="https://img-blog.csdnimg.cn/20210602100913985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NyYXp5X2ppYWxpbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;对比&quot;">​</a></h2><h3 id="服务器端渲染的优缺点是" tabindex="-1">服务器端渲染的优缺点是？ <a class="header-anchor" href="#服务器端渲染的优缺点是" aria-label="Permalink to &quot;服务器端渲染的优缺点是？&quot;">​</a></h3><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>前端耗时少。因为后端拼接完了 html，浏览器只需要直接渲染出来。</li><li>有利于 SEO。因为在后端有完整的 html 页面，所以爬虫更容易爬取获得信息，更有利于 seo。</li><li>无需占用客户端资源。即解析模板的工作完全交由后端来做，客户端只要解析标准的 html 页面即可，这样对于客户端的资源占用更少，尤其是移动端，也可以更省电。</li><li>后端生成静态化文件。即生成缓存片段，这样就可以减少数据库查询浪费的时间了，且对于数据变化不大的页面非常高效 。</li></ul><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行分工合作，则对于前端复杂度高的项目，不利于项目高效开发。另外，如果是服务器端渲染，则前端一般就是写一个静态 html 文件，然后后端再修改为模板，这样是非常低效的，并且还常常需要前后端共同完成修改的动作； 或者是前端直接完成 html 模板，然后交由后端。另外，如果后端改了模板，前端还需要根据改动的模板再调节 css，这样使得前后端联调的时间增加。</li><li>占用服务器端资源。即服务器端完成 html 模板的解析，如果请求较多，会对服务器造成一定的访问压力。而如果使用前端渲染，就是把这些解析的压力分摊了前端，而这里确实完全交给了一个服务器。</li></ul><h3 id="客户端渲染的优缺点是" tabindex="-1">客户端渲染的优缺点是？ <a class="header-anchor" href="#客户端渲染的优缺点是" aria-label="Permalink to &quot;客户端渲染的优缺点是？&quot;">​</a></h3><h4 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li>前后端分离。前端专注于前端 UI，后端专注于 api 开发，且前端有更多的选择性，而不需要遵循后端特定的模板。</li><li>体验更好。比如，我们将网站做成 SPA 或者部分内容做成 SPA，这样，尤其是移动端，可以使体验更接近于原生 app。</li></ul><h4 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>前端响应较慢。如果是客户端渲染，前端还要进行拼接字符串的过程，需要耗费额外的时间，不如服务器端渲染速度快。</li><li>不利于 SEO。虽然 Chrome 和部分浏览器开始对页面进行 JS 的执行后再抓取，但目前大部分浏览器对于 SPA 都是不认的，只是记录了一个页面，所以 SEO 很差。因为服务器端可能没有保存完整的 html，而是前端通过 js 进行 dom 的拼接，那么爬虫无法爬取信息。</li></ul><h2 id="使用服务端渲染" tabindex="-1">使用服务端渲染 <a class="header-anchor" href="#使用服务端渲染" aria-label="Permalink to &quot;使用服务端渲染&quot;">​</a></h2><p>服务端渲染有很多方式都能够实现：</p><h3 id="jsp-javaserver-pages" tabindex="-1">JSP（JavaServer Pages） <a class="header-anchor" href="#jsp-javaserver-pages" aria-label="Permalink to &quot;JSP（JavaServer Pages）&quot;">​</a></h3><p>传统的前后端统一式开发，将前端代码放到后台项目中，使用 JSP 进行数据拼接，这也是服务端渲染的一种实现方式。因其开发效率及体验都不是很好，所以我们现在的项目很少使用。</p><h3 id="express-ejs" tabindex="-1">express + ejs <a class="header-anchor" href="#express-ejs" aria-label="Permalink to &quot;express + ejs&quot;">​</a></h3><p>我们可以使用<code>express</code> + <code>ejs</code>搭建一个<code>node</code>服务器，将前端 HTML 代码编写成<code>ejs</code>的专用语法，涉及到需要数据请求的地方，我们向后台发送请求，获取到数据后将内容返回给<code>ejs</code>进行 HTML 拼接，最终再返回给客户端。</p><blockquote><p><code>express</code>+<code>ejs</code>只是一个例子，我们可以使用与其功能类似的其他框架，比如<code>koa</code>等。</p></blockquote><h3 id="express-react" tabindex="-1">express + react <a class="header-anchor" href="#express-react" aria-label="Permalink to &quot;express + react&quot;">​</a></h3><p><code>react</code>框架的项目，想使用<code>ssr</code>，可以使用<code>react-dom/server</code>的<code>renderToString()</code>方法将 React 组件转化为 HTML 代码，从而实现服务端渲染。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> fs</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;fs&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> path</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;path&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> express</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;express&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">StaticRouter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-router-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">renderToString</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-dom/server&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;../src/App&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/*&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> renderedString</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> renderToString</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E5C07B;">StaticRouter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E5C07B;">StaticRouter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;index.html&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#98C379;">&quot;utf8&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`&lt;p&gt;Server Error&lt;/p&gt;\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">			data</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">				&#39;&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">				\`&lt;div id=&quot;root&quot;&gt;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">renderedString</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&lt;/div&gt;\`</span></span>
<span class="line"><span style="color:#ABB2BF;">			)</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h3 id="vue-nuxt" tabindex="-1">vue + nuxt <a class="header-anchor" href="#vue-nuxt" aria-label="Permalink to &quot;vue + nuxt&quot;">​</a></h3><p><code>vue</code>框架的项目，使用<code>nuxt</code>就很方便了，我们只需要按照<code>nuxt</code>的脚手架创建好项目结构，然后就可以按照<code>vue</code>的开发方式进行开发了。<br><code>nuxt</code>支持<strong>SSR 服务端渲染模式</strong>和<strong>SSG 静态生成模式</strong>，如果说我们的页面需要提前动态获取数据并进行拼接，我们就需要使用服务端渲染模式；如果说我们的页面静态的东西比较多，动态数据不需要考虑 SEO，那么我们可以选择静态生成模式，相当于使用预渲染，不需要 node 服务器也能够提升 SEO。<br> 需要注意的是，<code>nuxt</code>为我们提供了比原生<code>vue</code>更多的生命周期：<br><img src="https://img-blog.csdnimg.cn/20210601100540788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NyYXp5X2ppYWxpbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p><strong>nuxtServerInit</strong>：服务端初始化，用于在页面渲染之前将数据存储到 vuex 中，比如用户信息，注意第一个参数是 vuex 的上下文对象，第二个参数是 nuxt 上下文对象</p></li><li><p><strong>Route Middleware</strong>：路由中间件，在初始化页面组件前调用，用于设置或检查路由条件或者重定向。此中间件分为三类，按照顺序调用，一是渲染 Global（在 nuxt.config.js 中定义），二是 Layout 整体布局（在 layout 中定义），三是 Page 页面组件（在 Page component 中定义）</p></li><li><p><strong>validate</strong>，校验钩子，在渲染页面组件前调用，用于校验动态路由参数的有效性，需要返回<code>true</code>或<code>false</code></p></li><li><p><strong>asyncData</strong>：异步获取数据，在渲染组件之前获取数据用，好比你在<code>vue</code>组件中用 created 获取数据一样，不同的是 asyncData 是在服务端执行的，所以在此钩子中不能获取<code>vue</code>组件的 this 对象。还有要注意的是：asyncData 只是在首屏的时候调用一次（即页面渲染之前，所以事件触发不了它）</p></li><li><p><strong>beforeCreate 和 created</strong>：<code>vue</code>实例的创建和创建前的钩子函数，与<code>vue</code>不同的是 nuxt 会在服务端和客户端都调用。</p></li><li><p><strong>fetch</strong>：与<code>asyncData</code>类似，不同的是它不会设置组件的数据，因为此钩子是在 vue 实例创建后调用的，所以在这里可以获取到 vue 的 this 对象。</p></li><li><p><strong>mounted&amp;其他钩子</strong>：与 vue 剩余的生命周期一致，在客户端执行。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;news-wrap&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;title-wrap&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      {{ title }}</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span></span>
<span class="line"><span style="color:#D19A66;">      v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;(item, index) in newsList&quot;</span></span>
<span class="line"><span style="color:#D19A66;">      :key</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;index&quot;</span></span>
<span class="line"><span style="color:#D19A66;">      class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;news-item&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;title&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        {{ item.title }}</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;author&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        {{ item.author }}</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;date&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        {{ item.date }}</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;description&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        {{ item.description }}</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">getNewsList</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;../api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  data</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      newsList</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">      title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;新闻列表1&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#C678DD;">  async</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#61AFEF;"> getNewsList</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // console.log(res, app)</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;ssr新闻列表&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">newsList</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div></li></ul><h2 id="怎样选择" tabindex="-1">怎样选择？ <a class="header-anchor" href="#怎样选择" aria-label="Permalink to &quot;怎样选择？&quot;">​</a></h2><p>之前看到网上一句话 ，觉得用在这里在合适不过：“抛开业务场景谈技术选型的都是耍流氓”。</p><h3 id="适用于客户端渲染的项目" tabindex="-1">适用于客户端渲染的项目： <a class="header-anchor" href="#适用于客户端渲染的项目" aria-label="Permalink to &quot;适用于客户端渲染的项目：&quot;">​</a></h3><ul><li>企业内部项目，管理平台这类不需要 SEO 的项目，使用客户端渲染能能够提高开发效率，减少服务器资源占用；</li><li>强交互项目：对于交互比较多，数据不是很固定的项目，使用客户端渲染，能够让用户更临近于原生 APP 体验；</li></ul><h3 id="适用于服务端渲染的项目" tabindex="-1">适用于服务端渲染的项目： <a class="header-anchor" href="#适用于服务端渲染的项目" aria-label="Permalink to &quot;适用于服务端渲染的项目：&quot;">​</a></h3><ul><li>官网 / 博客网站 / 营销类网站：这些网站对 SEO 和首屏渲染速度更加注重，所以服务端渲染会是较好的选择；</li></ul><h3 id="综合方案" tabindex="-1">综合方案？ <a class="header-anchor" href="#综合方案" aria-label="Permalink to &quot;综合方案？&quot;">​</a></h3><p>现在有技术可以实现服务端渲染和客户端渲染结合，比如<a href="https://www.nextjs.cn/docs/basic-features/data-fetching" target="_blank" rel="noreferrer">next.js</a>，对于网站部分需要 SEO 和首屏渲染速度的页面，我们是使用服务端渲染，对于其他交互性强或者是不需要 SEO 的页面，我们使用静态构成，从而减少服务器压力，提高交互体验。</p><h2 id="开发nuxt3-项目模板" tabindex="-1">开发nuxt3 项目模板 <a class="header-anchor" href="#开发nuxt3-项目模板" aria-label="Permalink to &quot;开发nuxt3 项目模板&quot;">​</a></h2><p><a href="https://juejin.cn/post/7362095142743818278" target="_blank" rel="noreferrer">【2024年4月】nuxt3 项目模板，让你开发官网得心应手 - 掘金 (juejin.cn)</a></p>`,39)]))}const b=n(e,[["render",o]]);export{u as __pageData,b as default};
