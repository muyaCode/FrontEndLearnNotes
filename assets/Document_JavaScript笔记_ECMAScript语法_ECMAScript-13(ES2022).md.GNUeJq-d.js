import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"ECMAScript-13(ES2022)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-13(ES2022).md","filePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-13(ES2022).md","lastUpdated":1750954157000}'),e={name:"Document/JavaScript笔记/ECMAScript语法/ECMAScript-13(ES2022).md"};function o(r,s,c,t,B,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ecmascript-13-es2022" tabindex="-1">ECMAScript-13(ES2022) <a class="header-anchor" href="#ecmascript-13-es2022" aria-label="Permalink to &quot;ECMAScript-13(ES2022)&quot;">​</a></h1><h2 id="参考" tabindex="-1">参考： <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考：&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s/mY_jVsjBEP7E1T4Lh-UwEA" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/mY_jVsjBEP7E1T4Lh-UwEA</a></p><p><a href="https://juejin.cn/post/7129345014127132680" target="_blank" rel="noreferrer">总结11个ES2022中你可能遗漏的语法！！！ - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7018182022954745870" target="_blank" rel="noreferrer">ECMA 2022 (es13) 新特性 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7119309621453389855" target="_blank" rel="noreferrer">ES2022新规发布，8个实用新功能 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7112632005912690701" target="_blank" rel="noreferrer">ECMAScript 2022 正式发布，有哪些新特性？ - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7098572094677450765" target="_blank" rel="noreferrer">ES12 中 8 个很棒的新 JavaScript 语言特性 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7113717200124379172" target="_blank" rel="noreferrer">花十分钟，迅速了解ES13的全部特性 - 掘金 (juejin.cn)</a></p><h2 id="提案" tabindex="-1">提案 <a class="header-anchor" href="#提案" aria-label="Permalink to &quot;提案&quot;">​</a></h2><h2 id="class扩展" tabindex="-1">class扩展 <a class="header-anchor" href="#class扩展" aria-label="Permalink to &quot;class扩展&quot;">​</a></h2><h3 id="类成员声明" tabindex="-1">类成员声明 <a class="header-anchor" href="#类成员声明" aria-label="Permalink to &quot;类成员声明&quot;">​</a></h3><p>在<code>ES13</code>之前，我们只能在构造函数里面声明类的成员，而不能像其他大多数语言一样在类的最外层作用域里面声明成员。不过<code>ES13</code>出来之后，这都不算什么事儿了。现在我们终于可以突破这个限制，写下面这样的代码了：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Car</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  color</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;blue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> car</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Car</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">car</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// blue</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">car</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="私有属性和私有方法" tabindex="-1">私有属性和私有方法 <a class="header-anchor" href="#私有属性和私有方法" aria-label="Permalink to &quot;私有属性和私有方法&quot;">​</a></h3><p><code>ES13</code>之前，我们是不可能给类定义私有成员的。所以一些程序员为了表示某个成员变量是一个私有属性，会给该属性名添加一个下划线(<code>_</code>)作为后缀。可是这只能作为程序员之间的君子之约来使用，因为这些变量其实还是可以被外界访问到的。不过在<code>ES13</code>中，我们只需要给我们的属性/方法添加一个<code>hashtag(#)</code>前缀，这个属性/方法就变成私有的了。当我们的属性变为私有后，任何外界对其的访问都会出错哦。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  #firstName</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;randy&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  #lastName</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;su&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  #</span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;say hello&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  get</span><span style="color:#61AFEF;"> name</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">#say</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">#firstName</span><span style="color:#C678DD;">}</span><span style="color:#C678DD;"> \${</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">#lastName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// say hello randy su</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 下面都会报错</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// SyntaxError: Private field &#39;#firstName&#39; must be</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// declared in an enclosing class</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">#firstName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">#lastName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">#say</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="静态私有属性和私有方法" tabindex="-1">静态私有属性和私有方法 <a class="header-anchor" href="#静态私有属性和私有方法" aria-label="Permalink to &quot;静态私有属性和私有方法&quot;">​</a></h3><p>跟私有属性和方法一样，我们只需要给我们的静态属性/方法添加一个<code>hashtag(#)</code>前缀，这个静态属性/方法就变成私有的了。只能在类内部访问啦。</p><p>类的静态方法可以使用<code>this</code>关键字访问其他的私有或者公有静态成员，而在类的实例方法中则可以通过<code>this.constructor</code>来访问这些静态属性.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#E06C75;"> #count</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#61AFEF;"> getCount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">#count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">#incrementCount</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#ABB2BF;"> #</span><span style="color:#61AFEF;">incrementCount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">#count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> person1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> person2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCount</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 下面都会报错</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">#count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">#incrementCount</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="判断是否有私有变量" tabindex="-1">判断是否有私有变量 <a class="header-anchor" href="#判断是否有私有变量" aria-label="Permalink to &quot;判断是否有私有变量&quot;">​</a></h3><p>前面我们说了，可以定义私有属性和方法，但是在外部是没办法直接访问的，那么我们怎么知道某对象是否具有某私有属性呢？</p><p>在<code>ES13</code>中，我们可以通过<code>in</code>操作符来判断对象是否具有某私有属性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Car</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  #color</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  hasColor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> #</span><span style="color:#E06C75;">color</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> car</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Car</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">car</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasColor</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="支持定义静态代码块" tabindex="-1">支持定义静态代码块 <a class="header-anchor" href="#支持定义静态代码块" aria-label="Permalink to &quot;支持定义静态代码块&quot;">​</a></h3><p><code>ES13</code>允许在类中通过<code>static</code>关键字定义一系列静态代码块，这些代码块只会在类被创造的时候<strong>执行一次</strong>。</p><p>一个类可以定义任意多的静态代码块，这些代码块会和穿插在它们之间的静态成员变量一起按照定义的顺序在类初始化的时候执行一次。我们还可以使用<code>super</code>关键字来访问父类的属性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Vehicle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#E06C75;"> defaultColor</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;blue&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Car</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Vehicle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#E06C75;"> colors</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">colors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">defaultColor</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  static</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">colors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;green&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Car</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">colors</span><span style="color:#ABB2BF;">); [</span><span style="color:#98C379;">&#39;blue&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;red&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;green&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="async-await扩展" tabindex="-1">Async Await扩展 <a class="header-anchor" href="#async-await扩展" aria-label="Permalink to &quot;Async Await扩展&quot;">​</a></h2><h3 id="支持在最外层写await" tabindex="-1">支持在最外层写await <a class="header-anchor" href="#支持在最外层写await" aria-label="Permalink to &quot;支持在最外层写await&quot;">​</a></h3><p>在<code>ES13</code>之前，我们的<code>await</code>必须写在<code>async</code>方法里面，否则会报错。但是<code>ES13</code>允许直接在最外层写<code>await</code>，是不是很爽呢？</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> setTimeoutAsync</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">timeout</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      resolve</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#E06C75;">timeout</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#61AFEF;"> setTimeoutAsync</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="array和string扩展" tabindex="-1">Array和String扩展 <a class="header-anchor" href="#array和string扩展" aria-label="Permalink to &quot;Array和String扩展&quot;">​</a></h2><h3 id="at函数" tabindex="-1">at函数 <a class="header-anchor" href="#at函数" aria-label="Permalink to &quot;at函数&quot;">​</a></h3><p>我们可以使用<code>at</code>函数来索引元素，支持数组和字符串。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;d&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第一个元素</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">at</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// a</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 倒数第一个元素</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">at</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// d</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 倒数第二个元素</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">at</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// c</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;randy&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第一个元素</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">at</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// r</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 倒数第一个元素</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">at</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// y</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 倒数第二个元素</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">at</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>注意传正数从前往后找，下标从<code>0</code>开始。传负数从后往前找，下标从<code>-1</code>开始。</p><h2 id="regexp扩展" tabindex="-1">RegExp扩展 <a class="header-anchor" href="#regexp扩展" aria-label="Permalink to &quot;RegExp扩展&quot;">​</a></h2><h3 id="支持返回开始和结束索引" tabindex="-1">支持返回开始和结束索引 <a class="header-anchor" href="#支持返回开始和结束索引" aria-label="Permalink to &quot;支持返回开始和结束索引&quot;">​</a></h3><p>简单来说这个新属性就是允许我们告诉<code>RegExp</code>在返回<code>match</code>对象的时候，给我们返回匹配到的子字符串的开始和结束索引。</p><p><code>ES13</code>之前，我们只能获取正则表达式匹配到的子字符串的开始索引:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;sun and moon&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> regex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /and/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> matchObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> regex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [ &#39;and&#39;, index: 4, input: &#39;sun and moon&#39;, groups: undefined ]</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">matchObj</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>ES13</code>后，我们就可以给正则表达式添加一个<code>d</code>的标记来让它在匹配的时候给我们既返回匹配到的子字符串的起始位置还返回其结束位置:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;sun and moon&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> regex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /and/</span><span style="color:#C678DD;">d</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> matchObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> regex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">[</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  &#39;and&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  index: 4,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  input: &#39;sun and moon&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  groups: undefined,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  indices: [ [ 4, 7 ], groups: undefined ]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">matchObj</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>你看，设置完<code>d</code>标记后，多了一个<code>indices</code>的数组，里面就是匹配到的子字符串的范围了！</p><h2 id="object扩展" tabindex="-1">Object扩展 <a class="header-anchor" href="#object扩展" aria-label="Permalink to &quot;Object扩展&quot;">​</a></h2><h3 id="object-hasown" tabindex="-1">Object.hasOwn() <a class="header-anchor" href="#object-hasown" aria-label="Permalink to &quot;Object.hasOwn()&quot;">​</a></h3><p><code>Object.hasOwn()</code>函数接收两个参数，一个是对象，一个是属性，如果这个对象本身就有这个属性的话，这个函数就会返回<code>true</code>，否则就返回<code>false</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;green&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;color&#39;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>好奇的小伙伴就会问了，不是有<code>hasOwnProperty()</code>可以判断某对象是否具有某属性吗？为什么还是要出一个这样的方法。</p><p>其实原因有两点，</p><ol><li><code>hasOwnProperty()</code>方法是<code>Object</code>原型上的方法，所以可以被覆盖，如果覆盖了就达不到我们想要的结果了。</li><li>如果我们创建了一个原型为<code>null</code>的对象(<code>Object.create(null)</code>)，也会获取不到该方法而报错。</li></ol><h2 id="error扩展" tabindex="-1">Error扩展 <a class="header-anchor" href="#error扩展" aria-label="Permalink to &quot;Error扩展&quot;">​</a></h2><h3 id="error对象的cause属性" tabindex="-1">Error对象的cause属性 <a class="header-anchor" href="#error对象的cause属性" aria-label="Permalink to &quot;Error对象的cause属性&quot;">​</a></h3><p><code>ES13</code>后，<code>Error</code>对象多了一个<code>cause</code>属性来指明错误出现的原因。这个属性可以帮助我们为错误添加更多的上下文信息，从而帮助使用者们更好地定位错误。这个属性是我们在创建<code>error</code>对象时传进去的第二个参数对象的<code>cause</code>属性:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> userAction</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    apiCallThatCanThrow</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;New error message&#39;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">cause</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;请求出错啦&#39;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  userAction</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Cause by: </span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">err</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cause</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Cause by: 请求出错啦</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,57)]))}const F=n(e,[["render",o]]);export{b as __pageData,F as default};
