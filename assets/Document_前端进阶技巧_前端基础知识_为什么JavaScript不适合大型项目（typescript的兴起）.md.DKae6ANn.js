import{_ as n,c as a,o as p,ah as l}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"为什么JavaScript不适合大型项目（typescript的兴起）","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端进阶技巧/前端基础知识/为什么JavaScript不适合大型项目（typescript的兴起）.md","filePath":"Document/前端进阶技巧/前端基础知识/为什么JavaScript不适合大型项目（typescript的兴起）.md","lastUpdated":1750954157000}'),e={name:"Document/前端进阶技巧/前端基础知识/为什么JavaScript不适合大型项目（typescript的兴起）.md"};function o(r,s,c,t,B,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="为什么javascript不适合大型项目-typescript的兴起" tabindex="-1">为什么JavaScript不适合大型项目（typescript的兴起） <a class="header-anchor" href="#为什么javascript不适合大型项目-typescript的兴起" aria-label="Permalink to &quot;为什么JavaScript不适合大型项目（typescript的兴起）&quot;">​</a></h1><p>随着前端快速发展，JavaScript 语言的设计缺陷在大型项目中逐渐显露。</p><p>复用代码的模块问题就是其中之一，但庆幸的是，ES6 模块在原生层面解决了这个问题，不同环境下的兼容性问题也可以由工具转化代码来解决。</p><p>这一课时要提到的类型问题，是一个需要依赖第三方规范和工具来解决的缺陷。JavaScript 的类型问题具体表现在下面 3 个方面。</p><p><strong>类型声明</strong>：</p><p>前面在第 08 课时中已经提过命名的提升特性，如果某个变量命名提升到全局，那么将是危险的。比如下面的代码，函数 fn 内部使用了一个变量 c，由于忘记使用关键字来声明，结果导致覆盖了全局变量 c。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#E06C75;">  c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>动态类型</strong>：</p><p>动态类型是指在运行期间才做数据类型检查的语言，即动态类型语言编程时，不用给任何变量指定数据类型。</p><p>下面是一个简单的例子，定义了一个函数 printId 来返回某个对象的 id 属性。如果我们在调用函数 printId 时要想了解参数 user 的数据结构和返回值类型，只能通过查看源码，或者运行时调试、打印来获取。当函数结构复杂，参数较多时这个过程就会大大降低代码的可维护性。虽然添加注释能在一定程度上缓解问题，但为函数编写注释并不是强制性约束，能否及时同步注释也可能会成为新的问题。</p><p>就函数 printId 本身而言，也无法在编译时校验参数的合法性，只能在运行时添加校验逻辑，这也大大增加了程序出现 bug 的概率。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> printId</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">user</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E5C07B;"> user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>弱类型</strong>：</p><p>弱类型是指一个变量可以被赋予不同数据类型的值。这也是一个既灵活又可怕的特性，编写代码的时候非常方便，不用考虑变量的数据类型，但这也很容易出现 bug，调试起来会变得相当困难。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#E06C75;">tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// tmp 到底会变成什么？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>为了解决上面 3 个问题，开源社区提供了解决方案——TypeScript。它是基于 JavaScript 的语法糖，也就是说 TypeScript 代码没有单独的运行环境，需要编译成 JavaScript 代码之后才能运行。</p><p>从它的名字不难看出，它的核心特性是类型“Type”。具体工作原理就是在代码编译阶段进行类型检测，这样就能在代码部署运行之前及时发现问题。</p><h4 id="类型与接口" tabindex="-1">类型与接口 <a class="header-anchor" href="#类型与接口" aria-label="Permalink to &quot;类型与接口&quot;">​</a></h4><p>TypeScript 让 JavaScript 变成了<strong>静态强类型</strong>、<strong>变量</strong>需要严格声明的语言，为此定义了两个重要概念：<strong>类型（type）和接口（interface）</strong>。</p><p>TypeScript 在 JavaScript 原生类型的基础上进行了扩展，但为了和基础类型对象进行区分，采用了小写的形式，比如 Number 类型对应的是 number。类型之间可以互相组合形成新的类型。</p><p>一些数据类型在前面第 07 课时中已经提过，这里不再赘述。下面补充一下 TypeScript 扩展的类型。</p><h5 id="元组" tabindex="-1">元组 <a class="header-anchor" href="#元组" aria-label="Permalink to &quot;元组&quot;">​</a></h5><p>元组可以看成是具有固定长度的数组，其中数组元素类型可以不同。比如下面的代码声明了一个元组变量 x，x 的第一个元素是字符串，第二个是数字；又比如 react hooks 就是用到了元组类型。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h5><p>枚举指的是带有名字的常量，可以分为数字枚举、字符串枚举和异构枚举（字符串和数字的混合）3 种。比较适用于前后端通用的枚举值，比如通过 AJAX 请求获取的数据状态，对于仅在前端使用的枚举值还是推荐使 Symbol。</p><p>下面是一个异构枚举的例子，定义了数字枚举值 0 和字符串枚举值 &quot;YES&quot;。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> example</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> No</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;"> Yes</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;YES&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>也可以使用 const 修饰符来定义枚举值，通过这种定义方式，TypeScript 会在编译的时候，直接把枚举引用替换成对应的枚举值而非创建枚举对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> example</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    No</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    Yes</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;YES&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">example</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">No</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 编译成</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> example</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">example</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    example</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">example</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;No&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;No&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    example</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;Yes&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;YES&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">})(</span><span style="color:#E06C75;">example</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">example</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">example</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">No</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">////////////</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> example</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    No</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    Yes</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;YES&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">example</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">No</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  编译成</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#7F848E;font-style:italic;"> /* No */</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="any" tabindex="-1">any <a class="header-anchor" href="#any" aria-label="Permalink to &quot;any&quot;">​</a></h5><p>any 类型代表可以是任何一种类型，所以会跳过类型检查，相当于让变量或返回值又变成弱类型。因此建议尽量减少 any 类型的使用。</p><h5 id="void" tabindex="-1">void <a class="header-anchor" href="#void" aria-label="Permalink to &quot;void&quot;">​</a></h5><p>void 表示没有任何类型，常用于描述无返回值的函数。</p><h5 id="never" tabindex="-1">never <a class="header-anchor" href="#never" aria-label="Permalink to &quot;never&quot;">​</a></h5><p>never 类型表示的是那些永不存在的值的类型，对于一些特殊的校验场景比较有用，比如代码的完整性检查。下面的示例代码通过穷举判断变量 u 的值来执行对应逻辑，如果此时变量 u 的可选值新增了字符串 &quot;c&quot;，那么这段代码并不会给出提示告诉开发者还有一种 u 等于字符串 &quot;c&quot; 的场景，但如果增加 never 类型赋值的话在编译时就可以给出提示。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> u</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">|</span><span style="color:#98C379;">&#39;b&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">u</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;a&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">u</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;b&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>增加了 never 类型变量赋值：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> u</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">|</span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">|</span><span style="color:#98C379;">&#39;c&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">u</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;a&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">u</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;b&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> trmp</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">never</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> u</span><span style="color:#7F848E;font-style:italic;"> // Type &#39;&quot;c&quot;&#39; is not assignable to type &#39;never&#39;.</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接口的作用和类型非常相似，在大多数情况下可以通用，只存在一些细小的区别（比如同名接口可以自动合并，而类型不能；在编译器中将鼠标悬停在接口上显示的是接口名称，悬停在类型上显示的是字面量类型），最明显的区别还是在写法上。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 声明 */</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> IA</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TA</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 继承 */</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> IA2</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> IA</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> TA2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> TA</span><span style="color:#ABB2BF;"> &amp; { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 实现 */</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> A</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> IA</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> A2</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> TA</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="类型抽象" tabindex="-1">类型抽象 <a class="header-anchor" href="#类型抽象" aria-label="Permalink to &quot;类型抽象&quot;">​</a></h4><p>泛型是对类型的一种抽象，一般用于函数，能让调用者动态地指定部分数据类型。这一点和 any 类型有些像，对于类型的定义具有不确定性，可以指代多种类型，但最大区别在于泛型可以对函数成员或类成员产生约束关系。 下面代码是 react 的钩子函数 useState 的类型定义，就用到了泛型。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">initialState</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;"> | (() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> S</span><span style="color:#ABB2BF;">)): [</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Dispatch</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SetStateAction</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">&gt;&gt;];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这段代码中 S 称为<strong>泛型变量</strong>。从这个定义可看出，useState 可以接收任何类型的参数或回调函数，但返回的元组数据第一个值必定和参数类型或者回调函数返回值类型相同，都为 S。</p><p>如果使用 any 类型来取代泛型，那么我们只能知道允许传入任何参数或回调函数，而无法知道返回值与入参的对应关系。</p><p>在使用泛型的时候，我们可以通过尖括号来手动指定泛型变量的类型，这个指定操作称之为**类型断言，**也可以不指定，让 TypeScript 自行推断类型。比如下面的代码就通过类型断言，将范型变量指定为 string 类型。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setId</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="类型组合" tabindex="-1">类型组合 <a class="header-anchor" href="#类型组合" aria-label="Permalink to &quot;类型组合&quot;">​</a></h4><p>类型组合就是把现有的多种类型叠加到一起，组合成一种新的类型，具体有两种方式。</p><h5 id="交叉" tabindex="-1">交叉 <a class="header-anchor" href="#交叉" aria-label="Permalink to &quot;交叉&quot;">​</a></h5><p>交叉就是将多个类型合并为一个类型，操作符为 “&amp;” 。下面的代码定义了一个 Admin 类型，它同时是类型 Student 和类型 Teacher 的交叉类型。 就是说 Admin 类型的对象同时拥有了这 2 种类型的成员。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Admin</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Student</span><span style="color:#ABB2BF;"> &amp; </span><span style="color:#E5C07B;">Teacher</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="联合" tabindex="-1">联合 <a class="header-anchor" href="#联合" aria-label="Permalink to &quot;联合&quot;">​</a></h5><p>联合就是表示符合多种类型中的任意一个，不同类型通过操作符“|”连接。下面代码定义的类型是 AorB，表示该类型值可以是类型 A，也可以是类型 B。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> A</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> B</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> AorB</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> A</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">B</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>对于联合类型 AorB，我们能够确定的是它包含了 A 和 B 中共有的成员。如果我们想确切地了解值是否为类型 A，只能通过检查值的方法是否存在来进行判断。例如，下面的变量 v 属于 AorB 类型，在需要确认其具体类型时，先将变量 v 的类型断言为 A，然后再调用其属性 a 进行判断。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AorB</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> ((&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  (&lt;</span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="类型引用" tabindex="-1">类型引用 <a class="header-anchor" href="#类型引用" aria-label="Permalink to &quot;类型引用&quot;">​</a></h4><h5 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h5><p>索引类型的目的是让 TypeScript 编译器检查出使用了动态属性名的类型，需要通过索引类型查询和索引类型访问来实现。 下面的示例代码实现了一个简单的函数 getValue ，传入对象和对象属性名获取对应的值。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getValue</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;font-style:italic;">o</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">] {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> o</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// o[name] is of type T[K]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> com</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;lagou&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">123</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">com</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;id&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> no</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">com</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;no&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//报错：Argument of type &#39;&quot;no&quot;&#39; is not assignable to parameter of type &#39;&quot;id&quot; | &quot;name&quot;&#39;.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>其中，泛型变量 K 继承了泛型变量 T 的属性名联合，这里的 keyof 就是索引类型查询操作符；返回值 T[K] 就是索引访问操作符的使用方式。</p><p>前面提到的 Pick 类型就是通过索引类型来实现的。</p><h5 id="映射" tabindex="-1">映射 <a class="header-anchor" href="#映射" aria-label="Permalink to &quot;映射&quot;">​</a></h5><p>映射类型是指从已有类型中创建新的类型。TypeScript 预定义了一些类型，比如最常用的 Pick 和 Omit。</p><p>下面是 Pick 类型的使用示例及源码，可以看到类型 Pick 从类型 task 中选择属性 &quot;title&quot; 和 &quot;description&quot; 生成了新的类型 simpleTask。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">K</span><span style="color:#C678DD;"> extends</span><span style="color:#C678DD;"> keyof</span><span style="color:#E5C07B;"> T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">P</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> K</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">TP</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  description</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  status</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> simpleTask</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Pick</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">task</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;title&#39;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&#39;description&#39;</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#7F848E;font-style:italic;">// {title: string;description: string}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>类型 Pick 的实现，先用到了索引类型查询，获取了类型 T 的属性名联合 K，然后通过操作符 in 对其进行遍历，同时又用到了索引类型访问来表示属性值。</p><p>由于篇幅所限，更多的预定义类型这里就不一一讲解了，对实现原理感兴趣的同学可以参看其<a href="https://github.com/microsoft/TypeScript/blob/master/lib/lib.es5.d.ts" target="_blank" rel="noreferrer">源码</a>。</p><h4 id="实践-编写类型声明" tabindex="-1">实践：编写类型声明 <a class="header-anchor" href="#实践-编写类型声明" aria-label="Permalink to &quot;实践：编写类型声明&quot;">​</a></h4><p>结合上面所说的内容，再通过一个例子来加深理解。我们以第 03 课时的代码 2 的 debounce 函数为例，为这段代码添加类型声明，转换成 TeypScript 语法。</p><p>需要添加类型声明的地方通常是变量和函数。</p><p>首先给函数 debounce 添加类型，包括参数类型和返回值类型。参数类型使用泛型变量，在调用函数 debounce 的时候手动指定，泛型变量有 3 个：函数 T 、函数 T 的返回值 U 和 函数 T 的参数 V。</p><p>然后是变量 timeout ，当定时器存在时它的值为 number，定时器不存在时值为 null。</p><p>最后按照之前定义的泛型变量给函数 debounced 和函数 flush 添加类型声明。</p><p>具体代码如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> debounce</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">T</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">V</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">[]&gt;(</span><span style="color:#E06C75;font-style:italic;">func</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">wait</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> timeout</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">null</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">V</span></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> debounced</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    args</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arg</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timeout</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      clearTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timeout</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">      timeout</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 以 Promise 的形式返回函数执行结果</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">rej</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      timeout</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">          const</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">U</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> func</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">          res</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">          rej</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }, </span><span style="color:#E06C75;">wait</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 允许取消</span></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> cancel</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    clearTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timeout</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    timeout</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 允许立即执行</span></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> flush</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    cancel</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> func</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E5C07B;">  debounced</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cancel</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> cancel</span></span>
<span class="line"><span style="color:#E5C07B;">  debounced</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">flush</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> flush</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> debounced</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h4 id="javascript类型总结" tabindex="-1">JavaScript类型总结 <a class="header-anchor" href="#javascript类型总结" aria-label="Permalink to &quot;JavaScript类型总结&quot;">​</a></h4><p>这一课时重点讲述了如何通过 TypeScript 来解决 JavaScript 的类型问题，TypeScript 在原有的基础类型上进行了扩展，理解 TypeScript 的基本类型并不难，重点需要掌握如何通过泛型来对类型进行抽象，如何通过组合及引用来对已有的类型创建新的类型。</p><p>最后布置一道思考题：TypeScript 能较好地解决编译时类型校验的问题，但无法对运行时的数据（比如通过 AJAX 请求获得的数据）进行校验，你能想到有什么好的方法解决这个问题吗？</p><p>答：可以利用泛型化请求响应类型来解决</p>`,82)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
