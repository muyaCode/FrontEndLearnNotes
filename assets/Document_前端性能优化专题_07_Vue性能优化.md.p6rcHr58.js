import{_ as n,c as a,o as p,ah as l}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"Vue.js 性能优化技巧","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端性能优化专题/07_Vue性能优化.md","filePath":"Document/前端性能优化专题/07_Vue性能优化.md","lastUpdated":1750954157000}'),e={name:"Document/前端性能优化专题/07_Vue性能优化.md"};function o(r,s,c,t,B,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="vue-js-性能优化技巧" tabindex="-1">Vue.js 性能优化技巧 <a class="header-anchor" href="#vue-js-性能优化技巧" aria-label="Permalink to &quot;Vue.js 性能优化技巧&quot;">​</a></h1><p>Vue.js 核心成员  <a href="https://github.com/Akryum" target="_blank" rel="noreferrer">Guillaume Chau</a>  在 19 年美国的 Vue conf 分享的主题：9 Performance secrets revealed，分享中提到了九个 Vue.js 性能优化的技巧。</p><p>分享的  <a href="https://slides.com/akryum/vueconfus-2019" target="_blank" rel="noreferrer">PPT</a>，也阅读了相关的<a href="https://github.com/Akryum/vue-9-perf-secrets/" target="_blank" rel="noreferrer">项目源码</a>，在深入了解它的优化原理后，把其中一些优化技巧也应用到了我平时的工作中，取得了相当不错的效果。</p><p>分享做二次加工，详细阐述其中的优化原理，并做一定程度的扩展和延伸。</p><blockquote><p>本文主要还是针对 Vue.js 2.x 版本</p></blockquote><h2 id="functional-components" tabindex="-1">Functional components <a class="header-anchor" href="#functional-components" aria-label="Permalink to &quot;Functional components&quot;">​</a></h2><p>第一个技巧，函数式组件，你可以查看这个<a href="https://vue-9-perf-secrets.netlify.app/bench/functional" title="https://vue-9-perf-secrets.netlify.app/bench/functional" target="_blank" rel="noreferrer">在线示例</a>。</p><p>优化前的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;cell&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;on&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">section</span><span style="color:#D19A66;"> v-else</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;off&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">section</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;value&quot;</span><span style="color:#ABB2BF;">] };</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>优化后的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> functional</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;cell&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;props.value&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;on&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">section</span><span style="color:#D19A66;"> v-else</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;off&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">section</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后我们在父组件各渲染优化前后的组件 800 个，并在每一帧内部通过修改数据来触发组件的更新，开启 Chrome 的 Performance 面板记录它们的性能，得到如下结果。</p><p>优化前：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/efdc43d574544231ad9012482a064ba8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark1"></p><p>优化后：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2234e433d468465a8f86cb6d4420c318~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark2"></p><p>对比这两张图我们可以看到优化前执行 <code>script</code> 的时间要多于优化后的，而我们知道 JS 引擎是单线程的运行机制，JS 线程会阻塞 UI 线程，所以当脚本执行时间过长，就会阻塞渲染，导致页面卡顿。而优化后的 <code>script</code> 执行时间短，所以它的性能更好。</p><p>那么，为什么用函数式组件 JS 的执行时间就变短了呢？这要从函数式组件的实现原理说起了，你可以把它理解成一个函数，它可以根据你传递的上下文数据渲染生成一片 DOM。</p><p>函数式组件和普通的对象类型的组件不同，它不会被看作成一个真正的组件，我们知道在 <code>patch</code> 过程中，如果遇到一个节点是组件 <code>vnode</code>，会递归执行子组件的初始化过程；而函数式组件的 <code>render</code> 生成的是普通的 <code>vnode</code>，不会有递归子组件的过程，因此渲染开销会低很多。</p><p>因此，函数式组件也不会有状态，不会有响应式数据，生命周期钩子函数这些东西。你可以把它当成把普通组件模板中的一部分 DOM 剥离出来，通过函数的方式渲染出来，是一种在 DOM 层面的复用。</p><h2 id="child-component-splitting" tabindex="-1">Child component splitting <a class="header-anchor" href="#child-component-splitting" aria-label="Permalink to &quot;Child component splitting&quot;">​</a></h2><p>第二个技巧，子组件拆分，你可以查看这个<a href="https://vue-9-perf-secrets.netlify.app/bench/child" title="https://vue-9-perf-secrets.netlify.app/bench/child" target="_blank" rel="noreferrer">在线示例</a>。</p><p>优化前的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> :style</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ opacity: number / 300 }&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;{{ heavy() }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;number&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">		methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">			heavy</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					result</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sqrt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cos</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sin</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>优化后的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> :style</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ opacity: number / 300 }&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ChildComp</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			ChildComp</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">					heavy</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">						const</span><span style="color:#E5C07B;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">						let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">						for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">							result</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sqrt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cos</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sin</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">						}</span></span>
<span class="line"><span style="color:#C678DD;">						return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#61AFEF;">				render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">h</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#61AFEF;"> h</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">heavy</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;number&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>然后我们在父组件各渲染优化前后的组件 300 个，并在每一帧内部通过修改数据来触发组件的更新，开启 Chrome 的 Performance 面板记录它们的性能，得到如下结果。</p><p>优化前：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b0a76b6f8d246f88a54f09113ad5b60~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark3"></p><p>优化后：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eeabe26329304167abd019e282a25a9f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark4"></p><p>对比这两张图我们可以看到优化后执行 <code>script</code> 的时间要明显少于优化前的，因此性能体验更好。</p><p>那么为什么会有差异呢，我们来看优化前的组件，示例通过一个 <code>heavy</code> 函数模拟了一个耗时的任务，且这个函数在每次渲染的时候都会执行一次，所以每次组件的渲染都会消耗较长的时间执行 JavaScript。</p><p>而优化后的方式是把这个耗时任务 <code>heavy</code> 函数的执行逻辑用子组件 <code>ChildComp</code> 封装了，由于 Vue 的更新是组件粒度的，虽然每一帧都通过数据修改导致了父组件的重新渲染，但是 <code>ChildComp</code> 却不会重新渲染，因为它的内部也没有任何响应式数据的变化。所以优化后的组件不会在每次渲染都执行耗时任务，自然执行的 JavaScript 时间就变少了。</p><p>不过针对这个优化的方式我提出了一些不同的看法，详情可以点开这个 <a href="https://github.com/Akryum/vue-9-perf-secrets/issues/1" title="https://github.com/Akryum/vue-9-perf-secrets/issues/1" target="_blank" rel="noreferrer">issue</a>，我认为这个场景下的优化用计算属性要比子组件拆分要好。得益于计算属性自身缓存特性，耗时的逻辑也只会在第一次渲染的时候执行，而且使用计算属性也没有额外渲染子组件的开销。</p><p>在实际工作中，使用计算属性是优化性能的场景会有很多，毕竟它也体现了一种空间换时间的优化思想。</p><h2 id="local-variables" tabindex="-1">Local variables <a class="header-anchor" href="#local-variables" aria-label="Permalink to &quot;Local variables&quot;">​</a></h2><p>第三个技巧，局部变量，你可以查看这个<a href="https://vue-9-perf-secrets.netlify.app/bench/local-var" title="https://vue-9-perf-secrets.netlify.app/bench/local-var" target="_blank" rel="noreferrer">在线示例</a>。</p><p>优化前的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> :style</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ opacity: start / 300 }&quot;</span><span style="color:#ABB2BF;">&gt;{{ result }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;start&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">		computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">			base</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> 42</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#61AFEF;">			result</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					result</span><span style="color:#56B6C2;"> +=</span></span>
<span class="line"><span style="color:#E5C07B;">						Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sqrt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cos</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#ABB2BF;">))) </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#E5C07B;">						this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#56B6C2;"> *</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E5C07B;">						this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E5C07B;">						this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E5C07B;">						this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">base</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>优化后的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> :style</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ opacity: start / 300 }&quot;</span><span style="color:#ABB2BF;">&gt;{{ result }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {  </span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;start&#39;</span><span style="color:#ABB2BF;">],  </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">: {    </span><span style="color:#61AFEF;">base</span><span style="color:#ABB2BF;"> () {      </span><span style="color:#C678DD;">return</span><span style="color:#D19A66;"> 42</span></span>
<span class="line"><span style="color:#ABB2BF;">	    },    </span><span style="color:#61AFEF;">result</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;font-style:italic;">base</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">start</span><span style="color:#ABB2BF;"> }) {      </span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> start</span><span style="color:#61AFEF;">      for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {        result += Math.sqrt(Math.cos(Math.sin(base))) + base * base + base + base * </span><span style="color:#D19A66;">2</span><span style="color:#E06C75;"> + base * </span><span style="color:#D19A66;">3</span></span>
<span class="line"><span style="color:#ABB2BF;">	      }      </span><span style="color:#E06C75;">return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">    },  },}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>然后我们在父组件各渲染优化前后的组件 300 个，并在每一帧内部通过修改数据来触发组件的更新，开启 Chrome 的 Performance 面板记录它们的性能，得到如下结果。</p><p>优化前：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08d6ca9cf22a4e40ae0e5edc93ac1279~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark5"></p><p>优化后：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b08a4cdd60894db6a4e536a6c7160e0e~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark6"></p><p>对比这两张图我们可以看到优化后执行 <code>script</code> 的时间要明显少于优化前的，因此性能体验更好。</p><p>这里主要是优化前后的组件的计算属性 <code>result</code> 的实现差异，优化前的组件多次在计算过程中访问 <code>this.base</code>，而优化后的组件会在计算前先用局部变量 <code>base</code>，缓存 <code>this.base</code>，后面直接访问 <code>base</code>。</p><p>那么为啥这个差异会造成性能上的差异呢，原因是你每次访问 <code>this.base</code> 的时候，由于 <code>this.base</code> 是一个响应式对象，所以会触发它的 <code>getter</code>，进而会执行依赖收集相关逻辑代码。类似的逻辑执行多了，像示例这样，几百次循环更新几百个组件，每个组件触发 <code>computed</code> 重新计算，然后又多次执行依赖收集相关逻辑，性能自然就下降了。</p><p>从需求上来说，<code>this.base</code> 执行一次依赖收集就够了，把它的 <code>getter</code> 求值结果返回给局部变量 <code>base</code>，后续再次访问 <code>base</code> 的时候就不会触发 <code>getter</code>，也不会走依赖收集的逻辑了，性能自然就得到了提升。</p><p>这是一个非常实用的性能优化技巧。因为很多人在开发 Vue.js 项目的时候，每当取变量的时候就习惯性直接写 <code>this.xxx</code> 了，因为大部分人并不会注意到访问 <code>this.xxx</code> 背后做的事情。在访问次数不多的时候，性能问题并没有凸显，但是一旦访问次数变多，比如在一个大循环中多次访问，类似示例这种场景，就会产生性能问题了。</p><p>我之前给 ZoomUI 的 Table 组件做性能优化的时候，在 <code>render table body</code> 的时候就使用了局部变量的优化技巧，并写了 benchmark 做性能对比：渲染 1000 * 10 的表格，ZoomUI Table 的更新数据重新渲染的性能要比 ElementUI 的 Table 性能提升了近一倍。</p><h2 id="reuse-dom-with-v-show" tabindex="-1">Reuse DOM with v-show <a class="header-anchor" href="#reuse-dom-with-v-show" aria-label="Permalink to &quot;Reuse DOM with v-show&quot;">​</a></h2><p>第四个技巧，使用 <code>v-show</code> 复用 DOM，你可以查看这个<a href="https://vue-9-perf-secrets.netlify.app/bench/hide" title="https://vue-9-perf-secrets.netlify.app/bench/hide" target="_blank" rel="noreferrer">在线示例</a>。</p><p>优化前的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> functional</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;cell&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;props.value&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;on&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">Heavy</span><span style="color:#D19A66;"> :n</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;10000&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">section</span><span style="color:#D19A66;"> v-else</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;off&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">Heavy</span><span style="color:#D19A66;"> :n</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;10000&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">section</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>优化后的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> functional</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;cell&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-show</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;props.value&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;on&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">Heavy</span><span style="color:#D19A66;"> :n</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;10000&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">section</span><span style="color:#D19A66;"> v-show</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;!props.value&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;off&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">Heavy</span><span style="color:#D19A66;"> :n</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;10000&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">section</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>然后我们在父组件各渲染优化前后的组件 200 个，并在每一帧内部通过修改数据来触发组件的更新，开启 Chrome 的 Performance 面板记录它们的性能，得到如下结果。</p><p>优化前：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6572d2ab8f647a8a24e8f8c95320288~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark7"></p><p>优化后：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/350cd2452aae4455a24c441bcc25f886~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark8"></p><p>对比这两张图我们可以看到优化后执行 <code>script</code> 的时间要明显少于优化前的，因此性能体验更好。</p><p>优化前后的主要区别是用 <code>v-show</code> 指令替代了 <code>v-if</code> 指令来替代组件的显隐，虽然从表现上看，<code>v-show</code> 和 <code>v-if</code> 类似，都是控制组件的显隐，但内部实现差距还是很大的。</p><p><code>v-if</code> 指令在编译阶段就会编译成一个三元运算符，条件渲染，比如优化前的组件模板经过编译后生成如下渲染函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	with</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;div&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#E06C75;">				staticClass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cell&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			[</span></span>
<span class="line"><span style="color:#E5C07B;">				props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span></span>
<span class="line"><span style="color:#C678DD;">					?</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">							&quot;div&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">							{</span></span>
<span class="line"><span style="color:#E06C75;">								staticClass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;on&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">							},</span></span>
<span class="line"><span style="color:#ABB2BF;">							[</span></span>
<span class="line"><span style="color:#61AFEF;">								_c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Heavy&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">									attrs</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">										n</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">									},</span></span>
<span class="line"><span style="color:#ABB2BF;">								}),</span></span>
<span class="line"><span style="color:#ABB2BF;">							],</span></span>
<span class="line"><span style="color:#D19A66;">							1</span></span>
<span class="line"><span style="color:#ABB2BF;">					  )</span></span>
<span class="line"><span style="color:#C678DD;">					:</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">							&quot;section&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">							{</span></span>
<span class="line"><span style="color:#E06C75;">								staticClass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;off&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">							},</span></span>
<span class="line"><span style="color:#ABB2BF;">							[</span></span>
<span class="line"><span style="color:#61AFEF;">								_c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Heavy&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">									attrs</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">										n</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">									},</span></span>
<span class="line"><span style="color:#ABB2BF;">								}),</span></span>
<span class="line"><span style="color:#ABB2BF;">							],</span></span>
<span class="line"><span style="color:#D19A66;">							1</span></span>
<span class="line"><span style="color:#ABB2BF;">					  ),</span></span>
<span class="line"><span style="color:#ABB2BF;">			]</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>当条件 <code>props.value</code> 的值变化的时候，会触发对应的组件更新，对于 <code>v-if</code> 渲染的节点，由于新旧节点 <code>vnode</code> 不一致，在核心 diff 算法比对过程中，会移除旧的 <code>vnode</code> 节点，创建新的 <code>vnode</code> 节点，那么就会创建新的 <code>Heavy</code> 组件，又会经历 <code>Heavy</code> 组件自身初始化、渲染 <code>vnode</code>、<code>patch</code> 等过程。</p><p>因此使用 <code>v-if</code> 每次更新组件都会创建新的 <code>Heavy</code> 子组件，当更新的组件多了，自然就会造成性能压力。</p><p>而当我们使用 <code>v-show</code> 指令，优化后的组件模板经过编译后生成如下渲染函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	with</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> _c</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;div&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#E06C75;">				staticClass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cell&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">			[</span></span>
<span class="line"><span style="color:#61AFEF;">				_c</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">					&quot;div&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">					{</span></span>
<span class="line"><span style="color:#E06C75;">						directives</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">							{</span></span>
<span class="line"><span style="color:#E06C75;">								name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;show&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">								rawName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;v-show&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">								value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">								expression</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;props.value&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">							},</span></span>
<span class="line"><span style="color:#ABB2BF;">						],</span></span>
<span class="line"><span style="color:#E06C75;">						staticClass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;on&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">					[</span></span>
<span class="line"><span style="color:#61AFEF;">						_c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Heavy&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">							attrs</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">								n</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">							},</span></span>
<span class="line"><span style="color:#ABB2BF;">						}),</span></span>
<span class="line"><span style="color:#ABB2BF;">					],</span></span>
<span class="line"><span style="color:#D19A66;">					1</span></span>
<span class="line"><span style="color:#ABB2BF;">				),</span></span>
<span class="line"><span style="color:#61AFEF;">				_c</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">					&quot;section&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">					{</span></span>
<span class="line"><span style="color:#E06C75;">						directives</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">							{</span></span>
<span class="line"><span style="color:#E06C75;">								name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;show&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">								rawName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;v-show&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">								value</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">								expression</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;!props.value&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">							},</span></span>
<span class="line"><span style="color:#ABB2BF;">						],</span></span>
<span class="line"><span style="color:#E06C75;">						staticClass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;off&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">					[</span></span>
<span class="line"><span style="color:#61AFEF;">						_c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Heavy&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">							attrs</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">								n</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">							},</span></span>
<span class="line"><span style="color:#ABB2BF;">						}),</span></span>
<span class="line"><span style="color:#ABB2BF;">					],</span></span>
<span class="line"><span style="color:#D19A66;">					1</span></span>
<span class="line"><span style="color:#ABB2BF;">				),</span></span>
<span class="line"><span style="color:#ABB2BF;">			]</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>当条件 <code>props.value</code> 的值变化的时候，会触发对应的组件更新，对于 <code>v-show</code> 渲染的节点，由于新旧 <code>vnode</code> 一致，它们只需要一直 <code>patchVnode</code> 即可，那么它又是怎么让 DOM 节点显示和隐藏的呢？</p><p>原来在 <code>patchVnode</code> 过程中，内部会对执行 <code>v-show</code> 指令对应的钩子函数 <code>update</code>，然后它会根据 <code>v-show</code> 指令绑定的值来设置它作用的 DOM 元素的 <code>style.display</code> 的值控制显隐。</p><p>因此相比于 <code>v-if</code> 不断删除和创建函数新的 DOM，<code>v-show</code> 仅仅是在更新现有 DOM 的显隐值，所以 <code>v-show</code> 的开销要比 <code>v-if</code> 小的多，当其内部 DOM 结构越复杂，性能的差异就会越大。</p><p>但是 <code>v-show</code> 相比于 <code>v-if</code> 的性能优势是在组件的更新阶段，如果仅仅是在初始化阶段，<code>v-if</code> 性能还要高于 <code>v-show</code>，原因是在于它仅仅会渲染一个分支，而 <code>v-show</code> 把两个分支都渲染了，通过 <code>style.display</code> 来控制对应 DOM 的显隐。</p><p>在使用 <code>v-show</code> 的时候，所有分支内部的组件都会渲染，对应的生命周期钩子函数都会执行，而使用 <code>v-if</code> 的时候，没有命中的分支内部的组件是不会渲染的，对应的生命周期钩子函数都不会执行。</p><p>因此你要搞清楚它们的原理以及差异，才能在不同的场景使用适合的指令。</p><h2 id="keepalive" tabindex="-1">KeepAlive <a class="header-anchor" href="#keepalive" aria-label="Permalink to &quot;KeepAlive&quot;">​</a></h2><p>第五个技巧，使用 <code>KeepAlive</code> 组件缓存 DOM，你可以查看这个<a href="https://vue-9-perf-secrets.netlify.app/bench/keep-alive/" title="https://vue-9-perf-secrets.netlify.app/bench/keep-alive/" target="_blank" rel="noreferrer">在线示例</a>。</p><p>优化前的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>优化后的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">router-view</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">keep-alive</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>我们点击按钮在 Simple page 和 Heavy Page 之间切换，会渲染不同的视图，其中 Heavy Page 的渲染非常耗时。我们开启 Chrome 的 Performance 面板记录它们的性能，然后分别在优化前后执行如上的操作，会得到如下结果。</p><p>优化前：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3f7a60981d44d268f801b8d752815d1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark9"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c1d249d0d0149d587b8a94ecd1d37eb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark10"></p><p>优化后：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8da716157c8045c3a189526f37d2c1ac~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark11"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7470877578c84caf82996a45ebc965f6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark12"></p><p>对比这两张图我们可以看到优化后执行 <code>script</code> 的时间要明显少于优化前的，因此性能体验更好。</p><p>在非优化场景下，我们每次点击按钮切换路由视图，都会重新渲染一次组件，渲染组件就会经过组件初始化，<code>render</code>、<code>patch</code> 等过程，如果组件比较复杂，或者嵌套较深，那么整个渲染耗时就会很长。</p><p>而在使用 <code>KeepAlive</code> 后，被 <code>KeepAlive</code> 包裹的组件在经过第一次渲染后，的 <code>vnode</code> 以及 DOM 都会被缓存起来，然后再下一次再次渲染该组件的时候，直接从缓存中拿到对应的 <code>vnode</code> 和 DOM，然后渲染，并不需要再走一次组件初始化，<code>render</code> 和 <code>patch</code> 等一系列流程，减少了 <code>script</code> 的执行时间，性能更好。</p><p>但是使用 <code>KeepAlive</code> 组件并非没有成本，因为它会占用更多的内存去做缓存，这是一种典型的空间换时间优化思想的应用。</p><h2 id="deferred-features" tabindex="-1">Deferred features <a class="header-anchor" href="#deferred-features" aria-label="Permalink to &quot;Deferred features&quot;">​</a></h2><p>第六个技巧，使用 <code>Deferred</code> 组件延时分批渲染组件，你可以查看这个<a href="https://vue-9-perf-secrets.netlify.app/bench/deferred" title="https://vue-9-perf-secrets.netlify.app/bench/deferred" target="_blank" rel="noreferrer">在线示例</a>。</p><p>优化前的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;deferred-off&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">VueIcon</span><span style="color:#D19A66;"> icon</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;fitness_center&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;gigantic&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;I&#39;m an heavy page&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">Heavy</span><span style="color:#D19A66;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;n in 8&quot;</span><span style="color:#D19A66;"> :key</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;n&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">Heavy</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;super-heavy&quot;</span><span style="color:#D19A66;"> :n</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;9999999&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>优化后的组件代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;deferred-on&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">VueIcon</span><span style="color:#D19A66;"> icon</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;fitness_center&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;gigantic&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;I&#39;m an heavy page&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;defer(2)&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">Heavy</span><span style="color:#D19A66;"> v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;n in 8&quot;</span><span style="color:#D19A66;"> :key</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;n&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">Heavy</span><span style="color:#D19A66;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;defer(3)&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;super-heavy&quot;</span><span style="color:#D19A66;"> :n</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;9999999&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	import</span><span style="color:#E06C75;"> Defer</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;@/mixins/Defer&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">Defer</span><span style="color:#ABB2BF;">()] };</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>我们点击按钮在 Simple page 和 Heavy Page 之间切换，会渲染不同的视图，其中 Heavy Page 的渲染非常耗时。我们开启 Chrome 的 Performance 面板记录它们的性能，然后分别在优化前后执行如上的操作，会得到如下结果。</p><p>优化前：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3ee73d2f8c64f8bbd90579ce81b67d7~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark13"></p><p>优化后：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c341c560d4a4c7897565b2fb9ae9d73~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark14"></p><p>对比这两张图我们可以发现，优化前当我们从 Simple Page 切到 Heavy Page 的时候，在一次 Render 接近结尾的时候，页面渲染的仍然是 Simple Page，会给人一种页面卡顿的感觉。而优化后当我们从 Simple Page 切到 Heavy Page 的时候，在一次 Render 靠前的位置页面就已经渲染了 Heavy Page 了，并且 Heavy Page 是渐进式渲染出来的。</p><p>优化前后的差距主要是后者使用了 <code>Defer</code> 这个 <code>mixin</code>，那么它具体是怎么工作的，我们来一探究竟：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				displayPriority</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">runDisplayPriority</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">		methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">			runDisplayPriority</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#61AFEF;"> step</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					requestAnimationFrame</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">						this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">displayPriority</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">						if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">displayPriority</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">							step</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">						}</span></span>
<span class="line"><span style="color:#ABB2BF;">					});</span></span>
<span class="line"><span style="color:#ABB2BF;">				};</span></span>
<span class="line"><span style="color:#61AFEF;">				step</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">			defer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">priority</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">displayPriority</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#E06C75;"> priority</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p><code>Defer</code> 的主要思想就是把一个组件的一次渲染拆成多次，它内部维护了 <code>displayPriority</code> 变量，然后在通过 <code>requestAnimationFrame</code> 在每一帧渲染的时候自增，最多加到 <code>count</code>。然后使用 <code>Defer mixin</code> 的组件内部就可以通过 <code>v-if=&quot;defer(xxx)&quot;</code> 的方式来控制在 <code>displayPriority</code> 增加到 <code>xxx</code> 的时候渲染某些区块了。</p><p>当你有渲染耗时的组件，使用 <code>Deferred</code> 做渐进式渲染是不错的注意，它能避免一次 <code>render</code> 由于 JS 执行时间过长导致渲染卡住的现象。</p><h2 id="time-slicing" tabindex="-1">Time slicing <a class="header-anchor" href="#time-slicing" aria-label="Permalink to &quot;Time slicing&quot;">​</a></h2><p>第七个技巧，使用 <code>Time slicing</code> 时间片切割技术，你可以查看这个<a href="https://vue-9-perf-secrets.netlify.app/bench/fetch-items" title="https://vue-9-perf-secrets.netlify.app/bench/fetch-items" target="_blank" rel="noreferrer">在线示例</a>。</p><p>优化前的代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fetchItems</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;">commit</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#61AFEF;">  commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;clearItems&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">  commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;addItems&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>优化后的代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fetchItems</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;">commit</span><span style="color:#ABB2BF;"> }, { </span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">splitCount</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#61AFEF;">  commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;clearItems&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> queue</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> JobQueue</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">  splitArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">items</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">splitCount</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    chunk</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addJob</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">done</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 分时间片提交数据</span></span>
<span class="line"><span style="color:#61AFEF;">      requestAnimationFrame</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;addItems&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">chunk</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">        done</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      })</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>我们先通过点击 <code>Genterate items</code> 按钮创建 10000 条假数据，然后分别在开启和关闭 <code>Time-slicing</code> 的情况下点击 <code>Commit items</code> 按钮提交数据，开启 Chrome 的 Performance 面板记录它们的性能，会得到如下结果。</p><p>优化前：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0e8d91db10e04e4a8992343227e52eaa~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark15"></p><p>优化后：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5703007e2ab47ccba80107166fce5b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark16"></p><p>对比这两张图我们可以发现，优化前总的 <code>script</code> 执行时间要比优化后的还要少一些，但是从实际的观感上看，优化前点击提交按钮，页面会卡死 1.2 秒左右，在优化后，页面不会完全卡死，但仍然会有渲染卡顿的感觉。</p><p>那么为什么在优化前页面会卡死呢？因为一次性提交的数据过多，内部 JS 执行时间过长，阻塞了 UI 线程，导致页面卡死。</p><p>优化后，页面仍有卡顿，是因为我们拆分数据的粒度是 1000 条，这种情况下，重新渲染组件仍然有压力，我们观察 fps 只有十几，会有卡顿感。通常只要让页面的 fps 达到 60，页面就会非常流畅，如果我们把数据拆分粒度变成 100 条，基本上 fps 能达到 50 以上，虽然页面渲染变流畅了，但是完成 10000 条数据总的提交时间还是变长了。</p><p>使用 <code>Time slicing</code> 技术可以避免页面卡死，通常我们在这种耗时任务处理的时候会加一个 loading 效果，在这个示例中，我们可以开启 <code>loading animation</code>，然后提交数据。对比发现，优化前由于一次性提交数据过多，JS 一直长时间运行，阻塞 UI 线程，这个 loading 动画是不会展示的，而优化后，由于我们拆成多个时间片去提交数据，单次 JS 运行时间变短了，这样 loading 动画就有机会展示了。</p><blockquote><p>这里要注意的一点，虽然我们拆时间片使用了 <code>requestAnimationFrame</code> API，但是使用 <code>requestAnimationFrame</code> 本身是不能保证满帧运行的，<code>requestAnimationFrame</code> 保证的是在浏览器每一次重绘后会执行对应传入的回调函数，想要保证满帧，只能让 JS 在一个 Tick 内的运行时间不超过 17ms。</p></blockquote><h2 id="non-reactive-data" tabindex="-1">Non-reactive data <a class="header-anchor" href="#non-reactive-data" aria-label="Permalink to &quot;Non-reactive data&quot;">​</a></h2><p>第八个技巧，使用 <code>Non-reactive data</code> 非响应式数据，你可以查看这个<a href="https://vue-9-perf-secrets.netlify.app/bench/fetch-items" title="https://vue-9-perf-secrets.netlify.app/bench/fetch-items" target="_blank" rel="noreferrer">在线示例</a>。</p><p>优化前代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">uid</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	vote</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>优化后代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> optimizeItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> optimizeItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> itemData</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		id</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">uid</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		vote</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">itemData</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;data&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Mark as non-reactive</span></span>
<span class="line"><span style="color:#E06C75;">		configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> itemData</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>还是前面的示例，我们先通过点击 <code>Genterate items</code> 按钮创建 10000 条假数据，然后分别在开启和关闭 <code>Partial reactivity</code> 的情况下点击 <code>Commit items</code> 按钮提交数据，开启 Chrome 的 Performance 面板记录它们的性能，会得到如下结果。</p><p>优化前：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eacf438389084a5f89869a5247b0b966~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark17"></p><p>优化后：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d4f407d94b8470184721473028890b1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark18"></p><p>对比这两张图我们可以看到优化后执行 <code>script</code> 的时间要明显少于优化前的，因此性能体验更好。</p><p>之所以有这种差异，是因为内部提交的数据的时候，会默认把新提交的数据也定义成响应式，如果数据的子属性是对象形式，还会递归让子属性也变成响应式，因此当提交数据很多的时候，这个过程就变成了一个耗时过程。</p><p>而优化后我们把新提交的数据中的对象属性 <code>data</code> 手动变成了 <code>configurable</code> 为 <code>false</code>，这样内部在 <code>walk</code> 时通过 <code>Object.keys(obj)</code> 获取对象属性数组会忽略 <code>data</code>，也就不会为 <code>data</code> 这个属性 <code>defineReactive</code>，由于 <code>data</code> 指向的是一个对象，这样也就会减少递归响应式的逻辑，相当于减少了这部分的性能损耗。数据量越大，这种优化的效果就会更明显。</p><p>其实类似这种优化的方式还有很多，比如我们在组件中定义的一些数据，也不一定都要在 <code>data</code> 中定义。有些数据我们并不是用在模板中，也不需要监听它的变化，只是想在组件的上下文中共享这个数据，这个时候我们可以仅仅把这个数据挂载到组件实例 <code>this</code> 上，例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	created</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scroll</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scroll</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BScroll</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$el</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这样我们就可以在组件上下文中共享 <code>scroll</code> 对象了，尽管它不是一个响应式对象。</p><h2 id="virtual-scrolling" tabindex="-1">Virtual scrolling <a class="header-anchor" href="#virtual-scrolling" aria-label="Permalink to &quot;Virtual scrolling&quot;">​</a></h2><p>第九个技巧，使用 <code>Virtual scrolling</code> 虚拟滚动组件，你可以查看这个<a href="https://vue-9-perf-secrets.netlify.app/bench/fetch-items" title="https://vue-9-perf-secrets.netlify.app/bench/fetch-items" target="_blank" rel="noreferrer">在线示例</a>。</p><p>优化前组件的代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;items no-v&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">FetchItemViewFunctional</span></span>
<span class="line"><span style="color:#D19A66;">		v-for</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item of items&quot;</span></span>
<span class="line"><span style="color:#D19A66;">		:key</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item.id&quot;</span></span>
<span class="line"><span style="color:#D19A66;">		:item</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item&quot;</span></span>
<span class="line"><span style="color:#D19A66;">		@vote</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;voteItem(item)&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>优化后代码如下：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">recycle-scroller</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;items&quot;</span><span style="color:#D19A66;"> :items</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;items&quot;</span><span style="color:#D19A66;"> :item-size</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;24&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">template</span><span style="color:#D19A66;"> v-slot</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{ item }&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">FetchItemView</span><span style="color:#D19A66;"> :item</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;item&quot;</span><span style="color:#D19A66;"> @vote</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;voteItem(item)&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">recycle-scroller</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>还是前面的示例，我们需要开启 <code>View list</code>，然后点击 <code>Genterate items</code> 按钮创建 10000 条假数据（注意，线上示例最多只能创建 1000 条数据，实际上 1000 条数据并不能很好地体现优化的效果，所以我修改了源码的限制，本地运行，创建了 10000 条数据），然后分别在 <code>Unoptimized</code> 和 <code>RecycleScroller</code> 的情况下点击 <code>Commit items</code> 按钮提交数据，滚动页面，开启 Chrome 的 Performance 面板记录它们的性能，会得到如下结果。</p><p>优化前：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f3a130b890e444081394979a11c5752~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark19"></p><p>优化后：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28c2abc800ee4caf9f5529e83370ba3d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark20"></p><p>对比这两张图我们发现，在非优化的情况下，10000 条数据在滚动情况下 fps 只有个位数，在非滚动情况下也就十几，原因是非优化场景下渲染的 DOM 太多，渲染本身的压力很大。优化后，即使 10000 条数据，在滚动情况下的 fps 也能有 30 多，在非滚动情况下可以达到 60 满帧。</p><p>之所以有这个差异，是因为虚拟滚动的实现方式，是只渲染视口内的 DOM，这样总共渲染的 DOM 数量就很少了，自然性能就会好很多。</p><p>虚拟滚动组件也是 <a href="https://github.com/Akryum" title="https://github.com/Akryum" target="_blank" rel="noreferrer">Guillaume Chau</a> 写的，感兴趣的同学可以去研究它的<a href="https://github.com/Akryum/vue-virtual-scroller" title="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noreferrer">源码实现</a>。它的基本原理就是监听滚动事件，动态更新需要显示的 DOM 元素，计算出它们在视图中的位移。</p><p>虚拟滚动组件也并非没有成本，因为它需要在滚动的过程中实时去计算，所以会有一定的 <code>script</code> 执行的成本。因此如果列表的数据量不是很大的情况，我们使用普通的滚动就足够了。</p><hr><h2 id="vue-应用性能优化指南-vue-应用性能优化指南-掘金-juejin-cn" tabindex="-1">Vue 应用性能优化指南：<a href="https://juejin.cn/post/6844903677262561293" target="_blank" rel="noreferrer">Vue 应用性能优化指南 - 掘金 (juejin.cn)</a> <a class="header-anchor" href="#vue-应用性能优化指南-vue-应用性能优化指南-掘金-juejin-cn" aria-label="Permalink to &quot;Vue 应用性能优化指南：[Vue 应用性能优化指南 - 掘金 (juejin.cn)](https://juejin.cn/post/6844903677262561293)&quot;">​</a></h2><p>得益于 Vue 的 <strong>响应式系统</strong> 和 <strong>虚拟 DOM 系统</strong> ，Vue 在渲染组件的过程中能自动追踪数据的依赖，并精确知晓数据更新的时候哪个组件需要重新渲染，渲染之后也会经过虚拟 DOM diff 之后才会真正更新到 DOM 上，Vue 应用的开发者<strong>一般不需要</strong>做额外的优化工作。</p><p>但在实践中仍然有可能遇到性能问题，下面会介绍一些定位分析 Vue 应用性能问题的方式及一些优化的建议。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d789e70497~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="Vue 应用运行原理"></p><p>整体内容由三部分组成：</p><ul><li>如何定位 Vue 应用性能问题</li><li>Vue 应用运行时性能优化建议</li><li>Vue 应用加载性能优化建议</li></ul><h3 id="_1-如何定位-vue-应用性能问题" tabindex="-1">1. 如何定位 Vue 应用性能问题 <a class="header-anchor" href="#_1-如何定位-vue-应用性能问题" aria-label="Permalink to &quot;1. 如何定位 Vue 应用性能问题&quot;">​</a></h3><p>Vue 应用的性能问题可以分为两个部分，第一部分是运行时性能问题，第二部分是加载性能问题。</p><p>和其他 web 应用一样，定位 Vue 应用性能问题最好的工具是 Chrome Devtool，通过 Performance 工具可以用来录制一段时间的 CPU 占用、内存占用、FPS 等运行时性能问题，通过 Network 工具可以用来分析加载性能问题。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d789fc7786~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark21"></p><p>例如，通过 Performance 工具的 Bottom Up 标签我们可以看出一段时间内耗时最多的操作，这对于优化 CPU 占用和 FPS 过低非常有用，可以看出最为耗时的操作发生在哪里，可以知道具体函数的执行时间，定位到瓶颈之后，我们就可以做一些针对性的优化。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d7dc70634d~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark22"></p><p>更多 Chrome Devtool 使用方式请参考<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/" target="_blank" rel="noreferrer">使用 Chrome Devtool 定位性能问题 的指南</a></p><h3 id="_2-vue-应用运行时性能优化建议" tabindex="-1">2. Vue 应用运行时性能优化建议 <a class="header-anchor" href="#_2-vue-应用运行时性能优化建议" aria-label="Permalink to &quot;2. Vue 应用运行时性能优化建议&quot;">​</a></h3><p>运行时性能主要关注 Vue 应用初始化之后对 CPU、内存、本地存储等资源的占用，以及对用户交互的及时响应。下面是一些有用的优化手段：</p><h4 id="_2-1-引入生产环境的-vue-文件" tabindex="-1">2.1 引入生产环境的 Vue 文件 <a class="header-anchor" href="#_2-1-引入生产环境的-vue-文件" aria-label="Permalink to &quot;2.1 引入生产环境的 Vue 文件&quot;">​</a></h4><p>开发环境下，Vue 会提供很多警告来帮你对付常见的错误与陷阱。而在生产环境下，这些警告语句没有用，反而会增加应用的体积。有些警告检查还有一些小的<strong>运行时开销</strong>。</p><p>当使用 webpack 或 Browserify 类似的构建工具时，Vue 源码会根据 process.env.NODE_ENV 决定是否启用生产环境模式，默认情况为开发环境模式。在 webpack 与 Browserify 中都有方法来覆盖此变量，以启用 Vue 的生产环境模式，同时在构建过程中警告语句也会被压缩工具去除。</p><p>详细的做法请参阅 <a href="https://cn.vuejs.org/v2/guide/deployment.html" target="_blank" rel="noreferrer">生产环境部署</a></p><h4 id="_2-2-使用单文件组件预编译模板" tabindex="-1">2.2 使用单文件组件预编译模板 <a class="header-anchor" href="#_2-2-使用单文件组件预编译模板" aria-label="Permalink to &quot;2.2 使用单文件组件预编译模板&quot;">​</a></h4><p>当使用 DOM 内模板或 JavaScript 内的字符串模板时，模板会在<strong>运行时被编译为渲染函数</strong>。通常情况下这个过程已经足够快了，但<strong>对性能敏感的应用还是最好避免这种用法</strong>。</p><p>预编译模板最简单的方式就是使用<strong>单文件组件</strong>——相关的构建设置会自动把预编译处理好，所以构建好的代码已经包含了编译出来的渲染函数而不是原始的模板字符串。</p><p>详细的做法请参阅 <a href="https://cn.vuejs.org/v2/guide/deployment.html#%E6%A8%A1%E6%9D%BF%E9%A2%84%E7%BC%96%E8%AF%91" target="_blank" rel="noreferrer">预编译模板</a></p><h4 id="_2-3-提取组件的-css-到单独到文件" tabindex="-1">2.3 提取组件的 CSS 到单独到文件 <a class="header-anchor" href="#_2-3-提取组件的-css-到单独到文件" aria-label="Permalink to &quot;2.3 提取组件的 CSS 到单独到文件&quot;">​</a></h4><p>当使用单文件组件时，组件内的 CSS 会以 <code>&lt;style&gt;</code> 标签的方式通过 JavaScript 动态注入。这有一些小小的<strong>运行时开销</strong>，将所有组件的 CSS 提取到同一个文件可以避免这个问题，也会让 CSS 更好地进行压缩和缓存。</p><p>查阅这个构建工具各自的文档来了解更多：</p><ul><li><a href="https://vue-loader.vuejs.org/zh-cn/configurations/extract-css.html" target="_blank" rel="noreferrer">webpack + vue-loader</a> (<code>vue-cli</code> 的 webpack 模板已经预先配置好)</li><li><a href="https://github.com/vuejs/vueify#css-extraction" target="_blank" rel="noreferrer">Browserify + vueify</a></li><li><a href="https://vuejs.github.io/rollup-plugin-vue/#/en/2.3/?id=custom-handler" target="_blank" rel="noreferrer">Rollup + rollup-plugin-vue</a></li></ul><h4 id="_2-4-利用object-freeze-提升性能" tabindex="-1">2.4 利用<code>Object.freeze()</code>提升性能 <a class="header-anchor" href="#_2-4-利用object-freeze-提升性能" aria-label="Permalink to &quot;2.4 利用\`Object.freeze()\`提升性能&quot;">​</a></h4><p><code>Object.freeze()</code> 可以冻结一个对象，冻结之后不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。该方法返回被冻结的对象。</p><p>当你把一个普通的 JavaScript 对象传给 Vue 实例的  <code>data</code>  选项，Vue 将遍历此对象所有的属性，并使用  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">Object.defineProperty</a>  把这些属性全部转为 getter/setter，这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p><p>但 Vue 在遇到像 <code>Object.freeze()</code> 这样被设置为不可配置之后的对象属性时，不会为对象加上 setter getter 等数据劫持的方法。<a href="https://github.com/vuejs/vue/blob/v2.5.17/src/core/observer/index.js?1535281657346#L134" target="_blank" rel="noreferrer">参考 Vue 源码</a></p><p><strong>Vue observer 源码</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d7dc90f5c1~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark23"></p><h5 id="_2-4-1-性能提升效果对比" tabindex="-1">2.4.1 性能提升效果对比 <a class="header-anchor" href="#_2-4-1-性能提升效果对比" aria-label="Permalink to &quot;2.4.1 性能提升效果对比&quot;">​</a></h5><p>在基于 Vue 的一个 <a href="https://github.com/vuejs/vue/blob/v2.5.17/benchmarks/big-table/index.html?1535282017690" target="_blank" rel="noreferrer">big table benchmark</a> 里，可以看到在渲染一个一个 1000 x 10 的表格的时候，开启<code>Object.freeze()</code> 前后重新渲染的对比。</p><p><strong>big table benchmark</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d78d944dde~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark24"></p><p><strong>开启优化之前</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/11/165c5feaccc752d5~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark25"></p><p><strong>开启优化之后</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/11/165c5feadd555c81~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark26"></p><p>在这个例子里，<strong>使用了 <code>Object.freeze()</code>比不使用快了 4 倍</strong></p><h5 id="_2-4-2-为什么object-freeze-的性能会更好" tabindex="-1">2.4.2 为什么<code>Object.freeze()</code> 的性能会更好 <a class="header-anchor" href="#_2-4-2-为什么object-freeze-的性能会更好" aria-label="Permalink to &quot;2.4.2 为什么\`Object.freeze()\` 的性能会更好&quot;">​</a></h5><p><strong>不使用<code>Object.freeze()</code> 的 CPU 开销</strong></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d7c41b64bf~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark27"></p><p><strong>使用 <code>Object.freeze()</code>的 CPU 开销</strong></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d7fdffa474~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark28"></p><p>对比可以看出，使用了 <code>Object.freeze()</code> 之后，减少了 observer 的开销。</p><h5 id="_2-4-3-object-freeze-应用场景" tabindex="-1">2.4.3 <code>Object.freeze()</code>应用场景 <a class="header-anchor" href="#_2-4-3-object-freeze-应用场景" aria-label="Permalink to &quot;2.4.3 \`Object.freeze()\`应用场景&quot;">​</a></h5><p>由于 <code>Object.freeze()</code> 会把对象冻结，所以比较适合展示类的场景，如果你的数据属性需要改变，可以重新替换成一个新的 <code>Object.freeze()</code>的对象。</p><h4 id="_2-5-扁平化-store-数据结构" tabindex="-1">2.5 扁平化 Store 数据结构 <a class="header-anchor" href="#_2-5-扁平化-store-数据结构" aria-label="Permalink to &quot;2.5 扁平化 Store 数据结构&quot;">​</a></h4><p>很多时候，我们会发现接口返回的信息是如下的深层嵌套的树形结构：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;123&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;author&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Paul&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;title&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;My awesome blog post&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;comments&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;324&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;commenter&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Nicole&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>假如直接把这样的结构存储在 store 中，如果想修改某个 commenter 的信息，我们需要一层层去遍历找到这个用户的信息，同时有可能这个用户的信息出现了多次，还需要把其他地方的用户信息也进行修改，每次遍历的过程会带来额外的性能开销。</p><p>假设我们把用户信息在 store 内统一存放成 <code>users[id]</code>这样的结构，修改和读取用户信息的成本就变得非常低。</p><p>你可以手动去把接口里的信息通过类似数据的表一样像这样存起来，也可以借助一些工具，这里就需要提到一个概念叫做 <code>JSON数据规范化（normalize）</code>, Normalizr 是一个开源的工具，可以将上面的深层嵌套的 JSON 对象通过定义好的 schema 转变成使用 id 作为字典的实体表示的对象。</p><p>举个例子，针对上面的 JSON 数据，我们定义 <code>users</code> <code>comments</code> <code>articles</code> 三种 schema：</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">import {normalize, schema} from </span><span style="color:#98C379;">&#39;normalizr&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义 users schema</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> user </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Entity</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义 comments schema</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> comment </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Entity</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;comments&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  commenter: </span><span style="color:#ABB2BF;">user,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义 articles schema</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> article </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Entity</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;articles&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  author: </span><span style="color:#ABB2BF;">user,</span></span>
<span class="line"><span style="color:#61AFEF;">  comments: </span><span style="color:#ABB2BF;">[comment],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> normalizedData </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> normalize</span><span style="color:#ABB2BF;">(originalData,</span><span style="color:#ABB2BF;"> article);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>normalize 之后就可以得到下面的数据，我们可以按照这种形式存放在 store 中，之后想修改和读取某个 id 的用户信息就变得非常高效了，时间复杂度降低到了 O(1)。</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  result: </span><span style="color:#98C379;">&quot;123&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  entities: {</span></span>
<span class="line"><span style="color:#98C379;">    &quot;articles&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">      &quot;123&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        id: </span><span style="color:#98C379;">&quot;123&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        author: </span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        title: </span><span style="color:#98C379;">&quot;My awesome blog post&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        comments: [ </span><span style="color:#98C379;">&quot;324&quot;</span><span style="color:#ABB2BF;"> ]</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    &quot;</span><span style="color:#C678DD;">users&quot;:</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      &quot;1&quot;: { </span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Paul&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">      &quot;2&quot;</span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> { &quot;id&quot;: </span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Nicole&quot;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    &quot;</span><span style="color:#C678DD;">comments&quot;:</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      &quot;324&quot;: { id: </span><span style="color:#98C379;">&quot;324&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;commenter&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>需要了解更多请参考 normalizr 的文档 <a href="https://github.com/paularmstrong/normalizr" target="_blank" rel="noreferrer">https://github.com/paularmstrong/normalizr</a></p><h4 id="_2-6-避免持久化-store-数据带来的性能问题" tabindex="-1">2.6 避免持久化 Store 数据带来的性能问题 <a class="header-anchor" href="#_2-6-避免持久化-store-数据带来的性能问题" aria-label="Permalink to &quot;2.6 避免持久化 Store 数据带来的性能问题&quot;">​</a></h4><p>当你有让 Vue App 离线可用，或者有接口出错时候进行灾备的需求的时候，你可能会选择把 Store 数据进行持久化，这个时候需要注意以下几个方面：</p><h5 id="_2-6-1-持久化时写入数据的性能问题" tabindex="-1">2.6.1 持久化时写入数据的性能问题 <a class="header-anchor" href="#_2-6-1-持久化时写入数据的性能问题" aria-label="Permalink to &quot;2.6.1 持久化时写入数据的性能问题&quot;">​</a></h5><p>Vue 社区中比较流行的 vuex-persistedstate，利用了 store 的 subscribe 机制，来订阅 Store 数据的 mutation，如果发生了变化，就会写入 storage 中，默认用的是 localstorage 作为持久化存储。</p><p>也就是说默认情况下每次 commit 都会向 localstorage 写入数据，localstorage 写入是同步的，而且存在不小的性能开销，如果你想打造 60fps 的应用，就必须避免频繁写入持久化数据</p><p>下面是开发环境下通过 Performance 工具抓取的一个截图，可以看到出现了一次长达 6s 的卡顿：</p><p><strong>6 秒钟的卡顿</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d84795d172~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark29"></p><p>通过 Bottom-Up 可以看到 setState 占用了 3241.4ms 的 CPU 执行时间，而 setState 正是在向 Storage 写入数据。</p><p><strong>vuex-persistedstate setState 源码</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d847a933ca~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark30"></p><p>我们应该尽量减少直接写入 Storage 的频率：</p><ul><li>多次写入操作合并为一次，比如采用函数节流或者将数据先缓存在内存中，最后在一并写入</li><li>只有在必要的时候才写入，比如只有关心的模块的数据发生变化的时候才写入</li></ul><h5 id="_2-6-2-避免持久化存储的容量持续增长" tabindex="-1">2.6.2 避免持久化存储的容量持续增长 <a class="header-anchor" href="#_2-6-2-避免持久化存储的容量持续增长" aria-label="Permalink to &quot;2.6.2 避免持久化存储的容量持续增长&quot;">​</a></h5><p>由于持久化缓存的容量有限，比如 localstorage 的缓存在某些浏览器只有 5M，我们不能无限制的将所有数据都存起来，这样很容易达到容量限制，同时数据过大时，读取和写入操作会增加一些性能开销，同时内存也会上涨。</p><p>尤其是将 API 数据进行 normalize 数据扁平化后之后，会将一份数据散落在不同的实体上，下次请求到新的数据也会散落在其他不同的实体上，这样会带来持续的存储增长。</p><p>因此，当设计了一套持久化的数据缓存策略的时候，同时应该设计旧数据的缓存清除策略，例如请求到新数据的时候将旧的实体逐个进行清除。</p><h4 id="_2-7-优化无限列表性能" tabindex="-1">2.7 优化无限列表性能 <a class="header-anchor" href="#_2-7-优化无限列表性能" aria-label="Permalink to &quot;2.7 优化无限列表性能&quot;">​</a></h4><p>如果你的应用存在非常长或者无限滚动的列表，那么采用 <strong>窗口化</strong> 的技术来优化性能，只需要渲染少部分区域的内容，减少重新渲染组件和创建 dom 节点的时间。</p><p><a href="https://github.com/tangbc/vue-virtual-scroll-list" target="_blank" rel="noreferrer">vue-virtual-scroll-list</a> 和 <a href="https://github.com/Akryum/vue-virtual-scroller" target="_blank" rel="noreferrer">vue-virtual-scroller</a> 都是解决这类问题的开源项目。你也可以参考 Google 工程师的文章<a href="https://developers.google.com/web/updates/2016/07/infinite-scroller" target="_blank" rel="noreferrer">Complexities of an Infinite Scroller</a> 来尝试自己实现一个虚拟的滚动列表来优化性能，主要使用到的技术是 DOM 回收、墓碑元素和滚动锚定。</p><p><strong>Google 工程师绘制的无限列表设计</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d8478b24bf~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark：3024"></p><h4 id="_2-8-通过组件懒加载优化超长应用内容初始渲染性能" tabindex="-1">2.8 通过组件懒加载优化超长应用内容初始渲染性能 <a class="header-anchor" href="#_2-8-通过组件懒加载优化超长应用内容初始渲染性能" aria-label="Permalink to &quot;2.8 通过组件懒加载优化超长应用内容初始渲染性能&quot;">​</a></h4><p>上面提到的无限列表的场景，比较适合列表内元素非常相似的情况，不过有时候，你的 Vue 应用的超长列表内的内容往往不尽相同，例如在一个复杂的应用的主界面中，整个主界面由非常多不同的模块组成，而用户看到的往往只有首屏一两个模块。在初始渲染的时候不可见区域的模块也会执行和渲染，带来一些额外的性能开销。</p><p><strong>使用组件懒加载在不可见时只需要渲染一个骨架屏，不需要真正渲染组件</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/11/165c5feaf23067e1~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="image"></p><p>你可以对组件直接进行懒加载，对于不可见区域的组件内容，直接不进行加载和初始化，避免初始化渲染运行时的开销。具体可以参考我们之前的专栏文章 <a href="https://juejin.cn/post/6844903496102199304" target="_blank" rel="noreferrer">性能优化之组件懒加载: Vue Lazy Component 介绍</a>，了解如何做到组件粒度的懒加载。</p><h3 id="_3-vue-应用加载性能优化建议" tabindex="-1">3. Vue 应用加载性能优化建议 <a class="header-anchor" href="#_3-vue-应用加载性能优化建议" aria-label="Permalink to &quot;3. Vue 应用加载性能优化建议&quot;">​</a></h3><h4 id="_3-1-利用服务端渲染-ssr-和预渲染-prerender-来优化加载性能" tabindex="-1">3.1 利用服务端渲染（SSR）和预渲染（Prerender）来优化加载性能 <a class="header-anchor" href="#_3-1-利用服务端渲染-ssr-和预渲染-prerender-来优化加载性能" aria-label="Permalink to &quot;3.1 利用服务端渲染（SSR）和预渲染（Prerender）来优化加载性能&quot;">​</a></h4><p>在一个单页应用中，往往只有一个 html 文件，然后根据访问的 url 来匹配对应的路由脚本，动态地渲染页面内容。单页应用比较大的问题是首屏可见时间过长。</p><p>单页面应用显示一个页面会发送多次请求，第一次拿到 html 资源，然后通过请求再去拿数据，再将数据渲染到页面上。而且由于现在微服务架构的存在，还有可能发出多次数据请求才能将网页渲染出来，每次数据请求都会产生 RTT（往返时延），会导致加载页面的时间拖的很长。</p><p><strong>服务端渲染、预渲染和客户端渲染的对比</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/10/165c22d84c84cebf~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark31"></p><p>这种情况下可以采用服务端渲染（SSR）和预渲染（Prerender）来提升加载性能，这两种方案，用户读取到的直接就是网页内容，由于少了节省了很多 RTT（往返时延），同时，还可以对一些资源内联在页面，可以进一步提升加载的性能。</p><p>可以参考我们的专栏文章 <a href="https://juejin.cn/post/6844903503362523143" target="_blank" rel="noreferrer">优化向：单页应用多路由预渲染指南</a> 了解如何利用预渲染进行优化。</p><p>服务端渲染（SSR）可以考虑使用 Nuxt 或者按照 Vue 官方提供的 <a href="https://ssr.vuejs.org/zh/" target="_blank" rel="noreferrer">Vue SSR 指南</a>来一步步搭建。</p><h4 id="_3-2-通过组件懒加载优化超长应用内容加载性能" tabindex="-1">3.2 通过组件懒加载优化超长应用内容加载性能 <a class="header-anchor" href="#_3-2-通过组件懒加载优化超长应用内容加载性能" aria-label="Permalink to &quot;3.2 通过组件懒加载优化超长应用内容加载性能&quot;">​</a></h4><p>在上面提到的超长应用内容的场景中，通过组件懒加载方案可以优化初始渲染的运行性能，其实，这对于优化应用的加载性能也很有帮助。</p><p>组件粒度的懒加载结合异步组件和 webpack 代码分片，可以保证按需加载组件，以及组件依赖的资源、接口请求等，比起通常单纯的对图片进行懒加载，更进一步的做到了按需加载资源。</p><p><strong>使用组件懒加载之前的请求瀑布图</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/11/165c5feb03e51a44~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark32"></p><p><strong>使用组件懒加载之后的请求瀑布图</strong>：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/9/11/165c5feb14c9cd5c~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="bpfcp-zoom-in-crop-mark33"></p><p>使用组件懒加载方案对于超长内容的应用初始化渲染很有帮助，可以减少大量必要的资源请求，缩短渲染关键路径，具体做法请参考我们之前的专栏文章 <a href="https://juejin.cn/post/6844903496102199304" target="_blank" rel="noreferrer">性能优化之组件懒加载: Vue Lazy Component 介绍</a>。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>本文总结了 Vue 应用运行时以及加载时的一些性能优化措施，下面做一个回顾和概括：</p><ul><li><p>Vue 应用运行时性能优化措施</p><ul><li>引入生产环境的 Vue 文件</li><li>使用单文件组件预编译模板</li><li>提取组件的 CSS 到单独到文件</li><li>利用<code>Object.freeze()</code>提升性能</li><li>扁平化 Store 数据结构</li><li>合理使用持久化 Store 数据</li><li>组件懒加载</li></ul></li><li><p>Vue 应用加载性能优化措施</p><ul><li>服务端渲染 / 预渲染</li><li>组件懒加载</li></ul></li></ul>`,268)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
