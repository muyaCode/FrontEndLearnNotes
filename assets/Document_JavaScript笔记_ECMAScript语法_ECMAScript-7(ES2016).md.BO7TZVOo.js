import{_ as a,c as n,o as l,ah as o}from"./chunks/framework.DqD713j2.js";const d=JSON.parse('{"title":"ECMAScript-7(ES2016)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-7(ES2016).md","filePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-7(ES2016).md","lastUpdated":1750954157000}'),p={name:"Document/JavaScript笔记/ECMAScript语法/ECMAScript-7(ES2016).md"};function e(r,s,t,c,B,i){return l(),n("div",null,s[0]||(s[0]=[o(`<h1 id="ecmascript-7-es2016" tabindex="-1">ECMAScript-7(ES2016) <a class="header-anchor" href="#ecmascript-7-es2016" aria-label="Permalink to &quot;ECMAScript-7(ES2016)&quot;">​</a></h1><h2 id="提案" tabindex="-1">提案 <a class="header-anchor" href="#提案" aria-label="Permalink to &quot;提案&quot;">​</a></h2><h2 id="array-prototype-includes" tabindex="-1">Array.prototype.includes() <a class="header-anchor" href="#array-prototype-includes" aria-label="Permalink to &quot;Array.prototype.includes()&quot;">​</a></h2><h3 id="检测数组中是否包含某个值-返回布尔类型值" tabindex="-1">检测数组中是否包含某个值，返回布尔类型值 <a class="header-anchor" href="#检测数组中是否包含某个值-返回布尔类型值" aria-label="Permalink to &quot;检测数组中是否包含某个值，返回布尔类型值&quot;">​</a></h3><ul><li>和ES5的indexOf()方法相似，不过返回值不一样</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 语法</span></span>
<span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">valueToFind</span><span style="color:#ABB2BF;">[, </span><span style="color:#E06C75;">fromIndex</span><span style="color:#ABB2BF;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>valueToFind</code>，需要查找的元素值。</li><li><code>fromIndex</code> 可选 从<code>fromIndex</code> 索引处开始查找 <code>valueToFind</code>。如果为负值（即从末尾开始往前跳 <code>fromIndex</code> 的绝对值个索引，然后往后搜寻）。默认为 0。</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mingzhu</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;西游记&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;红楼梦&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;三国演义&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;水浒传&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">mingzhu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;西游记&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">mingzhu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;金瓶梅&#39;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h3><p>使用 <code>includes()</code>查找字符串是区分大小写的。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;es6&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;es7&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;es8&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用 <code>includes()</code>只能判断简单类型的数据，对于复杂类型的数据，比如对象类型的数组，二维数组，这些是无法判断的.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;es6&#39;</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;es7&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;es8&#39;</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&#39;es9&#39;</span><span style="color:#ABB2BF;">,{</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;jimmy&quot;</span><span style="color:#ABB2BF;">}]</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;es7&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;es8&quot;</span><span style="color:#ABB2BF;">])); </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;jimmy&quot;</span><span style="color:#ABB2BF;">})); </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>能识别NaN，indexOf是不能识别NaN的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;es6&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;es7&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;es8&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// -1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>最后，如果只想知道某个值是否在数组中存在，而并不关心它的索引位置，建议使用includes()，如果想获取一个值在数组中的位置，那么使用indexOf方法。</p><h2 id="指数操作符-幂运算" tabindex="-1">指数操作符(幂运算) <a class="header-anchor" href="#指数操作符-幂运算" aria-label="Permalink to &quot;指数操作符(幂运算)&quot;">​</a></h2><p>在 ES7 中引入指数运算符「**」，用来实现幂运算，功能与 Math.pow 结果相同，如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;"> **</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pow</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="比如我们想求2的10次方" tabindex="-1">比如我们想求2的10次方 <a class="header-anchor" href="#比如我们想求2的10次方" aria-label="Permalink to &quot;比如我们想求2的10次方&quot;">​</a></h3><h4 id="自己写函数实现" tabindex="-1">自己写函数实现 <a class="header-anchor" href="#自己写函数实现" aria-label="Permalink to &quot;自己写函数实现&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> pow</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        result</span><span style="color:#56B6C2;"> *=</span><span style="color:#E06C75;"> x</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> result</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">pow</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// 1024</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="math-pow" tabindex="-1">Math.pow() <a class="header-anchor" href="#math-pow" aria-label="Permalink to &quot;Math.pow()&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pow</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// 1024</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="使用幂运算符" tabindex="-1">使用幂运算符 ** <a class="header-anchor" href="#使用幂运算符" aria-label="Permalink to &quot;使用幂运算符 **&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;"> **</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1024</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>基本求幂</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">2</span><span style="color:#56B6C2;"> **</span><span style="color:#D19A66;"> 3</span><span style="color:#7F848E;font-style:italic;">   // 8</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> **</span><span style="color:#D19A66;"> 2</span><span style="color:#7F848E;font-style:italic;">   // 9</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> **</span><span style="color:#D19A66;"> 2.5</span><span style="color:#7F848E;font-style:italic;"> // 15.588457268119896</span></span>
<span class="line"><span style="color:#D19A66;">10</span><span style="color:#56B6C2;"> **</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#7F848E;font-style:italic;"> // 0.1</span></span>
<span class="line"><span style="color:#D19A66;">NaN</span><span style="color:#56B6C2;"> **</span><span style="color:#D19A66;"> 2</span><span style="color:#7F848E;font-style:italic;"> // NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>注意</strong></p><p>幂运算符的两个*号之间不能出现空格，否则语法会报错。</p>`,31)]))}const u=a(p,[["render",e]]);export{d as __pageData,u as default};
