import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"组件通信和状态管理(状态管理源码原理分析)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端进阶技巧/实际应用场景解析/组件通信和状态管理(状态管理源码原理分析).md","filePath":"Document/前端进阶技巧/实际应用场景解析/组件通信和状态管理(状态管理源码原理分析).md","lastUpdated":1750954157000}'),o={name:"Document/前端进阶技巧/实际应用场景解析/组件通信和状态管理(状态管理源码原理分析).md"};function e(t,s,r,c,B,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="组件通信和状态管理-状态管理源码原理分析" tabindex="-1">组件通信和状态管理(状态管理源码原理分析) <a class="header-anchor" href="#组件通信和状态管理-状态管理源码原理分析" aria-label="Permalink to &quot;组件通信和状态管理(状态管理源码原理分析)&quot;">​</a></h1><p>上面组件的概念中：我们详细分析了组件的 3 个要素：数据模型、渲染和视图。</p><p>虽然通过组件化的方式能够有效地将 Web 页面进行解耦，但另一个问题也随之出现，组件之间如何进行通信。这一讲我们就来分析组件化 Web 应用中的组件通信问题。</p><h4 id="全局状态" tabindex="-1">全局状态 <a class="header-anchor" href="#全局状态" aria-label="Permalink to &quot;全局状态&quot;">​</a></h4><p>对于父子组件通信，框架都已给出可行的解决方案：父组件通过 prop(s) 属性向子组件传参，子组件通过自定义事件来向父组件发送消息。而非父子组件之间，如果通过层层传递，这个过程就会变得相当麻烦。最简单的直接解决方式就是设置一个供多个组件共享的全局变量，但如果直接使用全局变量会存在一些问题，比如：</p><p>可能多个组件会同时修改变量值，这个过程无法追踪，调试问题也会变得很麻烦；</p><p>当全局变量值发生变化时，如何通知引用它的每一个组件？</p><h5 id="_1-状态管理库的特点" tabindex="-1">1.状态管理库的特点 <a class="header-anchor" href="#_1-状态管理库的特点" aria-label="Permalink to &quot;1.状态管理库的特点&quot;">​</a></h5><p>针对这些问题，一些状态管理库出现了，我们重点分析用于 Vue 的 Vuex 和用于 React 的 Redux，所谓的“状态”，就是不同组件之间传递和引用的数据模型。状态管理库具有 3 个特点：<strong>可预测</strong>、<strong>中心化</strong>、<strong>可调式</strong>。</p><h6 id="可预测" tabindex="-1">可预测 <a class="header-anchor" href="#可预测" aria-label="Permalink to &quot;可预测&quot;">​</a></h6><p>可预测性指的是，如果状态 A 经过操作 B 会生成状态 C，那么不论在任何时刻、任何平台（客户端、服务端、App 端），只要 A 和 B 不发生变化，就能得到同样的结果 C。比如下面代码中的函数就是不可预测的：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getTime</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getDom</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>getTime() 函数在不同时刻会得到不同的值，getDom() 函数只能在网页上运行，所以结果都是不可预测的。而下面的函数都是可预测的：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> nextDay</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">time</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1000</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 60</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 60</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 24</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可预测性只是纯函数的优势之一，后面我们在讲函数式编程的时候再详细介绍纯函数相关的内容。</p><h6 id="中心化" tabindex="-1">中心化 <a class="header-anchor" href="#中心化" aria-label="Permalink to &quot;中心化&quot;">​</a></h6><p>Vuex 和 Redux 都只会构建一棵中心化的状态树，所有的状态数据都会作为子属性挂载到这棵树上，非常有默契。</p><h6 id="可调式" tabindex="-1">可调式 <a class="header-anchor" href="#可调式" aria-label="Permalink to &quot;可调式&quot;">​</a></h6><p>可调式指的是可以利用浏览器插件，对状态的变化和使用情况进行追踪和调试。Vuex 提供了 <a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noreferrer">Vue.js devtools</a>插件，Redux 也提供了 <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="noreferrer">Redux DevTools</a>。</p><h5 id="_2-状态管理库实现原理" tabindex="-1">2.状态管理库实现原理 <a class="header-anchor" href="#_2-状态管理库实现原理" aria-label="Permalink to &quot;2.状态管理库实现原理&quot;">​</a></h5><p>了解状态管理库特性之后，我们再对写和读这两个核心操作的源码进行分析。</p><h6 id="vuex-3-5-1-中修改状态" tabindex="-1">Vuex（3.5.1）中修改状态 <a class="header-anchor" href="#vuex-3-5-1-中修改状态" aria-label="Permalink to &quot;Vuex（3.5.1）中修改状态&quot;">​</a></h6><p>下面是一段简单的示例代码，从代码中我们可以看到，通过执行 store.commit(&#39;increment&#39;) 来调用 mutation 中的 increment() 函数，从而达到修改状态的操作。所以我们来分析 commit() 函数的实现原理。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Store</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		increment</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">payload</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> payload</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;increment&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// -&gt; 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>commit 部分源码如下所示，从代码中可以看出，首先通过 mutations[type] 获取 store 初始化时 mutations 对象下的属性（以下简称为“mutations”），在示例代码中，type 的值为 increment。因为 Vuex 提供了模块机制，不同模块下可能出现相同名称的 mutations，所以保存为数组的形式。</p><p>然后调用 _withCommit() 函数，将当前变量_committing 赋值为 true，执行完回调函数后再还原为之前的值。这个回调函数则会遍历执行 mutations。其中 payload 为调用 commit 时传入的参数，对应示例代码中的数值 1。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> commit</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">_type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">_payload</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">_options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> this$1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> mutation</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> entry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_mutations</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_withCommit</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">    entry</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> commitIterator</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">handler</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">      handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_withCommit</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> _withCommit</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> committing</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_committing</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_committing</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_committing</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> committing</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h6 id="vuex-3-5-1-中读取状态" tabindex="-1">Vuex（3.5.1）中读取状态 <a class="header-anchor" href="#vuex-3-5-1-中读取状态" aria-label="Permalink to &quot;Vuex（3.5.1）中读取状态&quot;">​</a></h6><p>Vuex 在进行初始化的时候会在内部创建一个 Vue 实例，并且赋值给 store._vm 属性，在这个实例中创建了数据模型 $$state，$$state 的初始值即为我们在初始化 store 时的 state 属性，对应示例代码中的对象 {count: 1}。这个 $$state 属性在 mutations 中以及通过 store.state 访问时都会用到。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		$$state</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后对原型对象 Store.prototype 的属性 state 进行劫持，当读取 store.state 时将返回 _vm._data.$$state。这样当通过 mutations 修改它的时候，就能即时返回最新的值了。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperties</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prototypeAccessors$1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">prototypeAccessors$1</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Redux（4.0.5）中修改状态</p><p>下面是官方给出的一段简单的 Redux 示例代码，从中可以看到，通过 store.dispatch() 函数来触发状态更新，通过 store.getState() 函数来获取当前状态信息。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> counter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		case</span><span style="color:#98C379;"> &quot;INCREMENT&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> state</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		case</span><span style="color:#98C379;"> &quot;DECREMENT&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> state</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;INCREMENT&quot;</span><span style="color:#ABB2BF;"> }); </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;INCREMENT&quot;</span><span style="color:#ABB2BF;"> }); </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;DECREMENT&quot;</span><span style="color:#ABB2BF;"> }); </span><span style="color:#7F848E;font-style:italic;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>dispatch() 函数是用来分发 action 的，可以把它理解成用于触发数据更新的方法。它的实现非常简单，部分源码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      isDispatching</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">      currentState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> currentReducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">currentState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      isDispatching</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> action</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>dispatch() 函数会以当前的状态 currentState 以及我们定义的动作 action 作为参数来调用 currentReducer() 函数，该函数对应示例代码中的 counter() 函数。</p><h6 id="redux-4-0-5-中读取状态" tabindex="-1">Redux（4.0.5）中读取状态 <a class="header-anchor" href="#redux-4-0-5-中读取状态" aria-label="Permalink to &quot;Redux（4.0.5）中读取状态&quot;">​</a></h6><p>getState() 函数的代码实现比较简单，首先判断是否为分发状态，如果是则抛出错误，否则直接返回</p><p>currentState，而 currentState 的值在 dispatch() 函数执行时就已经被更新了。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getState</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isDispatching</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">			&quot;You may not call store.getState() while the reducer is executing. &quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">				&quot;The reducer has already received the state as an argument. &quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">				&quot;Pass it down from the top reducer instead of reading it from the store.&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> currentState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="其他组件通信方式" tabindex="-1">其他组件通信方式 <a class="header-anchor" href="#其他组件通信方式" aria-label="Permalink to &quot;其他组件通信方式&quot;">​</a></h4><p>选用状态管理库并不是解决跨组件传递数据的唯一方式，下面再介绍 2 种方式也能提供跨组件通信，以 Vue 为例进行讲解。</p><h5 id="_1-全局上下文" tabindex="-1">1.全局上下文 <a class="header-anchor" href="#_1-全局上下文" aria-label="Permalink to &quot;1.全局上下文&quot;">​</a></h5><p>在 Vue 中，提供了一组 API 用来解决祖先组件与子孙组件的通信问题，那就是 provide 和 inject。provide 可以在祖先组件中指定我们想要提供给子孙组件的数据或方法，而在任何子孙组件中，我们都可以使用 inject 来接收 provide 提供的数据或方法。</p><p>下面的示例代码中，根组件通过 provide() 函数将数据模型的属性 o 暴露给子孙组件，子孙组件则通过 inject 属性来声明对属性 o 的引用。这样相当于组件之间共享了属性 o，因为只要任何一处修改了 o.count 属性，其他各处也会随之发生变化。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> v-on:click</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;o.count++&quot;</span><span style="color:#ABB2BF;">&gt;{{o.count}}&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button-counter&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;o&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">		methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">			click</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		template</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">			&#39;&lt;button v-on:click=&quot;click&quot;&gt;You clicked me {{ o.count }} times.&lt;/button&gt;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			o</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		provide</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				o</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h5 id="_2-事件监听" tabindex="-1">2.事件监听 <a class="header-anchor" href="#_2-事件监听" aria-label="Permalink to &quot;2.事件监听&quot;">​</a></h5><p>事件监听则是利用组件库本身的事件机制，设置一个全局事件代理，用来负责向各个组件传递数据。</p><p>下面是一个简单的示例。创建一个 Vue 实例 eventBus，然后通过 Object.defineProperty 将其注入 Vue 组件中，这样在组件中就可以通过 this.$bus 来访问这个 Vue 实例了。当任何一个组件按钮被点击时，通过事件冒泡 this.$bus.$emit 来传入新的状态，其他组件则通过事件监听 this.$bus.$on 来获取最新的状态。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> v-on:click</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;click()&quot;</span><span style="color:#ABB2BF;">&gt;{{this.count}}&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button-counter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> EventBus</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperties</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		$bus</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">			get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> EventBus</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#E5C07B;">	Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">component</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button-counter&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">		mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$bus</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">			click</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$bus</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		template</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">			&#39;&lt;button v-on:click=&quot;click&quot;&gt;You clicked me {{ this.count }} times.&lt;/button&gt;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#app&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		mounted</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$bus</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">			click</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$bus</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">$emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h4 id="状态管理源码原理分析总结" tabindex="-1">状态管理源码原理分析总结 <a class="header-anchor" href="#状态管理源码原理分析总结" aria-label="Permalink to &quot;状态管理源码原理分析总结&quot;">​</a></h4><p>本讲介绍了 3 种不同的跨组件通信方式。由于通信双方不属于父子组件，也就是没有直接的依赖/引用关系，所以需要借助“第三方”来进行传递数据，这些“第三方”既包括视图库（Vue 和 React）本身提供的事件机制或全局上下文，也包括面向其进行开发的状态管理库。</p><p>对于最常用的全局状态管理库 Vuex 和 Redux，通过深入分析其源码，理解了其实现原理。Vuex 内部会创建一个 Vue 实例，并使用这个实例的数据模型来做状态更新；而 Redux 则采用了无副作用的纯函数来生成不可变数据。 组件库默认提供了全局上下文的方式来解决跨组件通信问题，非常轻量，适合在小型 Web 应用中使用，缺点是追踪调试状态变化比较困难。事件监听的方式也可以不依赖额外的第三方库来实现，但在监听到事件改变时需要在组件内部手动触发视图更新。</p><p>最后布置一道思考题：你还知道哪些跨组件通信的方式？</p><p>答：父子通信事件，bus 方法事件</p>`,57)]))}const b=n(o,[["render",e]]);export{u as __pageData,b as default};
