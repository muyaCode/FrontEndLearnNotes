import{_ as a,c as n,o as l,ah as e}from"./chunks/framework.DqD713j2.js";const p="/FrontEndLearnNotes/assets/ITCSS.DW0sIHTq.png",d=JSON.parse('{"title":"CSS 架构","description":"","frontmatter":{},"headers":[],"relativePath":"Document/HTML和CSS/CSS/CSS架构.md","filePath":"Document/HTML和CSS/CSS/CSS架构.md","lastUpdated":1750954157000}'),o={name:"Document/HTML和CSS/CSS/CSS架构.md"};function r(t,s,c,i,B,b){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="css-架构" tabindex="-1">CSS 架构 <a class="header-anchor" href="#css-架构" aria-label="Permalink to &quot;CSS 架构&quot;">​</a></h1><p>掌握各种 CSS 设计模式、解决难复用、难扩展等问题</p><p>企业级别 CSS 架构</p><p>扩展各种 CSS 奇淫巧技，发挥 CSS 的威力</p><h2 id="css-的设计模式" tabindex="-1">CSS 的设计模式 <a class="header-anchor" href="#css-的设计模式" aria-label="Permalink to &quot;CSS 的设计模式&quot;">​</a></h2><h3 id="oocss-面向对象的-css-开发模式" tabindex="-1">OOCSS：面向对象的 CSS 开发模式 <a class="header-anchor" href="#oocss-面向对象的-css-开发模式" aria-label="Permalink to &quot;OOCSS：面向对象的 CSS 开发模式&quot;">​</a></h3><p>文档参考：<a href="https://www.keycdn.com/blog/oocss" target="_blank" rel="noreferrer">OOCSS - The Future of Writing CSS - KeyCDN</a></p><p>文章：<a href="https://github.com/stubbornella/oocss/wiki" target="_blank" rel="noreferrer">首页 ·stubbornella/oocss Wiki (github.com)</a></p><p>OO：面向对象，OOCSS：面向对象的 CSS 开发模式</p><p>Object Oriented CSS 面向对象的 CSS</p><h4 id="_1-容器与内容分离" tabindex="-1">1.容器与内容分离 <a class="header-anchor" href="#_1-容器与内容分离" aria-label="Permalink to &quot;1.容器与内容分离&quot;">​</a></h4><p>容器与内容分离模式：样式在任何容器中都可以复用</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- post中的metadata --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;post&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;metadata&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;哈哈哈&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;2022-12-25&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- comment中的metadata --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;comment&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;metadata&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;嘿嘿嘿&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;2022-12-25&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>分别写各自的 CSS</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">.post</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.comment</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D19A66;">.metadata</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-结构-基础对象-与-皮肤-对象-分离" tabindex="-1">2.结构（基础对象） 与 皮肤（对象）分离 <a class="header-anchor" href="#_2-结构-基础对象-与-皮肤-对象-分离" aria-label="Permalink to &quot;2.结构（基础对象） 与 皮肤（对象）分离&quot;">​</a></h4><p>符合面向对象的 CSS 开发模式：Vue 的各种 UI 组件库的样式都符合这个模式</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;menu fix2&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>css</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 基础组件  */</span></span>
<span class="line"><span style="color:#D19A66;">.menu</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	color: </span><span style="color:#D19A66;">green</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	font-size: </span><span style="color:#D19A66;">14</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 分离和新加入覆盖模式 */</span></span>
<span class="line"><span style="color:#D19A66;">.fix2</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	font-size: </span><span style="color:#D19A66;">16</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_3-面向设计开发的-css" tabindex="-1">3.面向设计开发的 CSS <a class="header-anchor" href="#_3-面向设计开发的-css" aria-label="Permalink to &quot;3.面向设计开发的 CSS&quot;">​</a></h4><p>后面的文档说的都是面向设计模式开发 的 CSS 思想</p><hr><h2 id="amcss" tabindex="-1">AMCSS <a class="header-anchor" href="#amcss" aria-label="Permalink to &quot;AMCSS&quot;">​</a></h2><p>官网文档：<a href="https://amcss.github.io/" target="_blank" rel="noreferrer">AMCSS - Attribute Modules for CSS</a></p><p><strong>Attribute Modules for CSS CSS 的属性模块</strong></p><p>AM 是一种使用 HTML 属性及其值而非样式元素的类的技术。这样，每个属性都可以有效地声明一个单独的命名空间来封装样式信息，从而使 HTML 和 CSS 更具可读性和可维护性。</p><p><strong>简单来说就是通过 css 属性选择器来模块化 CSS</strong></p><p>优势：属性值得灵活性，相当于通过属性值来增加命名空间，减少全局名称空间，以便更好的将 css 模块化</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> am-blockName</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> am-blockname-chilElement</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> am-tritName</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;one two&quot;</span><span style="color:#ABB2BF;">&gt;hello&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">[</span><span style="color:#D19A66;">am-blockName</span><span style="color:#C678DD;">]</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	width: </span><span style="color:#D19A66;">500</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">[</span><span style="color:#D19A66;">am-blockname-chilElement</span><span style="color:#C678DD;">]</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	height: </span><span style="color:#D19A66;">50</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">[</span><span style="color:#D19A66;">am-tritName</span><span style="color:#ABB2BF;">~=</span><span style="color:#98C379;">&quot;one&quot;</span><span style="color:#C678DD;">]</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	font-size: </span><span style="color:#D19A66;">30</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="css-bem-css-命名规范" tabindex="-1">CSS-BEM：CSS 命名规范 <a class="header-anchor" href="#css-bem-css-命名规范" aria-label="Permalink to &quot;CSS-BEM：CSS 命名规范&quot;">​</a></h2><p><strong>BEM 官网</strong>：<a href="https://en.bem.info/" target="_blank" rel="noreferrer">BEM</a></p><p>参考文章：<a href="https://blog.csdn.net/Jsoning/article/details/103767210" target="_blank" rel="noreferrer">2020 年你还没用 BEM？_前端秀儿的博客-CSDN 博客_bem.js</a></p><ul><li><p><code>BEM</code>中块、元素、修饰器的命名如果存在多个单词使用<code>- 单中划线</code>连接</p><ul><li><p><code>B</code>意思是<code>（Block） 块</code>，<code>E</code>意思是<code>（Element）元素</code>，<code>M</code>意思是<code>（Modifier）修饰器</code></p><ul><li><blockquote><p>&quot;-&quot; 中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</p></blockquote><blockquote><p>&quot;--&quot; 双中划线 ：用来连接 块或元素与修饰器</p></blockquote><blockquote><p>&quot;__&quot; 双下划线：用来连接 块和块或元素的子元素</p></blockquote><blockquote><p>&quot;_&quot; 单下划线：用来描述一个块或者块的子元素的一种状态</p></blockquote></li></ul></li></ul></li><li><p>BEM 是一个简单又非常有用的命名约定。让你的前端代码更容易阅读和理解，更容易协作，更容易控制，更加健壮和明确，而且更加严密。</p></li></ul><blockquote><p>可以通过阅读<code>Element-UI</code>源码来分析学习<code>BEM</code>规范，使用 BEM 规范语义化更加鲜明，阅读更容易理解</p></blockquote><p><code>BEM</code>中块、元素、修饰器的命名如果存在多个单词使用<code>- 单中划线</code>连接</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">.button</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#7F848E;font-style:italic;">/*基础按钮*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*通过双中划线连接修饰器 这样语义化更加鲜明*/</span></span>
<span class="line"><span style="color:#D19A66;">.button--state-success</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#7F848E;font-style:italic;">/*状态为成功的button*/</span></span>
<span class="line"><span style="color:#D19A66;">.footer__button</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#7F848E;font-style:italic;">/*底部按钮样式*/</span></span>
<span class="line"><span style="color:#D19A66;">.footer__button--state-success</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#7F848E;font-style:italic;">/*底部状态为成功的按钮样式*/</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*state-success 多个单词直接使用-连接*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>每一个块(block)名应该有一个命名空间（前缀） <ul><li><code>block</code> 代表了更高级别的抽象或组件：如 button、footer。</li><li><code>block__element</code> 代表 .block 的后代，用于形成一个完整的 .block 的整体。</li><li><code>block--modifier</code> 代表 .block 的不同状态或不同版本。 使用两个连字符和下划线而不是一个，是为了让你自己的块可以用单个连字符来界定。如：</li></ul></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sub</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">block__element</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sub</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">block</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">modifier</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="bem-命名法的好处" tabindex="-1">BEM 命名法的好处 <a class="header-anchor" href="#bem-命名法的好处" aria-label="Permalink to &quot;BEM 命名法的好处&quot;">​</a></h3><p>BEM 的关键是，可以获得更多的描述和更加清晰的结构，从其名字可以知道某个标记的含义。于是，通过查看 HTML 代码中的 class 属性，就能知道元素之间的关联。</p><p>常规的命名法示例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;article&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;body&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;button-primary&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;button-success&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>这种写法从 DOM 结构和类命名上可以了解每个元素的意义，但无法明确其真实的层级关系。在 css 定义时，也必须依靠层级选择器来限定约束作用域，以避免跨组件的样式污染。</li></ul><p>使用了 BEM 命名方法的示例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;article&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;article__body&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;tag&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;article__button--primary&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;article__button--success&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>通过 BEM 命名方式，模块层级关系简单清晰，而且 css 书写上也不必作过多的层级选择</li></ul><h3 id="如何使用-bem-命名法" tabindex="-1">如何使用 BEM 命名法 <a class="header-anchor" href="#如何使用-bem-命名法" aria-label="Permalink to &quot;如何使用 BEM 命名法&quot;">​</a></h3><h4 id="_1-什么时候应该用-bem-格式" tabindex="-1">1.什么时候应该用 BEM 格式 <a class="header-anchor" href="#_1-什么时候应该用-bem-格式" aria-label="Permalink to &quot;1.什么时候应该用 BEM 格式&quot;">​</a></h4><ul><li><p>使用 BEM 的诀窍是，你要知道什么时候哪些东西是应该写成 BEM 格式的。</p><ul><li><p>比如说同一个 tab 组件，有两种不同样式的 UI 写法</p><ul><li>不同的写法需要 --modifier 来取名连接命名，如参考 elementUI 的写法：</li></ul></li></ul></li><li><p>并不是每个地方都应该使用 BEM 命名方式。当需要明确关联性的模块关系时，应当使用 BEM 格式。</p><ul><li>比如只是一条公共的单独的样式，就没有使用 BEM 格式的意义：</li></ul></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hide</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    display</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">none</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">important</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-在-css-预处理器中使用-bem-格式" tabindex="-1">2.在 CSS 预处理器中使用 BEM 格式 <a class="header-anchor" href="#_2-在-css-预处理器中使用-bem-格式" aria-label="Permalink to &quot;2.在 CSS 预处理器中使用 BEM 格式&quot;">​</a></h4><ul><li><p>BEM 的一个槽点是，命名方式长而难看，书写不雅。相比 BEM 格式带来的便利来说，我们应客观看待。</p></li><li><p>而且，一般来说会使用通过 LESS/SASS 等预处理器语言来编写 CSS，利用其语言特性书写起来要简单很多。</p></li></ul><p>以 LESS 为例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">article</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    max</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">: 1200</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">    &amp;</span><span style="color:#E06C75;">__body</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        padding</span><span style="color:#ABB2BF;">: 20</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#56B6C2;">    &amp;</span><span style="color:#E06C75;">__button</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        padding</span><span style="color:#ABB2BF;">: 5</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;"> 8</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">        &amp;--</span><span style="color:#E06C75;">primary</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">background</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">blue</span><span style="color:#ABB2BF;">;}</span></span>
<span class="line"><span style="color:#56B6C2;">        &amp;--</span><span style="color:#E06C75;">success</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">background</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">green</span><span style="color:#ABB2BF;">;}</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_3-流行框架的组件中使用-bem-格式" tabindex="-1">3.流行框架的组件中使用 BEM 格式 <a class="header-anchor" href="#_3-流行框架的组件中使用-bem-格式" aria-label="Permalink to &quot;3.流行框架的组件中使用 BEM 格式&quot;">​</a></h4><ul><li><p>在当前流行的 <code>Vue.js</code> / <code>React</code> / <code>Angular</code> 等前端框架中，都有 CSS 组件级作用域的编译实现，其基本原理均为利用 CSS 属性选择器特性，为不同的组件生成不同的属性选择器。</p></li><li><p>当你选择了这种局部作用域的写法时，在较小的组件中，BEM 格式可能显得没那么重要。但对于公共的、全局性的模块样式定义，还是推荐使用 BEM 格式。</p></li><li><p>另外，对于对外发布的公共组件来说，一般为了风格的可定制性，都不会使用这种局部作用域方式来定义组件样式。此时使用 BEM 格式也会大显其彩。</p></li></ul><h4 id="_4-避免-blockel1el2-的格式" tabindex="-1">4.避免 .block<strong>el1</strong>el2 的格式 <a class="header-anchor" href="#_4-避免-blockel1el2-的格式" aria-label="Permalink to &quot;4.避免 .block**el1**el2 的格式&quot;">​</a></h4><ul><li>在深层次嵌套的 DOM</li><li>结构下，应避免过长的样式名称定义。</li><li>层级最后不要超过 4 级，不然增加阅读的理解难度</li></ul><h4 id="_5-bem-命名太长" tabindex="-1">5.BEM 命名太长 <a class="header-anchor" href="#_5-bem-命名太长" aria-label="Permalink to &quot;5.BEM 命名太长&quot;">​</a></h4><p>BEM 的命名中包含了模块名，长长的命名会让 HTML 标签会显得臃肿。</p><p>其实每个使用 BEM 的开发团队多多少少会改变其命名规范，比如 Instagram 团队使用的驼峰式:</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">.blockName-elementName--modifierName</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>还有单下划线：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">.block-name_element-name--modifierName</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>还有修饰器名用单横线连接：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">.blockName__elementName-modifierName</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其实这些对缩短命名没有多大的帮助，但我们也无需担心文件体积的问题，由于服务端有 gzip 压缩，BEM 命名相同的部分多，压缩下来的体积不会太大。另外现在都用 IDE 来编写代码了，有自动提示功能，也无须担心重复的输入过长的名字。</p><hr><h3 id="推荐写法和风格" tabindex="-1">推荐写法和风格 <a class="header-anchor" href="#推荐写法和风格" aria-label="Permalink to &quot;推荐写法和风格&quot;">​</a></h3><p>block-name__element-name--modifier-name：模块名 + 元素名 + 修饰器名</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">.form { } .form--theme-xmas { } .form--simple { } .form__input { } .form__submit</span></span>
<span class="line"><span style="color:#ABB2BF;">{ } .form__submit--disabled { } //对应的HTML结构如下：</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">form</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;form form--theme-xmas form--simple&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;form__input&quot;</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;form__submit form__submit--disabled&quot;</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;submit&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="smacss-css-样式模块分类处理" tabindex="-1">SMACSS-CSS：样式模块分类处理 <a class="header-anchor" href="#smacss-css-样式模块分类处理" aria-label="Permalink to &quot;SMACSS-CSS：样式模块分类处理&quot;">​</a></h2><p><strong>官网文档</strong>：<a href="http://smacss.com/book/" target="_blank" rel="noreferrer">Book - Scalable and Modular Architecture for CSS (smacss.com)</a></p><p><strong>Scalable and Modular Architecture for CSS 可扩展和模块化的 css 架构</strong></p><p>SMACSS 主要是介绍遵循 SMACSS 的基本规则和命名规则，按照 SMACSS 的规则，书写规范的 CSS</p><h3 id="类别" tabindex="-1">类别 <a class="header-anchor" href="#类别" aria-label="Permalink to &quot;类别&quot;">​</a></h3><p>项目 CSS 的目录 style 下的分类：以下首字母新建文件夹时是小写</p><ul><li><p>Base：重置浏览器的样式</p></li><li><p>Layout：页面布局样式（Vue 项目里变成了组件，不需要在这里写）</p></li><li><p>Modules：公共的复用的小模块样式（Vue 项目里变成了组件，不需要在这里写）</p></li><li><p>State：不同的状态效果的模块</p></li><li><p>Theme：页面的颜色皮肤主题</p></li></ul><p>好处：易维护、易复用、易扩展...</p><p>命名规范：</p><ul><li><p>.l-header：页面布局样式命名</p></li><li><p>.is-hidden：状态样式效果命名</p></li><li><p>theme-nav：皮肤样式命名</p></li></ul><h3 id="目的" tabindex="-1">目的 <a class="header-anchor" href="#目的" aria-label="Permalink to &quot;目的&quot;">​</a></h3><p>使用类别主要是将重复的操作简化，减少代码量，简化维护，并提高用户体验的一致性</p><ol><li>基本规则（Base）</li></ol><ul><li><p>css 重置，设置 css 重置样式表</p><p>2.布局规则（Layout）</p></li><li><p>将页面分为主要部分和次要部分，主要部分位于主要部分之间，因此布局样式分为主要样式和次要样式</p></li><li><p>主要部分使用 id 选择器，含有布局样式的话可以这么写（.l-fixed #header）</p><p>3.模块规则（Module）</p></li><li><p>模块是页面中更离散的组件，可以是导航栏、对话框等等，模块位于 lauout 组件或其他组件内部</p></li><li><p>每个模块都应设计为作为独立组件存在。这样，页面将更加灵活。如果操作正确，则可以轻松地将模块移动到布局的不同部分，而不会中断。</p></li><li><p>请避免使用 ID 和元素选择器，而仅使用类名</p><p>4.状态规则（State）</p></li><li><p>状态是增加和覆盖所有其他样式，例如打开关闭、正确和错误</p></li><li><p>可以使用!important</p></li><li><p>例如：is-、has-</p><p>5.主题规则（Theme）</p></li><li><p>主题定义了颜色和图像，使您的应用程序或站点具有外观。将主题分成自己的样式集，可以轻松地为其他主题重新定义这些样式</p></li></ul><h2 id="it-css-css-的分层处理" tabindex="-1">IT-CSS：CSS 的分层处理 <a class="header-anchor" href="#it-css-css-的分层处理" aria-label="Permalink to &quot;IT-CSS：CSS 的分层处理&quot;">​</a></h2><p><strong>官网</strong>：<a href="https://itcss.io/" target="_blank" rel="noreferrer">itcss, from CSS Wizardry</a></p><p><strong>参考 GitHub 收集的相关资源</strong>：<a href="https://github.com/ahmadajmi/awesome-itcss" target="_blank" rel="noreferrer">ahmadajmi/awesome-itcss: 🤗 🎉 A curated list of awesome ITCSS articles, videos, and code examples (github.com)</a></p><p>参考文章：<a href="https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/" target="_blank" rel="noreferrer">ITCSS：可扩展和可维护的 CSS 架构 - Xfive</a></p><p><strong>nverted Triangle CSS 倒三角 CSS</strong></p><p>可扩展和可维护的 CSS 架构</p><p>层次比 SMACSS 分的更密</p><p><strong>ITCSS 的主要原则之一是将 CSS 代码库分为几个部分（称为 layer），这些部分采用倒三角形的形式：</strong></p><p><img src="`+p+`" alt="ITCSS.png"></p><p><strong>IT-CSS 的层次：从上到下，下层永远继承它上面所有层次的样式</strong></p><ul><li><p>Settings：维护整个网站的样式变量，与预处理器一起使用，并包含字体，颜色定义等</p></li><li><p>Tools：维护样式的工具库：全局使用的 mixin 和 function 功能。重要的是不要在前 2 层中输出任何 CSS</p></li><li><p>Generic：浏览器的默认样式重置-重置或规范化样式，框大小定义等。这是生成实际 CSS 的第一层</p></li><li><p>Base：对一些元素进行定制化的设置-HTML 元素（例如 H1，A 等）的样式。这些带有浏览器的默认样式，因此我们可以在此处重新定义它们</p></li><li><p>Objects：定义未装饰设计模式的基于类的选择器，例如 OOCSS 已知的媒体对象组件：OOCSS（Vue 项目中在 Components 组件目录替代）</p></li><li><p>Components：特定的 UI 组件。这是我们大部分工作的地方，我们的 UI 组件通常由对象和组件组成：OOCSS（Vue 项目中在 Components 组件目录替代）</p></li><li><p>Trumps 或者 Utilities：权重比较高的样式：!important; - 工具程序类能够覆盖三角形中之前发生的样式</p></li></ul><h2 id="rscss" tabindex="-1">RSCSS <a class="header-anchor" href="#rscss" aria-label="Permalink to &quot;RSCSS&quot;">​</a></h2><p>GitHub：<a href="https://github.com/rstacruz/rscss" target="_blank" rel="noreferrer">rstacruz/rscss: Reasonable System for CSS Stylesheet Structure (github.com)</a></p><p>官网：<a href="https://ricostacruz.com/rscss" title="https://ricostacruz.com/rscss" target="_blank" rel="noreferrer">ricostacruz.com/rscss</a></p><h2 id="acss-一个样式属性对应一个类" tabindex="-1">ACSS：一个样式属性对应一个类 <a class="header-anchor" href="#acss-一个样式属性对应一个类" aria-label="Permalink to &quot;ACSS：一个样式属性对应一个类&quot;">​</a></h2><p><a href="https://www.tailwindcss.cn/" target="_blank" rel="noreferrer">Tailwind CSS</a>便是基于这个思想开发</p><ul><li><p>好处：极强的复用性、维护成本低</p></li><li><p>坏处：破坏了 CSS 的语义化</p></li></ul><h2 id="suitcss-基于组件的开发改善-css-创作体验" tabindex="-1">SUITCSS：基于组件的开发改善 CSS 创作体验 <a class="header-anchor" href="#suitcss-基于组件的开发改善-css-创作体验" aria-label="Permalink to &quot;SUITCSS：基于组件的开发改善 CSS 创作体验&quot;">​</a></h2><p>官网：<a href="https://suitcss.github.io/" target="_blank" rel="noreferrer">SUIT CSS: style tools for UI components</a></p><p><strong>SUIT CSS 是一种专注于为基于组件的开发改善 CSS 创作体验的方法</strong></p><p>基于组件的系统允许将松散耦合的独立单元实现和组合为定义明确的复合对象。组件已封装，但能够通过接口/事件进行互操作</p><p><strong>命名约定：</strong></p><p><strong>工具 class</strong></p><p>语法：u-[sm-|md-|lg-] utilityName 使用驼峰式命名</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;u-cf&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">a</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;u-floatLeft&quot;</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{{url}}&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;u-block&quot;</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;{{src}}&quot;</span><span style="color:#D19A66;"> alt</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;u-sizeFill u-textBreak&quot;</span><span style="color:#ABB2BF;">&gt;…&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>组件 （负责组件特定样式的 css）</strong></p><p>语法：[-][-descendentName][–modifierName]</p><ul><li>namespace(命名空间 可选）</li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">.twt-Button</span><span style="color:#ABB2BF;"> { / * … * / }</span></span>
<span class="line"><span style="color:#D19A66;">.twt-Tabs</span><span style="color:#ABB2BF;"> { / * … * / }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>ComponentName（组件名称） 使用驼峰式写法</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">article</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;MyComponent&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">article</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>descendentName（组件子节点名称） 使用驼峰式写法</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">article</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Tweet&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Tweet-bodyText&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">article</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>modifierName（修饰符名称） 用于描述组件修饰符，使用驼峰式写法</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Button Button--default&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>变量</strong> 语法：–ComponentName[-descendant|–modifier][-onState]-(cssProperty|variableName)</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">:root</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">   ---ComponentName-backgroundColor</span></span>
<span class="line"><span style="color:#E06C75;">  --ComponentName-descendant-backgroundColor</span></span>
<span class="line"><span style="color:#E06C75;">  --ComponentName--modifier-backgroundColor</span></span>
<span class="line"><span style="color:#E06C75;">  --ComponentName-onHover-backgroundColor</span></span>
<span class="line"><span style="color:#E06C75;">  --ComponentName-descendant-onHover-backgroundColor</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="架构使用示例" tabindex="-1">架构使用示例 <a class="header-anchor" href="#架构使用示例" aria-label="Permalink to &quot;架构使用示例&quot;">​</a></h2><p>CSS 架构的 GitHub 例子（项目还不能运行）：<a href="https://github.com/muyaCode/vue3-css-framework" target="_blank" rel="noreferrer">vue3-css-framework</a></p><ul><li><code>src\\style\\</code>目录的样式</li></ul><p>也可以看 elementPlus 的源码：</p><ul><li><p>elementUI：源码：<a href="https://github.com/ElemeFE/element" target="_blank" rel="noreferrer">ElemeFE/element: A Vue.js 2.0 UI Toolkit for Web (github.com)</a></p><ul><li>css 架构目录：：element/packages/theme-chalk/src/</li></ul></li><li><p>elementPlus：<a href="https://element-plus.gitee.io/zh-CN/" target="_blank" rel="noreferrer">一个 Vue 3 UI 框架 | Element Plus (gitee.io)</a></p><ul><li>源码：<a href="https://github.com/element-plus/element-plus" target="_blank" rel="noreferrer">element-plus/element-plus: 🎉 A Vue.js 3 UI Library made by Element team (github.com)</a></li><li>css 架构目录：：element-plus/packages/theme-chalk/src/</li></ul></li></ul><p>Ant Design 的源码架构：</p><ul><li><p><a href="https://3x.ant.design/index-cn" target="_blank" rel="noreferrer">Ant Design - 一个 UI 设计语言</a></p></li><li><p>源码：<a href="https://github.com/ant-design/ant-design" target="_blank" rel="noreferrer">ant-design/ant-design: An enterprise-class UI design language and React UI library (github.com)</a></p></li><li><p>css 架构目录：components\\style</p></li></ul><p>Bootstrap 的源码架构：</p><ul><li><p><a href="https://www.bootcss.com/" target="_blank" rel="noreferrer">Bootstrap 中文网 (bootcss.com)</a></p></li><li><p>源码：<a href="https://github.com/twbs/bootstrap" target="_blank" rel="noreferrer">twbs/bootstrap: The most popular HTML, CSS, and JavaScript framework for developing responsive, mobile first projects on the web. (github.com)</a></p></li><li><p>css 架构目录：scss 目录</p></li></ul><h3 id="github-快速查看项目源码架构在-github-后面添加-1s-如" tabindex="-1">github 快速查看项目源码架构在 github 后面添加 1s，如 <a class="header-anchor" href="#github-快速查看项目源码架构在-github-后面添加-1s-如" aria-label="Permalink to &quot;github 快速查看项目源码架构在 github 后面添加 1s，如&quot;">​</a></h3><p><a href="https://github1s.com/ant-design/ant-design" target="_blank" rel="noreferrer">https://github1s.com/ant-design/ant-design</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>各种 CSS 设计模式可以组合使用</p><p>都可以在<code>src/style</code>目录中新建使用个模块目录</p><h2 id="css-资源" tabindex="-1">CSS 资源 <a class="header-anchor" href="#css-资源" aria-label="Permalink to &quot;CSS 资源&quot;">​</a></h2><h3 id="css-标准化" tabindex="-1">CSS 标准化 <a class="header-anchor" href="#css-标准化" aria-label="Permalink to &quot;CSS 标准化&quot;">​</a></h3><ul><li><a href="https://github.com/necolas/normalize.css" target="_blank" rel="noreferrer">Normalize</a> -  一套提供较好的多浏览器默认样式一致性的 CSS 规范</li><li><a href="https://github.com/kennethormandy/normalize-opentype.css" target="_blank" rel="noreferrer">Normalize-OpenType</a> -  为 Normalize.css 添加了 OpenType 特性，如连字、字间距等等。</li><li><a href="http://meyerweb.com/eric/tools/css/reset/" target="_blank" rel="noreferrer">Reset</a> -  一套 CSS 标准，将全部的 HTML 元素调整到一致的基准线</li><li><a href="https://10up.github.io/sanitize.css/" target="_blank" rel="noreferrer">sanitize.css</a> -  一套可立即使用的，符合当今最优实践的 CSS 规范。</li></ul><h3 id="大型网站的-css-开发" tabindex="-1">大型网站的 CSS 开发 <a class="header-anchor" href="#大型网站的-css-开发" aria-label="Permalink to &quot;大型网站的 CSS 开发&quot;">​</a></h3><ul><li><a href="http://markdotto.com/2014/07/23/githubs-css/" target="_blank" rel="noreferrer">Github 的 CSS 方案</a> by <a href="https://twitter.com/mdo" target="_blank" rel="noreferrer">Mark Otto</a>.</li><li><a href="http://codepen.io/chriscoyier/blog/codepens-css" target="_blank" rel="noreferrer">CodePen 的 CSS 方案</a> by <a href="https://twitter.com/chriscoyier" target="_blank" rel="noreferrer">Chris Coyier</a>.</li><li><a href="http://ianfeather.co.uk/css-at-lonely-planet/" target="_blank" rel="noreferrer">Lonely Planet 的 CSS 方案</a> by <a href="https://twitter.com/ianfeather" target="_blank" rel="noreferrer">Ian Feather</a>.</li><li><a href="http://mikeaparicio.com/2014/08/10/css-at-groupon/" target="_blank" rel="noreferrer">Groupon 的 CSS 方案</a> by <a href="https://twitter.com/peruvianidol" target="_blank" rel="noreferrer">Mike Aparicio</a>.</li><li><a href="http://blog.brianlovin.com/buffers-css/" target="_blank" rel="noreferrer">Buffer 的 CSS 方案</a> by <a href="https://twitter.com/brian_lovin" target="_blank" rel="noreferrer">Brian Lovin</a>.</li><li><a href="http://code.hootsuite.com/css-at-hootsuite/" target="_blank" rel="noreferrer">HOOTSUITE 的 CSS 方案</a> by Steve Mynett.</li><li><a href="http://blog.trello.com/refining-the-way-we-structure-our-css-at-trello/" target="_blank" rel="noreferrer">我们是如何精简 Trello 的 CSS 架构的</a> by <a href="https://twitter.com/bobbygrace" target="_blank" rel="noreferrer">Bobby Grace</a>.</li><li><a href="https://bugsnag.com/blog/bugsnags-css-architecture" target="_blank" rel="noreferrer">Bugsnag 的 CSS 架构</a> by <a href="https://twitter.com/maxluster" target="_blank" rel="noreferrer">Max Luster</a>.</li><li><a href="http://dev.ghost.org/css-at-ghost/" target="_blank" rel="noreferrer">Ghost 的 CSS 方案</a> by Paul Davis.</li><li><a href="https://medium.com/@fat/mediums-css-is-actually-pretty-fucking-good-b8e2a6c78b06" target="_blank" rel="noreferrer">Medium 的 CSS 方案</a> by <a href="https://twitter.com/fat" target="_blank" rel="noreferrer">Jacob Thornton</a>.</li></ul><h3 id="代码风格指导" tabindex="-1">代码风格指导 <a class="header-anchor" href="#代码风格指导" aria-label="Permalink to &quot;代码风格指导&quot;">​</a></h3><ul><li><a href="https://github.com/necolas/idiomatic-css" target="_blank" rel="noreferrer">编写符合语言习惯的 CSS</a> by <a href="https://twitter.com/necolas" target="_blank" rel="noreferrer">Nicolas Gallagher</a>.</li><li><a href="http://cssguidelin.es/" target="_blank" rel="noreferrer">CSS 指南</a> by <a href="https://twitter.com/csswizardry" target="_blank" rel="noreferrer">Harry Roberts</a>.</li><li><a href="http://sass-guidelin.es/" target="_blank" rel="noreferrer">Sass 指南</a> by <a href="https://twitter.com/HugoGiraudel" target="_blank" rel="noreferrer">Hugo Giraudel</a>.</li><li><a href="http://codeguide.co/" target="_blank" rel="noreferrer">Mark Otto 编写的风格指南，受「GitHub 风格」和「编写符合语言习惯的 CSS」所激发</a> by <a href="https://twitter.com/mdo" target="_blank" rel="noreferrer">Mark Otto</a>.</li><li><a href="https://github.com/ThinkUpLLC/ThinkUp/wiki/Code-Style-Guide:-CSS" target="_blank" rel="noreferrer">ThinkUp 的 CSS 风格指导</a>，作者 ThinkUp</li><li><a href="http://google-styleguide.googlecode.com/svn/trunk/htmlcssguide.xml" target="_blank" rel="noreferrer">Google 的 HTML/CSS 风格指导</a></li><li><a href="https://make.wordpress.org/core/handbook/coding-standards/css/" target="_blank" rel="noreferrer">WordPress 的 CSS 代码标准</a></li></ul><h3 id="风格指导" tabindex="-1">风格指导 <a class="header-anchor" href="#风格指导" aria-label="Permalink to &quot;风格指导&quot;">​</a></h3><ul><li><a href="https://docs.atlassian.com/aui/latest/" target="_blank" rel="noreferrer">Atlassian  官方 UI 文档</a>；</li><li><a href="http://rizzo.lonelyplanet.com/styleguide/design-elements/colours" target="_blank" rel="noreferrer">设计元素</a> by <a href="http://www.lonelyplanet.com/" target="_blank" rel="noreferrer">lonely planet</a>.</li><li><a href="https://github.com/styleguide/css" target="_blank" rel="noreferrer">GitHub 的 CSS 风格指导</a></li><li><a href="http://ux.mailchimp.com/patterns" target="_blank" rel="noreferrer">Patterns</a> by <a href="http://mailchimp.com/" target="_blank" rel="noreferrer">MailChimp 的风格指南</a>.</li><li><a href="https://www.lightningdesignsystem.com/" target="_blank" rel="noreferrer">Lighting Design System</a> by <a href="http://www.salesforce.com/" target="_blank" rel="noreferrer">Salesforce 的风格指南</a>.</li><li><a href="http://sass-lang.com/styleguide" target="_blank" rel="noreferrer">SASS 风格指南</a> by Sass team.</li><li><a href="http://www.starbucks.com/static/reference/styleguide/" target="_blank" rel="noreferrer">星巴克的风格指南</a> by <a href="http://www.starbucks.com/" target="_blank" rel="noreferrer">Starbucks</a>.</li><li><a href="http://styleguides.io/examples.html" target="_blank" rel="noreferrer">关于网站风格指导的一些资源</a> by <a href="https://github.com/maban/styleguides/graphs/contributors" target="_blank" rel="noreferrer">Awesome people</a>.</li></ul><h3 id="css-命名习惯和方式" tabindex="-1">CSS 命名习惯和方式 <a class="header-anchor" href="#css-命名习惯和方式" aria-label="Permalink to &quot;CSS 命名习惯和方式&quot;">​</a></h3><ul><li><a href="http://www.sitepoint.com/atomic-oobemitscss/" target="_blank" rel="noreferrer">Atomic OOBEMITSCSS</a></li><li><a href="https://en.bem.info/" target="_blank" rel="noreferrer">BEM</a></li><li><a href="https://smacss.com/" target="_blank" rel="noreferrer">SMACSS</a></li><li><a href="http://pointnorth.io/#base-browser-styling" target="_blank" rel="noreferrer">Point North</a></li><li><a href="http://itcss.io/" target="_blank" rel="noreferrer">ITCSS</a></li><li><a href="http://www.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/" target="_blank" rel="noreferrer">OOCSS</a></li><li><a href="http://www.sitepoint.com/title-css-simple-approach-css-class-naming/" target="_blank" rel="noreferrer">Title CSS</a></li><li><a href="https://github.com/necolas/idiomatic-css" target="_blank" rel="noreferrer">idiomatic-css</a></li><li><a href="http://patternlab.io/resources.html" target="_blank" rel="noreferrer">Atomic Design</a></li><li><a href="https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md#u-utilityname" target="_blank" rel="noreferrer">SUIT CSS</a></li><li><a href="https://trykickoff.github.io/learn/css.html#namingscheme" target="_blank" rel="noreferrer">Kickoff CSS</a></li></ul>`,149)]))}const y=a(o,[["render",r]]);export{d as __pageData,y as default};
