import{_ as e,c as s,o as a,ah as u}from"./chunks/framework.DqD713j2.js";const k=JSON.parse('{"title":"vue3自定义hooks大集合","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端主流开发框架/Vue/vue3自定义hooks大集合.md","filePath":"Document/前端主流开发框架/Vue/vue3自定义hooks大集合.md","lastUpdated":1750954157000}'),h={name:"Document/前端主流开发框架/Vue/vue3自定义hooks大集合.md"};function p(t,o,d,c,i,r){return a(),s("div",null,o[0]||(o[0]=[u('<h1 id="vue3自定义hooks大集合" tabindex="-1">vue3自定义hooks大集合 <a class="header-anchor" href="#vue3自定义hooks大集合" aria-label="Permalink to &quot;vue3自定义hooks大集合&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>平常说的 自定义hooks 在vue3 官方说法叫组合式 API (Composition API)</p><ul><li>组合式 API (Composition API) 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件</li><li>虽然这套 API 的风格是基于函数的组合，但<strong>组合式 API 并不是函数式编程</strong>。组合式 API 是以 Vue 中数据可变的、细粒度的响应性系统为基础的，而函数式编程通常强调数据不可</li><li>组合式 API 最基本的优势是它使我们能够通过组合函数来实现更加简洁高效的逻辑复用。在选项式 API 中我们主要的逻辑复用机制是 mixins，而组合式 API 解决了 mixins 的所有缺陷</li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>平时我们 写自定义hooks 可能有两种</p><ul><li>一种是 基于业务的 自定义hooks 只是为了单纯提取 可复用的逻辑 ，缺点是只能用在自己项目中</li><li>一种是 可复用行强的 可在全局使用的 比如对于弹框、表格、表单等等的自定义hooks</li></ul><h3 id="基于业务封装的-hooks" tabindex="-1">基于业务封装的 hooks <a class="header-anchor" href="#基于业务封装的-hooks" aria-label="Permalink to &quot;基于业务封装的 hooks&quot;">​</a></h3><p>最近我在开发低代码的项目 我在项目中得封装一套组件 看下面的伪代码：</p><h2 id="vue3-hooks的网站以及文章" tabindex="-1">vue3 hooks的网站以及文章 <a class="header-anchor" href="#vue3-hooks的网站以及文章" aria-label="Permalink to &quot;vue3 hooks的网站以及文章&quot;">​</a></h2><h3 id="开源库与开源项目中的hooks" tabindex="-1">开源库与开源项目中的hooks <a class="header-anchor" href="#开源库与开源项目中的hooks" aria-label="Permalink to &quot;开源库与开源项目中的hooks&quot;">​</a></h3><p>🚀vue3官方推荐社区项目：VueUse</p><p>这个是我最推荐大家的hooks 平时没事的时候在里面逛一下 看看源码 绝对能学到很多，我平时用的比较多的是其中的 <code>useResizeObserver</code>、<code>useTitle</code>、<code>useClipboard</code>、<code>useDraggable</code> 等</p><p>🚀ahooks-vue</p><p>ahooks 的 vue 实现。许多 hooks 是从ahooks移植过来的，但是不完全一致。包含了 <code>useRequest</code>、<code>useAxios</code>、<code>useFullscreen</code>、<code>useTable</code>等</p><p>🚀个人封装的hooks 库</p><p>这个是我偶然发现的 一个hooks 库 感觉也是模仿其他库的，仅供参考</p><p>🚀vue-hooks</p><p>主要包含了 <code>useDate</code>、<code>useStore</code>、<code>useActions</code>等</p><p>🚀vue-use-web</p><p>跟 vueuse 有点像不知道是不是vueuse 前身，而且都是国外大佬维护的</p><p>🚀vue-hooks-plus</p><p>其中包含47个高质量 &amp; 可靠 hook函数 其中<code>useRequeset</code> 、<code>useWebSocket</code>、<code>useFetchs</code>等都很优秀</p><p>🚀针对 Vue3 的实用Hooks集合</p><p><code>useRequest</code>、 <code>useDate</code>、<code>useVirtualList</code> 我在项目中都用到了</p><p>🚀20kstars 的后台管理项目：vue-vben-admin</p><p>这个是 点赞比较多的 vue3 后台管理项目 其中 我上面的分页hooks 就是抄他的 里面还有很多 表格表单hooks 大家也可以参考 其中包含了 <code>useContext</code>、<code>useScroll</code>、<code>useEventListener</code>、<code>useTable</code>、<code>useTitle</code>等</p><p>🚀vue3-antd-admin</p><p>喜欢用 antd 的同学可以看看其中的<code>useI18n</code> <code>useModal</code>、<code>useEventbus</code> 方案都很优秀</p><h3 id="表格相关的" tabindex="-1">表格相关的 <a class="header-anchor" href="#表格相关的" aria-label="Permalink to &quot;表格相关的&quot;">​</a></h3><p>🚀一文学会vue3如何自定义hook钩子函数和封装组件</p><p>🚀【Vue3】如何封装一个超级好用的 Hook ！</p><p>🚀useTable表格hooks封装和使用(Vue3)</p><p>🚀vue3流水线开发分页列表？😁 useTable了解一下</p><p>🚀Vue3自定义useTable</p><p>🚀在Vue3这样子写页面更快更高效</p><p>🚀基于vue3+Arco Design的table组件的hook二次封装</p><p>每个人封装的 表格 hook 其实都有区别 所以大家可以综合一下 总结出比较适合自己项目的，因为每个人项目中的 ui 分页等等 都不太一样 所以个人建议总结出一个 集成到自己项目中是最好的</p><h3 id="关于请求的-hook" tabindex="-1">关于请求的 hook <a class="header-anchor" href="#关于请求的-hook" aria-label="Permalink to &quot;关于请求的 hook&quot;">​</a></h3><p>🚀Vue3 教你实现公司级网络请求的 Hook</p><p>🚀Vue3使用hook封装常见的几种异步请求函数场景，让开发更加丝滑</p><h3 id="其他-hooks" tabindex="-1">其他 hooks <a class="header-anchor" href="#其他-hooks" aria-label="Permalink to &quot;其他 hooks&quot;">​</a></h3><p>🚀Form表单组件封装和使用(Vue3)</p><p>他把antdvue 的form 二次封装了 并且搭配了自己的封装的hooks</p><p>🚀【vue3】写hook三天，治好了我的组件封装强迫症。</p><p>封装了 下拉框选项从后端获取值得hooks 以及关于 loading 状态的 hook</p><p>🚀Vue3自定义一个Hooks，实现一键换肤</p><p>一键换肤的 hooks</p><p>🚀Vue3使用hook封装媒体查询和事件监听，使Vue的开发更加丝滑🚀🚀🚀</p><p>🚀聊聊Vue3+hook怎么写弹窗组件更快更高效</p><p>🚀【Vue3 Hook】实现 useTimeout 代替 setTimeout</p><p>🚀公共Hooks封装之文件下载useDownloadBlob</p><p>🚀在vue中封装useIntro来更好的使用Intro.js</p>',53)]))}const n=e(h,[["render",p]]);export{k as __pageData,n as default};
