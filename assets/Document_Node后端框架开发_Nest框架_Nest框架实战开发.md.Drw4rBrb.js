import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/image-20240229200238414.DpFA8hm9.png",o="/FrontEndLearnNotes/assets/image-20240229200316804.Cu5y578z.png",r="/FrontEndLearnNotes/assets/image-20240229200354004.Dq2mdBWE.png",t="/FrontEndLearnNotes/assets/image-20240229195926267.BXmqT2GA.png",c="/FrontEndLearnNotes/assets/image-20240229181722174.BwiwU279.png",B="/FrontEndLearnNotes/assets/image-20240229182308590.nNyYqk-U.png",i="/FrontEndLearnNotes/assets/image-20240229182345743.R6Xghosi.png",y="/FrontEndLearnNotes/assets/image-20240229182433590.h6oZ1rl9.png",u="/FrontEndLearnNotes/assets/image-20240229182506118.yYX9WUOG.png",b="/FrontEndLearnNotes/assets/image-20240229182726648.D1T6qzd2.png",F="/FrontEndLearnNotes/assets/image-20240229182754445.DI8oA-V7.png",A="/FrontEndLearnNotes/assets/image-20240229181929773.CSWfvKuQ.png",m="/FrontEndLearnNotes/assets/image-20240229182007049.hWILkaZo.png",d="/FrontEndLearnNotes/assets/image-20240229182019852.jbJw5zl-.png",C="/FrontEndLearnNotes/assets/image-20240229182105698.DPvpFWVL.png",E="/FrontEndLearnNotes/assets/image-20240229182136508.CnNIo-qh.png",D="/FrontEndLearnNotes/assets/image-20240229184139624.ChiJVwgD.png",h="/FrontEndLearnNotes/assets/image-20240301000101565.Cfo5ASMV.png",g="/FrontEndLearnNotes/assets/image-20240301000759916.B0F6jtJM.png",q="/FrontEndLearnNotes/assets/image-20240301001056419.Bc_nP_nH.png",v="/FrontEndLearnNotes/assets/image-20240301002042369.D6xlx2nx.png",f="/FrontEndLearnNotes/assets/image-20240301002413471.CzVsoRoT.png",x="/FrontEndLearnNotes/assets/image-20240301002703658.CNOsAHFw.png",k="/FrontEndLearnNotes/assets/image-20240301003957268.pJKO9lkT.png",w="/FrontEndLearnNotes/assets/image-20240301004657314.DX6xahOF.png",j="/FrontEndLearnNotes/assets/image-20240301004718671.CyF0TXR5.png",P="/FrontEndLearnNotes/assets/image-20240301003517440.B428l3k3.png",I=JSON.parse('{"title":"Nest 框架实战开发","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Nest框架/Nest框架实战开发.md","filePath":"Document/Node后端框架开发/Nest框架/Nest框架实战开发.md","lastUpdated":1750954157000}'),M={name:"Document/Node后端框架开发/Nest框架/Nest框架实战开发.md"};function _(S,s,T,R,U,O){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="nest-框架实战开发" tabindex="-1">Nest 框架实战开发 <a class="header-anchor" href="#nest-框架实战开发" aria-label="Permalink to &quot;Nest 框架实战开发&quot;">​</a></h1><p>教程：</p><ul><li><a href="https://juejin.cn/column/7203911920637345852" target="_blank" rel="noreferrer">NestJS 小技巧 - 雪隐_上班了的专栏 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/column/7197034140486254652" target="_blank" rel="noreferrer">Nestjs - water 的专栏 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7309329004497584180" target="_blank" rel="noreferrer">nestjs开发小技巧——任务调度 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7270464435297189900" target="_blank" rel="noreferrer">我总结了1w字的Nest.js入门最佳实践 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7264921613552189474" target="_blank" rel="noreferrer">保姆级教你用nest集成minio - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7275211391102451772" target="_blank" rel="noreferrer">nestjs-实现双token无感刷新 - 掘金 (juejin.cn)</a></li></ul><h2 id="nestjs-上传图片-静态目录" tabindex="-1">nestjs 上传图片-静态目录 <a class="header-anchor" href="#nestjs-上传图片-静态目录" aria-label="Permalink to &quot;nestjs 上传图片-静态目录&quot;">​</a></h2><h3 id="_1-主要会用到两个依赖包" tabindex="-1">1.主要会用到两个依赖包 <a class="header-anchor" href="#_1-主要会用到两个依赖包" aria-label="Permalink to &quot;1.主要会用到两个依赖包&quot;">​</a></h3><p>这两个依赖包：multer @nestjs/platform-express(nestJs 自带了这个包)</p><p>所以这两个需要安装：multer @types/multer</p><p>在 <code>upload.module.ts</code> 使用 MulterModule register 注册存放图片的目录</p><p>需要用到 multer 的 diskStorage 设置存放目录 extname 用来读取文件后缀 filename 给文件重新命名</p><p><img src="'+e+`" alt="image-20240229200238414"></p><p>upload.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UploadService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./upload.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UploadController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./upload.controller&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">MulterModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/platform-express&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">diskStorage</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;multer&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">extname</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">join</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;path&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">		MulterModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			storage</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">diskStorage</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				destination</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;../images&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">				filename</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">_</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">file</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					const</span><span style="color:#E5C07B;"> fileName</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span></span>
<span class="line"><span style="color:#C678DD;">						new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#61AFEF;"> extname</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">originalname</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">					}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fileName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			}),</span></span>
<span class="line"><span style="color:#ABB2BF;">		}),</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#E06C75;">	controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UploadController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UploadService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UploadModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="_2-controller-使用" tabindex="-1">2.controller 使用 <a class="header-anchor" href="#_2-controller-使用" aria-label="Permalink to &quot;2.controller 使用&quot;">​</a></h3><p>使用 UseInterceptors 装饰器 FileInterceptor 是单个 读取字段名称 FilesInterceptor 是多个</p><p>参数 使用 UploadedFile 装饰器接受 file 文件</p><p><img src="`+o+`" alt="image-20240229200316804"></p><p>upload.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Controller</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Get</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Post</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Body</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Patch</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Param</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Delete</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	UseInterceptors</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	UploadedFile</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UploadService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./upload.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">FileInterceptor</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/platform-express&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;upload&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UploadController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> uploadService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">UploadService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;album&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">UseInterceptors</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">FileInterceptor</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;file&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#61AFEF;">	upload</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">UploadedFile</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">file</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_3-生成静态目录访问上传之后的图片" tabindex="-1">3.生成静态目录访问上传之后的图片 <a class="header-anchor" href="#_3-生成静态目录访问上传之后的图片" aria-label="Permalink to &quot;3.生成静态目录访问上传之后的图片&quot;">​</a></h3><p>useStaticAssets prefix 是虚拟前缀</p><p>main.ts 配置</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./app.module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestExpressApplication</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/platform-express&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">join</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;path&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">NestExpressApplication</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 配置静态资源访问目录</span></span>
<span class="line"><span style="color:#E5C07B;">	app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">useStaticAssets</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;images&quot;</span><span style="color:#ABB2BF;">), {</span></span>
<span class="line"><span style="color:#E06C75;">		prefix</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/img&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>访问：<a href="http://localhost:3000/img/jk2.jpg" target="_blank" rel="noreferrer">http://localhost:3000/img/jk2.jpg</a></p><p><img src="`+r+`" alt="image-20240229200354004"></p><h2 id="nestjs-下载图片" tabindex="-1">nestjs 下载图片 <a class="header-anchor" href="#nestjs-下载图片" aria-label="Permalink to &quot;nestjs 下载图片&quot;">​</a></h2><p>下载文件的方式有好多种</p><h4 id="_1-download-直接下载" tabindex="-1">1.download 直接下载 <a class="header-anchor" href="#_1-download-直接下载" aria-label="Permalink to &quot;1.download 直接下载&quot;">​</a></h4><p>这个文件信息应该存数据库 我们这儿演示就写死 了</p><p>upload.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Controller</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Post</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	UseInterceptors</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	UploadedFile</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Get</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Res</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UploadService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./upload.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">FileInterceptor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">FilesInterceptor</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/platform-express&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#C678DD;"> type</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Response</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;express&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">join</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;path&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;upload&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UploadController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> uploadService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">UploadService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;album&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">UseInterceptors</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">FileInterceptor</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;file&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#61AFEF;">	upload</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">UploadedFile</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">file</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;file&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;峰峰35岁憋不住了&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;export&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">	downLoad</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Res</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Response</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;../images/1662894316133.png&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// res</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(url)</span></span>
<span class="line"><span style="color:#E5C07B;">		res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">download</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// return  true</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p><img src="`+t+`" alt="image-20240229195926267"></p><h4 id="_2-使用文件流的方式下载" tabindex="-1">2.使用文件流的方式下载 <a class="header-anchor" href="#_2-使用文件流的方式下载" aria-label="Permalink to &quot;2.使用文件流的方式下载&quot;">​</a></h4><p>可以使用 compressing 把他压缩成一个 zip 包</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">import</span><span style="color:#98C379;"> {zip}</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> &#39;compressing&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接受流：upload.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;stream&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">  async</span><span style="color:#61AFEF;"> down</span><span style="color:#ABB2BF;"> (@</span><span style="color:#61AFEF;">Res</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">Response</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;../images/1662894316133.png&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> tarStream</span><span style="color:#56B6C2;">  =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> zip</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Stream</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> tarStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEntry</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Content-Type&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;application/octet-stream&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">      &#39;Content-Disposition&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">      \`attachment; filename=xiaoman\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    tarStream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pipe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>前端接受流下载文件：前端请求下载接口的代码</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> useFetch</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">arrayBuffer</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">href</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> URL</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createObjectURL</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Blob</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">], {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// type:&quot;image/png&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		})</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#E5C07B;">	a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">download</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;img.zip&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> download</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	useFetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/upload/stream&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="nestjs-和-rxjs" tabindex="-1">nestjs 和 RxJs <a class="header-anchor" href="#nestjs-和-rxjs" aria-label="Permalink to &quot;nestjs 和 RxJs&quot;">​</a></h2><p><strong>在 Nestjs 已经内置了 RxJs 无需安装 并且 Nestjs 也会有一些基于 Rxjs 提供的 API</strong></p><p>Rxjs 中文文档：<a href="https://cn.rx.js.org/class/es6/Observable.js~Observable.html" target="_blank" rel="noreferrer">Observable | RxJS 中文文档</a></p><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>RxJs 使用的是观察者模式，用来编写异步队列和事件处理。</p><ul><li><p>Observable 可观察的物件</p></li><li><p>Subscription 监听 Observable</p></li><li><p>Operators 纯函数可以处理管道的数据 如 map filter concat reduce 等</p></li></ul><h3 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h3><p>类似于迭代器 next 发出通知 complete 通知完成</p><p>subscribe 订阅 observable 发出的通知 也就是一个观察者</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Observable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;rxjs&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 类似于迭代器 next 发出通知  complete通知完成</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> observable</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Observable</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">subscriber</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	subscriber</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	subscriber</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	subscriber</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		subscriber</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		subscriber</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">complete</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">observable</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="案例-2" tabindex="-1">案例 2 <a class="header-anchor" href="#案例-2" aria-label="Permalink to &quot;案例 2&quot;">​</a></h4><p>interval 五百毫秒执行一次 pipe 就是管道的意思 管道里面也是可以去掉接口的支持处理异步数据 去处理数据 这儿展示 了 map 和 filter 跟数组的方法是一样的 最后 通过观察者 subscribe 接受回调</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Observable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">interval</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">take</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;rxjs&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">filter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reduce</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">find</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">findIndex</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;rxjs/operators&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> subs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> interval</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">pipe</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">		map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;"> })),</span></span>
<span class="line"><span style="color:#61AFEF;">		filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> v</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			subs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unsubscribe</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>运行：ts-node index.ts</p><h4 id="案例-3" tabindex="-1">案例 3 <a class="header-anchor" href="#案例-3" aria-label="Permalink to &quot;案例 3&quot;">​</a></h4><p>Rxjs 也可以处理事件 不过我们在 Nestjs 里面就不用操作 DOM 了 你如果 Angular 或则 Vue 框架看可以使用 fromEvent</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Observable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">interval</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">take</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">of</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">retry</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fromEvent</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;rxjs&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">filter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reduce</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">find</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">findIndex</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;rxjs/operators&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dom</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> fromEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">pipe</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">dom</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>运行：ts-node index.ts</p><h2 id="响应拦截器-rxjs-格式化数据" tabindex="-1">响应拦截器(Rxjs 格式化数据) <a class="header-anchor" href="#响应拦截器-rxjs-格式化数据" aria-label="Permalink to &quot;响应拦截器(Rxjs 格式化数据)&quot;">​</a></h2><h3 id="拦截器" tabindex="-1">拦截器 <a class="header-anchor" href="#拦截器" aria-label="Permalink to &quot;拦截器&quot;">​</a></h3><p>拦截器具有一系列有用的功能，这些功能受面向切面编程（AOP）技术的启发。它们可以：</p><ul><li>在函数执行之前/之后绑定<strong>额外的逻辑</strong></li><li>转换从函数返回的结果</li><li><strong>转换</strong>从函数抛出的异常</li><li>扩展基本函数行为</li><li>根据所选条件完全重写函数 (例如, 缓存目的)</li></ul><p>想给接口返回一个标准的 json 格式 就要给我们的数据做一个全局 format</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#FFFFFF;">  data,</span><span style="color:#7F848E;font-style:italic;"> //数据</span></span>
<span class="line"><span style="color:#FFFFFF;">  status</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;">  message</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;成功&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#FFFFFF;">  success</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>新建 common 文件夹 创建 common/response.ts， Nest Js 配合 Rxjs 格式化数据</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">NestInterceptor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">CallHandler</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;rxjs/operators&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Observable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;rxjs&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Response</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">implements</span><span style="color:#E5C07B;"> NestInterceptor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	intercept</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">CallHandler</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Observable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> next</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">handle</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">pipe</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">			map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">					data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					status</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;牛逼&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				};</span></span>
<span class="line"><span style="color:#ABB2BF;">			})</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>在 main.ts 注册</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">useGlobalInterceptors</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Response</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>浏览器打开看返回的数据：<a href="http://localhost3000/user" target="_blank" rel="noreferrer">http://localhost3000/user</a></p><h2 id="全局异常拦截器" tabindex="-1">全局异常拦截器 <a class="header-anchor" href="#全局异常拦截器" aria-label="Permalink to &quot;全局异常拦截器&quot;">​</a></h2><p>common 下面新建 common/filter.ts</p><p>创建一个异常过滤器，它负责捕获作为 HttpException 类实例的异常，并为它们设置自定义响应逻辑。为此，我们需要访问底层平台 Request 和 Response。我们将访问 Request 对象，以便提取原始 url 并将其包含在日志信息中。我们将使用 Response.json()方法，使用 Response 对象直接控制发送的响应。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	ExceptionFilter</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Catch</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	ArgumentsHost</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	HttpException</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Response</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;express&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">HttpException</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HttpFilter</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> ExceptionFilter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">exception</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HttpException</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">host</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ArgumentsHost</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> host</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">switchToHttp</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> request</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Request</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getResponse</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Response</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> status</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> exception</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStatus</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">exception</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			time</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">			success</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			status</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>main.ts 注册全局异常过滤器</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> HttpFilter</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;common/filter&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">useGlobalFilters</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> HttpFilter</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>浏览器打开一个不存在的接口：<a href="http://localhost3000/haha" target="_blank" rel="noreferrer">http://localhost3000/haha</a></p><h2 id="管道转换和验证" tabindex="-1">管道转换和验证 <a class="header-anchor" href="#管道转换和验证" aria-label="Permalink to &quot;管道转换和验证&quot;">​</a></h2><p>管道 可以做两件事</p><ul><li>1.<strong>转换</strong>：可以将前端传入的数据转成成我们需要的数据</li><li>2.<strong>验证</strong>：类似于前端的 rules 配置验证规则</li></ul><p>转换 Nestjs 提供了八个内置转换 API</p><ul><li>ValidationPipe</li><li>ParseIntPipe</li><li>ParseFloatPipe</li><li>ParseBoolPipe</li><li>ParseArrayPipe</li><li>ParseUUIDPipe</li><li>ParseEnumPipe</li><li>DefaultValuePipe</li></ul><h3 id="案例-1-转换参数" tabindex="-1">案例 1：转换参数 <a class="header-anchor" href="#案例-1-转换参数" aria-label="Permalink to &quot;案例 1：转换参数&quot;">​</a></h3><p>接受的动态参数希望是一个 number 类型，现在是 string</p><p>这时候就可以通过内置的管道 去做转换</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="案例-2-验证-uuid" tabindex="-1">案例 2：验证 UUID <a class="header-anchor" href="#案例-2-验证-uuid" aria-label="Permalink to &quot;案例 2：验证 UUID&quot;">​</a></h3><p>安装 uuid</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> uuid</span><span style="color:#D19A66;"> -S</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> @types/uuid</span><span style="color:#D19A66;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>生成一个 uuid</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="管道验证-dto" tabindex="-1">管道验证 DTO <a class="header-anchor" href="#管道验证-dto" aria-label="Permalink to &quot;管道验证 DTO&quot;">​</a></h2><h3 id="_1-先创建一个-pipe-验证管道" tabindex="-1">1.先创建一个 pipe 验证管道 <a class="header-anchor" href="#_1-先创建一个-pipe-验证管道" aria-label="Permalink to &quot;1.先创建一个 pipe 验证管道&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> pi</span><span style="color:#98C379;"> 文件名字</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-安装验证器" tabindex="-1">2.安装验证器 <a class="header-anchor" href="#_2-安装验证器" aria-label="Permalink to &quot;2.安装验证器&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> class-validator</span><span style="color:#98C379;"> class-transformer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>代码</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">IsNotEmpty</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">IsString</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;class-validator&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CreatePDto</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">IsNotEmpty</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 验证是否为空</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">IsString</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 是否为字符串</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">IsNotEmpty</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_3-controller-使用管道-和定义类型" tabindex="-1">3.controller 使用管道 和定义类型 <a class="header-anchor" href="#_3-controller-使用管道-和定义类型" aria-label="Permalink to &quot;3.controller 使用管道 和定义类型&quot;">​</a></h3><p><img src="`+c+'" alt="image-20240229181722174"></p><h3 id="_4-实现验证-transform" tabindex="-1">4.实现验证 transform <a class="header-anchor" href="#_4-实现验证-transform" aria-label="Permalink to &quot;4.实现验证 transform&quot;">​</a></h3><p>value 就是 前端传过来的数据 metaData 就是元数据 通过 metatype 可以去实例化这个类</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>实例化 DTO</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过 validate 验证 DTO 返回一个 promise 的错误信息 如果有错误抛出</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5-注册全局-dto-验证管道" tabindex="-1">5.注册全局 DTO 验证管道 <a class="header-anchor" href="#_5-注册全局-dto-验证管道" aria-label="Permalink to &quot;5.注册全局 DTO 验证管道&quot;">​</a></h3><p>跟自己写的效果基本类似</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="守卫" tabindex="-1">守卫 <a class="header-anchor" href="#守卫" aria-label="Permalink to &quot;守卫&quot;">​</a></h2><h3 id="守卫-guard" tabindex="-1">守卫（guard） <a class="header-anchor" href="#守卫-guard" aria-label="Permalink to &quot;守卫（guard）&quot;">​</a></h3><p>守卫有一个单独的责任。它们根据运行时出现的某些条件（例如权限，角色，访问控制列表等）来确定给定的请求是否由路由处理程序处理。这通常称为授权。在传统的 Express 应用程序中，通常由中间件处理授权(以及认证)。中间件是身份验证的良好选择，因为诸如 token 验证或添加属性到 request 对象上与特定路由(及其元数据)没有强关联。</p><p>tips 守卫在每个中间件之后执行，但在任何拦截器或管道之前执行。</p><p>创建一个守卫</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> gu</span><span style="color:#ABB2BF;"> [name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>守卫要求实现函数 给定参数 context<strong>执行上下文</strong> 要求返回布尔值</p><p><img src="'+B+'" alt="image-20240229182308590"></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="controller-使用守卫" tabindex="-1">Controller 使用守卫 <a class="header-anchor" href="#controller-使用守卫" aria-label="Permalink to &quot;Controller 使用守卫&quot;">​</a></h3><p>使用 UseGuards 控制守卫</p><p><img src="'+i+`" alt="image-20240229182345743"></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Controller</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Get</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Post</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Body</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Patch</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Param</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Delete</span><span style="color:#ABB2BF;"> ,</span><span style="color:#E06C75;">UseGuards</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;guard&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UseGuards</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">RoleGuard</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">xxxxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="全局守卫" tabindex="-1">全局守卫 <a class="header-anchor" href="#全局守卫" aria-label="Permalink to &quot;全局守卫&quot;">​</a></h3><p>main.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">useGlobalGuards</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RoleGuard</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+y+'" alt="image-20240229182433590"></p><h3 id="针对角色控制守卫" tabindex="-1">针对角色控制守卫 <a class="header-anchor" href="#针对角色控制守卫" aria-label="Permalink to &quot;针对角色控制守卫&quot;">​</a></h3><p>SetMetadata 装饰器</p><p>第一个参数为 key，第二个参数自定义我们的例子是数组存放的权限</p><p><img src="'+u+`" alt="image-20240229182506118"></p><p>guard 使用 Reflector 反射读取 setMetaData 的值，去做判断这边例子是从 url 判断有没有 admin 权限</p><p>role.guard.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CanActivate</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ExecutionContext</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Observable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;rxjs&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Reflector</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#C678DD;"> type</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Request</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;express&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> RoleGuard</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> CanActivate</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#E06C75;font-style:italic;"> Reflector</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Reflector</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#61AFEF;">	canActivate</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ExecutionContext</span></span>
<span class="line"><span style="color:#ABB2BF;">	): </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">Observable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> admin</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Reflector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[]&gt;(</span><span style="color:#98C379;">&quot;role&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHandler</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> request</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">switchToHttp</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Request</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">admin</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">query</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">role</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>浏览器打开：<a href="http://localhost:3000/guard?role=admin" target="_blank" rel="noreferrer">http://localhost:3000/guard?role=admin</a></p><h2 id="自定义装饰器" tabindex="-1">自定义装饰器 <a class="header-anchor" href="#自定义装饰器" aria-label="Permalink to &quot;自定义装饰器&quot;">​</a></h2><p>Nestjs 允许我们去自定义装饰器。</p><p>文章参考：<a href="https://juejin.cn/post/7263283712225607737" target="_blank" rel="noreferrer">Nest.js 系列——常用的装饰器以及自定义装饰器 - 掘金 (juejin.cn)</a></p><h3 id="案例-1-自定义权限装饰器" tabindex="-1">案例 1：自定义权限装饰器 <a class="header-anchor" href="#案例-1-自定义权限装饰器" aria-label="Permalink to &quot;案例 1：自定义权限装饰器&quot;">​</a></h3><p>生成装饰器</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> d</span><span style="color:#ABB2BF;"> [name]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>代码</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">SetMetadata</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> Role</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">role</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">role</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> SetMetadata</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;role&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">role</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+b+`" alt="image-20240229182726648"></p><h3 id="案例-2-自定义参数装饰器-返回一个-url" tabindex="-1">案例 2：自定义参数装饰器，返回一个 url <a class="header-anchor" href="#案例-2-自定义参数装饰器-返回一个-url" aria-label="Permalink to &quot;案例 2：自定义参数装饰器，返回一个 url&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	SetMetadata</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	createParamDecorator</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	ExecutionContext</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	applyDecorators</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#C678DD;"> type</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Request</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;express&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> ReqUrl</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createParamDecorator</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ExecutionContext</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> req</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">switchToHttp</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Request</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><img src="`+F+'" alt="image-20240229182754445"></p><h3 id="聚合装饰器" tabindex="-1">聚合装饰器 <a class="header-anchor" href="#聚合装饰器" aria-label="Permalink to &quot;聚合装饰器&quot;">​</a></h3><h2 id="nestjs-爬虫" tabindex="-1">nestjs 爬虫 <a class="header-anchor" href="#nestjs-爬虫" aria-label="Permalink to &quot;nestjs 爬虫&quot;">​</a></h2><p>其实爬虫是一个对计算机综合能力要求比较高的技术活。</p><p>首先是要对网络协议尤其是 http 协议有基本的了解, 能够分析网站的数据请求响应。学会使用一些工具，简单的情况使用 chrome devtools 的 network 面板就够了</p><p><strong>cheerio</strong>：是 jquery 核心功能的一个快速灵活而又简洁的实现，主要是为了用在服务器端需要对 DOM 进行操作的地方，让你在服务器端和 html 愉快的玩耍。</p><p><strong>axios</strong>：网络请求库可以发送 http 请求</p><h3 id="第一步分析该网页" tabindex="-1">第一步分析该网页 <a class="header-anchor" href="#第一步分析该网页" aria-label="Permalink to &quot;第一步分析该网页&quot;">​</a></h3><p>发现图片是在 article-content 下面的 p 标签</p><p><img src="'+A+'" alt="image-20240229181929773"></p><p>请求获取该图片</p><p><img src="'+m+'" alt="image-20240229182007049"></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>拼接 url 拿到了第一页的数据</p><p><img src="'+d+`" alt="image-20240229182019852"></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="第二步递归读取所有图片" tabindex="-1">第二步递归读取所有图片 <a class="header-anchor" href="#第二步递归读取所有图片" aria-label="Permalink to &quot;第二步递归读取所有图片&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> baseUrl</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;xxxxxxxxxxxxxxxxxxxxxxx&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> next</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;下一页&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> urls</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> getCosPlay</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E06C75;"> axios</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`xxxxxxxxxxxxxx/Cosplay/Cosplay10772</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">index</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;_&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> index</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">.html\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//console.log(res.data)</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> $</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cheerio</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">load</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> page</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> $</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.article-content .pagination a&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#61AFEF;"> $</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">				})</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">toArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">page</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">				$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.article-content p img&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">each</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">attr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;src&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">					urls</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">baseUrl</span><span style="color:#56B6C2;"> +</span><span style="color:#61AFEF;"> $</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">attr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;src&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#E06C75;">				index</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				await</span><span style="color:#61AFEF;"> getCosPlay</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#61AFEF;"> getCosPlay</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">urls</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><img src="`+C+`" alt="image-20240229182105698"></p><h3 id="第三步写入本地" tabindex="-1">第三步写入本地 <a class="header-anchor" href="#第三步写入本地" aria-label="Permalink to &quot;第三步写入本地&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">  writeFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">urls</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="color:#E5C07B;">    urls</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#E06C75;font-style:italic;"> url</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> buffer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> axios</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">responseType</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;arraybuffer&quot;</span><span style="color:#ABB2BF;"> }).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> ws</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createWriteStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../cos&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &#39;.jpg&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E5C07B;">      ws</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">buffer</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="`+E+`" alt="image-20240229182136508"></p><h2 id="nestjs-连接数据库" tabindex="-1">nestjs 连接数据库 <a class="header-anchor" href="#nestjs-连接数据库" aria-label="Permalink to &quot;nestjs 连接数据库&quot;">​</a></h2><p>文档：<a href="https://docs.nestjs.com/techniques/database" target="_blank" rel="noreferrer">Database | NestJS - A progressive Node.js framework</a></p><h3 id="数据库相关" tabindex="-1">数据库相关 <a class="header-anchor" href="#数据库相关" aria-label="Permalink to &quot;数据库相关&quot;">​</a></h3><p>Nest 与数据库无关，允许您轻松地与任何 SQL 或 NoSQL 数据库集成。</p><p>可以直接使用任何通用的 Node.js 数据库集成库或 ORM ，例如 Sequelize (recipe)、knexjs (tutorial)\`和 TypeORM ，以在更高的抽象级别上进行操作。</p><h3 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h3><h4 id="_1-sequelize" tabindex="-1">1.sequelize <a class="header-anchor" href="#_1-sequelize" aria-label="Permalink to &quot;1.sequelize&quot;">​</a></h4><ul><li><a href="https://sequelize.org/" target="_blank" rel="noreferrer">https://sequelize.org/</a></li><li><a href="https://www.npmjs.com/package/sequelize" target="_blank" rel="noreferrer">https://www.npmjs.com/package/sequelize</a></li><li><a href="https://github.com/sequelize/sequelize" target="_blank" rel="noreferrer">https://github.com/sequelize/sequelize</a></li></ul><h4 id="_2-knexjs" tabindex="-1">2.knexjs <a class="header-anchor" href="#_2-knexjs" aria-label="Permalink to &quot;2.knexjs&quot;">​</a></h4><p><a href="https://knexjs.org/" target="_blank" rel="noreferrer">https://knexjs.org/</a></p><h4 id="_3-mongodb" tabindex="-1">3.MongoDB <a class="header-anchor" href="#_3-mongodb" aria-label="Permalink to &quot;3.MongoDB&quot;">​</a></h4><p>Nest 支持两种与 MongoDB 数据库集成的方式</p><p>1.使用内置的 TypeORM 提供的 MongoDB 连接器</p><p><a href="https://github.com/typeorm/typeorm" target="_blank" rel="noreferrer">https://github.com/typeorm/typeorm</a></p><p>2.使用最流行的 MongoDB 对象建模工具 Mongoose</p><p><a href="https://mongoosejs.com/" target="_blank" rel="noreferrer">https://mongoosejs.com/</a></p><h3 id="typeorm" tabindex="-1">TypeORM <a class="header-anchor" href="#typeorm" aria-label="Permalink to &quot;TypeORM&quot;">​</a></h3><p>typeorm 开发 GitHub 地址：<a href="https://github.com/typeorm/typeorm" target="_blank" rel="noreferrer">https://github.com/typeorm/typeorm</a></p><h4 id="typeorm-介绍" tabindex="-1">TypeORM 介绍 <a class="header-anchor" href="#typeorm-介绍" aria-label="Permalink to &quot;TypeORM 介绍&quot;">​</a></h4><p>Nest 还提供了与现成的 TypeORM 与 @nestjs/typeorm 的紧密集成</p><p>为了与 SQL 和 NoSQL 数据库集成，Nest 提供了 @nestjs/typeorm 包。Nest 使用 TypeORM 是因为它是 TypeScript 中最成熟的对象关系映射器( ORM )。因为它是用 TypeScript 编写的，所以可以很好地与 Nest 框架集成。</p><p>TypeORM 提供了对许多关系数据库的支持：PostgreSQL 、Oracle、Microsoft SQL Server、SQLite，甚至像 MongoDB 这样的 NoSQL 数据库</p><h4 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h4><h5 id="_1-为所选数据库安装相关的客户端-api-库" tabindex="-1">1.为所选数据库安装相关的客户端 API 库 <a class="header-anchor" href="#_1-为所选数据库安装相关的客户端-api-库" aria-label="Permalink to &quot;1.为所选数据库安装相关的客户端 API 库&quot;">​</a></h5><p>mysql 为例</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @nestjs/typeorm</span><span style="color:#98C379;"> typeorm</span><span style="color:#98C379;"> mysql2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_2-将-typeormmodule-导入-appmodule" tabindex="-1">2.将 TypeOrmModule 导入 AppModule <a class="header-anchor" href="#_2-将-typeormmodule-导入-appmodule" aria-label="Permalink to &quot;2.将 TypeOrmModule 导入 AppModule&quot;">​</a></h5><p>app.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  app.module.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">		TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;mysql&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;localhost&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			entities</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">			synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		}),</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>forRoot() 方法说明</p><ul><li>forRoot() 方法支持所有 TypeORM 包中 createConnection()函数暴露出的配置属性</li><li>额外对象属性配置 <ul><li>retryAttempts: <ul><li>重试连接数据库的次数（默认：10）</li></ul></li><li>retryDelay: <ul><li>两次重试连接的间隔(ms)（默认：3000）</li></ul></li><li>autoLoadEntities: <ul><li>如果为 true,将自动加载实体 (默认：false)</li></ul></li><li>keepConnectionAlive: <ul><li>如果为 true，在应用程序关闭后连接不会关闭 (默认：false)</li></ul></li></ul></li><li>更多连接选项，请查阅文档：<a href="https://typeorm.io/#/connection-options" target="_blank" rel="noreferrer">https://typeorm.io/#/connection-options</a></li></ul><h5 id="_3-可以创建-ormconfig-json-选项模块化-2-和-3-任选一项配置" tabindex="-1">3.可以创建 ormconfig.json(选项模块化：2 和 3 任选一项配置) <a class="header-anchor" href="#_3-可以创建-ormconfig-json-选项模块化-2-和-3-任选一项配置" aria-label="Permalink to &quot;3.可以创建 ormconfig.json(选项模块化：2 和 3 任选一项配置)&quot;">​</a></h5><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;mysql&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;host&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;localhost&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;port&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;username&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;password&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;database&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;entities&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;dist/**/*.entity{.ts,.js}&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;synchronize&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>然后，可以不带任何选项地调用 forRoot()</p><p>app.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  app.module.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">()],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>静态全局路径(例如 dist/*<em>/</em>.entity{ .ts,.js} )不适用于 Webpack 热重载。</p><blockquote><p>注意，ormconfig.json 文件由 typeorm 库载入，因此，任何上述参数之外的属性都不会被应用（例如由 forRoot()方法内部支持的属性–例如 autoLoadEntities 和 retryDelay())</p></blockquote><h5 id="_4-完成-2-或-3-typeorm-的-connection-和-entitymanager-对象" tabindex="-1">4.完成 2 或 3，TypeORM 的 Connection 和 EntityManager 对象 <a class="header-anchor" href="#_4-完成-2-或-3-typeorm-的-connection-和-entitymanager-对象" aria-label="Permalink to &quot;4.完成 2 或 3，TypeORM 的 Connection 和 EntityManager 对象&quot;">​</a></h5><p>就可以在整个项目中注入(不需要导入任何模块)</p><p>app.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  app.module.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Connection</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">PhotoModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> connection</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="typeorm-模式介绍和使用" tabindex="-1">TypeORM 模式介绍和使用 <a class="header-anchor" href="#typeorm-模式介绍和使用" aria-label="Permalink to &quot;TypeORM 模式介绍和使用&quot;">​</a></h4><h5 id="存储库模式" tabindex="-1">存储库模式 <a class="header-anchor" href="#存储库模式" aria-label="Permalink to &quot;存储库模式&quot;">​</a></h5><p>TypeORM 支持存储库设计模式，因此每个实体都有自己的存储库 从数据库连接获得这些存储库</p><h6 id="_1-定义-user-实体" tabindex="-1">1.定义 User 实体 <a class="header-anchor" href="#_1-定义-user-实体" aria-label="Permalink to &quot;1.定义 User 实体&quot;">​</a></h6><p>entity/user.entity.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Entity</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Column</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Entity</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	firstName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	lastName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E06C75;">	isActive</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>该 User 实体在 users 目录下。这个目录包含了和 UsersModule 模块有关的所有文件。你可以决定在哪里保存模型文件，但我们推荐在他们的域中就近创建，即在相应的模块目录中。</p><p>实体的更多内容：<a href="https://typeorm.io/#/entities" target="_blank" rel="noreferrer">https://typeorm.io/#/entities</a></p><h6 id="_2-使用-user-实体" tabindex="-1">2.使用 user 实体 <a class="header-anchor" href="#_2-使用-user-实体" aria-label="Permalink to &quot;2.使用 user 实体&quot;">​</a></h6><p>app.module.ts</p><p>1.需要在模块的 forRoot()方法的选项中（除非你使用一个静态的全局路径）将它插入 entities 数组中来让 TypeORM 知道它的存在</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./users/user.entity&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">		TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;mysql&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;localhost&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//  存储库</span></span>
<span class="line"><span style="color:#E06C75;">			entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">			synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		}),</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h6 id="_3-user-module-ts-使用-forfeature-方法-定义注册存储库" tabindex="-1">3.user.module.ts 使用 forFeature() 方法 定义注册存储库 <a class="header-anchor" href="#_3-user-module-ts-使用-forfeature-方法-定义注册存储库" aria-label="Permalink to &quot;3.user.module.ts 使用 forFeature() 方法 定义注册存储库&quot;">​</a></h6><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./users.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./users.controller&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./user.entity&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">])],</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>此模块使用 forFeature() 方法定义在当前范围中注册哪些存储库。</p><h6 id="_4-注入到-usersservice-服务提供者中" tabindex="-1">4.注入到 UsersService 服务提供者中 <a class="header-anchor" href="#_4-注入到-usersservice-服务提供者中" aria-label="Permalink to &quot;4.注入到 UsersService 服务提供者中&quot;">​</a></h6><p>users.service.ts</p><p>使用 @InjectRepository()装饰器将 UsersRepository 注入到 UsersService 中:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  users.service.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">InjectRepository</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Repository</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./user.entity&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">		@</span><span style="color:#61AFEF;">InjectRepository</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		private</span><span style="color:#E06C75;font-style:italic;"> usersRepository</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Repository</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	findAll</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">[]&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">usersRepository</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	findOne</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">usersRepository</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findOne</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	async</span><span style="color:#61AFEF;"> remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">usersRepository</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h6 id="_5-将-usersmodule-导入根-appmodule" tabindex="-1">5.将 UsersModule 导入根 AppModule <a class="header-anchor" href="#_5-将-usersmodule-导入根-appmodule" aria-label="Permalink to &quot;5.将 UsersModule 导入根 AppModule&quot;">​</a></h6><p>app.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./users/user.entity&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">		TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;mysql&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;localhost&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//  存储库</span></span>
<span class="line"><span style="color:#E06C75;">			entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">			synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		}),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//  导入</span></span>
<span class="line"><span style="color:#E06C75;">		UserModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h6 id="_6-要在导入-typeormmodule-forfeature-的模块之外使用存储库-users-module-ts" tabindex="-1">6.要在导入 TypeOrmModule.forFeature 的模块之外使用存储库（users.module.ts） <a class="header-anchor" href="#_6-要在导入-typeormmodule-forfeature-的模块之外使用存储库-users-module-ts" aria-label="Permalink to &quot;6.要在导入 TypeOrmModule.forFeature 的模块之外使用存储库（users.module.ts）&quot;">​</a></h6><p>如果要在导入 TypeOrmModule.forFeature 的模块之外使用存储库，则需要重新导出由其生成的提供程序。 可以通过导出整个模块来做到这一点</p><p><strong>6.1.导出模块</strong></p><p>users.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./user.entity&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">])],</span></span>
<span class="line"><span style="color:#E06C75;">	exports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>6.2.其他地方导入使用</strong></p><p>users-http.module.ts</p><p>在 UserHttpModule 中导入 UsersModule ，我们可以在后一个模块的提供者中使用 @InjectRepository(User)</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  users-http.module.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./user.module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./users.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./users.controller&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserHttpModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="关系" tabindex="-1">关系 <a class="header-anchor" href="#关系" aria-label="Permalink to &quot;关系&quot;">​</a></h5><h6 id="关系概念" tabindex="-1">关系概念 <a class="header-anchor" href="#关系概念" aria-label="Permalink to &quot;关系概念&quot;">​</a></h6><ul><li>关系是指两个或多个表之间的联系</li><li>关系基于每个表中的常规字段，通常包含主键和外键。</li></ul><h6 id="三种关系和装饰器" tabindex="-1">三种关系和装饰器 <a class="header-anchor" href="#三种关系和装饰器" aria-label="Permalink to &quot;三种关系和装饰器&quot;">​</a></h6><ul><li>一对一 <ul><li>主表中的每一行在外部表中有且仅有一个对应行</li><li>使用 @OneToOne() 装饰器来定义这种类型的关系</li></ul></li><li>一对多/多对一 <ul><li>主表中的每一行在外部表中有一个或多的对应行</li><li>使用 @OneToMany() 和 @ManyToOne()装饰器 来定义这种类型的关系</li></ul></li><li>多对多 <ul><li>主表中的每一行在外部表中有多个对应行，外部表中的每个记录在主表中也有多个行</li><li>使用 @ManyToMany()装饰器 来定义这种类型的关系</li></ul></li></ul><h6 id="使用装饰器例子" tabindex="-1">使用装饰器例子 <a class="header-anchor" href="#使用装饰器例子" aria-label="Permalink to &quot;使用装饰器例子&quot;">​</a></h6><p>@OneToMany()装饰器 定义每个 User 可以有多个 Photo</p><p>user.entity.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  user.entity.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Entity</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Column</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">OneToMany</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Photo</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;../photos/photo.entity&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Entity</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	firstName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	lastName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E06C75;">	isActive</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">OneToMany</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> Photo</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">photo</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> photo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">	photos</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Photo</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>要了解更多 TypeORM 中关系的内容</p><p>可以查看 TypeORM 文档：<a href="https://typeorm.io/#/relations" target="_blank" rel="noreferrer">https://typeorm.io/#/relations</a></p><h5 id="自动载入实体" tabindex="-1">自动载入实体 <a class="header-anchor" href="#自动载入实体" aria-label="Permalink to &quot;自动载入实体&quot;">​</a></h5><p>使用静态全局路径来自动载入实体，例如</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">dist/*/.entity</span><span style="color:#98C379;">{.ts,.js}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>webpack 不支持全局路径，因此如果你要在单一仓库(Monorepo)中构建应用，可能不能使用全局路径。</p><h6 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h6><p>在配置对象的属性中(传递给 forRoot()方法的)设置 autoLoadEntities 属性为 true 来自动载入实体</p><p>app.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// app.module.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">    TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span></span>
<span class="line"><span style="color:#E06C75;">      autoLoadEntities</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>通过配置这一选项，每个通过 forFeature()注册的实体都会自动添加到配置对象的 entities 数组中</p><blockquote><p>注意，那些没有通过 forFeature()方法注册，而仅仅是在实体中被引用（通过关系）的实体不能通过 autoLoadEntities 配置被包含。</p></blockquote><h5 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h5><h6 id="事务简介" tabindex="-1">事务简介 <a class="header-anchor" href="#事务简介" aria-label="Permalink to &quot;事务简介&quot;">​</a></h6><ul><li>数据库事务代表在数据库管理系统（DBMS）中针对数据库的一组操作，这组操作是有关的、可靠的并且和其他事务相互独立的。</li><li>一个事务通常可以代表数据库中的任何变更：<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1" target="_blank" rel="noreferrer">https://zh.wikipedia.org/wiki/数据库事务</a></li></ul><p>TypeORM 事务：<a href="https://typeorm.io/#/transactions" target="_blank" rel="noreferrer">https://typeorm.io/#/transactions</a></p><h6 id="typeorm-事务使用-queryrunner-类" tabindex="-1">TypeORM 事务使用 QueryRunner 类 <a class="header-anchor" href="#typeorm-事务使用-queryrunner-类" aria-label="Permalink to &quot;TypeORM 事务使用 QueryRunner 类&quot;">​</a></h6><p>1.将 Connection 对象在服务提供者注入</p><p>Connection 类需要从 typeorm 包中导入</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#E06C75;font-style:italic;"> connection</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>2.使用这个对象来创建一个事务</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> createMany</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">connection</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createQueryRunner</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startTransaction</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">  try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">manager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">manager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commitTransaction</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //如果遇到错误，可以回滚事务</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">rollbackTransaction</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //你需要手动实例化并部署一个queryRunner</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>注意 connection 仅用于创建 QueryRunner。然而，要测试这个类，就需要模拟整个 Connection 对象（它暴露出来的几个方法），因此，我们推荐采用一个帮助工厂类（也就是 QueryRunnerFactory)并且定义一个包含仅限于维持事务需要的方法的接口。 这一技术让模拟这些方法变得非常直接。</p></blockquote><p>3.可选地，你可以使用一个 Connection 对象的回调函数风格的 transaction 方法</p><p>更多方法：<a href="https://typeorm.io/#/transactions/creating-and-using-transactions" target="_blank" rel="noreferrer">https://typeorm.io/#/transactions/creating-and-using-transactions</a></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> createMany</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">connection</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transaction</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#E06C75;font-style:italic;"> manager</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> manager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> manager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>不推荐使用装饰器来控制事务(@Transaction()和@TransactionManager())。</p><h5 id="订阅者" tabindex="-1">订阅者 <a class="header-anchor" href="#订阅者" aria-label="Permalink to &quot;订阅者&quot;">​</a></h5><p>使用 TypeORM 订阅者，你可以监听特定的实体事件：<a href="https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber" target="_blank" rel="noreferrer">https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber</a></p><h6 id="使用例子" tabindex="-1">使用例子 <a class="header-anchor" href="#使用例子" aria-label="Permalink to &quot;使用例子&quot;">​</a></h6><p>1.订阅例子</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Connection</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	EntitySubscriberInterface</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	EventSubscriber</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	InsertEvent</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./user.entity&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">EventSubscriber</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserSubscriber</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> EntitySubscriberInterface</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">connection</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		connection</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subscribers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	listenTo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> User</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	beforeInsert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">InsertEvent</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`BEFORE USER INSERTED: \`</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">entity</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>事件订阅者不能是请求范围的：<a href="https://docs.nestjs.com/fundamentals/injection-scopes" target="_blank" rel="noreferrer">https://docs.nestjs.com/fundamentals/injection-scopes</a></p><p>2.将 UserSubscriber 类添加到 providers 数组</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./user.entity&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./users.controller&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./users.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UserSubscriber</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./user.subscriber&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">])],</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">UserSubscriber</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>更多实体订阅者内容：<a href="https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber" target="_blank" rel="noreferrer">https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber</a></p><h5 id="迁移" tabindex="-1">迁移 <a class="header-anchor" href="#迁移" aria-label="Permalink to &quot;迁移&quot;">​</a></h5><p>迁移提供了一个在保存数据库中现有数据的同时增量升级数据库使其与应用中的数据模型保持同步的方法。 TypeORM 提供了一个专用 CLI 命令行工具用于生成、运行以及回滚迁移。</p><p>迁移类和 Nest 应用源码是分开的。他们的生命周期由 TypeORM CLI 管理，因此，你不能在迁移中使用依赖注入和其他 Nest 专有特性</p><p>详情查看 TypeORM 文档：<a href="https://typeorm.io/migrations" target="_blank" rel="noreferrer">https://typeorm.io/migrations</a></p><h5 id="多个数据库" tabindex="-1">多个数据库 <a class="header-anchor" href="#多个数据库" aria-label="Permalink to &quot;多个数据库&quot;">​</a></h5><p>1.创建多个数据库连接</p><p>假设有一个 Album 实体存储在数据库中</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> defaultOptions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;postgres&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5432</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;password&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;db&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">		TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">			...</span><span style="color:#E06C75;">defaultOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;user_db_host&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">		}),</span></span>
<span class="line"><span style="color:#E5C07B;">		TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">			...</span><span style="color:#E06C75;">defaultOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;albumsConnection&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;album_db_host&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">Album</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">		}),</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>如果未为连接设置任何 name ，则该连接的名称将设置为 default。</p><p>请注意，不应该有多个没有名称或同名的连接，否则它们会被覆盖。</p><p>2.告诉 TypeOrmModule.forFeature() 方法和 @InjectRepository() 装饰器应该使用哪种连接</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">		TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#E5C07B;">		TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">Album</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&quot;albumsConnection&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果不传递任何连接名称，则使用 default 连接</p><p>3.为给定的连接注入 Connection 或 EntityManager</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AlbumsService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">		@</span><span style="color:#61AFEF;">InjectConnection</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;albumsConnection&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		private</span><span style="color:#E06C75;font-style:italic;"> connection</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		@</span><span style="color:#61AFEF;">InjectEntityManager</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;albumsConnection&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		private</span><span style="color:#E06C75;font-style:italic;"> entityManager</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">EntityManager</span></span>
<span class="line"><span style="color:#ABB2BF;">	) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h5><p>在单元测试我们的应用程序时，我们通常希望避免任何数据库连接，从而使我们的测试适合于独立，并使它们的执行过程尽可能快。但是我们的类可能依赖于从连接实例中提取的存储库。那是什么？</p><h6 id="测试解决方案" tabindex="-1">测试解决方案 <a class="header-anchor" href="#测试解决方案" aria-label="Permalink to &quot;测试解决方案&quot;">​</a></h6><p>创建假存储库。为了实现这一点，我们设置了[自定义提供者]</p><p>事实上，每个注册的存储库都由 entitynamereposition 标记表示，其中 EntityName 是实体类的名称。</p><h6 id="getrepositorytoken-函数" tabindex="-1">getRepositoryToken() 函数 <a class="header-anchor" href="#getrepositorytoken-函数" aria-label="Permalink to &quot;getRepositoryToken() 函数&quot;">​</a></h6><p>@nestjs/typeorm 包提供了基于给定实体返回准备好 token 的 getRepositoryToken() 函数</p><p>1.使用</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E06C75;">		UsersService</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			provide</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">getRepositoryToken</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 使用mockRepository 作为 UsersRepository</span></span>
<span class="line"><span style="color:#E06C75;">			useValue</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">mockRepository</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>使用 mockRepository 作为 UsersRepository</p><p>每当任何提供程序使用 @InjectRepository() 装饰器请求 UsersRepository 时, Nest 会使用注册的 mockRepository 对象。</p><h5 id="定制存储库" tabindex="-1">定制存储库 <a class="header-anchor" href="#定制存储库" aria-label="Permalink to &quot;定制存储库&quot;">​</a></h5><p>TypeORM 提供称为自定义存储库的功能：<a href="https://typeorm.io/custom-repository" target="_blank" rel="noreferrer">https://typeorm.io/custom-repository</a></p><p>自定义存储库允许您扩展基本存储库类，并使用几种特殊方法对其进行丰富</p><p>1.使用 @EntityRepository() 装饰器和扩展 Repository 类 创建自定义存储库</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">EntityRepository</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Author</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AuthorRepository</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Repository</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Author</span><span style="color:#ABB2BF;">&gt; {}</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">EntityRepository</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">和</span><span style="color:#E06C75;"> Repository</span><span style="color:#E06C75;"> 来自</span><span style="color:#E06C75;"> typeorm</span><span style="color:#E06C75;"> 包</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2.将实例化责任移交给 Nest</p><p>将 AuthorRepository 类传递给 TypeOrm.forFeature() 函数</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">AuthorRepository</span><span style="color:#ABB2BF;">])],</span></span>
<span class="line"><span style="color:#E06C75;">	controller</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AuthorController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AuthorService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AuthorModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>3.注入存储库</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AuthorService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> authorRepository</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AuthorRepository</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="异步配置" tabindex="-1">异步配置 <a class="header-anchor" href="#异步配置" aria-label="Permalink to &quot;异步配置&quot;">​</a></h5><p>异步传递模块选项：forRootAsync() 函数，提供了几种处理异步数据的方法</p><h6 id="_1-使用工厂函数" tabindex="-1">1.使用工厂函数 <a class="header-anchor" href="#_1-使用工厂函数" aria-label="Permalink to &quot;1.使用工厂函数&quot;">​</a></h6><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRootAsync</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	useFactory</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">		type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;mysql&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;localhost&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">__dirname</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;/**/*.entity{.ts,.js}&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">		synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>工厂的行为与任何其他异步提供者一样(例如，它可以是异步的，并且它能够通过 inject 注入依赖)。如下</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRootAsync</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">ConfigModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">	useFactory</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">configService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ConfigService</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">		type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;mysql&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		host</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">configService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&quot;HOST&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">		port</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">configService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&quot;PORT&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">		username</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">configService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&quot;USERNAME&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">		password</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">configService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&quot;PASSWORD&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">		database</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">configService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&quot;DATABASE&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">		entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">__dirname</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;/**/*.entity{.ts,.js}&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">		synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#E06C75;">	inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">ConfigService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h6 id="_2-使用-useclass-语法" tabindex="-1">2.使用 useClass 语法 <a class="header-anchor" href="#_2-使用-useclass-语法" aria-label="Permalink to &quot;2.使用 useClass 语法&quot;">​</a></h6><p>1.在 TypeOrmConfigService 实现 TypeOrmOptionsFactory 的接口</p><p>在 TypeOrmModule 内部实例化 TypeOrmConfigService，并通过调用 createTypeOrmOptions()</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> TypeOrmConfigService</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> TypeOrmOptionsFactory</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  createTypeOrmOptions</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">TypeOrmModuleOptions</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;mysql&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;localhost&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">__</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">dirname</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;/**/*.entity{.ts,.js}&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">      synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>2.useClass 语法调用</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRootAsync</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	useClass</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">TypeOrmConfigService</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>将 TypeOrmConfigService 在内部进行实例化 TypeOrmModule，并将利用它来创建选项对象。</p><p>3.使用 useExisting 语法调用</p><p>防止在 TypeOrmModule 中创建 TypeOrmConfigService 并使用从不同模块导入的提供程序，可以使用 useExisting 语法</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRootAsync</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">ConfigModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	useExisting</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ConfigService</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个构造与 useClass 的工作原理相同，但有一个关键的区别 — TypeOrmModule 将查找导入的模块来重用现有的 ConfigService，而不是实例化一个新的 ConfigService</p><p>集成例子：<a href="https://github.com/nestjs/nest/tree/master/sample/05-sql-typeorm" target="_blank" rel="noreferrer">https://github.com/nestjs/nest/tree/master/sample/05-sql-typeorm</a></p><h3 id="nestjs-实体-映射到数据库表的类" tabindex="-1">nestjs 实体（映射到数据库表的类） <a class="header-anchor" href="#nestjs-实体-映射到数据库表的类" aria-label="Permalink to &quot;nestjs 实体（映射到数据库表的类）&quot;">​</a></h3><p>什么是实体</p><p>实体是一个映射到数据库表的类。 你可以通过定义一个新类来创建一个实体，并用<code>@Entity()</code>来标记：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Entity</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Column</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;typeorm&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Entity</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	password</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="主列" tabindex="-1">主列 <a class="header-anchor" href="#主列" aria-label="Permalink to &quot;主列&quot;">​</a></h4><h5 id="自动递增的主键" tabindex="-1">自动递增的主键 <a class="header-anchor" href="#自动递增的主键" aria-label="Permalink to &quot;自动递增的主键&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="自动递增-uuid" tabindex="-1">自动递增 uuid <a class="header-anchor" href="#自动递增-uuid" aria-label="Permalink to &quot;自动递增 uuid&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;uuid&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="列类型" tabindex="-1">列类型 <a class="header-anchor" href="#列类型" aria-label="Permalink to &quot;列类型&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;varchar&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;int&quot;</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">CreateDateColumn</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;timestamp&quot;</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E06C75;">create_time</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">Date</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="mysql-所有类型" tabindex="-1">mysql 所有类型 <a class="header-anchor" href="#mysql-所有类型" aria-label="Permalink to &quot;mysql 所有类型&quot;">​</a></h5><p>int, tinyint, smallint, mediumint, bigint, float, double, dec, decimal, numeric, date, datetime, timestamp, time, year, char, varchar, nvarchar, text, tinytext, mediumtext, blob, longtext, tinyblob, mediumblob, longblob, enum, json, binary, geometry, point, linestring, polygon, multipoint, multilinestring, multipolygon, geometrycollection</p><h5 id="自动生成列" tabindex="-1">自动生成列 <a class="header-anchor" href="#自动生成列" aria-label="Permalink to &quot;自动生成列&quot;">​</a></h5><div class="language-TypeScript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Generated</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;uuid&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">uuid</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="枚举列" tabindex="-1">枚举列 <a class="header-anchor" href="#枚举列" aria-label="Permalink to &quot;枚举列&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;enum&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    enum</span><span style="color:#ABB2BF;">:[</span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;2&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;3&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;4&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">    default</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;1&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#E06C75;">  xx</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+D+`" alt="image-20240229184139624"></p><h4 id="列选项" tabindex="-1">列选项 <a class="header-anchor" href="#列选项" aria-label="Permalink to &quot;列选项&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;varchar&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;ipaaa&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//数据库表中的列名</span></span>
<span class="line"><span style="color:#E06C75;">    nullable</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//在数据库中使列NULL或NOT NULL。 默认情况下，列是nullable：false</span></span>
<span class="line"><span style="color:#E06C75;">    comment</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;注释&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    select</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,  </span><span style="color:#7F848E;font-style:italic;">//定义在进行查询时是否默认隐藏此列。 设置为false时，列数据不会显示标准查询。 默认情况下，列是select：true</span></span>
<span class="line"><span style="color:#E06C75;">    default</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;xxxx&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//加数据库级列的DEFAULT值</span></span>
<span class="line"><span style="color:#E06C75;">    primary</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//将列标记为主要列。 使用方式和@ PrimaryColumn相同。</span></span>
<span class="line"><span style="color:#E06C75;">    update</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//指示&quot;save&quot;操作是否更新列值。如果为false，则只能在第一次插入对象时编写该值。 默认值为&quot;true&quot;</span></span>
<span class="line"><span style="color:#E06C75;">    collation</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//定义列排序规则。</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E06C75;">ip</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>ColumnOptions 中可用选项列表：</p><ul><li>type: ColumnType - 列类型。其中之一在上面.</li><li>name: string - 数据库表中的列名。</li></ul><p>默认情况下，列名称是从属性的名称生成的。 你也可以通过指定自己的名称来更改它。</p><ul><li>length: number - 列类型的长度。 例如，如果要创建 varchar（150）类型，请指定列类型和长度选项。</li><li>width: number - 列类型的显示范围。 仅用于 MySQL integer types(opens new window)</li><li>onUpdate: string - ON UPDATE 触发器。 仅用于 MySQL (opens new window).</li><li>nullable: boolean - 在数据库中使列 NULL 或 NOT NULL。 默认情况下，列是 nullable：false。</li><li>update: boolean - 指示&quot;save&quot;操作是否更新列值。如果为 false，则只能在第一次插入对象时编写该值。 默认值为&quot;true&quot;。</li><li>select: boolean - 定义在进行查询时是否默认隐藏此列。 设置为 false 时，列数据不会显示标准查询。 默认情况下，列是 select：true</li><li>default: string - 添加数据库级列的 DEFAULT 值。</li><li>primary: boolean - 将列标记为主要列。 使用方式和@ PrimaryColumn 相同。</li><li>unique: boolean - 将列标记为唯一列（创建唯一约束）。</li><li>comment: string - 数据库列备注，并非所有数据库类型都支持。</li><li>precision: number - 十进制（精确数字）列的精度（仅适用于十进制列），这是为值存储的最大位数。仅用于某些列类型。</li><li>scale: number - 十进制（精确数字）列的比例（仅适用于十进制列），表示小数点右侧的位数，且不得大于精度。 仅用于某些列类型。</li><li>zerofill: boolean - 将 ZEROFILL 属性设置为数字列。 仅在 MySQL 中使用。 如果是 true，MySQL 会自动将 UNSIGNED 属性添加到此列。</li><li>unsigned: boolean - 将 UNSIGNED 属性设置为数字列。 仅在 MySQL 中使用。</li><li>charset: string - 定义列字符集。 并非所有数据库类型都支持。</li><li>collation: string - 定义列排序规则。</li><li>enum: string[]|AnyEnum - 在 enum 列类型中使用，以指定允许的枚举值列表。 你也可以指定数组或指定枚举类。</li><li>asExpression: string - 生成的列表达式。 仅在 MySQL (opens new window)中使用。</li><li>generatedType: &quot;VIRTUAL&quot;|&quot;STORED&quot; - 生成的列类型。 仅在 MySQL (opens new window)中使用。</li><li>hstoreType: &quot;object&quot;|&quot;string&quot; -返回 HSTORE 列类型。 以字符串或对象的形式返回值。 仅在 Postgres 中使用。</li><li>array: boolean - 用于可以是数组的 postgres 列类型（例如 int []）</li><li>transformer: { from(value: DatabaseType): EntityType, to(value: EntityType): DatabaseType } - 用于将任意类型 EntityType 的属性编组为数据库支持的类型 DatabaseType。</li></ul><h4 id="simple-array-列类型" tabindex="-1">simple-array 列类型 <a class="header-anchor" href="#simple-array-列类型" aria-label="Permalink to &quot;simple-array 列类型&quot;">​</a></h4><p>有一种称为 simple-array 的特殊列类型，它可以将原始数组值存储在单个字符串列中。 所有值都以逗号分隔</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Entity</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;simple-array&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">	names</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="simple-json-列类型" tabindex="-1">simple-json 列类型 <a class="header-anchor" href="#simple-json-列类型" aria-label="Permalink to &quot;simple-json 列类型&quot;">​</a></h4><p>还有一个名为 simple-json 的特殊列类型，它可以存储任何可以通过 JSON.stringify 存储在数据库中的值。 当你的数据库中没有 json 类型而你又想存储和加载对象，该类型就很有用了。 例如：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Entity</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;simple-json&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">	profile</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">nickname</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="sequelize-集成-比较成熟-推荐使用" tabindex="-1">Sequelize 集成(比较成熟，推荐使用) <a class="header-anchor" href="#sequelize-集成-比较成熟-推荐使用" aria-label="Permalink to &quot;Sequelize 集成(比较成熟，推荐使用)&quot;">​</a></h3><p>Sequelize 集成文章：<a href="https://docs.nestjs.cn/8/techniques?id=sequelize-%e9%9b%86%e6%88%90" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/techniques?id=sequelize-集成</a></p><h4 id="sequelize-介绍" tabindex="-1">Sequelize 介绍 <a class="header-anchor" href="#sequelize-介绍" aria-label="Permalink to &quot;Sequelize 介绍&quot;">​</a></h4><ul><li>另一个使用 TypeORM 的选择是使用@nestjs/sequelize 包中的 Sequelize ROM</li><li>我们使用 sequelize-typescript 包来提供一系列额外的装饰器以声明实体。</li><li>Sequelize 支持很多种关系数据库，例如 PostgreSQL,MySQL,Microsoft SQL Server，SQLite 以及 MariaDB</li></ul><h4 id="sequelize-基本使用" tabindex="-1">Sequelize 基本使用 <a class="header-anchor" href="#sequelize-基本使用" aria-label="Permalink to &quot;Sequelize 基本使用&quot;">​</a></h4><h5 id="_1-安装需要的依赖-mysql-关系数据库为例" tabindex="-1">1.安装需要的依赖--MySQL 关系数据库为例 <a class="header-anchor" href="#_1-安装需要的依赖-mysql-关系数据库为例" aria-label="Permalink to &quot;1.安装需要的依赖--MySQL 关系数据库为例&quot;">​</a></h5><p>也适合其他任何 Sequelize 支持的数据库，按需安装所选数据库相应的客户端 API 库就可以。</p><p>安装</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @nestjs/sequelize</span><span style="color:#98C379;"> sequelize</span><span style="color:#98C379;"> sequelize-typescript</span><span style="color:#98C379;"> mysql2</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save-dev</span><span style="color:#98C379;"> @types/sequelize</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_2-将-sequelizemodule-导入到根-appmodule-中" tabindex="-1">2.将 SequelizeModule 导入到根 AppModule 中 <a class="header-anchor" href="#_2-将-sequelizemodule-导入到根-appmodule-中" aria-label="Permalink to &quot;2.将 SequelizeModule 导入到根 AppModule 中&quot;">​</a></h5><p>app.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  app.module.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">SequelizeModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/sequelize&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">		SequelizeModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			dialect</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;mysql&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;localhost&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			models</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">		}),</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>forRoot()方法支持所有 Sequelize 构造器暴露的配置属性，<a href="https://sequelize.org/v5/manual/getting-started.html#setting-up-a-connection" target="_blank" rel="noreferrer">了解更多</a></p><h6 id="额外的配置属性" tabindex="-1">额外的配置属性 <a class="header-anchor" href="#额外的配置属性" aria-label="Permalink to &quot;额外的配置属性&quot;">​</a></h6><ul><li>retryAttempts <ul><li>尝试连接数据库的次数（默认：10）</li></ul></li><li>retryDelay <ul><li>两次连接之间间隔时间(ms)(默认：3000)</li></ul></li><li>autoLoadModels <ul><li>如果为 true，模型将自动载入（默认:false)</li></ul></li><li>keepConnectionAlive <ul><li>如果为 true，在应用关闭后连接将不会关闭（默认:false)</li></ul></li><li>synchronize <ul><li>如果为 true，自动载入的模型将同步（默认：false）</li></ul></li></ul><h5 id="_3-sequelize-对象注入到整个项目中" tabindex="-1">3.Sequelize 对象注入到整个项目中 <a class="header-anchor" href="#_3-sequelize-对象注入到整个项目中" aria-label="Permalink to &quot;3.Sequelize 对象注入到整个项目中&quot;">​</a></h5><p>app.service.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Sequelize</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;sequelize-typescript&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#E06C75;font-style:italic;"> sequelize</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Sequelize</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="sequelize-模式介绍和使用" tabindex="-1">Sequelize 模式介绍和使用 <a class="header-anchor" href="#sequelize-模式介绍和使用" aria-label="Permalink to &quot;Sequelize 模式介绍和使用&quot;">​</a></h4><ul><li>模型</li><li>关系</li><li>自动载入模型</li><li>事务</li><li>迁移</li><li>多个数据库</li><li>测试</li><li>异步配置</li></ul><h3 id="mongo" tabindex="-1">Mongo <a class="header-anchor" href="#mongo" aria-label="Permalink to &quot;Mongo&quot;">​</a></h3><p>Mongo：<a href="https://docs.nestjs.cn/8/techniques?id=mongo" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/techniques?id=mongo</a></p><h4 id="mongo-介绍" tabindex="-1">Mongo 介绍 <a class="header-anchor" href="#mongo-介绍" aria-label="Permalink to &quot;Mongo 介绍&quot;">​</a></h4><p>待定</p><h4 id="mongo-基本使用" tabindex="-1">Mongo 基本使用 <a class="header-anchor" href="#mongo-基本使用" aria-label="Permalink to &quot;Mongo 基本使用&quot;">​</a></h4><p>待定</p><h4 id="mongo-模式的介绍和使用" tabindex="-1">Mongo 模式的介绍和使用 <a class="header-anchor" href="#mongo-模式的介绍和使用" aria-label="Permalink to &quot;Mongo 模式的介绍和使用&quot;">​</a></h4><ul><li>模型注入</li><li>连接</li><li>钩子（中间件）</li><li>插件</li><li>测试</li><li>异步配置</li><li>例子：<a href="https://github.com/nestjs/nest/tree/master/sample/06-mongoose" target="_blank" rel="noreferrer">https://github.com/nestjs/nest/tree/master/sample/06-mongoose</a></li></ul><h2 id="swagger-生成-api-文档-openapi" tabindex="-1">swagger 生成 API 文档（OpenAPI） <a class="header-anchor" href="#swagger-生成-api-文档-openapi" aria-label="Permalink to &quot;swagger 生成 API 文档（OpenAPI）&quot;">​</a></h2><h3 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h3><ul><li>中文：<a href="https://docs.nestjs.cn/8/openapi" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/openapi</a></li><li>英文：<a href="https://docs.nestjs.com/openapi/introduction" target="_blank" rel="noreferrer">OpenAPI (Swagger) | NestJS - A progressive Node.js framework</a></li></ul><h3 id="_1-安装依赖" tabindex="-1">1.安装依赖 <a class="header-anchor" href="#_1-安装依赖" aria-label="Permalink to &quot;1.安装依赖&quot;">​</a></h3><p>express</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @nestjs/swagger</span><span style="color:#98C379;"> swagger-ui-express</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>fastify</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @nestjs/swagger</span><span style="color:#98C379;"> fastify-swagger</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-使用" tabindex="-1">2.使用 <a class="header-anchor" href="#_2-使用" aria-label="Permalink to &quot;2.使用&quot;">​</a></h3><h4 id="_1-main-ts-文件中定义并初始化-swaggermodule-类" tabindex="-1">1).main.ts 文件中定义并初始化 SwaggerModule 类 <a class="header-anchor" href="#_1-main-ts-文件中定义并初始化-swaggermodule-类" aria-label="Permalink to &quot;1).main.ts 文件中定义并初始化 SwaggerModule 类&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">DocumentBuilder</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">SwaggerModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/swagger&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./app.module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 生成swagger文档:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// DocumentBuilder建立一个遵循OpenAPI 标准的基础文档</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> config</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> DocumentBuilder</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">setTitle</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;接口文档&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">setDescription</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;描述信息&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">setVersion</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1.0&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> document</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> SwaggerModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createDocument</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 文档接口路径</span></span>
<span class="line"><span style="color:#E5C07B;">	SwaggerModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;api-docs&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 监听端口</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li><strong>DocumentBuilder</strong> 是 Swagger 模块中的一个类，用于构建 Swagger 文档的基本信息。</li></ul><p><strong>createSwaggerDocument</strong> 函数接收一个 Nest.js 应用实例 <strong>app</strong> 作为参数。</p><ul><li><strong>SwaggerModule.createDocument(app, swaggerConfig)</strong>：根据传入的应用实例和之前构建的文档配置对象，创建 Swagger 文档。</li><li><strong>SwaggerModule.setup(&#39;docs&#39;, app, document)</strong>：将生成的 Swagger 文档设置在指定的路径上（这里是 &#39;/docs&#39;），以便 Swagger UI 可以通过该路径访问文档。</li></ul><p><strong>浏览器打开文档</strong>：<a href="http://localhost:3000/api-docs" target="_blank" rel="noreferrer">http://localhost:3000/api-docs</a></p><p>文档(通过 SwaggerModule#createDocument()方法返回)是一个遵循 OpenAPI 文档的序列化对象。</p><p><strong>swagger 文档</strong>：<a href="https://swagger.io/specification/#openapi-document" target="_blank" rel="noreferrer">https://swagger.io/specification/#openapi-document</a></p><p>除了 HTTP，也可以以 JSON/YAML 文件格式保存和使用它</p><h5 id="swagger-配置模块化" tabindex="-1">Swagger 配置模块化 <a class="header-anchor" href="#swagger-配置模块化" aria-label="Permalink to &quot;Swagger 配置模块化&quot;">​</a></h5><p>为了好维护，也可以不在 main.ts 中直接创建，而是创建配置<code>./config/swagger.config.ts</code></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">DocumentBuilder</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">SwaggerModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/swagger&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> swaggerConfig</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> DocumentBuilder</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">setTitle</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;接口文档&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">setDescription</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;描述信息&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">setVersion</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1.0&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> createSwaggerDocument</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> document</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> SwaggerModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createDocument</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">swaggerConfig</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	SwaggerModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;docs&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>然后再 main.ts 中导入 <code>./config/swagger.config</code></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./app.module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createSwaggerDocument</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./config/swagger.config&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	createSwaggerDocument</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="documentbuilder-常用的属性配置" tabindex="-1">DocumentBuilder 常用的属性配置 <a class="header-anchor" href="#documentbuilder-常用的属性配置" aria-label="Permalink to &quot;DocumentBuilder 常用的属性配置&quot;">​</a></h5><table tabindex="0"><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>setTitle(title: string)</td><td>设置文档标题。</td></tr><tr><td>setDescription(description: string)</td><td>设置文档描述。</td></tr><tr><td>setVersion(version: string)</td><td>设置文档版本。</td></tr><tr><td>setTermsOfService(termsOfService: string)</td><td>设置文档服务条款。</td></tr><tr><td>setContact(name: string, url: string, email: string)</td><td>设置文档联系信息。</td></tr><tr><td>setLicense(name: string, url: string)</td><td>设置文档许可证信息。</td></tr><tr><td>setExternalDoc(description: string, url: string)</td><td>设置外部文档链接。</td></tr><tr><td>addBearerAuth(options: AddBearerAuthOptions, name: string)</td><td>添加 Bearer Token 认证配置。</td></tr><tr><td>addApiKey(options: AddApiKeyOptions, name: string)</td><td>添加 API Key 认证配置。</td></tr><tr><td>addOAuth2(options: AddOAuth2Options, name: string)</td><td>添加 OAuth2 认证配置。</td></tr></tbody></table><h4 id="_2-创建文档目录-curd-模板" tabindex="-1">2).创建文档目录 CURD 模板 <a class="header-anchor" href="#_2-创建文档目录-curd-模板" aria-label="Permalink to &quot;2).创建文档目录 CURD 模板&quot;">​</a></h4><ul><li>1.生成目录和 CURD 文件，执行：<code>nest g res user</code> 命令</li><li>2.选择生成选项</li><li>3.输入 <code>y</code> 确定</li></ul><h4 id="_3-openapi-装饰器-可以在-swagger-文档看" tabindex="-1">3).OpenAPI 装饰器（可以在 swagger 文档看） <a class="header-anchor" href="#_3-openapi-装饰器-可以在-swagger-文档看" aria-label="Permalink to &quot;3).OpenAPI 装饰器（可以在 swagger 文档看）&quot;">​</a></h4><h5 id="常用的-swagger-装饰器" tabindex="-1">常用的 Swagger 装饰器 <a class="header-anchor" href="#常用的-swagger-装饰器" aria-label="Permalink to &quot;常用的 Swagger 装饰器&quot;">​</a></h5><table tabindex="0"><thead><tr><th>装饰器</th><th>描述</th><th>使用场景</th></tr></thead><tbody><tr><td>@ApiTags</td><td>为控制器或方法添加标签，用于组织 Swagger UI 文档。</td><td>标明控制器或方法所属的领域，使文档更易于组织。</td></tr><tr><td>@ApiOperation</td><td>为控制器方法添加操作描述，包括摘要和详细描述。</td><td>提供关于 API 操作的清晰说明，方便开发者理解 API 的作用。</td></tr><tr><td>@ApiParam</td><td>描述路径参数、请求参数或响应参数，包括名称、类型、描述等。</td><td>提供详细的参数信息，方便开发者正确使用和理解 API。</td></tr><tr><td>@ApiBody</td><td>指定请求体的 DTO 类型，用于描述请求体的结构。</td><td>明确请求体的结构，帮助开发者正确发送请求。</td></tr><tr><td>@ApiResponse</td><td>描述 API 的响应，包括状态码、描述等。</td><td>提供关于 API 响应的详细说明，方便开发者处理各种响应情况。</td></tr><tr><td>@ApiBearerAuth</td><td>指定请求需要携带 Bearer Token，用于身份验证。</td><td>在需要身份验证的接口中使用，指定需要提供 Token 信息。</td></tr><tr><td>@ApiProperty</td><td>为 DTO 类型的属性添加元数据，如描述、默认值等。</td><td>提供详细的属性信息，使开发者了解 DTO 对象的结构和约束。</td></tr><tr><td>@ApiQuery</td><td>描述查询参数，包括名称、类型、描述等。</td><td>用于标识查询参数，使开发者清晰了解 API 的可用查询选项。</td></tr><tr><td>@ApiHeader</td><td>描述请求头信息，包括名称、类型、描述等。</td><td>提供请求头的详细信息，使开发者正确设置请求头。</td></tr><tr><td>@ApiExcludeEndpoint</td><td>标记一个控制器方法不在 Swagger UI 中显示。</td><td>在一些特殊情况下，可以使用该装饰器排除不需要在文档中展示的接口。</td></tr></tbody></table><h5 id="apitags-用于给-controller-控制器添加分组标签-方便分类和过滤。" tabindex="-1">@ApiTags()：用于给 controller 控制器添加分组标签，方便分类和过滤。 <a class="header-anchor" href="#apitags-用于给-controller-控制器添加分组标签-方便分类和过滤。" aria-label="Permalink to &quot;@ApiTags()：用于给 controller 控制器添加分组标签，方便分类和过滤。&quot;">​</a></h5><p>如在：app.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiTags</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/swagger&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">ApiTags</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;默认接口&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 分组</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+h+`" alt="image-20240301000101565"></p><h5 id="apioperation-用于给路由处理器-单个接口-添加操作描述-包括摘要和详细说明。" tabindex="-1">@ApiOperation()：用于给路由处理器（单个接口）添加操作描述，包括摘要和详细说明。 <a class="header-anchor" href="#apioperation-用于给路由处理器-单个接口-添加操作描述-包括摘要和详细说明。" aria-label="Permalink to &quot;@ApiOperation()：用于给路由处理器（单个接口）添加操作描述，包括摘要和详细说明。&quot;">​</a></h5><p>如在：user.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiOperation</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ApiTags</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/swagger&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">ApiTags</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;用户&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> userService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">UserService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/add/tags&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiOperation</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;用户角色的标签添加接口&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#61AFEF;">	addTags</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">params</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">tags</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[]; </span><span style="color:#E06C75;">userId</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addTags</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiOperation</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;用户角色创建接口&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;角色&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#61AFEF;">	create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">createUserDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">CreateUserDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createUserDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiOperation</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;查询所有用户接口&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#61AFEF;">	findAll</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Query</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">query</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">keyWord</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">page</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">pageSize</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findAll</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Patch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:id&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiOperation</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;根据id查询用户&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#61AFEF;">	update</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Param</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, @</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">updateUserDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">UpdateUserDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">updateUserDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Delete</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:id&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiOperation</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;根据id删除用户&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#61AFEF;">	remove</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Param</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p><img src="`+g+`" alt="image-20240301000759916"></p><h5 id="apiparam-接口-param-参数描述-用于给路由参数添加描述-包括名称、类型、是否必填等。" tabindex="-1">@ApiParam()：（接口 Param 参数描述）用于给路由参数添加描述，包括名称、类型、是否必填等。 <a class="header-anchor" href="#apiparam-接口-param-参数描述-用于给路由参数添加描述-包括名称、类型、是否必填等。" aria-label="Permalink to &quot;@ApiParam()：（接口 Param 参数描述）用于给路由参数添加描述，包括名称、类型、是否必填等。&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiParam</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/swagger&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Patch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;:id&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiParam</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;id&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;更新单个用户数据&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#61AFEF;">  update</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Param</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;id&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">, @</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">updateUserDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">UpdateUserDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">updateUserDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><img src="`+q+`" alt="image-20240301001056419"></p><h5 id="apiquery-接口-query-参数描述-用于给查询参数添加描述-包括名称、类型、是否必填等。" tabindex="-1">@ApiQuery()：（接口 Query 参数描述）用于给查询参数添加描述，包括名称、类型、是否必填等。 <a class="header-anchor" href="#apiquery-接口-query-参数描述-用于给查询参数添加描述-包括名称、类型、是否必填等。" aria-label="Permalink to &quot;@ApiQuery()：（接口 Query 参数描述）用于给查询参数添加描述，包括名称、类型、是否必填等。&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiQuery</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/swagger&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiQuery</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;keyWord&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;字符&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiQuery</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;page&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;分页信息&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiQuery</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;pageSize&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;分页长度&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiOperation</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;查询所有用户接口&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#61AFEF;">  findAll</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Query</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">keyWord</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">page</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">pageSize</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findAll</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p><img src="`+v+`" alt="image-20240301002042369"></p><h5 id="apibody-接口-body-参数描述-用于给请求体添加描述-包括类型、是否必填等。" tabindex="-1">@ApiBody()：（接口 Body 参数描述）用于给请求体添加描述，包括类型、是否必填等。 <a class="header-anchor" href="#apibody-接口-body-参数描述-用于给请求体添加描述-包括类型、是否必填等。" aria-label="Permalink to &quot;@ApiBody()：（接口 Body 参数描述）用于给请求体添加描述，包括类型、是否必填等。&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiBody</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/swagger&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiBody</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateUserDto</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;待创建用户的数据&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#61AFEF;">  create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">createUserDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateUserDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createUserDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><img src="`+f+`" alt="image-20240301002413471"></p><h5 id="apiresponse-自定义返回信息-用于给响应添加描述-包括状态码、类型、示例等。" tabindex="-1">@ApiResponse()：（自定义返回信息）用于给响应添加描述，包括状态码、类型、示例等。 <a class="header-anchor" href="#apiresponse-自定义返回信息-用于给响应添加描述-包括状态码、类型、示例等。" aria-label="Permalink to &quot;@ApiResponse()：（自定义返回信息）用于给响应添加描述，包括状态码、类型、示例等。&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiResponse</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/swagger&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiResponse</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">201</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;成功创建用户&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">ApiResponse</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">400</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Error</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;创建用户验证错误&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#61AFEF;">  create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">createUserDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateUserDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createUserDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="`+x+`" alt="image-20240301002703658"></p><p>也会在 <strong>Schemas</strong> 里面创建对应的 type 的字段值</p><h5 id="apibearerauth-用于给控制器或路由处理器添加认证信息-表示需要使用-bearer-token-认证。" tabindex="-1">@ApiBearerAuth()：用于给控制器或路由处理器添加认证信息，表示需要使用 Bearer Token 认证。 <a class="header-anchor" href="#apibearerauth-用于给控制器或路由处理器添加认证信息-表示需要使用-bearer-token-认证。" aria-label="Permalink to &quot;@ApiBearerAuth()：用于给控制器或路由处理器添加认证信息，表示需要使用 Bearer Token 认证。&quot;">​</a></h5><p>main.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> DocumentBuilder</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">addBearerAuth</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// Bearer Token 认证</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">setTitle</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;接口文档&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">setDescription</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;描述信息&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">setVersion</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>guard.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiBearerAuth</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/swagger&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;guard&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">ApiTags</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;守卫接口&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">ApiBearerAuth</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UseGuards</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">RoleGuard</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> GuardController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>锁头图标按钮：在文档中，这个装饰器会在右上角显示一个锁的图标，点击后可以输入一个 Bearer Token，并将其添加到请求头中。锁头开了表示不用或没有 Bearer Token 验证</p><p><img src="`+k+'" alt="image-20240301003957268"></p><p><img src="'+w+'" alt="image-20240301004657314"></p><p><img src="'+j+`" alt="image-20240301004718671"></p><h5 id="apiproperty-用于给-dto-类添加属性描述-包括类型、是否必填、示例等。" tabindex="-1">@ApiProperty()：用于给 DTO 类添加属性描述，包括类型、是否必填、示例等。 <a class="header-anchor" href="#apiproperty-用于给-dto-类添加属性描述-包括类型、是否必填、示例等。" aria-label="Permalink to &quot;@ApiProperty()：用于给 DTO 类添加属性描述，包括类型、是否必填、示例等。&quot;">​</a></h5><p>如在：user/dto/create-user.dto.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiProperty</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/swagger&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CreateUserDto</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiProperty</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">example</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;大壮&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiProperty</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;string&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">example</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;又高又壮&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E06C75;">	desc</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="`+P+`" alt="image-20240301003517440"></p><h5 id="如果是继承的-这样添加" tabindex="-1">如果是继承的，这样添加 <a class="header-anchor" href="#如果是继承的-这样添加" aria-label="Permalink to &quot;如果是继承的，这样添加&quot;">​</a></h5><p>继承的代码：user/dto/update-user.dto.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">PartialType</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/mapped-types&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CreateUserDto</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./create-user.dto&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UpdateUserDto</span><span style="color:#C678DD;"> extends</span><span style="color:#61AFEF;"> PartialType</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CreateUserDto</span><span style="color:#ABB2BF;">) {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>添加后</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">PartialType</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/mapped-types&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CreateUserDto</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./create-user.dto&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiExtraModels</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ApiProperty</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getSchemaPath</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/swagger&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">ApiExtraModels</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CreateUserDto</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UpdateUserDto</span><span style="color:#C678DD;"> extends</span><span style="color:#61AFEF;"> PartialType</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CreateUserDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiProperty</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">$ref</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">getSchemaPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CreateUserDto</span><span style="color:#ABB2BF;">) })</span></span>
<span class="line"><span style="color:#E06C75;">	user</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">CreateUserDto</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果想要为 Schemas 和 Entity 添加文档，您可以使用 @ApiExtraModels() 装饰器来引入它们的类型定义，然后在 @ApiResponse() 或 @ApiBody() 等装饰器中，使用 getSchemaPath() 函数来引用它们的模式路径。</p><p>例如，假设有一个 UserSchema 和一个 UserEntity，可以这样写：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiExtraModels</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ApiResponse</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">getSchemaPath</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/swagger&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">ApiExtraModels</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">UserSchema</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">UserEntity</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;users&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiResponse</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		status</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">201</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		schema</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;object&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			properties</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				user</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">$ref</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">getSchemaPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">UserSchema</span><span style="color:#ABB2BF;">) },</span></span>
<span class="line"><span style="color:#E06C75;">				entity</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">$ref</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">getSchemaPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">UserEntity</span><span style="color:#ABB2BF;">) },</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#61AFEF;">	create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">createUserDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">CreateUserDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="_4-swagger-数据传输示例" tabindex="-1">4.swagger 数据传输示例 <a class="header-anchor" href="#_4-swagger-数据传输示例" aria-label="Permalink to &quot;4.swagger 数据传输示例&quot;">​</a></h4><ul><li>dto：客户端传输数据到服务端，数据传输对象</li><li>classes：swagger 数据传输示例文件夹</li><li>上列两个结合：在相关文件夹使用装饰器</li></ul>`,469)]))}const z=n(M,[["render",_]]);export{I as __pageData,z as default};
