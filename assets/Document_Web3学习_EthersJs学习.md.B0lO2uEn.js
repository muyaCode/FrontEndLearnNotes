import{_ as a,c as n,o as e,ah as l}from"./chunks/framework.DqD713j2.js";const h=JSON.parse('{"title":"EthersJs 学习","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Web3学习/EthersJs学习.md","filePath":"Document/Web3学习/EthersJs学习.md","lastUpdated":1750954157000}'),p={name:"Document/Web3学习/EthersJs学习.md"};function t(r,s,o,c,i,y){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="ethersjs-学习" tabindex="-1">EthersJs 学习 <a class="header-anchor" href="#ethersjs-学习" aria-label="Permalink to &quot;EthersJs 学习&quot;">​</a></h1><h2 id="简单介绍-ethers-js" tabindex="-1">简单介绍 Ethers.js <a class="header-anchor" href="#简单介绍-ethers-js" aria-label="Permalink to &quot;简单介绍 Ethers.js&quot;">​</a></h2><p>Ethers.js 与 Web3.js 一样，都是以太坊标准 JavaScript API 库，Ethers.js 最初是为了 ethers.io 设计，后来拓展为一个开放的 JS API 库，与 Web3.js 相同的是，Ethers.js 同样可以与 Moonbeam 进行正常交互，这得益于 Moonbeam 是一个完全兼容以太坊 EVM 的智能合约平台；而与 Web3.js 不同的是，Ethers.js 在使用时不需要过多的回调函数，而且可以搭配 Hardhat 工具是的语法得到进一步的优化</p><p><strong>Ethers.js</strong> 的优势之处在于紧凑小巧，同时又包含大量测试案例。它提供实用的“新手入门”文档，因此新用户也可使用。许多开发者评价 ethers.js 使用起来“简单”、“直观”，并且该库在近两年越来越受欢迎，下载量和在项目中的使用量也不断增加。</p><h2 id="ethers-js-相关网站" tabindex="-1">Ethers.js 相关网站 <a class="header-anchor" href="#ethers-js-相关网站" aria-label="Permalink to &quot;Ethers.js 相关网站&quot;">​</a></h2><p>官方 GitHub 开源库：<a href="https://github.com/ethers-io/ethers.js" target="_blank" rel="noreferrer">ethers-io/ethers.js: Complete Ethereum library and wallet implementation in JavaScript. (github.com)</a></p><p>ethers.js 官网文档：<a href="https://docs.ethers.org/v6/" target="_blank" rel="noreferrer">https://docs.ethers.org/v6/</a></p><p>官网：<a href="https://ethers.org/" target="_blank" rel="noreferrer">ethers</a></p><p><strong>ethers.js 中文文档</strong>：<a href="https://learnblockchain.cn/ethers_v5/" target="_blank" rel="noreferrer">ethers.js 中文文档 (learnblockchain.cn)</a></p><p><a href="https://github.com/WTFAcademy/WTF-Ethers" target="_blank" rel="noreferrer">WTFAcademy/WTF-Ethers: 我最近在重新学 ethers.js，巩固一下细节，也写一个“WTF Ethers.js 极简入门”，供小白们使用，每周更新 1-3 讲。 (github.com)</a></p><h2 id="ethers-js-入门" tabindex="-1">Ethers.js 入门 <a class="header-anchor" href="#ethers-js-入门" aria-label="Permalink to &quot;Ethers.js 入门&quot;">​</a></h2><p><a href="https://wtf.academy/ether-start/" target="_blank" rel="noreferrer">Ethers.js 入门 | WTF Academy</a></p><h2 id="ethers-js-有四个模块-构成应用程序编程界面-api" tabindex="-1">ethers.js 有四个模块，构成应用程序编程界面 (API) <a class="header-anchor" href="#ethers-js-有四个模块-构成应用程序编程界面-api" aria-label="Permalink to &quot;ethers.js 有四个模块，构成应用程序编程界面 (API)&quot;">​</a></h2><ol><li>Ethers.provider</li><li>Ethers.contract</li><li>Ethers.utils</li><li>Ethers.wallets</li></ol><h3 id="ethers-provider-有什么作用" tabindex="-1">ethers.provider 有什么作用？ <a class="header-anchor" href="#ethers-provider-有什么作用" aria-label="Permalink to &quot;ethers.provider 有什么作用？&quot;">​</a></h3><p>Ethers.provider 的作用是封装与以太坊区块链的连接。它可以用于签发查询和发送已签名的交易，这将改变区块链的状态。下面显示了三个说明性示例：</p><ul><li><em>ethers.providers.InfuraProvider</em> 的作用是使你可以与 Infura 托管的以太坊节点网络建立连接</li><li><em>ethers.provider.getBalance</em> 将为你获取区块链中某个地址或区块的以太坊余额</li><li><em>ethers.provider.resolve</em> 将解析传递到以太坊地址的以太坊名称服务 (ENS) 名称(通过“承诺”— 如果你刚接触 JavaScript，我们建议你阅读有关承诺[7]的更多内容，它们的作用是在未来某个时间点对它们进行计算时可以返回数据)。</li></ul><p>注：<em>web3.js</em> 也有服务于此目的的提供商，位于 <em>web3</em> 基础模块中。<em>Ethers.js</em> 和 <em>web3.js</em> 的组织方式截然不同，因此尽管两个库的功能非常相似，但模块间并非总是能清晰对应。</p><h3 id="ethers-contract-有什么作用" tabindex="-1">ethers.contract 有什么作用？ <a class="header-anchor" href="#ethers-contract-有什么作用" aria-label="Permalink to &quot;ethers.contract 有什么作用？&quot;">​</a></h3><p>Ethers.contract 的作用是部署智能合约并与它交互。具体来说，该模块中的函数用于侦听从智能合约发射的事件、调用智能合约提供的函数、获取有关智能合约的信息，以及部署智能合约。下面显示了两个说明性示例：</p><ul><li><em>ethers.ContractFactory.fromSolidity</em> 从 Solidity 编译器的编译器输出或从 Truffle 生成的 JSON 文件创建一个用于部署智能合约的“工厂”。<em>ethers.Contract</em> 使你可以与已部署的智能合约进行交互。</li></ul><h3 id="ethers-utils-有什么作用" tabindex="-1">ethers.utils 有什么作用？ <a class="header-anchor" href="#ethers-utils-有什么作用" aria-label="Permalink to &quot;ethers.utils 有什么作用？&quot;">​</a></h3><p>Ethers.utils 提供用于格式化数据和处理用户输入的实用程序函数。Ethers.utils 的作用方式与 web3-utils 相似，能够简化去中心化应用的构建流程。下面提供了三个示例：</p><ul><li><em>ethers.utils.getContractAddress</em> 从用于部署智能合约的交易中提取智能合约地址</li><li><em>ethers.utils.computeAddress</em> 通过传递与地址相关的公钥或私钥的函数来计算地址 <em>ethers.utils.formatEther</em> 将所传递的 Wei 金额转换为 Ether 十进制字符串格式</li></ul><h3 id="ethers-wallet-有什么作用" tabindex="-1">ethers.wallet 有什么作用？ <a class="header-anchor" href="#ethers-wallet-有什么作用" aria-label="Permalink to &quot;ethers.wallet 有什么作用？&quot;">​</a></h3><p>Ethers.wallet 提供的功能与我们目前讨论过的其他模块截然不同。Ethers.wallet 的作用是使你可以与现有钱包(以太坊地址)建立连接、创建新钱包以及对交易签名。下面提供了三个示例：</p><ul><li><em>ethers.wallet.createRandom</em> 将创建随机新账户。</li><li><em>ethers.wallet.sign</em> 将对交易签名并将已签名的交易返回为十六进制字符串的形式(通过“承诺”— 如果你刚接触 JavaScript，我们建议你阅读有关承诺[8]的更多内容，它们的作用是在未来某个时间点对它们进行计算时可以返回数据)。</li><li><em>ethers.wallet.getBalance</em> 将为我们提供钱包地址的以太坊余额。</li></ul><h2 id="ethers-js-hardhat-的安装与常用-api-介绍" tabindex="-1">Ethers.js(Hardhat)的安装与常用 API 介绍 <a class="header-anchor" href="#ethers-js-hardhat-的安装与常用-api-介绍" aria-label="Permalink to &quot;Ethers.js(Hardhat)的安装与常用 API 介绍&quot;">​</a></h2><h3 id="一、ethers-js-hardhat-的安装" tabindex="-1">一、Ethers.js(Hardhat)的安装 <a class="header-anchor" href="#一、ethers-js-hardhat-的安装" aria-label="Permalink to &quot;一、Ethers.js(Hardhat)的安装&quot;">​</a></h3><p>Ethers.js 的安装分为两种，一种为直接使用命令行安装，另一种为通过 Hardhat 间接安装（配合 Hardhat 使用），推荐第二种通过 Hardhat👷 的方式使用 Ethers.js（安装 Hardhat 时通过 hardhat-ethers 插件安装经过包装后的 Ethers.js）</p><p>安装步骤如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 安装命令</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> ethers</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 安装步骤</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> init</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save-dev</span><span style="color:#98C379;"> hardhat</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> hardhat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>默认下载最新版本包。</p><h3 id="引入依赖" tabindex="-1">引入依赖 <a class="header-anchor" href="#引入依赖" aria-label="Permalink to &quot;引入依赖&quot;">​</a></h3><p><strong>Node.js 环境</strong>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">const</span><span style="color:#98C379;"> {</span><span style="color:#98C379;"> ethers</span><span style="color:#98C379;"> }</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">&quot;ethers&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#61AFEF;">//</span><span style="color:#98C379;"> node.js</span><span style="color:#98C379;"> require</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">import</span><span style="color:#98C379;"> {</span><span style="color:#98C379;"> ethers</span><span style="color:#98C379;"> }</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> &quot;ethers&quot;</span><span style="color:#ABB2BF;">;  </span><span style="color:#61AFEF;">//</span><span style="color:#98C379;"> ES6</span><span style="color:#98C379;"> or</span><span style="color:#98C379;"> TypeScript</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>网页浏览器环境</strong>：</p><p>对于快速演示或原型设计，您可以从 CDN 将其加载到 Web 应用程序中：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E5C07B;"> ES6</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> Browser</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;module&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    import </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;"> ethers</span><span style="color:#C678DD;"> }</span><span style="color:#ABB2BF;"> from &quot;https://cdn.ethers.io/lib/ethers-5.2.esm.min.js&quot;;</span></span>
<span class="line"><span style="color:#ABB2BF;">    // Your code here...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#61AFEF;"> ES3</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">UMD</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> Browser</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;https://cdn.ethers.io/lib/ethers-5.6.umd.min.js&quot;</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;application/javascript&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>将 ethers 库复制到您自己的网络服务器并自己提供服务通常是更好的做法（出于安全原因）。</p></blockquote><h3 id="二、常用-api-介绍" tabindex="-1">二、常用 API 介绍 <a class="header-anchor" href="#二、常用-api-介绍" aria-label="Permalink to &quot;二、常用 API 介绍&quot;">​</a></h3><p>Ethers.js 库中的 API 主要由 4 大部分组成：<strong>Providers</strong>，<strong>Signers</strong>，<strong>Contract Interaction</strong>，<strong>Utilities</strong></p><table tabindex="0"><thead><tr><th><strong>Provider</strong></th><th>Provider（在 ethers 中）是一个为以太坊网络连接提供抽象的类。它提供对区块链及其状态的只读访问。</th></tr></thead><tbody><tr><td><strong>Signer</strong></td><td>签名者是一个（通常）以某种方式直接或间接访问私钥的类，它可以签署消息和交易以授权网络向您的帐户收取以太币，执行操作。</td></tr><tr><td><strong>Contract</strong></td><td>合约是一种抽象，表示与以太坊网络上特定合约的连接，因此应用程序可以像使用普通 JavaScript 对象一样使用它。</td></tr><tr><td><strong>Utilities</strong></td><td></td></tr></tbody></table><h4 id="_1-provider" tabindex="-1">1. Provider <a class="header-anchor" href="#_1-provider" aria-label="Permalink to &quot;1. Provider&quot;">​</a></h4><p>Provider 是以太坊网络连接的抽象，其为标准以太坊节点功能提供简洁、一致的接口</p><p>在 Provider 中比较常用的方法为 JsonRpcProvider，该方法允许通过 JSON-RPC 的方式连接某一个节点网络</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// new ethers.providers.JsonRpcProvider([urlOrConnectionInfo[, networkish]])</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> provider</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">providers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">JsonRpcProvider</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">	&quot;https://rpc.api.moonbase.moonbeam.network&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		chainId</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1287</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;moonbase-alpha&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在上面的代码示例中，通过 JsonRpcProvider 的方式，连接到了 Moonbase Alpha 测试网中，在其中不止可以定义 url 参数，还可以定义该网络的 chainId 与 name 等信息</p><h4 id="_2-signers" tabindex="-1">2. Signers <a class="header-anchor" href="#_2-signers" aria-label="Permalink to &quot;2. Signers&quot;">​</a></h4><p>Signer 是以太坊账户的抽象，可用于对消息和交易进行签名，并将签名过的交易发送到以太坊网络以执行状态更改操作</p><p>在 Signer 中比较常用的方法为 Wallet，只有 Wallet 可以使用私钥对交易和信息进行签名</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// new ethers.Wallet(privateKey[, provider])</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> alice</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Wallet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">privateKeyAlice</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">provider</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> bob</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Wallet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">privateKeyBob</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">provider</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> txReceipt</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> alice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sendTransaction</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	to</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">bob</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">address</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseEther</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1.0&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#E5C07B;"> txReceipt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在上面的代码示例中，使用 Wallet 定义了 alice 与 bob 两个 Signer，接下来 alice 调用方法 sendTransaction()方法向 bob 发起交易，转移了 1 ether 的 token</p><h4 id="_3-contract-interaction" tabindex="-1">3. Contract Interaction <a class="header-anchor" href="#_3-contract-interaction" aria-label="Permalink to &quot;3. Contract Interaction&quot;">​</a></h4><p>部署合约与生成合约实例离不开下面介绍的两个方法：ContractFactory()与 Contract，具体方法直接看下面的代码示例接口</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// deploy contract</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ContractFactory</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">interface</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bytecode</span><span style="color:#ABB2BF;">[, </span><span style="color:#E06C75;">signer</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#E5C07B;">contractFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deploy</span><span style="color:#ABB2BF;">(..</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">contract</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deployed</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// generate contract instance</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Contract</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">address</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">abi</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">signerOrProvider</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>其中 ContracFactory 中的 interface 参数代表合约的 abi 使用 Hardhat 编译过后的合约，其 abi 与 bytecode 等编译信息都存放在了项目根目录下的 artifacts/contracts/CONTRACT_NAME.json 文件中</p><h4 id="_4-utilities" tabindex="-1">4. Utilities <a class="header-anchor" href="#_4-utilities" aria-label="Permalink to &quot;4. Utilities&quot;">​</a></h4><p>utilities 下提供的各种方法更像是各种各样的工具，比较常用的有对 BigNumber 的操作，以太坊 Token 单位的直接转换以及将 string 于 bytes32 相互转化的工具等，以下列出几个常见方法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// BigNumber</span></span>
<span class="line"><span style="color:#E5C07B;">BigNumber</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toNumber</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> number</span></span>
<span class="line"><span style="color:#E5C07B;">BigNumber</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toHexString</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> string</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">DataHexString</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Display Logic and Input</span></span>
<span class="line"><span style="color:#E5C07B;">ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseEther</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> BigNumber</span></span>
<span class="line"><span style="color:#E5C07B;">ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">formatEther</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">value</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">BigNumber</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Strings</span></span>
<span class="line"><span style="color:#E5C07B;">ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseBytes32String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">aBytesLike</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> string</span></span>
<span class="line"><span style="color:#E5C07B;">ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">formatBytes32String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> string</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">DataHexString</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">32</span><span style="color:#56B6C2;">&gt;&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol><li><strong>BigNumber.toNumber()</strong>：将 BigNumber 的值转换为 JavaScript 值</li><li><strong>BigNumber.toHexString()</strong>：将 BigNumber 值转换为 0x 开头，16 进制的值</li><li><strong>ethers.utils.parseEther(string)</strong>：将一个整数转换为以 ether 为单位的大整数</li><li><strong>ethers.utils.formatEther(value(BigNumber))</strong>：将大整数转换为以 ether 为单位的整数</li><li><strong>ethers.utils.parseBytes32String(aBytesLike)</strong>：返回一个 bytes 32 编码数据表示的解码字符串</li><li><strong>ethers.utils.formatBytes32String(text)</strong>：返回文本的 bytes 32 字符串表示形式</li></ol><h4 id="hardhat-ethers-升级接口" tabindex="-1">hardhat-ethers 升级接口 <a class="header-anchor" href="#hardhat-ethers-升级接口" aria-label="Permalink to &quot;hardhat-ethers 升级接口&quot;">​</a></h4><p>使用原生 Ethers.js 库进行与节点进行交互时，特别在部署合约方面的接口使用中，会发现原生接口的调用比较麻烦</p><p>因此 Hardhat 在此方面做了优化，即 Hardhat 提供了一个 hardhat-ethers 插件，该插件会提供一个 ethers 对象，该对象与 Ethers.js 有着相同的 API，同时还有一些 Hardhat 特别定义的接口</p><p>其特别定义的接口主要体现在以下是三个方面：</p><ul><li>不需要额外定义 provider，provider 已经在执行 npx hardhat --network NET run SCRIPT 命令时已自动连接到了选定网络中</li><li>getSigner() =&gt; Signer，该接口直接在 hardhat 配置中获取 signer，不需要定义 wallet，但需要提前将账户私钥信息填写到 Hardhat 配置文件中</li><li>getContracFactory(contractName[, signer]) =&gt; contractFactory，该接口简化了原生 contractFactory()接口，使得只需要合约的名字即可产生 contractFactory 对象 以部署一个 ERC-20 合约为例：</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// using hardhat-ethers API to deploy an ERC20 contract</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// get signer</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> alith</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSigner</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// deploy contract</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Token</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> ehters</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getContractFactory</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Token&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">alith</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> token</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> Token</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deploy</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;MoonToken&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;MTK&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#E5C07B;"> token</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deployed</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// using raw ethers.js API to deploy the same ERC20 contract</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// get provider and signer</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> provider</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">providers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">JsonRpcProvider</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:9933&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> alith</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Wallet</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">privateKeyAlith</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">provider</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// deploy contract</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Token</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ethers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ContractFactory</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">interface</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bytecode</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">alith</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> token</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> Token</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deploy</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;MoonToken&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;MTK&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#E5C07B;"> token</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deployed</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>通过上面的代码示例可以很直观的发现，使用 hardhat-ethers 提供的 API 在部署合约时会更方便一些</p>`,68)]))}const d=a(p,[["render",t]]);export{h as __pageData,d as default};
