import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/%E5%90%8E%E8%BF%9B%E5%85%88%E5%87%BA.D_aPxjAw.jpg",o="/FrontEndLearnNotes/assets/%E4%BD%BF%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E4%BD%99%E6%95%B0%E6%B3%95%E5%85%A5%E6%A0%88.CwkRxSFc.jpg",r="/FrontEndLearnNotes/assets/%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA.DUKe2nR1.jpg",t="/FrontEndLearnNotes/assets/%E4%B8%80%E7%A7%8D%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84.BybpLwDN.jpg",c="/FrontEndLearnNotes/assets/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3.CZnIImcK.jpg",B="/FrontEndLearnNotes/assets/%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C1.BgVPDWJX.jpg",i="/FrontEndLearnNotes/assets/%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C2.bpUHNDvP.jpg",y="/FrontEndLearnNotes/assets/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.BTAbSzjr.jpg",b="/FrontEndLearnNotes/assets/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A82.bwCirO8X.jpg",F="/FrontEndLearnNotes/assets/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.BNc1_Mf-.jpg",f=JSON.parse('{"title":"JavaScript数据结构与算法","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript数据结构与算法/JavaScript数据结构与算法.md","filePath":"Document/JavaScript数据结构与算法/JavaScript数据结构与算法.md","lastUpdated":1750954157000}'),u={name:"Document/JavaScript数据结构与算法/JavaScript数据结构与算法.md"};function A(C,s,m,E,d,h){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="javascript数据结构与算法" tabindex="-1">JavaScript数据结构与算法 <a class="header-anchor" href="#javascript数据结构与算法" aria-label="Permalink to &quot;JavaScript数据结构与算法&quot;">​</a></h1><p><strong>数据结构</strong>是计算机基础，<strong>算法</strong>是计算机科学</p><p>**《学习JavaScript数据结构与算法第3版》**学习笔记</p><p>B站视频：<a href="https://www.bilibili.com/video/BV1x7411L7Q7/?p=1&amp;vd_source=5f0c99b3deddffe219938763769b15ac" target="_blank" rel="noreferrer">01_课程内容介绍_哔哩哔哩_bilibili</a></p><p>源码笔记：<a href="https://github.com/XPoet/JS-Data-Structures-and-Algorithms" target="_blank" rel="noreferrer">XPoet/js-data-structures-and-algorithms: 从 0 到 1 学习 JavaScript 数据结构与算法 (github.com)</a></p><p>博客：<a href="https://www.cnblogs.com/AhuntSun-blog/p/12636718.html" target="_blank" rel="noreferrer">JavaScript数据结构与算法博客目录 - AhuntSun - 博客园 (cnblogs.com)</a></p><h2 id="刷算法题常用的-js-基础扫盲" tabindex="-1">刷算法题常用的 JS 基础扫盲 <a class="header-anchor" href="#刷算法题常用的-js-基础扫盲" aria-label="Permalink to &quot;刷算法题常用的 JS 基础扫盲&quot;">​</a></h2><p><a href="https://juejin.cn/post/7087134135193436197" target="_blank" rel="noreferrer">前端算法入门一：刷算法题常用的JS基础扫盲 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7087286814230183943" target="_blank" rel="noreferrer">前端算法入门二：时间空间复杂度&amp;8大数据结构的JS实现 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7088725301974269960" target="_blank" rel="noreferrer">前端算法入门三：5大排序算法&amp;2大搜索&amp;4大算法思想 - 掘金 (juejin.cn)</a></p><p><a href="https://github.com/hovinghuang/fe-agorithm-interview" target="_blank" rel="noreferrer">hovinghuang/fe-agorithm-interview: 前端算法面试常考题目解析。 (github.com)</a></p><h2 id="一、数据结构" tabindex="-1">一、数据结构 <a class="header-anchor" href="#一、数据结构" aria-label="Permalink to &quot;一、数据结构&quot;">​</a></h2><p>前置知识：JavaScript数组相关属性和方法</p><h3 id="栈" tabindex="-1">栈 <a class="header-anchor" href="#栈" aria-label="Permalink to &quot;栈&quot;">​</a></h3><h4 id="栈概念" tabindex="-1">栈概念 <a class="header-anchor" href="#栈概念" aria-label="Permalink to &quot;栈概念&quot;">​</a></h4><p>栈是一种遵从<strong>后进先出</strong>（LIFO）原则的有序集合。</p><p>顶部进，顶部移除</p><p><img src="'+e+`" alt="后进先出"></p><h4 id="栈结构" tabindex="-1">栈结构 <a class="header-anchor" href="#栈结构" aria-label="Permalink to &quot;栈结构&quot;">​</a></h4><p>新添加的或待删除的元素都保存在栈的同一端，称作栈顶，另一端就叫栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p><p>在现实生活中也能发现很多栈的例子。一摞书或者餐厅里叠放的盘子</p><p>栈也被用在编程语言的编译器和内存中保存变量、方法调用等，也被用于浏览器历史记录（浏览器的返回按钮）。</p><h4 id="栈操作" tabindex="-1">栈操作 <a class="header-anchor" href="#栈操作" aria-label="Permalink to &quot;栈操作&quot;">​</a></h4><p>使用数组来保存栈里的元素，数组允许我们在任何位置添加或删除元素</p><table tabindex="0"><thead><tr><th>方法名</th><th>操作</th></tr></thead><tbody><tr><td>push(element(s))</td><td>添加一个（或几个）新元素到栈顶。</td></tr><tr><td>pop()</td><td>移除栈顶的元素，同时返回被移除的元素。</td></tr><tr><td>peek()</td><td>返回栈顶的元素，不对栈做任何修改（该方法不会移除栈顶的元素，仅仅返回它）。</td></tr><tr><td>isEmpty()</td><td>如果栈里没有任何元素就返回 true，否则返回 false。</td></tr><tr><td>clear()</td><td>移除栈里的所有元素。</td></tr><tr><td>size()</td><td>返回栈里的元素个数。该方法和数组的 length 属性很类似。</td></tr></tbody></table><p>实践</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ES5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 函数：函数/构造器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// this指向要创建的对象</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> Stack</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> items</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> []; </span><span style="color:#7F848E;font-style:italic;">// 私有</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// push 栈顶添加元素</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">element</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// pop 栈顶移除元素</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// peek 检查栈顶</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">peek</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> items</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 检查栈 是否为空</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEmpty</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 清除栈</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">		items</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取栈的大小</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 检查items</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItems</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> items</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> stack</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Stack</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">peek</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItems</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h4 id="栈实战-十进制转二进制" tabindex="-1">栈实战：十进制转二进制 <a class="header-anchor" href="#栈实战-十进制转二进制" aria-label="Permalink to &quot;栈实战：十进制转二进制&quot;">​</a></h4><p>进制转换法：余数法</p><p>文章方法：<a href="https://blog.csdn.net/u013185349/article/details/123182353" target="_blank" rel="noreferrer">进制转换算法_算法进制转换_AcceptedLin的博客-CSDN博客</a></p><ul><li><img src="`+o+`" alt="使用栈实现余数法入栈"></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 十进制转二进制--&gt;需要和上面的实践定义的构造函数</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> divBy2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> stack</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Stack</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> yushu</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> string2</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        yushu</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> number</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">yushu</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        number</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">number</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 移除</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">        string2</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> string2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">divBy2</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>栈的作用：在编程语言的编译器和内存中保存变量、方法调用</p><hr><h3 id="队列" tabindex="-1">队列 <a class="header-anchor" href="#队列" aria-label="Permalink to &quot;队列&quot;">​</a></h3><h4 id="队列的概念" tabindex="-1">队列的概念 <a class="header-anchor" href="#队列的概念" aria-label="Permalink to &quot;队列的概念&quot;">​</a></h4><p>队列是遵循<strong>先进先出</strong>（FIFO，也称为先来先服务）原则的一组有序的项。</p><p>队列在尾部添加新元素，并从顶部移除元素。最新添加的元素必须排在队列的末尾。</p><p><img src="`+r+`" alt="先进先出"></p><h4 id="队列的例子" tabindex="-1">队列的例子 <a class="header-anchor" href="#队列的例子" aria-label="Permalink to &quot;队列的例子&quot;">​</a></h4><p>在现实中，最常见的队列的例子就是排队--买东西、买票等</p><h4 id="队列操作" tabindex="-1">队列操作 <a class="header-anchor" href="#队列操作" aria-label="Permalink to &quot;队列操作&quot;">​</a></h4><p>创建队列，添加一些队列可用的方法</p><table tabindex="0"><thead><tr><th>方法名</th><th>操作</th></tr></thead><tbody><tr><td>enqueue(element(s))</td><td>向队列尾部添加一个（或多个）新的项。</td></tr><tr><td>dequeue()</td><td>移除队列的第一项（即排在队列最前面的项）并返回被移除的元素。</td></tr><tr><td>peek()</td><td>返回队列中第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动（不移除元素，只返回元素信息——与 Stack 类的 peek 方法非常类似）。该方法在其他语言中也可以叫作 front 方法。</td></tr><tr><td>isEmpty()</td><td>如果队列中不包含任何元素，返回 true，否则返回 false。</td></tr><tr><td>size()</td><td>返回队列包含的元素个数，与数组的 length 属性类似。</td></tr></tbody></table><p>代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ES5</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 函数：函数/构造器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// this指向要创建的对象</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> Queue</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> items</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 入队</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">enqueue</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">element</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 出队</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dequeue</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 查看队列头</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">peek</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> items</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 检查队列是否为空</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEmpty</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 检查队列长度</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> q</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Queue</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="循环队列-击鼓传花" tabindex="-1">循环队列--&gt;击鼓传花 <a class="header-anchor" href="#循环队列-击鼓传花" aria-label="Permalink to &quot;循环队列--&gt;击鼓传花&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用上面的队列操作构造函数</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> jgch</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">names</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">number</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> q</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Queue</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> names</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">enqueue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">names</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 重要部分</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> taotai</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 2</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> number</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">enqueue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dequeue</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">        taotai</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dequeue</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;淘汰的玩家是 - &#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> taotai</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    returm</span><span style="color:#E5C07B;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dequeue</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 玩家列表</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> names</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;d&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;e&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 游戏规则</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 执行击鼓传花游戏</span></span>
<span class="line"><span style="color:#61AFEF;">jgch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">names</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="优先队列和辅助类" tabindex="-1">优先队列和辅助类 <a class="header-anchor" href="#优先队列和辅助类" aria-label="Permalink to &quot;优先队列和辅助类&quot;">​</a></h4><p>比如：会员 --&gt; 优先</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> PriorityQueue</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> items</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 辅助类</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#61AFEF;"> QueueItem</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">priorty</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">element</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> element</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">priorty</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> priorty</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 队列方法</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">enqueue</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">priorty</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> queueItem</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> QueueItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">element</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">priorty</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> added</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">queueItem</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">priorty</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> items</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">priorty</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">queueItem</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">                added</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">added</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">queItem</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItems</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> items</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> pq</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> PriortyQueue</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">pq</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">enqueue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;小明&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">pq</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">enqueue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;小黑&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h4 id="双端队列" tabindex="-1">双端队列 <a class="header-anchor" href="#双端队列" aria-label="Permalink to &quot;双端队列&quot;">​</a></h4><p>双端队列（deque，或称 double-ended queue）是一种允许我们同时从前端和后端添加和移除元素的特殊队列。</p><p>双端队列在现实生活中的例子有电影院、餐厅中排队的队伍等。举个例子，一个刚买了票的人如果只是还需要再问一些简单的信息，就可以直接回到队伍的头部。另外，在队伍末尾的人如果赶时间，他可以直接离开队伍。</p><p>在计算机科学中，双端队列的一个常见应用是存储一系列的撤销操作。每当用户在软件中进行了一个操作，该操作会被存在一个双端队列中（就像在一个栈里）。当用户点击撤销按钮时，该操作会被从双端队列中弹出，表示它被从后面移除了。在进行了预先定义的一定数量的操作后，先进行的操作会被从双端队列的前端移除。由于双端队列同时遵守了先进先出和后进先出原则，可以说它是把队列和栈相结合的一种数据结构。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h3 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h3><h4 id="链表概念" tabindex="-1">链表概念 <a class="header-anchor" href="#链表概念" aria-label="Permalink to &quot;链表概念&quot;">​</a></h4><p>链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。下图展示了一个链表的结构。</p><p><img src="`+t+'" alt="一种链表结构"></p><p>更具体表现</p><p><img src="'+c+'" alt="链表结构详解"></p><h4 id="链表操作" tabindex="-1">链表操作 <a class="header-anchor" href="#链表操作" aria-label="Permalink to &quot;链表操作&quot;">​</a></h4><p>需要实现的类中的方法列表</p><table tabindex="0"><thead><tr><th>方法名</th><th>操作</th></tr></thead><tbody><tr><td>push(element)</td><td>向链表尾部添加一个新元素。</td></tr><tr><td>insert(element, position)</td><td>向链表的特定位置插入一个新元素。</td></tr><tr><td>getElementAt(index)</td><td>返回链表中特定位置的元素。如果链表中不存在这样的元素，则返回 undefined。</td></tr><tr><td>remove(element)</td><td>从链表中移除一个元素。</td></tr><tr><td>indexOf(element)</td><td>返回元素在链表中的索引。如果链表中没有该元素则返回-1。</td></tr><tr><td>removeAt(position)</td><td>从链表的特定位置移除一个元素。</td></tr><tr><td>isEmpty()</td><td>如果链表中不包含任何元素，返回 true，如果链表长度大于 0则返回 false。</td></tr><tr><td>size()</td><td>返回链表包含的元素个数，与数组的 length 属性类似。</td></tr><tr><td>toString()</td><td>返回表示整个链表的字符串。由于列表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值。</td></tr></tbody></table><p>1</p><p><img src="'+B+'" alt="链表操作1"></p><p>2</p><p><img src="'+i+`" alt="链表操作2"></p><p>示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> LikedList</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 链表头</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> head</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 链表长度</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> length</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 辅助类：节点</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#61AFEF;"> Node</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">element</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> element</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 链表尾部添加元素</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Node</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">element</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">head</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            head</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            var</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                current</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // while循环执行完成之后，current已经是最后一项</span></span>
<span class="line"><span style="color:#E5C07B;">            current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">        length</span><span style="color:#56B6C2;"> ++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 链表的某一位置添加元素</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">position</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Node</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">element</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 越界</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">position</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> position</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">position</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                var</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                head</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                head</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                var</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                var</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                var</span><span style="color:#E06C75;"> previous</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                while</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                    previous</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                    current</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                    index</span><span style="color:#56B6C2;"> ++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#E5C07B;">                previous</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">                node</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> curent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E06C75;">            length</span><span style="color:#56B6C2;"> ++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 移除</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeAt</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">position</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">position</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> position</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">position</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                var</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                head</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                var</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                var</span><span style="color:#E06C75;"> previous</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                var</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">                while</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> position</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                    previous</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                    current</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                    index</span><span style="color:#56B6C2;"> ++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 跳出循环的时候，index == position</span></span>
<span class="line"><span style="color:#E5C07B;">                previous</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E06C75;">            length</span><span style="color:#56B6C2;"> --</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> current</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取元素的位置</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        var</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">current</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">element</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E06C75;">            current</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            index</span><span style="color:#56B6C2;"> ++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 删除某个位置的元素</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">element</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 检测是否为空</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEmpty</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    	return</span><span style="color:#E06C75;"> length</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取长度</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">size</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取链表头部</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHead</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实例化操作</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> l</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> LikedList</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">l</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">l</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">l</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">l</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">l</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br></div></div><h4 id="双向链表" tabindex="-1">双向链表 <a class="header-anchor" href="#双向链表" aria-label="Permalink to &quot;双向链表&quot;">​</a></h4><p>双向链表和普通链表的区别在于，在链表中，一个节点只有链向下一个节点的链接；而在双向链表中，链接是双向的：一个链向下一个元素，另一个链向前一个元素，如下图所示。</p><p><img src="`+y+'" alt="双向链表"></p><p>2</p><p><img src="'+b+'" alt="双向链表2"></p><h4 id="循环链表" tabindex="-1">循环链表 <a class="header-anchor" href="#循环链表" aria-label="Permalink to &quot;循环链表&quot;">​</a></h4><p>双向循环链表</p><p><img src="'+F+'" alt="双向循环链表"></p><h4 id="有序链表" tabindex="-1">有序链表 <a class="header-anchor" href="#有序链表" aria-label="Permalink to &quot;有序链表&quot;">​</a></h4><hr><h3 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-label="Permalink to &quot;集合&quot;">​</a></h3><h4 id="子集" tabindex="-1">子集 <a class="header-anchor" href="#子集" aria-label="Permalink to &quot;子集&quot;">​</a></h4><h4 id="交集" tabindex="-1">交集 <a class="header-anchor" href="#交集" aria-label="Permalink to &quot;交集&quot;">​</a></h4><h4 id="并集" tabindex="-1">并集 <a class="header-anchor" href="#并集" aria-label="Permalink to &quot;并集&quot;">​</a></h4><h4 id="差集" tabindex="-1">差集 <a class="header-anchor" href="#差集" aria-label="Permalink to &quot;差集&quot;">​</a></h4><hr><h3 id="字典和散列表" tabindex="-1">字典和散列表 <a class="header-anchor" href="#字典和散列表" aria-label="Permalink to &quot;字典和散列表&quot;">​</a></h3><h3 id="树" tabindex="-1">树 <a class="header-anchor" href="#树" aria-label="Permalink to &quot;树&quot;">​</a></h3><p>前置知识：JavaScript递归相关知识</p><h4 id="二叉搜索树" tabindex="-1">二叉搜索树 <a class="header-anchor" href="#二叉搜索树" aria-label="Permalink to &quot;二叉搜索树&quot;">​</a></h4><h4 id="自平衡树" tabindex="-1">自平衡树 <a class="header-anchor" href="#自平衡树" aria-label="Permalink to &quot;自平衡树&quot;">​</a></h4><h4 id="树遍历" tabindex="-1">树遍历 <a class="header-anchor" href="#树遍历" aria-label="Permalink to &quot;树遍历&quot;">​</a></h4><hr><h3 id="二叉堆和堆排序" tabindex="-1">二叉堆和堆排序 <a class="header-anchor" href="#二叉堆和堆排序" aria-label="Permalink to &quot;二叉堆和堆排序&quot;">​</a></h3><hr><h3 id="图" tabindex="-1">图 <a class="header-anchor" href="#图" aria-label="Permalink to &quot;图&quot;">​</a></h3><h4 id="深度优先" tabindex="-1">深度优先 <a class="header-anchor" href="#深度优先" aria-label="Permalink to &quot;深度优先&quot;">​</a></h4><h4 id="广度优先" tabindex="-1">广度优先 <a class="header-anchor" href="#广度优先" aria-label="Permalink to &quot;广度优先&quot;">​</a></h4><h4 id="最短路径" tabindex="-1">最短路径 <a class="header-anchor" href="#最短路径" aria-label="Permalink to &quot;最短路径&quot;">​</a></h4><h2 id="二、算法" tabindex="-1">二、算法 <a class="header-anchor" href="#二、算法" aria-label="Permalink to &quot;二、算法&quot;">​</a></h2><h3 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h3><p>冒泡排序-选择排序-插入排序-归并排序</p><h3 id="搜索算法" tabindex="-1">搜索算法 <a class="header-anchor" href="#搜索算法" aria-label="Permalink to &quot;搜索算法&quot;">​</a></h3><p>顺序搜索-二分搜索</p><h3 id="算法模式" tabindex="-1">算法模式 <a class="header-anchor" href="#算法模式" aria-label="Permalink to &quot;算法模式&quot;">​</a></h3><p>递归-动态规划-贪心算法</p><h3 id="算法设计与技巧" tabindex="-1">算法设计与技巧 <a class="header-anchor" href="#算法设计与技巧" aria-label="Permalink to &quot;算法设计与技巧&quot;">​</a></h3><h2 id="算法复杂度" tabindex="-1">算法复杂度 <a class="header-anchor" href="#算法复杂度" aria-label="Permalink to &quot;算法复杂度&quot;">​</a></h2>',110)]))}const v=n(u,[["render",A]]);export{f as __pageData,v as default};
