import{_ as e,c as i,o as a,ah as s}from"./chunks/framework.DqD713j2.js";const m=JSON.parse('{"title":"00_编程规范解决方案指南","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端综合解决方案/00_编程规范解决方案指南.md","filePath":"Document/前端综合解决方案/00_编程规范解决方案指南.md","lastUpdated":1750954157000}'),l={name:"Document/前端综合解决方案/00_编程规范解决方案指南.md"};function o(n,t,r,_,c,p){return a(),i("div",null,t[0]||(t[0]=[s('<h1 id="_00-编程规范解决方案指南" tabindex="-1">00_编程规范解决方案指南 <a class="header-anchor" href="#_00-编程规范解决方案指南" aria-label="Permalink to &quot;00\\_编程规范解决方案指南&quot;">​</a></h1><p>ESLint + Prettier + Commitizen + GitHooks + husky + commitlint + Pre-commit + Lint-staged + Svg Sprite Icon</p><p><a href="https://juejin.cn/post/7137689028953899022" target="_blank" rel="noreferrer">https://juejin.cn/post/7137689028953899022</a></p><h3 id="都有哪些-lint" tabindex="-1">都有哪些 Lint? <a class="header-anchor" href="#都有哪些-lint" aria-label="Permalink to &quot;都有哪些 Lint?&quot;">​</a></h3><p>随着 nodejs 和前端工程化的发展，前端圈内产出了很多成熟的 Lint 工具，主要包括：</p><ul><li>eslint 规范并校验 ECMAScript/JavaScript code 的编写</li><li>tslint 规范并校验 TypeScript code 的编写</li><li>stylelint 规范并校验 css/scss/less code 的编写</li><li>commitlint 负责校验 commit msg 是否符合规范</li><li>prettier 或 beautifyjs 统一代码排版格式</li></ul><p>除此之外，我们还需要一些辅助的工具：</p><ul><li>husky 能够监听 git hooks 的 nodejs 包，让 nodejs 开发者处理 git hooks 任务变得更加容易</li><li>lint-staged 可以将 git“已暂存(staged)”的文件作为参数传入你要执行的 shell script 之中</li></ul><p>读到此处，你可能对这些工具的作用和用法仍然心存疑惑，不过没关系，大家暂且只需要知道我们将用这些工具对我们的代码进行各环节的严格的校验即可，接下来让我们深入了解它们。</p>',9)]))}const h=e(l,[["render",o]]);export{m as __pageData,h as default};
