import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/image-20240302214915096.DjCdAjdb.png",e="/FrontEndLearnNotes/assets/image-20240303002025716.Bh4XJDmK.png",b=JSON.parse('{"title":"KoaJS 框架源码解析","description":"","frontmatter":{},"headers":[],"relativePath":"Document/框架源码原理实现解析/Node后端框架源码解析/KoaJS框架源码解析.md","filePath":"Document/框架源码原理实现解析/Node后端框架源码解析/KoaJS框架源码解析.md","lastUpdated":1750954157000}'),t={name:"Document/框架源码原理实现解析/Node后端框架源码解析/KoaJS框架源码解析.md"};function r(c,s,B,y,i,F){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="koajs-框架源码解析" tabindex="-1">KoaJS 框架源码解析 <a class="header-anchor" href="#koajs-框架源码解析" aria-label="Permalink to &quot;KoaJS 框架源码解析&quot;">​</a></h1><p>Koa 的 GitHub 开源地址：<a href="https://github.com/koajs/koa" target="_blank" rel="noreferrer">https://github.com/koajs/koa</a></p><p>了解实践完 koa 如何开发应用的流程和依赖的相关原理，就可以看 koa 源码，看如何实现了。</p><h2 id="一、koa-是什么" tabindex="-1">一、koa 是什么 <a class="header-anchor" href="#一、koa-是什么" aria-label="Permalink to &quot;一、koa 是什么&quot;">​</a></h2><p>koa 是一个精简的 node 框架，它主要做了以下事情：</p><ul><li>1.基于 node 原生 req 和 res 为 request 和 response 对象赋能，并基于它们封装成一个 context 对象。</li><li>2.基于 async/await（generator）的中间件洋葱模型机制。</li></ul><p>koa1 和 koa2 在源码上的区别主要是于对异步中间件的支持方式的不同。</p><ul><li>koa1 是使用 generator、yield 的模式。</li><li>koa2 使用的是 async/await+Promise 的模式。</li></ul><h2 id="二、koa-核心对象" tabindex="-1">二、Koa 核心对象 <a class="header-anchor" href="#二、koa-核心对象" aria-label="Permalink to &quot;二、Koa 核心对象&quot;">​</a></h2><p>HTTP 接收 解析 响应 中间件 执行上下文</p><p>Application Context</p><p>Request Response</p><p>Middlewares</p><p>Session Cookie</p><h2 id="三、koa-源码目录文件" tabindex="-1">三、Koa 源码目录文件 <a class="header-anchor" href="#三、koa-源码目录文件" aria-label="Permalink to &quot;三、Koa 源码目录文件&quot;">​</a></h2><p>koa 项目克隆下来后，主要源码在 lib 目录，源码文件，现在的 koa 版本是 2.15.0：</p><p><img src="'+o+`" alt="image-20240302214915096"></p><h3 id="四个源码文件" tabindex="-1">四个源码文件 <a class="header-anchor" href="#四个源码文件" aria-label="Permalink to &quot;四个源码文件&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">──</span><span style="color:#98C379;"> lib</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> application.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> context.js</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> request.js</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#98C379;"> response.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 对应了koa的4个对象：</span></span>
<span class="line"><span style="color:#61AFEF;">──</span><span style="color:#98C379;"> lib</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> new</span><span style="color:#98C379;"> Koa</span><span style="color:#ABB2BF;">() || </span><span style="color:#61AFEF;">ctx.app</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> ctx</span></span>
<span class="line"><span style="color:#61AFEF;">├──</span><span style="color:#98C379;"> ctx.req</span><span style="color:#ABB2BF;"> || </span><span style="color:#61AFEF;">ctx.request</span></span>
<span class="line"><span style="color:#61AFEF;">└──</span><span style="color:#98C379;"> ctx.res</span><span style="color:#ABB2BF;"> || </span><span style="color:#61AFEF;">ctx.response</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="服务类-lib-application-js" tabindex="-1">服务类：lib/application.js <a class="header-anchor" href="#服务类-lib-application-js" aria-label="Permalink to &quot;服务类：lib/application.js&quot;">​</a></h4><h5 id="应用级别的方法和属性" tabindex="-1">应用级别的方法和属性 <a class="header-anchor" href="#应用级别的方法和属性" aria-label="Permalink to &quot;应用级别的方法和属性&quot;">​</a></h5><p>application.js 是 koa 的入口（从 koa 文件夹下的 package.json 的 main 字段（lib/application.js）中可以得知此文件是入口文件），也是核心部分。</p><p>Koa 在 application 对象上，定义了一些应用级别的方法和属性，如 app.listen, app.use, app.env, app.proxy 等，用于启动服务器，加载中间件，设置环境变量，开启代理支持等。</p><p>application.js 核心其实处理了这 4 个事情：</p><ul><li>1.启动框架</li><li>2.实现洋葱模型中间件机制</li><li>3.封装高内聚的 context</li><li>4.实现异步函数的统一错误处理机制</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="上下文对象-lib-context-js" tabindex="-1">上下文对象：lib/context.js <a class="header-anchor" href="#上下文对象-lib-context-js" aria-label="Permalink to &quot;上下文对象：lib/context.js&quot;">​</a></h4><h5 id="中间件参数" tabindex="-1">中间件参数 <a class="header-anchor" href="#中间件参数" aria-label="Permalink to &quot;中间件参数&quot;">​</a></h5><p>Koa 通过 context 参数，将 req 和 res 对象封装在一起，提供了一致的 API，避免了直接操作原生的 Node.js 对象。同时，Koa 也允许开发者通过 ctx.state 属性，传递一些自定义的数据给中间件。</p><p>在 application.createContext 函数中，被创建的 context 对象会挂载基于 request.js 实现的 request 对象和基于 response.js 实现的 response 对象。</p><p>2 个 delegate 的作用是让 context 对象代理 request 和 response 的部分属性和方法。</p><p>context.js 核心其实处理了这 2 个事情：</p><ul><li>1.错误事件处理</li><li>2.代理 response 对象和 request 对象的部分属性和方法</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="http-请求对象-lib-request-js" tabindex="-1">HTTP 请求对象：lib/request.js <a class="header-anchor" href="#http-请求对象-lib-request-js" aria-label="Permalink to &quot;HTTP 请求对象：lib/request.js&quot;">​</a></h4><h5 id="请求信息的获取" tabindex="-1">请求信息的获取 <a class="header-anchor" href="#请求信息的获取" aria-label="Permalink to &quot;请求信息的获取&quot;">​</a></h5><p>Koa 通过 request 对象，提供了一些便捷的方法，用于获取请求的信息，如 req.method, req.path, req.query, req.header, req.ip, req.is, req.get 等。Koa 还支持多种类型的请求参数，如查询字符串、表单数据、JSON 数据等。</p><p>在 application.js 的 createContext 函数中，会把 node 原生的 req 作为 request 对象(即 request.js 封装的对象)的属性。</p><p>request 对象基于 node 原生 req 封装了一系列便利属性和方法，供处理请求时调用。</p><p>所以当你访问 ctx.request.xxx 的时候，实际上是在访问 request 对象上的赋值器（setter）和取值器（getter）。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="http-响应对象-lib-response-js" tabindex="-1">HTTP 响应对象：lib/response.js <a class="header-anchor" href="#http-响应对象-lib-response-js" aria-label="Permalink to &quot;HTTP 响应对象：lib/response.js&quot;">​</a></h4><h5 id="响应内容的设置" tabindex="-1">响应内容的设置 <a class="header-anchor" href="#响应内容的设置" aria-label="Permalink to &quot;响应内容的设置&quot;">​</a></h5><p>Koa 通过 response 对象，提供了一些便捷的方法，用于设置响应的内容，如 res.body, res.status, res.type, res.length, res.redirect, res.attachment 等。Koa 还支持多种类型的响应内容，如字符串、Buffer、流、JSON、HTML 等。</p><p>在 application.js 的 createContext 函数中，会把 node 原生的 res 作为 response 对象（即 response.js 封装的对象）的属性。</p><p>response 对象基于 node 原生 res 封装了一系列便利属性和方法，供处理请求时调用。</p><p>所以当你访问 ctx.response.xxx 的时候，实际上是在访问 response 对象上的赋值器（setter）和取值器（getter）。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="中间件-middlewares" tabindex="-1">中间件：middlewares <a class="header-anchor" href="#中间件-middlewares" aria-label="Permalink to &quot;中间件：middlewares&quot;">​</a></h3><p>Koa 的洋葱模型是一种中间件执行流程的设计模式，通过 next() 函数和 await 关键字的配合，实现了中间件函数的顺序执行和控制权的传递。</p><p>Koa 中间件的实现主要依赖于 koa-compose 这个库，它会将中间件数组转化为一个 Promise 函数，然后递归地调用每个中间件函数，并传入 ctx 和 next 参数。</p><p>在 2.15.0 版本的代码中，洋葱模型的实现主要在以下几个文件中：</p><ul><li>lib/application.js：这里定义了 Koa 的 use 和 callback 方法，以及 handleRequest 方法，用于加载和执行中间件函数。</li><li>lib/context.js：这里定义了 Koa 的 ctx 对象，用于封装请求和响应的信息，以及提供一些便捷的方法。</li><li>lib/response.js：这里定义了 Koa 的 res 对象，用于设置响应的状态码、头部、内容等。</li><li>lib/request.js：这里定义了 Koa 的 req 对象，用于获取请求的方法、路径、参数、头部等。</li><li>node_modules/koa-compose/index.js：这里定义了 compose 函数，用于将中间件数组转化为一个 Promise 函数，并递归地调用每个中间件函数。</li></ul><h4 id="koa-compose-库的代码" tabindex="-1">koa-compose 库的代码 <a class="header-anchor" href="#koa-compose-库的代码" aria-label="Permalink to &quot;koa-compose 库的代码&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> compose</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {Array}</span><span style="color:#E06C75;font-style:italic;"> middleware</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#E5C07B;font-style:italic;"> {Function}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> compose</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">middleware</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">middleware</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">		throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TypeError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Middleware stack must be an array!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fn</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> middleware</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> fn</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TypeError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Middleware must be composed of functions!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {Object}</span><span style="color:#E06C75;font-style:italic;"> context</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * </span><span style="color:#C678DD;font-style:italic;">@return</span><span style="color:#E5C07B;font-style:italic;"> {Promise}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * </span><span style="color:#C678DD;font-style:italic;">@api</span><span style="color:#D19A66;font-style:italic;"> public</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 主要函数</span></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;next() called multiple times&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E06C75;">			index</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> fn</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> middleware</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> middleware</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">fn</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">			try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">dispatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>结合 koa 源码的 application.js 中的使用，调试</p><p>执行 koa 后端项目代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> mid1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 中间件执行的关键</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> mid2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 中间件执行的关键</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> mid3</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 中间件执行的关键</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mid1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mid2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mid3</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="四、深入理解-koa-源码" tabindex="-1">四、深入理解 koa 源码 <a class="header-anchor" href="#四、深入理解-koa-源码" aria-label="Permalink to &quot;四、深入理解 koa 源码&quot;">​</a></h2><p>把项目实战结合，深入理解 koa 源码</p><p>从<strong>初始化、启动应用、处理请求</strong>等的角度，来<strong>对这过程中比较重要</strong>的细节进行讲解及延伸，如果彻底弄懂，会对 koa 以及 ES6、generator、async/await、co、异步中间件等有更深一步的了解。</p><h2 id="koa-的最小实现" tabindex="-1">Koa 的最小实现 <a class="header-anchor" href="#koa-的最小实现" aria-label="Permalink to &quot;Koa 的最小实现&quot;">​</a></h2><p><a href="https://juejin.cn/post/7023565121976795150" target="_blank" rel="noreferrer">Koa 源码导读及实现最小版解析并附源码 - 掘金 (juejin.cn)</a></p><p>文章的源码：<a href="https://github.com/shfshanyue/mini-code/tree/master/code/koa" target="_blank" rel="noreferrer">mini-code/code/koa at master · shfshanyue/mini-code (github.com)</a></p><h2 id="koa-核心的依赖库" tabindex="-1">Koa 核心的依赖库 <a class="header-anchor" href="#koa-核心的依赖库" aria-label="Permalink to &quot;Koa 核心的依赖库&quot;">​</a></h2><p>Koa 开发项目，需要安装一些核心的依赖库，主要有以下几个：</p><ul><li>[<strong>koa</strong>]：这是 Koa 框架本身，提供了基本的 Web 服务器功能，以及中间件机制、上下文对象、请求响应处理等。</li><li>[<strong>koa-router</strong>]：这是一个路由中间件，用于定义和匹配不同的 URL 路径，以及不同的 HTTP 方法，实现路由的分发和控制。</li><li>[<strong>koa-bodyparser</strong>]：这是一个请求体解析中间件，用于解析客户端传递的数据，支持 JSON、表单、文本等格式，将解析后的数据挂载到 ctx.request.body 上。</li><li>[<strong>koa-static</strong>]：这是一个静态资源服务中间件，用于托管静态文件，如图片、CSS、JS 等，可以设置缓存、压缩等选项。</li><li>[<strong>koa-session</strong>]：</li><li>[<strong>koa-logger</strong>]：</li><li>[<strong>sequelize</strong>]：这是一个 ORM 库，用于操作数据库，支持多种数据库类型，如 MySQL、PostgreSQL、SQLite 等，提供了一系列的 API，让你可以用对象和 Promise 的方式操作数据。</li></ul><h2 id="koa-router-源码解析" tabindex="-1">koa-router 源码解析 <a class="header-anchor" href="#koa-router-源码解析" aria-label="Permalink to &quot;koa-router 源码解析&quot;">​</a></h2><p>koa-router 开源地址：<a href="https://github.com/koajs/router" target="_blank" rel="noreferrer">https://github.com/koajs/router</a></p><p>koa 项目路由例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;koa&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Router</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;koa-router&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Router</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/test&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;text&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;home&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;home&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">app</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;中间件触发-&gt;进&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;中间件触发-&gt;出&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">routes</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allowedMethods</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1111</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>先获取了 Router 类，并实例化一个 router，然后使用 router 提供的 api 定义我们 Node 服务的路由规则，最终使用 koa 的 use，将 router 组件放进 koa 的中间件中。</p><h3 id="new-router-到底干了什么" tabindex="-1">new Router()到底干了什么？ <a class="header-anchor" href="#new-router-到底干了什么" aria-label="Permalink to &quot;new Router()到底干了什么？&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Router</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">opts</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Router</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Router</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">opts</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">opts</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> opts</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#98C379;">		&quot;HEAD&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;OPTIONS&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;GET&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;PUT&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;PATCH&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;POST&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;DELETE&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stack</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>Router 的 class 非常简单，只是对一些值的赋值和初始化。</p><p>在 Router 的原型上有以下一些 api：</p><ul><li>all</li><li>allowedMethods</li><li>match</li><li>param</li><li>prefix</li><li>redirect</li><li>register</li><li>route</li><li>url</li><li>use</li><li>del</li><li>routes</li></ul><p>在文档中出现的一些 get、post 等等的一些 api，并不在原型中，原因是在我们实例化会执行以下代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">methods</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	Router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">middleware</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> middleware</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> path</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> RegExp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			middleware</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			middleware</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			path</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">middleware</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">			name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>这里 methods 实际上是：<a href="https://nodejs.cn/api/http.html#http_http_methods" target="_blank" rel="noreferrer">http_methods | Node.js v20 文档</a>返回的数组。这里实际上就是对当前 http 支持的请求方式都赋值到 Router 的原型上，从而实现了 router.get 这样的调用方式。</p><h3 id="添加路由规则执行的代码" tabindex="-1">添加路由规则执行的代码 <a class="header-anchor" href="#添加路由规则执行的代码" aria-label="Permalink to &quot;添加路由规则执行的代码&quot;">​</a></h3><p>添加路由规则我们一般是使用 router.get 或者 post 等等的 api，那么具体是做什么呢，先看看源码。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">middleware</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> middleware</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 当判断我们是否有对路由进行命名</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> path</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> RegExp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		middleware</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 当我们没有对路由进行命名，那么将第一个参数作为路径使用</span></span>
<span class="line"><span style="color:#E06C75;">		middleware</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 注册路由到Router中</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">middleware</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>将我们路由规则中的参数组装，并调用 Router 的 register 函数注册进 router 实例中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">methods</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">middleware</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">opts</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	opts</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> opts</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> stack</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stack</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果当前的path是一个数组的形式传入，将循环注册（同一个this中）</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">		path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			router</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">register</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">router</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">middleware</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">opts</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建一个路由实例</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> route</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Layer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">middleware</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		end</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">end</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> false</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">end</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		sensitive</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sensitive</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sensitive</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		strict</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">strict</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">strict</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		prefix</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prefix</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prefix</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		ignoreCaptures</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ignoreCaptures</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prefix</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setPrefix</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prefix</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// add parameter middleware</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">param</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将路由实例推入router的stack中</span></span>
<span class="line"><span style="color:#E5C07B;">	stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> route</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>Layer 实现</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Layer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">methods</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">middleware</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">opts</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">opts</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> opts</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">paramNames</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stack</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">middleware</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> middleware</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">middleware</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// 记录我们传入的回调函数是否是一个数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	methods</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> l</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">methods</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">l</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;GET&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当判断有GET请求，将在前面放入一个HEAD</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">methods</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unshift</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;HEAD&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 必须确保传入的回调一定是一个函数</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> type</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> fn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">				methods</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">					&quot; \`&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#ABB2BF;">					(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> path</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">					&quot;\`: \`middleware\` &quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">					&quot;must be a function, not \`&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E06C75;">					type</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">					&quot;\`&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> path</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">regexp</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> pathToRegExp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">paramNames</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">opts</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 将传入的路径转换为正则</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;defined route %s %s&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prefix</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>完成这一系列的操作后，当前的 router 实例是这样的</p><p><img src="`+e+`" alt="image-20240303002025716"></p><p>当我们声明多个路由规则的时候，stack 将会不停增加路由实例。</p><p>在这个时候其实我们一直都是在未 router 这个中间件添加路由规则，直到我们使用 koa 的 use 的方式将 router 注册进 koa，路由的规则才能生效。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">routes</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>那么 router.routes()具体做了什么，是如何判断我们的请求进入那个路由规则中的呢？在 koa 的中间中使用 use，我们必须使用一个函数，所以 router.routes 最终返回一个 dispatch 函数给 koa 中间件去执行。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routes</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">middleware</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> router</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		debug</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;%s %s&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> router</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">opts</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routerPath</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routerPath</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 执行router实例中的match函数</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> matched</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> layerChain</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">layer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">matched</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">matched</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">push</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">matched</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">matched</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">matched</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> matched</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">router</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> router</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 如果matchd的route为false，即没有method</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">matched</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">route</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> matchedLayers</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> matched</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pathAndMethod</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 赋值到ctx中，最先命中的路由规则</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> mostSpecificLayer</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> matchedLayers</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">matchedLayers</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">		ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_matchedRoute</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> mostSpecificLayer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">mostSpecificLayer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_matchedRouteName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> mostSpecificLayer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 实际上这里就是实现一个内部的中间件数组</span></span>
<span class="line"><span style="color:#E06C75;">		layerChain</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> matchedLayers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">memo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">layer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 暂时不知道作用，阅读到后面或许知道</span></span>
<span class="line"><span style="color:#E5C07B;">			memo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">captures</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> layer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">captures</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">captures</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> layer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">params</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">captures</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">				ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">routerName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> memo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stack</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, []);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用koa-compose</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 内部实现一次洋葱模型并主动触发</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> compose</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">layerChain</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	dispatch</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">router</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> dispatch</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p>到这里，最最最基本的配置路由及实现方式就结束了。实际上 koa 的 router 也是作为一个中间件，但是我们每一次注册的路由，最终都会在 koa-router 这个中间件中自己内部循环触发，相当于一个洋葱包着另外一个洋葱。</p><p>同时也通过代码发现一些问题，因为要确定当前的路径到底命中那个路由规则，所以需要在接受到请求的时候对所有注册的路由进行循环判断到底哪些命中了，然后内部再合成一个洋葱模型的中间件。当我们比较小型的应用可能路由只有十来二十个的时候，其实一点问题都没有，但是如果当我们路由规则相当多，达到一定量级，例如有 1 万个路由规则，那么这个时候在接受到请求的时候，循环匹配命中的路由将会带来一定的<strong>性能损耗</strong>！</p><h3 id="allowedmethods" tabindex="-1">allowedMethods <a class="header-anchor" href="#allowedmethods" aria-label="Permalink to &quot;allowedMethods&quot;">​</a></h3><p>在官方文档中，建议我们要配合 allowedMethods 这个中间件使用，那么 allowedMethods 中间件到底是干什么的，为什么要配合使用呢？</p><blockquote><p>Returns separate middleware for responding to<code>OPTIONS</code>requests with an<code>Allow</code>header containing the allowed methods, as well as responding with<code>405 Method Not Allowed</code>and<code>501 Not Implemented</code>as appropriate.</p></blockquote><p>先来看看源码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">allowedMethods</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> options</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> implemented</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> allowedMethods</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> allowed</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 当没有status或者status == 404的时候，allowedMethods才开始工作。</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 404</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 获取当前路由的类型</span></span>
<span class="line"><span style="color:#E5C07B;">				ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">matched</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					route</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">methods</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">						allowed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> method</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					});</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> allowedArr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">allowed</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果当前请求的类型不是支持的类型，那么将根据配置选择是返回501还是报错</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!~</span><span style="color:#E5C07B;">implemented</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">throw</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">						var</span><span style="color:#E06C75;"> notImplementedThrowable</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">						if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">notImplemented</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">							notImplementedThrowable</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notImplemented</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// set whatever the user returns from their function</span></span>
<span class="line"><span style="color:#ABB2BF;">						} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">							notImplementedThrowable</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> HttpError</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">NotImplemented</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">						}</span></span>
<span class="line"><span style="color:#C678DD;">						throw</span><span style="color:#E06C75;"> notImplementedThrowable</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">						ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 501</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">						ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Allow&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">allowedArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;, &quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">allowedArr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 如果是OPTIONS请求，那么将返回当前命中路由所支持的请求类型</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;OPTIONS&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">						ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">						ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">						ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Allow&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">allowedArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;, &quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 如果请求的类型不是当前路由支持的类型，那么将判断配置中是否报错，又或者默认返回405，并且告知客户端当前路由所支持的请求类型</span></span>
<span class="line"><span style="color:#ABB2BF;">					} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">allowed</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">						if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">throw</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">							var</span><span style="color:#E06C75;"> notAllowedThrowable</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">							if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">methodNotAllowed</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">								notAllowedThrowable</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">methodNotAllowed</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// set whatever the user returns from their function</span></span>
<span class="line"><span style="color:#ABB2BF;">							} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">								notAllowedThrowable</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> HttpError</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">MethodNotAllowed</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">							}</span></span>
<span class="line"><span style="color:#C678DD;">							throw</span><span style="color:#E06C75;"> notAllowedThrowable</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">						} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">							ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 405</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">							ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Allow&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">allowedArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;, &quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">						}</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><p>注释中也有写明，allowedMethods 必须紧跟 router 中间件。在中间件执行完后会对请求做一些兜底操作，具体干嘛已经在注释上写明。</p><h3 id="koa-router-的其他-api" tabindex="-1">koa-router 的其他 api <a class="header-anchor" href="#koa-router-的其他-api" aria-label="Permalink to &quot;koa-router 的其他 api&quot;">​</a></h3><p>看到文档，看见了还一些 api，那么继续看看源码，到底这些 api 有什么用呢？</p><ul><li>all</li><li>use</li><li>prefix</li><li>redirect</li><li>url</li><li>param</li></ul><h4 id="all" tabindex="-1">all <a class="header-anchor" href="#all" aria-label="Permalink to &quot;all&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">middleware</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> middleware</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		middleware</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		middleware</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		path</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// methods就是所有能支持的请求类型，因为内部会经过循环比对是否命中路径规则，而且还命中请求类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 所以尽可能少去使用all，而是明确指明使用的请求类型</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">middleware</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="use" tabindex="-1">use <a class="header-anchor" href="#use" aria-label="Permalink to &quot;use&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">session</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;123123&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;session -&gt; in&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;session -&gt; out&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/test&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;text&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;home&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;home&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在 use 的源码中当使用 use 的时候没有指定路由规则，那么将是所有路由都可以命中，实际上当使用 use 的时候，也会调用 router.register 注册中间件，但是这个时候注册时所传入的 path 将会是这样**(.*)**，可以命中所有路由，从而每次请求的 match 阶段，都会命中这个中间件。</p><p>官方还有另外一种写法，可以指定路由触发，和配置多个路由触发。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// use middleware only with given path</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/users&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">userAuth</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// or with an array of paths</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;/users&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;/admin&quot;</span><span style="color:#ABB2BF;">], </span><span style="color:#61AFEF;">userAuth</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>源码判断到如果第一位是一个字符串，就直接注册时传入这个字符串当做这个中间件的 path，从而来命中，如果传入的是数组，那么就会循环执行 use 来将数组中的 path 逐个注册。</p><h4 id="prefix" tabindex="-1">prefix <a class="header-anchor" href="#prefix" aria-label="Permalink to &quot;prefix&quot;">​</a></h4><p>为你的路由设置前缀。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">prefix</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/things/:thing_id&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>从源码了解到，无论是的 prefix 是在注册路由前还是注册路由后，最终都会为每一个路由规则的 path 修改为 prefix + path，从而改变 router 规则中的 path 的正则表达式。</p><h4 id="redirect" tabindex="-1">redirect <a class="header-anchor" href="#redirect" aria-label="Permalink to &quot;redirect&quot;">​</a></h4><p>重定向</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redirect</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">source</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">destination</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果首字不是/将调用url函数创建一个合法的url</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &quot;/&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		source</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">url</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 如果首字不是/将调用url函数创建一个合法的url</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">destination</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &quot;/&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		destination</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">url</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">destination</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redirect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">destination</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 调用ctx中的redirect函数进行重定向</span></span>
<span class="line"><span style="color:#E5C07B;">		ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> code</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> 301</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="url" tabindex="-1">url <a class="header-anchor" href="#url" aria-label="Permalink to &quot;url&quot;">​</a></h4><p>根据传入的具名路由规则获取对应的 path</p><h4 id="param" tabindex="-1">param <a class="header-anchor" href="#param" aria-label="Permalink to &quot;param&quot;">​</a></h4><p>一个 param 的 demo</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">router</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">param</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> users</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 404</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/users&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/users/:user&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/users/:user/friends&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFriends</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">friends</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> friends</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>param 源码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Router</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">param</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">middleware</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> middleware</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">route</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">param</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">middleware</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在我们调用<strong>param</strong>的时候，实际上会添加在<strong>router</strong>实例上的<strong>params</strong>数组中。当我们添加<strong>param</strong>的时候，如果之前已经注册了路由，那么<strong>stack</strong>将会存在之前我们注册的路由，那么将循环调用<strong>stack</strong>中每个路由的<strong>param</strong>函数，来进行匹配当前加入的这个<strong>param</strong>是否命中。</p><p>在调用<strong>param</strong>之后，我们还需要注册路由的时候，那么将会在<strong>register</strong>的时候，循环当前<strong>router</strong>实例的<strong>params</strong>数组，循环调用<strong>params</strong>数组的来调用<strong>route</strong>的<strong>param</strong>方法来判断是否命中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	route</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">param</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>那我们来看一下 param 是做了什么！</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Layer</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">param</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> stack</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stack</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> params</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">paramNames</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#61AFEF;"> middleware</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">next</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#E5C07B;">	middleware</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">param</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> param</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> names</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> params</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> names</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// iterate through the stack, to figure out where to place the handler fn</span></span>
<span class="line"><span style="color:#E5C07B;">		stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">some</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// param handlers are always first, so when we find an fn w/o a param property, stop here</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// if the param handler at this part of the stack comes after the one we are adding, stop here</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">param</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> names</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// inject this param handler right before the current item</span></span>
<span class="line"><span style="color:#E5C07B;">				stack</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">middleware</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// then break the loop</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>其实主要是判断当前的 Layer 实例中的 paramNames 参数是否有数据，该数据是通过在实例化一个 Layer 对象的时候通过 pathToRegExp 函数，对路径进行正则匹配，找到当前路径的带有“:“标识的参数值，然后存放在 paramNames 当中。回到 param 函数中，就是循环 paramNames 来将满足条件的 param 的回调函数放到当前路由 stack 的数组中，并且从头开始放入。从而实现匹配对应路由参数的匹配关系。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>koa 的路由为了要满足洋葱模型的设计理念，避免不了不少循环</li><li>当使用 koa 的服务有大量的中间件，以及大量的路由时候，会产生大量的循环，从而影响启动速度和路由响应速度。</li><li>从源码中，我发现 koa 在整体上是很不错的框架，洋葱模式也是十分优秀，但是当我们的 node 服务逐渐庞大，路由和中间件使用的越来越多的时候，洋葱模型的设计就会成为了累赘，会产生很多循环来命中路由和执行中间件。所以当服务越来越大，路由规则和中间件越来越多的时候，就应该考虑不要使用 koa 或者将服务拆分（微服务）</li></ul><h2 id="koa-session-源码解析" tabindex="-1">koa-session 源码解析 <a class="header-anchor" href="#koa-session-源码解析" aria-label="Permalink to &quot;koa-session 源码解析&quot;">​</a></h2>`,136)]))}const u=n(t,[["render",r]]);export{b as __pageData,u as default};
