import{_ as a,c as n,o as e,ah as l}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"Bun","description":"","frontmatter":{},"headers":[],"relativePath":"Document/其他前端包管理工具/Bun/Bun简介和资源.md","filePath":"Document/其他前端包管理工具/Bun/Bun简介和资源.md","lastUpdated":1750954157000}'),o={name:"Document/其他前端包管理工具/Bun/Bun简介和资源.md"};function p(t,s,r,c,i,d){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="bun" tabindex="-1">Bun <a class="header-anchor" href="#bun" aria-label="Permalink to &quot;Bun&quot;">​</a></h1><h2 id="bun-简介" tabindex="-1">Bun 简介 <a class="header-anchor" href="#bun-简介" aria-label="Permalink to &quot;Bun 简介&quot;">​</a></h2><p>Bun 是一个用于 JavaScript 和 TypeScript 应用程序的一体化工具包，它旨在替代 Node.js。</p><p>Bun 的核心是一个快速的 JavaScript 运行时，它使用 JavaScriptCore 引擎，减少了启动时间和内存使用量。</p><p>Bun 还提供了一些内置的工具和库，例如打包器、转译器、包管理器、测试运行器、Web API 等，使得开发者无需额外安装依赖，就可以直接开始编码。</p><p>Bun 还支持 CommonJS 和 ESM 两种模块系统，以及 TypeScript 和 JSX/TSX 语法。Bun 的设计目标是消除缓慢和复杂性，同时保留 JavaScript 的所有优点。</p><p>Bun 兼容 Node.js 的所有 API，完全是从头实现的，运行速度大大快于 Node.js。</p><p>但 Bun 不仅仅是一个运行时。它也是：</p><ul><li>一个包管理器 (类似 Yarn、 NPM、 PNPM)</li><li>一个构建工具 (类似 Webpack、 ESBuild、 Parcel)</li><li>一个测试运行器</li><li>... 以及很多其他东西！</li></ul><p>所以 Bun 可以通过读取你的 package.json 来安装依赖项。Bun 还可以运行你的脚本。不管它做什么都比其他工具更快。</p><p>Bun 在 JavaScript 生态系统的许多方面都有新的尝试，其中的重点是性能。</p><p>它优先支持标准的 Web API，如 Fetch。它也支持许多 Node.js APIs，使其能与大多数 NPM 包兼容。</p><h2 id="bun-相关网站" tabindex="-1">Bun 相关网站 <a class="header-anchor" href="#bun-相关网站" aria-label="Permalink to &quot;Bun 相关网站&quot;">​</a></h2><p>官网：<a href="https://bun.sh/" target="_blank" rel="noreferrer">https://bun.sh/</a></p><p>GitHub：<a href="https://github.com/oven-sh/bun" target="_blank" rel="noreferrer">https://github.com/oven-sh/bun</a></p><h2 id="bun-安装使用" tabindex="-1">Bun 安装使用 <a class="header-anchor" href="#bun-安装使用" aria-label="Permalink to &quot;Bun 安装使用&quot;">​</a></h2><h3 id="macos-和-linux" tabindex="-1">macOS 和 Linux <a class="header-anchor" href="#macos-和-linux" aria-label="Permalink to &quot;macOS 和 Linux&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> bun</span><span style="color:#7F848E;font-style:italic;"> # the last \`npm\` command you&#39;ll ever need</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">powershell</span><span style="color:#D19A66;"> -c</span><span style="color:#98C379;"> &quot;irm bun.sh/install.ps1|iex&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行 js/ts 文件、package.json 脚本和可执行包</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">bun</span><span style="color:#98C379;"> run</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>--wathc</code>支持在监视模式下运行文件</li></ul><p>支持的文件类型有 js\\ts\\jsx\\tsx\\txt\\json\\toml\\wasm\\sqlite，可以使用插件支持更多</p><p>bun 自动读取<code>.env</code>文件，并提供以编程方式读写环境变量的惯用方法通过<code>process.env</code>或者<code>Bun.env</code>或者<code>import.meta.env</code></p><p>bun 的目标是完全兼容 Node.js API。<a href="https://bun.sh/docs/runtime/nodejs-apis" target="_blank" rel="noreferrer">支持度——Node.js compatibility – Runtime | Bun Docs</a></p><p>插件系统，用于扩展运行时和 bundler</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">type</span><span style="color:#E06C75;"> BunPlugin</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;bun&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myPlugin</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">BunPlugin</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Custom loader&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	setup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">build</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// implementation</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myPlugin</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="package-manager" tabindex="-1">package manager <a class="header-anchor" href="#package-manager" aria-label="Permalink to &quot;package manager&quot;">​</a></h3><p><em>看起来确实快 第二次安装更快</em></p><ul><li><p>bun install 安装项目依赖，执行{pre|post}install 脚本，将包信息写入 bun.lockb 文件中该文件位于项目根目录下</p></li><li><p>bun add 添加指定包等同于</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>pnpm i xxx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>--dev</code>作为开发依赖</li><li><code>--global</code>安装全局依赖</li></ul></li><li><p>bun remove 删除依赖项</p></li><li><p>bun update 将所有的依赖项更新到与指定的版本范围兼容的版本</p><ul><li>--force 正常情况下遵循 package.json 定义的版本范围，想要忽略并更新到最新版本，可以传入该表示</li></ul></li><li><p>bun link 在本地目录中将当前包注册为可链接包</p></li><li><p>下载的所有包都位于全局缓存中<code>~/.bun/install/cache</code>。它们存储在名为 like 的子目录中<code>\${name}@\${version}</code>，因此可以缓存包的多个版本</p></li><li><p>在 package.json 中，&quot;workspaces&quot;选项用于指示哪些子目录应被视为 monorepo 中的包/工作区</p></li></ul><h3 id="bundler" tabindex="-1">bundler <a class="header-anchor" href="#bundler" aria-label="Permalink to &quot;bundler&quot;">​</a></h3><ul><li>为什么需要 bundler <ul><li><strong>减少 HTTP 请求。</strong>。单个包可能包含数百个文件，使用单独的 HTTP 请求加载每个文件不太行，因此 bunler 用于将应用程序的源代码转换为数量较小的包，可以通过单个请求加载。</li><li><strong>代码转换</strong>。例如 ts、jsx、tsx 都必须要转换为纯 js，然后才能被浏览器使用。</li></ul></li><li>Watch mode <code>--watch</code> bundler 支持监听模式</li><li>Bun bundler 实现了一组默认的 loaders，支持<code>.js</code> <code>.cjs</code> <code>.mjs</code> <code>.ts</code> <code>.cts</code> <code>.mts</code> <code>.tsx</code> <code>.jsx</code> <code>.toml</code> <code>.json</code> <code>.txt</code> <code>.wasm</code> <code>.node</code>文件</li></ul><h3 id="test-runner" tabindex="-1">test runner <a class="header-anchor" href="#test-runner" aria-label="Permalink to &quot;test runner&quot;">​</a></h3><ul><li>Bun 附带了一个快速、内置、兼容 Jest 的测试运行器</li><li>支持 ts 和 jsx</li><li>支持生命周期 hooks</li><li>快照测试</li><li>UI 和 DOM 测试</li><li><code>--wathc</code>监听模式</li><li><code>--preload</code>脚本预加载</li><li>运行 <code>bun test</code></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">expect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;bun:test&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;2 + 2&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	expect</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toBe</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>测试文件如下 <ul><li><code>*.test.{js|jsx|ts|tsx}</code></li><li><code>*_test.{js|jsx|ts|tsx}</code></li><li><code>*.spec.{js|jsx|ts|tsx}</code></li><li><code>*_spec.{js|jsx|ts|tsx}</code></li></ul></li></ul><h3 id="api" tabindex="-1">api <a class="header-anchor" href="#api" aria-label="Permalink to &quot;api&quot;">​</a></h3><ul><li><code>Bun.serve()</code>用于启动 HTTP 服务器</li><li><code>Worker</code>允许在单独线程上运行新的 js 实例并与之通信，同时与主线程共享 I/O 资源</li><li>支持使用二进制数据提供了 <code>ArrayBuffer</code> <code>Blob</code>等 api</li><li>streams 是处理二进制数据的重要抽象，无需将其全部加载到内存中。通常用于读写文件、发送和接受网络请求以及处理大量数据。 还有很多 api 请参考官网这就不一一举例了</li></ul><h2 id="框架" tabindex="-1">框架 <a class="header-anchor" href="#框架" aria-label="Permalink to &quot;框架&quot;">​</a></h2><h3 id="elysia-js" tabindex="-1">Elysia.js <a class="header-anchor" href="#elysia-js" aria-label="Permalink to &quot;Elysia.js&quot;">​</a></h3><p>由 Bun 增强的 TypeScript 框架具有端到端的类型安全、统一的类型系统和出色的开发人员体验</p><p>开源地址：<a href="https://github.com/elysiajs/elysia" target="_blank" rel="noreferrer">https://github.com/elysiajs/elysia</a></p><p>官网：<a href="https://elysiajs.com/" target="_blank" rel="noreferrer">https://elysiajs.com/</a></p>`,44)]))}const B=a(o,[["render",p]]);export{b as __pageData,B as default};
