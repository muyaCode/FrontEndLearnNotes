import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/image-20240306210952961.4IWJgELp.png",e="/FrontEndLearnNotes/assets/image-20240306211042864.Cfnemvb4.png",F=JSON.parse('{"title":"jQuery 技术内幕","description":"","frontmatter":{},"headers":[],"relativePath":"Document/框架源码原理实现解析/jQuery技术内幕/jQuery技术内幕.md","filePath":"Document/框架源码原理实现解析/jQuery技术内幕/jQuery技术内幕.md","lastUpdated":1750954157000}'),t={name:"Document/框架源码原理实现解析/jQuery技术内幕/jQuery技术内幕.md"};function r(c,s,B,y,i,u){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="jquery-技术内幕" tabindex="-1">jQuery 技术内幕 <a class="header-anchor" href="#jquery-技术内幕" aria-label="Permalink to &quot;jQuery 技术内幕&quot;">​</a></h1><h2 id="相关网址" tabindex="-1">相关网址 <a class="header-anchor" href="#相关网址" aria-label="Permalink to &quot;相关网址&quot;">​</a></h2><p>开源地址：<a href="https://github.com/jquery/jquery" target="_blank" rel="noreferrer">https://github.com/jquery/jquery</a></p><p>npm：<a href="https://www.npmjs.com/package/jquery" target="_blank" rel="noreferrer">jquery - npm (npmjs.com)</a></p><p>官网：<a href="https://jquery.com/" target="_blank" rel="noreferrer">jQuery</a></p><p>中文文档：</p><ul><li><a href="https://jquery.cuishifeng.cn/" target="_blank" rel="noreferrer">jQuery API 中文文档 | jQuery API 中文在线手册 | jquery api 下载 | jquery api chm (cuishifeng.cn)</a></li><li><a href="https://www.jquery123.com/" target="_blank" rel="noreferrer">jQuery API 中文文档 | jQuery 中文网 (jquery123.com)</a></li><li><a href="https://www.w3cschool.cn/jquery/dict" target="_blank" rel="noreferrer">Jquery 官方文档 |官方教程|Jquery 官方文档 API 中文手册|Jquery 官方文档参考文档_w3cschool</a></li></ul><h2 id="jquery-整体架构" tabindex="-1">jQuery 整体架构 <a class="header-anchor" href="#jquery-整体架构" aria-label="Permalink to &quot;jQuery 整体架构&quot;">​</a></h2><h3 id="jquery-的实现原理" tabindex="-1">jQuery 的实现原理 <a class="header-anchor" href="#jquery-的实现原理" aria-label="Permalink to &quot;jQuery 的实现原理&quot;">​</a></h3><ul><li>(function(window, undefined) {})(window);</li><li>jQuery 利用 JS 函数作用域的特性，采用立即调用表达式包裹了自身，解决命名空间和变量污染问题</li><li>window.jQuery = window.$ = jQuery;</li><li>在闭包当中将 jQuery 和 $ 绑定到 window 上，从而将 jQuery 和 $ 暴露为全局变量</li></ul><h3 id="零、图例架构" tabindex="-1">零、图例架构 <a class="header-anchor" href="#零、图例架构" aria-label="Permalink to &quot;零、图例架构&quot;">​</a></h3><h4 id="_1、设计理念" tabindex="-1">1、设计理念 <a class="header-anchor" href="#_1、设计理念" aria-label="Permalink to &quot;1、设计理念&quot;">​</a></h4><p>jQuery 的理念就是“写更少的代码，做更多的事”，而且做到代码的高度兼容性。</p><h4 id="_2、总体架构" tabindex="-1">2、总体架构 <a class="header-anchor" href="#_2、总体架构" aria-label="Permalink to &quot;2、总体架构&quot;">​</a></h4><p>大致可以分为三个部分：构造模块，底层支持模块和功能模块。</p><p><img src="'+o+'" alt="image-20240306210952961"></p><p><img src="'+e+`" alt="image-20240306211042864"></p><h3 id="一、自调用函数" tabindex="-1">一、自调用函数 <a class="header-anchor" href="#一、自调用函数" aria-label="Permalink to &quot;一、自调用函数&quot;">​</a></h3><p>jQuery 整体架构：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">global</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">factory</span><span style="color:#ABB2BF;">) {})(</span></span>
<span class="line"><span style="color:#C678DD;">	typeof</span><span style="color:#E06C75;"> window</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> window</span><span style="color:#C678DD;"> :</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">window</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">noGlobal</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>代码分析：jQuery 的所有代码都被包含在一个立即执行的匿名函数这种代码可以称为“自调用函数”，上述代码可以简化为</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">形参global</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">形参factory</span><span style="color:#ABB2BF;">) {})(</span><span style="color:#E06C75;">实参a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">实参b</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="匿名函数的作用" tabindex="-1">匿名函数的作用： <a class="header-anchor" href="#匿名函数的作用" aria-label="Permalink to &quot;匿名函数的作用：&quot;">​</a></h4><p>通过创建一个自调用匿名函数，创建了一个特殊的函数作用域，该作用域的代码不会和已有的同名函数、方法和变量以及第三方库冲突。任何 JavaScript 库和框架所必须具备的功能：自己的代码不会受到其他代码（其他 js 库或框架）的干扰，并且自己的代码不会污染或破坏全局变量以至于影响其他代码。</p><p>匿名函数的常见写法（大概有十种或更多，我们只选择有代表性的两种）：</p><h4 id="_1、jquery-完整版使用的写法" tabindex="-1">1、jQuery 完整版使用的写法 <a class="header-anchor" href="#_1、jquery-完整版使用的写法" aria-label="Permalink to &quot;1、jQuery 完整版使用的写法&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//......</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2、jquery-压缩版的写法" tabindex="-1">2、jQuery 压缩版的写法 <a class="header-anchor" href="#_2、jquery-压缩版的写法" aria-label="Permalink to &quot;2、jQuery 压缩版的写法&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//......</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>注意：在匿名函数之前或之后最好加上“;”，否则有可能抛出异常</strong></p><h5 id="代码详解" tabindex="-1">代码详解： <a class="header-anchor" href="#代码详解" aria-label="Permalink to &quot;代码详解：&quot;">​</a></h5><h5 id="_2-1、实参-a-typeof-window-undefined-window-this-用于判断当前环境是否支持-window-支持就使用-window-否则就使用-this。" tabindex="-1">2.1、实参 a： typeof window !== &quot;undefined&quot; ? window : this, 用于判断当前环境是否支持 window,支持就使用 window，否则就使用 this。 <a class="header-anchor" href="#_2-1、实参-a-typeof-window-undefined-window-this-用于判断当前环境是否支持-window-支持就使用-window-否则就使用-this。" aria-label="Permalink to &quot;2.1、实参 a： typeof window !== &quot;undefined&quot; ? window : this, 用于判断当前环境是否支持 window,支持就使用 window，否则就使用 this。&quot;">​</a></h5><p>作用：通过传入 window 对象，可以使 window 对象变为局部变量（即把函数参数作为局部变量使用），这样当在 jQuery 代码块中访问 window 对象是，不需要讲作用域链回退到顶层作用域，从而更改地访问 window 对象，另外，将 window 对象作为参数传入，可以在压缩代码中进行优化，例如在 jQuery v3.3.1 压缩版中：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">t</span><span style="color:#ABB2BF;">) {})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>形参 global 变成 e,factory 变成 t。</p><h5 id="_2-2、实参-b-function-window-noglobal-里面存放的是-jquery-的功能函数。" tabindex="-1">2.2、实参 b：function( window, noGlobal ) {}，里面存放的是 jQuery 的功能函数。 <a class="header-anchor" href="#_2-2、实参-b-function-window-noglobal-里面存放的是-jquery-的功能函数。" aria-label="Permalink to &quot;2.2、实参 b：function( window, noGlobal ) {}，里面存放的是 jQuery 的功能函数。&quot;">​</a></h5><p>函数中形参 noGlobal 的作用是：模块化时，不设置全局。在实参 b 里面，定义了一个 jQuery 变量，它是一个方法，执行后返回一个新 jQuery 对象。在&quot;window.jQuery = window.$ = jQuery&quot;中会让 window.jQuery 和 window.$两个全局变量引用这个 jQuery 方法。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#98C379;">\` \`</span><span style="color:#ABB2BF;">( </span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">noGlobal</span><span style="color:#ABB2BF;"> ) {</span><span style="color:#98C379;">\`\`</span><span style="color:#98C379;">  \`\`</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">jQuery</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> jQuery</span><span style="color:#ABB2BF;">;</span><span style="color:#98C379;">\`\`</span><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_2-3、匿名函数解析" tabindex="-1">2.3、匿名函数解析： <a class="header-anchor" href="#_2-3、匿名函数解析" aria-label="Permalink to &quot;2.3、匿名函数解析：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;font-style:italic;">global</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">factory</span><span style="color:#ABB2BF;"> ) {</span></span>
<span class="line"><span style="color:#98C379;">    &quot;use strict&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//执行JavaScript严格模式</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> ( </span><span style="color:#C678DD;">typeof</span><span style="color:#E5C07B;"> module</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#C678DD;"> typeof</span><span style="color:#E5C07B;"> module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;"> ) {　　</span><span style="color:#7F848E;font-style:italic;">//module和module.exports是node.js中创建模块的方法，如果条件成立则执行下列代码兼容node.js,通过factory中间转换使jQuery各个函数功能通过node.js建立模块的方法给建立起来，否则直接执行factory函数。</span></span>
<span class="line"><span style="color:#E5C07B;">        module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> global</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">document</span><span style="color:#C678DD;"> ?</span><span style="color:#7F848E;font-style:italic;">　　//判断当前环境是否支持window.document,</span></span>
<span class="line"><span style="color:#61AFEF;">            factory</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;">global</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> ) </span><span style="color:#C678DD;">:</span><span style="color:#7F848E;font-style:italic;">　　//支持的话直接执行factory()函数</span></span>
<span class="line"><span style="color:#C678DD;">            function</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;font-style:italic;">w</span><span style="color:#ABB2BF;"> ) {　　</span><span style="color:#7F848E;font-style:italic;">//否则执行函数，报告当前环境不适用jQuery，但是最后仍然返回factory（）函数</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> ( </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">w</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;"> ) {</span></span>
<span class="line"><span style="color:#C678DD;">                    throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&quot;jQuery requires a window with a document&quot;</span><span style="color:#ABB2BF;"> );</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#61AFEF;"> factory</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;">w</span><span style="color:#ABB2BF;"> );</span></span>
<span class="line"><span style="color:#ABB2BF;">            };</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        factory</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;">global</span><span style="color:#ABB2BF;"> );</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="_2-4、-jquery-代码的总体结构" tabindex="-1">2.4、 jQuery 代码的总体结构 <a class="header-anchor" href="#_2-4、-jquery-代码的总体结构" aria-label="Permalink to &quot;2.4、 jQuery 代码的总体结构&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;3.3.1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	jQuery</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">selector</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//构造jQuery对象</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">selector</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="二、jquery-无-new-构建实例-以及-共享原型设计" tabindex="-1">二、jQuery 无 new 构建实例 以及 共享原型设计 <a class="header-anchor" href="#二、jquery-无-new-构建实例-以及-共享原型设计" aria-label="Permalink to &quot;二、jQuery 无 new 构建实例 以及 共享原型设计&quot;">​</a></h3><p>结构如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">root</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#61AFEF;"> jQuery</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#E5C07B;">	jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		init</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#61AFEF;">		css</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#E5C07B;">	jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">init</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	root</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">jQuery</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> jQuery</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">})(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>值得注意：</p><ol><li>以上就是 jQuery 最基本的架构了</li><li>jQuery 返回的是 init 属性，而不是 new 一个对象返回</li><li>如果返回的是一个 new 对象</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">root</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#61AFEF;"> jQuery</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> jQuery</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">})(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样就是形成死循环,所以 jQuery 就想出了一个共享原型的设计</p><ol><li><code>jQuery.prototype.init.prototype = jQuery.prototype;</code>这个就是共享原型设计</li></ol></blockquote><h4 id="jquery-fn-的-init-方法返回的-this-指的是什么对象" tabindex="-1">jQuery.fn 的 init 方法返回的 this 指的是什么对象 <a class="header-anchor" href="#jquery-fn-的-init-方法返回的-this-指的是什么对象" aria-label="Permalink to &quot;jQuery.fn 的 init 方法返回的 this 指的是什么对象&quot;">​</a></h4><p>jQuery.fn 的 init 方法 返回的 this 就是 jQuery 对象</p><p>用户使用 jQuery() 或 $() 即可初始化 jQuery 对象，不需要动态的去调用 init 方法</p><h3 id="三、extend-源码解析" tabindex="-1">三、extend 源码解析 <a class="header-anchor" href="#三、extend-源码解析" aria-label="Permalink to &quot;三、extend 源码解析&quot;">​</a></h3><h4 id="_1-extend-的使用方法" tabindex="-1">1. extend 的使用方法 <a class="header-anchor" href="#_1-extend-的使用方法" aria-label="Permalink to &quot;1. extend 的使用方法&quot;">​</a></h4><blockquote><ul><li>给任意对象扩充 <code>var obj = $.extend({},{name:&quot;毛毛&quot;}) eg:obj.name</code></li><li>给 jQuery 本身扩充方法和对象 <code>$.extend({work:function(){ }}) eg:$.work()</code></li><li>也可以使用$.fn来扩充 ,对jQuery的prototype进行扩充 <code>$.fn.extend({type:&quot;小动物&quot;}) eg:$().type</code></li></ul></blockquote><h4 id="_2-为什么-extend和-fn-extend-都可以扩充对象" tabindex="-1">2. 为什么$.extend和$.fn.extend 都可以扩充对象 <a class="header-anchor" href="#_2-为什么-extend和-fn-extend-都可以扩充对象" aria-label="Permalink to &quot;2. 为什么$.extend和$.fn.extend 都可以扩充对象&quot;">​</a></h4><p>只需赋一下值就行了</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">root</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#61AFEF;"> jQuery</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#E5C07B;">	jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		init</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#61AFEF;">		css</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//extend</span></span>
<span class="line"><span style="color:#E5C07B;">	jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">extend</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//共享原型对象</span></span>
<span class="line"><span style="color:#E5C07B;">	jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">init</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	root</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">jQuery</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> jQuery</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">})(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>只需要<code>jQuery.fn = jQuery.prototype</code>就可以实现$.fn与$相同的功效了，唯一不同的是$.fn代表的是jQuery.prototype，而$代表的是 jQuery</p></blockquote><h5 id="jquery-extend-与-jquery-fn-extend-的区别" tabindex="-1">jQuery.extend 与 jQuery.fn.extend 的区别 <a class="header-anchor" href="#jquery-extend-与-jquery-fn-extend-的区别" aria-label="Permalink to &quot;jQuery.extend 与 jQuery.fn.extend 的区别&quot;">​</a></h5><ul><li>$.fn.extend() 和 $.extend() 是 jQuery 为扩展插件提拱了两个方法</li><li>$.extend(object) ; // 为 jQuery 添加“静态方法”（工具方法）</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	min</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> b</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> a</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	max</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> b</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> a</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>$.extend([true,] targetObject, object1[, object2]); // 对 targt 对象进行扩展</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> settings</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">validate</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">limit</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">validate</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">settings</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 注意：不支持第一个参数传 false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// settings == {validate:true, limit:5, name:&quot;bar&quot;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>$.fn.extend(json) ; // 为 jQuery 添加“成员函数”（实例方法）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">$</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">	alertValue</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">		$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">			alert</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">val</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#email&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">alertValue</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_3-利用-extend-对-jquery-或者任意对象扩展" tabindex="-1">3. 利用 extend 对 jQuery 或者任意对象扩展 <a class="header-anchor" href="#_3-利用-extend-对-jquery-或者任意对象扩展" aria-label="Permalink to &quot;3. 利用 extend 对 jQuery 或者任意对象扩展&quot;">​</a></h4><blockquote><p>思路：获取 extend 中的参数，判断参数个数，如果参数只有一个对象，则就是给 jQuery 本身扩展；如果有不止一个对象，则将扩展参数赋值给第一个对象，实现给任意对象扩展。</p></blockquote><p>代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">extend</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> length</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> option</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		target</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//参数个数，只有一个就是给jQuery本身扩充</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		i</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//拷贝参数给要赋值的对象（这里是浅拷贝）</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//将参数赋值给target</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">option</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> option</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> option</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><blockquote><p>到此结束，就实现了对 jQuery 本身或者给任意对象扩展，但是这里用的是浅拷贝，不是深拷贝</p></blockquote><h4 id="_4-浅拷贝-深拷贝" tabindex="-1">4.浅拷贝？深拷贝？ <a class="header-anchor" href="#_4-浅拷贝-深拷贝" aria-label="Permalink to &quot;4.浅拷贝？深拷贝？&quot;">​</a></h4><blockquote><p>简单说，就是浅拷贝只是从<strong>表面上进行了复制替换</strong>，深拷贝则相当于<strong>深度遍历之后进行了复制替换</strong></p></blockquote><p>举个例行：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;apple&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">other</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">work</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Doctor&quot;</span><span style="color:#ABB2BF;"> } };</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">other</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">like</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;basketball&quot;</span><span style="color:#ABB2BF;"> } };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>将上述 b 的属性拷贝到 a 上 浅拷贝： <code>a = {name:&#39;apple&#39;,other:{like:&#39;basketball&#39;}}</code> 深拷贝： <code>a = {name:&#39;apple&#39;,other:{work:&#39;Doctor&#39;,like:&#39;basketball&#39;}}</code></p><h5 id="jquery-的属性拷⻉-extend-的实现原理是什么-如何实现深拷⻉" tabindex="-1">jQuery 的属性拷⻉(extend)的实现原理是什么，如何实现深拷⻉ <a class="header-anchor" href="#jquery-的属性拷⻉-extend-的实现原理是什么-如何实现深拷⻉" aria-label="Permalink to &quot;jQuery 的属性拷⻉(extend)的实现原理是什么，如何实现深拷⻉&quot;">​</a></h5><ul><li>浅拷⻉（只复制一份原始对象的引用） var newObject = $.extend({}, oldObject);</li><li>深拷⻉（对原始对象属性所引用的对象进行进行递归拷⻉） var newObject = $.extend(true, {}, oldObject);</li></ul><h4 id="_5-优化一下-将浅拷贝替换成深拷贝" tabindex="-1">5.优化一下，将浅拷贝替换成深拷贝 <a class="header-anchor" href="#_5-优化一下-将浅拷贝替换成深拷贝" aria-label="Permalink to &quot;5.优化一下，将浅拷贝替换成深拷贝&quot;">​</a></h4><blockquote><p>在 jQuery 中如果第一个参数设置为 true，则默认进行深拷贝，如果设置为 false 或者不写则默认是浅拷贝 <code>var obj = $.extend({},{name:&quot;毛毛&quot;})</code>这是浅拷贝 <code>var obj = $.extend(true,{},{name:&quot;毛毛&quot;})</code>这是深拷贝</p></blockquote><p>实现思路：就是第 3 节的代码块中，对参数判断时，对第一个参数判断是 true 还是 false，如果为 false，后面属性遍历不变。如果是 true，后面属性遍历需要改为深拷贝的遍历。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">extend</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> length</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> deep</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//确定是要浅拷贝还是深拷贝</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> option</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">copy</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">copyIsArray</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">clone</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//如果深拷贝，target是第二个参数，从第三个参数开始扩展</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;boolean&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		deep</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">		i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		target</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//如果没有指定扩展对象，则默认是jQuery本身，参数从i-1开始</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">		i</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//浅拷贝  深拷贝</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">option</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> option</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				copy</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> option</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">				src</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//深拷贝</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;">					deep</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">					(</span><span style="color:#E5C07B;">jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isPlainObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">copy</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">copyIsArray</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">copy</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#ABB2BF;">				) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					//确保要传入的参数是数组或者对象</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">copyIsArray</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">						copyIsArray</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						//深拷贝精髓</span></span>
<span class="line"><span style="color:#E06C75;">						clone</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> src</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> src</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">					} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">						clone</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> src</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isPlainObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> src</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					//递归深度遍历</span></span>
<span class="line"><span style="color:#E06C75;">					target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">deep</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">clone</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">copy</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					//浅拷贝</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">copy</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> copy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><blockquote><p>需要注意：</p><ol><li>jQuery.isPlainObject 和 jQuery.isArray 都只是用 jQuery 扩充的类型判断，不需要太在意</li><li>深拷贝中有两处精髓 <code>clone = src &amp;&amp; jQuery.isArray(src) ? src : [];</code> &gt; <code>clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : {};</code> 这个就是实现深拷贝的精髓了</li><li><code>target[name] = jQuery.extend(deep, clone, copy);</code>这个采用了递归的方式，也就是上面说的深度遍历的方式拷贝了所有的属性</li><li>有时候想不明白，就举个例子调试着跑一遍，一步一步跑完了就明白了。 例如： <code>var a = {} , res = {name:&#39;max&#39;,list:{age:10}}</code> &gt; <code>$.extend(true,a,res)</code> 这个就是给空对象 a 扩展对象 res ①a.name 没有值，赋值为 a.name={} ②a.name 浅拷贝赋值为 max ③a.list 没有值，赋值为 a.list = {} ④a.list.age 没有值，赋值为 a.list.age = {} ⑤a.list.age 浅拷贝，赋值为 a.list.age = 10 ⑥ 扩展结束</li></ol></blockquote><h4 id="_6-jquery-的队列是如何实现的" tabindex="-1">6.jQuery 的队列是如何实现的 <a class="header-anchor" href="#_6-jquery-的队列是如何实现的" aria-label="Permalink to &quot;6.jQuery 的队列是如何实现的&quot;">​</a></h4><ul><li>jQuery 核⼼中有一组队列控制方法，由 queue()/dequeue()/clearQueue() 三个方法组成。</li><li>主要应用于 animate() ， ajax ，其他要按时间顺序执行的事件中</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> func1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">	alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;事件1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> func2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">	alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;事件2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> func3</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">	alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;事件3&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> func4</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">	alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;事件4&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 入栈队列事件</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#box&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">queue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;queue1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">func1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// push func1 to queue1</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#box&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">queue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;queue1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">func2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// push func2 to queue1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 替换队列事件</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#box&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">queue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;queue1&quot;</span><span style="color:#ABB2BF;">, []); </span><span style="color:#7F848E;font-style:italic;">// delete queue1 with empty array</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#box&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">queue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;queue1&quot;</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">func3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">func4</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// replace queue1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取队列事件（返回一个函数数组）</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#box&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">queue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;queue1&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [func3(), func4()]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 出栈队列事件并执行</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#box&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">dequeue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;queue1&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// return func3 and do func3</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#box&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">dequeue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;queue1&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// return func4 and do func4</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 清空整个队列</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#box&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">clearQueue</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;queue1&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// delete queue1 with clearQueue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="_7-完整的代码" tabindex="-1">7.完整的代码 <a class="header-anchor" href="#_7-完整的代码" aria-label="Permalink to &quot;7.完整的代码&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">root</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#61AFEF;"> jQuery</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#E5C07B;">	jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		init</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#61AFEF;">		css</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// extend</span></span>
<span class="line"><span style="color:#E5C07B;">	jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">extend</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> length</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> deep</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> option</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">copy</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">copyIsArray</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">clone</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;boolean&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			deep</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">			i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> target</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			target</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 参数的个数 1</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			i</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 浅拷贝  深拷贝</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">option</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]) </span><span style="color:#56B6C2;">!=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> option</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">					copy</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> option</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">					src</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;">						deep</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#ABB2BF;">						(</span><span style="color:#E5C07B;">jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isPlainObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">copy</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">copyIsArray</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">copy</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#ABB2BF;">					) {</span></span>
<span class="line"><span style="color:#C678DD;">						if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">copyIsArray</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">							copyIsArray</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">							clone</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> src</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> src</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#ABB2BF;">						} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">							clone</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> src</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isPlainObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#E06C75;"> src</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">						}</span></span>
<span class="line"><span style="color:#E06C75;">						target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">deep</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">clone</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">copy</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">					} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">copy</span><span style="color:#56B6C2;"> !=</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">						target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> copy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 共享原型对象</span></span>
<span class="line"><span style="color:#E5C07B;">	jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">init</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 类型检测</span></span>
<span class="line"><span style="color:#61AFEF;">		isPlainObject</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> toString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;[object Object]&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		isArray</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> toString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;[object Array]&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#E5C07B;">	root</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> root</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">jQuery</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> jQuery</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">})(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br></div></div><h3 id="jquery-中的-bind-live-delegate-on-的区别" tabindex="-1">jQuery 中的 bind(), live(), delegate(), on()的区别 <a class="header-anchor" href="#jquery-中的-bind-live-delegate-on-的区别" aria-label="Permalink to &quot;jQuery 中的 bind(), live(), delegate(), on()的区别&quot;">​</a></h3><ul><li>bind() 直接绑定在目标元素上</li><li>live() 通过冒泡传播事件，默认 document 上，支持动态数据</li><li>delegate() 更精确的小范围使用事件代理，性能优于 live</li><li>on() 是最新的 1.9 版本整合了之前的三种方式的新事件绑定机制</li></ul><h3 id="自定义事件" tabindex="-1">自定义事件 <a class="header-anchor" href="#自定义事件" aria-label="Permalink to &quot;自定义事件&quot;">​</a></h3><p>事件即“发布/订阅”模式，自定义事件即“消息发布”，事件的监听即“订阅”</p><p>JS 原生支持自定义事件，示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建事件</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 初始化事件</span></span>
<span class="line"><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">initEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eventType</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">canBubble</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prevent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 监听事件</span></span>
<span class="line"><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dataavailable&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 触发事件</span></span>
<span class="line"><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatchEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>jQuery 里的 fire 函数用于调用 jQuery 自定义事件列表中的事件</p><h3 id="jquery-一个对象可以同时绑定多个事件-这是如何实现的" tabindex="-1">jQuery 一个对象可以同时绑定多个事件，这是如何实现的 <a class="header-anchor" href="#jquery-一个对象可以同时绑定多个事件-这是如何实现的" aria-label="Permalink to &quot;jQuery 一个对象可以同时绑定多个事件，这是如何实现的&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#btn&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mouseover mouseout&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">func</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#btn&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	mouseover</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">func1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	mouseout</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">func2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	click</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">func3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="针对-jquery-的优化方法" tabindex="-1">针对 jQuery 的优化方法 <a class="header-anchor" href="#针对-jquery-的优化方法" aria-label="Permalink to &quot;针对 jQuery 的优化方法&quot;">​</a></h3><ul><li>缓存频繁操作 DOM 对象</li><li>尽量使用 id 选择器代替 class 选择器</li><li>总是从 #id 选择器来继承</li><li>尽量使用链式操作</li><li>使用时间委托 on 绑定事件</li><li>采用 jQuery 的内部函数 data() 来存储数据</li><li>使用最新版本的 jQuery</li></ul>`,96)]))}const C=n(t,[["render",r]]);export{F as __pageData,C as default};
