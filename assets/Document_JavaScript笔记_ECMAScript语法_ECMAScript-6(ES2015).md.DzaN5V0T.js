import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"ECMAScript-6(ES2015)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-6(ES2015).md","filePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-6(ES2015).md","lastUpdated":1750954157000}'),o={name:"Document/JavaScript笔记/ECMAScript语法/ECMAScript-6(ES2015).md"};function e(r,s,t,c,B,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ecmascript-6-es2015" tabindex="-1">ECMAScript-6(ES2015) <a class="header-anchor" href="#ecmascript-6-es2015" aria-label="Permalink to &quot;ECMAScript-6(ES2015)&quot;">​</a></h1><p>编程之家-ES6 教程：<a href="https://www.jb51.cc/es6-tutorial/" target="_blank" rel="noreferrer">https://www.jb51.cc/es6-tutorial/</a></p><p>阮一峰的开源书籍《ES6 入门教程》，这本书定义 ES6 之后的语法统称 ES6：<a href="https://es6.ruanyifeng.com/" target="_blank" rel="noreferrer">https://es6.ruanyifeng.com/</a></p><h2 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;ES6&quot;">​</a></h2><h3 id="_1-为什么要学习-es6" tabindex="-1">1.为什么要学习 ES6 <a class="header-anchor" href="#_1-为什么要学习-es6" aria-label="Permalink to &quot;1.为什么要学习 ES6&quot;">​</a></h3><ul><li><p>⚫ ES6 的版本变动内容最多，具有里程碑意义</p></li><li><p>⚫ ES6 加入许多新的语法特性，编程实现更简单、高效</p></li><li><p>⚫ ES6 是前端发展趋势，就业必备技能</p></li></ul><h3 id="_2-开始-聚焦-es6" tabindex="-1">2.开始 （聚焦 ES6） <a class="header-anchor" href="#_2-开始-聚焦-es6" aria-label="Permalink to &quot;2.开始 （聚焦 ES6）&quot;">​</a></h3><p>这里引用 <code>阮一峰</code> 老师的 <code>ES6标准入门</code> 一书中的总结：ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版本以后的 <code>JavaScript</code> 的下一代标准，涵盖了 <code>ES2015、ES2016、ES2017</code>等，而 <code>ES2015</code> 则是正式名称，特指当年发布的正式版本的语言标准 市面上提到的 ES6 一般是指 <code>ES2015</code> 标准，但有时也是泛指 <code>下一代 JavaScript</code></p><p><strong>本文主要讲解以下内容:</strong></p><ul><li>块级作用域（Block scoping，ES2015）</li><li>解构（Destructuring，ES2015）</li><li>箭头函数（Arrow Functions，ES2015）</li><li>模板字符串（template string，ES2015）</li><li>剩余参数 / 展开语法（Rest and spread parameters，ES2015）</li><li>对象字面量简写语法（Object shorthand，ES2015）</li><li>数组实例的 includes() （ES2016）</li><li>Async/await 异步语法 (ES2017)</li></ul><h3 id="_2-es6-级其他es版本兼容性" tabindex="-1">2.ES6 级其他ES版本兼容性 <a class="header-anchor" href="#_2-es6-级其他es版本兼容性" aria-label="Permalink to &quot;2.ES6 级其他ES版本兼容性&quot;">​</a></h3><p>查看兼容性</p><ul><li><p>各大浏览器对 ES 语法的支持：<a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noreferrer">http://kangax.github.io/compat-table/es6/</a></p></li><li><p><a href="http://kangax.github.io/compat-table/" target="_blank" rel="noreferrer">http://kangax.github.io/compat-table/</a></p></li></ul><p>语法兼容性查询网站<code>can i use</code>：<a href="https://caniuse.com" target="_blank" rel="noreferrer">https://caniuse.com</a></p><p>ES6+版本的代码 --&gt; 通过 webpack的Babel插件 --&gt; ES5 版本支持的代码</p><ul><li>兼容性更好</li></ul><h2 id="提案" tabindex="-1">提案 <a class="header-anchor" href="#提案" aria-label="Permalink to &quot;提案&quot;">​</a></h2><h2 id="_01-let-和-const" tabindex="-1">01.let 和 const <a class="header-anchor" href="#_01-let-和-const" aria-label="Permalink to &quot;01.let 和 const&quot;">​</a></h2><h3 id="let-声明变量" tabindex="-1">let 声明变量 <a class="header-anchor" href="#let-声明变量" aria-label="Permalink to &quot;let 声明变量&quot;">​</a></h3><h4 id="_1-let-作用域只局限于当前代码块" tabindex="-1">1.let 作用域只局限于当前代码块{ } <a class="header-anchor" href="#_1-let-作用域只局限于当前代码块" aria-label="Permalink to &quot;1.let 作用域只局限于当前代码块{ }&quot;">​</a></h4><p>块级作用域的任意嵌套</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span></span>
<span class="line"><span style="color:#C678DD;">					let</span><span style="color:#E06C75;"> insane</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello World&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">insane</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。 第四层作用域无法读取第五层作用域的内部变量</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> f1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 5</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面的函数有两个代码块，都声明了变量 n，运行后输出 5。这表示外层代码块不受内层代码块的影响。 如果两次都使用 var 定义变量 n，最后输出的值才是 10。</p><p>内层作用域可以定义外层作用域的同名变量</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#ABB2BF;">			{</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> insane</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello World&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span></span>
<span class="line"><span style="color:#C678DD;">					let</span><span style="color:#E06C75;"> insane</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello World&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>作用</p><ul><li><p>块级作用域的出现，实际上使得获得广泛应用的匿名立即执行函数表达式（匿名 IIFE）不再必要了。</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// IIFE 写法</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ...;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 块级作用域写法</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ...;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul></li><li><p>原因看面试题</p></li></ul><h4 id="_2-let-声明的变量同层作用域下不能重复声明" tabindex="-1">2.let 声明的变量同层作用域下不能重复声明 <a class="header-anchor" href="#_2-let-声明的变量同层作用域下不能重复声明" aria-label="Permalink to &quot;2.let 声明的变量同层作用域下不能重复声明&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> func</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> func</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>内层作用域可以定义外层作用域的同名变量</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 不能在函数内部重新声明参数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> func</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> arg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 不同作用域则可以</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 内层作用域可以定义外层作用域的同名变量</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> func</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> arg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 不报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_3-使用-let-声明的变量作用域不会提升" tabindex="-1">3.使用 let 声明的变量作用域不会提升 <a class="header-anchor" href="#_3-使用-let-声明的变量作用域不会提升" aria-label="Permalink to &quot;3.使用 let 声明的变量作用域不会提升&quot;">​</a></h4><p>var 命令会发生“变量提升”现象，即变量可以在声明之前使用，值为 undefined</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// var 的情况</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 输出undefined</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> foo</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>脚本开始运行时，变量 foo 已经存在了，但是没有值，所以会输出 undefined</p><p>let 所声明的变量一定要在声明后使用，否则报错</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// let 的情况</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 报错ReferenceError</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> bar</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_4-暂时性死区特性-变量在-let-const-声明之前使用" tabindex="-1">4.暂时性死区特性 (变量在 let || const 声明之前使用) <a class="header-anchor" href="#_4-暂时性死区特性-变量在-let-const-声明之前使用" aria-label="Permalink to &quot;4.暂时性死区特性 (变量在 let || const 声明之前使用)&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;abc&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// ReferenceError</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> tmp</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面代码中，存在全局变量 tmp，但是块级作用域内 let 又声明了一个局部变量 tmp，导致后者绑定这个块级作用域，所以在 let 声明变量前，对 tmp 赋值会报错</p><p>解释</p><ul><li><p>ES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p></li><li><p>总之，在代码块内，使用 let 命令声明变量之前，该变量都是不可用的</p></li><li><p>跟作用域提升一样的报错信息</p><ul><li><p>ReferenceError</p></li><li><p>ReferenceError: xxx is not defined</p></li></ul></li></ul><h3 id="const-声明常量" tabindex="-1">const 声明常量 <a class="header-anchor" href="#const-声明常量" aria-label="Permalink to &quot;const 声明常量&quot;">​</a></h3><h4 id="_1-只在当前的代码块-中有效" tabindex="-1">1.只在当前的代码块{}中有效 <a class="header-anchor" href="#_1-只在当前的代码块-中有效" aria-label="Permalink to &quot;1.只在当前的代码块{}中有效&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> MAX</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">MAX</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 作用域外使用报错：Uncaught ReferenceError: MAX is not defined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-作用域不会提升" tabindex="-1">2.作用域不会提升 <a class="header-anchor" href="#_2-作用域不会提升" aria-label="Permalink to &quot;2.作用域不会提升&quot;">​</a></h4><h4 id="_3-暂时性死区" tabindex="-1">3.暂时性死区 <a class="header-anchor" href="#_3-暂时性死区" aria-label="Permalink to &quot;3.暂时性死区&quot;">​</a></h4><p>const 命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MAX</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// ReferenceError</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> MAX</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码在常量 MAX 声明之前就调用，结果报错。</p><h4 id="_4-const-声明的常量不能重复声明" tabindex="-1">4.const 声明的常量不能重复声明 <a class="header-anchor" href="#_4-const-声明的常量不能重复声明" aria-label="Permalink to &quot;4.const 声明的常量不能重复声明&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 25</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 以下两行都会报错</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> message</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Goodbye!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_5-基本数据类型常量在声明之后值不可更改" tabindex="-1">5.基本数据类型常量在声明之后值不可更改 <a class="header-anchor" href="#_5-基本数据类型常量在声明之后值不可更改" aria-label="Permalink to &quot;5.基本数据类型常量在声明之后值不可更改&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> PI</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3.1415</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">PI</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 3.1415</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">PI</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// TypeError: Assignment to constant variable.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_6-声明的常量必须赋值" tabindex="-1">6.声明的常量必须赋值 <a class="header-anchor" href="#_6-声明的常量必须赋值" aria-label="Permalink to &quot;6.声明的常量必须赋值&quot;">​</a></h4><p>const 声明的变量不得改变值，这意味着，const 一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> foo</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// SyntaxError: Missing initializer in const declaration</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_7-复合数据类型常量在声明之后值可更改-但不可重新赋值" tabindex="-1">7.复合数据类型常量在声明之后值可更改，但不可重新赋值 <a class="header-anchor" href="#_7-复合数据类型常量在声明之后值可更改-但不可重新赋值" aria-label="Permalink to &quot;7.复合数据类型常量在声明之后值可更改，但不可重新赋值&quot;">​</a></h4><p>复合数据类型常量在声明之后值可更改（数据结构内部值可更改），但不可重新赋值(内存地址不可更改)</p><p>文档：<a href="https://es6.ruanyifeng.com/?search=Reflect&amp;x=0&amp;y=0#docs/let#%E6%9C%AC%E8%B4%A8" target="_blank" rel="noreferrer">https://es6.ruanyifeng.com/?search=Reflect&amp;x=0&amp;y=0#docs/let#本质</a></p><p>const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个 内存地址 所保存的数据不得改动</p><p>对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量</p><p>但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const 只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> foo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 为 foo 添加一个属性，可以成功</span></span>
<span class="line"><span style="color:#E5C07B;">foo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">foo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将 foo 指向另一个对象，就会报错</span></span>
<span class="line"><span style="color:#E06C75;">foo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}; </span><span style="color:#7F848E;font-style:italic;">// TypeError: &quot;foo&quot; is read-only</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>代码中，常量 foo 储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把 foo 指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 改变属性，成功</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将数组指向另一个数组，就会报错</span></span>
<span class="line"><span style="color:#E06C75;">array</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>2</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 可执行</span></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 可执行</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;Dave&quot;</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>代码中，常量 a 是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给 a，就会报错。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 可执行</span></span>
<span class="line"><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 可执行</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;Dave&quot;</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="对象冻结" tabindex="-1">对象冻结 <a class="header-anchor" href="#对象冻结" aria-label="Permalink to &quot;对象冻结&quot;">​</a></h5><h6 id="_1-真的想将对象冻结-应该使用-object-freeze-方法" tabindex="-1">1.真的想将对象冻结，应该使用 Object.freeze 方法 <a class="header-anchor" href="#_1-真的想将对象冻结-应该使用-object-freeze-方法" aria-label="Permalink to &quot;1.真的想将对象冻结，应该使用 Object.freeze 方法&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> foo</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">freeze</span><span style="color:#ABB2BF;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 常规模式时，下面一行不起作用；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 严格模式时，该行会报错</span></span>
<span class="line"><span style="color:#E5C07B;">foo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>代码中，常量 foo 指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。</p><h6 id="_2-对象的属性也应该冻结" tabindex="-1">2.对象的属性也应该冻结 <a class="header-anchor" href="#_2-对象的属性也应该冻结" aria-label="Permalink to &quot;2.对象的属性也应该冻结&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> constantize</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">freeze</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			constantize</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="let、const、var-的区别" tabindex="-1">let、const、var 的区别 <a class="header-anchor" href="#let、const、var-的区别" aria-label="Permalink to &quot;let、const、var 的区别&quot;">​</a></h3><h4 id="var-定义的变量" tabindex="-1">var 定义的变量 <a class="header-anchor" href="#var-定义的变量" aria-label="Permalink to &quot;var 定义的变量&quot;">​</a></h4><ul><li><p>1.没有块级作用域的概念，可以跨块访问, 不能跨函数访问</p></li><li><p>2.存在变量提升：允许你在变量声明前使用变量</p></li><li><p>var 变量提升的问题引起的报错 (for 循环 var 声明变量，会变成全局变量)</p><ul><li><p>for 循环用 var 声明的 i 变量报错</p><ul><li><p><a href="https://juejin.cn/post/6844903717594988557" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903717594988557</a></p></li><li><p>遍历点击改变颜色代码例子</p><ul><li><p>正常运行代码</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">h2</span><span style="color:#D19A66;font-style:italic;"> class</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;page-header&quot;</span><span style="color:#ABB2BF;">&gt;点击切换颜色</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        //获取div元素对象</span></span>
<span class="line"><span style="color:#ABB2BF;">        let items = document.getElementsByClassName(&#39;item&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        //遍历并绑定事件</span></span>
<span class="line"><span style="color:#ABB2BF;">        for(let i = 0;i&lt;items.length;i++)</span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E06C75;">            items</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                //修改当前元素的背景颜色</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // this.style.background = &#39;pink&#39;;</span></span>
<span class="line"><span style="color:#E06C75;">                items</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">background</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;pink&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">        }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li></ul></li><li><p>错误代码</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//遍历并绑定事件</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	items</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//修改当前元素的背景颜色</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this.style.background = &#39;pink&#39;;</span></span>
<span class="line"><span style="color:#E06C75;">		items</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">background</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;pink&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul></li></ul></li></ul></li></ul></li></ul><h4 id="let-定义的变量" tabindex="-1">let 定义的变量 <a class="header-anchor" href="#let-定义的变量" aria-label="Permalink to &quot;let 定义的变量&quot;">​</a></h4><ul><li><p>1.只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</p></li><li><p>2.不存在变量提升：不允许你在变量声明前使用变量</p></li><li><p>3.暂时性死区特性</p><ul><li>函数或方法外部和内部可以声明同名变量</li></ul></li></ul><p>在 for 循环 let 定义变量</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 报错未定义</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>这个 let 声明的 i 变量没有变量提升 for 循环外面访问不到，会报错（防止循环变量，变成全局变量）</p></li></ul><h4 id="const-用来定义常量" tabindex="-1">const 用来定义常量 <a class="header-anchor" href="#const-用来定义常量" aria-label="Permalink to &quot;const 用来定义常量&quot;">​</a></h4><p>使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</p><p>例子代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 块作用域</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// c = 4;</span><span style="color:#7F848E;font-style:italic;"> // 报错</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> aa</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> bb</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// const cc;</span><span style="color:#7F848E;font-style:italic;"> // 报错</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">aa</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">bb</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(b);</span><span style="color:#7F848E;font-style:italic;"> // 报错</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(c);</span><span style="color:#7F848E;font-style:italic;"> // 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 函数作用域</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> A</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> f</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 7</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 5</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 6</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 7</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(d);</span><span style="color:#7F848E;font-style:italic;"> // 报错</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(e);</span><span style="color:#7F848E;font-style:italic;"> // 报错</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(f);</span><span style="color:#7F848E;font-style:italic;"> // 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h4 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h4><h5 id="var-变量和-let-变量计数循环对比" tabindex="-1">var 变量和 let 变量计数循环对比 <a class="header-anchor" href="#var-变量和-let-变量计数循环对比" aria-label="Permalink to &quot;var 变量和 let 变量计数循环对比&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>此题的关键点在于变量 i 是全局的，函数执行时输出的都是全局作用域下的 i 值。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>此题的关键点在于每次循环都会产生一个块级作用域，每个块级作用域中的变量都是不同的，函数执行时输出的是自己上一级（循环产生的块级作用域）作用域下的 i 值.</p><h5 id="var-变量-内层变量可能会覆盖外层变量" tabindex="-1">var 变量：内层变量可能会覆盖外层变量 <a class="header-anchor" href="#var-变量-内层变量可能会覆盖外层变量" aria-label="Permalink to &quot;var 变量：内层变量可能会覆盖外层变量&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> f</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tmp</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hello world&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面代码的原意是，if 代码块的外部使用外层的 tmp 变量，内部使用内层的 tmp 变量。 但是，函数 f 执行后，输出结果为 undefined，原因在于变量提升，导致内层的 tmp 变量覆盖了外层的 tmp 变量。</p><h5 id="var-变量-用来计数的循环变量泄露为全局变量" tabindex="-1">var 变量：用来计数的循环变量泄露为全局变量 <a class="header-anchor" href="#var-变量-用来计数的循环变量泄露为全局变量" aria-label="Permalink to &quot;var 变量：用来计数的循环变量泄露为全局变量&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hello&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码中，变量 i 只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p><h5 id="块级作用域可以替换立即执行函数作用域的原因" tabindex="-1">块级作用域可以替换立即执行函数作用域的原因 <a class="header-anchor" href="#块级作用域可以替换立即执行函数作用域的原因" aria-label="Permalink to &quot;块级作用域可以替换立即执行函数作用域的原因&quot;">​</a></h5><h6 id="立即执行函数" tabindex="-1">立即执行函数 <a class="header-anchor" href="#立即执行函数" aria-label="Permalink to &quot;立即执行函数&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>立即执行函数里面的 var 变量，是这个函数的局部变量</li><li>可以借 立即执行函数 使 var 声明的变量，变成函数的局部变量</li></ul><h6 id="let-的块级作用域" tabindex="-1">let 的块级作用域 <a class="header-anchor" href="#let-的块级作用域" aria-label="Permalink to &quot;let 的块级作用域&quot;">​</a></h6><ul><li>替代了立即执行函数的局部变量的功能</li></ul><h5 id="块级作用域与函数声明" tabindex="-1">块级作用域与函数声明 <a class="header-anchor" href="#块级作用域与函数声明" aria-label="Permalink to &quot;块级作用域与函数声明&quot;">​</a></h5><ul><li><p><a href="https://es6.ruanyifeng.com/?search=Reflect&amp;x=0&amp;y=0#docs/let#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E" target="_blank" rel="noreferrer">https://es6.ruanyifeng.com/?search=Reflect&amp;x=0&amp;y=0#docs/let#块级作用域与函数声明</a></p></li><li><p>函数能不能在块级作用域之中声明？这是一个相当令人混淆的问题。</p></li></ul><h2 id="_02-变量的解构赋值" tabindex="-1">02.变量的解构赋值 <a class="header-anchor" href="#_02-变量的解构赋值" aria-label="Permalink to &quot;02.变量的解构赋值&quot;">​</a></h2><p>ES6 允许按照一定模式，从数组和对象中提取值， 对变量进行赋值，这被称为解构(Destructuring)</p><h3 id="声明变量的六种方法" tabindex="-1">声明变量的六种方法 <a class="header-anchor" href="#声明变量的六种方法" aria-label="Permalink to &quot;声明变量的六种方法&quot;">​</a></h3><ul><li><p>ES5 只有两种声明变量的方法：</p><ul><li><p>var 命令</p></li><li><p>function 命令</p></li></ul></li><li><p>ES6 添加了四种命令</p><ul><li><p>let 命令</p></li><li><p>const 命令</p></li><li><p>import 命令</p></li><li><p>class 命令</p></li></ul></li></ul><h3 id="_1-解构基本用法" tabindex="-1">1.解构基本用法 <a class="header-anchor" href="#_1-解构基本用法" aria-label="Permalink to &quot;1.解构基本用法&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>相当于</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;张三&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 18</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;男&#39;</span><span style="color:#ABB2BF;">；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-对象的解构赋值" tabindex="-1">2.对象的解构赋值 <a class="header-anchor" href="#_2-对象的解构赋值" aria-label="Permalink to &quot;2.对象的解构赋值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;aaa&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bbb&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;aaa&quot;</span></span>
<span class="line"><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;bbb&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_1-对象的属性没有次序-变量必须与属性同名-才能取到正确的值" tabindex="-1">1.对象的属性没有次序，变量必须与属性同名，才能取到正确的值 <a class="header-anchor" href="#_1-对象的属性没有次序-变量必须与属性同名-才能取到正确的值" aria-label="Permalink to &quot;1.对象的属性没有次序，变量必须与属性同名，才能取到正确的值&quot;">​</a></h4><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;aaa&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bbb&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;aaa&quot;</span></span>
<span class="line"><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;bbb&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 变量没有对应的同名属性，导致取不到值，最后等于undefined</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">baz</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;aaa&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bbb&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">baz</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>解构失败</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 如果解构失败，变量foo的值等于undefined</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;baz&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h4 id="_2-将现有对象的方法-赋值到某个变量" tabindex="-1">2.将现有对象的方法，赋值到某个变量 <a class="header-anchor" href="#_2-将现有对象的方法-赋值到某个变量" aria-label="Permalink to &quot;2.将现有对象的方法，赋值到某个变量&quot;">​</a></h4><p>例子一</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 例一：将Math对象的对数、正弦、余弦三个方法，赋值到对应的变量上</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">log</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sin</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cos</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> Math</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>例子二</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 例二：将console.log赋值到log变量</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">log</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> console</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-要修改变量名字-得指定名字赋值-let-原变量名-要改成的变量名" tabindex="-1">3.要修改变量名字，得指定名字赋值： let { 原变量名: 要改成的变量名 } <a class="header-anchor" href="#_3-要修改变量名字-得指定名字赋值-let-原变量名-要改成的变量名" aria-label="Permalink to &quot;3.要修改变量名字，得指定名字赋值： let { 原变量名: 要改成的变量名 }&quot;">​</a></h4><p>实际上原来的是简写</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 原来的</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;aaa&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;bbb&#39;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以自动简写成</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">:, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;aaa&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;bbb&#39;</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>foo 是匹配的模式，baz 才是变量</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">baz</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;aaa&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bbb&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">baz</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;aaa&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>s</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">last</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;world&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">last</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">l</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;hello&#39;</span></span>
<span class="line"><span style="color:#E06C75;">l</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;world&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_4-嵌套结构的对象" tabindex="-1">4.嵌套结构的对象 <a class="header-anchor" href="#_4-嵌套结构的对象" aria-label="Permalink to &quot;4.嵌套结构的对象&quot;">​</a></h4><p>这时 p 是模式，不是变量，因此不会被赋值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	p</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;World&quot;</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	p</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;Hello&quot;</span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;World&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>p 也要作为变量赋值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	p</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;World&quot;</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	p</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	p</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> }],</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;Hello&quot;</span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;World&quot;</span></span>
<span class="line"><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// [&quot;Hello&quot;, {y: &quot;World&quot;}]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>三次解构赋值，分别是对 loc、start、line 三个属性的解构赋值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> node</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	loc</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		start</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			line</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			column</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	loc</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	loc</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E06C75;">	loc</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		start</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">line</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> node</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">line</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">loc</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Object {start: Object}</span></span>
<span class="line"><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Object {line: 1, column: 5}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_5-对象嵌套赋值" tabindex="-1">5.对象嵌套赋值 <a class="header-anchor" href="#_5-对象嵌套赋值" aria-label="Permalink to &quot;5.对象嵌套赋值&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// {prop:123}</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// [true]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	foo</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">baz</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;baz&quot;</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_6-对象的解构赋值可以取到继承的属性" tabindex="-1">6.对象的解构赋值可以取到继承的属性 <a class="header-anchor" href="#_6-对象的解构赋值可以取到继承的属性" aria-label="Permalink to &quot;6.对象的解构赋值可以取到继承的属性&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setPrototypeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">obj2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">foo</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> obj1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;bar&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><p>对象 obj1 的原型对象是 obj2。foo 属性不是 obj1 自身的属性，而是继承自 obj2 的属性，解构赋值可以取到这个属性</p></li><li><p><code>Object.setPrototypeOf(obj, proto)</code></p><ul><li><p>参数</p><ul><li><p>obj：要设置原型对象的对象。</p></li><li><p>proto：该对象的新原型对象或 null，否则抛出 TypeError 异常。</p></li></ul></li><li><p>返回值</p><ul><li>设置了新的原型对象的对象</li></ul></li></ul></li></ul><h4 id="_7-对象的解构指定默认值" tabindex="-1">7.对象的解构指定默认值 <a class="header-anchor" href="#_7-对象的解构指定默认值" aria-label="Permalink to &quot;7.对象的解构指定默认值&quot;">​</a></h4><p>使用例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Something went wrong&quot;</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;Something went wrong&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>默认值生效的条件是，对象的属性值严格等于 undefined</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 默认值生效</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 默认值不生效</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_3-数组的解构赋值" tabindex="-1">3.数组的解构赋值 <a class="header-anchor" href="#_3-数组的解构赋值" aria-label="Permalink to &quot;3.数组的解构赋值&quot;">​</a></h3><p>模式匹配</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等价于</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>1.嵌套数组进行解构</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, , </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [, , </span><span style="color:#E06C75;">third</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;baz&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">third</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;baz&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">arr1</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">arr3</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">arr4</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">arr5</span><span style="color:#ABB2BF;">]]] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]]];</span></span>
<span class="line"><span style="color:#E06C75;">arr1</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#E06C75;">arr3</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#E06C75;">arr4</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 4</span></span>
<span class="line"><span style="color:#E06C75;">arr5</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">tail</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">tail</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// [2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">z</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;a&quot;</span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#E06C75;">z</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// []</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>2.解构不成功</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>两种情况都属于解构不成功，foo 的值都会等于 undefined。</p><p>3.不完全解构</p><ul><li>即等号左边的模式，只匹配一部分的等号右边的数组</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">], </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>4.报错解构</p><p>如果等号的右边不是数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> NaN</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）</p><p>5.Set 结构给 数组的解构赋值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">z</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;a&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>6.只要某种数据结构具有 Iterator 接口 都可以采用数组形式的解构赋值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function*</span><span style="color:#61AFEF;"> fibs</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		yield</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		[</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">second</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">third</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fourth</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fifth</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sixth</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> fibs</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">sixth</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码中，fibs 是一个 Generator 生成器函数（参见《11.迭代器和生成器》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值</p><p>7.数据解构的默认值</p><p>解构赋值允许指定默认值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">foo</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;b&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// x=&#39;a&#39;, y=&#39;b&#39;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;b&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// x=&#39;a&#39;, y=&#39;b&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>只有当一个数组成员严格等于(===) undefined，默认值才会生效</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// 默认值生效</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>解构赋值表达式结合</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> f</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;aaa&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> f</span><span style="color:#ABB2BF;">()] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>上面代码中，因为 x 能取到值，所以函数 f 根本不会执行。</p><p>上面的代码其实等价于下面的代码。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">][</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	x</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> f</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	x</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">][</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>默认值可以引用解构赋值的其他变量， 但该变量必须已经声明</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []; </span><span style="color:#7F848E;font-style:italic;">// x=1; y=1</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// x=2; y=2</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// x=1; y=2</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []; </span><span style="color:#7F848E;font-style:italic;">// ReferenceError: y is not defined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面最后一个表达式之所以会报错，是因为 x 用 y 做默认值时，y 还没有声明</p><h4 id="数组的解构赋值注意点" tabindex="-1">数组的解构赋值注意点 <a class="header-anchor" href="#数组的解构赋值注意点" aria-label="Permalink to &quot;数组的解构赋值注意点&quot;">​</a></h4><h5 id="_1-如果要将一个已经声明的变量用于解构赋值-必须非常小心" tabindex="-1">（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心 <a class="header-anchor" href="#_1-如果要将一个已经声明的变量用于解构赋值-必须非常小心" aria-label="Permalink to &quot;（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 错误的写法</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// SyntaxError: syntax error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码的写法会报错，因为 JavaScript 引擎会将{x}理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 正确的写法</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。</p></li><li><p>关于圆括号与解构赋值的关系：</p><ul><li><a href="https://es6.ruanyifeng.com/?search=Reflect&amp;x=0&amp;y=0#docs/destructuring#%E5%9C%86%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">https://es6.ruanyifeng.com/?search=Reflect&amp;x=0&amp;y=0#docs/destructuring#圆括号问题</a></li></ul></li></ul><h5 id="_2-解构赋值允许等号左边的模式之中-不放置任何变量名。因此-可以写出非常古怪的赋值表达式" tabindex="-1">（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式 <a class="header-anchor" href="#_2-解构赋值允许等号左边的模式之中-不放置任何变量名。因此-可以写出非常古怪的赋值表达式" aria-label="Permalink to &quot;（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">({} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">({} </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;abc&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">({} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> []);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p><h5 id="_3-由于数组本质是特殊的对象-因此可以对数组进行对象属性的解构" tabindex="-1">（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构 <a class="header-anchor" href="#_3-由于数组本质是特殊的对象-因此可以对数组进行对象属性的解构" aria-label="Permalink to &quot;（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;">, [</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">last</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">last</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p>对数组进行对象解构</p></li><li><p>数组 arr 的 0 键对应的值是 1，[arr.length - 1]就是 2 键，对应的值是 3</p></li><li><p>方括号这种写法，属于“属性名表达式”</p></li></ul><h3 id="_4-字符串的解构赋值" tabindex="-1">4.字符串的解构赋值 <a class="header-anchor" href="#_4-字符串的解构赋值" aria-label="Permalink to &quot;4.字符串的解构赋值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">c</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;hello&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;h&quot;</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;e&quot;</span></span>
<span class="line"><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;l&quot;</span></span>
<span class="line"><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;l&quot;</span></span>
<span class="line"><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;o&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>字符串被转换成了一个类似数组的对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">len</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;hello&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">len</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>类似数组的对象都有一个 length 属性，因此还可以对这个属性字符串的长度解构赋值</p><h3 id="_5-数值和布尔值的解构赋值" tabindex="-1">5.数值和布尔值的解构赋值 <a class="header-anchor" href="#_5-数值和布尔值的解构赋值" aria-label="Permalink to &quot;5.数值和布尔值的解构赋值&quot;">​</a></h3><p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 解构赋值时，如果等号右边是数值和布尔值，则会先转为对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">toString</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">s</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> Number</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">toString</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">toString</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">s</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> Boolean</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">toString</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>数值和布尔值的包装对象都有 toString 属性，因此变量 s 都能取到值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>由于 undefined 和 null 无法转为对象，所以对它们进行解构赋值，都会报错</p><h3 id="_6-函数参数的解构赋值" tabindex="-1">6.函数参数的解构赋值 <a class="header-anchor" href="#_6-函数参数的解构赋值" aria-label="Permalink to &quot;6.函数参数的解构赋值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>函数 add 的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量 x 和 y</p><p>js 内置方法解构赋值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(([</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [ 3, 7 ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>函数参数的解构 使用默认值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// undefined就会触发函数参数的默认值</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;yes&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [ 1, &#39;yes&#39;, 3 ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> move</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;"> }); </span><span style="color:#7F848E;font-style:italic;">// [3, 8]</span></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> }); </span><span style="color:#7F848E;font-style:italic;">// [3, 0]</span></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">({}); </span><span style="color:#7F848E;font-style:italic;">// [0, 0]</span></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// [0, 0]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码中，函数 move 的参数是一个对象，通过对这个对象进行解构，得到变量 x 和 y 的值。如果解构失败，x 和 y 等于默认值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> move</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;"> }); </span><span style="color:#7F848E;font-style:italic;">// [3, 8]</span></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> }); </span><span style="color:#7F848E;font-style:italic;">// [3, undefined]</span></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">({}); </span><span style="color:#7F848E;font-style:italic;">// [undefined, undefined]</span></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// [0, 0]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码是为函数 move 的参数指定默认值，而不是为变量 x 和 y 指定默认值，所以会得到与前一种写法不同的结果</p><h3 id="_7-圆括号问题" tabindex="-1">7.圆括号问题 <a class="header-anchor" href="#_7-圆括号问题" aria-label="Permalink to &quot;7.圆括号问题&quot;">​</a></h3><p>文档：<a href="https://es6.ruanyifeng.com/?search=Reflect&amp;x=0&amp;y=0#docs/destructuring#%E5%9C%86%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">https://es6.ruanyifeng.com/?search=Reflect&amp;x=0&amp;y=0#docs/destructuring#圆括号问题</a></p><h3 id="变量的解构赋值用途" tabindex="-1">变量的解构赋值用途 <a class="header-anchor" href="#变量的解构赋值用途" aria-label="Permalink to &quot;变量的解构赋值用途&quot;">​</a></h3><h4 id="_1-交换变量的值" tabindex="-1">（1）交换变量的值 <a class="header-anchor" href="#_1-交换变量的值" aria-label="Permalink to &quot;（1）交换变量的值&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_2-从函数返回多个值" tabindex="-1">（2）从函数返回多个值 <a class="header-anchor" href="#_2-从函数返回多个值" aria-label="Permalink to &quot;（2）从函数返回多个值&quot;">​</a></h4><p>返回一个数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 返回一个数组</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> example</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> example</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>返回一个对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 返回一个对象</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> example</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		foo</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		bar</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> example</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_3-函数参数的定义" tabindex="-1">（3）函数参数的定义 <a class="header-anchor" href="#_3-函数参数的定义" aria-label="Permalink to &quot;（3）函数参数的定义&quot;">​</a></h4><p>参数是一组有次序的值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 参数是一组有次序的值</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> f</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">z</span><span style="color:#ABB2BF;">]) { ... }</span></span>
<span class="line"><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>参数是一组无次序的值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 参数是一组无次序的值</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> f</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">z</span><span style="color:#ABB2BF;">}) { ... }</span></span>
<span class="line"><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">z</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_4-提取-json-数据" tabindex="-1">（4）提取 JSON 数据 <a class="header-anchor" href="#_4-提取-json-数据" aria-label="Permalink to &quot;（4）提取 JSON 数据&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> jsonData</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	status</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;OK&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">867</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5309</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> jsonData</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 42, &quot;OK&quot;, [867, 5309]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_5-函数参数的默认值" tabindex="-1">（5）函数参数的默认值 <a class="header-anchor" href="#_5-函数参数的默认值" aria-label="Permalink to &quot;（5）函数参数的默认值&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义参数</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> param</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  async</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">  beforeSend</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#E06C75;">  cache</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">  complete</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#E06C75;">  crossDomain</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  global</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ... more config</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 函数</span></span>
<span class="line"><span style="color:#E5C07B;">jQuery</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ajax</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">,  </span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ... do stuff</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>指定参数的默认值，就避免了在函数体内部再写 var foo = config.foo || &#39;default foo&#39;;这样的语句</p><h4 id="_6-遍历-map-结构获取键值对" tabindex="-1">（6）遍历 Map 结构获取键值对 <a class="header-anchor" href="#_6-遍历-map-结构获取键值对" aria-label="Permalink to &quot;（6）遍历 Map 结构获取键值对&quot;">​</a></h4><p>任何部署了 Iterator 接口的对象，都可以用 for...of 循环遍历。</p><p>Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> map</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;first&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;second&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;world&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">of</span><span style="color:#E06C75;"> map</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot; is &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// first is hello</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// second is world</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果只想获取键名，或者只想获取键值</p><p>获取键名</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取键名</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">of</span><span style="color:#E06C75;"> map</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>获取键值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取键值</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">of</span><span style="color:#E06C75;"> map</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_7-输入模块的指定方法" tabindex="-1">（7）输入模块的指定方法 <a class="header-anchor" href="#_7-输入模块的指定方法" aria-label="Permalink to &quot;（7）输入模块的指定方法&quot;">​</a></h4><p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">SourceMapConsumer</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">SourceNode</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;source-map&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ul><li><p>解构赋值就是把数据结构分解，然后给变量进行赋值</p></li><li><p>如果结构不成功，变量跟数值个数不匹配的时候，变量的值为 undefined</p></li><li><p>数组解构用中括号包裹，多个变量用逗号隔开，对象解构用花括号包裹，多个变量用逗号隔开</p></li><li><p>利用解构赋值能够让我们方便的去取对象中的属性跟方法</p></li></ul><h2 id="_03-字符串的扩展" tabindex="-1">03.字符串的扩展 <a class="header-anchor" href="#_03-字符串的扩展" aria-label="Permalink to &quot;03.字符串的扩展&quot;">​</a></h2><h3 id="_1-字符的-unicode-表示法" tabindex="-1">1.字符的 Unicode 表示法 <a class="header-anchor" href="#_1-字符的-unicode-表示法" aria-label="Permalink to &quot;1.字符的 Unicode 表示法&quot;">​</a></h3><p>ES6 加强了对 Unicode 的支持</p><ul><li><p>允许采用\\uxxxx 形式表示一个字符，其中 xxxx 表示字符的 Unicode 码点</p></li><li><p>// &quot;a&quot;的 Unicode 编码 &quot;\\u0061&quot;</p></li></ul><p>但是，这种表示法只限于码点在\\u0000~\\uFFFF 之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\uD842\\uDFB7</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot;𠮷&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u20BB</span><span style="color:#98C379;">7&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot; 7&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果直接在\\u 后面跟上超过 0xFFFF 的数值（比如\\u20BB7），JavaScript 会理解成\\u20BB+7。由于\\u20BB 是一个不可打印字符，所以只会显示一个空格，后面跟着一个 7</p><p>只要将码点放入大括号，就能正确解读该字符</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u{20BB7}</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot;𠮷&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u{41}\\u{42}\\u{43}</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot;ABC&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> hello</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">hello</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 大括号表示法与四字节的 UTF-16 编码是等价的</span></span>
<span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u{1F680}</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;</span><span style="color:#56B6C2;">\\uD83D\\uDE80</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;z&quot;</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;z&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\172</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;z&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\x7A</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;z&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u007A</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;z&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u{7A}</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;z&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-字符串的遍历器接口-for-of" tabindex="-1">2.字符串的遍历器接口 for...of <a class="header-anchor" href="#_2-字符串的遍历器接口-for-of" aria-label="Permalink to &quot;2.字符串的遍历器接口 for...of&quot;">​</a></h3><h4 id="es6-为字符串添加了遍历器接口-详见迭代器-iterator-使得字符串可以被-for-of-循环遍历" tabindex="-1">ES6 为字符串添加了遍历器接口（详见迭代器(Iterator)），使得字符串可以被 for...of 循环遍历 <a class="header-anchor" href="#es6-为字符串添加了遍历器接口-详见迭代器-iterator-使得字符串可以被-for-of-循环遍历" aria-label="Permalink to &quot;ES6 为字符串添加了遍历器接口（详见迭代器(Iterator)），使得字符串可以被 for...of 循环遍历&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> codePoint</span><span style="color:#C678DD;"> of</span><span style="color:#98C379;"> &quot;foo&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">codePoint</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot;f&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot;o&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot;o&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="识别大于-0xffff-的码点" tabindex="-1">识别大于 0xFFFF 的码点 <a class="header-anchor" href="#识别大于-0xffff-的码点" aria-label="Permalink to &quot;识别大于 0xFFFF 的码点&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> text</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fromCodePoint</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0x20bb7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> text</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot; &quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot; &quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> text</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot;𠮷&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面代码中，字符串 text 只有一个字符，但是 for 循环会认为它包含两个字符（都不可打印），而 for...of 循环会正确识别出这一个字符。</p><h3 id="_3-直接输入-u-2028-和-u-2029" tabindex="-1">3.直接输入 U+2028 和 U+2029 <a class="header-anchor" href="#_3-直接输入-u-2028-和-u-2029" aria-label="Permalink to &quot;3.直接输入 U+2028 和 U+2029&quot;">​</a></h3><h3 id="json-stringify-的改造" tabindex="-1">JSON.stringify() 的改造 <a class="header-anchor" href="#json-stringify-的改造" aria-label="Permalink to &quot;JSON.stringify() 的改造&quot;">​</a></h3><h3 id="_03-模板字符串" tabindex="-1">03.模板字符串 <a class="header-anchor" href="#_03-模板字符串" aria-label="Permalink to &quot;03.模板字符串&quot;">​</a></h3><p>ES6 新增的创建字符串的方式，使用反引号定义</p><p>1.基本定义</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`zhangsan\`</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.模板字符串中可以解析变量</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;张三&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> sayHello</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`hello,my name is </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sayHello</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>3.模板字符串中可以换行</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \` </span></span>
<span class="line"><span style="color:#C678DD;">     \${</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#C678DD;">     \${</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#C678DD;">     \${</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">  \`</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>4.在模板字符串中可以调用函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> sayHello</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &quot;哈哈 追不到我吧&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> greet</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> 啦啦啦\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">greet</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 哈哈 追不到我吧啦啦啦</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_04-对象简化写法" tabindex="-1">04.对象简化写法 <a class="header-anchor" href="#_04-对象简化写法" aria-label="Permalink to &quot;04.对象简化写法&quot;">​</a></h2><p>对象声明简化</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ‘</span><span style="color:#E06C75;">张三</span><span style="color:#ABB2BF;">’</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 18</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> info</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">age</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 变成</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ‘</span><span style="color:#E06C75;">张三</span><span style="color:#ABB2BF;">’</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 18</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> info</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  age</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>对象方法简化写法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> school</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	func</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 变成</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> school</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	func</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_05-箭头函数" tabindex="-1">05.箭头函数 <a class="header-anchor" href="#_05-箭头函数" aria-label="Permalink to &quot;05.箭头函数&quot;">​</a></h2><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><ul><li><p><code>() =&gt; {}</code></p><ul><li>()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；{}：函数体</li></ul></li><li><p><code>const fn = () =&gt; {}</code></p><ul><li>把一个函数赋值给 fn 常量，便于调用</li></ul></li><li><p><code>const fn = (n1,n2) =&gt; n1 + n2</code></p><ul><li>返回值可以省略{},直接写代码 n1+n2</li></ul></li><li><p><code>const fn = n1 =&gt; n1</code></p><ul><li>形参只有一个可以省略()，和只有一条语句时，可以省略{}</li></ul></li></ul><h3 id="剩余参数" tabindex="-1">剩余参数 <a class="header-anchor" href="#剩余参数" aria-label="Permalink to &quot;剩余参数&quot;">​</a></h3><p>使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> total</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">total</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> total</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>...args <ul><li>剩余的参数全部给它</li></ul></li></ul><p>剩余参数配合解构使用</p><h3 id="箭头函数的-this-指向" tabindex="-1">箭头函数的 this 指向 <a class="header-anchor" href="#箭头函数的-this-指向" aria-label="Permalink to &quot;箭头函数的 this 指向&quot;">​</a></h3><p>1.箭头函数不绑定 this 关键字，箭头函数中的 this，指向的是函数定义位置的上下文 this (函数声明时所在作用域下的 this 的值)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//this 指向 是obj对象</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> resFn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">resFn</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>2.如果在箭头函数中使用 this，this 关键字将指向 箭头函数定义位置中的 this</p><ul><li><p>定义箭头函数中的作用域的 this 指向谁，它就指向谁</p></li><li><p>对象不能产生作用域，如果调用的是对象里面的方法，this.指向的是全局变量</p><p>3.箭头函数不适合与 this 有关的回调. 事件回调, 对象的方法</p></li></ul><h3 id="箭头函数使用注意" tabindex="-1">箭头函数使用注意 <a class="header-anchor" href="#箭头函数使用注意" aria-label="Permalink to &quot;箭头函数使用注意&quot;">​</a></h3><h4 id="_1-箭头函数的-this-是静态的" tabindex="-1">1.箭头函数的 this 是静态的 <a class="header-anchor" href="#_1-箭头函数的-this-是静态的" aria-label="Permalink to &quot;1.箭头函数的 this 是静态的&quot;">​</a></h4><p>无论用什么方式想改变 this 的值，this 的指向始终都是函数声明时所在的作用域下</p><h4 id="_2-箭头函数-不能作为构造函数实例化对象" tabindex="-1">2.箭头函数 不能作为构造函数实例化对象 <a class="header-anchor" href="#_2-箭头函数-不能作为构造函数实例化对象" aria-label="Permalink to &quot;2.箭头函数 不能作为构造函数实例化对象&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> me</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;xiao0&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">me</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_3-不能使用-argumnets-变量" tabindex="-1">3.不能使用 argumnets 变量 <a class="header-anchor" href="#_3-不能使用-argumnets-变量" aria-label="Permalink to &quot;3.不能使用 argumnets 变量&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> fn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>要使用剩余参数...args</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> total</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">total</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> total</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>...args：剩余的参数全部给它</p><h3 id="箭头函数应用场景" tabindex="-1">箭头函数应用场景 <a class="header-anchor" href="#箭头函数应用场景" aria-label="Permalink to &quot;箭头函数应用场景&quot;">​</a></h3><p>箭头函数适用于与 this 无关的回调：定时器、数组的方法回调</p><h4 id="定时变色案例" tabindex="-1">定时变色案例 <a class="header-anchor" href="#定时变色案例" aria-label="Permalink to &quot;定时变色案例&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//需求：  点击 div 2s 后颜色变成『粉色』</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//获取元素</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> ad</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ad&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//绑定事件</span></span>
<span class="line"><span style="color:#E5C07B;">ad</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//保存 this 的值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// let _this = this;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//定时器</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//修改背景颜色 this</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(this);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// _this.style.background = &#39;pink&#39;;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">background</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;pink&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="数组中返回偶数的元素案例" tabindex="-1">数组中返回偶数的元素案例 <a class="header-anchor" href="#数组中返回偶数的元素案例" aria-label="Permalink to &quot;数组中返回偶数的元素案例&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//需求-2  从数组中返回偶数的元素</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">25</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const result = arr.filter(function(item){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     if(item % 2 === 0){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         return true;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     }else{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         return false;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="箭头函数面试题" tabindex="-1">箭头函数面试题 <a class="header-anchor" href="#箭头函数面试题" aria-label="Permalink to &quot;箭头函数面试题&quot;">​</a></h3><p>1</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	say</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//箭头函数this指向的是被声明的作用域里面，而对象没有作用域的，所以箭头函数虽然在对象中被定义，但是this指向的是全局作用域</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_06-函数参数默认值" tabindex="-1">06.函数参数默认值 <a class="header-anchor" href="#_06-函数参数默认值" aria-label="Permalink to &quot;06.函数参数默认值&quot;">​</a></h2><p>1.形参初始值 具有默认值的参数, 一般位置要靠后(潜规则)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>2.与解构赋值结合</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> connect</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">host</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;127.0.0.1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">port</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">host</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">port</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;atguigu.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_07-rest-剩余参数" tabindex="-1">07.rest 剩余参数 <a class="header-anchor" href="#_07-rest-剩余参数" aria-label="Permalink to &quot;07.rest 剩余参数&quot;">​</a></h2><p>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments</p><p>ES5 剩余参数变量 arguments</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> date</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// arguments代表剩余参数</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">date</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;阿娇&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;柏芝&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;思慧&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>函数 rest 剩余参数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> date</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">date</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;阿娇&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;柏芝&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;思慧&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>函数 rest 剩余参数 必须要放到参数最后</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>剩余参数和解构配合使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> students</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;lisi&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">s2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> students</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;wangwu&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [&#39;zhangsan&#39;, &#39;lisi&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_08-spread-拓展运算符" tabindex="-1">08.spread 拓展运算符 <a class="header-anchor" href="#_08-spread-拓展运算符" aria-label="Permalink to &quot;08.spread 拓展运算符&quot;">​</a></h2><p>扩展运算符（spread）也是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包。</p><h3 id="扩展例子" tabindex="-1">扩展例子 <a class="header-anchor" href="#扩展例子" aria-label="Permalink to &quot;扩展例子&quot;">​</a></h3><p>数组扩展</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;d&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">ary</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>数组参数扩展</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;3&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> chunwan</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">chunwan</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// chunwan(&#39;易烊千玺&#39;,&#39;王源&#39;,&#39;王俊凯&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="拓展运算符应用" tabindex="-1">拓展运算符应用 <a class="header-anchor" href="#拓展运算符应用" aria-label="Permalink to &quot;拓展运算符应用&quot;">​</a></h3><h4 id="_1-数组合并" tabindex="-1">1.数组合并 <a class="header-anchor" href="#_1-数组合并" aria-label="Permalink to &quot;1.数组合并&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> kuaizi</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;王太利&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;肖央&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fenghuang</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;曾毅&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;玲花&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> zuixuanxiaopingguo</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> kuaizi</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fenghuang</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> zuixuanxiaopingguo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#E06C75;">kuaizi</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">fenghuang</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">zuixuanxiaopingguo</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>push 方法合并数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">fenghuang</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">kuaizi</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-一维数组的或对象克隆-一层数组或对象的深拷贝" tabindex="-1">2.一维数组的或对象克隆 (一层数组或对象的深拷贝) <a class="header-anchor" href="#_2-一维数组的或对象克隆-一层数组或对象的深拷贝" aria-label="Permalink to &quot;2.一维数组的或对象克隆 (一层数组或对象的深拷贝)&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sanzhihua</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;E&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;G&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;M&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  [&#39;E&#39;,&#39;G&#39;,&#39;M&#39;]</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sanyecao</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#E06C75;">sanzhihua</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sanyecao</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3-将伪数组转为真正的数组" tabindex="-1">3.将伪数组转为真正的数组 <a class="header-anchor" href="#_3-将伪数组转为真正的数组" aria-label="Permalink to &quot;3.将伪数组转为真正的数组&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 伪数组</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> divs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;div&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 转成真数组</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> divArr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#E06C75;">divs</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">divArr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// arguments参数也可以转，但rest参数足以</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>使用构造函数 Array.from()方法 也能将伪数组转成真正的数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个集合</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arrayLike</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D19A66;">	0</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">	1</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">	2</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	length</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 转成数组</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayLike</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>方法还可以接受第二个参数-函数，作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arrayLike</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D19A66;">	0</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">	1</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	length</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> newAry</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayLike</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [2,4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_09-symbol-类型" tabindex="-1">09.Symbol 类型 <a class="header-anchor" href="#_09-symbol-类型" aria-label="Permalink to &quot;09.Symbol 类型&quot;">​</a></h2><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型。</p><h3 id="symbol-特点" tabindex="-1">Symbol 特点 <a class="header-anchor" href="#symbol-特点" aria-label="Permalink to &quot;Symbol 特点&quot;">​</a></h3><ul><li><p>1.Symbol 的值是唯一的，用来解决命名冲突的问题</p></li><li><p>2.Symbol 值不能与其他数据进行运算</p></li><li><p>3.Symbol 定义的对象属性不能使用 for…in 循环遍历 ，但是可以使用 Reflect.ownKeys 来获取对象的所有键名</p></li></ul><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li><p>ES5 的对象属性名都是字符串，容易造成属性名冲突</p></li><li><p>Symbol 类型用于解决命名冲突</p></li><li><p>注: 遇到唯一性的场景时要想到 Symbol</p></li></ul><h3 id="创建方法" tabindex="-1">创建方法 <a class="header-anchor" href="#创建方法" aria-label="Permalink to &quot;创建方法&quot;">​</a></h3><h4 id="正常创建" tabindex="-1">正常创建 <a class="header-anchor" href="#正常创建" aria-label="Permalink to &quot;正常创建&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 Symbol</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> s1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> s1</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="添加标识创建" tabindex="-1">添加标识创建 <a class="header-anchor" href="#添加标识创建" aria-label="Permalink to &quot;添加标识创建&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//添加标识的 Symbol</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> s2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;尚硅谷&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> s2_2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;尚硅谷&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s2</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> s2_2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="使用-symbol-for-定义" tabindex="-1">使用 Symbol for 定义 <a class="header-anchor" href="#使用-symbol-for-定义" aria-label="Permalink to &quot;使用 Symbol for 定义&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 Symbol for 定义 值是相等的</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> s3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;尚硅谷&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> s3_2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;尚硅谷&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s3</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> s3_2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="symbol-类型应用" tabindex="-1">Symbol 类型应用 <a class="header-anchor" href="#symbol-类型应用" aria-label="Permalink to &quot;Symbol 类型应用&quot;">​</a></h3><p>向对象中添加属性或属性方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//向对象中添加方法 up down</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> game</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;俄罗斯方块&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	up</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#61AFEF;">	down</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//声明一个对象，添加属性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// let methods = {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     up: Symbol(),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     down: Symbol()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// game[methods.up] = function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     console.log(&quot;我可以改变形状&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// game[methods.down] = function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     console.log(&quot;我可以快速下降!!&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(game);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> youxi</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;狼人杀&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 添加属性方法</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#61AFEF;">Symbol</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;say&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">]: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我可以发言&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#61AFEF;">Symbol</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;zibao&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">]: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我可以自爆&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">youxi</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h4 id="对象的属性名-可以有两种类型" tabindex="-1">对象的属性名 可以有两种类型 <a class="header-anchor" href="#对象的属性名-可以有两种类型" aria-label="Permalink to &quot;对象的属性名 可以有两种类型&quot;">​</a></h4><ul><li><p>字符串</p><ul><li>let s4 = Symbol.for(&#39;哈哈哈&#39;); let s5 = Symbol.for(&#39;哈哈哈&#39;)</li></ul></li><li><p>Symbol 类型</p><ul><li>独一无二，不会与其他属性名冲突</li></ul></li><li><p>不能与其他数据进行运算</p></li></ul><h4 id="使用注意" tabindex="-1">使用注意 <a class="header-anchor" href="#使用注意" aria-label="Permalink to &quot;使用注意&quot;">​</a></h4><p>不能与其他数据进行运算和比较</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//不能与其他数据进行运算</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    let result = s + 100;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    let result = s &gt; 100;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    let result = s + s;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="symbol-内置值" tabindex="-1">Symbol 内置值 <a class="header-anchor" href="#symbol-内置值" aria-label="Permalink to &quot;Symbol 内置值&quot;">​</a></h3><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。可以称这些方法为魔术方法，因为它们会在特定的场 景下自动执行。</p><p>文档：<a href="https://www.cnblogs.com/zygll/p/14262826.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/zygll/p/14262826.html</a></p><h4 id="内置值" tabindex="-1">内置值 <a class="header-anchor" href="#内置值" aria-label="Permalink to &quot;内置值&quot;">​</a></h4><ul><li><p>Symbol.hasInstance</p><ul><li>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</li></ul></li><li><p>Symbol.isConcatSpreadable</p><ul><li>对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开。</li></ul></li><li><p>Symbol.species</p><ul><li>创建衍生对象时，会使用该属性</li></ul></li><li><p>Symbol.match</p><ul><li>当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</li></ul></li><li><p>Symbol.replace</p><ul><li>当该对象被 str.replace(myObject)方法调用时，会返回该方法的返回值。</li></ul></li><li><p>Symbol.search</p><ul><li>当该对象被 str. search (myObject)方法调用时，会返回该方法的返回值。</li></ul></li><li><p>Symbol.split</p><ul><li>当该对象被 str. split (myObject)方法调用时，会返回该方法的返回值。</li></ul></li><li><p>Symbol.iterator</p><ul><li>对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</li></ul></li><li><p>Symbol.toPrimitive</p><ul><li>该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</li></ul></li><li><p>Symbol.toStringTag</p><ul><li>在该对象上面调用 toString 方法时，返回该方法的返回值</li></ul></li><li><p>Symbol.unscopables</p><ul><li>该对象指定了使用 with 关键字时，哪些属性会被 with 环境排除。</li></ul></li></ul><h4 id="使用例子" tabindex="-1">使用例子 <a class="header-anchor" href="#使用例子" aria-label="Permalink to &quot;使用例子&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hasInstance</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我被用来检测类型了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> o</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">o</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isConcatSpreadable</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_10-内置对象方法扩展" tabindex="-1">10.内置对象方法扩展 <a class="header-anchor" href="#_10-内置对象方法扩展" aria-label="Permalink to &quot;10.内置对象方法扩展&quot;">​</a></h2><h3 id="数组方法的扩展" tabindex="-1">数组方法的扩展 <a class="header-anchor" href="#数组方法的扩展" aria-label="Permalink to &quot;数组方法的扩展&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">ary1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">ary2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> ary3</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#E06C75;">ary1</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">ary2</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p>...ary1</p><ul><li>拆分成 1,2,3</li></ul></li><li><p>分解后再合并成一个数组 arry3</p></li></ul><p>将伪数组转成真数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将伪数组转成真数组</span></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">伪数组名</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">函数</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>零散的数统一转成数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 零散的数统一转成数组</span></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>找出第一个符合条件的数组成员，如果没有找到返回 undefined</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">查找条件</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 查找条件可以是函数，或者其他</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findIndex</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>某个数组是否包含给定的 1 值，返回布尔值</p><p>参数</p><ul><li><p>可以是字符串</p></li><li><p>可以是数字</p></li><li><p>可以是其他</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>复制宽度</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copywithin</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">copywithin</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1,2,3,8,9,6,7,8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><p>第一个参数</p><ul><li>从哪个下标开始</li></ul></li><li><p>第二和第三个参数</p><ul><li>范围[start,end]</li></ul></li></ul><h3 id="数值方法的扩展" tabindex="-1">数值方法的扩展 <a class="header-anchor" href="#数值方法的扩展" aria-label="Permalink to &quot;数值方法的扩展&quot;">​</a></h3><h4 id="_0-number-epsilon" tabindex="-1">0.Number.EPSILON <a class="header-anchor" href="#_0-number-epsilon" aria-label="Permalink to &quot;0.Number.EPSILON&quot;">​</a></h4><p>是 JavaScript 表示的最小精度</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> equal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;"> Number</span><span style="color:#ABB2BF;">.EPSILON) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 浮点数运算和对比</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.1</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 0.2</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0.3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">equal</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.1</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 0.2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.3</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_1-二进制和八进制的表示方式" tabindex="-1">1.二进制和八进制的表示方式 <a class="header-anchor" href="#_1-二进制和八进制的表示方式" aria-label="Permalink to &quot;1.二进制和八进制的表示方式&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0b1010</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> o</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0o777</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0xff</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-number-isfinite" tabindex="-1">2.Number.isFinite <a class="header-anchor" href="#_2-number-isfinite" aria-label="Permalink to &quot;2.Number.isFinite&quot;">​</a></h4><p>检测一个数值是否为有限数，返回布尔值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFinite</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFinite</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isFinite</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">Infinity</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-number-isnan" tabindex="-1">3.Number.isNaN <a class="header-anchor" href="#_3-number-isnan" aria-label="Permalink to &quot;3.Number.isNaN&quot;">​</a></h4><p>检测一个数值是否为 NaN ，返回布尔值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_4-number-parseint-number-parsefloat" tabindex="-1">4.Number.parseInt | Number.parseFloat <a class="header-anchor" href="#_4-number-parseint-number-parsefloat" aria-label="Permalink to &quot;4.Number.parseInt | Number.parseFloat&quot;">​</a></h4><p>字符串转整数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;5211314love&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseFloat</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;3.1415926神奇&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_5-number-isinteger" tabindex="-1">5.Number.isInteger <a class="header-anchor" href="#_5-number-isinteger" aria-label="Permalink to &quot;5.Number.isInteger&quot;">​</a></h4><p>判断一个数是否为整数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isInteger</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isInteger</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2.5</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_6-math-trunc" tabindex="-1">6.Math.trunc <a class="header-anchor" href="#_6-math-trunc" aria-label="Permalink to &quot;6.Math.trunc&quot;">​</a></h4><p>将数字的小数部分抹掉</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">trunc</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3.5</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_7-math-sign" tabindex="-1">7.Math.sign <a class="header-anchor" href="#_7-math-sign" aria-label="Permalink to &quot;7.Math.sign&quot;">​</a></h4><p>判断一个数到底为正数 负数 还是零</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sign</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sign</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sign</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">20000</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="字符串方法的扩展" tabindex="-1">字符串方法的扩展 <a class="header-anchor" href="#字符串方法的扩展" aria-label="Permalink to &quot;字符串方法的扩展&quot;">​</a></h3><h4 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串&quot;">​</a></h4><p>ES6 新增的创建字符串的方式，使用反引号定义</p><h5 id="_1-基本定义" tabindex="-1">1.基本定义 <a class="header-anchor" href="#_1-基本定义" aria-label="Permalink to &quot;1.基本定义&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`zhangsan\`</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_2-模板字符串中可以解析变量" tabindex="-1">2.模板字符串中可以解析变量 <a class="header-anchor" href="#_2-模板字符串中可以解析变量" aria-label="Permalink to &quot;2.模板字符串中可以解析变量&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;张三&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> sayHello</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`hello,my name is </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sayHello</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_3-模板字符串中可以换行" tabindex="-1">3.模板字符串中可以换行 <a class="header-anchor" href="#_3-模板字符串中可以换行" aria-label="Permalink to &quot;3.模板字符串中可以换行&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;zhangsan&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \` </span></span>
<span class="line"><span style="color:#C678DD;">     \${</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#C678DD;">     \${</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#C678DD;">     \${</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#98C379;">  \`</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="_4-在模板字符串中可以调用函数" tabindex="-1">4.在模板字符串中可以调用函数 <a class="header-anchor" href="#_4-在模板字符串中可以调用函数" aria-label="Permalink to &quot;4.在模板字符串中可以调用函数&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> sayHello</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &quot;哈哈 追不到我吧&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> greet</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> 啦啦啦\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">greet</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 哈哈 追不到我吧啦啦啦</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="startswith-和-endswith" tabindex="-1">startsWith() 和 endsWith() <a class="header-anchor" href="#startswith-和-endswith" aria-label="Permalink to &quot;startsWith() 和 endsWith()&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello world!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">endsWith</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;!&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p>startsWith()</p><ul><li>表示参数字符串是否在原字符串的头部，返回布尔值</li></ul></li><li><p>endsWith()</p><ul><li>表示参数字符串是否在原字符串的尾部，返回布尔值</li></ul></li></ul><h4 id="str-repeat" tabindex="-1">str.repeat() <a class="header-anchor" href="#str-repeat" aria-label="Permalink to &quot;str.repeat()&quot;">​</a></h4><p>将原字符串重复 n 次，返回一个新字符串</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;x&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">repeat</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &quot;xxx&quot;</span></span>
<span class="line"><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">repeat</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &quot;hellohello&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="对象方法的扩展" tabindex="-1">对象方法的扩展 <a class="header-anchor" href="#对象方法的扩展" aria-label="Permalink to &quot;对象方法的扩展&quot;">​</a></h3><h4 id="object-is-obj1-obj2" tabindex="-1">Object.is(obj1,obj2) <a class="header-anchor" href="#object-is-obj1-obj2" aria-label="Permalink to &quot;Object.is(obj1,obj2)&quot;">​</a></h4><p>判断两个值是否完全相等，返回布尔值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// true为真，是相等的</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> NaN</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false 为假，不相等</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="object-assign-obj1-obj2-obj3" tabindex="-1">Object.assign(obj1,obj2,obj3) <a class="header-anchor" href="#object-assign-obj1-obj2-obj3" aria-label="Permalink to &quot;Object.assign(obj1,obj2,obj3)&quot;">​</a></h4><p>多个对象合并到 第一个对象 里面去：适合用于 配置的合并</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 配置项的合并例子</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> config1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;localhost&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	pass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	test</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> config2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://atguigu.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">33060</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;atguigu.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	pass</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;iloveyou&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	test2</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test2&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">config1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">config2</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="object-setprototypeof-object-getprototypeof" tabindex="-1">Object.setPrototypeOf() Object.getPrototypeOf() <a class="header-anchor" href="#object-setprototypeof-object-getprototypeof" aria-label="Permalink to &quot;Object.setPrototypeOf() Object.getPrototypeOf()&quot;">​</a></h4><p>获取和设置原型对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取和设置原型对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> school</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;尚硅谷&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cities</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	xiaoqu</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;北京&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;上海&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;深圳&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setPrototypeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">school</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cities</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPrototypeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">school</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">school</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="延展操作符" tabindex="-1">延展操作符 <a class="header-anchor" href="#延展操作符" aria-label="Permalink to &quot;延展操作符&quot;">​</a></h4><ul><li>去除重复数据</li></ul><h3 id="数据集合方法" tabindex="-1">数据集合方法 <a class="header-anchor" href="#数据集合方法" aria-label="Permalink to &quot;数据集合方法&quot;">​</a></h3><h4 id="_1-数据集合-new-set" tabindex="-1">1.数据集合-new Set() <a class="header-anchor" href="#_1-数据集合-new-set" aria-label="Permalink to &quot;1.数据集合-new Set()&quot;">​</a></h4><h5 id="new-set-方法简介" tabindex="-1">new Set()方法简介 <a class="header-anchor" href="#new-set-方法简介" aria-label="Permalink to &quot;new Set()方法简介&quot;">​</a></h5><p>ES6 提供了新的数据结构 Set（集合）。 它类似于数组，但成员的值都是唯一的，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> se</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&quot;大事&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;好事&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;小事&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;坏事&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> v</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> se</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="new-set-方法概况" tabindex="-1">new Set()方法概况 <a class="header-anchor" href="#new-set-方法概况" aria-label="Permalink to &quot;new Set()方法概况&quot;">​</a></h5><h6 id="_1-特点" tabindex="-1">1.特点 <a class="header-anchor" href="#_1-特点" aria-label="Permalink to &quot;1.特点&quot;">​</a></h6><ul><li><p>01.类似于数组，没有重复的元素(唯一的)</p></li><li><p>02.开发中用于去除重复数据</p></li><li><p>03.key 和 value 都是相等的</p></li></ul><h6 id="_2-四个方法" tabindex="-1">2.四个方法 <a class="header-anchor" href="#_2-四个方法" aria-label="Permalink to &quot;2.四个方法&quot;">​</a></h6><ul><li><p>构造函数创建：<code>const set = new Set();</code></p></li><li><p>add(value)</p><ul><li><p>set.add(&#39;张三&#39;);</p></li><li><p>添加某个值，返回 Set 结构本身</p></li></ul></li><li><p>delete(value)</p><ul><li><p>set.delete(&#39;张三&#39;);</p></li><li><p>删除某个值，返回一个布尔值，表示删除是否成功</p></li></ul></li><li><p>has(value)</p><ul><li><p>set.has(&#39;张三&#39;);</p></li><li><p>返回一个布尔值，表示该值是否为 Set 的成员</p></li></ul></li><li><p>clear()</p><ul><li><p>set.clear();</p></li><li><p>清除所有成员，没有返回值</p></li></ul></li></ul><h6 id="_3-一个属性" tabindex="-1">3.一个属性 <a class="header-anchor" href="#_3-一个属性" aria-label="Permalink to &quot;3.一个属性&quot;">​</a></h6><ul><li>set.size <ul><li>获取过滤重复值后的数组长度</li></ul></li></ul><h6 id="从数据结构中取值遍历" tabindex="-1">从数据结构中取值遍历 <a class="header-anchor" href="#从数据结构中取值遍历" aria-label="Permalink to &quot;从数据结构中取值遍历&quot;">​</a></h6><p>Set 结构的实例与数组一样，拥有 forEach 方法，用于对每个成员执行某种操作，没有返回值</p><p>相当于：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> set</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;d&#39;</span><span style="color:#ABB2BF;">]) </span><span style="color:#E5C07B;">set</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="new-set-方法的使用" tabindex="-1">new Set()方法的使用 <a class="header-anchor" href="#new-set-方法的使用" aria-label="Permalink to &quot;new Set()方法的使用&quot;">​</a></h5><p>const newSet = new Set();</p><ul><li>Set 本身是一个构造函数，用来生成 Set 数据结构</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Set函数可以接受一个数组作为参数， 用来初始化。</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> set</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">set</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 值转为{1, 2, 3, 4} , 去除了重复的数据 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>new Set()方法可以做数组去重：常用于用户搜索记录功能</p><h5 id="new-set-方法应用" tabindex="-1">new Set()方法应用 <a class="header-anchor" href="#new-set-方法应用" aria-label="Permalink to &quot;new Set()方法应用&quot;">​</a></h5><h6 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h6 id="交集" tabindex="-1">交集 <a class="header-anchor" href="#交集" aria-label="Permalink to &quot;交集&quot;">​</a></h6><ul><li><p>数组</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li><li><p>全部</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)].</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> s2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 4 5 6</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">s2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul></li><li><p>简化</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)].</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ul><h6 id="并集" tabindex="-1">并集 <a class="header-anchor" href="#并集" aria-label="Permalink to &quot;并集&quot;">​</a></h6><p>数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> union</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">([...</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">])];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">union</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h6 id="差集" tabindex="-1">差集 <a class="header-anchor" href="#差集" aria-label="Permalink to &quot;差集&quot;">​</a></h6><p>数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> diff</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)].</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#56B6C2;"> !</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">diff</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-数据集合-new-map" tabindex="-1">2.数据集合-new Map() <a class="header-anchor" href="#_2-数据集合-new-map" aria-label="Permalink to &quot;2.数据集合-new Map()&quot;">​</a></h4><h5 id="new-map-方法简介" tabindex="-1">new Map()方法简介 <a class="header-anchor" href="#new-map-方法简介" aria-label="Permalink to &quot;new Map()方法简介&quot;">​</a></h5><ul><li><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。</p></li><li><p>但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p></li><li><p>Map 也实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历</p></li></ul><h5 id="new-map-方法概况" tabindex="-1">new Map()方法概况 <a class="header-anchor" href="#new-map-方法概况" aria-label="Permalink to &quot;new Map()方法概况&quot;">​</a></h5><ul><li><p>1.特点</p><ul><li><p>01.类似于对象，本质上是键值对的集合</p><ul><li>Object 解构提供了&quot;字符串-值&quot;的对应。Map 结构提供了&quot;值-值&quot;的对应， 是一种 的 Hash 结构的实现</li></ul></li><li><ol start="2"><li></li></ol></li></ul></li><li><p>2.属性</p><ul><li>map.size <ul><li>长度</li></ul></li></ul></li><li><p>3.常用方法</p><ul><li><p>1.set 和 get：设置和获取</p><ul><li><p>map.set(age,[&#39;gg&#39;,&#39;ll&#39;]).set([&#39;dog&#39;],&#39;ggg&#39;)</p></li><li><p>map.get(age)</p></li></ul></li><li><p>2.delete</p><ul><li>map.delete(obj);</li></ul></li><li><p>3.has</p><ul><li>map.has(obj);</li></ul></li><li><p>4.clear</p><ul><li>map.clear();</li></ul></li><li><p>5.keys(), values(), entries()</p><ul><li><p>map.keys();</p></li><li><p>map.values();</p></li><li><p>map.entries();</p></li></ul></li></ul></li><li><p>4.遍历</p><ul><li>map.forEach();</li></ul></li></ul><h5 id="new-map-方法的使用" tabindex="-1">new Map()方法的使用 <a class="header-anchor" href="#new-map-方法的使用" aria-label="Permalink to &quot;new Map()方法的使用&quot;">​</a></h5><p>1</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//创建一个空 map</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> m</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//创建一个非空 map</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> m2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;尚硅谷&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#98C379;">&quot;slogon&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;不断提高行业标准&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//属性和方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//获取映射元素的个数</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">size</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//添加映射值</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//获取映射值</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//检测是否有该映射</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//清除</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//遍历</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> v</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> m</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>2</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 声明 Map</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> m</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 添加元素</span></span>
<span class="line"><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;尚硅谷&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;change&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我们可以改变你!!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	school</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ATGUIGU&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&quot;北京&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;上海&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;深圳&quot;</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//size</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(m.size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//删除</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// m.delete(&#39;name&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//获取</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(m.get(&#39;change&#39;));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(m.get(key));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//清空</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// m.clear();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//遍历</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> v</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> m</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(m);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h5 id="new-map-方法应用" tabindex="-1">new Map()方法应用 <a class="header-anchor" href="#new-map-方法应用" aria-label="Permalink to &quot;new Map()方法应用&quot;">​</a></h5><h2 id="_11-迭代器和生成器" tabindex="-1">11.迭代器和生成器 <a class="header-anchor" href="#_11-迭代器和生成器" aria-label="Permalink to &quot;11.迭代器和生成器&quot;">​</a></h2><h3 id="迭代器-iterator" tabindex="-1">迭代器(Iterator) <a class="header-anchor" href="#迭代器-iterator" aria-label="Permalink to &quot;迭代器(Iterator)&quot;">​</a></h3><h4 id="迭代器简介" tabindex="-1">迭代器简介 <a class="header-anchor" href="#迭代器简介" aria-label="Permalink to &quot;迭代器简介&quot;">​</a></h4><ul><li><p>ES6 创造了一种新的遍历命令 for...of 循环，Iterator 接口主要供 for...of 消费</p></li><li><p>迭代器也称遍历器（Iterator）就是一种机制。</p></li><li><p>它是一种接口，为各种不同的数据结构提供统一的访问机制。</p></li><li><p>任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。使得集合的操作变得更容易</p></li></ul><h4 id="两个核心" tabindex="-1">两个核心 <a class="header-anchor" href="#两个核心" aria-label="Permalink to &quot;两个核心&quot;">​</a></h4><ul><li><p>1）迭代器能快捷的访问数据，通过 Symbol.iterator 创建迭代器，通过迭代器的 next()方法获取结果</p></li><li><p>2）迭代器是用于遍历数据结构的指针（数据库的游标）</p></li></ul><h4 id="原生具备-iterator-接口的数据-可用-for-of-遍历" tabindex="-1">原生具备 iterator 接口的数据 (可用 for of 遍历) <a class="header-anchor" href="#原生具备-iterator-接口的数据-可用-for-of-遍历" aria-label="Permalink to &quot;原生具备 iterator 接口的数据 (可用 for of 遍历)&quot;">​</a></h4><ul><li><p>a) Array</p></li><li><p>b) Arguments</p></li><li><p>c) Set</p></li><li><p>d) Map</p></li><li><p>e) String</p></li><li><p>f) TypedArray</p></li><li><p>g) NodeList</p></li></ul><h4 id="工作原理和例子" tabindex="-1">工作原理和例子 <a class="header-anchor" href="#工作原理和例子" aria-label="Permalink to &quot;工作原理和例子&quot;">​</a></h4><p>迭代器是一种特殊对象，他具有一些专门为迭代过程设计的专有接口，所有的迭代器对象都有一个 next()方法，每次调用都返回一个结果对象。</p><h5 id="结果对象有两个属性" tabindex="-1">结果对象有两个属性 <a class="header-anchor" href="#结果对象有两个属性" aria-label="Permalink to &quot;结果对象有两个属性&quot;">​</a></h5><ul><li><p>一个是 value，表示下一个将要返回的值；</p></li><li><p>另一个是 done，他是一个布尔类型的值，在当没有可返回的数据时返回 true，预示着迭代结束</p></li></ul><h5 id="使用步骤" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤" aria-label="Permalink to &quot;使用步骤&quot;">​</a></h5><ul><li><p>a) 创建一个指针对象，指向当前数据结构的起始位置</p></li><li><p>b) 第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</p></li><li><p>c) 接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</p></li><li><p>d) 每调用 next 方法返回一个包含 value 和 done 属性的对象</p></li></ul><h5 id="代码例子" tabindex="-1">代码例子 <a class="header-anchor" href="#代码例子" aria-label="Permalink to &quot;代码例子&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//声明一个数组</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> xiyou</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;唐僧&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;孙悟空&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;猪八戒&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;沙僧&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//使用 for...of 遍历数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// for(let v of xiyou){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     console.log(v);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> iterator</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> xiyou</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">iterator</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//调用对象的next方法</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>2</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//输出arr 打开arr的原型 会发现上面有Symbol方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//通过Symbol.iterator创建迭代器</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> iter</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">iterator</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">iter</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//done为是否迭代完成，false是未完成，true为迭代完成</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>注: 需要自定义遍历数据的时候，想到使用迭代器。</p><h6 id="自定义遍历数据例子" tabindex="-1">自定义遍历数据例子 <a class="header-anchor" href="#自定义遍历数据例子" aria-label="Permalink to &quot;自定义遍历数据例子&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//声明一个对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> banji</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;终极一班&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	stus</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;xiaoming&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;xiaoning&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;xiaotian&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;knight&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">iterator</span><span style="color:#ABB2BF;">]() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//索引变量</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> _this</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			next</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> _this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">_this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stus</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					//下标自增</span></span>
<span class="line"><span style="color:#E06C75;">					index</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					//返回结果</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//遍历这个对象</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> v</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> banji</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h4 id="es5-语法构建迭代器" tabindex="-1">ES5 语法构建迭代器 <a class="header-anchor" href="#es5-语法构建迭代器" aria-label="Permalink to &quot;ES5 语法构建迭代器&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createIterator</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		next</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> done</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#E5C07B;"> items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">done</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> items</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">:</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				done</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> iterator</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createInterator</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// &quot;{value:1,done:false}&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// &quot;{value:2,done:false}&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// &quot;{value:3,done:false}&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// &quot;{value:undefined,done:true}&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 当调用次数超过实际值后，不管再调用多少次结果都会是如下值</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// &quot;{value:undefined,done:true}&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>createIterator()方法会返回一个对象，该对象拥有一个 next()方法，每次调用 next()方法，都会判断 i 是否大于等于 当前实参的长度；大于或等于时 done 即为 true,反之亦然。然后将 done 取反；当 done 为 true 时 value 赋值为 undefined；否则将 i+1,再取 item 对应下标的值赋值于 value。ES6 迭代器实现原理和案例也就类似。</p><blockquote><p>迭代器一般需要配合生成器使用</p></blockquote><h3 id="生成器-generator" tabindex="-1">生成器(Generator) <a class="header-anchor" href="#生成器-generator" aria-label="Permalink to &quot;生成器(Generator)&quot;">​</a></h3><h4 id="生成器-generator-简介" tabindex="-1">生成器(Generator)简介 <a class="header-anchor" href="#生成器-generator-简介" aria-label="Permalink to &quot;生成器(Generator)简介&quot;">​</a></h4><p>生成器函数是 ES6 提供的一种异步编程解决方案</p><h4 id="简单代码例子和说明" tabindex="-1">简单代码例子和说明 <a class="header-anchor" href="#简单代码例子和说明" aria-label="Permalink to &quot;简单代码例子和说明&quot;">​</a></h4><h5 id="简单代码例子" tabindex="-1">简单代码例子 <a class="header-anchor" href="#简单代码例子" aria-label="Permalink to &quot;简单代码例子&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function*</span><span style="color:#61AFEF;"> gen</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	yield</span><span style="color:#98C379;"> &quot;一只没有耳朵&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	yield</span><span style="color:#98C379;"> &quot;一只没有尾巴&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &quot;真奇怪&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> iterator</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> gen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="代码说明" tabindex="-1">代码说明 <a class="header-anchor" href="#代码说明" aria-label="Permalink to &quot;代码说明&quot;">​</a></h5><ul><li><p>1.表示该函数是一个生成器， * 的位置没有限制</p><ul><li>星号可以紧挨着 function,也可以在中间添加一个空格。</li></ul></li><li><p>2.生成器函数返回的结果是迭代器对象，调用迭代器对象的 next 方法可以得到 yield 语句后的值</p></li><li><p>3.yield 相当于函数的暂停标记，也可以认为是函数的分隔符，每调用一次 next 方法，执行一段代码</p></li><li><p>4.next 方法可以传递实参，作为 yield 语句的返回值</p></li></ul><p>generator 函数 可以通过 yield 关键字 将函数挂起，为改变执行流提供了可能，同时为了做异步编程提供了方案。</p><h4 id="生成器函数参数" tabindex="-1">生成器函数参数 <a class="header-anchor" href="#生成器函数参数" aria-label="Permalink to &quot;生成器函数参数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function*</span><span style="color:#61AFEF;"> gen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> one</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> yield</span><span style="color:#D19A66;"> 111</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">one</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> two</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> yield</span><span style="color:#D19A66;"> 222</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">two</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> three</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> yield</span><span style="color:#D19A66;"> 333</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">three</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//执行获取迭代器对象</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> iterator</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> gen</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;AAA&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//next方法可以传入实参：调用都是下一个的返回结果</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;BBB&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;CCC&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;DDD&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="生成器函数实例" tabindex="-1">生成器函数实例 <a class="header-anchor" href="#生成器函数实例" aria-label="Permalink to &quot;生成器函数实例&quot;">​</a></h4><h5 id="异步编程实例-文件操作-网络操作-ajax-request-数据库操作" tabindex="-1">异步编程实例：文件操作/网络操作(ajax, request)/数据库操作 <a class="header-anchor" href="#异步编程实例-文件操作-网络操作-ajax-request-数据库操作" aria-label="Permalink to &quot;异步编程实例：文件操作/网络操作(ajax, request)/数据库操作&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 异步编程  文件操作 网络操作(ajax, request) 数据库操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1s 后控制台输出 111  2s后输出 222  3s后输出 333</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 回调地狱</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     console.log(111);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         console.log(222);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//             console.log(333);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         }, 3000);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     }, 2000);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }, 1000);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> one</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">111</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> two</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">222</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> three</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">333</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function*</span><span style="color:#61AFEF;"> gen</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	yield</span><span style="color:#61AFEF;"> one</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	yield</span><span style="color:#61AFEF;"> two</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	yield</span><span style="color:#61AFEF;"> three</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//调用生成器函数</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> iterator</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> gen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h5 id="模拟获取数据实例-用户数据-订单数据-商品数据" tabindex="-1">模拟获取数据实例： 用户数据 /订单数据 /商品数据 <a class="header-anchor" href="#模拟获取数据实例-用户数据-订单数据-商品数据" aria-label="Permalink to &quot;模拟获取数据实例： 用户数据 /订单数据 /商品数据&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//模拟获取  用户数据  订单数据  商品数据</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getUsers</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;用户数据&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//调用 next 方法, 并且将数据传入</span></span>
<span class="line"><span style="color:#E5C07B;">		iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getOrders</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;订单数据&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getGoods</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;商品数据&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 生成器</span></span>
<span class="line"><span style="color:#C678DD;">function*</span><span style="color:#61AFEF;"> gen</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> users</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> yield</span><span style="color:#61AFEF;"> getUsers</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> orders</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> yield</span><span style="color:#61AFEF;"> getOrders</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> goods</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> yield</span><span style="color:#61AFEF;"> getGoods</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//调用生成器函数</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> iterator</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> gen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">iterator</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="高效处理数据的关键" tabindex="-1">高效处理数据的关键 <a class="header-anchor" href="#高效处理数据的关键" aria-label="Permalink to &quot;高效处理数据的关键&quot;">​</a></h3><p>迭代器，数组方法，新增的集合类型（set，map）结合使用</p><h2 id="_12-class-类的基本运用" tabindex="-1">12.class 类的基本运用 <a class="header-anchor" href="#_12-class-类的基本运用" aria-label="Permalink to &quot;12.class 类的基本运用&quot;">​</a></h2><h3 id="方法字段说明" tabindex="-1">方法字段说明 <a class="header-anchor" href="#方法字段说明" aria-label="Permalink to &quot;方法字段说明&quot;">​</a></h3><ul><li><p>1.class 声明类</p></li><li><p>2.constructor 定义构造函数初始化</p></li><li><p>3.extends 继承父类</p></li><li><p>4.super 调用父级构造方法</p></li><li><p>5.static 定义静态方法和属性</p></li><li><p>6.父类方法可以重写</p><ul><li>子类对父类的方法 ：子类声明和父类相同的命名的方法 ，用来 对父类方法的重写</li></ul></li><li><p>7.get 和 set</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">get</span><span style="color:#61AFEF;"> price</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;价格被读取了&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#98C379;"> &#39;价格呢？&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">set</span><span style="color:#61AFEF;"> price</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newVal</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;价格该修改了&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><h3 id="class-类的使用" tabindex="-1">class 类的使用 <a class="header-anchor" href="#class-类的使用" aria-label="Permalink to &quot;class 类的使用&quot;">​</a></h3><h4 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h4><h5 id="面向对象介绍" tabindex="-1">面向对象介绍 <a class="header-anchor" href="#面向对象介绍" aria-label="Permalink to &quot;面向对象介绍&quot;">​</a></h5><ul><li>面向对象把事务分解成一个个对象，然后由对象之间分工与合作</li></ul><h5 id="面向对象优点" tabindex="-1">面向对象优点 <a class="header-anchor" href="#面向对象优点" aria-label="Permalink to &quot;面向对象优点&quot;">​</a></h5><ul><li>代码灵活、可复用、容易维护和开发，适合多人合作的大型软件项目</li></ul><h5 id="面向对象特性" tabindex="-1">面向对象特性 <a class="header-anchor" href="#面向对象特性" aria-label="Permalink to &quot;面向对象特性&quot;">​</a></h5><ul><li><p>封装性</p><ul><li><p>我们平时所用的方法和类都是一种封装，当我们在项目开发中，遇到一段功能的代码在好多地方重复使用的时候，我们可以把他单独封装成一个功能的方法，这样在我们需要使用的地方直接调用就可以了。</p></li><li><p>封装的优势在于定义只可以在类内部进行对属性的操作，外部无法对这些属性指手画脚，要想修改，也只能通过你定义的封装方法；</p></li></ul></li><li><p>继承性</p><ul><li><p>继承在我们的项目开发中主要使用为子类继承父类</p></li><li><p>继承减少了代码的冗余，省略了很多重复代码，开发者可以从父类底层定义所有子类必须有的属性和方法，以达到耦合的目的；</p></li><li><p>特别提醒：继承会继承父类的实例属性和实例方法，并不会继承静态属性和静态方法，并且静态方法只能通过类名去调用。</p></li></ul></li><li><p>多态性</p><ul><li><p>多态的具体表现为方法重载和方法重写：</p></li><li><p>方法重载：重载是指不同的函数使用相同的函数名，但是函数的参数个数或类型不同。调用的时候根据函数的参数来区别不同的函数</p></li><li><p>方法重写：重写（也叫覆盖）是指在派生类中重新对基类中的虚函数（注意是虚函数）重新实现。即函数名和参数都一样，只是函数的实现体不一样</p></li><li><p>多态实现了方法的个性化，不同的子类根据具体状况可以实现不同的方法，光有父类定义的方法不够灵活，遇见特殊状况就捉襟见肘了</p></li></ul></li></ul><h5 id="面向对象和面向过程概念总结比较" tabindex="-1">面向对象和面向过程概念总结比较 <a class="header-anchor" href="#面向对象和面向过程概念总结比较" aria-label="Permalink to &quot;面向对象和面向过程概念总结比较&quot;">​</a></h5><p>总结</p><ul><li><p>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的依次调用就可以了。</p></li><li><p>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作。</p></li></ul><p>比较</p><ul><li><p>面向过程性能比面向对象高，适合跟硬件联系很紧密的东西,但是不易维护、不易复用、不易扩展。</p></li><li><p>面向对象易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统 更加灵活、更加易于维护，但是性能比面向过程低。</p></li></ul><h4 id="类和对象" tabindex="-1">类和对象 <a class="header-anchor" href="#类和对象" aria-label="Permalink to &quot;类和对象&quot;">​</a></h4><h5 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h5><ul><li><p>在 JavaScript 中，对象是一组无序的相关属性的方法的集合，所有的事物都是对象</p><ul><li>例如：字符串、数组、函数、数值</li></ul></li><li><p>对象是由属性和方法组成</p><ul><li><p>属性</p><ul><li>事物的特征，在对象中用属性来表示</li></ul></li><li><p>方法</p><ul><li>事物的行为，在对象中用方法来表示</li></ul></li></ul></li></ul><h5 id="类-class" tabindex="-1">类 class <a class="header-anchor" href="#类-class" aria-label="Permalink to &quot;类 class&quot;">​</a></h5><p>ES6 中增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类实例化对象</p><p>类抽象了对象的公共部分，它泛指某一大类（class）对象特指某一个，通过类实例化一个具体的对象</p><h6 id="类的实例化" tabindex="-1">类的实例化 <a class="header-anchor" href="#类的实例化" aria-label="Permalink to &quot;类的实例化&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Name</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">uname</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">uname</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	sing</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">uname</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实例化</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> zs</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Name</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用方法</span></span>
<span class="line"><span style="color:#E5C07B;">zs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sing</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h6 id="类的继承" tabindex="-1">类的继承 <a class="header-anchor" href="#类的继承" aria-label="Permalink to &quot;类的继承&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Father</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">uname</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">uname</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	say</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;111&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 继承</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Son</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Father</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	say</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li><p>super(x)</p><ul><li><p>先调用父类的构造函数</p></li><li><p>子类调用必须写在子类 this 之前调用</p></li><li><p>然后才可以调用父类的方法</p></li><li><p>super.say()</p><ul><li>调用父类的普通函数</li></ul></li></ul></li><li><p>继承中的属性或者方法查找原则</p><ul><li><p>就近原则</p></li><li><p>1.继承中，如果实例化子类输出一个方法，先看子类有没有这个方法，如果有就先执行子类</p></li><li><p>2.继承中，如果子类里面没有，就去查找父类有没有这个方法，如果有，就执行父类的这个方法(就近原则)</p></li></ul></li></ul><h6 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h6><ul><li><p>1.在 ES6 中类没有变量提升，所以必须先定义类，才能通过实例化对象</p></li><li><p>2.公有的属性和方法调用要在构造函数里加 this.</p></li><li><p>3.类里面的 this 指向问题</p></li><li><p>4.constructor 里面的 this 指向实例化对象， 方法里面的 this 指向这个方法的调用者</p></li></ul><h4 id="类的使用" tabindex="-1">类的使用 <a class="header-anchor" href="#类的使用" aria-label="Permalink to &quot;类的使用&quot;">​</a></h4><h5 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Name</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 在类中使用constructor来放置属性</span></span>
<span class="line"><span style="color:#61AFEF;">	construtor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 在类中添加方法</span></span>
<span class="line"><span style="color:#61AFEF;">	sing</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">song</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> song</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实例化类对象</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> zs</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Name</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实例化后调用类的方法</span></span>
<span class="line"><span style="color:#E5C07B;">zs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sing</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我爱你你却爱着他&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="类的继承-2" tabindex="-1">类的继承 2 <a class="header-anchor" href="#类的继承-2" aria-label="Permalink to &quot;类的继承 2&quot;">​</a></h5><p>子类继承父类基本示例：extends 关键字可以实现子类继承父类</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Father</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#61AFEF;">	money</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;钱钱钱&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Son</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Father</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> son</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Son</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">son</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">money</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>super 关键字的使用</p><p>super 关键字 用于访问和调用对象父类上的函数 可以调用父类的构造函数，也可以调用父类的普通函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Father</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	sum</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	say</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;我是父类&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Son</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Father</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用了父类中的构造函数</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	say</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// super.say()调用了父类的say方法</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;的子类&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> son</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Son</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">son</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">son</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">say</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>子类继承父类方法同时扩展方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Father</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	sum</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Son</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Father</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 利用super调用父类的构造函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 必须写在子类this之前调用操作</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	substrcact</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> son</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Son</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">son</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substrcact</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">son</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sum</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="类和对象的三个注意点" tabindex="-1">类和对象的三个注意点 <a class="header-anchor" href="#类和对象的三个注意点" aria-label="Permalink to &quot;类和对象的三个注意点&quot;">​</a></h4><ul><li><p>1.在 ES6 中类没有变量提升，必须先定义类，才能通过类实例化对象</p></li><li><p>2.类里面共有的属性和方法一定要加 this 调用</p></li><li><p>3.类里面的 this 指向问题</p></li></ul><p>this 指向示例说明</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Star</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> that</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// constructor里面的this指向的是 创建的实例对象</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">btn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">btn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sing</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	sing</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 这个方法的this 指向的是 btn 这个按钮</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 因为这个按钮调用了这个函数</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// that是constructor的this是要打印出名字</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">that</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	dance</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 这个方法里面的this指向的是实例对象 ldh</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> ldh</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Star</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;刘德华&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li>面向对象案例 <ul><li>tab 栏切换</li></ul></li></ul><h2 id="_13-新增-api-proxy-与-reflect" tabindex="-1">13.新增 API：Proxy 与 Reflect <a class="header-anchor" href="#_13-新增-api-proxy-与-reflect" aria-label="Permalink to &quot;13.新增 API：Proxy 与 Reflect&quot;">​</a></h2><p>Proxy</p><p>Reflect</p><h2 id="_15-promise" tabindex="-1">15.Promise <a class="header-anchor" href="#_15-promise" aria-label="Permalink to &quot;15.Promise&quot;">​</a></h2><p>Promise 是 ES6 引入的异步编程的新解决方案</p><ul><li>语法上 Promise 是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果。</li></ul><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><ul><li><p>const promiseObj = new Promise((resolve, reject) =&gt; {})</p><ul><li>实例化 Promise 对象</li></ul></li><li><p>promiseObj.then() 方法</p></li><li><p>promiseObj.catch() 方法</p></li><li><p>Promise (excutor) {}</p><ul><li>Promise 构造函数:</li></ul></li></ul><h3 id="基本使用语法" tabindex="-1">基本使用语法 <a class="header-anchor" href="#基本使用语法" aria-label="Permalink to &quot;基本使用语法&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//实例化 Promise 对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let data = &#39;数据库中的用户数据&#39;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// resolve</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// resolve(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> err</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;数据读取失败&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">		reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用 promise 对象的 then 方法</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reason</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="应用实例" tabindex="-1">应用实例 <a class="header-anchor" href="#应用实例" aria-label="Permalink to &quot;应用实例&quot;">​</a></h3><h4 id="promise-封装读取文件" tabindex="-1">Promise 封装读取文件 <a class="header-anchor" href="#promise-封装读取文件" aria-label="Permalink to &quot;Promise 封装读取文件&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//1. 引入 fs 模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//2. 调用方法读取文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// fs.readFile(&#39;./resources/为学.md&#39;, (err, data)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     //如果失败, 则抛出错误</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     if(err) throw err;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     //如果没有出错, 则输出内容</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     console.log(data.toString());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//3. 使用 Promise 封装 读取多个文件时使用</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./resources/为学.mda&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//判断如果失败</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//如果成功</span></span>
<span class="line"><span style="color:#61AFEF;">		resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;读取失败!!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h4 id="promise-封装-ajax" tabindex="-1">Promise 封装 AJAX <a class="header-anchor" href="#promise-封装-ajax" aria-label="Permalink to &quot;Promise 封装 AJAX&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 接口地址: https://api.apiopen.top/getJoke</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//1. 创建对象</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//2. 初始化</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GET&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;https://api.apiopen.top/getJ&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//3. 发送</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//4. 绑定事件, 处理响应结果</span></span>
<span class="line"><span style="color:#E5C07B;">	xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//判断</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//判断响应状态码 200-299</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 200</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 300</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//表示成功</span></span>
<span class="line"><span style="color:#61AFEF;">				resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//如果失败</span></span>
<span class="line"><span style="color:#61AFEF;">				reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//指定回调</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reason</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h4 id="promise-then-方法-成功和失败的回调" tabindex="-1">Promise-then 方法 (成功和失败的回调) <a class="header-anchor" href="#promise-then-方法-成功和失败的回调" aria-label="Permalink to &quot;Promise-then 方法 (成功和失败的回调)&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//创建 promise 对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;用户数据&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// reject(&#39;出错啦&#39;);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//调用 then 方法  then方法的返回结果是 Promise 对象, 对象状态由回调函数的执行结果决定</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//1. 如果回调函数中返回的结果是 非 promise 类型的属性, 状态为成功, 返回值为对象的成功的值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const result = p.then(value =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     console.log(value);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     //1. 非 promise 类型的属性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     // return &#39;iloveyou&#39;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     //2. 是 promise 对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     // return new Promise((resolve, reject)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     //</span><span style="color:#7F848E;font-style:italic;">     // resolve(&#39;ok&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     //     reject(&#39;error&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     // });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     //3. 抛出错误</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;">     // throw new Error(&#39;出错啦!&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     throw &#39;出错啦!&#39;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }, reason=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     console.warn(reason);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//链式调用</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h4 id="promise-catch-方法-不指定参数-失败的回调" tabindex="-1">Promise-catch 方法 (不指定参数：失败的回调) <a class="header-anchor" href="#promise-catch-方法-不指定参数-失败的回调" aria-label="Permalink to &quot;Promise-catch 方法 (不指定参数：失败的回调)&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//设置 p 对象的状态为失败, 并设置失败的值</span></span>
<span class="line"><span style="color:#61AFEF;">		reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;出错啦!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// p.then(function(value){}, function(reason){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     console.error(reason);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reason</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="promise-连续读取文件-回调地狱演示" tabindex="-1">Promise 连续读取文件 (回调地狱演示) <a class="header-anchor" href="#promise-连续读取文件-回调地狱演示" aria-label="Permalink to &quot;Promise 连续读取文件 (回调地狱演示)&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 连续读取多个文件：回调地狱演示 */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//引入 fs 模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// fs.readFile(&#39;./resources/为学.md&#39;, (err, data1)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     fs.readFile(&#39;./resources/插秧诗.md&#39;, (err, data2)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         fs.readFile(&#39;./resources/观书有感.md&#39;, (err, data3)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//             let result = data1 + &#39;\\r\\n&#39; +data2  +&#39;\\r\\n&#39;+ data3;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//             console.log(result);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//使用 promise 实现</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./resources/为学.md&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./resources/插秧诗.md&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			resolve</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./resources/观书有感.md&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//压入</span></span>
<span class="line"><span style="color:#E5C07B;">				value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">				resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\r\\n</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h2 id="_16-es6-模块化" tabindex="-1">16.ES6 模块化 <a class="header-anchor" href="#_16-es6-模块化" aria-label="Permalink to &quot;16.ES6 模块化&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来。</p><h3 id="模块化的好处" tabindex="-1">模块化的好处 <a class="header-anchor" href="#模块化的好处" aria-label="Permalink to &quot;模块化的好处&quot;">​</a></h3><ul><li><p>1.防止命名冲突</p></li><li><p>2.代码复用</p></li><li><p>3.高维护性</p></li></ul><h3 id="es6-之前的模块化规范" tabindex="-1">ES6 之前的模块化规范 <a class="header-anchor" href="#es6-之前的模块化规范" aria-label="Permalink to &quot;ES6 之前的模块化规范&quot;">​</a></h3><ul><li><p>1.CommonJS =&gt; NodeJS、Browserify</p></li><li><p>2.AMD =&gt; requireJS</p></li><li><p>3.CMD =&gt; seaJS</p></li></ul><h3 id="es6-模块化语法" tabindex="-1">ES6 模块化语法 <a class="header-anchor" href="#es6-模块化语法" aria-label="Permalink to &quot;ES6 模块化语法&quot;">​</a></h3><p>export 暴露数据语法</p><ul><li><p>export</p><ul><li>用于规定模块的对外接口</li></ul><p>1.分别暴露</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;哈哈哈&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2.统一暴露</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;哈哈哈&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> test2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;呵呵呵&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">test2</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>3.默认暴露</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	school</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;蓝翔挖掘机学校&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	chang</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;来了啊&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="import-引入模块" tabindex="-1">import 引入模块 <a class="header-anchor" href="#import-引入模块" aria-label="Permalink to &quot;import 引入模块&quot;">​</a></h3><ul><li>import <ul><li>用于输入其他模块提供的功能</li></ul></li></ul><h4 id="_1-通用导入模块方法" tabindex="-1">1.通用导入模块方法 <a class="header-anchor" href="#_1-通用导入模块方法" aria-label="Permalink to &quot;1.通用导入模块方法&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> *</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> mi</span><span style="color:#C678DD;"> from</span><span style="color:#ABB2BF;"> ‘./</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">m1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">’</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">mi</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-解构赋值形式" tabindex="-1">2.解构赋值形式 <a class="header-anchor" href="#_2-解构赋值形式" aria-label="Permalink to &quot;2.解构赋值形式&quot;">​</a></h4><p>基本使用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">test2</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> ‘./</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">m1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">’</span></span>
<span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>命名冲突使用别名</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">test</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> test111</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">test2</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> ‘./</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">m1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">’</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>默认暴露方法 的 导入</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">default</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> m3</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> ‘./</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">m1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">’</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>简便形式：默认暴露才能使用这个形式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;">  m3</span><span style="color:#C678DD;"> from</span><span style="color:#ABB2BF;"> ‘./</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">m1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;">’</span></span>
<span class="line"><span style="color:#E5C07B;">m3</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">chang</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_3-script-标签形式引入" tabindex="-1">3.script 标签形式引入 <a class="header-anchor" href="#_3-script-标签形式引入" aria-label="Permalink to &quot;3.script 标签形式引入&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="应用-babel-代码转换" tabindex="-1">应用 babel 代码转换 <a class="header-anchor" href="#应用-babel-代码转换" aria-label="Permalink to &quot;应用 babel 代码转换&quot;">​</a></h4><ul><li><p>npm install 安装工具</p><ul><li><p>babel-cli</p></li><li><p>babel-preset-env</p></li><li><p>browserify(webpack)</p></li></ul></li><li><p>命令转换和打包(转成 ES5 语法)</p></li></ul><p>引入 npm 包</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> $</span><span style="color:#C678DD;"> from</span><span style="color:#ABB2BF;"> ‘</span><span style="color:#E06C75;">jquery</span><span style="color:#ABB2BF;">’;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">css</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;background&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;pink&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,641)]))}const u=n(o,[["render",e]]);export{b as __pageData,u as default};
