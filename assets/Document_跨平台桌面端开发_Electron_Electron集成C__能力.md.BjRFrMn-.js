import{_ as n,c as a,o as l,ah as e}from"./chunks/framework.DqD713j2.js";const p="/FrontEndLearnNotes/assets/require(.node)%E8%83%8C%E5%90%8E%E6%98%AF%E6%80%8E%E4%B9%88%E5%8A%A0%E8%BD%BD%E5%8A%A8%E6%80%81%E5%BA%93%E7%9A%84.Do8HJ5iC.jpg",u=JSON.parse('{"title":"Electron集成C++能力","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Electron/Electron集成C++能力.md","filePath":"Document/跨平台桌面端开发/Electron/Electron集成C++能力.md","lastUpdated":1750954157000}'),o={name:"Document/跨平台桌面端开发/Electron/Electron集成C++能力.md"};function r(c,s,t,i,d,y){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="electron集成c-能力" tabindex="-1">Electron集成C++能力 <a class="header-anchor" href="#electron集成c-能力" aria-label="Permalink to &quot;Electron集成C++能力&quot;">​</a></h1><p>官网文档：<a href="https://www.electronjs.org/zh/docs/latest/tutorial/using-native-node-modules" target="_blank" rel="noreferrer">Node 原生模块 | Electron (electronjs.org)</a></p><h2 id="node-c-addons-扩展" tabindex="-1">Node C++ Addons(扩展) <a class="header-anchor" href="#node-c-addons-扩展" aria-label="Permalink to &quot;Node C++ Addons(扩展)&quot;">​</a></h2><ul><li><p>C++编写的动态链接共享对象，能被Nodejs require使用</p></li><li><p><code>.node</code>文件 本质是动态链接库(Windows的<code>*.dll</code>，Mac的<code>dylib</code>，Linux的<code>*.so</code>）</p></li><li><p>编写C++扩展主流2种写法</p><ul><li><p>一、NAN(Native Abstractions for Node.js):一次编写、到处编译</p><ul><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">NAN</span><span style="color:#98C379;"> METHOD</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Echo</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">{}</span><span style="color:#98C379;">  =</span><span style="color:#ABB2BF;">=&gt; </span></span>
<span class="line"><span style="color:#61AFEF;">Handle</span><span style="color:#ABB2BF;">&lt;Value&gt; </span><span style="color:#98C379;">Echo</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">const</span><span style="color:#98C379;"> Arguments</span><span style="color:#ABB2BF;">&amp; </span><span style="color:#61AFEF;">args</span><span style="color:#ABB2BF;">); </span><span style="color:#61AFEF;">//</span><span style="color:#98C379;"> 0.10.xvoid</span><span style="color:#98C379;"> Echo</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">FunctionCallbackInfo</span><span style="color:#ABB2BF;">&lt;Value&gt;&amp; </span><span style="color:#61AFEF;">args</span><span style="color:#ABB2BF;">);</span><span style="color:#61AFEF;">//</span><span style="color:#98C379;"> 6.x</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li><li><p>二、N-API(Node.js一部分，独立于runtime v8)：同一ABI、无需重新编译</p><ul><li>本身是基于C的API</li><li>C++封装node-addon-api</li></ul></li></ul></li></ul><h3 id="什么时候用c-扩展" tabindex="-1">什么时候用C++扩展 <a class="header-anchor" href="#什么时候用c-扩展" aria-label="Permalink to &quot;什么时候用C++扩展&quot;">​</a></h3><ul><li>使用C++现成库</li><li>性能提升，密集型计算场景</li><li>代码保护，核心逻辑</li></ul><h3 id="require-node-背后是怎么加载动态库的" tabindex="-1">require(&#39;*.node&#39;)背后是怎么加载动态库的? <a class="header-anchor" href="#require-node-背后是怎么加载动态库的" aria-label="Permalink to &quot;require(&#39;*.node&#39;)背后是怎么加载动态库的?&quot;">​</a></h3><p>在 Electron 中，Node.js 的模块系统被广泛使用来加载和访问本地模块和原生模块。而 <code>require(&#39;*.node)</code> 语句则是用于加载 Node.js 原生模块，其中 <code>.node</code> 文件是指编译后的二进制 Node.js 模块。下面简单介绍一下在 Electron 中加载动态库的过程。</p><p>在 Electron 中，可以通过 Node.js 的 <code>Module._load()</code> 方法来加载原生模块。当 <code>require(&#39;*.node)</code> 语句执行时，实际上是通过调用 <code>Module._load()</code> 方法来加载对应的 <code>.node</code> 文件。</p><p>具体地，<code>Module._load()</code> 方法首先会根据传入的模块名，解析出对应的 <code>.node</code> 文件路径。然后，它会通过 C++ 的 <code>dlopen()</code> 函数，将编译后的 .node 文件加载到内存中，并返回一个动态库的句柄。随后，Node.js 自动与该动态库建立起了链接，并将其作为一个 Node.js 模块来使用。</p><p>需要注意的是，由于 Node.js 和 Electron 的特殊性，加载原生模块时可能需要处理一些平台相关的问题。例如，在 Windows 平台上，需要使用 <code>LoadLibrary()</code> 替代 <code>dlopen()</code> 函数来加载 DLL 文件，而在 macOS 上，需要使用 Objective C 等特殊工具来编写原生模块。</p><h4 id="require过程" tabindex="-1">require过程 <a class="header-anchor" href="#require过程" aria-label="Permalink to &quot;require过程&quot;">​</a></h4><p><img src="`+p+`" alt="require(&#39;.node&#39;)背后是怎么加载动态库的"></p><p>1.lib/internal/modules/cjs/loaderjs</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.src/node_process_methods.cc</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.deps/uv/src/win/dL.c</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4.待定</p><h2 id="node扩展" tabindex="-1">Node扩展 <a class="header-anchor" href="#node扩展" aria-label="Permalink to &quot;Node扩展&quot;">​</a></h2><ul><li>给app增加指纹</li><li>做一个分享到微信的功能 <ul><li>将控制码写入剪切板</li><li>唤起微信PC面板</li></ul></li></ul><h3 id="环境配置" tabindex="-1">环境配置 <a class="header-anchor" href="#环境配置" aria-label="Permalink to &quot;环境配置&quot;">​</a></h3><p>安装相关依赖</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># Windows必备，管理员身份运行</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install--global--production</span><span style="color:#98C379;"> windows-build-tools</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 编译工具</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> node-gyp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="编写n-api-c" tabindex="-1">编写N-API(C++) <a class="header-anchor" href="#编写n-api-c" aria-label="Permalink to &quot;编写N-API(C++)&quot;">​</a></h3><p>1.初始化 项目</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 初始化Node项目</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> init</span><span style="color:#D19A66;"> -y</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 安装模块</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> bindings</span><span style="color:#98C379;"> node-addon-api</span><span style="color:#D19A66;"> --save-dev</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># package.json 增加</span></span>
<span class="line"><span style="color:#61AFEF;">&quot;gypfile&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#D19A66;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>2.编写 <code>binding.gyp</code> 文件</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;targets&quot;</span><span style="color:#ABB2BF;">:[ </span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;target_name&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;fringerprint&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;cflags!&quot;</span><span style="color:#ABB2BF;">:[ </span><span style="color:#98C379;">&quot;-fno-exceptions&quot;</span><span style="color:#ABB2BF;"> ],</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;cflags_cc!&quot;</span><span style="color:#ABB2BF;">:[ </span><span style="color:#98C379;">&quot;-fno-exceptions&quot;</span><span style="color:#ABB2BF;"> ],</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;sources&quot;</span><span style="color:#ABB2BF;">:[ </span><span style="color:#98C379;">&quot;fringerprint.cc&quot;</span><span style="color:#ABB2BF;"> ],</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;include_dirs&quot;</span><span style="color:#ABB2BF;">:[</span></span>
<span class="line"><span style="color:#98C379;">        &quot;&lt;!@(node -p </span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">require(&#39;node-addon-api&#39;).include</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">)&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      ],</span></span>
<span class="line"><span style="color:#FFFFFF;">      &#39;defines&#39;</span><span style="color:#ABB2BF;">: [ </span><span style="color:#FFFFFF;">&#39;NAPI_DISABLE_CPP_EXCEPTIONS&#39;</span><span style="color:#ABB2BF;"> ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>3.实现C++方法，编写fringerprint.cc文件</p><p>4.初始化方法</p><p>5.定义模块</p><p>6.编译全部模块</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> node-gyp</span><span style="color:#98C379;"> rebuild</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>7.导入编译好的模块</p><h2 id="electron集成-dll-动态链接库" tabindex="-1">Electron集成 dll（动态链接库） <a class="header-anchor" href="#electron集成-dll-动态链接库" aria-label="Permalink to &quot;Electron集成 dll（动态链接库）&quot;">​</a></h2><h3 id="使用的库" tabindex="-1">使用的库 <a class="header-anchor" href="#使用的库" aria-label="Permalink to &quot;使用的库&quot;">​</a></h3><p>它可以让我们不编写任何的C++代码情况下，创建于本地dll库的绑定，同时它还负责了JavaScript和C的类型转换，以下是说明和安装</p><ul><li><p>node-ffi（node版本 &lt; 10，Electron &lt; 6）</p></li><li><p>node-ffi-napi（node版本 ≥ 10，Electron 大于等于6）：<a href="https://github.com/node-ffi-napi/node-ffi-napi" target="_blank" rel="noreferrer">node-ffi-napi/node-ffi-napi: A foreign function interface (FFI) for Node.js, N-API style (github.com)</a></p></li><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> ffi</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 或</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> ffi-napi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h3 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h3><p>GitHub：<a href="https://github.com/node-ffi-napi/node-ffi-napi" target="_blank" rel="noreferrer">node-ffi-napi/node-ffi-napi: A foreign function interface (FFI) for Node.js, N-API style (github.com)</a></p><p>教程文档：<a href="https://github.com/node-ffi/node-ffi/wiki/Node-FFI-Tutorial" target="_blank" rel="noreferrer">Node FFI Tutorial · node-ffi/node-ffi Wiki (github.com)</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> ffi</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ffi-napi&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> libm</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ffi</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Library</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;libm&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#98C379;">    &#39;ceil&#39;</span><span style="color:#ABB2BF;">: [ </span><span style="color:#98C379;">&#39;double&#39;</span><span style="color:#ABB2BF;">, [ </span><span style="color:#98C379;">&#39;double&#39;</span><span style="color:#ABB2BF;"> ] ]</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">libm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ceil</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1.5</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="集成-dll步骤" tabindex="-1">集成 dll步骤 <a class="header-anchor" href="#集成-dll步骤" aria-label="Permalink to &quot;集成 dll步骤&quot;">​</a></h3><p>1.创建一个 Node.js 模块，该模块包含访问 DLL 文件所需的所有代码。可以使用 Node.js 的 <code>node-ffi</code> 或 <code>node-ffi-napi</code> 模块来加载并调用 DLL 中的函数。</p><p>2.将 DLL 文件放置到 Electron 应用程序的某个目录中，例如在应用程序根目录下创建一个名为 <code>dlls</code> 的文件夹，并将 DLL 文件放置在其中。</p><ul><li>如果您在Windows系统上使用DLL，还需要为 DLL 文件设置搜索路径，以便于 Electron 应用程序能够正确地找到 DLL 文件。</li><li>Windows系统下，请确保将DLL文件复制到您的应用程序运行时目录下，通常情况下这是您的应用程序根目录下的<code>“/resources/app/”</code>文件夹。</li></ul><p>3.在 Electron 主进程或渲染进程的 JavaScript 代码中，使用 Node.js 中的 <code>path</code> 模块来获取 DLL 文件的绝对路径。可以使用下列示例代码获取 DLL 文件的绝对路径：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;path&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dllPath</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../../dlls/myDll.dll&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>4.在 JavaScript 代码中引入 Node.js 模块，并使用该模块中的函数来调用 DLL 中的函数。如下是一个使用 <code>node-ffi-napi</code> 模块调用 DLL 中函数的示例代码</strong>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> ffi</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;ffi-napi&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myDll</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ffi</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Library</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;dllPath&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#98C379;">  &#39;myFunctionName&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;int&#39;</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;string&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;int&#39;</span><span style="color:#ABB2BF;">]]</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> myDll</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">myFunctionName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Arg1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">myDll</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>可以在其他进程中导入使用 <code>myDll</code></p><p><strong>5.在您的JavaScript代码中使用Node.js的 <code>child_process</code> API调用DLL，相应的可执行文件（.exe）。您需要使用 <code>spawn</code> 或 <code>exec</code> 方法来调用DLL。</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">spawn</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;child_process&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过 spawn() 函数调用 DLL 文件</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> child</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;../dlls/myDll.exe&#39;</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;Arg1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">321</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 监听子进程的 stdout 和 stderr</span></span>
<span class="line"><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stdout</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;data&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`stdout: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">stderr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;data&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`stderr: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">data</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在上述代码中，<code>spawn()</code> 函数将运行 <code>myDll.exe</code> 可执行文件，并传递 <code>Arg1</code> 和 <code>Arg2</code> 两个参数。<code>stdout</code> 和 <code>stderr</code> 事件分别监听子进程的输出和错误信息。</p><p>6.如果需要从子进程中获取返回值，可以在 DLL 文件中定义一个函数，并在 Node.js 中调用该函数来获取返回值。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> myFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> arg1</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;"> arg2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 执行相应的操作，并返回结果</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Node.js中</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">exec</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;child_process&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过 exec() 函数调用 DLL 文件中的函数，并获取返回值</span></span>
<span class="line"><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;../dlls/myDll.exe --my-function&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">stdout</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">stderr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`exec error: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">err</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">stdout</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Result: </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">result</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在上述代码中，<code>exec()</code> 函数将运行 <code>myDll.exe</code> 可执行文件，并传递 <code>--my-function</code> 参数。在 DLL 文件中，可以通过解析该参数来调用相应的函数，并输出函数返回值（可以使用 <code>printf()</code> 函数来输出）。</p><h3 id="常见错误" tabindex="-1">常见错误 <a class="header-anchor" href="#常见错误" aria-label="Permalink to &quot;常见错误&quot;">​</a></h3><ul><li>Dynamic Linking Error: Win32 error 126 <ul><li>dll路径没写对、arch没选对、dll引用有问题</li></ul></li><li>Dynamic Linking Error: Win32 error 127 <ul><li>传参有问题、dll没有这个函数</li></ul></li></ul><h3 id="如果是在mac系统上-可以调用applescript脚本" tabindex="-1">如果是在Mac系统上，可以调用Applescript脚本 <a class="header-anchor" href="#如果是在mac系统上-可以调用applescript脚本" aria-label="Permalink to &quot;如果是在Mac系统上，可以调用Applescript脚本&quot;">​</a></h3><ul><li><p>AppleScript是苹果内置的脚本</p></li><li><p>可以调用其他程序、跟系统底层打交道</p></li><li><p>语法见文档：<a href="https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html" target="_blank" rel="noreferrer">https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html</a></p></li><li><p>使用库 <code>node-applescript</code> 集成到Electron中：<a href="https://github.com/TooTallNate/node-applescript" target="_blank" rel="noreferrer">https://github.com/TooTallNate/node-applescript</a></p></li><li><p>安装：<code>npm install applescript</code></p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;"># </span><span style="color:#E06C75;">调取微信</span></span>
<span class="line"><span style="color:#E06C75;">tell</span><span style="color:#E06C75;"> application</span><span style="color:#98C379;"> &quot;WeChat&quot;</span></span>
<span class="line"><span style="color:#E06C75;"> activate</span></span>
<span class="line"><span style="color:#E06C75;">end</span><span style="color:#E06C75;"> tell</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul>`,65)]))}const b=n(o,[["render",r]]);export{u as __pageData,b as default};
