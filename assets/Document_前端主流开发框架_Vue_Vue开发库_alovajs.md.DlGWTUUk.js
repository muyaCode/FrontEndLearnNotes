import{_ as a,c as n,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"alovajs","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端主流开发框架/Vue/Vue开发库/alovajs.md","filePath":"Document/前端主流开发框架/Vue/Vue开发库/alovajs.md","lastUpdated":1750954157000}'),e={name:"Document/前端主流开发框架/Vue/Vue开发库/alovajs.md"};function o(r,s,t,c,B,i){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="alovajs" tabindex="-1">alovajs <a class="header-anchor" href="#alovajs" aria-label="Permalink to &quot;alovajs&quot;">​</a></h1><p>官网：<a href="https://alova.js.org/zh-CN/" target="_blank" rel="noreferrer">Alova.JS - 轻量级请求策略库 | Alova.JS</a></p><p>GitHub：<a href="https://github.com/alovajs/alova" target="_blank" rel="noreferrer">https://github.com/alovajs/alova</a></p><p>今天我想聊的是，在我们写项目代码时，应该更加专注于业务逻辑的实现，而把定式代码交给js库或工程化自动处理，而我想说的是，请求逻辑其实也是可以继续简化的。</p><p>你可能会说，用axios或fetch api就够了啊，哪有什么请求逻辑，那可能是你还没有意识到这个问题，作为一个前端开发，你肯定也遇到过这些问题：</p><ul><li>处理分页逻辑</li><li>表单处理逻辑</li><li>处理请求防抖逻辑</li><li>处理轮询检查</li><li>处理缓存处理</li><li>处理加载状态</li><li>处理错误处理</li><li>验证码发送</li><li>文件上传</li><li>...</li></ul><p>这些问题，如果你正在使用 axios 或 fetch api，你需要编写大量的代码来处理这些问题，但我想说，他们其实更多的也都是固定的模板代码，也可以被精简掉。</p><p>在今天你可以使用 alova 来处理它们，alova提供了大量日常业务中常用的请求模块，你只需要简单配置几行代码，alova 就能自动帮你管理请求状态，优化网络体验，那些烦人的分页逻辑、轮询检查、缓存处理，全都不用你操心了，让你更加专注于业务逻辑。</p><h2 id="alova的学习成本更低" tabindex="-1">alova的学习成本更低 <a class="header-anchor" href="#alova的学习成本更低" aria-label="Permalink to &quot;alova的学习成本更低&quot;">​</a></h2><p>alova 借鉴了 axios 和ahooks-useRequest的设计，让大家更容易上手，学习成本更低。</p><blockquote><p>❝</p><p>alova 官网（<a href="https://alova.js.org/zh-CN/%EF%BC%89%E5%9C%A8%E8%BF%99%E9%87%8C%E3%80%82" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/）在这里。</a></p><p>❞</p></blockquote><p>alova 自从 2023 年 4 月份正式对外发布以来，在 Issues 和 Disscussion 中收到了来自世界各地的开发者积极参与的信息，深感荣幸。</p><p><strong>「如果你也喜欢 alovajs，请在Github 仓库（<a href="https://github.com/alovajs/alova%EF%BC%89%E4%B8%AD%E8%B4%A1%E7%8C%AE%E4%B8%80%E9%A2%97" target="_blank" rel="noreferrer">https://github.com/alovajs/alova）中贡献一颗</a> star，这对我们非常重要。」</strong></p><p>有任何问题，你可以加入以下群聊咨询，也可以在github 仓库中发布 Discussions，如果遇到问题，也请在github 的 issues中提交，我们会在最快的时间解决。</p><p>下面我们来看看如何通过简单配置，就能帮你解决各种复杂场景下的请求问题。</p><h2 id="基础请求" tabindex="-1">基础请求 <a class="header-anchor" href="#基础请求" aria-label="Permalink to &quot;基础请求&quot;">​</a></h2><p>基本的请求，适用于初始化信息，自带了请求相关的各种状态。</p><p>以 vue3 为例。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;loading&quot;</span><span style="color:#ABB2BF;">&gt;loading...&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-else-if</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">&gt;error: {{ error }}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> v-else</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;id: {{ data.title }}&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;title: {{ data.time }}&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> setup</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">  import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useRequest</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;alova&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 和axios相似的参数风格</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> todoDetail</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> alova</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/todo&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">    params</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    loading</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    error</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    onSuccess</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    onError</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    onComplete</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    send</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    abort</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    update</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todoDetail</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">  onSuccess</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;success&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#61AFEF;">  onError</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#61AFEF;">  onComplete</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;complete&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>useRequest 会自动帮你管理 loading、data、error 等状态，不需要自己控制！</p><p>useRequest 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/learning/use-request/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/learning/use-request/）</a></p><h2 id="状态变化请求" tabindex="-1">状态变化请求 <a class="header-anchor" href="#状态变化请求" aria-label="Permalink to &quot;状态变化请求&quot;">​</a></h2><p>在数据筛选、搜索等交互中，可以通过 useWatcher 来监听状态变化并发送请求，返回值也包含与 useRequest 相同的状态、事件函数、操作函数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">useWatcher</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> filterTodoList</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">page</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">keyword</span><span style="color:#ABB2BF;">), [</span><span style="color:#E06C75;">keyword</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">page</span><span style="color:#ABB2BF;">], {</span></span>
<span class="line"><span style="color:#E06C75;">  debounce</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 请求级的防抖参数</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>它还有请求防抖、保证请求时序、过滤状态变化时是否发送请求等功能，超方便！</p><p>useWatcher 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/learning/use-watcher/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/learning/use-watcher/）</a></p><h2 id="预加载数据" tabindex="-1">预加载数据 <a class="header-anchor" href="#预加载数据" aria-label="Permalink to &quot;预加载数据&quot;">​</a></h2><p>可以用 useFetcher 预加载数据,不需要直接处理响应,但会更新相关状态:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">fetching</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">fetch</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useFetcher</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todoDetail</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>useFetcher 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/learning/use-fetcher/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/learning/use-fetcher/）</a></p><h2 id="分页请求" tabindex="-1">分页请求 <a class="header-anchor" href="#分页请求" aria-label="Permalink to &quot;分页请求&quot;">​</a></h2><p>分页场景下，page、pageSize、pageCount、total 等等好多状态要自己维护，还要写一堆逻辑来判断何时应该发送请求！</p><p>如果用 alovajs 提供的分页 Hook，你就只需要这样：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 加载状态</span></span>
<span class="line"><span style="color:#E5C07B;">  loading</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 列表数据</span></span>
<span class="line"><span style="color:#E5C07B;">  data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 是否为最后一页</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 下拉加载时可通过此参数判断是否还需要加载</span></span>
<span class="line"><span style="color:#E5C07B;">  isLastPage</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 当前页码，改变此页码将自动触发请求</span></span>
<span class="line"><span style="color:#E5C07B;">  page</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 每页数据条数</span></span>
<span class="line"><span style="color:#E5C07B;">  pageSize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 分页页数</span></span>
<span class="line"><span style="color:#E5C07B;">  pageCount</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 总数据量</span></span>
<span class="line"><span style="color:#E5C07B;">  total</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> usePagination</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">page</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">pageSize</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> queryStudents</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">page</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">pageSize</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 翻到上一页，page值更改后将自动发送请求</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> handlePrevPage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  page</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 翻到下一页，page值更改后将自动发送请求</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> handleNextPage</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  page</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 更改每页数量，pageSize值更改后将自动发送请求</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> handleSetPageSize</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  pageSize</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>是不是清爽很多，节省了超多重复代码。</p><p>usePagination 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/strategy/usePagination/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/strategy/usePagination/）</a></p><h2 id="表单提交" tabindex="-1">表单提交 <a class="header-anchor" href="#表单提交" aria-label="Permalink to &quot;表单提交&quot;">​</a></h2><p>表单处理也很头疼吧？alova 的 useForm 直接帮你搞定表单提交、表单草稿、自动重置表单项、多页共享数据啥的。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  form</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  send</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">submitForm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">  updateForm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useForm</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">formData</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> submitData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">formData</span><span style="color:#ABB2BF;">), {</span></span>
<span class="line"><span style="color:#E06C75;">  initialForm</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    content</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    time</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  resetAfterSubmiting</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>useForm 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/strategy/useForm/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/strategy/useForm/）</a></p><h2 id="验证码实现" tabindex="-1">验证码实现 <a class="header-anchor" href="#验证码实现" aria-label="Permalink to &quot;验证码实现&quot;">​</a></h2><p>别再自己做倒计时了，这有！</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">loading</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">sending</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">send</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">sendCaptcha</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useCaptcha</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> sendCaptcha</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mobile</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#E06C75;">    initialCountdown</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">60</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>useCaptcha 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/strategy/useCaptcha/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/strategy/useCaptcha/）</a></p><h2 id="文件上传策略" tabindex="-1">文件上传策略 <a class="header-anchor" href="#文件上传策略" aria-label="Permalink to &quot;文件上传策略&quot;">​</a></h2><p>更简单的文件上传策略，支持对 base64、Blob、ArrayBuffer、Canvas 数据的自动识别和转换，还可以多文件同时上传、图片预览图生成</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  fileList</span></span>
<span class="line"><span style="color:#E5C07B;">  loading</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">  progress</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useUploader</span><span style="color:#ABB2BF;">(({ </span><span style="color:#E06C75;font-style:italic;">file</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> uploadFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">), {</span></span>
<span class="line"><span style="color:#E06C75;">  limit</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  accept</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;png&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;jpg&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;gif&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">  imageTempLink</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>useUploader 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/strategy/useUploader/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/strategy/useUploader/）</a></p><h2 id="自动重新拉取数据" tabindex="-1">自动重新拉取数据 <a class="header-anchor" href="#自动重新拉取数据" aria-label="Permalink to &quot;自动重新拉取数据&quot;">​</a></h2><p>可以在浏览器 tab 切换时拉取最新数据、浏览器聚焦时拉取最新数据、网络重连时拉取最新数据、轮询请求自动重新拉取数据，可以同时配置以上的一个或多个触发条件，也可以配置节流时间来防止短时间内触发多次请求，例如 1 秒内只允许触发一次。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">useAutoRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todoDetail</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">  enablePolling</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  enableVisibility</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  enableFocus</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  enableNetwork</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  throttle</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1000</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>useAutoRequest 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/strategy/useAutoRequest/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/strategy/useAutoRequest/）</a></p><h2 id="跨组件请求策略" tabindex="-1">跨组件请求策略 <a class="header-anchor" href="#跨组件请求策略" aria-label="Permalink to &quot;跨组件请求策略&quot;">​</a></h2><p>跨组件或模块触发请求相关操作，消除组件层级的限制，在任意组件中快速地触发任意请求的操作函数，例如，你可以某个组件中更新了菜单数据后，重新触发侧边菜单栏的重新请求，从而刷新数据。当操作了列表数据后，触发列表更新。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 组件A创建代理</span></span>
<span class="line"><span style="color:#61AFEF;">useRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todoDetail</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">  middleware</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">actionDelegationMiddleware</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;someAction&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 组件B内触发操作</span></span>
<span class="line"><span style="color:#61AFEF;">accessAction</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;someAction&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">actions</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  actions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>actionDelegationMiddleware 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/strategy/actionDelegationMiddleware/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/strategy/actionDelegationMiddleware/）</a></p><h2 id="请求重试策略" tabindex="-1">请求重试策略 <a class="header-anchor" href="#请求重试策略" aria-label="Permalink to &quot;请求重试策略&quot;">​</a></h2><p>在重要的请求上使用它，可以提高请求的稳定性，可以自定义设置是否重试，以及重试延迟，还有手动停止重试</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">onRetry</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">onFail</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stop</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useRetriableRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pay</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">  retry</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> /network timeout/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  backoff</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    delay</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>useRetriableRequest 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/strategy/useRetriableRequest/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/strategy/useRetriableRequest/）</a></p><h2 id="sse" tabindex="-1">SSE <a class="header-anchor" href="#sse" aria-label="Permalink to &quot;SSE&quot;">​</a></h2><p>可以直接通过 SSE 进行请求，它可以通过全局响应和方法实例的函数 transformData 自动转换数据，还提供了对 EventSource 对象的全部控制。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">readyState</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">eventSource</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">onMessage</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">onError</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">onOpen</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">on</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#61AFEF;">  useSSE</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> chatGPT</span><span style="color:#ABB2BF;">(), {</span></span>
<span class="line"><span style="color:#E06C75;">    withCredentials</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    interceptByGlobalResponded</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>useSSE 详细文档（<a href="https://alova.js.org/zh-CN/tutorial/strategy/useSSE/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/strategy/useSSE/）</a></p><h2 id="结尾" tabindex="-1">结尾 <a class="header-anchor" href="#结尾" aria-label="Permalink to &quot;结尾&quot;">​</a></h2><p>现在，你还可以在 vue2 的 options 写法中使用 alova 了，点击查看详情：<a href="https://alova.js.org/zh-CN/tutorial/framework/vue-options/" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/tutorial/framework/vue-options/</a></p><p>这里还有超多可运行的示例（<a href="https://alova.js.org/zh-CN/category/examples/%EF%BC%89" target="_blank" rel="noreferrer">https://alova.js.org/zh-CN/category/examples/）</a></p><p>如果觉得文章对你有帮助，请别吝啬你的赞和评论哈，说说你对 alovajs 怎么看的，或者可以问一些问题，我会尽量回答的，你的支持是我创作的最大动力！哈哈哈哈哈哈~</p><p>想学习更多 alovajs 的用法，欢迎来alova 官网学习。如果你也喜欢 alovajs，请在Github 仓库中贡献一颗 star，这对我们非常重要。</p>`,69)]))}const b=a(e,[["render",o]]);export{u as __pageData,b as default};
