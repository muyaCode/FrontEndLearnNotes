import{_ as n,c as e,o as a,ah as l}from"./chunks/framework.DqD713j2.js";const y=JSON.parse('{"title":"Tauri 打包遇见问题及解决","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Tauri框架/Tauri打包遇见问题及解决.md","filePath":"Document/跨平台桌面端开发/Tauri框架/Tauri打包遇见问题及解决.md","lastUpdated":1750954157000}'),o={name:"Document/跨平台桌面端开发/Tauri框架/Tauri打包遇见问题及解决.md"};function c(p,s,t,i,r,d){return a(),e("div",null,s[0]||(s[0]=[l(`<h1 id="tauri-打包遇见问题及解决" tabindex="-1">Tauri 打包遇见问题及解决 <a class="header-anchor" href="#tauri-打包遇见问题及解决" aria-label="Permalink to &quot;Tauri 打包遇见问题及解决&quot;">​</a></h1><p>打包 Tauri 时，需要下载： <a href="https://github.com/wixtoolset/wix3/releases" target="_blank" rel="noreferrer">https://github.com/wixtoolset/wix3/releases</a></p><p>Downloading <a href="https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip" target="_blank" rel="noreferrer">https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip</a></p><p>但 GitHub 下载太慢，其他镜像下载地址：</p><ul><li><a href="https://mirrors.nju.edu.cn/pub/ovirt/ovirt-4.4/src/wix-toolset-binaries/" target="_blank" rel="noreferrer">NJU</a></li></ul><p>下载完后：</p><ul><li>1.新建文件夹<code>C:\\Users[UserName]\\AppData\\Local\\tauri\\WixTools</code></li><li>2.解压<code>wix311-binaries.zip</code>内的文件到<code>WixTools</code>目录</li><li>3.再回到项目运行打包命令：<code>pnpm tauri build</code></li></ul><h2 id="使用图标库打包后报错" tabindex="-1">使用图标库打包后报错 <a class="header-anchor" href="#使用图标库打包后报错" aria-label="Permalink to &quot;使用图标库打包后报错&quot;">​</a></h2><p>使用的是<code>@iconify/vue</code>图标库，dev 开发环境能正常运行，但是打包后生产环境中图标不显示，然后使用 debug 调试命令打包：<code>pnpm run tauri build --debug</code></p><p>打包成功后，打开打包的软件，打开调试控制台发现报错：是请求图标的错误</p><ul><li><code>Refused to connect to &#39;&lt;URL&gt;&#39; because it violates the following Content Security Policy directive: &quot;connect-src ipc: &lt;URL&gt;&quot;.</code></li><li><code>Refused to connect to &#39;https://api.iconify.design/fluent.json?icons=line-horizontal-3-20-filled%2Ctoolbox-28-filled&#39; because it violates the document&#39;s Content Security Policy.</code></li></ul><h3 id="方法-1-content-security-policy-csp-规则设置" tabindex="-1">方法 1：Content Security Policy (CSP) 规则设置 <a class="header-anchor" href="#方法-1-content-security-policy-csp-规则设置" aria-label="Permalink to &quot;方法 1：Content Security Policy (CSP) 规则设置&quot;">​</a></h3><p>如果你想在 Tauri 项目中使用 <code>@iconify/vue</code> 库，你需要在 Tauri 的配置中添加允许连接到该库的 Content Security Policy (CSP) 规则。这样，你的应用就可以从 <code>@iconify/vue</code> 获取图标资源。</p><p>看起来你的应用程序在尝试从多个不同的源加载图标资源，但这些尝试都因为违反了 Content Security Policy（CSP）而被拒绝。CSP 是一种安全措施，用于限制网页可以从哪些源加载资源，以此来防止跨站脚本攻击（XSS）和数据注入攻击。</p><p>以下是一些步骤来设置 CSP 规则以允许连接到 <code>@iconify/vue</code> 库：</p><ol><li>打开你的 Tauri 项目的配置文件（通常是 <code>tauri.conf.json</code> 。</li><li>在配置文件中找到或添加一个 <code>security</code> 部分。</li><li>在 <code>security</code> 部分中，添加一个 <code>contentSecurityPolicy</code> 字段，指定允许连接到 <code>@iconify/vue</code> 的域名。例如：</li></ol><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;security&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;csp&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;default-src &#39;self&#39;; connect-src &#39;self&#39; https://api.iconify.design&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>确保将 <code>https://api.iconify.design</code> 替换为实际的图标资源域名。这样，你的 Tauri 应用就可以从 <code>@iconify/vue</code> 获取图标了。</p><p>如果你的应用程序需要从其他域名加载资源，你可以在<code>connect-src</code>指令中用空格分隔它们。</p><p>如果你在使用 Vite 作为前端构建工具，你可能还需要在<code>vite.config.ts</code>中进行相应的配置，以确保在构建过程中生成的 HTML 文件包含正确的 CSP 设置。</p><h3 id="图标离线" tabindex="-1">图标离线 <a class="header-anchor" href="#图标离线" aria-label="Permalink to &quot;图标离线&quot;">​</a></h3><p>在使用 Tauri、Vite 和 Vue 3 框架结合<code>@iconify/vue</code>图标库进行项目开发时，如果你想要离线加载图标，可以采取以下步骤：</p><ol><li><p><strong>安装@iconify/vue 库</strong>： 你可以使用 npm 或 yarn 来安装<code>@iconify/vue</code>库。这个库允许你在 Vue 应用中使用超过 10 万个图标。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save-dev</span><span style="color:#98C379;"> @iconify/vue</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 或者</span></span>
<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#D19A66;"> --dev</span><span style="color:#98C379;"> @iconify/vue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p><strong>导入图标数据</strong>： <code>@iconify/vue</code>不包含图标数据，而是从 Iconify API 动态加载。为了离线使用，你需要将图标数据导入到你的项目中。你可以从 Iconify Icons 包中导入数据，或者创建自定义图标包。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Icon</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@iconify/vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> homeIcon</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;@iconify-icons/mdi-light/home&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>在组件中使用图标</strong>： 一旦导入了图标数据，你就可以在 Vue 组件中使用它们。</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">Icon</span><span style="color:#D19A66;"> :icon</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;homeIcon&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">template</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Icon</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@iconify/vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> homeIcon</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;@iconify-icons/mdi-light/home&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	components</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		Icon</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			homeIcon</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p><strong>配置 Tauri 的 CSP</strong>： 由于你现在是离线使用图标，你需要确保 Tauri 的 Content Security Policy（CSP）不会阻止加载本地图标数据。在<code>tauri.conf.json</code>中更新 CSP 设置，允许加载本地资源。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;tauri&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;security&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;csp&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;default-src &#39;self&#39; data:; script-src &#39;self&#39;; object-src &#39;self&#39;;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol><li><strong><code>default-src &#39;self&#39; data:;</code></strong>： <ul><li><code>default-src</code> 指令定义了默认的资源加载策略。</li><li><code>&#39;self&#39;</code> 表示只允许从当前域名加载资源。</li><li><code>data:</code> 表示允许加载<code>data:</code> URL，这通常用于内联数据，例如 base64 编码的图像或字体。</li></ul></li><li><strong><code>script-src &#39;self&#39;;</code></strong>： <ul><li><code>script-src</code> 指令定义了可以加载 JavaScript 脚本的源。</li><li><code>&#39;self&#39;</code> 表示只允许从当前域名加载 JavaScript 脚本。</li></ul></li><li><strong><code>object-src &#39;self&#39;;</code></strong>： <ul><li><code>object-src</code> 指令定义了可以加载插件（例如 Flash）的源。</li><li><code>&#39;self&#39;</code> 表示只允许从当前域名加载插件。</li></ul></li></ol></li><li><p><strong>构建和测试</strong>： 完成上述步骤后，运行你的构建命令来打包应用，并确保在离线环境中测试图标是否正常加载。</p></li></ol><p>以上步骤可以帮助你在 Tauri 应用中离线使用<code>@iconify/vue</code>库的图标。请注意，由于图标数据可能会占用较大空间，你可能需要考虑只包含应用中实际使用到的图标。</p><h2 id="内容安全策略-csp" tabindex="-1">内容安全策略（CSP） <a class="header-anchor" href="#内容安全策略-csp" aria-label="Permalink to &quot;内容安全策略（CSP）&quot;">​</a></h2><p>跟前端的 html 的 <code>&lt;meta&gt;</code> 元素的 content 字段一样：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noreferrer">内容安全策略（CSP） - HTTP | MDN (mozilla.org)</a></p><p>当配置 Content Security Policy (CSP) 时，你可以使用多个指令来控制网页中可以加载哪些资源。以下是一些常用的 CSP 指令以及它们的含义：</p><ol><li><strong><code>default-src</code></strong>： <ul><li>默认策略，用于定义加载资源的默认行为。</li><li>例如：<code>default-src &#39;self&#39; cdn.example.com;</code> 表示只允许从当前域名和 <code>cdn.example.com</code> 加载资源。</li></ul></li><li><strong><code>script-src</code></strong>： <ul><li>定义可以加载 JavaScript 脚本的源。</li><li>例如：<code>script-src &#39;self&#39; js.example.com;</code> 表示只允许从当前域名和 <code>js.example.com</code> 加载 JavaScript 脚本。</li></ul></li><li><strong><code>style-src</code></strong>： <ul><li>定义可以加载样式表或 CSS 的源。</li><li>例如：<code>style-src &#39;self&#39; css.example.com;</code> 表示只允许从当前域名和 <code>css.example.com</code> 加载样式表。</li></ul></li><li><strong><code>img-src</code></strong>： <ul><li>定义可以加载图像的源。</li><li>例如：<code>img-src &#39;self&#39; img.example.com;</code> 表示只允许从当前域名和 <code>img.example.com</code> 加载图像。</li></ul></li><li><strong><code>connect-src</code></strong>： <ul><li>适用于 XMLHttpRequest（AJAX）、WebSocket、fetch()等。</li><li>例如：<code>connect-src &#39;self&#39;;</code> 表示只允许从当前域名进行连接。</li></ul></li><li><strong><code>font-src</code></strong>： <ul><li>定义可以加载字体资源的源（通过 @font-face）。</li><li>例如：<code>font-src font.example.com;</code> 表示只允许从 <code>font.example.com</code> 加载字体。</li></ul></li><li><strong><code>object-src</code></strong>： <ul><li>定义可以加载插件（如 <code>&lt;object&gt;</code>、<code>&lt;embed&gt;</code> 或 <code>&lt;applet&gt;</code>）的源。</li><li>例如：<code>object-src &#39;self&#39;;</code> 表示只允许从当前域名加载插件。</li></ul></li><li><strong><code>media-src</code></strong>： <ul><li>定义可以加载音频和视频的源（如 HTML5 <code>&lt;audio&gt;</code>、<code>&lt;video&gt;</code> 元素）。</li><li>例如：<code>media-src media.example.com;</code> 表示只允许从 <code>media.example.com</code> 加载音频和视频。</li></ul></li></ol><p>这些指令可以根据你的应用需求进行调整。通过配置 CSP，你可以限制资源的加载源，从而增加网页的安全性，防止跨站脚本攻击（XSS）等风险。</p><p>Tauri 的 CSP（内容安全策略）设置是可以自定义的，以确保你的应用程序的安全性。在 Tauri 的配置文件中，你可以通过<code>tauri &gt; security &gt; csp</code>字段来设置 CSP。这个设置应该尽可能地限制，只允许 WebView 从你信任的主机加载资源。</p><p>以下是一个 Tauri CSP 设置的示例：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;tauri&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;security&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;csp&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;default-src &#39;self&#39;; script-src &#39;self&#39; https://api.iconify.design; connect-src &#39;self&#39; https://api.iconify.design&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在这个示例中，<code>default-src &#39;self&#39;</code>表示所有的资源都必须来自于同一个源，即你的应用程序。<code>script-src &#39;self&#39; https://api.iconify.design</code>允许脚本从你的应用程序和<code>api.iconify.design</code>加载。<code>connect-src &#39;self&#39; https://api.iconify.design</code>允许通过 XMLHttpRequest、WebSocket 或 fetch 等方式从你的应用程序和<code>api.iconify.design</code>进行连接。</p><p>你应该根据你的应用程序的具体需求来调整这些设置。例如，如果你的应用程序需要从其他的 CDN 或 API 服务加载资源，你需要在相应的 CSP 指令中添加这些服务的 URL。</p><p>请记住，正确配置 CSP 对于保护你的应用程序免受跨站点脚本攻击（XSS）和其他网络安全威胁至关重要。如果你需要更多关于 Tauri CSP 设置的信息，可以查看 Tauri 的官方文档。</p><ul><li><a href="https://tauri.app/zh-cn/v1/references/security/" target="_blank" rel="noreferrer">开发安全 | Tauri Apps</a></li></ul><h2 id="生成windows便携绿色版安装包" tabindex="-1">生成Windows便携绿色版安装包 <a class="header-anchor" href="#生成windows便携绿色版安装包" aria-label="Permalink to &quot;生成Windows便携绿色版安装包&quot;">​</a></h2><p>问题：<a href="https://github.com/tauri-apps/tauri-action/issues/59" target="_blank" rel="noreferrer">tauri-apps/tauri-action#59</a></p><p><a href="https://github.com/tauri-apps/tauri/discussions/3048" target="_blank" rel="noreferrer">是否可以创建独立的二进制文件？ ·tauti-apps/金牛座 ·讨论 #3048 (github.com)</a></p><p>基本上，我们应该设置一个不需要管理员权限的标志</p><p>文档：<a href="https://tauri.app/zh-cn/v1/guides/building/windows/" target="_blank" rel="noreferrer">Windows 安装程序 |Tauri 应用程序</a></p>`,41)]))}const b=n(o,[["render",c]]);export{y as __pageData,b as default};
