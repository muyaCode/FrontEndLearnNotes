import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const F=JSON.parse('{"title":"Node.j == 全栈？(Node.js 源码架构解析)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端进阶技巧/实际应用场景解析/Node.j == 全栈？(Node.js 源码架构解析).md","filePath":"Document/前端进阶技巧/实际应用场景解析/Node.j == 全栈？(Node.js 源码架构解析).md","lastUpdated":1750954157000}'),o={name:"Document/前端进阶技巧/实际应用场景解析/Node.j == 全栈？(Node.js 源码架构解析).md"};function e(r,s,c,t,B,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="node-j-全栈-node-js-源码架构解析" tabindex="-1">Node.j == 全栈？(Node.js 源码架构解析) <a class="header-anchor" href="#node-j-全栈-node-js-源码架构解析" aria-label="Permalink to &quot;Node.j == 全栈？(Node.js 源码架构解析)&quot;">​</a></h1><p>提到 Node.js，相信大部分前端工程师都会想到基于它来开发服务端，只需要掌握 JavaScript 一门语言就可以成为全栈工程师，但其实 Node.js 的意义并不仅于此。</p><p>很多高级语言，执行权限都可以触及操作系统，而运行在浏览器端的 JavaScript 则例外，浏览器为其创建的沙箱环境，把前端工程师封闭在一个编程世界的象牙塔里。不过 Node.js 的出现则弥补了这个缺憾，前端工程师也可以触达计算机世界的底层。</p><p>所以 Node.js 对于前端工程师的意义不仅在于提供了全栈开发能力，更重要的是为前端工程师打开了一扇通向计算机底层世界的大门。这一课时我们通过分析 Node.js 的实现原理来打开这扇大门。</p><h4 id="node-js-源码结构" tabindex="-1">Node.js 源码结构 <a class="header-anchor" href="#node-js-源码结构" aria-label="Permalink to &quot;Node.js 源码结构&quot;">​</a></h4><p>Node.js 源码仓库的 /deps 目录下有十几个依赖，其中既有 C 语言编写的模块（如 libuv、V8）也有 JavaScript 语言编写的模块（如 acorn、acorn-plugins），如下图所示。</p><p>![Node.js 的依赖模块](../img/Node.js 的依赖模块.png)</p><p>Node.js 的依赖模块</p><ul><li><p>acorn：前面的课程中已经提过，用 JavaScript 编写的轻量级 JavaScript 解析器。</p></li><li><p>acorn-plugins：acorn 的扩展模块，让 acorn 支持 ES6 特性解析，比如类声明。</p></li><li><p>brotli：C 语言编写的 Brotli 压缩算法。</p></li><li><p>cares：应该写为“c-ares”，C 语言编写的用来处理异步 DNS 请求。</p></li><li><p>histogram：C 语言编写，实现柱状图生成功能。</p></li><li><p>icu-small：C 语言编写，为 Node.js 定制的 ICU（International Components for Unicode）库，包括一些用来操作 Unicode 的函数。</p></li><li><p>llhttp：C 语言编写，轻量级的 http 解析器。</p></li><li><p>nghttp2/nghttp3/ngtcp2：处理 HTTP/2、HTTP/3、TCP/2 协议。</p></li><li><p>node-inspect：让 Node.js 程序支持 CLI debug 调试模式。</p></li><li><p>npm：JavaScript 编写的 Node.js 模块管理器。</p></li><li><p>openssl：C 语言编写，加密相关的模块，在 tls 和 crypto 模块中都有使用。</p></li><li><p>uv：C 语言编写，采用非阻塞型的 I/O 操作，为 Node.js 提供了访问系统资源的能力。</p></li><li><p>uvwasi：C 语编写，实现 WASI 系统调用 API。</p></li><li><p>v8：C 语言编写，JavaScript 引擎。</p></li><li><p>zlib：用于快速压缩，Node.js 使用 zlib 创建同步、异步和数据流压缩、解压接口。</p></li></ul><p>其中最重要的是v8 和uv两个目录对应的模块。</p><p>在 JavaScript异步代码 中我们详细分析过 V8 的工作原理，V8 本身并没有异步运行的能力，而是借助浏览器的其他线程实现的。但在 Node.js 中，异步实现主要依赖于 libuv，下面我们来重点分析 libuv 的实现原理。</p><h4 id="什么是-libuv" tabindex="-1">什么是 libuv <a class="header-anchor" href="#什么是-libuv" aria-label="Permalink to &quot;什么是 libuv&quot;">​</a></h4><p>libuv 是一个用 C 编写的支持多平台的异步 I/O 库，主要解决 I/O 操作容易引起阻塞的问题。最开始是专门为 Node.js 使用而开发的，但后来也被 Luvit、Julia、pyuv 等其他模块使用。下图是 libuv 的结构图。</p><p>![libuv 结构图](../img/libuv 结构图.png)</p><p>libuv 结构图</p><p>我用黄色线框将图中模块分为了两部分，分别代表了两种不同的异步实现方式。</p><p>左边部分为网络 I/O 模块，在不同平台下有不同的实现机制，Linux 系统下通过 epoll 实现，OSX 和其他 BSD 系统采用 KQueue，SunOS 系统采用 Event ports，Windows 系统采用的是IOCP。由于涉及操作系统底层 API，理解起来比较复杂，这里就不多介绍了，对这些实现机制比较感兴趣的同学可以查阅这篇文章<a href="https://cloud.tencent.com/developer/article/1373483" target="_blank" rel="noreferrer">“各种 IO 复用模式之 select、poll、epoll、kqueue、iocp 分析”</a>。</p><p>右边部分包括文件 I/O 模块、DNS 模块和用户代码，通过线程池来实现异步操作。文件 I/O 与网络 I/O 不同，libuv 没有依赖于系统底层的 API，而是在全局线程池中执行阻塞的文件 I/O 操作。</p><h4 id="libuv-中的事件轮询" tabindex="-1">libuv 中的事件轮询 <a class="header-anchor" href="#libuv-中的事件轮询" aria-label="Permalink to &quot;libuv 中的事件轮询&quot;">​</a></h4><p>下图是 libuv 官网给出的事件轮询工作流程图，我们结合代码来一起分析。![libuv 事件轮询](../img/libuv 事件轮询.png)</p><p>libuv 事件轮询</p><p>libuv 事件循环的核心代码是在 uv_run() 函数中实现的，下面是 Unix 系统下的部分核心代码。虽然是用 C 语言编写的，但和 JavaScript 一样都是高级语言，所以理解起来也不算太困难。最大的区别可能是星号和箭头，星号我们可以直接忽略。例如，函数参数中 uv_loop_t* loop 可以理解为 uv_loop_t 类型的变量 loop。箭头“→”可以理解为点号“.”，例如，loop→stop_flag 可以理解为 loop.stop_flag。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// deps/uv/src/unix/core.c</span></span>
<span class="line"><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> uv_run</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">uv_loop_t</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> loop</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uv_run_mode </span><span style="color:#E06C75;font-style:italic;">mode</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  r </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> uv__loop_alive</span><span style="color:#ABB2BF;">(loop);</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">r)</span></span>
<span class="line"><span style="color:#61AFEF;">    uv__update_time</span><span style="color:#ABB2BF;">(loop);</span></span>
<span class="line"><span style="color:#C678DD;">  while</span><span style="color:#ABB2BF;"> (r </span><span style="color:#C678DD;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">stop_flag</span><span style="color:#C678DD;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    uv__update_time</span><span style="color:#ABB2BF;">(loop);</span></span>
<span class="line"><span style="color:#61AFEF;">    uv__run_timers</span><span style="color:#ABB2BF;">(loop);</span></span>
<span class="line"><span style="color:#ABB2BF;">    ran_pending </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> uv__run_pending</span><span style="color:#ABB2BF;">(loop);</span></span>
<span class="line"><span style="color:#61AFEF;">    uv__run_idle</span><span style="color:#ABB2BF;">(loop);</span></span>
<span class="line"><span style="color:#61AFEF;">    uv__run_prepare</span><span style="color:#ABB2BF;">(loop);</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#61AFEF;">    uv__io_poll</span><span style="color:#ABB2BF;">(loop, timeout);</span></span>
<span class="line"><span style="color:#61AFEF;">    uv__run_check</span><span style="color:#ABB2BF;">(loop);</span></span>
<span class="line"><span style="color:#61AFEF;">    uv__run_closing_handles</span><span style="color:#ABB2BF;">(loop);</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="uv-loop-alive" tabindex="-1">uv__loop_alive <a class="header-anchor" href="#uv-loop-alive" aria-label="Permalink to &quot;uv__loop_alive&quot;">​</a></h5><p>这个函数用于判断事件轮询是否要继续进行，如果 loop 对象中不存在活跃的任务则返回 0 并退出循环。</p><p>在 C 语言中这个“任务”有个专业的称呼，即“句柄”，可以理解为指向任务的变量。句柄又可以分为两类：request 和 handle，分别代表短生命周期句柄和长生命周期句柄。具体代码如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// deps/uv/src/unix/core.c</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> uv__loop_alive</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">const</span><span style="color:#56B6C2;"> uv_loop_t</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> loop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#61AFEF;"> uv__has_active_handles</span><span style="color:#ABB2BF;">(loop) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#61AFEF;">         uv__has_active_reqs</span><span style="color:#ABB2BF;">(loop) </span><span style="color:#56B6C2;">||</span></span>
<span class="line"><span style="color:#E5C07B;">         loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">closing_handles</span><span style="color:#C678DD;"> !=</span><span style="color:#D19A66;"> NULL</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="uv-update-time" tabindex="-1">uv__update_time <a class="header-anchor" href="#uv-update-time" aria-label="Permalink to &quot;uv__update_time&quot;">​</a></h5><p>为了减少与时间相关的系统调用次数，同构这个函数来缓存当前系统时间，精度很高，可以达到纳秒级别，但单位还是毫秒。</p><p>具体源码如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// deps/uv/src/unix/internal.h</span></span>
<span class="line"><span style="color:#61AFEF;">UV_UNUSED</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> uv__update_time</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">uv_loop_t</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> loop</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">  loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">time</span><span style="color:#C678DD;"> =</span><span style="color:#61AFEF;"> uv__hrtime</span><span style="color:#ABB2BF;">(UV_CLOCK_FAST) </span><span style="color:#C678DD;">/</span><span style="color:#D19A66;"> 1000000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="uv-run-timers" tabindex="-1">uv__run_timers <a class="header-anchor" href="#uv-run-timers" aria-label="Permalink to &quot;uv__run_timers&quot;">​</a></h5><p>执行 setTimeout() 和 setInterval() 中到达时间阈值的回调函数。这个执行过程是通过 for 循环遍历实现的，从下面的代码中也可以看到，定时器回调是存储于一个最小堆结构的数据中的，当这个最小堆为空或者还未到达时间阈值时退出循环。</p><p>在执行定时器回调函数前先移除该定时器，如果设置了 repeat，需再次加到最小堆里，然后执行定时器回调。</p><p>具体代码如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// deps/uv/src/timer.c</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> uv__run_timers</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">uv_loop_t</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> loop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  struct</span><span style="color:#ABB2BF;"> heap_node</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> heap_node;</span></span>
<span class="line"><span style="color:#56B6C2;">  uv_timer_t</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> handle;</span></span>
<span class="line"><span style="color:#C678DD;">  for</span><span style="color:#ABB2BF;"> (;;) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    heap_node </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> heap_min</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">timer_heap</span><span style="color:#ABB2BF;">(loop));</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (heap_node </span><span style="color:#C678DD;">==</span><span style="color:#D19A66;"> NULL</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">      break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    handle </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> container_of</span><span style="color:#ABB2BF;">(heap_node, </span><span style="color:#56B6C2;">uv_timer_t</span><span style="color:#ABB2BF;">, heap_node);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">handle</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">timeout</span><span style="color:#C678DD;"> &gt;</span><span style="color:#E5C07B;"> loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">      break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    uv_timer_stop</span><span style="color:#ABB2BF;">(handle);</span></span>
<span class="line"><span style="color:#61AFEF;">    uv_timer_again</span><span style="color:#ABB2BF;">(handle);</span></span>
<span class="line"><span style="color:#E5C07B;">    handle</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">timer_cb</span><span style="color:#ABB2BF;">(handle);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h5 id="uv-run-pending" tabindex="-1">uv__run_pending <a class="header-anchor" href="#uv-run-pending" aria-label="Permalink to &quot;uv__run_pending&quot;">​</a></h5><p>遍历所有存储在 pending_queue 中的 I/O 回调函数，当 pending_queue 为空时返回 0；否则在执行完 pending_queue 中的回调函数后返回 1。</p><p>代码如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// deps/uv/src/unix/core.c</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> uv__run_pending</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">uv_loop_t</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> loop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  QUEUE</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> q;</span></span>
<span class="line"><span style="color:#ABB2BF;">  QUEUE pq;</span></span>
<span class="line"><span style="color:#56B6C2;">  uv__io_t</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> w;</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">QUEUE_EMPTY</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pending_queue</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  QUEUE_MOVE</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pending_queue</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">pq);</span></span>
<span class="line"><span style="color:#C678DD;">  while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">QUEUE_EMPTY</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">pq)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    q </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> QUEUE_HEAD</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">pq);</span></span>
<span class="line"><span style="color:#61AFEF;">    QUEUE_REMOVE</span><span style="color:#ABB2BF;">(q);</span></span>
<span class="line"><span style="color:#61AFEF;">    QUEUE_INIT</span><span style="color:#ABB2BF;">(q);</span></span>
<span class="line"><span style="color:#ABB2BF;">    w </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> QUEUE_DATA</span><span style="color:#ABB2BF;">(q, </span><span style="color:#56B6C2;">uv__io_t</span><span style="color:#ABB2BF;">, pending_queue);</span></span>
<span class="line"><span style="color:#E5C07B;">    w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">cb</span><span style="color:#ABB2BF;">(loop, w, POLLOUT);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h5 id="uv-run-idle-uv-run-prepare-uv-run-check" tabindex="-1">uv__run_idle / uv__run_prepare / uv__run_check <a class="header-anchor" href="#uv-run-idle-uv-run-prepare-uv-run-check" aria-label="Permalink to &quot;uv__run_idle / uv__run_prepare / uv__run_check&quot;">​</a></h5><p>这 3 个函数都是通过一个宏函数 UV_LOOP_WATCHER_DEFINE 进行定义的，宏函数可以理解为代码模板，或者说用来定义函数的函数。3 次调用宏函数并分别传入 name 参数值 prepare、check、idle，同时定义了 uv__run_idle、uv__run_prepare、uv__run_check 3 个函数。</p><p>所以说它们的执行逻辑是一致的，都是按照先进先出原则循环遍历并取出队列 loop-&gt;name##_handles 中的对象，然后执行对应的回调函数。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// deps/uv/src/unix/loop-watcher.c</span></span>
<span class="line"><span style="color:#C678DD;">#define</span><span style="color:#61AFEF;"> UV_LOOP_WATCHER_DEFINE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">)          </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#C678DD;">  void</span><span style="color:#ABB2BF;"> uv_run_##</span><span style="color:#61AFEF;">name</span><span style="color:#E06C75;">(</span><span style="color:#56B6C2;">uv_loop_t</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;"> loop)</span><span style="color:#ABB2BF;"> {            </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    uv_##name##_t</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> h;                               </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    QUEUE queue;                                    </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    QUEUE</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> q;                                       </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">    QUEUE_MOVE</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">loop</span><span style="color:#E06C75;">-&gt;name##_handles</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> &amp;</span><span style="color:#E06C75;">queue)</span><span style="color:#ABB2BF;">;      </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">QUEUE_EMPTY</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">queue)</span><span style="color:#ABB2BF;">) {                  </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">      q </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> QUEUE_HEAD</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E06C75;">queue)</span><span style="color:#ABB2BF;">;                       </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">      h </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> QUEUE_DATA</span><span style="color:#E06C75;">(q</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> uv_##name##_t</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> queue)</span><span style="color:#ABB2BF;">;      </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">      QUEUE_REMOVE</span><span style="color:#E06C75;">(q)</span><span style="color:#ABB2BF;">;                              </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#61AFEF;">      QUEUE_INSERT_TAIL</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">loop</span><span style="color:#E06C75;">-&gt;name##_handles</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> q)</span><span style="color:#ABB2BF;">;  </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#E5C07B;">      h</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">##</span><span style="color:#61AFEF;">_cb</span><span style="color:#E06C75;">(h)</span><span style="color:#ABB2BF;">;                              </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">    }                                               </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"><span style="color:#ABB2BF;">  }                                                 </span><span style="color:#56B6C2;">\\</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">UV_LOOP_WATCHER_DEFINE</span><span style="color:#E06C75;">(prepare</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> PREPARE)</span></span>
<span class="line"><span style="color:#61AFEF;">UV_LOOP_WATCHER_DEFINE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">check</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> CHECK</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">UV_LOOP_WATCHER_DEFINE</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">idle</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> IDLE</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h5 id="uv-io-poll" tabindex="-1">uv__io_poll <a class="header-anchor" href="#uv-io-poll" aria-label="Permalink to &quot;uv__io_poll&quot;">​</a></h5><p>uv__io_poll 主要是用来轮询 I/O 操作。具体实现根据操作系统的不同会有所区别，我们以 Linux 系统为例进行分析。</p><p>uv__io_poll 函数源码较多，核心为两段循环代码，部分代码如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> uv__io_poll</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">uv_loop_t</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> loop</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;font-style:italic;"> timeout</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">QUEUE_EMPTY</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">watcher_queue</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      q </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> QUEUE_HEAD</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">watcher_queue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">      QUEUE_REMOVE</span><span style="color:#ABB2BF;">(q);</span></span>
<span class="line"><span style="color:#61AFEF;">      QUEUE_INIT</span><span style="color:#ABB2BF;">(q);</span></span>
<span class="line"><span style="color:#ABB2BF;">      w </span><span style="color:#C678DD;">=</span><span style="color:#61AFEF;"> QUEUE_DATA</span><span style="color:#ABB2BF;">(q, </span><span style="color:#56B6C2;">uv__io_t</span><span style="color:#ABB2BF;">, watcher_queue);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 设置当前感兴趣的事件</span></span>
<span class="line"><span style="color:#E5C07B;">      e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">events</span><span style="color:#C678DD;"> =</span><span style="color:#E5C07B;"> w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pevents</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 设置事件对象的文件描述符</span></span>
<span class="line"><span style="color:#E5C07B;">      e</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fd</span><span style="color:#C678DD;"> =</span><span style="color:#E5C07B;"> w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">events</span><span style="color:#C678DD;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        op </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> EPOLL_CTL_ADD;</span></span>
<span class="line"><span style="color:#C678DD;">      else</span></span>
<span class="line"><span style="color:#ABB2BF;">        op </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> EPOLL_CTL_MOD;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 修改 epoll 事件</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">epoll_ctl</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">backend_fd</span><span style="color:#ABB2BF;">, op, </span><span style="color:#E5C07B;">w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">e)) {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (errno </span><span style="color:#C678DD;">!=</span><span style="color:#ABB2BF;"> EEXIST)</span></span>
<span class="line"><span style="color:#61AFEF;">          abort</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">epoll_ctl</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">backend_fd</span><span style="color:#ABB2BF;">, EPOLL_CTL_MOD, </span><span style="color:#E5C07B;">w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">&amp;</span><span style="color:#ABB2BF;">e))</span></span>
<span class="line"><span style="color:#61AFEF;">          abort</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">      }  </span></span>
<span class="line"><span style="color:#E5C07B;">      w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">events</span><span style="color:#C678DD;"> =</span><span style="color:#E5C07B;"> w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pevents</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (;;) {</span></span>
<span class="line"><span style="color:#C678DD;">      for</span><span style="color:#ABB2BF;"> (i </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#C678DD;">&lt;</span><span style="color:#ABB2BF;"> nfds; i</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        pe </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> events </span><span style="color:#C678DD;">+</span><span style="color:#ABB2BF;"> i;</span></span>
<span class="line"><span style="color:#ABB2BF;">        fd </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> pe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;">data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fd</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        w </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">watchers</span><span style="color:#ABB2BF;">[fd];</span></span>
<span class="line"><span style="color:#E5C07B;">        pe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">events</span><span style="color:#C678DD;"> &amp;=</span><span style="color:#E5C07B;"> w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pevents</span><span style="color:#C678DD;"> |</span><span style="color:#ABB2BF;"> POLLERR </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> POLLHUP;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">pe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">events</span><span style="color:#C678DD;"> ==</span><span style="color:#ABB2BF;"> POLLERR </span><span style="color:#56B6C2;">||</span><span style="color:#E5C07B;"> pe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">events</span><span style="color:#C678DD;"> ==</span><span style="color:#ABB2BF;"> POLLHUP)</span></span>
<span class="line"><span style="color:#E5C07B;">          pe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">events</span><span style="color:#C678DD;"> |=</span><span style="color:#E5C07B;"> w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">pevents</span><span style="color:#C678DD;"> &amp;</span><span style="color:#ABB2BF;"> (POLLIN </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> POLLOUT </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> UV__POLLRDHUP </span><span style="color:#C678DD;">|</span><span style="color:#ABB2BF;"> UV__POLLPRI);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">pe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">events</span><span style="color:#C678DD;"> !=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // 感兴趣事件触发，标记信号 </span></span>
<span class="line"><span style="color:#C678DD;">          if</span><span style="color:#ABB2BF;"> (w </span><span style="color:#C678DD;">==</span><span style="color:#C678DD;"> &amp;</span><span style="color:#E5C07B;">loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">signal_io_watcher</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            have_signals </span><span style="color:#C678DD;">=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">          else</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 直接执行回调</span></span>
<span class="line"><span style="color:#E5C07B;">            w</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#61AFEF;">cb</span><span style="color:#ABB2BF;">(loop, w, </span><span style="color:#E5C07B;">pe</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">events</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">          nevents</span><span style="color:#C678DD;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 有信号发生时触发回调</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (have_signals </span><span style="color:#C678DD;">!=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">        loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E5C07B;">signal_io_watcher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cb</span><span style="color:#ABB2BF;">(loop, </span><span style="color:#C678DD;">&amp;</span><span style="color:#E5C07B;">loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">signal_io_watcher</span><span style="color:#ABB2BF;">, POLLIN);</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#ABB2BF;">   ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>在 while 循环中，遍历观察者队列 watcher_queue，并把事件和文件描述符取出来赋值给事件对象 e，然后调用 epoll_ctl 函数来注册或修改 epoll 事件。</p><p>在 for 循环中，会先将 epoll 中等待的文件描述符取出赋值给 nfds，然后再遍历 nfds，执行回调函数。</p><h5 id="uv-run-closing-handles" tabindex="-1">uv__run_closing_handles <a class="header-anchor" href="#uv-run-closing-handles" aria-label="Permalink to &quot;uv__run_closing_handles&quot;">​</a></h5><p>遍历等待关闭的队列，关闭 stream、tcp、udp 等 handle，然后调用 handle 对应的 close_cb。代码如下：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> uv__run_closing_handles</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">uv_loop_t</span><span style="color:#C678DD;">*</span><span style="color:#E06C75;font-style:italic;"> loop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#56B6C2;">  uv_handle_t</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> p;</span></span>
<span class="line"><span style="color:#56B6C2;">  uv_handle_t</span><span style="color:#C678DD;">*</span><span style="color:#ABB2BF;"> q;</span></span>
<span class="line"><span style="color:#ABB2BF;">  p </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">closing_handles</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">  loop</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">closing_handles</span><span style="color:#C678DD;"> =</span><span style="color:#D19A66;"> NULL</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  while</span><span style="color:#ABB2BF;"> (p) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    q </span><span style="color:#C678DD;">=</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">-&gt;</span><span style="color:#E06C75;">next_closing</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    uv__finish_close</span><span style="color:#ABB2BF;">(p);</span></span>
<span class="line"><span style="color:#ABB2BF;">    p </span><span style="color:#C678DD;">=</span><span style="color:#ABB2BF;"> q;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="process-nexttick-和-promise" tabindex="-1">process.nextTick 和 Promise <a class="header-anchor" href="#process-nexttick-和-promise" aria-label="Permalink to &quot;process.nextTick 和 Promise&quot;">​</a></h4><p>虽然 process.nextTick 和 Promise 都是异步 API，但并不属于事件轮询的一部分，它们都有各自的任务队列，在事件轮询的每个步骤完成后执行。所以当我们使用这两个异步 API 的时候要注意，如果在传入的回调函数中执行长任务或递归，则会导致事件轮询被阻塞，从而“饿死”I/O 操作。</p><p>下面的代码就是通过递归调用 prcoess.nextTick 而导致 fs.readFile 的回调函数无法执行的例子。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;config.json&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> traverse</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">   process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextTick</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">traverse</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>要解决这个问题，可以使用 setImmediate 来替代，因为 setImmediate 会在事件轮询中执行回调函数队列。 在“JavaScript异步代码”中提到过，process.nextTick 任务队列优先级比 Promise 任务队列更高，具体的原因可以参看下面的代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// lib/internal/process/task_queues.js</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> processTicksAndRejections</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;"> let</span><span style="color:#E06C75;"> tock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;"> do</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  while</span><span style="color:#ABB2BF;"> ((</span><span style="color:#E06C75;">tock</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">())) {</span></span>
<span class="line"><span style="color:#E06C75;">   constasyncId</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tock</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">async_id_symbol</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">   emitBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">asyncId</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tock</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">trigger_async_id_symbol</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">tock</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">   try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    constcallback</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tock</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">tock</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">args</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">     callback</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">     constargs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tock</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">     switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">args</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      case</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#61AFEF;">       callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">       break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      case</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#61AFEF;">       callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">       break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      case</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#61AFEF;">       callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">       break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      case</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#61AFEF;">       callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">       break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">      default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#61AFEF;">       callback</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">   } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">destroyHooksExist</span><span style="color:#ABB2BF;">()) </span><span style="color:#61AFEF;">emitDestroy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">asyncId</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">   emitAfter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">asyncId</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  runMicrotasks</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEmpty</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">||</span><span style="color:#61AFEF;"> processPromiseRejections</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#61AFEF;"> setHasTickScheduled</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;"> setHasRejectionToWarn</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>从 processTicksAndRejections() 函数中可以看出，首先通过 while 循环取出 queue 队列的回调函数，而这个 queue 队列中的回调函数就是通过 process.nextTick来添加的。当 while 循环结束后才调用 runMicrotasks() 函数执行 Promise 的回调函数。</p><h4 id="node-js-源码架构解析总结" tabindex="-1">Node.js 源码架构解析总结 <a class="header-anchor" href="#node-js-源码架构解析总结" aria-label="Permalink to &quot;Node.js 源码架构解析总结&quot;">​</a></h4><p>这一课时我们主要分析了 Node.js 的核心依赖 libuv。libuv 的结构可以分两部分，一部分是网络 I/O，底层实现会根据不同操作系统依赖不同的系统 API，另一部分是文件 I/O、DNS、用户代码，这一部分采用线程池来处理。</p><p>libuv 处理异步操作的核心机制是事件轮询，事件轮询分成若干步骤，大致操作是遍历并执行队列中的回调函数。</p><p>最后提到处理异步的 API process.nextTick 和 Promise 不属于事件轮询，使用不当则会导致事件轮询阻塞，其中一种解决方式就是使用 setImmediate 来替代。</p><p>最后布置一道思考题：尝试着阅读一下 libuv 的源码，看看能不能找出 setTimeout 对应的底层实现原理，然后把你的发现写在留言区和大家一起分享交流。</p>`,65)]))}const u=n(o,[["render",e]]);export{F as __pageData,u as default};
