import{_ as l,c as e,o as i,ah as r}from"./chunks/framework.DqD713j2.js";const m=JSON.parse('{"title":"浏览器端性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端性能优化专题/06_浏览器端性能优化.md","filePath":"Document/前端性能优化专题/06_浏览器端性能优化.md","lastUpdated":1750954157000}'),o={name:"Document/前端性能优化专题/06_浏览器端性能优化.md"};function t(h,a,u,s,d,n){return i(),e("div",null,a[0]||(a[0]=[r('<h1 id="浏览器端性能优化" tabindex="-1">浏览器端性能优化 <a class="header-anchor" href="#浏览器端性能优化" aria-label="Permalink to &quot;浏览器端性能优化&quot;">​</a></h1><h2 id="规则-1-把-css-放在-head-中加载" tabindex="-1">规则 1：把 CSS 放在 HEAD 中加载 <a class="header-anchor" href="#规则-1-把-css-放在-head-中加载" aria-label="Permalink to &quot;规则 1：把 CSS 放在 HEAD 中加载&quot;">​</a></h2><ul><li>能让页面更早的开始渲染，避免闪屏</li><li>最好能包含关键渲染路径的样式：首屏</li></ul><h2 id="规则-2-把-js-放在-body-末尾加载" tabindex="-1">规则 2：把 JS 放在 BODY 末尾加载 <a class="header-anchor" href="#规则-2-把-js-放在-body-末尾加载" aria-label="Permalink to &quot;规则 2：把 JS 放在 BODY 末尾加载&quot;">​</a></h2><ul><li>因为 JS 阻塞 HTML 解析和 CSS 染</li></ul><h2 id="规则-3-不使用-css-表达式" tabindex="-1">规则 3：不使用 CSS 表达式 <a class="header-anchor" href="#规则-3-不使用-css-表达式" aria-label="Permalink to &quot;规则 3：不使用 CSS 表达式&quot;">​</a></h2><ul><li>看似强大，实际性能开销很大，可能导致页面卡顿</li></ul><h2 id="规则-4-用外链方式用-css-和-js" tabindex="-1">规则 4：用外链方式用 CSS 和 JS <a class="header-anchor" href="#规则-4-用外链方式用-css-和-js" aria-label="Permalink to &quot;规则 4：用外链方式用 CSS 和 JS&quot;">​</a></h2><ul><li>有效减少 HTML 的体积可合理利用浏览器缓存</li></ul><h2 id="规则-5-压缩-js-和-css" tabindex="-1">规则 5：压缩 JS 和 CSS <a class="header-anchor" href="#规则-5-压缩-js-和-css" aria-label="Permalink to &quot;规则 5：压缩 JS 和 CSS&quot;">​</a></h2><ul><li>生产环境删除不必要的注释、空白 JS 中变量名压缩，混淆压缩</li></ul><h2 id="规则-6-不重复加载-js" tabindex="-1">规则 6：不重复加载 JS <a class="header-anchor" href="#规则-6-不重复加载-js" aria-label="Permalink to &quot;规则 6：不重复加载 JS&quot;">​</a></h2><ul><li>在 IE 中还是会多个请求，不能发挥缓存优势</li><li>意味着更长的 JS 执行时间</li></ul><h2 id="规则-7-让-ajax-请求可缓存-服务端" tabindex="-1">规则 7：让 Ajax 请求可缓存(服务端) <a class="header-anchor" href="#规则-7-让-ajax-请求可缓存-服务端" aria-label="Permalink to &quot;规则 7：让 Ajax 请求可缓存(服务端)&quot;">​</a></h2><ul><li>GZIP、内容压缩都可适用</li></ul><h2 id="规则-8-用-get-方式发起-ajax-请求" tabindex="-1">规则 8：用 GET 方式发起 Ajax 请求 <a class="header-anchor" href="#规则-8-用-get-方式发起-ajax-请求" aria-label="Permalink to &quot;规则 8：用 GET 方式发起 Ajax 请求&quot;">​</a></h2><ul><li>GET 方式可以缓存</li><li>如果是获取信息，GET 更语义化</li></ul><h2 id="规则-9-组件延迟加载" tabindex="-1">规则 9：组件延迟加载 <a class="header-anchor" href="#规则-9-组件延迟加载" aria-label="Permalink to &quot;规则 9：组件延迟加载&quot;">​</a></h2><ul><li>保障关键页面资源优先加载：因为并发数限制</li><li>延迟加载的典型手段：Lazyload</li></ul><h2 id="规则-10-减少-dom-节点数" tabindex="-1">规则 10：减少 DOM 节点数 <a class="header-anchor" href="#规则-10-减少-dom-节点数" aria-label="Permalink to &quot;规则 10：减少 DOM 节点数&quot;">​</a></h2><ul><li>天猫：更多节点数以为浏览器布局、渲染时计算量更大</li></ul><h2 id="规则-11-避免使用-iframe" tabindex="-1">规则 11：避免使用 iframe <a class="header-anchor" href="#规则-11-避免使用-iframe" aria-label="Permalink to &quot;规则 11：避免使用 iframe&quot;">​</a></h2><ul><li>会阻塞父文档的 onload</li><li>即使是空白也比较耗时</li></ul><h2 id="规则-12-减少-cookie-体积" tabindex="-1">规则 12：减少 COOKIE 体积 <a class="header-anchor" href="#规则-12-减少-cookie-体积" aria-label="Permalink to &quot;规则 12：减少 COOKIE 体积&quot;">​</a></h2><ul><li>因为 COOKIE 每次请求都会全部带上</li></ul><h2 id="规则-13-使用无-cookie-域名加载静态资源-后端" tabindex="-1">规则 13：使用无 COOKIE 域名加载静态资源(后端) <a class="header-anchor" href="#规则-13-使用无-cookie-域名加载静态资源-后端" aria-label="Permalink to &quot;规则 13：使用无 COOKIE 域名加载静态资源(后端)&quot;">​</a></h2><ul><li>减少静态资源加载时的网络传输量</li><li>静态资源加载通常是不需要 COOKIE 的</li><li>阿里:精简 COOKIE 后，每年节省的流量 TB 记</li></ul><h2 id="规则-14-减少-js-中的-dom-访问" tabindex="-1">规则 14：减少 JS 中的 DOM 访问 <a class="header-anchor" href="#规则-14-减少-js-中的-dom-访问" aria-label="Permalink to &quot;规则 14：减少 JS 中的 DOM 访问&quot;">​</a></h2><ul><li>对于查找到的元素，缓存在变量中</li><li>节点增加是合理利用 DocumentFragment</li><li>不要用 JS 去频繁修改样式</li></ul><h2 id="规则-15-使用更智能的事件监听机制" tabindex="-1">规则 15：使用更智能的事件监听机制 <a class="header-anchor" href="#规则-15-使用更智能的事件监听机制" aria-label="Permalink to &quot;规则 15：使用更智能的事件监听机制&quot;">​</a></h2><ul><li>基于事件冒泡的委托机制，有效减少绑定的数量</li></ul><h2 id="规则-16-使用常见的图片优化手段" tabindex="-1">规则 16：使用常见的图片优化手段 <a class="header-anchor" href="#规则-16-使用常见的图片优化手段" aria-label="Permalink to &quot;规则 16：使用常见的图片优化手段&quot;">​</a></h2><ul><li>相比代码，图片体积很大</li><li>PNGCrush、JPEGTRAN、PNGQUANT</li><li>渐进式编码：JPG</li></ul><h2 id="规则-17-不要在-html-中缩放图片" tabindex="-1">规则 17：不要在 HTML 中缩放图片 <a class="header-anchor" href="#规则-17-不要在-html-中缩放图片" aria-label="Permalink to &quot;规则 17：不要在 HTML 中缩放图片&quot;">​</a></h2><ul><li>徒增渲染开销，提供适当尺寸即可</li></ul><h2 id="规则-18-不要把图片-src-置空" tabindex="-1">规则 18：不要把图片 SRC 置空 <a class="header-anchor" href="#规则-18-不要把图片-src-置空" aria-label="Permalink to &quot;规则 18：不要把图片 SRC 置空&quot;">​</a></h2><ul><li>IE、ChromeFireFox 会发起额外的主文档请求</li></ul><h2 id="规则-19-任何资源尽量在-25k-以内" tabindex="-1">规则 19：任何资源尽量在 25K 以内 <a class="header-anchor" href="#规则-19-任何资源尽量在-25k-以内" aria-label="Permalink to &quot;规则 19：任何资源尽量在 25K 以内&quot;">​</a></h2><ul><li>iPhone 无法缓存 25K 以上的资源</li></ul>',39)]))}const b=l(o,[["render",t]]);export{m as __pageData,b as default};
