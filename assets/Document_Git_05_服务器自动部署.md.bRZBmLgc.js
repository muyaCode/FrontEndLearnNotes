import{_ as a,c as n,o as l,ah as e}from"./chunks/framework.DqD713j2.js";const B=JSON.parse('{"title":"服务器自动部署","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Git/05_服务器自动部署.md","filePath":"Document/Git/05_服务器自动部署.md","lastUpdated":1750954157000}'),p={name:"Document/Git/05_服务器自动部署.md"};function o(t,s,r,i,c,b){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="服务器自动部署" tabindex="-1">服务器自动部署 <a class="header-anchor" href="#服务器自动部署" aria-label="Permalink to &quot;服务器自动部署&quot;">​</a></h1><h2 id="钩子实现自动化部署" tabindex="-1">钩子实现自动化部署 <a class="header-anchor" href="#钩子实现自动化部署" aria-label="Permalink to &quot;钩子实现自动化部署&quot;">​</a></h2><h3 id="第一步-创建-git-用户" tabindex="-1">第一步：创建 git 用户 <a class="header-anchor" href="#第一步-创建-git-用户" aria-label="Permalink to &quot;第一步：创建 git 用户&quot;">​</a></h3><p>登录服务器，这里默认你已经安装好了 git。创建一个 git 用户：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 创建一个名叫jouzeyu的用户</span></span>
<span class="line"><span style="color:#61AFEF;">adduser</span><span style="color:#98C379;"> jouzeyu</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="第二步-给-git-用户添加权限" tabindex="-1">第二步：给 git 用户添加权限 <a class="header-anchor" href="#第二步-给-git-用户添加权限" aria-label="Permalink to &quot;第二步：给 git 用户添加权限&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 在根目录下的 home 文件夹下创建一个git文件夹</span></span>
<span class="line"><span style="color:#61AFEF;">mkdir</span><span style="color:#98C379;"> /home/git</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 切换到创建好的git文件夹</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> /home/git</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建 .ssh文件夹，里面主要用来放公钥</span></span>
<span class="line"><span style="color:#61AFEF;">mkdir</span><span style="color:#98C379;"> .ssh</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 切换到.ssh文件夹并创建authorized_keys文件</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> .ssh</span></span>
<span class="line"><span style="color:#61AFEF;">touch</span><span style="color:#98C379;"> authorized_keys</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="第三步-配置-git-并获取公钥" tabindex="-1">第三步：配置 git 并获取公钥 <a class="header-anchor" href="#第三步-配置-git-并获取公钥" aria-label="Permalink to &quot;第三步：配置 git 并获取公钥&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 在本地配置用户名和邮箱，我的用户名默认为jouzeyu</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> config</span><span style="color:#D19A66;"> --global</span><span style="color:#98C379;"> user.name</span><span style="color:#98C379;"> &quot;jouzeyu&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> config</span><span style="color:#D19A66;"> --global</span><span style="color:#98C379;"> user.email</span><span style="color:#98C379;"> &quot;your email&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意：如果用了 --global 选项，那么以后你所有的项目都会使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或邮箱，只需在该项目下执行：</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">git config user</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">name </span><span style="color:#98C379;">&quot;xxx&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">git config user</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">email </span><span style="color:#98C379;">&quot;xxx&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>接下来我们获取公钥，请先查看你的用户下的.ssh 文件夹中是否之前就含有公钥和私钥，我们需要寻找一对以 id_dsa 或 id_rsa 命名的文件，其中一个带有 .pub 扩展名。.pub 文件是你的公钥，另一个则是私钥。如果没有请运行 ssh-keygen。</p><p>使用 <code>cat ~/.ssh/id_rsa.pub</code> 命令可以获取公钥，复制它，使用 vi 或者 vim 命令把它粘贴到我们之前创建的 authorized_keys 文件中，使用:wq 保存。</p><h3 id="第四步-初始化仓库" tabindex="-1">第四步：初始化仓库 <a class="header-anchor" href="#第四步-初始化仓库" aria-label="Permalink to &quot;第四步：初始化仓库&quot;">​</a></h3><p>创建一个存放 git 仓库的文件夹：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">mkdir</span><span style="color:#98C379;"> /www/wwwroot/git</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> /www/wwwroot/git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>初始化仓库：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 初始化一个裸仓库（强烈建议）</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> init</span><span style="color:#D19A66;"> --bare</span><span style="color:#98C379;"> website.git</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 配置仓库的权限，让我们之前创建好的git用户jouzeyu能读写</span></span>
<span class="line"><span style="color:#61AFEF;">chown</span><span style="color:#D19A66;"> -R</span><span style="color:#98C379;"> git:git</span><span style="color:#98C379;"> website.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里必须注意，如果不给权限，后面的 git pull 将会报错，原因是没有权限写入。关于裸仓库和普通仓库的区别简单来说就是裸仓库看不到项目文件，普通仓库和你的项目目录一样，只是多了一个.git 文件夹。</p><h3 id="第五步-生成项目仓库" tabindex="-1">第五步：生成项目仓库 <a class="header-anchor" href="#第五步-生成项目仓库" aria-label="Permalink to &quot;第五步：生成项目仓库&quot;">​</a></h3><p>这个也是在服务器上进行的，同时说明一下<code>/www/wwwroot/</code>是我的环境的根目录。</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 创建我服务器上的项目目录test</span></span>
<span class="line"><span style="color:#ABB2BF;">mkdir </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">www</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">wwwroot</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">test</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 克隆仓库</span></span>
<span class="line"><span style="color:#ABB2BF;">git </span><span style="color:#C678DD;">clone</span><span style="color:#56B6C2;"> /</span><span style="color:#ABB2BF;">www</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">wwwroot</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">git</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">website</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">git</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 设置权限</span></span>
<span class="line"><span style="color:#ABB2BF;">chown </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">R git website</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>注意：一定要注意我的路径，git 仓库是 /www/wwwroot/git, 项目仓库是 /www/wwwroot/test。</p><h3 id="第六步-克隆到本地" tabindex="-1">第六步：克隆到本地 <a class="header-anchor" href="#第六步-克隆到本地" aria-label="Permalink to &quot;第六步：克隆到本地&quot;">​</a></h3><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 通过ip地址从配置好的线上仓库拉取下来</span></span>
<span class="line"><span style="color:#ABB2BF;">git </span><span style="color:#C678DD;">clone</span><span style="color:#ABB2BF;"> git</span><span style="color:#C678DD;">@</span><span style="color:#D19A66;">47.97.121</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">XXX:</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">www</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">wwwroot</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">git</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">website</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">git</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 如果有配置域名的话也可以通过域名拉取</span></span>
<span class="line"><span style="color:#ABB2BF;">git </span><span style="color:#C678DD;">clone</span><span style="color:#ABB2BF;"> git</span><span style="color:#C678DD;">@</span><span style="color:#ABB2BF;">www</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">XXX</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">XXX:</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">www</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">wwwroot</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">git</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">website</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>因为公钥的原因，这里是不需要密码的，如果成功你的电脑上会出现一个 website 的文件夹，如果报错请检查后再进行下面的操作。</p><h3 id="第七步-上传代码-git-push" tabindex="-1">第七步：上传代码（git push） <a class="header-anchor" href="#第七步-上传代码-git-push" aria-label="Permalink to &quot;第七步：上传代码（git push）&quot;">​</a></h3><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 打开刚才克隆下来的本地仓库</span></span>
<span class="line"><span style="color:#ABB2BF;">cd website</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建README.md文件</span></span>
<span class="line"><span style="color:#ABB2BF;">touch README</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">md</span></span>
<span class="line"><span style="color:#ABB2BF;">git add </span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#ABB2BF;">git commit </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">m</span><span style="color:#98C379;">&quot;创建README.md文件&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">git push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>不出意外已经正常上传了，如果报错请检查权限，上文提到过，如果还不行可以在下方评论。</p><h3 id="第八步-添加钩子" tabindex="-1">第八步：添加钩子 <a class="header-anchor" href="#第八步-添加钩子" aria-label="Permalink to &quot;第八步：添加钩子&quot;">​</a></h3><p>写的比较细，现在才来讲钩子，回到我们线上的服务器，下面的是在线上操作的：</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 切换到这个目录</span></span>
<span class="line"><span style="color:#ABB2BF;">cd </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">www</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">wwwroot</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">git</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">website</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">git</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">hooks</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 生成post-receive文件</span></span>
<span class="line"><span style="color:#ABB2BF;">touch post</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">receive</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 使用vim编辑</span></span>
<span class="line"><span style="color:#ABB2BF;">vim post</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">receive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在 post-receive 文件里面粘贴：</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 打印输出</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &#39;======上传代码到服务器======&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 打开线上项目文件夹</span></span>
<span class="line"><span style="color:#ABB2BF;">cd </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">www</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">wwwroot</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">test</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;">website</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 这个很重要，如果不取消的话将不能在cd的路径上进行git操作</span></span>
<span class="line"><span style="color:#ABB2BF;">unset GIT_DIR</span></span>
<span class="line"><span style="color:#ABB2BF;">git pull origin main</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 自动编译vue项目,如有需要请去掉前面的#号</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># npm run build</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 自动更新composer（我暂时没试过）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># composer update</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> $(date) </span><span style="color:#56B6C2;">&gt;&gt;</span><span style="color:#ABB2BF;"> hook</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">log</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &#39;======代码更新完成======&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>保存后给 post-receive 文件加上运行权限</p><div class="language-text line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>chmod +x post-receive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="最后一步" tabindex="-1">最后一步 <a class="header-anchor" href="#最后一步" aria-label="Permalink to &quot;最后一步&quot;">​</a></h3><p>在本地修改部分内容，然后提交推送 git push，可以看到我们已经实现了自动化部署。</p><h2 id="ssh-连接部署" tabindex="-1">SSH 连接部署 <a class="header-anchor" href="#ssh-连接部署" aria-label="Permalink to &quot;SSH 连接部署&quot;">​</a></h2><h3 id="一、使用-ssh-链接-github" tabindex="-1">一、使用 SSH 链接 GitHub <a class="header-anchor" href="#一、使用-ssh-链接-github" aria-label="Permalink to &quot;一、使用 SSH 链接 GitHub&quot;">​</a></h3><ul><li>1.为了让 GitHub 仓库可以访问您的服务器，您需要在服务器上生成 SSH 公钥，并将其添加到 GitHub 账户的 SSH 密钥设置中。</li><li>2.可以使用 <code>ssh-keygen</code> 命令在服务器上生成 SSH 公钥，然后使用 <code>cat ~/.ssh/id_rsa.pub</code> 命令查看并复制公钥。</li><li>3.可以登录 GitHub 账户，进入 Settings -&gt; SSH and GPG keys，点击 New SSH key，将复制的公钥粘贴到 Key 输入框中，点击 Add SSH key 完成添加</li></ul><h3 id="二、自动部署流程" tabindex="-1">二、自动部署流程 <a class="header-anchor" href="#二、自动部署流程" aria-label="Permalink to &quot;二、自动部署流程&quot;">​</a></h3><ul><li>1.为了实现自动部署，您需要在 GitHub 仓库中设置一个 WebHook，当代码被推送到仓库中时，触发一个 POST 请求，通知服务器拉取最新的代码。</li><li>2.可以登录 GitHub 账户，进入仓库的 Settings -&gt; Webhooks，点击 Add webhook，输入服务器的 URL（例如 <a href="http://47.97.121.XXX:8080/webhook%EF%BC%89%EF%BC%8C%E9%80%89%E6%8B%A9" target="_blank" rel="noreferrer">http://47.97.121.XXX:8080/webhook），选择</a> Content type 为 application/json，选择触发事件为 push events，点击 Add webhook 完成设置。</li><li>3.需要在服务器上编写一个接收 POST 请求的脚本，例如 webhook.php，用于执行 git pull 命令，将最新的代码拉取到服务器的项目目录中。</li><li>4.还需要在服务器上配置一个 web 服务器，例如 Nginx，用于监听 8080 端口，将请求转发到 webhook.php 脚本。</li></ul><h3 id="三、使用-ssh-链接阿里云服务器" tabindex="-1">三、使用 SSH 链接阿里云服务器 <a class="header-anchor" href="#三、使用-ssh-链接阿里云服务器" aria-label="Permalink to &quot;三、使用 SSH 链接阿里云服务器&quot;">​</a></h3><ul><li>为了让本地电脑可以访问阿里云服务器，需要在阿里云控制台中设置安全组规则，开放 22 端口，允许 SSH 连接。</li><li>您可以使用 XShell 等工具，输入阿里云服务器的 IP 地址，用户名，密码，进行 SSH 连接。</li><li>也可以在本地电脑上生成 SSH 公钥，并将其添加到阿里云服务器的 ~/.ssh/authorized_keys 文件中，实现免密登录</li></ul><h3 id="四、手动部署" tabindex="-1">四、手动部署 <a class="header-anchor" href="#四、手动部署" aria-label="Permalink to &quot;四、手动部署&quot;">​</a></h3><ul><li>如果不想使用自动部署，也可以手动部署项目，需要在本地电脑上使用 git push 命令，将代码推送到 GitHub 仓库。</li><li>然后，需要在阿里云服务器上使用 git pull 命令，将代码拉取到服务器的项目目录中。</li><li>可能还需要在服务器上执行一些其他的命令，例如 npm install，npm run build，composer update 等，根据项目需求进行安装依赖，打包构建，更新框架等操作。</li></ul><h3 id="五、自动部署" tabindex="-1">五、自动部署 <a class="header-anchor" href="#五、自动部署" aria-label="Permalink to &quot;五、自动部署&quot;">​</a></h3><ul><li>如果使用了自动部署，只需要在本地电脑上使用 git push 命令，将代码推送到 GitHub 仓库，就可以触发自动部署的流程。</li><li>不需要在阿里云服务器上执行任何命令，服务器会自动接收到 GitHub 的通知，拉取最新的代码，并执行相应的脚本。</li><li>可以在 GitHub 仓库的 Webhooks 页面，查看自动部署的状态，是否成功，是否有错误。</li><li>也可以在服务器上查看 webhook.php 脚本的日志，查看自动部署的细节，是否有异常。</li></ul>`,49)]))}const u=a(p,[["render",o]]);export{B as __pageData,u as default};
