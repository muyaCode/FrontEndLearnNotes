import{_ as a,c as n,o as e,ah as l}from"./chunks/framework.DqD713j2.js";const p="/FrontEndLearnNotes/assets/image-20240415200524101.BoT_CSrq.png",o="/FrontEndLearnNotes/assets/image-20240415200616543.dRiEgqr7.png",r="/FrontEndLearnNotes/assets/image-20240415200825144.NTMrbZKl.png",i="/FrontEndLearnNotes/assets/image-20240415200859619.CqgZGsub.png",c="/FrontEndLearnNotes/assets/image-20240415200930638.CO_tX_7N.png",t="/FrontEndLearnNotes/assets/image-20240415200951659.r57u7aco.png",v=JSON.parse('{"title":"Git 使用简要备忘录","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Git/Git使用简要备忘录.md","filePath":"Document/Git/Git使用简要备忘录.md","lastUpdated":1750954157000}'),d={name:"Document/Git/Git使用简要备忘录.md"};function b(u,s,y,m,g,h){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="git-使用简要备忘录" tabindex="-1">Git 使用简要备忘录 <a class="header-anchor" href="#git-使用简要备忘录" aria-label="Permalink to &quot;Git 使用简要备忘录&quot;">​</a></h1><h2 id="_1-初次运行-git-前的配置" tabindex="-1">1. 初次运行 Git 前的配置 <a class="header-anchor" href="#_1-初次运行-git-前的配置" aria-label="Permalink to &quot;1. 初次运行 Git 前的配置&quot;">​</a></h2><p>Step1：配置用户信息。鼠标右键单击打开<code>Git Bash</code>，初次使用 Git 首先须设置你的用户名（例如：me）和邮件地址（例如：muyaCode@163.com）。（<code>--global</code>意味着你的用户名和邮件地址信息为全局信息，之后无论你在该系统上做任何事情， Git 都会使用那些信息。）</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> config</span><span style="color:#D19A66;"> --global</span><span style="color:#98C379;"> user.name</span><span style="color:#98C379;"> &quot;me&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> config</span><span style="color:#D19A66;"> --global</span><span style="color:#98C379;"> user.email</span><span style="color:#98C379;"> muyaCode@163.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Step2：检查配置信息。设置好用户名和邮件地址后，可以用下列命令查看配置的信息。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> config</span><span style="color:#D19A66;"> --list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_2-获取-git-本地仓库" tabindex="-1">2. 获取 Git 本地仓库 <a class="header-anchor" href="#_2-获取-git-本地仓库" aria-label="Permalink to &quot;2. 获取 Git 本地仓库&quot;">​</a></h2><h3 id="情景一-自己新建一个项目-以-win10-系统为例" tabindex="-1">情景一：自己新建一个项目（以 Win10 系统为例） <a class="header-anchor" href="#情景一-自己新建一个项目-以-win10-系统为例" aria-label="Permalink to &quot;情景一：自己新建一个项目（以 Win10 系统为例）&quot;">​</a></h3><p>Step1：初始化本地仓库。初始化仓库后，当前工作目录下会有一个 .git 文件。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> D:</span><span style="color:#56B6C2;">\\M</span><span style="color:#98C379;">yProject</span><span style="color:#56B6C2;">\\G</span><span style="color:#98C379;">itStudy</span><span style="color:#7F848E;font-style:italic;">  #选择工作目录；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> init</span><span style="color:#7F848E;font-style:italic;">                  #初始化仓库；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Step2：添加项目文件。例如，可以在初始化好的空的本地仓库创建一个<code>README.md</code>文件，再加入一个 bin 目录和一个 src 目录。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;# GitStudy&quot;</span><span style="color:#ABB2BF;"> &gt;&gt; </span><span style="color:#98C379;">README.md</span><span style="color:#7F848E;font-style:italic;">        #创建一个\`README.md\`文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#D19A66;"> --all</span><span style="color:#7F848E;font-style:italic;">                         #将创建好的文件添加到暂存区，并跟踪(track)这些文件；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &#39;initial version&#39;</span><span style="color:#7F848E;font-style:italic;">       #将暂存区的文件提交到本地仓库，并备注：&#39;initial version&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+p+`" alt="image-20240415200524101"></p><h3 id="情景二-为某个项目贡献自己的一份力-以-win10-系统为例" tabindex="-1">情景二：为某个项目贡献自己的一份力（以 Win10 系统为例） <a class="header-anchor" href="#情景二-为某个项目贡献自己的一份力-以-win10-系统为例" aria-label="Permalink to &quot;情景二：为某个项目贡献自己的一份力（以 Win10 系统为例）&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#将用户&#39;TheAlgorithms&#39;的&#39;Python&#39;远程库的项目克隆到本地仓库，并将该项目自定义为&#39;myPython&#39;；</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> clone</span><span style="color:#98C379;"> https://github.com/muyaCode/Python.git</span><span style="color:#98C379;"> myPython</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Git 支持多种数据传输协议。 上面的例子使用的是 <code>https</code>协议，不过你也可以使用 SSH 传输协议，SSH 协议的格式为： user@server:path/to/repo.git 。</p><h2 id="_3-记录每次更新到仓库" tabindex="-1">3. 记录每次更新到仓库 <a class="header-anchor" href="#_3-记录每次更新到仓库" aria-label="Permalink to &quot;3. 记录每次更新到仓库&quot;">​</a></h2><p>添加文件。假设添加了一个名为<code>hello.cpp</code>的文件到项目中的<code>src</code>分目录下，则通过以下操作将新增内容更新到仓库。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> src/hello.cpp</span><span style="color:#7F848E;font-style:italic;"> #将该\`hello.cpp\`文件添加到暂存区，并跟踪(track)该文件；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> status</span><span style="color:#7F848E;font-style:italic;">            #查看当前已暂存且待提交的文件和还未暂存(untracked)的文件;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &#39;version 1.0.0: Add hello.cpp&#39;</span><span style="color:#7F848E;font-style:italic;">  #提交至本地库，并加备注；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>移除文件。如果想移除上述添加的<code>hello.cpp</code>文件，则通过以下操作将新增内容更新到仓库。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">rm</span><span style="color:#98C379;"> src/hello.cpp</span><span style="color:#7F848E;font-style:italic;">        #先删除该文件；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> rm</span><span style="color:#98C379;"> src/hello.cpp</span><span style="color:#7F848E;font-style:italic;">    #再删除该文件在本地库的记录，不让Git继续对其跟踪；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_4-查看提交记录和撤销操作" tabindex="-1">4. 查看提交记录和撤销操作 <a class="header-anchor" href="#_4-查看提交记录和撤销操作" aria-label="Permalink to &quot;4. 查看提交记录和撤销操作&quot;">​</a></h2><p>可以使用<code>git log</code>命令和<code>git reflog</code>查看提交历史。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">me@LAPTOP-0EQDNUEB</span><span style="color:#98C379;"> MINGW64</span><span style="color:#98C379;"> /d/MyProject/GitStudy</span><span style="color:#ABB2BF;"> (main)</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span></span>
<span class="line"><span style="color:#61AFEF;">commit</span><span style="color:#98C379;"> d1b5ad37d697cd4906af1646fb52d4de16124c52</span><span style="color:#ABB2BF;"> (HEAD -&gt; </span><span style="color:#98C379;">main</span><span style="color:#ABB2BF;">)　#最近一次提交的commit id；</span></span>
<span class="line"><span style="color:#61AFEF;">Author:</span><span style="color:#98C379;"> Me</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">1572952478@qq.co</span><span style="color:#ABB2BF;">m&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">Date:</span><span style="color:#98C379;">   Sun</span><span style="color:#98C379;"> Oct</span><span style="color:#D19A66;"> 18</span><span style="color:#98C379;"> 10:04:59</span><span style="color:#D19A66;"> 2020</span><span style="color:#98C379;"> +0800</span></span>
<span class="line"><span style="color:#61AFEF;">version</span><span style="color:#98C379;"> 1.0.0:</span><span style="color:#98C379;"> Add</span><span style="color:#98C379;"> hello.cpp　　　　　　　　　　#最近一次提交的提交备注；</span></span>
<span class="line"><span style="color:#61AFEF;">commit</span><span style="color:#98C379;"> 63a0bb0caaf03715455f93542ef2cad6d7bd5d79　#上一次提交的commit</span><span style="color:#98C379;"> id；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">Author:</span><span style="color:#98C379;"> Me</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">1572952478@qq.co</span><span style="color:#ABB2BF;">m&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">Date:</span><span style="color:#98C379;">   Sun</span><span style="color:#98C379;"> Oct</span><span style="color:#D19A66;"> 18</span><span style="color:#98C379;"> 10:00:10</span><span style="color:#D19A66;"> 2020</span><span style="color:#98C379;"> +0800</span></span>
<span class="line"><span style="color:#61AFEF;">initial</span><span style="color:#98C379;"> version　　　　　　　　#上一次提交的提交备注；</span></span>
<span class="line"><span style="color:#61AFEF;">me@LAPTOP-0EQDNUEB</span><span style="color:#98C379;"> MINGW64</span><span style="color:#98C379;"> /d/MyProject/GitStudy</span><span style="color:#ABB2BF;"> (main)</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reflog</span></span>
<span class="line"><span style="color:#61AFEF;">d1b5ad3</span><span style="color:#ABB2BF;"> (HEAD -&gt; </span><span style="color:#98C379;">main</span><span style="color:#ABB2BF;">) HEAD@{</span><span style="color:#61AFEF;">0}:</span><span style="color:#98C379;"> commit:</span><span style="color:#98C379;"> version</span><span style="color:#98C379;"> 1.0.0:</span><span style="color:#98C379;"> Add</span><span style="color:#98C379;"> hello.cpp</span></span>
<span class="line"><span style="color:#61AFEF;">63a0bb0</span><span style="color:#98C379;"> HEAD@{</span><span style="color:#D19A66;">1</span><span style="color:#98C379;">}:</span><span style="color:#98C379;"> commit</span><span style="color:#ABB2BF;"> (initial): initial version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>可以通过<code>git reset</code>命令撤销对文件的修改。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#98C379;"> HEAD^</span><span style="color:#7F848E;font-style:italic;">       #回退到上一个版本；</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#98C379;"> 63a0bb0</span><span style="color:#7F848E;font-style:italic;">     #也可以回退到指定版本，例如：回退到commit ID为63a0bb0开头的这个版本；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_5-使用远程仓库-以-github-为例" tabindex="-1">5.使用远程仓库（以 GitHub 为例） <a class="header-anchor" href="#_5-使用远程仓库-以-github-为例" aria-label="Permalink to &quot;5.使用远程仓库（以 GitHub 为例）&quot;">​</a></h2><p>远程仓库可以是自己搭建的服务器，也可以是<code>GitHub</code>或<code>Gitee</code>等远程库，这里以<code>GitHub</code>为例。</p><p>首先在 GitHub 上注册并登录自己的账户，新建一个 Repository。</p><p><img src="`+o+`" alt="image-20240415200616543"></p><p>添加远程仓库（以 <a href="https://github.com/muyaCode/GitStudy.git" target="_blank" rel="noreferrer">https://github.com/muyaCode/GitStudy.git</a> 为例）并命名为 origin 。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> remote</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> https://github.com/muyaCode/GitStudy.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>重命名当前分支为<code>main</code>。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -M</span><span style="color:#98C379;"> main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将当前(<code>main</code>)分支上的内容上传到刚刚添加的<code>origin</code>远程库。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#D19A66;"> -u</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者也可以这样，上传到远程库的指定分支：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> main:mybranch　　#将本地main分支的内容上传到origin远程库的mybranch分支；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看当前已添加的远程库（库名称和对应的 URL）。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> remote</span><span style="color:#D19A66;"> -v</span></span>
<span class="line"><span style="color:#61AFEF;">origin</span><span style="color:#98C379;">  https://github.com/muyaCode/GitStudy.git</span><span style="color:#ABB2BF;"> (fetch)</span></span>
<span class="line"><span style="color:#61AFEF;">origin</span><span style="color:#98C379;">  https://github.com/muyaCode/GitStudy.git</span><span style="color:#ABB2BF;"> (push)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>从<code>origin</code>远程库拉取该远程库有但你的本地库没有的内容。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> fetch</span><span style="color:#98C379;"> origin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>也可以这样，从远程库 origin 拉取并合并你的本地库没有的内容：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> pull</span><span style="color:#98C379;"> origin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>移除<code>origin</code>远程库。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> remote</span><span style="color:#98C379;"> remove</span><span style="color:#98C379;"> origin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_6-git-分支" tabindex="-1">6.Git 分支 <a class="header-anchor" href="#_6-git-分支" aria-label="Permalink to &quot;6.Git 分支&quot;">​</a></h2><p>在开发一个项目时，开发人员可通过创建分支的方式在该分支上<strong>实现某个新功能</strong>或<strong>修复某个问题</strong>，在该分支上完成任务后再将成果合并到主分支上。</p><p>新建分支，并命名该分支为：<code>mybranch</code>。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#98C379;"> mybranch</span><span style="color:#7F848E;font-style:italic;">       #创建mybranch分支；</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> mybranch</span><span style="color:#7F848E;font-style:italic;">     #切换到mybranch分支；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>也可采用下面这种形式。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#D19A66;"> -b</span><span style="color:#98C379;"> mybranch</span><span style="color:#7F848E;font-style:italic;">  #创建并切换到mybranch分支；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在<code>mybranch</code>分支完成任务后，该分支的内容合并到主分支（即 main 分支）。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> main</span><span style="color:#7F848E;font-style:italic;">     #切换到main分支；</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> merge</span><span style="color:#98C379;"> mybranch</span><span style="color:#7F848E;font-style:italic;">    #将mybranch分支的内容合并到当前分支；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最后可删除<code>mybranch</code>分支。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -d</span><span style="color:#98C379;"> mybranch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 rebase 命令将其他分支的内容合并到主分支上来</p><p>例如：假设当前分支结构如下（main 分支为主分支，mybranch 分支为其他分支）：</p><p><img src="`+r+`" alt="image-20240415200825144"></p><p>现在要将 mybranch 分支的内容合并到 main 分支上来，先使用 rebase 命令进行变基操作，再使用 merge 命令进行快速合并，可以使提交日志显得简洁清晰：</p><p>Step1：使用 rebase 命令将 mybranch 分支的当前版本的父节点变成 main 分支的头节点</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> rebase</span><span style="color:#98C379;"> main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Step2：使用 merge 命令将 mybranch 分支合并到 main 分支</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> main</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> merge</span><span style="color:#98C379;"> mybranch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+i+'" alt="image-20240415200859619"></p><p>（PS：合并时产生了冲突，由于冲突内容位于同一个文件的同一处代码，所以只能进行取舍后再合并，最后合并成功）</p><p><img src="'+c+'" alt="image-20240415200930638"></p><p>冲突内容如下：</p><p><img src="'+t+`" alt="image-20240415200951659"></p><h2 id="_7-几种使用-git-的项目开发工作流程" tabindex="-1">7. 几种使用 Git 的项目开发工作流程 <a class="header-anchor" href="#_7-几种使用-git-的项目开发工作流程" aria-label="Permalink to &quot;7. 几种使用 Git 的项目开发工作流程&quot;">​</a></h2><h3 id="情景一-集中式工作流" tabindex="-1">情景一：集中式工作流 <a class="header-anchor" href="#情景一-集中式工作流" aria-label="Permalink to &quot;情景一：集中式工作流&quot;">​</a></h3><p>多名开发者从中心仓库克隆代码下来，并同时作一些修改。工作完成后，除了第一个开发者可以顺利提交外，其他后边提交的开发者都必须将前一个提交的开发者的工作与自己的工作合并后，才能完成提交。</p><p>或者各自开发者在自己本地创建自己独立的分支，然后写完代码后，先本地 git pull 远程的代码，然后切到 main 分支，将自己的分支合并到 main，然后提交。</p><h3 id="情景二-集成管理者工作流" tabindex="-1">情景二：集成管理者工作流 <a class="header-anchor" href="#情景二-集成管理者工作流" aria-label="Permalink to &quot;情景二：集成管理者工作流&quot;">​</a></h3><p>例如，在 GitHub 上参与某个开源项目的开发，你先将该开源项目克隆到本地，你的开发工作完成后，可以申请该项目维护者将你的工作成果合并到其维护的开源项目中。工作流程如下：</p><ol><li>项目维护者推送到主仓库。</li><li>贡献者克隆此仓库，做出修改。</li><li>贡献者将数据推送到自己的公开仓库。</li><li>贡献者给维护者发送邮件，请求拉取自己的更新。</li><li>维护者在自己本地的仓库中，将贡献者的仓库加为远程仓库并合并修改。</li><li>维护者将合并后的修改推送到主仓库。</li></ol><h3 id="情景三-主管和副主管工作流" tabindex="-1">情景三：主管和副主管工作流 <a class="header-anchor" href="#情景三-主管和副主管工作流" aria-label="Permalink to &quot;情景三：主管和副主管工作流&quot;">​</a></h3><p>例如，开发一个需要数百人协同参与的超大型项目时，项目设一名主管，根据项目的开发需要，每个开发模块设置一名副主管，每个副主管下属若干名开发者协同完成该模块的开发。工作流程如下：</p><ol><li>普通开发者在自己的主题分支上工作，并根据 <code>main</code> 分支进行变基。 这里是主管推送的参考仓库的 <code>main</code> 分支。</li><li>副主管将普通开发者的主题分支合并到自己的 <code>main</code> 分支中。</li><li>主管将所有副主管的 <code>main</code> 分支并入自己的 <code>main</code> 分支中。</li><li>最后，主管将集成后的 <code>main</code> 分支推送到参考仓库中，以便所有其他开发者以此为基础进行变基。</li></ol><h2 id="总结总结一下" tabindex="-1">总结总结一下： <a class="header-anchor" href="#总结总结一下" aria-label="Permalink to &quot;总结总结一下：&quot;">​</a></h2><ol><li>使用 Git 将自己的项目成果按提交版本依次保存并上传远程库的操作顺序分为：<strong>暂存 git add</strong> -&gt;<strong>提交 git commit</strong> -&gt;<strong>上传 git remote</strong> ；</li><li>从远程库下载一个完整项目到本地采用：<strong>克隆 git clone</strong> ；</li><li>将远程库上有的但你没有的内容合并到本地库采用：<strong>拉取 git fetch</strong> <code>，</code><strong>拉取并合并 git pull</strong> 。</li></ol><ul><li>查看当前分支</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>创建分支</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> checkout</span><span style="color:#D19A66;"> -b</span><span style="color:#98C379;"> 分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>git checkout</code> 命令加上<code>-b</code>参数，表示创建分支并切换，它相当于下面的两个命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> branch</span><span style="color:#98C379;"> dev</span><span style="color:#98C379;">        //创建分支</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> dev</span><span style="color:#98C379;">      //切换到创建的分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="提交" tabindex="-1">提交 <a class="header-anchor" href="#提交" aria-label="Permalink to &quot;提交&quot;">​</a></h3><p>在上面，我们已经创建好了一个分支<code>myBranch</code>，我们一天要写两章小说，当我每写完一章以后，我要将它先存入暂存区，当一天的工作完毕以后，统一将暂存区的代码提交到本地仓库，最后再上传到远程仓库，并且合并</p><ul><li>上传暂存区</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .</span><span style="color:#98C379;">    //将修改的文件全部上传</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> xxx</span><span style="color:#98C379;">    //将xxx文件上传</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>提交到本地仓库</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &#39;提交代码的描述&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>提交到远程仓库的对应分支</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> push</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> xxx</span><span style="color:#98C379;">    //xxx是对应分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>合并分支</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> main</span><span style="color:#98C379;">    //首先切换分支到main</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> merge</span><span style="color:#98C379;"> mybranch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>删除分支</li></ul><p>当你合并完分支以后，<code>mybranch</code>分支就可以删除了</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -d</span><span style="color:#98C379;"> mybranch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="解决冲突" tabindex="-1">解决冲突 <a class="header-anchor" href="#解决冲突" aria-label="Permalink to &quot;解决冲突&quot;">​</a></h3><p>Git 合并分支产生冲突的原因通常是因为两个或多个分支上的相同部分有了不同的修改。这可能是因为以下几个原因：</p><ol><li><strong>并行开发</strong>：团队中的不同成员在不同的分支上同时开发功能或修复 bug。如果他们修改了相同的文件或代码行，就会导致合并冲突。</li><li><strong>分支基于旧版本</strong>：当从一个旧的提交创建分支，然后在原始分支上进行了更改时，可能会导致冲突。这是因为在创建分支后，原始分支可能已经有了新的提交。</li><li><strong>重命名或移动文件</strong>：如果一个分支重命名或移动了一个文件，而另一个分支对同一文件进行了修改，就会导致冲突。</li><li><strong>合并冲突的解决方法不同</strong>：在合并分支时，有时会使用不同的合并策略或解决方法，这可能会导致冲突。</li><li><strong>历史分叉</strong>：如果两个分支的历史分叉很远，可能会存在较大的差异，从而导致合并时出现冲突。</li></ol><p>于是我们需要将冲突解决再重新合并分支，解决冲突也就是查看文件新增了哪些代码，你需要保留哪些代码，把不需要的删去就可以了...</p><p>我们还需养成一个好习惯，就是在开发之前先<code>git pull</code> 一下，更新一下自己本地的代码确保版本是最新的。</p><h3 id="添砖加瓦" tabindex="-1">添砖加瓦 <a class="header-anchor" href="#添砖加瓦" aria-label="Permalink to &quot;添砖加瓦&quot;">​</a></h3><p>如果我已经使用<code>git commit -m &#39;xxx&#39;</code>将代码提交到了本地仓库，但是我后续还想向这个提交中添加文件，那我该怎么办呢？</p><ol><li>首先将你想添加到文件使用<code>git add xxx</code>加入暂存区</li><li>然后运行以下命令：</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> --amend</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这将会打开一个编辑器，让你编辑上一次提交的提交信息。如果你只是想要添加文件而不改变提交信息，你可以直接保存并关闭编辑器。</p><ol><li>Git 将会创建一个新的提交，其中包含之前的提交内容以及你刚刚添加的文件。</li></ol><h3 id="您撤回了一次-push" tabindex="-1">您撤回了一次 push <a class="header-anchor" href="#您撤回了一次-push" aria-label="Permalink to &quot;您撤回了一次 push&quot;">​</a></h3><p>代码推送到远程仓库的 main 上以后，我发现有 bug，挨批是不可避免了，批完还得接着解决...</p><ol><li>撤销最新的提交并保留更改</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> reset</span><span style="color:#98C379;"> HEAD^</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这会将最新的提交从 main 分支中撤销，但会保留更改在工作目录中。你可以修改这些更改，然后重新提交。</p><ol><li>撤销最新的提交并丢弃更改</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> --hard</span><span style="color:#98C379;"> HEAD^</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这会完全撤销最新的提交，并丢弃相关的更改。慎用，因为这将永久丢失你的更改</p><ol><li>创建新的修复提交</li></ol><p>如果你不想删除最新的提交，而是创建一个新的提交来修复问题，可以进行如下操作：</p><ul><li>在 main 分支上创建一个新的分支来进行修复：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> checkout</span><span style="color:#D19A66;"> -b</span><span style="color:#98C379;"> fix-branch</span><span style="color:#98C379;"> main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>在新分支上进行修改，修复代码中的问题。</li><li>提交并推送修复：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &quot;Fixing the issue&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> git</span><span style="color:#98C379;"> push</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> fix-branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="多个-git-账户提交切换" tabindex="-1">多个 Git 账户提交切换 <a class="header-anchor" href="#多个-git-账户提交切换" aria-label="Permalink to &quot;多个 Git 账户提交切换&quot;">​</a></h1><p>原文：<a href="https://garrit.xyz/posts/2023-10-13-organizing-multiple-git-identities" target="_blank" rel="noreferrer">组织多个 Git 标识 |Garrit 的笔记</a></p><p>以下是有关如何管理多个 Git 标识（例如 personal、work、client1、client2）的快速提示。</p><p>我把我的 Git 存储库分为三个级别。我的个人项目位于目录中。我所有的工作项目都住在.这是第一级。<code>~/sources\`\`~/work</code></p><p>级别 2 是客户端，例如 .当然，第 3 级是项目存储库：.<code>~/work/client1\`\`~/work/client1/foo-api</code></p><p>我的工作目录是这样组织的：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>/Users/garrit/work</span></span>
<span class="line"><span>├── client1</span></span>
<span class="line"><span>│   ├── foo-api</span></span>
<span class="line"><span>│   ├── foo-ios</span></span>
<span class="line"><span>│   └── foo-android</span></span>
<span class="line"><span>└── client2</span></span>
<span class="line"><span>    ├── bar-ios</span></span>
<span class="line"><span>    └── bar-middleware</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>现在，假设这要求我们使用与默认工作电子邮件不同的标识进行提交。除此之外，您可能还拥有自己的项目的个人电子邮件地址。你是怎么做到的？<code>client2</code></p><h2 id="gitconfig-包括" tabindex="-1">.gitconfig 包括 <a class="header-anchor" href="#gitconfig-包括" aria-label="Permalink to &quot;.gitconfig 包括&quot;">​</a></h2><p>Git 的全局配置文件是 。如果您曾经设置过这样的参数：这就是它结束的地方。<code>~/.gitconfig\`\`git config user.name &quot;Foo Bar&quot;</code></p><p>.gitconfig 文件的一个很棒的功能是您可以<strong>有条件地包含其他配置文件</strong>，这就是诀窍所在。这是我的文件：<code>~/.gitconfig</code></p><div class="language-ini line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">[user]</span></span>
<span class="line"><span style="color:#C678DD;">    name</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> Garrit Franke</span></span>
<span class="line"><span style="color:#C678DD;">    email</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> garrit@slashdev.space</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">[includeIf &quot;gitdir:~/work/&quot;]</span></span>
<span class="line"><span style="color:#C678DD;">    path</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> ~/.gitconfig-work</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">[includeIf &quot;gitdir:~/work/client2/&quot;]</span></span>
<span class="line"><span style="color:#C678DD;">    path</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> ~/.gitconfig-client2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">[includeIf &quot;gitdir:~/sources/&quot;]</span></span>
<span class="line"><span style="color:#C678DD;">    path</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> ~/.gitconfig-personal</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>默认情况下，我的姓名和电子邮件始终设置为我的个人身份。我还在此处存储了一些其他全局设置，但这些与本文无关。如果存储库位于目录内，则包含一个名为这只是另一个 gitconfig 文件。在我的情况下，这是这样的：<code>~/work\`\`~/.gitconfig-work</code></p><div class="language-ini line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">[user]</span></span>
<span class="line"><span style="color:#C678DD;">    name</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> Garrit Franke</span></span>
<span class="line"><span style="color:#C678DD;">    signingkey</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> 12345678</span></span>
<span class="line"><span style="color:#C678DD;">    email</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> garrit@work.de</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">[commit]</span></span>
<span class="line"><span style="color:#C678DD;">    gpgsign</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>我希望你能明白这是怎么回事。对于每个标识，您保留一个单独的 gitconfig 文件，并将其包含在 main .至关重要的是，这需要您按客户端分组来组织存储库。<code>~/.gitconfig</code></p><p>这个技巧大大简化了我的项目入职。不再有来自客户的“您忘记更新您的电子邮件地址”请求！</p>`,141)]))}const F=a(d,[["render",b]]);export{v as __pageData,F as default};
