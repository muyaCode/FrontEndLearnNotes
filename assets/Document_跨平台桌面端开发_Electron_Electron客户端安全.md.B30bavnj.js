import{_ as l,c as a,o,ah as r}from"./chunks/framework.DqD713j2.js";const s="/FrontEndLearnNotes/assets/%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8.BSWgqY4C.jpg",m=JSON.parse('{"title":"Electron客户端安全","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Electron/Electron客户端安全.md","filePath":"Document/跨平台桌面端开发/Electron/Electron客户端安全.md","lastUpdated":1750954157000}'),t={name:"Document/跨平台桌面端开发/Electron/Electron客户端安全.md"};function n(i,e,c,p,d,u){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="electron客户端安全" tabindex="-1">Electron客户端安全 <a class="header-anchor" href="#electron客户端安全" aria-label="Permalink to &quot;Electron客户端安全&quot;">​</a></h1><p>官网文档：<a href="https://www.electronjs.org/zh/docs/latest/tutorial/security" target="_blank" rel="noreferrer">安全 | Electron (electronjs.org)</a></p><h2 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-label="Permalink to &quot;XSS&quot;">​</a></h2><p>注入XSS</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;"> onerror</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;</span><span style="color:#61AFEF;">alert</span><span style="color:#98C379;">(</span><span style="color:#E5C07B;">XSS</span><span style="color:#98C379;">&#39;</span><span style="color:#FFFFFF;">)</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Electron并不是一个浏览器，XSS在Electron中就会变成 RCE(remote command/code execute) 远程代码执行漏洞</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;"> onerror</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;</span><span style="color:#61AFEF;">require</span><span style="color:#98C379;">(&#39;child_process&#39;).</span><span style="color:#61AFEF;">exec</span><span style="color:#98C379;">(</span><span style="color:#E5C07B;">rce</span><span style="color:#98C379;">.</span><span style="color:#E06C75;">bat</span><span style="color:#98C379;">)&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过这个可以做一些底层操作，从对浏览器的影响，变成了对系统的影响。</p><p>如调取系统的计算器</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;"> onerror</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;</span><span style="color:#61AFEF;">require</span><span style="color:#98C379;">(&#39;child_process&#39;).</span><span style="color:#E06C75;">exec</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="安全编码实践" tabindex="-1">安全编码实践 <a class="header-anchor" href="#安全编码实践" aria-label="Permalink to &quot;安全编码实践&quot;">​</a></h2><ul><li>1.基本Web安全措施(XSS：<a href="https://tech.meituan.com/2018/09/27/fe-security.html" target="_blank" rel="noreferrer">前端安全系列（一）：如何防止XSS攻击？ - 美团技术团队 (meituan.com)</a>)</li><li>2.窗体开启安全选项</li><li>3.Node可执行环境 <ul><li>✔主进程任何时候</li><li>✔渲染进程-本地内容</li><li>✔渲染进程-远程内容 preload阶段</li><li>✖渲染进程-远程内容运行阶段</li></ul></li><li>4.限制连接跳转 <ul><li>✔https可信域</li><li>✔应用本地协议</li><li>✖file://</li></ul></li><li>5.更多请查阅：<a href="https://www.electronjs.org/zh/docs/latest/tutorial/security" target="_blank" rel="noreferrer">安全 | Electron (electronjs.org)</a></li></ul><h2 id="electron可能存在的漏洞" tabindex="-1">Electron可能存在的漏洞 <a class="header-anchor" href="#electron可能存在的漏洞" aria-label="Permalink to &quot;Electron可能存在的漏洞&quot;">​</a></h2><h3 id="漏洞内容-桌面端存在-克隆攻击" tabindex="-1">漏洞内容：桌面端存在“克隆攻击“ <a class="header-anchor" href="#漏洞内容-桌面端存在-克隆攻击" aria-label="Permalink to &quot;漏洞内容：桌面端存在“克隆攻击“&quot;">​</a></h3><p>攻击手段：将 cookie 文件 copy 至其他机器，可直接使用</p><p>场景：</p><ul><li>使用软件加载github网站：<a href="https://github.com/" target="_blank" rel="noreferrer">https://github.com/</a>，登录上github，然后在Mac系统中：<code>~/Library/Application Support/Mercurius/Cookies</code> 目录中，可以看到生成的 Cookies文件，把该文件共享到另一台Mac机器</li><li>然后另一边的机器，把拿到的 Cookies文件也替换到<code>~/Library/Application Support/Mercurius/Cookies</code> 目录中，再次启动应用，会发已经登录上了github账号</li></ul><p>在Chrome上没有这个漏洞，为什么Electron会有</p><p>Electron cookie 没有像 Chrome 加密 issue：chromium的加密存储写在固定keychain，即所有Electron会复写同一个存储</p><h3 id="解决克隆攻击" tabindex="-1">解决克隆攻击 <a class="header-anchor" href="#解决克隆攻击" aria-label="Permalink to &quot;解决克隆攻击&quot;">​</a></h3><h4 id="用户认证信息与设备指纹绑定" tabindex="-1">用户认证信息与设备指纹绑定 <a class="header-anchor" href="#用户认证信息与设备指纹绑定" aria-label="Permalink to &quot;用户认证信息与设备指纹绑定&quot;">​</a></h4><h5 id="_1-启动应用" tabindex="-1">1.启动应用 <a class="header-anchor" href="#_1-启动应用" aria-label="Permalink to &quot;1.启动应用&quot;">​</a></h5><h5 id="_2-生成指纹" tabindex="-1">2.生成指纹 <a class="header-anchor" href="#_2-生成指纹" aria-label="Permalink to &quot;2.生成指纹&quot;">​</a></h5><ul><li>稳定性、唯一性</li><li>设备信息+混淆算法</li><li>建议是原生实现</li></ul><h5 id="_3-服务端校验" tabindex="-1">3.服务端校验 <a class="header-anchor" href="#_3-服务端校验" aria-label="Permalink to &quot;3.服务端校验&quot;">​</a></h5><ul><li>登录时将cookie与指纹绑定</li><li>校验方法：与绑定时指纹比较</li></ul><h2 id="应用安全" tabindex="-1">应用安全 <a class="header-anchor" href="#应用安全" aria-label="Permalink to &quot;应用安全&quot;">​</a></h2><p>APP层面</p><ul><li>Web安全+</li><li>官方安全最佳实践checklist</li><li>应用代码混淆</li></ul><p>NPM层面</p><ul><li>“Left-Pad” “event-stream“ <ul><li>检测工具nsp/snyk</li><li>关注npm官博安全文章：<a href="https://openjsf.org/blog/2023/03/13/node-js-security-progress-report-permission-model-merged/" target="_blank" rel="noreferrer">Node.js Security Progress Report – Permission Model Merged - OpenJS Foundation</a></li><li><a href="https://openjsf.org/blog/2022/12/15/node-js-security-progress-report-looking-forward-to-2023/" target="_blank" rel="noreferrer">Node.js Security Progress Report - Looking Forward to 2023 - OpenJS Foundation</a></li></ul></li></ul><p>Electron Framework层面</p><ul><li>升级最新electron稳定版本</li><li>反馈给官方邮件：security@electronjs.org</li><li>具备构建electron应急能力</li></ul><h2 id="如何保障electron应用安全" tabindex="-1">如何保障Electron应用安全? <a class="header-anchor" href="#如何保障electron应用安全" aria-label="Permalink to &quot;如何保障Electron应用安全?&quot;">​</a></h2><ul><li>威胁来源 <ul><li>用户认证信息泄露</li><li>数据泄露</li><li>应用权限失控</li><li>应用代码问题&amp;漏洞</li></ul></li></ul><p><img src="'+s+'" alt="应用安全"></p>',36)]))}const b=l(t,[["render",n]]);export{m as __pageData,b as default};
