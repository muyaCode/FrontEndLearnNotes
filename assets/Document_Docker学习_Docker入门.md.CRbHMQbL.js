import{_ as l,c as r,o as a,ah as i}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"Docker入门","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Docker学习/Docker入门.md","filePath":"Document/Docker学习/Docker入门.md","lastUpdated":1750954157000}'),o={name:"Document/Docker学习/Docker入门.md"};function t(c,e,s,k,n,d){return a(),r("div",null,e[0]||(e[0]=[i('<h1 id="docker入门" tabindex="-1">Docker入门 <a class="header-anchor" href="#docker入门" aria-label="Permalink to &quot;Docker入门&quot;">​</a></h1><h2 id="相关网址" tabindex="-1">相关网址 <a class="header-anchor" href="#相关网址" aria-label="Permalink to &quot;相关网址&quot;">​</a></h2><p>Docker官网：<a href="https://www.docker.com" target="_blank" rel="noreferrer">https://www.docker.com</a></p><p>docker库：<a href="https://hub.docker" target="_blank" rel="noreferrer">https://hub.docker</a>,com</p><h2 id="docker简介" tabindex="-1">Docker简介 <a class="header-anchor" href="#docker简介" aria-label="Permalink to &quot;Docker简介&quot;">​</a></h2><p>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs (虚拟机) 、bare metal、OpenStack 集群和其他的基础应用平台。</p><p>Docker通常用于如下场景：</p><ul><li>web应用的自动化打包和发布 ;</li><li>自动化测试和持续集成、发布；</li><li>在服务型环境中部署和调整数据库或其他的后台应用；</li><li>从头编译或者扩展现有的OpenShift或Cloud Foundry平台来搭建自己的PaaS环境。</li></ul><h2 id="微服务的核心思想" tabindex="-1">微服务的核心思想 <a class="header-anchor" href="#微服务的核心思想" aria-label="Permalink to &quot;微服务的核心思想&quot;">​</a></h2><h2 id="docker-vs-vm" tabindex="-1">Docker vs VM <a class="header-anchor" href="#docker-vs-vm" aria-label="Permalink to &quot;Docker vs VM&quot;">​</a></h2><p>VM：</p><ul><li>运行在宿主机之上的完整的操作系统</li><li>运行自身操作系统会占用较多的资源</li></ul><p>Docker :</p><ul><li>Docker更加轻量高效</li><li>对系统资源的利用率很高</li><li>比虚拟机技术更为轻便、快捷</li><li>隔离效果不如VM</li></ul><h2 id="docker的相关概念" tabindex="-1">Docker的相关概念 <a class="header-anchor" href="#docker的相关概念" aria-label="Permalink to &quot;Docker的相关概念&quot;">​</a></h2><p>Docker是CS架构，主要有两个概念</p><p>Docker daemon:</p><ul><li>运行在宿主机上</li><li>Docker守护进程</li><li>用户通过Docker client(Docker命令)与Docker daemon交互</li></ul><p>Docker client:</p><ul><li>Docker 命令行工具，是用户使用Docker的主要方式</li><li>Docker client与Docker daemon通信并将结果返回给用户</li><li>Docker client也可以通过socket或者RESTful api访问远程的Docker daemon</li></ul><h2 id="安装与hello-world" tabindex="-1">安装与Hello world <a class="header-anchor" href="#安装与hello-world" aria-label="Permalink to &quot;安装与Hello world&quot;">​</a></h2><h2 id="常用命令与dockerfile" tabindex="-1">常用命令与Dockerfile <a class="header-anchor" href="#常用命令与dockerfile" aria-label="Permalink to &quot;常用命令与Dockerfile&quot;">​</a></h2><p>Dockerfile 概念</p><p>Dockerfile 文件格式</p><p>构建镜像</p><p>镜像标签</p><p>修改容器内容</p><h2 id="docker-hub" tabindex="-1">Docker Hub <a class="header-anchor" href="#docker-hub" aria-label="Permalink to &quot;Docker Hub&quot;">​</a></h2><p>docker库：<a href="https://hub.docker" target="_blank" rel="noreferrer">https://hub.docker</a>,com</p><h2 id="实战-打包一个web服务器" tabindex="-1">实战 :打包一个WEB服务器 <a class="header-anchor" href="#实战-打包一个web服务器" aria-label="Permalink to &quot;实战 :打包一个WEB服务器&quot;">​</a></h2><h2 id="微服务到底是什么" tabindex="-1">微服务到底是什么 <a class="header-anchor" href="#微服务到底是什么" aria-label="Permalink to &quot;微服务到底是什么&quot;">​</a></h2><p>微服务属于架构层面的设计模式</p><p>微服务的设计概念以业务功能为主</p><p>微服务独立提供对应的业务功能</p><p>微服务不拘泥于具体的实现语言</p><p>微服务架构 ~ 模块化开发 + 分布式计算</p><p>微服务一一集成与部署</p><ul><li>持续集成一jekins</li><li>虚拟化一一虚拟机</li><li>容器-Docker</li></ul><h2 id="k8s-kubernetes-入门" tabindex="-1">K8S(Kubernetes)入门 <a class="header-anchor" href="#k8s-kubernetes-入门" aria-label="Permalink to &quot;K8S(Kubernetes)入门&quot;">​</a></h2><p>官网：<a href="https://www.kubernetes.org.cn/k8s" target="_blank" rel="noreferrer">https://www.kubernetes.org.cn/k8s</a></p><h3 id="什么是k8s" tabindex="-1">什么是K8s <a class="header-anchor" href="#什么是k8s" aria-label="Permalink to &quot;什么是K8s&quot;">​</a></h3><ul><li>Kubernetes，因为首尾字母中间有8个字符，所以被简写成 K8s。</li><li>k8s 是底层资源与容器间的一个抽象层，如果和单机架构类比，可以算作是一个分布式时代的 Linux。</li><li>K8s 是 Google 开源的容器集群管理系统。在 Docker 技术的基础上，为容器化的应用提供部署运行、资源调度、服务发现和动态伸缩等一系列完整功能，提高了大规模容器集群管理的便捷性。</li></ul><h3 id="k8s的特点" tabindex="-1">K8S的特点 <a class="header-anchor" href="#k8s的特点" aria-label="Permalink to &quot;K8S的特点&quot;">​</a></h3><p>k8s是一个管理容器的工具，也是管理应用整个生命周期的一个工具应用更新从创建应用，应用的部署，应用提供服务，扩容缩容应用，而且可以做到故障自愈。</p><ul><li>可移植：支持公有云，私有云，混合云</li><li>可扩展：模块化，热插拨，可组合</li><li>自愈：自动替换，自动重启，自动复制，自动扩展</li></ul><h3 id="k8s的管理步骤" tabindex="-1">K8S的管理步骤 <a class="header-anchor" href="#k8s的管理步骤" aria-label="Permalink to &quot;K8S的管理步骤&quot;">​</a></h3><p>在k8s进行管理应用的时候，基本步骤是：</p><ol><li>创建集群</li><li>部署应用</li><li>发布应用</li><li>扩展应用</li><li>更新应用</li></ol><h3 id="k8s的架构结构" tabindex="-1">K8S的架构结构 <a class="header-anchor" href="#k8s的架构结构" aria-label="Permalink to &quot;K8S的架构结构&quot;">​</a></h3><ul><li>生态系统</li><li>接口层</li><li>管理层</li><li>应用层</li><li>核心层</li></ul><h3 id="安装k8s" tabindex="-1">安装K8S <a class="header-anchor" href="#安装k8s" aria-label="Permalink to &quot;安装K8S&quot;">​</a></h3><p>在Linux下安装单机版的集群环境</p><p>以root身份执行以下操作 :</p><p>1、关闭Linux防火墙</p><ul><li>systemctI stop firewalld</li><li>systemctl disable firewalld</li></ul><p>2、安装Kubernetes和依赖组件etcd</p><ul><li>yum install -y etcd kubernetes</li></ul><p>3、修改配置</p><ul><li>Docker配置文件：<code>/etc/sysconfig/docker</code>，<code>OPTIONS=&#39;&#39;--selinux-enabled=false --insecure-registry gcr.io&#39;</code></li><li>Kubernetes apiservce配置文件：<code>/etc/kubernetes/apiserver</code>，把 --admission-control参数中的ServiceAccount删除</li></ul><p>4、按顺序启动所有的服务</p><ul><li>systemctl start etcd</li><li>systemctl start docker</li><li>systemctl start kube-apiserver</li><li>systemctl start kube-controller-manager</li><li>systemctl start kube-scheduler</li><li>systemctl start kubelet</li><li>systemctl start kube-proxy</li></ul>',61)]))}const p=l(o,[["render",t]]);export{u as __pageData,p as default};
