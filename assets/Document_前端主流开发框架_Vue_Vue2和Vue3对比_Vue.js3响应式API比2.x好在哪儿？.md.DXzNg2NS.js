import{_ as e,c as a,o as n,ah as p}from"./chunks/framework.DqD713j2.js";const d=JSON.parse('{"title":"Vue.js3 响应式 API 比 2.x 好在哪儿？","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端主流开发框架/Vue/Vue2和Vue3对比/Vue.js3响应式API比2.x好在哪儿？.md","filePath":"Document/前端主流开发框架/Vue/Vue2和Vue3对比/Vue.js3响应式API比2.x好在哪儿？.md","lastUpdated":1750954157000}'),l={name:"Document/前端主流开发框架/Vue/Vue2和Vue3对比/Vue.js3响应式API比2.x好在哪儿？.md"};function o(r,s,t,c,B,i){return n(),a("div",null,s[0]||(s[0]=[p(`<h1 id="vue-js3-响应式-api-比-2-x-好在哪儿" tabindex="-1">Vue.js3 响应式 API 比 2.x 好在哪儿？ <a class="header-anchor" href="#vue-js3-响应式-api-比-2-x-好在哪儿" aria-label="Permalink to &quot;Vue.js3 响应式 API 比 2.x 好在哪儿？&quot;">​</a></h1><p>参考：<a href="https://mp.weixin.qq.com/s?__biz=MzI3NTM5NDgzOA==&amp;mid=2247493060&amp;idx=2&amp;sn=7a8437e8a51ff84c22e4bdc7f49927aa&amp;chksm=eb07ddbddc7054abcb8f8595d93295ac5c680581d3272e743cba3e7a5b7b4fc2c3448a632ba9&amp;token=431470234&amp;lang=zh_CN#rd" target="_blank" rel="noreferrer">Vue.js 3.0 响应式 API 比 2.x 好在哪儿？ (qq.com)</a></p><p>为什么说 Vue.js 3 的响应式 API 实现和 Vue.js 2.x 相比性能要好，具体好在哪里呢？它又有哪些不足呢？</p><h2 id="响应式实现方式" tabindex="-1">响应式实现方式 <a class="header-anchor" href="#响应式实现方式" aria-label="Permalink to &quot;响应式实现方式&quot;">​</a></h2><p>响应式原理是 Vue.js 的核心思想之一，它的本质是当数据变化后会自动执行某个函数。</p><p>响应式的实现基本都是靠数据劫持，在 Vue.js 2.x 中，是通过 <code>Object.defineProperty</code> API 劫持数据的变化，在数据被访问的时候收集依赖，然后在数据被修改的时候通知依赖更新。</p><p>而到了 Vue.js 3.0，作者使用 <code>Proxy</code> API 来劫持数据，并重写了响应式部分。</p><h2 id="proxy-vs-object-defineproperty" tabindex="-1">Proxy VS Object.defineProperty <a class="header-anchor" href="#proxy-vs-object-defineproperty" aria-label="Permalink to &quot;Proxy VS Object.defineProperty&quot;">​</a></h2><p>那么，<code>Proxy</code> 和 <code>Object.defineProperty</code> 有哪些区别呢？</p><p>从 API 上来看，<code>Proxy</code> 劫持的是整个对象，那么对于对象属性的新增、删除、修改自然都可以劫持到；而<code>Object.defineProperty</code> API 劫持的对象某一个属性的访问和修改，因此它不能监听对象属性新增和删除。</p><p>从兼容性上来看，<code>Object.defineProperty</code> 支持所有主流浏览器，并兼容 IE9+，而 <code>Proxy</code> 支持现代主流浏览器，但唯独不支持 IE，在国内 PC 端还没有完全放弃 IE 的大环境下，导致 Vue.js 3.0 的普及受到限制。</p><p>从性能上看，<code>Proxy</code> 比 <code>Object.defineProperty</code> 要慢。没错，是慢喔，为了测试它们的性能差异，我特地写了一个测试 demo，放在了 GitHub 上 <a href="https://github.com/ustbhuangyi/Proxy-vs-DefineProperty%EF%BC%8C%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E5%90%8C%E5%AD%A6%E5%8F%AF%E4%BB%A5" target="_blank" rel="noreferrer">https://github.com/ustbhuangyi/Proxy-vs-DefineProperty，感兴趣的同学可以</a> clone 下来跑一下。</p><h2 id="性能差异" tabindex="-1">性能差异 <a class="header-anchor" href="#性能差异" aria-label="Permalink to &quot;性能差异&quot;">​</a></h2><p>既然 <code>Proxy</code> 比 <code>Object.defineProperty</code> 慢，那么为何说 Vue.js 3.0 的响应式 API 实现和 Vue.js 2.x 相比性能要好呢？</p><p>其实这个性能好主要体现在初始化阶段。Vue.js 2.x 内部把某个对象变成响应式的时候，如果遇到对象的某个属性的值仍然是对象的时候，会递归把子对象也变成响应式。</p><p>到了 Vue.js 3.0，并不会在初始阶段递归响应式，而是在对象属性被访问的时候才递归执行下一步 <code>reactive</code>，这其实是一种延时定义子对象响应式的实现，在性能上会有较大的提升。</p><p>说到延时响应式，那么 Vue.js 2.x 也可以这么做吗，其实也是可以的，我对 Vue.js 2.x 的响应式源码部分做了修改，如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">	enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reactiveGetter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> getter</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> getter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> childOb</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">shallow</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Dep</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">childOb</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				childOb</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dep</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">depend</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#61AFEF;">					dependArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>改动很简单，就是把递归的 <code>observe</code> 放在了 <code>getter</code> 中执行。</p><p>改完后我跑了一下 Vue.js 的单元测试，发现只有几个测试没通过，但没通过的测试用例是因为我们改动的逻辑影响了这些测试用例原本的含义，但实际上并无本质的影响，因此在 Vue.js 2.x 中，把递归响应式的逻辑放在 <code>getter</code> 中也是可行的。</p><p>到这里你可能会问，如果延时响应式，那会不会每次访问数据的时候都要重新定义一次响应式呢，其实是不用的，在 Vue.js 2.x 中，在执行一次 <code>observe</code> 后，会把观察者对象 <code>ob</code> 保留在 <code>value.__ob__</code> 属性中；而在 Vue.js 3.0 中，会用 <code>reactiveMap</code> 保留已定义的响应式对象，这样下一次就直接从缓存里拿到对应的值了，这就是典型的空间换时间的思想。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>所以就响应式的实现而言，Vue.js 3.0 比 Vue.js 2.x 在性能上的优势主要体现在初始化阶段，不需要递归把子对象定义成响应式。</p><p>而 <code>Proxy</code> 本身并不比 <code>Object.defineProperty</code> 快，好处是在于可以直接对整个对象劫持，包括对象属性的新增和删除，劣势就是浏览器的兼容性不够好，而且没有合适的 polyfill。</p><p>我出这个题主要是希望你能做到以下两点：</p><ol><li>从源码层面探索，了解 Vue.js 响应式的实现原理。</li><li>对比 Vue.js 2.x 和 Vue.js 3.0 在响应式实现上的差异。</li></ol><p>要记住，分析和思考的过程远比答案重要。</p>`,27)]))}const u=e(l,[["render",o]]);export{d as __pageData,u as default};
