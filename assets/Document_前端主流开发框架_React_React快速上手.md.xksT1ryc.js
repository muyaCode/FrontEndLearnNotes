import{_ as p,c as o,o as e,ah as a,j as s,t as l}from"./chunks/framework.DqD713j2.js";const t="/FrontEndLearnNotes/assets/redux%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.lSa9VPU_.jpg",C=JSON.parse('{"title":"React 快速上手","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端主流开发框架/React/React快速上手.md","filePath":"Document/前端主流开发框架/React/React快速上手.md","lastUpdated":1750954157000}'),r={name:"Document/前端主流开发框架/React/React快速上手.md"};function c(B,n,i,y,u,b){return e(),o("div",null,[n[3]||(n[3]=a(`<h1 id="react-快速上手" tabindex="-1">React 快速上手 <a class="header-anchor" href="#react-快速上手" aria-label="Permalink to &quot;React 快速上手&quot;">​</a></h1><p>编程之家 React 教程：<a href="https://www.jb51.cc/react-tutorial/" target="_blank" rel="noreferrer">https://www.jb51.cc/react-tutorial/</a></p><p>菜鸟教程：<a href="https://www.runoob.com/react/react-tutorial.html" target="_blank" rel="noreferrer">React 教程 | 菜鸟教程 (runoob.com)</a></p><p>React 中文网：</p><ul><li><a href="https://react.zcopy.site/" target="_blank" rel="noreferrer">React 中文网 - 用于构建用户界面的 JavaScript 库 (zcopy.site)</a></li><li><a href="https://react.bootcss.com/learn/thinking-in-react" target="_blank" rel="noreferrer">React 编程思想 | React 中文文档 | React 中文网 (bootcss.com)</a></li><li><a href="https://react.bootcss.com/" target="_blank" rel="noreferrer">React 中文文档（Beta 版） | React 中文文档 | React 中文网 (bootcss.com)</a></li></ul><p><strong>React 官网</strong>：<a href="https://react.dev/" target="_blank" rel="noreferrer">React</a></p><p><strong>GitHub 开源地址</strong>：<a href="https://github.com/facebook/react/releases" target="_blank" rel="noreferrer">Releases · facebook/react (github.com)</a></p><p><a href="https://juejin.cn/post/7344536653463207973" target="_blank" rel="noreferrer">【长文】只会 Vue 不会 React ？22 点证明 React 比 Vue3 更简单 - 掘金 (juejin.cn)</a></p><h2 id="开源学习项目" tabindex="-1">开源学习项目 <a class="header-anchor" href="#开源学习项目" aria-label="Permalink to &quot;开源学习项目&quot;">​</a></h2><h3 id="《react技术揭秘》开源电子书" tabindex="-1">《React技术揭秘》开源电子书 <a class="header-anchor" href="#《react技术揭秘》开源电子书" aria-label="Permalink to &quot;《React技术揭秘》开源电子书&quot;">​</a></h3><p>《React技术揭秘》电子书地址：<a href="https://react.iamkasong.com/" target="_blank" rel="noreferrer">https://react.iamkasong.com/</a></p><p>从<code>理念</code>到<code>架构</code>，从<code>架构</code>到<code>实现</code>，完全按照<code>自顶向下</code>的模式讲解<code>React</code>源码。</p><p>学懂之后，即使除去<code>前端领域</code>的知识外，你的收获将不限于：</p><ul><li>编程范式：函数式编程的<code>代数效应</code>思想</li><li>操作系统：如何从零实现<code>协程</code>（可以理解为<code>generator</code>）</li><li>数据结构：链表、树、小顶堆</li><li>算法：O(n)的Diff算法、各种位运算</li><li>浏览器运行机制</li></ul><p>前端同学想扩展自己的知识边界，从学习<code>React</code>源码下手是个不错的选择。</p><h2 id="一、react-基础" tabindex="-1">一、React 基础 <a class="header-anchor" href="#一、react-基础" aria-label="Permalink to &quot;一、React 基础&quot;">​</a></h2><h3 id="_1-基本流程" tabindex="-1">1.基本流程 <a class="header-anchor" href="#_1-基本流程" aria-label="Permalink to &quot;1.基本流程&quot;">​</a></h3><ul><li><p>1.发送请求获取数据</p></li><li><p>2.处理数据</p></li><li><p>3.操作 DOM 呈现页面</p></li></ul><h3 id="_1-虚拟-dom-的两种创建方法" tabindex="-1">1.虚拟 DOM 的两种创建方法 <a class="header-anchor" href="#_1-虚拟-dom-的两种创建方法" aria-label="Permalink to &quot;1.虚拟 DOM 的两种创建方法&quot;">​</a></h3><h4 id="_1-使用-jsx-创建虚拟-dom" tabindex="-1">1_使用 jsx 创建虚拟 DOM <a class="header-anchor" href="#_1-使用-jsx-创建虚拟-dom" aria-label="Permalink to &quot;1\\_使用 jsx 创建虚拟 DOM&quot;">​</a></h4><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;1_使用jsx创建虚拟DOM&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 准备好一个“容器” --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 引入react核心库 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;../js/react.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span></span>
<span class="line"><span style="color:#D19A66;">			type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span></span>
<span class="line"><span style="color:#D19A66;">			src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;../js/react-dom.development.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;../js/babel.min.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/babel&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			/* 此处一定要写babel */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//1.创建虚拟DOM</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#61AFEF;"> VDOM</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				/* 此处一定不要写引号，因为不是字符串 */</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;title&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">					&lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;Hello,React&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//2.渲染虚拟DOM到页面</span></span>
<span class="line"><span style="color:#E5C07B;">			ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">VDOM</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h4 id="_2-使用-js-创建虚拟-dom-jsx-编译成的真实方法" tabindex="-1">2_使用 js 创建虚拟 DOM(jsx 编译成的真实方法) <a class="header-anchor" href="#_2-使用-js-创建虚拟-dom-jsx-编译成的真实方法" aria-label="Permalink to &quot;2\\_使用 js 创建虚拟 DOM(jsx 编译成的真实方法)&quot;">​</a></h4><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;2_使用js创建虚拟DOM&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 准备好一个“容器” --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 引入react核心库 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;../js/react.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span></span>
<span class="line"><span style="color:#D19A66;">			type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span></span>
<span class="line"><span style="color:#D19A66;">			src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;../js/react-dom.development.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//1.创建虚拟DOM</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> VDOM</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">				&quot;h1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				{ </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;title&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#E5C07B;">				React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;span&quot;</span><span style="color:#ABB2BF;">, {}, </span><span style="color:#98C379;">&quot;Hello,React&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//2.渲染虚拟DOM到页面</span></span>
<span class="line"><span style="color:#E5C07B;">			ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">VDOM</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h4 id="_3-虚拟-dom-与真实-dom" tabindex="-1">3_虚拟 DOM 与真实 DOM <a class="header-anchor" href="#_3-虚拟-dom-与真实-dom" aria-label="Permalink to &quot;3\\_虚拟 DOM 与真实 DOM&quot;">​</a></h4><p>1.虚拟 DOM 本质是 Object 类型的对象（一般对象）</p><p>2.虚拟 DOM 比较“轻”，真实 DOM 比较“重”，因为虚拟 DOM 是 React 内部在用，无需真实 DOM 上那么多的属性。</p><p>3.虚拟 DOM 最终会被 React 转化为真实 DOM，呈现在页面上。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;3_虚拟DOM与真实DOM&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 准备好一个“容器” --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;demo&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 引入react核心库 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;../js/react.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span></span>
<span class="line"><span style="color:#D19A66;">			type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span></span>
<span class="line"><span style="color:#D19A66;">			src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;../js/react-dom.development.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;../js/babel.min.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/babel&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			/* 此处一定要写babel */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//1.创建虚拟DOM</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#61AFEF;"> VDOM</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				/* 此处一定不要写引号，因为不是字符串 */</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;title&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">					&lt;</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;Hello,React&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//2.渲染虚拟DOM到页面</span></span>
<span class="line"><span style="color:#E5C07B;">			ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">VDOM</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> TDOM</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;demo&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;虚拟DOM&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">VDOM</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;真实DOM&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TDOM</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			debugger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(typeof VDOM);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(VDOM instanceof Object);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			/* </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    关于虚拟DOM：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     1.本质是Object类型的对象（一般对象）</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     2.虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是React内部在用，无需真实DOM上那么多的属性。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     3.虚拟DOM最终会被React转化为真实DOM，呈现在页面上。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h3 id="_2-jsx-的语法规则" tabindex="-1">2.jsx 的语法规则 <a class="header-anchor" href="#_2-jsx-的语法规则" aria-label="Permalink to &quot;2.jsx 的语法规则&quot;">​</a></h3><ul><li><p>1.全称：JavaScript XML</p></li><li><p>2.react 定义的一种类似于 XML 的 JS 扩展语法：JS + XML 本质是 React.createElement(component, props, ...children)方法的语法糖</p></li><li><p>3.作用：</p><ul><li>1)写法：<code>var ele = &lt;h1&gt;Hello JSX!&lt;/h1&gt;</code></li><li>2)注意 1：它不是字符串, 也不是 HTML/XML 标签</li><li>3)注意 2：它最终产生的就是一个 JS 对象</li></ul></li><li><p>4.任意标签名：(HTML 标签) 或其它标签</p></li><li><p>5.任意标签属性：(HTML 标签属性) 或其它</p></li><li><p>6.基本语法规则：</p><ul><li><p>1.定义虚拟 DOM 时，不要写引号。</p></li><li><p>2.标签中混入 JS 表达式时要用{}。</p></li><li><p>3.样式的类名指定不要用 <code>class</code>，要用 className。</p></li><li><p>4.内联样式，要用以下 的形式去写：</p><ul><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">style</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{{</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>5.只有一个根标签</p></li><li><p>6.标签必须闭合</p></li><li><p>7.标签首字母</p><ul><li>(1).若小写字母开头，则将该标签转为 html 中同名元素，若 html 中无该标签对应的同名元素，则报错。</li><li>(2).若大写字母开头，react 就去渲染对应的组件，若组件没有定义，则报错。</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myId</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;aTgUiGu&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myData</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;HeLlo,rEaCt&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//1.创建虚拟DOM</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> VDOM</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#D19A66;font-style:italic;"> className</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;title&quot;</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">myId</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">span</span><span style="color:#D19A66;font-style:italic;"> style</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;white&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fontSize</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;29px&quot;</span><span style="color:#ABB2BF;"> }</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#E5C07B;">myData</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#D19A66;font-style:italic;"> className</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;title&quot;</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">myId</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">span</span><span style="color:#D19A66;font-style:italic;"> style</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;white&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fontSize</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;29px&quot;</span><span style="color:#ABB2BF;"> }</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#E5C07B;">myData</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//2.渲染虚拟DOM到页面</span></span>
<span class="line"><span style="color:#E5C07B;">ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">VDOM</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>7.babel.js 的作用 <ul><li>1)浏览器不能直接解析 JSX 代码, 需要 babel 转译为纯 JS 的代码才能运行</li><li>2)只要用了 JSX，都要加上 type=&quot;text/babel&quot;, 声明需要 babel 来处理</li></ul></li></ul><h3 id="_3-模块与组件" tabindex="-1">3.模块与组件 <a class="header-anchor" href="#_3-模块与组件" aria-label="Permalink to &quot;3.模块与组件&quot;">​</a></h3><h4 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h4><h5 id="函数式组件" tabindex="-1">函数式组件 <a class="header-anchor" href="#函数式组件" aria-label="Permalink to &quot;函数式组件&quot;">​</a></h5><p>1.创建函数式组件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//1.创建函数式组件</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> MyComponent</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//此处的this是undefined，因为babel编译后开启了严格模式</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;我是用函数定义的组件(适用于【简单组件】的定义)&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>2.渲染组件到页面(组件必须首字母大写)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(&lt;</span><span style="color:#E5C07B;">MyComponent</span><span style="color:#ABB2BF;"> /&gt;, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// 组件标签必须闭合</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="类式组件" tabindex="-1">类式组件 <a class="header-anchor" href="#类式组件" aria-label="Permalink to &quot;类式组件&quot;">​</a></h5><p>1.创建类式组件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//1.创建类式组件：React.Component</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> MyComponent</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//render是放在哪里的？—— MyComponent的原型对象上，供实例使用。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//render中的this是谁？—— MyComponent的实例对象 &lt;=&gt; MyComponent组件实例对象。</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;render中的this:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;我是用类定义的组件(适用于【复杂组件】的定义)&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>2.渲染组件到页面</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//2.渲染组件到页面</span></span>
<span class="line"><span style="color:#E5C07B;">ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(&lt;</span><span style="color:#E5C07B;">MyComponent</span><span style="color:#ABB2BF;"> /&gt;, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// 组件标签必须闭合</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h6 id="类方法中的-this-指向" tabindex="-1">类方法中的 this 指向 <a class="header-anchor" href="#类方法中的-this-指向" aria-label="Permalink to &quot;类方法中的 this 指向&quot;">​</a></h6><p>解决类中 this 指向问题：.bind(this)</p><h4 id="组件事件绑定的属性" tabindex="-1">组件事件绑定的属性 <a class="header-anchor" href="#组件事件绑定的属性" aria-label="Permalink to &quot;组件事件绑定的属性&quot;">​</a></h4><p>state</p><p>class Person extends React.Component{} 类里面</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">状态</span></span>
<span class="line"><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">设置组件</span></span>
<span class="line"><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  )</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">setState改变页面状态</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">isHot</span><span style="color:#ABB2BF;">:</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isHot</span><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 准备好一个</span><span style="color:#ABB2BF;">“</span><span style="color:#E06C75;">容器</span><span style="color:#ABB2BF;">” </span><span style="color:#56B6C2;">--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入react核心库</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/react.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入react</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">dom</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于支持react操作DOM</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/react-dom.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入babel</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于将jsx转为js</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/babel.min.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/babel&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    // 1.创建组件</span></span>
<span class="line"><span style="color:#ABB2BF;">    class Weather extends React.Component</span><span style="color:#C678DD;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 构造器调用几次？ ———— 1次</span></span>
<span class="line"><span style="color:#61AFEF;">        constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">            console.log(</span><span style="color:#98C379;">&#39;constructor&#39;</span><span style="color:#E06C75;">);</span></span>
<span class="line"><span style="color:#E06C75;">            super(props)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 初始化状态</span></span>
<span class="line"><span style="color:#E06C75;">            this.state = {isHot</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">wind</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;微风&#39;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 解决changeWeather中this指向问题</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">changeWeather</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">changeWeather</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        // render调用几次？ ———— 1+n次 1是初始化的那次 n是状态更新的次数</span></span>
<span class="line"><span style="color:#ABB2BF;">        render()</span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;render&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 读取状态</span></span>
<span class="line"><span style="color:#E06C75;">            const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">isHot</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">wind</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span></span>
<span class="line"><span style="color:#E06C75;">            return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">changeWeather</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;今天天气很</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">isHot</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &#39;炎热&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &#39;凉爽&#39;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">，</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">wind</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        // changeWeather调用几次？ ———— 点几次调几次</span></span>
<span class="line"><span style="color:#ABB2BF;">        changeWeather()</span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // changeWeather放在哪里？ ———— Weather的原型对象上，供实例使用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 由于changeWeather是作为onClick的回调，所以不是通过实例调用的，是直接调用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 类中的方法默认开启了局部的严格模式，所以changeWeather中的this为undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;changeWeather&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 获取原来的isHot值</span></span>
<span class="line"><span style="color:#E06C75;">            const</span><span style="color:#E06C75;"> isHot</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isHot</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 严重注意：状态必须通过setState进行更新,且更新是一种合并，不是替换。</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">isHot</span><span style="color:#ABB2BF;">:</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isHot</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 严重注意：状态(state)不可直接更改，下面这行就是直接更改！！！</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // this.state.isHot = !isHot</span><span style="color:#7F848E;font-style:italic;"> //这是错误的写法</span></span>
<span class="line"><span style="color:#C678DD;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    // 2.渲染组件到页面</span></span>
<span class="line"><span style="color:#ABB2BF;">    ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Weather</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><p>简写代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 准备好一个</span><span style="color:#ABB2BF;">“</span><span style="color:#E06C75;">容器</span><span style="color:#ABB2BF;">” </span><span style="color:#56B6C2;">--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入react核心库</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/react.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入react</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">dom</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于支持react操作DOM</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/react-dom.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入babel</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于将jsx转为js</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/babel.min.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/babel&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    // 1.创建组件</span></span>
<span class="line"><span style="color:#ABB2BF;">    class Weather extends React.Component</span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 初始化状态</span></span>
<span class="line"><span style="color:#E06C75;">        state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">isHot</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">wind</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;微风&#39;</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">        render</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">            const {</span><span style="color:#E06C75;">isHot</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">wind</span><span style="color:#ABB2BF;">} = this.</span><span style="color:#E06C75;">state</span></span>
<span class="line"><span style="color:#ABB2BF;">            return &lt;h1 </span><span style="color:#E06C75;">onClick</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{this.</span><span style="color:#E06C75;">changeWeather</span><span style="color:#ABB2BF;">}</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;">今天天气很</span><span style="color:#ABB2BF;">{isHot ? </span><span style="color:#98C379;">&#39;炎热&#39;</span><span style="color:#ABB2BF;"> : </span><span style="color:#98C379;">&#39;凉爽&#39;</span><span style="color:#ABB2BF;">}，{</span><span style="color:#E06C75;">wind</span><span style="color:#ABB2BF;">}</span><span style="color:#56B6C2;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 自定义方法————要用赋值语句的形式+箭头函数</span></span>
<span class="line"><span style="color:#61AFEF;">        changeWeather</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">            const</span><span style="color:#E5C07B;"> isHot</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isHot</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">isHot</span><span style="color:#ABB2BF;">:</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">isHot</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    // 2.渲染组件到页面</span></span>
<span class="line"><span style="color:#ABB2BF;">    ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Weather</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>props</p><p>基本使用例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 准备好一个</span><span style="color:#ABB2BF;">“</span><span style="color:#E06C75;">容器</span><span style="color:#ABB2BF;">” </span><span style="color:#56B6C2;">--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test1&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test2&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test3&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入react核心库</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/react.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入react</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">dom</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于支持react操作DOM</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/react-dom.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入babel</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于将jsx转为js</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/babel.min.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/babel&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    // 创建组件</span></span>
<span class="line"><span style="color:#ABB2BF;">    class Person extends React.Component</span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#61AFEF;">        render</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // console.log(this);</span></span>
<span class="line"><span style="color:#ABB2BF;">            const {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">} = this.</span><span style="color:#E06C75;">props</span></span>
<span class="line"><span style="color:#61AFEF;">            return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;font-style:italic;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;font-style:italic;">姓名</span><span style="color:#ABB2BF;">：{</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">}&lt;/</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;font-style:italic;">性别</span><span style="color:#ABB2BF;">：{</span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">}&lt;/</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;font-style:italic;">年龄</span><span style="color:#ABB2BF;">：{</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">+1}&lt;/</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;/</span><span style="color:#E06C75;font-style:italic;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                )</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">                // 渲染组件到页面</span></span>
<span class="line"><span style="color:#ABB2BF;">                ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;jerry&quot;</span><span style="color:#D19A66;font-style:italic;"> age</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#D19A66;">19</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;">  sex</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test1&#39;))</span></span>
<span class="line"><span style="color:#ABB2BF;">                ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;tom&quot;</span><span style="color:#D19A66;font-style:italic;"> age</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#D19A66;">18</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> sex</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;女&quot;</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test2&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">                const p = </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;老刘&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;女&#39;</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">                // console.log(&#39;@&#39;,...p);</span></span>
<span class="line"><span style="color:#ABB2BF;">                // ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> age</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> sex</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test3&#39;))</span></span>
<span class="line"><span style="color:#ABB2BF;">                ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#C678DD;"> {</span><span style="color:#ABB2BF;">...</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test3&#39;))</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>对 props 进行限制例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 准备好一个</span><span style="color:#ABB2BF;">“</span><span style="color:#E06C75;">容器</span><span style="color:#ABB2BF;">” </span><span style="color:#56B6C2;">--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test1&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test2&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test3&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入react核心库</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/react.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入react</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">dom</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于支持react操作DOM</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/react-dom.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入babel</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于将jsx转为js</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/babel.min.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入prop</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">types</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于对组件标签属性进行限制</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/prop-types.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/babel&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    // 创建组件</span></span>
<span class="line"><span style="color:#ABB2BF;">    class Person extends React.Component</span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#61AFEF;">        render</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // console.log(this);</span></span>
<span class="line"><span style="color:#ABB2BF;">            const {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">} = this.</span><span style="color:#E06C75;">props</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // props是只读的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // this.props.name = &#39;jack&#39;</span><span style="color:#7F848E;font-style:italic;"> //此行代码会报错，因为props是只读的</span></span>
<span class="line"><span style="color:#61AFEF;">            return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;font-style:italic;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;font-style:italic;">姓名</span><span style="color:#ABB2BF;">：{</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">}&lt;/</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;font-style:italic;">性别</span><span style="color:#ABB2BF;">：{</span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">}&lt;/</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;font-style:italic;">年龄</span><span style="color:#ABB2BF;">：{</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">+1}&lt;/</span><span style="color:#E06C75;font-style:italic;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;/</span><span style="color:#E06C75;font-style:italic;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                )</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#C678DD;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">                // 对标签属性进行类型、必要性的限制</span></span>
<span class="line"><span style="color:#ABB2BF;">                Person.propTypes = </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E06C75;">                    name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRequired</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//限制name必传，且为字符串</span></span>
<span class="line"><span style="color:#E06C75;">                    sex</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">//限制sex为字符串</span></span>
<span class="line"><span style="color:#E06C75;">                    age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">//限制age为数值</span></span>
<span class="line"><span style="color:#E06C75;">                    speak</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">func</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">//限制speak为函数</span></span>
<span class="line"><span style="color:#C678DD;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">                // 指定默认标签属性值</span></span>
<span class="line"><span style="color:#ABB2BF;">                Person.defaultProps = </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E06C75;">                    sex</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;男&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">//sex默认值为男</span></span>
<span class="line"><span style="color:#E06C75;">                    age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">18</span><span style="color:#7F848E;font-style:italic;"> //age默认值为18</span></span>
<span class="line"><span style="color:#C678DD;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">                // 渲染组件到页面</span></span>
<span class="line"><span style="color:#ABB2BF;">                ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#D19A66;">100</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> speak</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">speak</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test1&#39;))</span></span>
<span class="line"><span style="color:#ABB2BF;">                ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;tom&quot;</span><span style="color:#D19A66;font-style:italic;"> age</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#D19A66;">18</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> sex</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;女&quot;</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test2&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">                const p = </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;老刘&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;女&#39;</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">                // console.log(&#39;@&#39;,...p);</span></span>
<span class="line"><span style="color:#ABB2BF;">                // ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> age</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> sex</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test3&#39;))</span></span>
<span class="line"><span style="color:#ABB2BF;">                ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#C678DD;"> {</span><span style="color:#ABB2BF;">...</span><span style="color:#E06C75;">p</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test3&#39;))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">                function speak()</span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E5C07B;">                    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我说话了&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>函数数组使用 props</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 准备好一个</span><span style="color:#ABB2BF;">“</span><span style="color:#E06C75;">容器</span><span style="color:#ABB2BF;">” </span><span style="color:#56B6C2;">--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test1&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test2&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test3&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入react核心库</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/react.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入react</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">dom</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于支持react操作DOM</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/react-dom.development.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入babel</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于将jsx转为js</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/babel.min.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入prop</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">types</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于对组件标签属性进行限制</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/prop-types.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/babel&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    // 创建组件</span></span>
<span class="line"><span style="color:#ABB2BF;">    function Person (props)</span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E06C75;">    const</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> props</span></span>
<span class="line"><span style="color:#61AFEF;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;姓名：</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;性别：</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">sex</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;年龄：</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#C678DD;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        Person.propTypes = </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E06C75;">            name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRequired</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 限制name必传，且为字符串</span></span>
<span class="line"><span style="color:#E06C75;">            sex</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">// 限制sex为字符串</span></span>
<span class="line"><span style="color:#E06C75;">            age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">// 限制age为数值</span></span>
<span class="line"><span style="color:#C678DD;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        // 指定默认标签属性值</span></span>
<span class="line"><span style="color:#ABB2BF;">        Person.defaultProps = </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E06C75;">            sex</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;男&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// sex默认值为男</span></span>
<span class="line"><span style="color:#E06C75;">            age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">18</span><span style="color:#7F848E;font-style:italic;"> // age默认值为18</span></span>
<span class="line"><span style="color:#C678DD;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        // 渲染组件到页面</span></span>
<span class="line"><span style="color:#ABB2BF;">        ReactDOM.render(&lt;</span><span style="color:#E5C07B;">Person</span><span style="color:#D19A66;font-style:italic;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;jerry&quot;</span><span style="color:#ABB2BF;">/&gt;,document.getElementById(&#39;test1&#39;))</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>15.5 版本后需要 限制独立了，需要引入限制的 js 依赖：prop-types.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">&lt;!--</span><span style="color:#E06C75;"> 引入prop</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">types</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">用于对组件标签属性进行限制</span><span style="color:#56B6C2;"> --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;../js/prop-types.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>对标签属性进行类型、必要性的限制</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 对标签属性进行类型、必要性的限制</span></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">propTypes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRequired</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 限制</span></span>
<span class="line"><span style="color:#ABB2BF;">  name必传，</span><span style="color:#E06C75;">且为字符串</span></span>
<span class="line"><span style="color:#E06C75;">  sex</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 限制sex为字符串</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 限制age为数值</span></span>
<span class="line"><span style="color:#E06C75;">  speak</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">func</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 限制speak为函数</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>指定默认标签属性值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 指定默认标签属性值</span></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">defaultProps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// sex默认值为男</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// age默认值为18</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 class 类里面简写 static</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 对标签属性进行类型、必要性的限制</span></span>
<span class="line"><span style="color:#E06C75;">static</span><span style="color:#E06C75;"> propTypes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRequired</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 限制name必传，且为字符串</span></span>
<span class="line"><span style="color:#E06C75;"> sex</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">// 限制sex为字符串</span></span>
<span class="line"><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">// 限制age为数值</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 指定默认标签属性值</span></span>
<span class="line"><span style="color:#E06C75;">static</span><span style="color:#E06C75;"> defaultProps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> sex</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;男&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// sex默认值为男</span></span>
<span class="line"><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">18</span><span style="color:#7F848E;font-style:italic;"> // age默认值为18</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>refs</strong>：</p><p>1.字符串形式的 ref</p><p>不推荐使用，因为有效率问题，官网说后续版本可能移除</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;input1&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.回调形式的 ref</p><p>内联函数：内联函数更新状态下调用两次，第一次为 null；解决上述，使用类绑定函数即可</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">{(c)</span><span style="color:#FFFFFF;">=</span><span style="color:#ABB2BF;">&gt;{this.input1 = c}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>class 类绑定的函数</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">{this.showInput}</span><span style="color:#D19A66;"> 类里面写</span><span style="color:#D19A66;"> showInput</span><span style="color:#ABB2BF;"> = </span><span style="color:#98C379;">()</span><span style="color:#FFFFFF;"> =</span><span style="color:#ABB2BF;">&gt; { }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.createRef 创建 ref 容器</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">myRef</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRef</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;font-style:italic;"> ref</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">myRef</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>事件处理</p><p>(1).通过 onXxx 属性指定事件处理函数(注意大小写)</p><ul><li>a.React 使用的是自定义(合成)事件, 而不是使用的原生 DOM 事件 ——— 为了更好的兼容性</li><li>b.React 中的事件是通过事件委托方式处理的(委托给组件最外层的元素) ———为了的高效</li></ul><p>(2).通过 event.target 得到发生事件的 DOM 元素对象 ———不要过度使用 ref</p><h4 id="非受控组件和受控组件" tabindex="-1">非受控组件和受控组件 <a class="header-anchor" href="#非受控组件和受控组件" aria-label="Permalink to &quot;非受控组件和受控组件&quot;">​</a></h4><p>非受控组件</p><p>受控组件</p><h4 id="通过函数柯里化实现-接收-多个参数-用于表单输入值的接收" tabindex="-1">通过函数柯里化实现 接收 多个参数(用于表单输入值的接收) <a class="header-anchor" href="#通过函数柯里化实现-接收-多个参数-用于表单输入值的接收" aria-label="Permalink to &quot;通过函数柯里化实现 接收 多个参数(用于表单输入值的接收)&quot;">​</a></h4><p>函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。</p><p>函数柯里化例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//创建组件</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Login</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//初始化状态</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//用户名</span></span>
<span class="line"><span style="color:#E06C75;">		password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//密码</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//保存表单数据到状态中</span></span>
<span class="line"><span style="color:#61AFEF;">	saveFormData</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">dataType</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({ [</span><span style="color:#E06C75;">dataType</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//表单提交的回调</span></span>
<span class="line"><span style="color:#61AFEF;">	handleSubmit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//阻止表单提交</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">password</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">		alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`你输入的用户名是：</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">username</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">,你输入的密码是：</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">password</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">form</span><span style="color:#D19A66;font-style:italic;"> onSubmit</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handleSubmit</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				用户名：</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">input</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					onChange</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveFormData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;username&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;username&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">				/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				密码：</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">input</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					onChange</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveFormData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;password&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;password&quot;</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;password&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">				/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;登录&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//渲染组件</span></span>
<span class="line"><span style="color:#E5C07B;">ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(&lt;</span><span style="color:#E5C07B;">Login</span><span style="color:#ABB2BF;"> /&gt;, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>不用柯里化的写法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//创建组件</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Login</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//初始化状态</span></span>
<span class="line"><span style="color:#E06C75;">	state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//用户名</span></span>
<span class="line"><span style="color:#E06C75;">		password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//密码</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//保存表单数据到状态中</span></span>
<span class="line"><span style="color:#61AFEF;">	saveFormData</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">dataType</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({ [</span><span style="color:#E06C75;">dataType</span><span style="color:#ABB2BF;">]: </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//表单提交的回调</span></span>
<span class="line"><span style="color:#61AFEF;">	handleSubmit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">preventDefault</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//阻止表单提交</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">password</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">		alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`你输入的用户名是：</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">username</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">,你输入的密码是：</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">password</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">form</span><span style="color:#D19A66;font-style:italic;"> onSubmit</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handleSubmit</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				用户名：</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">input</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					onChange</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveFormData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;username&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text&quot;</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;username&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">				/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				密码：</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">input</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					onChange</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">saveFormData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;password&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;password&quot;</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">					name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;password&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">				/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;登录&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//渲染组件</span></span>
<span class="line"><span style="color:#E5C07B;">ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(&lt;</span><span style="color:#E5C07B;">Login</span><span style="color:#ABB2BF;"> /&gt;, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="_4-组件的生命周期" tabindex="-1">4.组件的生命周期 <a class="header-anchor" href="#_4-组件的生命周期" aria-label="Permalink to &quot;4.组件的生命周期&quot;">​</a></h3><p><strong>render(){}</strong>：初始化渲染 或 状态更新之后 执行</p><p>componentWillMount(){}：组件 将要被挂载 执行</p><ul><li>版本 16.3 后要写 UNSAFE_前缀，否则会报警告</li><li>版本 17.0 之后，不加前缀的生命周期已被删除</li><li>UNSAFE_componentWillMount(){}</li></ul><p><strong>componentDidMount(){}</strong>：组件 挂载完毕 执行</p><ul><li>用途：开启监听，发送 ajax 请求</li></ul><p>componentWillUnmount(){}</p><ul><li>卸载组件前执行：ReactDOM.unmountComponentAtNode()：卸载组件</li><li>组件 将要卸载 执行</li><li>做一些收尾工作，如清除定时器</li></ul><p>componentWillReceiveProps(props){}：组件将要接收新的 props(第一次 props 不算)</p><ul><li>版本 16.3 后要写 UNSAFE_前缀，否则会报警告；版本 17.0 之后，不加前缀的生命周期已被删除：UNSAFE_componentWillReceiveProps(props){}</li></ul><p>shouldComponentUpdate(){}</p><ul><li>控制组件是否更新的阀门 返回布尔值， (不写默认返回 true) 为真 ：开启执行后面的生命周期，反之则不执行，写了必须 return 布尔值</li></ul><p>componentWillUpdate(){}：组件 将要更新 执行</p><ul><li>版本 16.3 后要写 UNSAFE_前缀，否则会报警告；版本 17.0 之后，不加前缀的生命周期已被删除-----UNSAFE_componentWillUpdate(){}</li></ul><p>componentDidUpdate(){}：组件 更新后 调用</p><p>static getDerivedStateFromProps(props,state){}：新生命周期--得到一个派生的状态</p><ul><li>里面必须 有 return 返回 state 状态对象{} 或 null</li><li>用了这个钩子返回状态对象，状态更新等其他钩子就不可用</li><li>几乎不用，容易造成代码冗余</li></ul><p>getSnapshotBeforeUpdate(preProps,preState){}：新生命周期---更新之前获取快照，记录上一个 props 和 state</p><ul><li>传值给 componentDidUpdate(preProps,preState){}组件更新完毕钩子</li><li>使用场景：定时器 1 秒动态 加载 列表，使固定 定位</li><li>几乎不用</li></ul><p><strong>新的生命周期钩子和旧的生命周期钩子对比</strong> 常用的钩子 render(){}：初始化渲染 或 状态更新之后 执行</p><p>componentDidMount(){}：组件 挂载完毕 执行；开启监听，发送 ajax 请求</p><p>componentWillUnmount(){}：卸载组件前执行---ReactDOM.unmountComponentAtNode()--卸载组件</p><ul><li>组件 将要卸载 执行</li><li>做一些收尾工作，如清除定时器</li></ul><p>旧的生命周期钩子：废弃了上列 三个标蓝的钩子，要使用要加前缀 UNSAFE_ 否则报警告</p><p>新的生命周期钩子：新增了上列 两个标红的钩子</p><p>即将废弃的钩子：</p><p>componentWillMount(){}：组件 将要被挂载 执行</p><ul><li>版本 16.3 后要写 UNSAFE_前缀，否则会报警告</li><li>版本 17.0 之后，不加前缀的生命周期已被删除</li><li>UNSAFE_componentWillMount(){}</li></ul><p>componentWillReceiveProps(props){}：组件将要接收新的 props(第一次 props 不算)</p><ul><li>版本 16.3 后要写 UNSAFE_前缀，否则会报警告</li><li>版本 17.0 之后，不加前缀的生命周期已被删除</li><li>UNSAFE_componentWillReceiveProps(props){}</li></ul><p>componentWillUpdate(){}：组件 将要更新 执行</p><ul><li>版本 16.3 后要写 UNSAFE_前缀，否则会报警告</li><li>版本 17.0 之后，不加前缀的生命周期已被删除</li><li>UNSAFE_componentWillUpdate(){}</li></ul><p>旧 生命周期 的三个阶段</p><p>![旧 生命周期 的三个阶段](.\\img\\旧 生命周期 的三个阶段.jpg)</p><ol><li>初始化阶段: 由 ReactDOM.render()触发---初次渲染 1.constructor() 2.componentWillMount() 3.render() 4.componentDidMount() 初始化的事 开启定时器 发送网络请求 订阅消息</li><li>更新阶段: 由组件内部 this.setSate()或父组件重新 render 触发 1.shouldComponentUpdate() 2.componentWillUpdate() 3.render() 4.componentDidUpdate()</li><li>卸载组件: 由 ReactDOM.unmountComponentAtNode()触发 componentWillUnmount() 收尾的事 关闭定时器 取消订阅消息</li></ol><p>新 生命周期 的三个阶段</p><p>![新 生命周期 的三个阶段](.\\img\\新 生命周期 的三个阶段.jpg)</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#61AFEF;">1.</span><span style="color:#98C379;"> 初始化阶段:</span><span style="color:#98C379;"> 由ReactDOM.render</span><span style="color:#ABB2BF;">()</span><span style="color:#98C379;">触发---初次渲染</span></span>
<span class="line"><span style="color:#61AFEF;">  1.constructor</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">  2.getDerivedStateFromProps</span></span>
<span class="line"><span style="color:#61AFEF;">  3.render</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">  4.componentDidMount</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">2.</span><span style="color:#98C379;"> 更新阶段:</span><span style="color:#98C379;"> 由组件内部this.setSate</span><span style="color:#ABB2BF;">()</span><span style="color:#98C379;">或父组件重新render触发</span></span>
<span class="line"><span style="color:#61AFEF;">  1.getDerivedStateFromProps</span></span>
<span class="line"><span style="color:#61AFEF;">  2.shouldComponentUpdate</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">  3.render</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">  4.getSnapshotBeforeUpdate</span></span>
<span class="line"><span style="color:#61AFEF;">  5.componentDidUpdate</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">3.</span><span style="color:#98C379;"> 卸载组件:</span><span style="color:#98C379;"> 由ReactDOM.unmountComponentAtNode</span><span style="color:#ABB2BF;">()</span><span style="color:#98C379;">触发</span></span>
<span class="line"><span style="color:#61AFEF;">  1.componentWillUnmount</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>演示代码</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> PropTypes</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;prop-types&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">V17废弃的三个生命周期函数用getDerivedStateFromProps替代，目前使用的话加上</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">UNSAFE_：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">- componentWillMount</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">- componentWillReceiveProps</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">- componentWillUpdate</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> LifeCyclePage</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#E06C75;"> defaultProps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;omg&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#E06C75;"> propTypes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		msg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PropTypes</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">isRequired</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;constructor&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#61AFEF;"> getDerivedStateFromProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// getDerivedStateFromProps 会在调用 render 方法之前调用，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 并且在初始挂载及后续更新时都会被调用。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;getDerivedStateFromProps&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 在render之后，在componentDidUpdate之前。</span></span>
<span class="line"><span style="color:#61AFEF;">	getSnapshotBeforeUpdate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">prevProps</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prevState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">snapshot</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> prevState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;getSnapshotBeforeUpdate&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/* UNSAFE_componentWillMount() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 不推荐，将会被废弃</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  console.log(&quot;componentWillMount&quot;, this.state.count);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> } */</span></span>
<span class="line"><span style="color:#61AFEF;">	componentDidMount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;componentDidMount&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	componentWillUnmount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 组件卸载之前</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;componentWillUnmount&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/* UNSAFE_componentWillUpdate() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 不推荐，将会被废弃</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  console.log(&quot;componentWillUpdate&quot;, this.state.count);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> } */</span></span>
<span class="line"><span style="color:#61AFEF;">	componentDidUpdate</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;componentDidUpdate&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	shouldComponentUpdate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">nextProps</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">nextState</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> nextState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;shouldComponentUpdate&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">nextState</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	setCount</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;render&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;我是LifeCycle页面&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">setCount</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;改变count&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#7F848E;font-style:italic;">/* {!!(count % 2) &amp;&amp; &lt;Foo /&gt;} */</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E5C07B;">Child</span><span style="color:#D19A66;font-style:italic;"> count</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 子组件</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Child</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	UNSAFE_componentWillReceiveProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">nextProps</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 不推荐，将会被废弃</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// UNSAFE_componentWillReceiveProps() 会在已挂载的组件接收新的 props 之前被调用</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Foo componentWillReceiveProps&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	componentWillUnmount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 组件卸载之前</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot; Foo componentWillUnmount&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">				style</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">border</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;solid 1px black&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">margin</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;10px&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">padding</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;10px&quot;</span><span style="color:#ABB2BF;"> }</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">			&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				我是Foo组件</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;Foo count: </span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br></div></div><h3 id="_5-组件复合" tabindex="-1">5.组件复合 <a class="header-anchor" href="#_5-组件复合" aria-label="Permalink to &quot;5.组件复合&quot;">​</a></h3><p>React 组件复合是一种常见的组件设计模式，它允许我们将多个小组件（功能相对独立的组件）组合成一个大组件（功能更为复杂的组件）。这样可以使代码更加模块化和清晰，并且可以提高组件的复用性和可维护性。</p><p>组件的复合有两种方式：</p><ol><li>使用 Props</li></ol><p>在 React 中，我们可以通过向组件传递 props 的方式来实现组件复合。一个组件可以接收多个 props，其中包括其他组件。这样，我们就可以在一个组件中使用其他组件，从而实现组件复合的效果。例如，</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Button</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> SubmitButton</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">Button</span><span style="color:#ABB2BF;">&gt;Submit&lt;/</span><span style="color:#E5C07B;">Button</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> App</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">SubmitButton</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在上述示例代码中，<code>SubmitButton</code> 组件复合了 <code>Button</code> 组件，并使用其作为提交按钮。</p><ol><li>使用 Children</li></ol><p>React 中的组件可以有多个 children，包括其他组件。通过使用 <code>props.children</code>，我们可以在一个组件中使用其他组件，从而实现组件复合的效果。例如，</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Card</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> App</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E5C07B;">Card</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;Card Title&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;Card Description&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E5C07B;">Card</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在上述示例代码中，<code>Card</code> 组件复合了 <code>h2</code> 和 <code>p</code> 元素，并将它们嵌套在一个 <code>div</code> 元素中，从而实现了一个卡片的效果。</p><p>总之，React 的组件复合是一个非常有用的设计模式，可以使我们的代码更加模块化和清晰，提高组件的复用性和可维护性。</p><h4 id="使用-layout-复合模式-类似于-vue-的-slot-插槽" tabindex="-1">使用 Layout 复合模式（类似于 Vue 的 slot 插槽） <a class="header-anchor" href="#使用-layout-复合模式-类似于-vue-的-slot-插槽" aria-label="Permalink to &quot;使用 Layout 复合模式（类似于 Vue 的 slot 插槽）&quot;">​</a></h4><p>Layout.js</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> TopBar</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;../components/TopBar&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> BottomBar</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;../components/BottomBar&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Layout</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	componentDidMount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;商城&quot;</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> title</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 接收父组件传递过来的值</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">showTopBar</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">showBottomBar</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;children&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 类似于Vue的slot插槽接收</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#E06C75;">showTopBar</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">TopBar</span><span style="color:#ABB2BF;"> /&gt;</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">content</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">txt</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">children</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">btnClick</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;button&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#E06C75;">showBottomBar</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">BottomBar</span><span style="color:#ABB2BF;"> /&gt;</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>HomePage.js</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Layout</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Layout&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HomePage</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">Layout</span><span style="color:#D19A66;font-style:italic;"> showTopBar</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#D19A66;">false</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> showBottomBar</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#D19A66;">true</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> title</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;商城首页&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				/* 类似于Vue的slot插槽传递值或元素给子组件 */</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#7F848E;font-style:italic;">/* &lt;div&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          &lt;h3&gt;HomePage&lt;/h3&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        &lt;/div&gt; */</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">					content</span><span style="color:#ABB2BF;">: (</span></span>
<span class="line"><span style="color:#ABB2BF;">						&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">							&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;HomePage&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">						&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">					),</span></span>
<span class="line"><span style="color:#E06C75;">					txt</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;这是个文本&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">					btnClick</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">						console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;btnClick&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E5C07B;">Layout</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>UserPage.js</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Layout</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./Layout&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserPage</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">Layout</span><span style="color:#D19A66;font-style:italic;"> showTopBar</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#D19A66;">true</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> showBottomBar</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#D19A66;">true</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> title</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;用户中心&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">					&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;UserPage&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E5C07B;">Layout</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_6-纯组件-purecomponent" tabindex="-1">6.纯组件（PureComponent） <a class="header-anchor" href="#_6-纯组件-purecomponent" aria-label="Permalink to &quot;6.纯组件（PureComponent）&quot;">​</a></h3><h4 id="掌握-purecomponent-使用-实现性能优化" tabindex="-1">掌握 PureComponent 使用，实现性能优化 <a class="header-anchor" href="#掌握-purecomponent-使用-实现性能优化" aria-label="Permalink to &quot;掌握 PureComponent 使用，实现性能优化&quot;">​</a></h4><p><strong>实现性能优化</strong>：</p><p>定制了 shouldComponentUpdate 后的 Component</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">PureComponent</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// export default class PureComponentPage extends Component {</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> PureComponentPage</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> PureComponent</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			counter</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// obj: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    num: 2,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// },</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	setCounter</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			counter</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// obj: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//  num: 200,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// },</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 继承Component时，使用性能优化，PureComponent内置了这个优化，所以不用写</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// shouldComponentUpdate(nextProps, nextState) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//    return nextState.count !== this.state.count;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// }</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">counter</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;render&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;PuerComponentPage&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">setCounter</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;counter: </span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">counter</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h4 id="浅比较" tabindex="-1"><strong>浅比较</strong> <a class="header-anchor" href="#浅比较" aria-label="Permalink to &quot;**浅比较**&quot;">​</a></h4><p>缺点是必须要用 class 形式，而且要注意是<strong>浅比较</strong>，不能使用 Object 形式</p><h4 id="与-component" tabindex="-1">与 Component <a class="header-anchor" href="#与-component" aria-label="Permalink to &quot;与 Component&quot;">​</a></h4><p>React.PureComponent 与 React.Component 很相似。两者的区别在于 React.Component 并未实现 shouldComponentUpdate() ，而 React.PureComponent 中以浅层对比 prop 和 state 的方式来实现了该函数。</p><p>如果赋予 React 组件相同的 props 和 state， render() 函数会渲染相同的内容，那么在某些情况下使用 React.PureComponent 可提高性能。</p><h4 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h4><p>React.PureComponent 中的 shouldComponentUpdate() 仅作对象的浅层比较。如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果。仅在你的 props 和 state 较为简单时，才使用 React.PureComponent ，或者在深层数据结构发生变化时调用 forceUpdate() 来确保组件被正确地更新。你也可以考虑使用 immutable 对象加速嵌套数据的比较。</p><p>此外， React.PureComponent 中的 shouldComponentUpdate() 将跳过所有子组件树的 prop 更新。因此，请确保所有子组件也都是“纯”的组件。</p><h4 id="purecomponent-原理" tabindex="-1">PureComponent 原理 <a class="header-anchor" href="#purecomponent-原理" aria-label="Permalink to &quot;PureComponent 原理&quot;">​</a></h4><h3 id="_7-组件通信" tabindex="-1">7.组件通信 <a class="header-anchor" href="#_7-组件通信" aria-label="Permalink to &quot;7.组件通信&quot;">​</a></h3><ul><li>父子组件通信：props</li><li>兄弟组件通信：消息订阅与发布—pubsub-js</li></ul><h2 id="二、react-脚手架开发模式" tabindex="-1">二、React 脚手架开发模式 <a class="header-anchor" href="#二、react-脚手架开发模式" aria-label="Permalink to &quot;二、React 脚手架开发模式&quot;">​</a></h2><h3 id="create-react-app-脚手架安装和使用" tabindex="-1">create-react-app 脚手架安装和使用 <a class="header-anchor" href="#create-react-app-脚手架安装和使用" aria-label="Permalink to &quot;create-react-app 脚手架安装和使用&quot;">​</a></h3><p>1.检查 node 和 npm 版本号</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">node</span><span style="color:#D19A66;"> -v</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#D19A66;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>2.安装和切换淘宝 cnpm 镜像源</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> cnpm</span><span style="color:#D19A66;"> --registry=https://registry.npm.taobao.org</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.检查淘宝镜像是否安装成功</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cnpm</span><span style="color:#D19A66;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4.全局安装 react 脚手架</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cnpm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> create-react-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>5.脚手架命令创建项目</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">create-react-app</span><span style="color:#98C379;">  helloWord</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>6.启动项目-自动编译打包并刷新</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="脚手架-public-文件夹介绍" tabindex="-1">脚手架 public 文件夹介绍 <a class="header-anchor" href="#脚手架-public-文件夹介绍" aria-label="Permalink to &quot;脚手架 public 文件夹介绍&quot;">​</a></h3><h4 id="index-html-文件内容详解" tabindex="-1">index.html 文件内容详解 <a class="header-anchor" href="#index-html-文件内容详解" aria-label="Permalink to &quot;index.html 文件内容详解&quot;">​</a></h4><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;utf-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- %PUBLIC_URL%代表public文件夹的路径 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">link</span><span style="color:#D19A66;"> rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;icon&quot;</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;%PUBLIC_URL%/favicon.ico&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 开启理想视口，用于做移动端网页的适配 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 用于配置浏览器页签+地址栏的颜色(仅支持安卓手机浏览器) --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;theme-color&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span></span>
<span class="line"><span style="color:#D19A66;">			name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;description&quot;</span></span>
<span class="line"><span style="color:#D19A66;">			content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;Web site created using create-react-app&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		/&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 用于指定网页添加到手机主屏幕后的图标 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">link</span><span style="color:#D19A66;"> rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;apple-touch-icon&quot;</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;%PUBLIC_URL%/logo192.png&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 应用加壳时的配置文件 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">link</span><span style="color:#D19A66;"> rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;manifest&quot;</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;%PUBLIC_URL%/manifest.json&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;React App&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&lt;!-- 若浏览器不支持js则展示标签中的内容 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">noscript</span><span style="color:#ABB2BF;">&gt;You need to enable JavaScript to run this app.&lt;/</span><span style="color:#E06C75;">noscript</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="manifest-json" tabindex="-1">manifest.json <a class="header-anchor" href="#manifest-json" aria-label="Permalink to &quot;manifest.json&quot;">​</a></h4><p>应用加壳配置文件，在 index.html 里面引用</p><h4 id="rebots-txt" tabindex="-1">rebots.txt <a class="header-anchor" href="#rebots-txt" aria-label="Permalink to &quot;rebots.txt&quot;">​</a></h4><p>爬虫规则文件</p><h3 id="脚手架-src-文件夹介绍" tabindex="-1">脚手架 src 文件夹介绍 <a class="header-anchor" href="#脚手架-src-文件夹介绍" aria-label="Permalink to &quot;脚手架 src 文件夹介绍&quot;">​</a></h3><p>1.App.css---App.js 的样式文件</p><p>2.App.js---一个 App 组件</p><p>3.App.test.js---一个 app 组件测试文件，基本不用，我们直接运行程序进行测试</p><p>4.index.css---index.js 的样式文件</p><p>5.index.js---入口文件，该文件将 app 组件渲染进入 index.html 的 root 容器中</p><p>6.logo.svg---图片，App.js 中的 App 组件会用到</p><p>7.reportWebVitals.js---实现页面上的性能监测，index.js 文件会用到</p><p>8.setUpTests.js---做组件测试的（一般用不上）</p><h3 id="样式的模块化" tabindex="-1">样式的模块化 <a class="header-anchor" href="#样式的模块化" aria-label="Permalink to &quot;样式的模块化&quot;">​</a></h3><h3 id="脚手架配置代理" tabindex="-1">脚手架配置代理 <a class="header-anchor" href="#脚手架配置代理" aria-label="Permalink to &quot;脚手架配置代理&quot;">​</a></h3><h4 id="axios-请求配置" tabindex="-1">Axios 请求配置 <a class="header-anchor" href="#axios-请求配置" aria-label="Permalink to &quot;Axios 请求配置&quot;">​</a></h4><h5 id="跨域代理配置" tabindex="-1">跨域代理配置 <a class="header-anchor" href="#跨域代理配置" aria-label="Permalink to &quot;跨域代理配置&quot;">​</a></h5><h6 id="_1、配置一个代理" tabindex="-1">1、配置一个代理 <a class="header-anchor" href="#_1、配置一个代理" aria-label="Permalink to &quot;1、配置一个代理&quot;">​</a></h6><p>1.package.json 文件追加配置：<code>&quot;proxy&quot;: &quot;服务器地址&quot;</code></p><ul><li><p>1.优点：配置简单，前端请求资源时可以不加任何前缀。</p></li><li><p>2.缺点：不能配置多个代理。</p></li><li><p>3.工作方式：上述方式配置代理，当请求了 3000 不存在的资源时，那么该请求会转发给 5000 （优先匹配前端资源）</p><p>2.保存后重启项目</p></li></ul><h6 id="_2、配置多个代理" tabindex="-1">2、配置多个代理 <a class="header-anchor" href="#_2、配置多个代理" aria-label="Permalink to &quot;2、配置多个代理&quot;">​</a></h6><p>1.src 目录新建 setupProxy.js 文件：文件名必须叫 setupProxy.js，因为 recat 中内置的 webpack，会自动的找这个名字的文件</p><p>2.编写 setupProxy.js 配置具体代理规则：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> proxy</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http-proxy-middleware&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 引入即可，不需要安装</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">		proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api1&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5000)</span></span>
<span class="line"><span style="color:#E06C75;">			target</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://localhost:5000&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//配置转发目标地址(能返回数据的服务器地址)</span></span>
<span class="line"><span style="color:#E06C75;">			changeOrigin</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//控制服务器接收到的请求头中host字段的值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			/*  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            changeOrigin默认值为false，但我们一般将changeOrigin值设为true  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#E06C75;">			pathRewrite</span><span style="color:#ABB2BF;">: { </span><span style="color:#98C379;">&quot;^/api1&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#7F848E;font-style:italic;">//去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)</span></span>
<span class="line"><span style="color:#ABB2BF;">		}),</span></span>
<span class="line"><span style="color:#61AFEF;">		proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api2&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">			target</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://localhost:5001&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			changeOrigin</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			pathRewrite</span><span style="color:#ABB2BF;">: { </span><span style="color:#98C379;">&quot;^/api2&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">		})</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="三、react-router-dom-react-web-路由" tabindex="-1">三、react-router-dom(react web 路由) <a class="header-anchor" href="#三、react-router-dom-react-web-路由" aria-label="Permalink to &quot;三、react-router-dom(react web 路由)&quot;">​</a></h2><h3 id="前端路由原理" tabindex="-1">前端路由原理 <a class="header-anchor" href="#前端路由原理" aria-label="Permalink to &quot;前端路由原理&quot;">​</a></h3><ul><li><code>History.createBrowserHistory()</code>：H5 推出的 history 的 API</li><li><code>History.createHashHistory()</code>：hash 值(锚点跳转)</li></ul><h3 id="react-router-有三个库" tabindex="-1">react-router 有三个库 <a class="header-anchor" href="#react-router-有三个库" aria-label="Permalink to &quot;react-router 有三个库&quot;">​</a></h3><ul><li>web 开发人员使用的库(浏览器中使用)：<code>react-router-dom</code></li><li>在 react-native 中移动端原生开发使用的库：<code>react-router-native</code></li><li>anywhere 所有人员能用的库：</li></ul><p>react-router 提供最基本的路由功能，实际使用的时候我们不会直接安装 react-router，而是根据应用运行的环境选择安装 react-router-dom（在浏览器中使用）或 react-router-native（在 rn 中使用）。react-router-dom 和 react-router-native 都依赖 react-router，所以在安装时，react-router 也会自动安装。</p><p>印记中文翻译的文档：<a href="https://react-router.docschina.org/" target="_blank" rel="noreferrer">https://react-router.docschina.org/</a></p><h3 id="路由基本使用" tabindex="-1">路由基本使用 <a class="header-anchor" href="#路由基本使用" aria-label="Permalink to &quot;路由基本使用&quot;">​</a></h3><p>文档：<a href="https://react-router.docschina.org/" target="_blank" rel="noreferrer">React Router: Declarative Routing for React.js (docschina.org)</a></p><p>react-router 中奉行一切皆组件的思想，路由器-<strong>Router</strong>、链接-<strong>Link</strong>、路由-<strong>Route</strong>、独占-<strong>Switch</strong>、重定向-<strong>Redirect</strong>都以组件形式存在</p><h4 id="内置组件" tabindex="-1">内置组件 <a class="header-anchor" href="#内置组件" aria-label="Permalink to &quot;内置组件&quot;">​</a></h4><p>1.<code>&lt;BrowserRouter&gt;</code>：不带 # 号 2.<code>&lt;HashRouter&gt;</code>：带 # 号</p><p>BrowserRouter 与 HashRouter 的区别</p><ul><li><p>1.底层原理不一样：</p><ul><li>BrowserRouter 使用的是 H5 的 history API，不兼容 IE9 及以下版本。</li><li>HashRouter 使用的是 URL 的哈希值。</li></ul></li><li><p>2.path 表现形式不一样</p><ul><li>BrowserRouter 的路径中没有#,例如：localhost:3000/demo/test</li><li>HashRouter 的路径包含#,例如：localhost:3000/#/demo/test</li></ul></li><li><p>3.刷新后对路由 state 参数的影响</p><ul><li>(1).BrowserRouter 没有任何影响，因为 state 保存在 history 对象中。</li><li>(2).HashRouter 刷新后会导致路由 state 参数的丢失！！！</li></ul></li><li><p>4.备注：HashRouter 可以用于解决一些路径错误相关的问题。</p><p>3.<code>&lt;Route&gt;</code>：路由</p></li></ul><p>版本写法差异</p><ul><li>6.x 以前的版本 <ul><li>1.直接写：<code>&lt;Route path=&quot;/home&quot; component={ Home } /&gt;</code> 跳转</li><li>2.写成：<code>&lt;Route path=&quot;/home&quot; component={ Home } /&gt;</code></li></ul></li><li>6.x 版本</li><li>1.需要在<code>&lt;Route&gt;</code>跳转路径 外面套一层<code>&lt;Routes&gt;</code>的壳</li></ul><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Routes</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/home&quot;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Home</span><span style="color:#ABB2BF;"> /&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">Routes</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>2.跳转的组件属性改成：<code>element={ &lt;Home/&gt; }</code></li></ul><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/home&quot;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Home</span><span style="color:#ABB2BF;"> /&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4.<code>&lt;Redirect&gt;</code>：路由重定向</p><ul><li>1.一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到 Redirect 指定的路由</li><li>2.具体编码：</li></ul><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">About</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/home&quot;</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Home</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Redirect</span><span style="color:#D19A66;font-style:italic;"> to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>5.<code>&lt;Link&gt;</code>：普通路由链接 6.<code>&lt;NavLink&gt;</code>：NavLink 可以实现路由链接的高亮，通过 activeClassName 指定样式名</p><p>封装 NavLink 组件</p><p>封装</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NavLink</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-router-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyNavLink</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 其中标签体的是特殊的标签属性，以 children 接收</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">NavLink</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">				activeClassName</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;选中高光样式&quot;</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">				className</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;一般样式&quot;</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#ABB2BF;">...</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">			/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>调用</p><p>1</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">MyNavLink</span><span style="color:#D19A66;font-style:italic;"> to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/home&quot;</span><span style="color:#D19A66;font-style:italic;"> a</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">a</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> b</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">b</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> c</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">c</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;Home&lt;/</span><span style="color:#E5C07B;">MyNavLink</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">MyNavLink</span><span style="color:#D19A66;font-style:italic;"> to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#ABB2BF;"> &gt;About&lt;/</span><span style="color:#E5C07B;">MyNavLink</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>2</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">MyNavLink</span><span style="color:#D19A66;font-style:italic;"> to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/home&quot;</span><span style="color:#D19A66;font-style:italic;"> a</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">a</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> b</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">b</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> c</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">c</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> children</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;Home&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">MyNavLink</span><span style="color:#D19A66;font-style:italic;"> to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#D19A66;font-style:italic;"> children</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;About&quot;</span><span style="color:#FFFFFF;"> /</span><span style="color:#ABB2BF;"> &gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>7.<code>&lt;Switch&gt;</code>：使用 <code>&lt;Switch&gt;&lt;/Switch&gt;</code> 组件包裹路由，精确匹配多个路由组件中的第一个往后不使用，一个路由以上可以使用，效率更高</p><ul><li>1.通常情况下，path 和 component 是一一对应的关系。</li><li>2.Switch 可以提高路由匹配效率(单一匹配)。</li></ul><p>例子</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">About</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/home&quot;</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Home</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="react-router-渲染内容的三种方式" tabindex="-1">react-router 渲染内容的三种方式 <a class="header-anchor" href="#react-router-渲染内容的三种方式" aria-label="Permalink to &quot;react-router 渲染内容的三种方式&quot;">​</a></h4><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Route</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">	exact</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">	path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// component={ HomePage }</span><span style="color:#7F848E;font-style:italic;"> // 方式一</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// children={() =&gt; &lt;div&gt;children&lt;/div&gt;)</span><span style="color:#7F848E;font-style:italic;"> // 方式二</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">	render</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;render&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#7F848E;font-style:italic;"> // 方式三</span></span>
<span class="line"><span style="color:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Route 渲染优先级：<strong>children &gt; component &gt; render</strong></p><p>这三种方式互斥，你只能用一种。</p><ul><li>children：function <ul><li>有时候，不管 location 是否匹配，你都需要渲染一些内容，这时候你可以用 children。</li><li>除了不管 location 是否匹配都会被渲染之外，其它工作方法与 render 完全一样。</li></ul></li><li>render：function <ul><li>但是当你用 render 的时候，你调用的只是个函数。</li><li>只在当 location 匹配的时候渲染。</li></ul></li><li>component: component <ul><li>只在当 location 匹配的时候渲染。</li></ul></li></ul><h4 id="react-router-对象和函数" tabindex="-1">react-router 对象和函数 <a class="header-anchor" href="#react-router-对象和函数" aria-label="Permalink to &quot;react-router 对象和函数&quot;">​</a></h4><ul><li>history 对象</li><li>match 对象</li><li>withRouter 函数</li></ul><h4 id="基本路由使用" tabindex="-1">基本路由使用 <a class="header-anchor" href="#基本路由使用" aria-label="Permalink to &quot;基本路由使用&quot;">​</a></h4><h5 id="准备" tabindex="-1">准备 <a class="header-anchor" href="#准备" aria-label="Permalink to &quot;准备&quot;">​</a></h5><p>1.下载：react-router-dom:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> react-router-dom</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.引入 bootstrap.css:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">link</span><span style="color:#D19A66;font-style:italic;"> rel</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;stylesheet&quot;</span><span style="color:#D19A66;font-style:italic;"> href</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/css/bootstrap.css&quot;</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h5><p>在入库 文件 index.js 套入外壳</p><p><code>&lt;App&gt;</code>的最外侧包裹了一个<code>&lt;BrowserRouter&gt;</code>或<code>&lt;HashRouter&gt;</code></p><p>没有#号</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> ReactDOM</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./App&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">HashRouter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-router-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">HashRouter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E5C07B;">HashRouter</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>有#号</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> ReactDOM</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./App&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">HashRouter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-router-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">HashRouter</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E5C07B;">HashRouter</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在 App.jsx 页面组件使用</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Link</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Route</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Routes</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-router-dom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> Home</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/Home&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> About</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;./components/About&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> App</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> style</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">textAlign</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;center&quot;</span><span style="color:#ABB2BF;"> }</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;React Router Demo&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#7F848E;font-style:italic;">/* 导航跳转 */</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> style</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">margin</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;10px 20px&quot;</span><span style="color:#ABB2BF;"> }</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">					&lt;</span><span style="color:#E5C07B;">Link</span><span style="color:#D19A66;font-style:italic;"> className</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;list-group-item&quot;</span><span style="color:#D19A66;font-style:italic;"> to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">						About</span></span>
<span class="line"><span style="color:#ABB2BF;">					&lt;/</span><span style="color:#E5C07B;">Link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">					&lt;</span><span style="color:#E5C07B;">Link</span><span style="color:#D19A66;font-style:italic;"> className</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;list-group-item active&quot;</span><span style="color:#D19A66;font-style:italic;"> to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/home&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">						Home</span></span>
<span class="line"><span style="color:#ABB2BF;">					&lt;/</span><span style="color:#E5C07B;">Link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">				{</span><span style="color:#7F848E;font-style:italic;">/* 注册路由 */</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E5C07B;">Routes</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">					&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/about&quot;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">About</span><span style="color:#ABB2BF;"> /&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">					&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/home&quot;</span><span style="color:#D19A66;font-style:italic;"> element</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Home</span><span style="color:#ABB2BF;"> /&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;/</span><span style="color:#E5C07B;">Routes</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>路由组件和一般组件不同点</p><ul><li><p>1.写法不同</p><ul><li>一般组件：<code>&lt;Demo/&gt;</code></li><li>路由组件：<code>&lt;Route path=&quot;/demo&quot;</code></li></ul></li><li><p>2.存放位置不同</p><ul><li>一般组件：components 文件夹</li><li>路由组件：pages 文件夹</li></ul></li><li><p>3.接收到的 props 不同</p><ul><li><p>一般组件：写组件标签时传递了什么，就能收到什么</p></li><li><p>路由组件：接收到三个固定的属性</p></li><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">history</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;"> go</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ƒ</span><span style="color:#61AFEF;"> go</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;"> goBack</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ƒ</span><span style="color:#61AFEF;"> goBack</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;"> goForward</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ƒ</span><span style="color:#61AFEF;"> goForward</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;"> push</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ƒ</span><span style="color:#61AFEF;"> push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;"> replace</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ƒ</span><span style="color:#61AFEF;"> replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;"> pathname</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/about&quot;</span></span>
<span class="line"><span style="color:#E06C75;"> search</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span></span>
<span class="line"><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span></span>
<span class="line"><span style="color:#E06C75;">match</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;"> params</span><span style="color:#ABB2BF;">: {}</span></span>
<span class="line"><span style="color:#E06C75;"> path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/about&quot;</span></span>
<span class="line"><span style="color:#E06C75;"> url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;/about&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul></li></ul><p>解决多级路径刷新页面样式丢失的问题</p><ul><li>1.public/index.html 中 引入样式时不写 ./ 写 / （常用）</li><li>2.public/index.html 中 引入样式时不写 ./ 写 %PUBLIC_URL% （常用）</li><li>3.使用 HashRouter</li></ul><p>路由的严格匹配与模糊匹配</p><ul><li>1.默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）</li><li>2.开启严格匹配：<code>&lt;Route exact={true} path=&quot;/about&quot; component={About}/&gt;</code><ul><li>exact={true} 简写 exact</li></ul></li><li>3.严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由</li></ul><h5 id="嵌套路由使用" tabindex="-1">嵌套路由使用 <a class="header-anchor" href="#嵌套路由使用" aria-label="Permalink to &quot;嵌套路由使用&quot;">​</a></h5><p>1.注册子路由时要写上父路由的 path 值 子路由路径写法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">to</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;/home/news&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// /home是父路由路径</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.路由的匹配是按照注册路由的顺序进行的</p><h5 id="向路由组件传递参数数据" tabindex="-1">向路由组件传递参数数据 <a class="header-anchor" href="#向路由组件传递参数数据" aria-label="Permalink to &quot;向路由组件传递参数数据&quot;">​</a></h5><p>1.params 参数</p><ul><li><p>路由链接(携带参数)：</p><ul><li><code>&lt;Link to=&#39;/demo/test/tom/18&#39;}&gt;详情&lt;/Link&gt;</code></li><li><code>&lt;Link to={</code>/demo/test/tom/\${msgObj.id}/\${msgObj.age}<code>}&gt;详情&lt;/Link&gt;</code></li></ul></li><li><p>注册路由(声明接收)：</p><ul><li><code>&lt;Route path=&quot;/demo/test/:name/:age&quot; element={&lt;Test/&gt;} /&gt;</code></li></ul></li><li><p>跳转的路由接收参数：</p><ul><li><p><code>this.props.match.params</code></p><p>2.search 参数</p></li></ul></li><li><p>路由链接(携带参数)：</p><ul><li><code>&lt;Link to=&#39;/demo/test?name=tom&amp;age=18&#39;}&gt;详情&lt;/Link&gt;</code></li><li><code>&lt;Link to={</code>/demo/test/?name=\${name}&amp;age=\${age}<code>}&gt;详情&lt;/Link&gt;</code></li></ul></li><li><p>注册路由(无需声明，正常注册即可)：</p><ul><li><code>&lt;Route path=&quot;/demo/test&quot; element={&lt;Test/&gt;}/&gt;</code></li></ul></li><li><p>跳转的路由接收参数：</p><ul><li><code>this.props.location.search</code></li></ul></li><li><p>备注：获取到的 search 是 urlencoded 编码字符串，需要借助 querystring react 内置库解析：把序列化的数据转成对象</p><ul><li><p>1.直接导入不用安装</p></li><li><p><code>import qs from ‘querystring’</code></p></li><li><p>2.使用</p><ul><li><p><code>qs.parse()</code></p><p>3.state 参数</p></li></ul></li></ul></li><li><p>路由链接(携带参数)：</p><ul><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Link</span><span style="color:#D19A66;font-style:italic;"> to</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">pathname</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;/demo/test&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">:{</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;tom&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">}}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;详情&lt;/</span><span style="color:#E5C07B;">Link</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Link</span><span style="color:#D19A66;font-style:italic;"> to</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">pathname</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;/demo/test&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">:{</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">msgObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">msgObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">}}</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;详情&lt;/</span><span style="color:#E5C07B;">Link</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li><li><p>注册路由(无需声明，正常注册即可)：</p><ul><li><code>&lt;Route path=&quot;/demo/test&quot; element={&lt;Test/&gt;}/&gt;</code></li></ul></li><li><p>接收参数：</p><ul><li><code>this.props.location.state</code></li></ul></li><li><p>备注：地址栏不体现出来，但刷新也可以保留住参数</p></li></ul><h5 id="编程式路由导航-多种路由跳转方式" tabindex="-1">编程式路由导航--多种路由跳转方式 <a class="header-anchor" href="#编程式路由导航-多种路由跳转方式" aria-label="Permalink to &quot;编程式路由导航--多种路由跳转方式&quot;">​</a></h5><p>1.push 和 replace 路由跳转模式</p>`,281)),s("ul",null,[s("li",null,[s("p",null,[s("code",null,"<Link to"+l()+"></Link>",1)]),n[0]||(n[0]=s("ul",null,[s("li",null,"什么都不写默认 push 跳转模式"),s("li",null,"push 路由跳转是可以跳转到上一级,可以返回的")],-1))]),s("li",null,[s("p",null,[s("code",null,"<Link replace to"+l()+"></Link>",1)]),n[1]||(n[1]=s("ul",null,[s("li",null,[s("p",null,"指定 replace 跳转模式")]),s("li",null,[s("p",null,"replace 路由跳转是不能返回上一层的"),s("p",null,"2.借助 this.prosp.history 对象上的 API 对操作路由跳转、前进、后退"),s("p",null,"3.编程式路由导航(通过事件方法执行)")])],-1))]),n[2]||(n[2]=a("<li><p>使用高阶函数拿到传的参数</p><ul><li><code>onClick={() =&gt; this.showPush()}</code></li></ul></li><li><p>跳转方法名</p><ul><li><code>this.prosp.history.push()</code></li><li><code>this.prosp.history.replace()</code></li></ul></li><li><p>回退 2 步：<code>this.prosp.history.goBack(2)</code></p></li><li><p>前进：<code>this.prosp.history.goForward()</code></p></li><li><p>前进 2 步：<code>this.prosp.history.go(2)</code></p></li>",5))]),n[4]||(n[4]=a(`<h5 id="withrouter-的使用" tabindex="-1">withRouter 的使用 <a class="header-anchor" href="#withrouter-的使用" aria-label="Permalink to &quot;withRouter 的使用&quot;">​</a></h5><p>让在一般组件也可以使用路由组件的 API</p><p>使用 withRouter</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Header</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> withRouter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Header</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接下来就可以在一般组件里使用，编程式跳转等 API 属性</p><h3 id="_404-页面设置" tabindex="-1">404 页面设置 <a class="header-anchor" href="#_404-页面设置" aria-label="Permalink to &quot;404 页面设置&quot;">​</a></h3><p>设定一个没有 path 的路由在路由列表最后面，表示一定匹配</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/* 添加Switch表示仅匹配一个*/</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	{</span><span style="color:#7F848E;font-style:italic;">/* 根路由要添加exact，实现精确匹配 */</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> exact</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">HomePage</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/user&quot;</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">UserPage</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">EmptyPage</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">Switch</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> EmptyPage</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;EmptyPage-404&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="四、pubsub-消息发布订阅" tabindex="-1">四、pubSub 消息发布订阅 <a class="header-anchor" href="#四、pubsub-消息发布订阅" aria-label="Permalink to &quot;四、pubSub 消息发布订阅&quot;">​</a></h2><p>兄弟组件通信：消息订阅与发布—pubsub-js</p><h2 id="五、redux-各个版本状态管理" tabindex="-1">五、redux 各个版本状态管理 <a class="header-anchor" href="#五、redux-各个版本状态管理" aria-label="Permalink to &quot;五、redux 各个版本状态管理&quot;">​</a></h2><h3 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h3><ul><li>英文文档：<a href="https://redux.js.org/" target="_blank" rel="noreferrer">https://redux.js.org/</a></li><li>中文文档：<a href="http://www.redux.org.cn/" target="_blank" rel="noreferrer">http://www.redux.org.cn/</a></li><li>Github：<a href="https://github.com/reactjs/redux" target="_blank" rel="noreferrer">https://github.com/reactjs/redux</a></li></ul><h3 id="redux-是什么" tabindex="-1">redux 是什么 <a class="header-anchor" href="#redux-是什么" aria-label="Permalink to &quot;redux 是什么&quot;">​</a></h3><ol><li>redux 是一个专门用于做状态管理的 JS 库(不是 react 插件库)，提供一种可预测的状态管理方案，使我们可以更好地组织应用程序中的数据流。</li><li>它可以用在 React、Angular 和 Vue 等项目中, 但基本与 react 配合使用。</li><li>作用：集中式管理 react 应用中多个组件共享的状态，对于大型或复杂的应用程序，使用 Redux 可以更好地管理和维护状态。</li></ol><h3 id="什么情况下需要使用-redux" tabindex="-1">什么情况下需要使用 redux <a class="header-anchor" href="#什么情况下需要使用-redux" aria-label="Permalink to &quot;什么情况下需要使用 redux&quot;">​</a></h3><ul><li>1.某个组件的状态，需要让其他组件可以随时拿到（共享）。</li><li>2.一个组件需要改变另一个组件的状态（通信）。</li><li>3.总体原则：能不用就不用, 如果不用比较吃力才考虑使用。</li></ul><h3 id="redux-工作流程" tabindex="-1">redux 工作流程 <a class="header-anchor" href="#redux-工作流程" aria-label="Permalink to &quot;redux 工作流程&quot;">​</a></h3><p><img src="`+t+`" alt="redux工作流程"></p><h3 id="redux-的三个核心概念" tabindex="-1">redux 的三个核心概念 <a class="header-anchor" href="#redux-的三个核心概念" aria-label="Permalink to &quot;redux 的三个核心概念&quot;">​</a></h3><h4 id="store" tabindex="-1">store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;store&quot;">​</a></h4><ul><li>1.将 state、action、reducer 联系在一起的对象</li><li>2.如何得到此对象? <ul><li>1)import {createStore} from &#39;redux&#39;</li><li>2)import reducer from &#39;./reducers&#39;</li><li>3)const store = createStore(reducer)</li></ul></li><li>3.此对象的功能? <ul><li>1)getState()：得到 state</li><li>2)dispatch(action)：分发 action, 触发 reducer 调用, 产生新的 state</li><li>3)subscribe(listener)：注册监听, 当产生了新的 state 时, 自动调用</li></ul></li></ul><h4 id="action" tabindex="-1">action <a class="header-anchor" href="#action" aria-label="Permalink to &quot;action&quot;">​</a></h4><ul><li><p>1.动作的对象</p></li><li><p>2.包含 2 个属性</p><ul><li>type：标识属性, 值为字符串, 唯一, 必要属性</li><li>data：数据属性, 值类型任意, 可选属性</li></ul></li><li><p>3.例子：{ type: &#39;ADD_STUDENT&#39;,data:{name: &#39;tom&#39;,age:18} }</p></li><li><p>异步 action</p><ul><li><p>1.安装 redux-thunk</p></li><li><p><code>npm i redux-thunk</code></p></li><li><p>2.store.js 引入和调用</p><ul><li>import { createStore, applyMiddleware } from &#39;redux&#39;;-----调用：applyMiddleware</li><li>import reduxThunk from &#39;redux-thunk&#39;;</li><li>export default createStore(countResucer,applyMiddleware(reduxThunk)); -----调用：applyMiddleware(reduxThunk)</li></ul></li><li><p>3.异步调用加法</p></li><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">INCREMENET</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">DECREMENET</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./constantimport store fro</span><span style="color:#FFFFFF;">m</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> store</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;./store&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> createIncrementAction</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> data</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> ({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">INCREMENET</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> createDecrementAction</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> data</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> ({</span><span style="color:#E06C75;">ftype</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">DECREMENET</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 异步action</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> createDecrementAsyncAction</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#7F848E;font-style:italic;">            // 默认传的对象，使用上述中间件才能转换读取异步</span></span>
<span class="line"><span style="color:#E5C07B;">         store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatchcreateIncrementAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">     },</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul></li></ul><h4 id="reducer" tabindex="-1">reducer <a class="header-anchor" href="#reducer" aria-label="Permalink to &quot;reducer&quot;">​</a></h4><p>1.用于初始化状态、加工状态。 ​ 2.加工时，根据旧的 state 和 action， 产生新的 state 的纯函数。</p><h4 id="简单-redux-使用例子" tabindex="-1">简单 redux 使用例子 <a class="header-anchor" href="#简单-redux-使用例子" aria-label="Permalink to &quot;简单 redux 使用例子&quot;">​</a></h4><p>1.安装 Redux</p><p>首先需要安装 Redux，可以通过 npm 或 yarn 安装：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> redux</span><span style="color:#D19A66;"> --save</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># or</span></span>
<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> redux</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2.创建 Store</p><p>Redux 中的状态存储在一个全局的 Store 对象中，使用 <code>createStore()</code> 函数创建 Store。<code>createStore()</code> 函数接受一个 reducer 函数作为参数，该函数用于更新状态：</p><p>store/index.js</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;redux&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> reducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 根据 action 更新 state</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reducer</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>3.在页面内 调度 Action</p><p>更新状态时需要调度一个 Action，Action 是一个包含描述操作的 type 属性和操作所需的任何数据的普通对象。可以通过 dispatch() 函数调用 Action：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> action</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ADD_TODO&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	payload</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;item 1&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>4.页面内 订阅 Store</p><p>Redux 允许我们订阅 Store，以便在状态发生变化时可以及时得到通知。<code>subscribe()</code> 函数可以用于订阅 Store 的变化：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">componentDidMount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;State updated:&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 强制更新页面</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forceUpdate</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 更新页面数据也可以在 index.js 里面</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;state发生变化了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 发送数据变化，重新渲染页面</span></span>
<span class="line"><span style="color:#E5C07B;">    ReactDOM</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(&lt;</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;"> /&gt;, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> // this.forceUpdate();</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>5.连接 React 组件</p><p>可以使用 React-Redux 库将 Redux 集成到 React 应用程序中，以便在 React 组件中使用 Redux 状态管理。可以通过 <code>connect()</code> 函数将组件与 Store 连接起来：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">connect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-redux&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> TodoList</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			{</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">todos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">todo</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">li</span><span style="color:#D19A66;font-style:italic;"> key</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			))</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> mapStateToProps</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">todos</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">todos</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> connect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mapStateToProps</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">TodoList</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>上面的代码中，<code>mapStateToProps()</code> 函数将 Store 中的状态映射到组件的 props 中。然后通过 <code>connect()</code> 函数将组件与 Store 连接起来，使其能够获取 Store 中的数据。此时，在组件内部就可以通过 <code>props.todos</code> 访问 Store 中的 <code>todos</code> 数组。</p><h3 id="redux-的核心-api" tabindex="-1">redux 的核心 API <a class="header-anchor" href="#redux-的核心-api" aria-label="Permalink to &quot;redux 的核心 API&quot;">​</a></h3><ul><li><p><code>createstore()</code> 作用：创建包含指定 reducer 的 store 对象</p></li><li><p><code>store对象</code></p><ul><li><p>1.作用: redux 库最核心的管理对象</p></li><li><p>2.它内部维护着:</p><ul><li>state</li><li>reducer</li></ul></li><li><p>3.核心方法:</p><ul><li>getState()</li><li>dispatch(action)</li><li>subscribe(listener)</li></ul></li><li><p>4.具体编码:</p></li></ul><ol><li>store.getState()</li><li>store.dispatch({type:&#39;INCREMENT&#39;, number})</li><li>store.subscribe(render)</li></ol></li><li><p><code>applyMiddleware()</code> 作用：应用上基于 redux 的中间件(插件库)</p></li><li><p><code>combineReducers()</code> 作用：合并多个 reducer 函数</p></li></ul><h3 id="redux-异步编程" tabindex="-1">redux 异步编程 <a class="header-anchor" href="#redux-异步编程" aria-label="Permalink to &quot;redux 异步编程&quot;">​</a></h3><p>理解：</p><ul><li>1.redux 默认是不能进行异步处理的,</li><li>2.某些时候应用中需要在 redux 中执行异步任务(ajax, 定时器)</li></ul><p>使用异步中间件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> redux-thunk</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="重点-🌟react-redux" tabindex="-1">(重点)🌟react-redux <a class="header-anchor" href="#重点-🌟react-redux" aria-label="Permalink to &quot;(重点)🌟react-redux&quot;">​</a></h3><p><strong>React-Redux 是 Redux 在 React 应用程序中的一个官方绑定库</strong>。</p><p>React-Redux 提供了一个组件和 Hooks API，使得在 React 组件中使用 Redux 更加方便。</p><p>React-Redux 主要解决了以下问题：</p><ol><li>连接 React 组件和 Redux Store：React-Redux 提供一个 <code>connect()</code> 函数，帮助我们将 React 组件连接到 Redux Store 上，使得组件能够获取到 Store 中的特定数据，并在必要时更新组件状态。</li><li>管理组件状态：React-Redux 提供了 <code>Provider</code> 组件，将 Redux Store 传递给整个应用程序，使组件能够获取和更新 Store 中的状态。</li></ol><p>总之，Redux 用于管理应用程序中的全局状态，而 React-Redux 则提供了一种在 React 中方便使用 Redux 状态管理的方式，它为 React 组件提供了访问 Redux Store 的能力，并提供了一些方便的 API 使组件能够更加灵活地使用和管理状态。</p><h4 id="react-redux-安装和使用" tabindex="-1">react-redux 安装和使用 <a class="header-anchor" href="#react-redux-安装和使用" aria-label="Permalink to &quot;react-redux 安装和使用&quot;">​</a></h4><h5 id="_1-安装" tabindex="-1">1.安装 <a class="header-anchor" href="#_1-安装" aria-label="Permalink to &quot;1.安装&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> react-redux</span><span style="color:#D19A66;"> --save</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># or</span></span>
<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> react-redux</span><span style="color:#D19A66;"> -S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_2-使用" tabindex="-1">2.使用 <a class="header-anchor" href="#_2-使用" aria-label="Permalink to &quot;2.使用&quot;">​</a></h5><p>react-redux 提供了两个 api</p><ol><li><p>Provider 为后代组件提供 store</p></li><li><p>connect 为组件提供数据和变更方法</p></li></ol><p>store/index.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> i</span><span style="color:#E06C75;"> createStore</span><span style="color:#C678DD;">  from</span><span style="color:#98C379;"> &quot;redux&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">定义state初始化和修改规则</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">reducer是一个纯函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> counterReducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    switch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &quot;ADD&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">         return</span><span style="color:#E06C75;"> state</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &quot;MINUS&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">         return</span><span style="color:#E06C75;"> state</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">         return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">counterReducer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> store</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Provider 组件的使用：index.js 入口文件中：多个组件传递，就不需要在单个容器组件使用 store</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> ReactDom</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;react-dom&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> App</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;./App&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> store</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;./store/&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Provider</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;react-redux&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">ReactDom</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">Provider</span><span style="color:#D19A66;font-style:italic;"> store</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">store</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;/</span><span style="color:#E5C07B;">Provider</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>获取状态数据：使用 connect 方法导出映射和派发的事件，ReactReduxPage.js</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">connect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-redux&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> ReactReduxPage</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">num</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">add</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">minus</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;ReactReduxPage&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">num</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">add</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">minus</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;minus&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> mapStateToProps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		num</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mapDispatchToProps</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	add</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;add&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	minus</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;minus&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 事件映射和派发</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> connect</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">	mapStateToProps</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 状态映射 mapStateToProps</span></span>
<span class="line"><span style="color:#E06C75;">	mapDispatchToProps</span><span style="color:#7F848E;font-style:italic;"> // 派发事件映射</span></span>
<span class="line"><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">ReactReduxPage</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h4 id="redux-调试工具" tabindex="-1">redux 调试工具 <a class="header-anchor" href="#redux-调试工具" aria-label="Permalink to &quot;redux 调试工具&quot;">​</a></h4><p>1.安装 chrome 浏览器插件：Redux DevTools</p><p>2.下载工具依赖包</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save-dev</span><span style="color:#98C379;"> redux-devtools-extension</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.reducer 目录下 store.js 文件引入</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">//引入redux-devtools-extension</span></span>
<span class="line"><span style="color:#61AFEF;">import</span><span style="color:#98C379;"> {composeWithDevTools}</span><span style="color:#98C379;"> from</span><span style="color:#98C379;"> &#39;redux-devtools-extension&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>4.使用</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 暴露store</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">	allReducer</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	composeWithDevTools</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">applyMiddleware</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">thunk</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">composeWithDevTools</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">applyMiddleware</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">thunk</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>5.至此，浏览器开发者工具便可以使用</p><h4 id="_1-ui-组件" tabindex="-1">1.UI 组件 <a class="header-anchor" href="#_1-ui-组件" aria-label="Permalink to &quot;1.UI 组件&quot;">​</a></h4><ol><li>只负责 UI 的呈现，不带有任何业务逻辑</li><li>通过 props 接收数据(一般数据和函数)</li><li>不使用任何 Redux 的 API</li><li>一般保存在 components 文件夹下</li></ol><h4 id="_2-容器组件" tabindex="-1">2.容器组件 <a class="header-anchor" href="#_2-容器组件" aria-label="Permalink to &quot;2.容器组件&quot;">​</a></h4><ol><li>负责管理数据和业务逻辑，不负责 UI 的呈现</li><li>使用 Redux 的 API</li><li>一般保存在 containers 文件夹下</li></ol><h4 id="_3-整合-ui-组件和容器组件" tabindex="-1">3.整合 UI 组件和容器组件 <a class="header-anchor" href="#_3-整合-ui-组件和容器组件" aria-label="Permalink to &quot;3.整合 UI 组件和容器组件&quot;">​</a></h4><p>两个组件可以合并在一个页面或者分开两个页面</p><h4 id="相关-api" tabindex="-1">相关 API <a class="header-anchor" href="#相关-api" aria-label="Permalink to &quot;相关 API&quot;">​</a></h4><ol><li><p>Provider：让所有组件都可以得到 state 数据</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Provider</span><span style="color:#D19A66;font-style:italic;"> store</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">store</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">Provider</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>connect：用于包装 UI 组件生成容器组件</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">connect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react-redux&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mapStateToprops</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mapDispatchToProps</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">Counter</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>mapStateToprops：将外部的数据（即 state 对象）转换为 UI 组件的标签属性</p><div class="language-JSX line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JSX</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> mapStateToprops</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>mapDispatchToProps：将分发 action 的函数转换为 UI 组件的标签属性</p><div class="language-JSX line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JSX</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> mapDispatchToProps</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">dispatch</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    jia</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;font-style:italic;">number</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">createIncrementAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#61AFEF;">    jian</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;font-style:italic;">number</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">createDecrementAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#61AFEF;">    jiaAsync</span><span style="color:#ABB2BF;">:(</span><span style="color:#E06C75;font-style:italic;">number</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">createIncrementAsyncAction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><h4 id="react-redux-数据共享" tabindex="-1">react-redux 数据共享 <a class="header-anchor" href="#react-redux-数据共享" aria-label="Permalink to &quot;react-redux 数据共享&quot;">​</a></h4><p>store.js</p><p>使用 combineReducers 去合并所有组件的 reducer 的值到一个对象内</p><div class="language-JS line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/*该文件专门用于暴露一个store对象，整个应用只有一个store对象*/</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">applyMiddleware</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">combineReducers</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;redux&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//引入为Count组件服务的reducer</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> countReducer</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;">  &quot;./reducer/count_reducer&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//引入为Person组件服务的reducer</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> presonReducer</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;">  &quot;./reducer/person_reducer&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//引入redux-thunk中间件，用于支持异步action</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> thunk</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;redux-thunk&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//汇总所有的reducer</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> allReducer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> combineReducers</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    count</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">countReducer</span><span style="color:#ABB2BF;"> ,</span></span>
<span class="line"><span style="color:#E06C75;">    person</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">presonReducer</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">allReducer</span><span style="color:#ABB2BF;"> ,</span><span style="color:#61AFEF;">applyMiddleware</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">thunk</span><span style="color:#ABB2BF;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>组件内取数据共享的数值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 容器组件</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#61AFEF;"> connect</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">		count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		person</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#ABB2BF;">	{</span></span>
<span class="line"><span style="color:#E06C75;">		increment</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">incrementAction</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		decrement</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">decrementAction</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		incrementAsync</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">incrementActionAsync</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">Count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 组件内调用</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="纯函数和高阶函数" tabindex="-1">纯函数和高阶函数 <a class="header-anchor" href="#纯函数和高阶函数" aria-label="Permalink to &quot;纯函数和高阶函数&quot;">​</a></h4><h5 id="纯函数" tabindex="-1">纯函数 <a class="header-anchor" href="#纯函数" aria-label="Permalink to &quot;纯函数&quot;">​</a></h5><ol><li>一类特别的函数: 只要是同样的输入(实参)，必定得到同样的输出(返回)</li><li>必须遵守以下一些约束</li></ol><ul><li><ol><li>不得改写参数数据</li></ol></li><li><ol start="2"><li>不会产生任何副作用，例如网络请求，输入和输出设备</li></ol></li><li><ol start="3"><li>不能调用 Date.now()或者 Math.random()等不纯的方法</li></ol><p>3.redux 的 reducer 函数必须是一个纯函数</p></li><li><p>非纯函数实例</p></li><li><p>preState.unshift(data)</p></li><li><p>上述方法导致 preState 被改写，reducer 的方法就不是纯函数</p></li><li><p>纯函数实例</p></li><li><p>return [data,...preState]</p></li></ul><h5 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-label="Permalink to &quot;高阶函数&quot;">​</a></h5><ul><li><p>理解: 一类特别的函数</p><ul><li>情况 1: 参数是函数</li><li>情况 2: 返回是函数</li></ul></li><li><p>常见的高阶函数:</p><ul><li>定时器设置函数</li><li>数组的 forEach()/map()/filter()/reduce()/find()/bind()</li><li>promise</li><li>react-redux 中的 connect 函数</li></ul></li><li><p>作用: 能实现更加动态, 更加可扩展的功能</p></li></ul><h2 id="六、react-扩展-setstate-lazyload-hooks" tabindex="-1">六、React 扩展(setState|lazyLoad|Hooks) <a class="header-anchor" href="#六、react-扩展-setstate-lazyload-hooks" aria-label="Permalink to &quot;六、React 扩展(setState|lazyLoad|Hooks)&quot;">​</a></h2><h3 id="_1-setstate-更新状态的-2-种写法" tabindex="-1">1.setState 更新状态的 2 种写法 <a class="header-anchor" href="#_1-setstate-更新状态的-2-种写法" aria-label="Permalink to &quot;1.setState 更新状态的 2 种写法&quot;">​</a></h3><ul><li><p>(1). 对象式的 setState(setState 方法接收一个对象作为参数)：<code>setState(stateChange, [callback])</code></p><ul><li>1.<code>stateChange</code> 为状态改变对象(该对象可以体现出状态的更改)</li><li>2.<code>callback</code> 是可选的回调函数, 它在状态更新完毕、界面也更新后(render 调用后)才被调用</li></ul></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 例如：给setState方法传递了一个对象，对象里的属性代表需要更新的状态，例如上例中，我们需要更新状态中的count属性</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>(2). 函数式的 setState(setState 方法接收一个函数作为参数)：<code>setState(updater, [callback])</code></p><ul><li>1.updater 为返回 stateChange 对象的函数。</li><li>2.updater 可以接收到 state 和 props。</li><li>3.callback 是可选的回调函数, 它在状态更新、界面也更新后(render 调用后)才被调用。</li></ul></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 给setState方法传递了一个函数，这个函数接收一个参数prevState，表示当前状态。我们需要返回一个对象，对象里的属性代表需要更新的状态。</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">prevState</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">prevState</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>两种方法--完整代码</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Counter</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	handleClick1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 第一种写法：传递一个对象</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	handleClick2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 第二种写法：传递一个更新函数</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">prevState</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">prevState</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;Count: </span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handleClick1</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;Click 1&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handleClick2</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;Click 2&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> Counter</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div></li><li><p>总结:</p><ul><li><p>1.对象式的 setState 是函数式的 setState 的简写方式(语法糖)</p></li><li><p>2.使用原则：</p><ul><li>(1).如果新状态不依赖于原状态 ===&gt; 使用对象方式</li><li>(2).如果新状态依赖于原状态 ===&gt; 使用函数方式</li><li>(3).如果需要在 setState()执行后获取最新的状态数据, 要在第二个 callback 函数中读取</li></ul></li><li><p>在 React 中，<code>setState</code>通常是异步的，这意味着当你调用<code>setState</code>时，React 并不会立即更新组件的状态，而是将其加入到一个更新队列中等待后续处理。这种异步更新状态的方式可以提高性能和效率，因为它可以将多个状态更新批量处理，避免不必要的渲染。</p></li><li><p>但是，在某些情况下，你需要确保在调用<code>setState</code>后立即获取更新后的状态值，此时异步更新可能会带来问题。这里有一些关于<code>setState</code>同步和异步的注意事项：</p><ol><li><code>setState</code>执行是异步的，所以如果你想基于当前状态更新状态，你需要使用第二种写法——传递一个函数。</li><li>在异步的更新过程中，React 可能会合并或删除一些状态更新。例如，在循环中连续多次调用<code>setState</code>方法，实际上只有最后一次调用会被执行。这是因为 React 会将这些更新合并成一个更新，以提高渲染性能。</li><li>如果你需要在调用<code>setState</code>之后立即获取更新后的状态值，你可以使用回调函数。该回调函数会在状态更新完成之后再执行，此时你可以获取到最新的状态值。</li></ol><p>下面是一个简单的示例代码，演示了在<code>setState</code>中使用回调函数获取更新后的状态值：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> MyComponent</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  handleClick</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;"> }, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 1.通过回调函数获取当前状态的值，并将其打印出来。</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Updated count:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 2.也可以通过定时器使异步变同步</span></span>
<span class="line"><span style="color:#61AFEF;">  handleClick1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Updated count:&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 3.通过原生事件的方法获取id监听</span></span>
<span class="line"><span style="color:#61AFEF;">  componentDidMount</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">      document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handleClick1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;Count: </span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">handleClick</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;Click Me&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">&gt;原生点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> MyComponent</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div></li></ul></li></ul><h3 id="_2-路由组件的-lazyload-懒加载" tabindex="-1">2.路由组件的 lazyLoad(懒加载) <a class="header-anchor" href="#_2-路由组件的-lazyload-懒加载" aria-label="Permalink to &quot;2.路由组件的 lazyLoad(懒加载)&quot;">​</a></h3><p>0.引入</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">lazy</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>1.通过 React 的 lazy 函数配合 import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Login</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> lazy</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> import</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@/pages/Login&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.通过<code>&lt;Suspense&gt;</code>指定在 加载得到路由 打包文件前 显示一个自定义 loading 界面</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Suspense</span><span style="color:#D19A66;font-style:italic;"> fallback</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;loading.....&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Route</span><span style="color:#D19A66;font-style:italic;"> path</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/Home&quot;</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Home</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">Redirect</span><span style="color:#D19A66;font-style:italic;"> to</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/login&quot;</span><span style="color:#D19A66;font-style:italic;"> component</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">Login</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">Suspense</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-⭐️⭐️react-hooks" tabindex="-1">3.⭐️⭐️React Hooks <a class="header-anchor" href="#_3-⭐️⭐️react-hooks" aria-label="Permalink to &quot;3.⭐️⭐️React Hooks&quot;">​</a></h3><h4 id="_1-react-hook-hooks-是什么" tabindex="-1">1.React Hook/Hooks 是什么? <a class="header-anchor" href="#_1-react-hook-hooks-是什么" aria-label="Permalink to &quot;1.React Hook/Hooks 是什么?&quot;">​</a></h4><p>官网文档：<a href="https://react.dev/learn/reusing-logic-with-custom-hooks" target="_blank" rel="noreferrer">Reusing Logic with Custom Hooks – React</a></p><p>(1). Hook 是 React 16.8.0 版本增加的新特性/新语法</p><p>(2). 可以让你在函数组件中使用 state 以及其他的 React 特性</p><p><strong>认识 Hook</strong>：</p><p><strong>Hook 是什么？</strong> Hook 是一个特殊的函数，它可以让你“钩入” React 的特性。例如， useState 是允许</p><p>你在 React 函数组件中添加 state 的 Hook。</p><p><strong>什么时候我会用</strong> <strong>Hook</strong>？ 如果你在编写函数组件并意识到需要向其添加一些 state，以前的做法是必须</p><p>将其它转化为 class。现在你可以在现有的函数组件中使用 Hook。</p><h4 id="_2-三个常用的-hook" tabindex="-1">2.三个常用的 Hook <a class="header-anchor" href="#_2-三个常用的-hook" aria-label="Permalink to &quot;2.三个常用的 Hook&quot;">​</a></h4><h5 id="_1-state-hook-react-usestate" tabindex="-1">(1). State Hook：React.useState() <a class="header-anchor" href="#_1-state-hook-react-usestate" aria-label="Permalink to &quot;(1). State Hook：React.useState()&quot;">​</a></h5><ul><li><p>(1). State Hook 让函数组件也可以有 state 状态, 并进行状态数据的读写操作</p></li><li><p>(2). 语法:</p></li><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> HookPage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 声明一个叫 “count” 的 state 变量，初始化为0</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;HookPage&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>(3). useState()说明:</p><ul><li>参数：第一次初始化指定的值在内部作缓存</li><li>返回值：包含 2 个元素的数组, 第 1 个为内部当前状态值, 第 2 个为更新状态值的函数</li></ul></li><li><p>(4). setCount() 2 种写法:</p><ul><li>setCount()：是语法自定义的方法名</li><li>setCount(count+1)：参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值</li><li>setCount(count =&gt; count+1)：参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值</li></ul></li></ul><h5 id="_2-effect-hook-react-useeffect" tabindex="-1">(2). Effect Hook：React.useEffect() <a class="header-anchor" href="#_2-effect-hook-react-useeffect" aria-label="Permalink to &quot;(2). Effect Hook：React.useEffect()&quot;">​</a></h5><ul><li><p>(1). Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)</p></li><li><p>(2). React 中的副作用操作：</p><ul><li>发 ajax 请求数据获取</li><li>设置订阅 / 启动定时器</li><li>手动更改真实 DOM</li></ul></li><li><p>(3). 语法和说明:</p><ul><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> HookPage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 声明一个叫 “count” 的 state 变量，初始化为0</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 与 componentDidMount 和 componentDidUpdate相似</span></span>
<span class="line"><span style="color:#61AFEF;">	useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 在此可以执行任何带副作用操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 更新 title</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`You clicked </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> times\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// return () =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 在组件卸载前执行</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 在此做一些收尾工作, 比如清除定时器/取消订阅等</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// };</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, [</span><span style="color:#E06C75;">stateValue</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// 如果指定的是[], 回调函数只会在第一次render()后执行</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;HookPage&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></li></ul></li><li><p>(4). 可以把 useEffect Hook 看做如下三个函数的组合</p><ul><li>componentDidMount()</li><li>componentDidUpdate()</li><li>componentWillUnmount()</li></ul></li><li><p>在函数组件主体内（这里指在 React 渲染阶段）改变 DOM、添加订阅、设置定时器、记录⽇志以及执</p><p>行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性。</p><p>使用 useEffect 完成副作用操作。赋值给 useEffect 的函数会在组件渲染到屏幕之后执行。你可以</p><p>把 effffect 看作从 React 的纯函数式世界通往命令式世界的逃生通道。</p><p>默认情况下，effffect 将在每轮渲染结束后执行，但你可以选择让它 在只有某些值改变的时候 才执行。</p><p><strong>effffect</strong> <strong>的条件执行</strong></p><p>默认情况下，effffect 会在每轮组件渲染完成后执行。这样的话，一旦 effffect 的依赖发生变化，它就会被</p><p>重新创建。</p><p>然而，在某些场景下这么做可能会矫枉过正。比如，在上一章节的订阅示例中，我们不需要在每次组件</p><p>更新时都创建新的订阅，而是仅需要在 source props 改变时重新创建。</p><p>要实现这一点，可以给 useEffect 传递第二个参数，它是 effffect 所依赖的值数组。更新后的示例如</p><p>下</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> HookPage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 声明一个叫 “count” 的 state 变量，初始化为0</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">date</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setDate</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 与 componentDidMount 和 componentDidUpdate相似</span></span>
<span class="line"><span style="color:#61AFEF;">	useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 更新 title</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`You clicked </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> times\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, [</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#61AFEF;">	useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> timer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			setDate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, []);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;HookPage&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E5C07B;">date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLocaleTimeString</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>此时，只有当 useEffffect 第二个参数数组里的数值 改变后才会重新创建订阅。</p><p><strong>清除</strong> <strong>effffect</strong></p><p>通常，组件卸载时需要清除 effffect 创建的诸如订阅或计时器 ID 等资源。要实现这一点， useEffect</p><p>函数需返回一个清除函数，以防止内存泄漏，清除函数会在组件卸载前执行。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> timer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		setDate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> clearInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, []);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h5 id="_3-ref-hook-react-useref" tabindex="-1">(3). Ref Hook：React.useRef() <a class="header-anchor" href="#_3-ref-hook-react-useref" aria-label="Permalink to &quot;(3). Ref Hook：React.useRef()&quot;">​</a></h5><ul><li><p>(1). Ref Hook 可以在函数组件中存储/查找组件内的标签或任意其它数据</p></li><li><p>(2). 作用：保存标签对象,功能与 React.createRef()一样</p></li><li><p>(3). 语法：</p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useRef</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> refInput</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useRef</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>(4).使用</p><ul><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#D19A66;font-style:italic;"> ref</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">refInput</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">refInput</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">current</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li></ul><h4 id="_3-自定义-hook" tabindex="-1">3.自定义 Hook <a class="header-anchor" href="#_3-自定义-hook" aria-label="Permalink to &quot;3.自定义 Hook&quot;">​</a></h4><p>有时候我们会想要在组件之间重用一些状态逻辑。目前为止，有两种主流方案来解决这个问题：高阶组</p><p>件和 render props。自定义 Hook 可以让你在不增加组件的情况下达到同样的目的。</p><p><strong>自定义</strong> <strong>Hook</strong> <strong>是一个函数，其名称以</strong> <strong>“use”</strong> <strong>开头，函数内部可以调用其他的</strong> <strong>Hook</strong>。</p><p>hooks/useMousePosition.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 因为要返回positions对象所以函数不能为React.FC了</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> useMousePosition</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">positions</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setPositions</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#61AFEF;">	useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;add effect&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#61AFEF;"> updateMouse</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			setPositions</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientX</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientY</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mousemove&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">updateMouse</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;remove effect&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;mousemove&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">updateMouse</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, []);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> positions</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#E06C75;"> useMousePosition</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>其他完整：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useEffect</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useMemo</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> CustomHookPage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 定义一个叫count的state变量，初始化为0</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 和didMount、didUpdate类似</span></span>
<span class="line"><span style="color:#61AFEF;">	useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count effect&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 只需要在count发生改变的时候执行就可以啦</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`点击了</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">次\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, [</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;自定义Hook&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#61AFEF;">useClock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toLocaleTimeString</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 自定义hook，命名必须以use开头</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> useClock</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">date</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setDate</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#61AFEF;">	useEffect</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;date effect&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 只需要在didMount时候执行就可以了</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> timer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			setDate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 清除定时器，类似willUnmount</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> clearInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, []);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> date</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h4 id="_4-hook-使用规则" tabindex="-1">4.<strong>Hook</strong> 使用规则 <a class="header-anchor" href="#_4-hook-使用规则" aria-label="Permalink to &quot;4.**Hook** 使用规则&quot;">​</a></h4><p>Hook 就是 JavaScript 函数，但是使用它们会有两个额外的规则：</p><ul><li>只能在<strong>函数最外层</strong>调用 Hook。不要在循环、条件判断或者子函数中调用。</li><li>只能在 <strong>React 的函数组件</strong> 中调用 Hook。不要在其他 JavaScript 函数中调用。（还有一个地方可以调用 Hook —— 就是自定义的 Hook 中。）</li></ul><h4 id="_5-hook-api-之-usememo-与-usecallback" tabindex="-1">5.Hook API 之 useMemo 与 useCallback <a class="header-anchor" href="#_5-hook-api-之-usememo-与-usecallback" aria-label="Permalink to &quot;5.Hook API 之 useMemo 与 useCallback&quot;">​</a></h4><p>文档：<a href="https://react.dev/reference/react" target="_blank" rel="noreferrer">Built-in React Hooks – React</a></p><p><strong>useMemo</strong>：</p><p>把“创建”函数和依赖项数组作为参数传入 useMemo ，它仅会在某个依赖项改变时才重新计算 memoized 值。这种优化有助于避免在每次渲染时都进行高开销的计算。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useMemo</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> UseMemoPage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> expensive</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useMemo</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;compute&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			sum</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//只有count变化，这里才重新执行</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, [</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setValue</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;UseMemoPage&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;expensive:</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">expensive</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> onChange</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><strong>useCallback</strong>：</p><p>把内联回调函数及依赖项数组作为参数传入 useCallback ，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。当你把回调函数传递给经过优化的并使用引用相等性去避免非必要渲染（例如 shouldComponentUpdate ）的子组件时，它将非常有用。</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">useState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useCallback</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">PureComponent</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> UseCallbackPage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">count</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setCount</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> addClick</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> useCallback</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			sum</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, [</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">setValue</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useState</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;UseCallbackPage&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">count</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setCount</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">input</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;">}</span><span style="color:#D19A66;font-style:italic;"> onChange</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> setValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">Child</span><span style="color:#D19A66;font-style:italic;"> addClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">addClick</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Child</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> PureComponent</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	render</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;child render&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">addClick</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;Child&lt;/</span><span style="color:#E06C75;">h3</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;font-style:italic;"> onClick</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">addClick</span><span style="color:#ABB2BF;">())</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;add&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps) 。</p><blockquote><p>注意</p><p>依赖项数组不会作为参数传给“创建”函数。虽然从概念上来说它表现为：所有“创建”函数中引用的</p><p>值都应该出现在依赖项数组中。未来编译器会更加智能，届时自动创建数组将成为可能。</p></blockquote><h3 id="_4-fragment-组件" tabindex="-1">4.Fragment 组件 <a class="header-anchor" href="#_4-fragment-组件" aria-label="Permalink to &quot;4.Fragment 组件&quot;">​</a></h3><h4 id="_1-作用" tabindex="-1">1.作用 <a class="header-anchor" href="#_1-作用" aria-label="Permalink to &quot;1.作用&quot;">​</a></h4><ul><li>可以不用必须有一个真实的 DOM 根标签了</li><li>div 包裹组件的层级不用这么多</li></ul><h4 id="_2-引入" tabindex="-1">2.引入 <a class="header-anchor" href="#_2-引入" aria-label="Permalink to &quot;2.引入&quot;">​</a></h4><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">Component</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Fragment</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-使用" tabindex="-1">3.使用 <a class="header-anchor" href="#_3-使用" aria-label="Permalink to &quot;3.使用&quot;">​</a></h4><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 可以指定key属性</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Fragment</span><span style="color:#D19A66;font-style:italic;"> key</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#D19A66;">1</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;&lt;</span><span style="color:#E5C07B;">Fragment</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">// 不可以指定属性</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;&gt;&lt;/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_5-context-祖组件与后代组件通信" tabindex="-1">5.Context：祖组件与后代组件通信 <a class="header-anchor" href="#_5-context-祖组件与后代组件通信" aria-label="Permalink to &quot;5.Context：祖组件与后代组件通信&quot;">​</a></h3><h4 id="_1-理解" tabindex="-1">1.理解 <a class="header-anchor" href="#_1-理解" aria-label="Permalink to &quot;1.理解&quot;">​</a></h4><p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p><h4 id="_2-使用祖组件与后代组件通信" tabindex="-1">2.使用祖组件与后代组件通信 <a class="header-anchor" href="#_2-使用祖组件与后代组件通信" aria-label="Permalink to &quot;2.使用祖组件与后代组件通信&quot;">​</a></h4><p>0.引入</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> React</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;react&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>1.创建 Context 容器对象：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> XxxContext</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> React</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createContext</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.渲染子组时，外面包裹 xxxContext.Provider, 通过 value 属性给后代组件传递数据：</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">xxxContext.Provider</span><span style="color:#D19A66;font-style:italic;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">数据</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;子组件&lt;/</span><span style="color:#E5C07B;">xxxContext.Provider</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>后代组件读取数据：(两种方式)</li></ol><p>1、类组件 声明</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">static</span><span style="color:#E06C75;"> contextType</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> xxxContext</span></span>
<span class="line"><span style="color:#E06C75;">声明接收context</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>2、函数组件与类组件都可以</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E5C07B;">xxxContext.Consumer</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">            {</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">               value</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                  // value就是context中的value数据 要显示的内容</span></span>
<span class="line"><span style="color:#E06C75;">                  return</span><span style="color:#98C379;"> \`名字是：</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">username</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">               )</span></span>
<span class="line"><span style="color:#C678DD;">             }</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E5C07B;">xxxContext.Consumer</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_3-注意" tabindex="-1">3.注意 <a class="header-anchor" href="#_3-注意" aria-label="Permalink to &quot;3.注意&quot;">​</a></h4><p>在应用开发中一般不用 context, 一般都用它的封装 react 插件</p><h3 id="_6-组件优化" tabindex="-1">6.组件优化 <a class="header-anchor" href="#_6-组件优化" aria-label="Permalink to &quot;6.组件优化&quot;">​</a></h3><ul><li><p>1.Component 的 2 个问题</p><ul><li>1.只要执行 setState(),即使不改变状态数据, 组件也会重新 render() ==&gt; 效率低</li><li>2.只当前组件重新 render(), 就会自动重新 render 子组件，纵使子组件没有用到父组件的任何数据 ==&gt; 效率低</li></ul></li><li><p>2.效率高的做法：只有当组件的 state 或 props 数据发生改变时才重新 render()</p></li><li><p>3.原因：Component 中的 shouldComponentUpdate()总是返回 true</p></li><li><p>4.解决：</p><ul><li><p>办法 1:</p></li><li><p>重写 shouldComponentUpdate()方法，比较新旧 state 或 props 数据, 如果有变化才返回 true, 如果没有返回 false</p></li><li><p>例子：</p></li><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">shouldComponentUpdate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nextProps</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">nextState</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">props</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 现在的目标</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">nextProps</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">nextState</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">// 接下来要变化的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // if(this.state.name === nextState.name) return false</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // else return true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 简化上面的注释写法</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> nextState</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>办法 2：使用 PureComponent</p></li><li><p>1.引入：<code>import React, { PureComponent } from &#39;react&#39;</code></p></li><li><p>2.使用：子组件或者父组件类继承的时候写</p></li><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Parent</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> PureComponent</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 或者</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> children</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> PureComponent</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>PureComponent 重写了 shouldComponentUpdate(), 只有 state 或 props 数据有变化才返回 true</p></li><li><p>注意:</p></li><li><p>只是进行 state 和 props 数据的浅比较, 如果只是数据对象内部数据变了, 返回 false</p></li><li><p>不要直接修改 state 数据, 而是要产生新数据</p></li><li><p>项目中一般使用 PureComponent 来优化</p></li><li><p>使用了 PureComponent 后 setState 不能这样写</p><ul><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ‘</span><span style="color:#E06C75;">老王</span><span style="color:#ABB2BF;">’</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unshift</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小刘&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对的写法</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setState</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;小刘&quot;</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">] });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>这两种 样子 写设置状态 都不会更新</p></li></ul></li></ul></li></ul><h3 id="_7-render-props" tabindex="-1">7.render props <a class="header-anchor" href="#_7-render-props" aria-label="Permalink to &quot;7.render props&quot;">​</a></h3><p>如何向组件内部动态传入带内容的结构(标签)?</p><ul><li>1.使用 children props: 通过组件标签体传入结构</li><li>2.使用 render props: 通过组件标签属性传入结构,而且可以携带数据，一般用 render 函数属性</li></ul><p>方法 1：children props</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">&gt;xxxx&lt;/</span><span style="color:#E5C07B;">B</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">children</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>问题: 如果 B 组件需要 A 组件内的数据, ==&gt; 做不到</p><p><strong>方法 2：render props</strong>：</p><ul><li>祖组件：<code>&lt;A render={(data) =&gt; &lt;C data={data}&gt;&lt;/C&gt;}&gt;&lt;/A&gt;</code></li><li>A 组件: 传给数据给子组件 C：<code>{this.props.render(data)}</code></li><li>C 组件: 读取父组件 A 传入的数据显示：<code>{this.props.data}</code></li><li>优势：编码更灵活 <ul><li>A 组件可以预留 <code>{this.props.render(data)}</code> ----更灵活可以传其他组件</li><li>类似于 Vue 的 slot 插槽技术</li></ul></li></ul><h3 id="_8-错误边界" tabindex="-1">8.错误边界 <a class="header-anchor" href="#_8-错误边界" aria-label="Permalink to &quot;8.错误边界&quot;">​</a></h3><h4 id="理解" tabindex="-1">理解 <a class="header-anchor" href="#理解" aria-label="Permalink to &quot;理解&quot;">​</a></h4><ul><li>后端接口返回 undefined 或出错</li><li>错误边界(Error boundary)：用来捕获后代组件错误，渲染出备用页面</li></ul><h4 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h4><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p><h4 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h4><p>在父组件使用 getDerivedStateFromError 配合 componentDidCatch</p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  hasError</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 生命周期函数，一旦后台组件报错，就会触发</span></span>
<span class="line"><span style="color:#E06C75;">static</span><span style="color:#61AFEF;"> getDerivedStateFromError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 在render之前触发</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回新的state</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        hasError</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 子组件 调用</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hasError</span><span style="color:#C678DD;"> ?</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;出错了&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E5C07B;">Child</span><span style="color:#ABB2BF;">/&gt;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 或者使用</span></span>
<span class="line"><span style="color:#61AFEF;">componentDidCatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 统计页面的错误。发送请求发送到后台</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_9-组件通信方式总结" tabindex="-1">9.组件通信方式总结 <a class="header-anchor" href="#_9-组件通信方式总结" aria-label="Permalink to &quot;9.组件通信方式总结&quot;">​</a></h3><ul><li>组件间的关系： <ul><li>父子组件</li><li>兄弟组件（非嵌套组件）</li><li>祖孙组件（跨级组件）</li></ul></li><li>几种通信方式： <ul><li>1.props： <ul><li>(1).children props</li><li>(2).render props</li></ul></li><li>2.消息订阅-发布： <ul><li>pubs-sub、event 等等</li></ul></li><li>3.集中式管理： <ul><li>redux、dva 等等</li></ul></li><li>4.conText: <ul><li>生产者-消费者模式</li></ul></li></ul></li><li>比较好的搭配方式： <ul><li>父子组件： <ul><li>props</li></ul></li><li>兄弟组件： <ul><li>消息订阅-发布</li><li>集中式管理</li></ul></li><li>祖孙组件(跨级组件)： <ul><li>消息订阅-发布</li><li>集中式管理</li><li>conText(开发用的少，封装插件用的多)</li></ul></li></ul></li></ul><h3 id="_10-react-suspense" tabindex="-1">10.React Suspense <a class="header-anchor" href="#_10-react-suspense" aria-label="Permalink to &quot;10.React Suspense&quot;">​</a></h3><h2 id="七、ui-组件库" tabindex="-1">七、UI 组件库 <a class="header-anchor" href="#七、ui-组件库" aria-label="Permalink to &quot;七、UI 组件库&quot;">​</a></h2><h3 id="ant-design-蚂蚁金服" tabindex="-1">Ant-Design(蚂蚁金服) <a class="header-anchor" href="#ant-design-蚂蚁金服" aria-label="Permalink to &quot;Ant-Design(蚂蚁金服)&quot;">​</a></h3><h4 id="网站" tabindex="-1">网站 <a class="header-anchor" href="#网站" aria-label="Permalink to &quot;网站&quot;">​</a></h4><p>1.官网：<a href="https://ant.design/index-cn" target="_blank" rel="noreferrer">https://ant.design/index-cn</a></p><p>2.Github：<a href="https://github.com/ant-design/ant-design/" target="_blank" rel="noreferrer">https://github.com/ant-design/ant-design/</a></p><p>基本使用：<a href="https://ant.design/docs/react/use-with-create-react-app-cn" target="_blank" rel="noreferrer">https://ant.design/docs/react/use-with-create-react-app-cn</a></p><h3 id="material-ui-国外" tabindex="-1">material-ui(国外) <a class="header-anchor" href="#material-ui-国外" aria-label="Permalink to &quot;material-ui(国外)&quot;">​</a></h3><h4 id="material-ui-网站" tabindex="-1">material-ui 网站 <a class="header-anchor" href="#material-ui-网站" aria-label="Permalink to &quot;material-ui 网站&quot;">​</a></h4><p>1.官网：<a href="http://www.material-ui.com/#/" target="_blank" rel="noreferrer">http://www.material-ui.com/#/</a> 2.github：<a href="https://github.com/callemall/material-ui" target="_blank" rel="noreferrer">https://github.com/callemall/material-ui</a></p><h3 id="element-react" tabindex="-1">element -React <a class="header-anchor" href="#element-react" aria-label="Permalink to &quot;element -React&quot;">​</a></h3><h4 id="element-react-网站" tabindex="-1">element -React 网站 <a class="header-anchor" href="#element-react-网站" aria-label="Permalink to &quot;element -React 网站&quot;">​</a></h4><p>1.官网：<a href="https://elemefe.github.io/element-react/index" target="_blank" rel="noreferrer">https://elemefe.github.io/element-react/index</a> 2.GitHub：<a href="https://link.zhihu.com/?target=https%3A//github.com/eleme/element-react" target="_blank" rel="noreferrer">https://link.zhihu.com/?target=https%3A//github.com/eleme/element-react</a></p><h2 id="八、项目打包和本地运行" tabindex="-1">八、项目打包和本地运行 <a class="header-anchor" href="#八、项目打包和本地运行" aria-label="Permalink to &quot;八、项目打包和本地运行&quot;">​</a></h2><p>1.编译打包 react 项目，生成 build 文件夹和编译好的文件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.全局安装服务器</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> serve</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.在项目当前根目录下基于服务器运行</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">server</span><span style="color:#98C379;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>以 build 文件夹在服务器中运行</p>`,211))])}const A=p(r,[["render",c]]);export{C as __pageData,A as default};
