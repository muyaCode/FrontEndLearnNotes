import{_ as l,c as i,o as s,ah as t}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/JavaScript%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.DjlNvZ4b.jpg",r="/FrontEndLearnNotes/assets/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4.CkJNbWXn.jpg",b=JSON.parse('{"title":"JavaScript 的内存管理","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/JavaScript的运行和原理/JavaScript的内存管理.md","filePath":"Document/JavaScript笔记/JavaScript的运行和原理/JavaScript的内存管理.md","lastUpdated":1750954157000}'),n={name:"Document/JavaScript笔记/JavaScript的运行和原理/JavaScript的内存管理.md"};function o(p,a,c,u,d,h){return s(),i("div",null,a[0]||(a[0]=[t('<h1 id="javascript-的内存管理" tabindex="-1">JavaScript 的内存管理 <a class="header-anchor" href="#javascript-的内存管理" aria-label="Permalink to &quot;JavaScript 的内存管理&quot;">​</a></h1><h2 id="认识内存管理" tabindex="-1">认识内存管理 <a class="header-anchor" href="#认识内存管理" aria-label="Permalink to &quot;认识内存管理&quot;">​</a></h2><ul><li>不管什么样的编程语言，在代码的执行过程中都是需要给它分配内存的，不同的是某些编程语言需要我们自己手动的管理内存，某些编程语言会可以自动帮助我们管理内存：</li><li>不管以什么样的方式来管理内存，内存的管理都会有如下的生命周期： <ul><li>第一步：分配申请你需要的内存(申请);</li><li>第二步：使用分配的内存(存放一些东西，比如对象等);</li><li>第三步：不需要使用时，对其进行释放;</li></ul></li><li>不同的编程语言对于第一步和第三步会有不同的实现： <ul><li>手动管理内存：比如 C、C++，包括早期的 OC，都是需要手动来管理内存的申请和释放的(malloc 和 free 函);</li><li>自动管理内存：比如 JavaJavaScript、Python、Swift、Dart 等，它们有自动帮助我们管理内存</li></ul></li><li>我们可以知道 JavaScript 通常情况下是不需要手动来管理的。</li></ul><h2 id="javascript-内存管理" tabindex="-1">JavaScript 内存管理 <a class="header-anchor" href="#javascript-内存管理" aria-label="Permalink to &quot;JavaScript 内存管理&quot;">​</a></h2><ul><li>JavaScript 会在定义变量时为我们分配内存</li><li>但是内存分配方式是一样的吗? <ul><li>JS 对于基本数据类型内存的分配会在执行时直接在栈空间进行分配;</li><li>JS 对于复杂数据类型内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针返回值变量引用;</li></ul></li></ul><p><img src="'+e+`" alt="JavaScript内存管理"></p><h2 id="javascript-的垃圾回收机制" tabindex="-1">JavaScript 的垃圾回收机制 <a class="header-anchor" href="#javascript-的垃圾回收机制" aria-label="Permalink to &quot;JavaScript 的垃圾回收机制&quot;">​</a></h2><ul><li>因为内存的大小是有限的，所以当内存不再需要的时候，我们需要对其进行释放，以便腾出更多的内存空间。</li><li>在手动管理内存的语言中，我们需要通过一些方式自己来释放不再需要的内存，比如 free 函数： <ul><li>但是这种管理的方式其实非常的低效，影响我们编写逻辑的代码的效率</li><li>并且这种方式对开发者的要求也很高，并且一不小心就会产生内存泄露</li></ul></li><li>所以大部分现代的编程语言都是有自己的垃圾回收机制： <ul><li>垃圾回收的英文是 Garbage Collection，简称 GC；</li><li>对于那些不再使用的对象，我们都称之为是垃圾，它需要被回收，以释放更多的内存空间;</li><li>而我们的语言运行环境，比如 Java 的运行环境 JVM，JavaScript 的运行环境 js 引擎都会内存 垃圾回收器；</li><li>垃圾回收器我们也会简称为 GC，所以在很多地方你看到 GC 其实指的是垃圾回收器；</li></ul></li><li>但是这里又出现了另外一个很关键的问题：GC 怎么知道哪些对象是不再使用的呢？ <ul><li>这里就要用到<strong>GC 的算法</strong>了</li></ul></li></ul><h3 id="常见的-gc-算法" tabindex="-1">常见的 GC 算法 <a class="header-anchor" href="#常见的-gc-算法" aria-label="Permalink to &quot;常见的 GC 算法&quot;">​</a></h3><h4 id="引用计数" tabindex="-1">引用计数 <a class="header-anchor" href="#引用计数" aria-label="Permalink to &quot;引用计数&quot;">​</a></h4><ul><li>当一个对象有一个引用指向它时，那么这个对象的引用就+1，当一个对象的引用为 0 时，这个对象就可以被销毁掉;</li><li>这个算法有一个很大的弊端就是会产生循环引用；</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这个算法有一个很大的弊端就是会产生循环引用</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">obj2</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">obj1</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="标记清除" tabindex="-1">标记清除 <a class="header-anchor" href="#标记清除" aria-label="Permalink to &quot;标记清除&quot;">​</a></h4><ul><li>这个算法是设置一个根对象(root object)，垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对于哪些没有引用到的对象，就认为是不可用的对象;</li><li>这个算法可以很好的解决循环引用的问题；</li></ul><p>原理图：M 和 N 是清除的</p><p><img src="`+r+'" alt="标记清除"></p><ul><li>JS 引擎比较广泛的采用的就是标记清除算法，当然类似于 V8 引擎为了进行更好的优化，它在算法的实现细节上也会结合些其他的算法</li></ul>',17)]))}const m=l(n,[["render",o]]);export{b as __pageData,m as default};
