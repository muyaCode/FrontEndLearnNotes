import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/vs-01.Cbk1U3Mt.png",o="/FrontEndLearnNotes/assets/vs-02.I7uCeR9U.png",r="/FrontEndLearnNotes/assets/vs-03.e12r6vXF.png",t="/FrontEndLearnNotes/assets/arch-01.DklG8O_u.png",c="/FrontEndLearnNotes/assets/arch-02.Dl9jSQCc.png",B="/FrontEndLearnNotes/assets/demo-01.CaqfJcQ4.png",m=JSON.parse('{"title":"Tauri原理","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Tauri框架/Tauri原理.md","filePath":"Document/跨平台桌面端开发/Tauri框架/Tauri原理.md","lastUpdated":1750954157000}'),i={name:"Document/跨平台桌面端开发/Tauri框架/Tauri原理.md"};function y(F,s,b,u,A,C){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="tauri原理" tabindex="-1">Tauri原理 <a class="header-anchor" href="#tauri原理" aria-label="Permalink to &quot;Tauri原理&quot;">​</a></h1><p>参考：<a href="https://archie-zola.netlify.app/posts/tauri-intro/" target="_blank" rel="noreferrer">浅谈 tauri (archie-zola.netlify.app)</a></p><p>本文旨在介绍 tauri 的相关背景知识、性能及可用性表现、以及一点架构设计思想。</p><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p><a href="https://github.com/tauri-apps/tauri" target="_blank" rel="noreferrer">tauri</a> 用于构建跨平台桌面应用，对标的是 <a href="https://github.com/electron/electron" target="_blank" rel="noreferrer">electron</a>，但完全由 rust 开发。</p><p>Tauri 的设计思路与 electron 基本完全一致，即「使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序」，最后的应用由 Web APP + Native Backend 组成。</p><ul><li>Web APP 依托于现代前端技术，负责构建在各个平台下，效果基本一致的图形化界面。</li><li>Native Backend 则负责与操作系统交互，为 Web APP 拓展一些原生的能力。</li></ul><p>这种设计要比使用传统的 GUI 库构建桌面应用容易得多，但最后应用的图形界面还是需要运行在浏览器引擎的基础之上。</p><p>最早使用这种设计方式的 electron 由于其相当低的上手难度和 Javascript 极其丰富的社区生态，在最近 GitHub 上的 star 数量达到了夸张的 100k；但其为人诟病的最多的一点，就是怎样都无法优化的、颇为庞大的应用体积。</p><p>接下来让我们看看 tauri 在应用体积、运行开销、性能等指标上，是怎样做到对 electron 的「碾压般」的提升的。</p><h2 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;对比&quot;">​</a></h2><blockquote><p>所有数据来自于 <a href="https://tauri.studio/benchmarks" target="_blank" rel="noreferrer">https://tauri.studio/benchmarks</a></p></blockquote><p><strong>产物体积对比：</strong></p><p>2.74MB / 127.74MB</p><p>electron 由于需要打包 chromium 和 V8 runtime，在应用体积方面，tauri 自然是有相当大的优势，更小的应用体积对桌面应用的分发和用户的体验都能带来正向的提升。</p><p><img src="'+e+'" alt="vs-01"></p><p><strong>内存占用对比：</strong></p><p>Tauri 由于使用 rust 作为与系统交互的后端，语言层面上就要更贴近系统级，因此内存开销方面相比 V8 要小很多。 <img src="'+o+'" alt="vs-02"></p><p><strong>功能以及运行环境对比：</strong></p><p>运行环境方面，tauri 使用 WRY 作为与渲染引擎交互的中间层（具体我们后面会讲到），并且与操作系统交互的后端也完全由 rust 完成；不同于 javascript 生态，tauri 最后的产物中 rust 的部分均会被编译成二进制格式，因此无需包含 runtime，也能大大增加应用逆向解包的成本。</p><p>而二者在功能上差异不大，但 tauri 明确表示有支持移动端应用的计划。</p><p><img src="'+r+'" alt="vs-03"></p><h2 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h2><blockquote><p>参考：<a href="https://github.com/tauri-apps/tauri/blob/dev/ARCHITECTURE.md" target="_blank" rel="noreferrer">tauri/ARCHITECTURE.md at dev · tauri-apps/tauri · GitHub</a></p></blockquote><h3 id="整体流程" tabindex="-1">整体流程 <a class="header-anchor" href="#整体流程" aria-label="Permalink to &quot;整体流程&quot;">​</a></h3><p>Tauri 的整体架构，自顶向下可以分为三层：</p><ol><li>tauri-app：整合所有模块，读取项目配置，完成最终 APP 产物的打包；主要负责初始化 Web APP 与底层系统 API 的通信环境，注入全局 API，管理应用更新等。</li><li><a href="https://github.com/tauri-apps/wry" target="_blank" rel="noreferrer">WRY</a>：一个跨平台 Webview 渲染库，会根据各平台选择特定的浏览器引擎启动 Webview，抹平平台差异，暴露统一的上层 API。</li><li><a href="https://github.com/tauri-apps/tao" target="_blank" rel="noreferrer">TAO</a>：跨平台应用窗口管理器，主要用于构建各平台下的应用主窗口。</li></ol><p><img src="'+t+'" alt="arch-01"></p><p>Tauri 除了完全使用 rust 开发以外，与 electron 最大的不同之处就在于，没有使用直接为每个应用单独集成一个 chromium 环境，而是直接使用操作系统内置的浏览器引擎执行 Web APP，也就是这里提到的：WRY。</p><p>在当前版本的 WRY 中，各平台下的浏览器引擎选取规则如下：</p><p><img src="'+c+`" alt="arch-02"></p><p>简单看一下 WRY 在 macOS 下是如何启动一个 webview 的</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">wry</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;()&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">  use</span><span style="color:#E5C07B;"> wry</span><span style="color:#ABB2BF;">::{</span></span>
<span class="line"><span style="color:#E5C07B;">    application</span><span style="color:#ABB2BF;">::{</span></span>
<span class="line"><span style="color:#E5C07B;">      event</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Event</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">StartCause</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">WindowEvent</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#E5C07B;">      event_loop</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">ControlFlow</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">EventLoop</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#E5C07B;">      window</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">WindowBuilder</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E5C07B;">    webview</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">WebViewBuilder</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 此处的 event_loop 非 js 的 event loop，而是 tao 用来响应窗口事件的</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> event_loop</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> EventLoop</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 新建一个窗口</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> window</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> WindowBuilder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">with_title</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello World&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">event_loop</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 在该窗口启动一个 webview</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> webview</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> WebViewBuilder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">)?</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">with_url</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;https://vhsagj.smartapps.baidu.com/&quot;</span><span style="color:#ABB2BF;">)?</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 启动 event loop</span></span>
<span class="line"><span style="color:#E06C75;">  event_loop</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">move</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">control_flow</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">control_flow</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ControlFlow</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Wait</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> event</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      Event</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">NewEvents</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">StartCause</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Init</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Wry has started!&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">      Event</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">WindowEvent</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        event</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">WindowEvent</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">CloseRequested</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        ..</span></span>
<span class="line"><span style="color:#ABB2BF;">      } =&gt; *</span><span style="color:#E06C75;">control_flow</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ControlFlow</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Exit</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      _</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">        dbg!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">webview</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">window</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">inner_size</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>编译并执行以上 rust 代码，就会启动一个窗口，使用右键点击则可以开启 inspector：</p><p><img src="`+B+`" alt="demo-01"></p><p>先不关心窗口管理相关的逻辑，接下来主要关注这几行代码，让我们深入看看 WRY 是怎么启动 webview 的。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">  // 在该窗口启动一个 webview</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> webview</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> WebViewBuilder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">)?</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">with_url</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;https://vhsagj.smartapps.baidu.com/&quot;</span><span style="color:#ABB2BF;">)?</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()?;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>WebViewBuilder 是 WRY 暴露出来的接口，主要进行一些在启动系统 webview 之前的配置封装和初始化工作；在获取到 TAO 的 window 窗口对象后并初始化配置后，会开始调用系统的 API，来启动 webview，在 macOS 上，这通过调用 objc 代码来实现。</p><p>Rust 与 objc 运行时的绑定则依赖 <a href="https://crates.io/crates/objc" target="_blank" rel="noreferrer">https://crates.io/crates/objc</a> 。</p><p>上面的代码最后会调用 macOS 系统提供的 webkit 接口来新建一个 WKWebview。具体实现参见： <a href="https://github.com/tauri-apps/wry/blob/dev/src/webview/wkwebview/mod.rs%EF%BC%8C" target="_blank" rel="noreferrer">https://github.com/tauri-apps/wry/blob/dev/src/webview/wkwebview/mod.rs</a></p><p>这里不再赘述，在各个平台下，WRY 内部的处理逻辑基本与此类似。</p><p>综上所述，tauri 整体的设计思路与 electron 不同之处可以总结为以下两点：</p><ol><li>舍弃 chromium，直接使用操作系统内置的浏览器引擎，通过 WRY 来抹平浏览器的接口差异，<strong>但前端应用在运行时实际上还是可能会遇到平台兼容性问题。</strong></li><li>舍弃 node.js 运行时，使用 rust 与操作系统交互。</li></ol><h3 id="如何通信" tabindex="-1">如何通信？ <a class="header-anchor" href="#如何通信" aria-label="Permalink to &quot;如何通信？&quot;">​</a></h3><p>TL;DR</p><p><strong>在 WRY 这一层，会基于各平台 Webview 暴露的 JS 到 Webview native 的接口，使用</strong> <a href="https://www.jsonrpc.org/" target="_blank" rel="noreferrer">JSON-RPC</a> <strong>作为通信格式，并抹平平台差异。</strong></p><p>Tauri 提供了「指令系统」，用来做 JS 与 rust 的异步通信。</p><p>在 macOS 上，JS 到 native 层是基于 <a href="https://developer.apple.com/documentation/webkit/wkscriptmessagehandler" target="_blank" rel="noreferrer">WKScriptMessageHandler</a> 实现的；WRY 会在创建 Webview 的时候，使用 <a href="https://developer.apple.com/documentation/webkit/wkusercontentcontroller/1537172-addscriptmessagehandler?language=objc" target="_blank" rel="noreferrer">addScriptMessageHandler</a> 注册一个全局通信函数到 JS context，并传入用于接收消息的函数指针。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Message handler</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> rpc_handler_ptr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rpc_handler</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> attributes</span><span style="color:#ABB2BF;">.rpc_handler {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> cls</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ClassDecl</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;WebViewDelegate&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">class!</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">NSObject</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> cls</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> match</span><span style="color:#E06C75;"> cls</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">      Some</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> cls</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">        cls</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add_ivar</span><span style="color:#ABB2BF;">::&lt;*</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> c_void</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&quot;function&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        cls</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add_method</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">          sel!</span><span style="color:#ABB2BF;">(userContentController:didReceiveScriptMessage:),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">          // did_receive 是一个 extern 函数，在 messageHandlers 接收到 JS 传来的消息时会被调用。</span></span>
<span class="line"><span style="color:#E06C75;">          did_receive</span><span style="color:#C678DD;"> as</span><span style="color:#C678DD;"> extern</span><span style="color:#98C379;"> &quot;C&quot;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Sel</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">        );</span></span>
<span class="line"><span style="color:#E06C75;">        cls</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">register</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#E5C07B;">      None</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">class!</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">WebViewDelegate</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> handler</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> msg_send!</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">cls</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">new</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> rpc_handler_ptr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">into_raw</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">rpc_handler</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">())));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里将 rpc_handler 的指针保存到了一个 objc 对象上的 function 字段上。在 did_receive 时会取出来。</span></span>
<span class="line"><span style="color:#ABB2BF;">    (*</span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">set_ivar</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;function&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">rpc_handler_ptr</span><span style="color:#C678DD;"> as</span><span style="color:#ABB2BF;"> *</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> _</span><span style="color:#C678DD;"> as</span><span style="color:#ABB2BF;"> *</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> c_void</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> external</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> NSString</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;external&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 此处会为 JS context 绑定一个全局函数： window.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;)</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _</span><span style="color:#ABB2BF;">: () </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> msg_send!</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">manager</span><span style="color:#ABB2BF;">, addScriptMessageHandler:</span><span style="color:#E06C75;">handler</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">external</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">    rpc_handler_ptr</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    null_mut</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>基于 webkit 提供的通信能力，WRY 会再暴露一个经过简单封装的 RPC 处理逻辑，这也是最后 <a href="https://github.com/tauri-apps/tauri/tree/dev/tooling/api" target="_blank" rel="noreferrer">tauri Javascript API </a>中的底层逻辑：</p><ol><li>将数据包装为 JSON-RPC 的格式。</li><li>在全局维护一个 promise 队列，用于触发异步回调。</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 在启动 webview 的同时，WRY 会注入这样一段 JS 代码到全局</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">  function</span><span style="color:#61AFEF;"> Rpc</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> self</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_promises</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 当任务完成，会通过 evaluateJavaScript 来执行此处的代码，触发 promise</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Private internal function called on error</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_error</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_promises</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_promises</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        delete</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_promises</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Private internal function called on result</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_promises</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_promises</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        delete</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_promises</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Call remote method and expect a reply from the handler</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 需要回调时，保存一个 promise 到全局队列</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      let</span><span style="color:#E06C75;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Uint32Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">      window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">crypto</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRandomValues</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> id</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> array</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> params</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> payload</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">jsonrpc</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;2.0&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> promise</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_promises</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">reject</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">      });</span></span>
<span class="line"><span style="color:#E5C07B;">      window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">external</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">invoke</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> promise</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Send a notification without an \`id\` so no reply is expected.</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">method</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> params</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> payload</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">jsonrpc</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;2.0&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E5C07B;">      window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">external</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">invoke</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E5C07B;">  window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">external</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">external</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">  window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">external</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">rpc</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Rpc</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">  window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">rpc</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">external</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">rpc</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p><strong>基于这样的通信架构，tauri 可以实现使用前端（JS）作为应用主逻辑，而将一些需要高性能、调用系统能力的任务，通过指令丢给 rust 去做。</strong></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>想要打败 electron 的选手很多，但目前看 tauri 可能是最接近成功的一位了。 为了解决 electron 的体积问题，tauri 选择直接使用系统内置的 webview，这样的选择也是基于目前的发展趋势的，即各家操作系统内置的浏览器生态在不断进步，尤其是之前被大多数人诟病的 Windows 平台。微软对新版 Edge 中内置的 webview2 青眼有加，大型的桌面应用如 Office，outlook 都在推进升级至 webview2。从趋势上来看，操作系统内置的浏览器生态是在不断进步的，tauri 自然也能享受到这些红利。</p><p>而 rust 语言的逐渐繁荣，也更加推动了 tauri 的生态发展，大量的贡献者在短时间内快速融入开源社区，tauri 的核心开发团队也始终坚持着 FLOSS （自由及开放源代码软件）的开放态度，这都使得 tauri 更具有成为成熟的解决方案的潜力。</p><p>但目前的版本仍处于快速迭代期，还存在一些问题：</p><ul><li>对于前端网页而言，实际上并没有完全抹平平台差异，前端开发时仍需要考虑<strong>平台兼容性。</strong></li><li>线下测试来看，webview 和 rust 的性能虽然足够好，但在一些旧的设备上，窗口和 webview 创建的耗时<strong>仍然不可忽视。</strong></li><li>存在很多 bug，这些 bug 大多不直接来自于 tauri，而是来自于各平台下的 webview 接口，因此<strong>bug 的解决周期也都相当长，目前很难直接用于生产环境。</strong></li><li>文档和社区还是不够完善，大多数时间还需要<strong>自己扒代码</strong>。（但正在快速发展，就在这篇文档写完的时候，大概两周左右的时间，官网的文档就经历了大规模的优化和更新）</li></ul>`,58)]))}const d=n(i,[["render",y]]);export{m as __pageData,d as default};
