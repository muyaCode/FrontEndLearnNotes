import{_ as e,c as l,o as s,ah as t}from"./chunks/framework.DqD713j2.js";const d=JSON.parse('{"title":"NodeJS 爬虫系统开发","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Node实战/NodeJS爬虫系统开发.md","filePath":"Document/Node后端框架开发/Node实战/NodeJS爬虫系统开发.md","lastUpdated":1750954157000}'),o={name:"Document/Node后端框架开发/Node实战/NodeJS爬虫系统开发.md"};function r(i,a,n,p,u,c){return s(),l("div",null,a[0]||(a[0]=[t(`<h1 id="nodejs-爬虫系统开发" tabindex="-1">NodeJS 爬虫系统开发 <a class="header-anchor" href="#nodejs-爬虫系统开发" aria-label="Permalink to &quot;NodeJS 爬虫系统开发&quot;">​</a></h1><p>Nodejs 因为基于 JavaScript 的语法，对解析 html 标签有着天然的优势</p><h2 id="爬虫系统以及-robots-协议介绍" tabindex="-1">爬虫系统以及 Robots 协议介绍 <a class="header-anchor" href="#爬虫系统以及-robots-协议介绍" aria-label="Permalink to &quot;爬虫系统以及 Robots 协议介绍&quot;">​</a></h2><p><strong>爬虫</strong>，是一种自动获取网页内容的程序。是搜索引擎的重要组成部分，因此搜索引擎优化很大程度上就是针对爬虫而做出的优化。</p><p><strong>robots.txt</strong>是一个文本文件，robots.txt 是一个协议，不是一个命令。 robots.txt 是爬虫要查看的第一个文件。 robots.txt 文件告诉爬虫在服务器上什么文件是可以被查看的，搜索机器人就会按照该文件中的内容来确定访问的范围。</p><h2 id="使用环境和技术栈" tabindex="-1">使用环境和技术栈 <a class="header-anchor" href="#使用环境和技术栈" aria-label="Permalink to &quot;使用环境和技术栈&quot;">​</a></h2><p>Express</p><p>Axios</p><p>Cheerio</p><h2 id="实现命令行工具" tabindex="-1">实现命令行工具 <a class="header-anchor" href="#实现命令行工具" aria-label="Permalink to &quot;实现命令行工具&quot;">​</a></h2><p>什么是命令行工具：</p><ul><li>客户端软件</li><li>用户交互</li><li>面向开发者</li><li>...</li></ul><p>开发命令行工具步骤：</p><ul><li>process.argv 与解析 process.argv</li><li>npm install commander</li><li>npm install optimist</li><li>npm install prompt</li><li>输出帮助信息</li><li>输出彩色文本</li></ul><p>运行脚本到命令执行总共需要几步：</p><ul><li>脚本与运行脚本</li><li>设置默认的运行时</li><li>使用 chmod 分配执行权限</li><li>设置环境变量</li><li>开始使用命令行</li></ul><h2 id="爬虫流程" tabindex="-1">爬虫流程 <a class="header-anchor" href="#爬虫流程" aria-label="Permalink to &quot;爬虫流程&quot;">​</a></h2><h3 id="_1-目标-确定你想要获取的数据" tabindex="-1">1-目标：确定你想要获取的数据 <a class="header-anchor" href="#_1-目标-确定你想要获取的数据" aria-label="Permalink to &quot;1-目标：确定你想要获取的数据&quot;">​</a></h3><ul><li><ol><li>确定想要的数据在什么页面上（一般详细的数据会在详情页）</li></ol></li><li><ol start="2"><li>确定在哪些页面可以链接到这些页面（一般分类列表页面会有详情页的链接数据）</li></ol></li><li><ol start="3"><li>寻找页面之间和数据之间的规律</li></ol></li></ul><h3 id="_2-分析页面" tabindex="-1">2-分析页面 <a class="header-anchor" href="#_2-分析页面" aria-label="Permalink to &quot;2-分析页面&quot;">​</a></h3><ul><li><ol><li>获取数据的方式（正则，cherrio）</li></ol></li><li><ol start="2"><li>分析数据是通过 ajax 请求的数据，还是 html 里自带的数据</li></ol></li><li><ol start="3"><li>如果是通过 AJAX 请求的数据，那么需要获取 ajax 请求的链接，一般请求到的数据都为 JSON 格式数据，那么就会比较容易解析。</li></ol></li><li><ol start="4"><li>如何数据在 HTML 里面，那么就用 cherrio 通过选择器将内容选中</li></ol></li></ul><h3 id="_3-编写单个数据获取的案例" tabindex="-1">3-编写单个数据获取的案例 <a class="header-anchor" href="#_3-编写单个数据获取的案例" aria-label="Permalink to &quot;3-编写单个数据获取的案例&quot;">​</a></h3><ul><li><ol><li>解析出分类页的链接地址</li></ol></li><li><ol start="2"><li>解析出列表页的链接地址</li></ol></li><li><ol start="3"><li>解析出详情页的链接地址</li></ol></li><li><ol start="4"><li>解析详情页里面想要获取的数据</li></ol></li><li><ol start="5"><li>将数据进行保存到本地或者是数据库</li></ol></li></ul><h3 id="_4-如果遇到阻碍进行反爬虫对抗" tabindex="-1">4-如果遇到阻碍进行反爬虫对抗 <a class="header-anchor" href="#_4-如果遇到阻碍进行反爬虫对抗" aria-label="Permalink to &quot;4-如果遇到阻碍进行反爬虫对抗&quot;">​</a></h3><ul><li><ol><li>User-Agent 是否是正常浏览器的信息</li></ol></li><li><ol start="2"><li>将请求头设置成跟浏览器一样的内容</li></ol></li><li><ol start="3"><li>因为爬虫的爬取速度过快，会导致封 IP 号。</li></ol><ul><li><p>1.那么可以降低速度进行解决</p></li><li><p>2.可以使用代理进行解决</p></li></ul></li><li><ol start="4"><li>如果设置需要凭证，那么可以采用无界浏览器真实模拟。</li></ol></li></ul><h3 id="项目解析" tabindex="-1">项目解析 <a class="header-anchor" href="#项目解析" aria-label="Permalink to &quot;项目解析&quot;">​</a></h3><ul><li><p>processer 负责管理爬虫的基本逻辑</p></li><li><p>fetcher 负责解决代理 IP，超时等问题</p></li><li><p>strategy 负责处理每次爬取失败后的策略</p></li></ul><h2 id="请求库" tabindex="-1">请求库 <a class="header-anchor" href="#请求库" aria-label="Permalink to &quot;请求库&quot;">​</a></h2><h3 id="内置" tabindex="-1">内置 <a class="header-anchor" href="#内置" aria-label="Permalink to &quot;内置&quot;">​</a></h3><ul><li><p>HTTP</p></li><li><p>HTTPS</p></li></ul><h3 id="request" tabindex="-1">request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;request&quot;">​</a></h3><ul><li><p>作者停止更新</p></li><li><p><a href="https://github.com/request/request" target="_blank" rel="noreferrer">https://github.com/request/request</a></p></li></ul><h3 id="axios" tabindex="-1">axios <a class="header-anchor" href="#axios" aria-label="Permalink to &quot;axios&quot;">​</a></h3><ul><li><p>axios 优势会更明显，前后端通杀，前后端调用的方式一致。</p></li><li><p><a href="https://github.com/axios/axios" target="_blank" rel="noreferrer">https://github.com/axios/axios</a></p></li></ul><h3 id="superagent" tabindex="-1">superagent <a class="header-anchor" href="#superagent" aria-label="Permalink to &quot;superagent&quot;">​</a></h3><ul><li><p><a href="https://github.com/visionmedia/superagent" target="_blank" rel="noreferrer">https://github.com/visionmedia/superagent</a></p></li><li><p><a href="https://visionmedia.github.io/superagent/" target="_blank" rel="noreferrer">https://visionmedia.github.io/superagent/</a></p></li></ul><p>例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">request</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/pet&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Manny&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">species</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cat&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;X-API-Key&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;foobar&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Accept&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;application/json&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;yay got &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="crawler" tabindex="-1">crawler <a class="header-anchor" href="#crawler" aria-label="Permalink to &quot;crawler&quot;">​</a></h3><ul><li><p><a href="https://github.com/bda-research/node-crawler/blob/master/CHANGELOG.md" target="_blank" rel="noreferrer">https://github.com/bda-research/node-crawler/blob/master/CHANGELOG.md</a></p></li><li><p><a href="https://www.jianshu.com/p/50450791ce51" target="_blank" rel="noreferrer">https://www.jianshu.com/p/50450791ce51</a></p></li><li><p><a href="http://node-crawler.org/" target="_blank" rel="noreferrer">http://node-crawler.org/</a></p></li></ul><h2 id="爬虫解析框架" tabindex="-1">爬虫解析框架 <a class="header-anchor" href="#爬虫解析框架" aria-label="Permalink to &quot;爬虫解析框架&quot;">​</a></h2><ul><li><p>cheerio</p></li><li><p>jsdom</p></li></ul><h2 id="模拟用户操纵浏览器" tabindex="-1">模拟用户操纵浏览器 <a class="header-anchor" href="#模拟用户操纵浏览器" aria-label="Permalink to &quot;模拟用户操纵浏览器&quot;">​</a></h2><h3 id="playright" tabindex="-1">Playright <a class="header-anchor" href="#playright" aria-label="Permalink to &quot;Playright&quot;">​</a></h3><h3 id="puppeteer" tabindex="-1">puppeteer <a class="header-anchor" href="#puppeteer" aria-label="Permalink to &quot;puppeteer&quot;">​</a></h3><p>官网：<a href="https://zhaoqize.github.io/puppeteer-api-zh_CN/#/" target="_blank" rel="noreferrer">https://zhaoqize.github.io/puppeteer-api-zh_CN/#/</a></p><h4 id="常用-api" tabindex="-1">常用 API <a class="header-anchor" href="#常用-api" aria-label="Permalink to &quot;常用 API&quot;">​</a></h4><ul><li><p>打开新标签页</p><ul><li>let page = await browser.newPage()</li></ul></li><li><p>获取所有浏览器中的页面</p><ul><li>let pages = await browser.pages()</li></ul></li><li><p>关闭浏览器</p><ul><li>browser.close()</li></ul></li><li><p>将页面跳转至</p><ul><li>await page.goto(url)</li></ul></li><li><p>获取页面的对象,并进行操作</p><ul><li>let btn = await page.$(selector) let input = await page.$(selector) //点击按钮 btn.click() //聚焦到输入框 input.forcus()</li></ul></li><li><p>在页面上写入内容或者键盘按键</p><ul><li>await page.keyboard.type(&#39;Hello World!&#39;); await page.keyboard.press(&#39;ArrowLeft&#39;); await page.keyboard.down(&#39;Shift&#39;);</li></ul></li><li><p>设置鼠标的移动</p><ul><li>await page.mouse.move(0, 0); await page.mouse.down(); await page.mouse.move(0, 100); await page.mouse.move(100, 100); await page.mouse.move(100, 0); await page.mouse.move(0, 0); await page.mouse.up();</li></ul></li><li><p>截获页面请求</p><ul><li>await page.setRequestInterception(true); page.on(&#39;request&#39;, request =&gt; { request.url()//可以获取请求的网址，request，包含了所有的请求信息 if(你想要的条件){ request.continue() }else{ request.abort([errorCode]) } });</li></ul></li><li><p>获取浏览器的信息和内容</p><ul><li>page.$eval(selector,(item)=&gt;{return item}) page.$$eval(selectors,(items)=&gt;{return items})</li></ul></li></ul><h3 id="selenium" tabindex="-1">Selenium <a class="header-anchor" href="#selenium" aria-label="Permalink to &quot;Selenium&quot;">​</a></h3><p>官网</p><ul><li><p><a href="https://www.selenium.dev/zh-cn/" target="_blank" rel="noreferrer">https://www.selenium.dev/zh-cn/</a></p></li><li><p>中文网</p><ul><li><a href="http://www.selenium.org.cn/" target="_blank" rel="noreferrer">http://www.selenium.org.cn/</a></li></ul></li></ul><p>安装</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> selenium-webdriver</span><span style="color:#D19A66;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>下载地址：<a href="https://www.npmjs.com/package/selenium-webdriver" target="_blank" rel="noreferrer">https://www.npmjs.com/package/selenium-webdriver</a></p><p>使用详解</p><ul><li><p><a href="https://www.fenxianglu.cn/article/343" target="_blank" rel="noreferrer">https://www.fenxianglu.cn/article/343</a></p></li><li><p><a href="https://www.jianshu.com/p/0893e1d773ef" target="_blank" rel="noreferrer">https://www.jianshu.com/p/0893e1d773ef</a></p></li></ul><h2 id="数据持久化" tabindex="-1">数据持久化 <a class="header-anchor" href="#数据持久化" aria-label="Permalink to &quot;数据持久化&quot;">​</a></h2><ul><li><p>操作 mysql 和 sqllite 建议使用 sequelize</p><ul><li>sequelize</li></ul></li><li><p>操作 mongodb</p><ul><li>mongoose <ul><li><a href="https://github.com/Automattic/mongoose" target="_blank" rel="noreferrer">https://github.com/Automattic/mongoose</a></li></ul></li></ul></li></ul><h2 id="输出装饰模块" tabindex="-1">输出装饰模块 <a class="header-anchor" href="#输出装饰模块" aria-label="Permalink to &quot;输出装饰模块&quot;">​</a></h2><ul><li><p>chalk</p><ul><li><p>chalk 中文意思是粉笔的意思，这个模块是 node 很有特色和实用的一个模块，它可以为你输出的内容添加颜色， 下划线， 背景色等装饰。</p></li><li><p>可以适当使用 chalk 来突出某些内容，例如请求的 url 加上下划线。</p></li><li><p><a href="https://github.com/chalk/chalk" target="_blank" rel="noreferrer">https://github.com/chalk/chalk</a></p></li><li><p>例子</p><ul><li>const logRequest = (response, isDetailed = false) =&gt; { const URL = chalk.underline.yellow(response.request.url); const basicInfo = <code>\${response.request.method} Status: \${response.status} Content-Type: \${response.type} URL=\${URL}</code>; if (!isDetailed) { logger.info(basicInfo); } else { const detailInfo = <code>\${basicInfo}\\ntext: \${response.text}</code>; logger.info(detailInfo); } };</li></ul></li></ul></li></ul>`,60)]))}const b=e(o,[["render",r]]);export{d as __pageData,b as default};
