import{_ as a,c as n,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"Node项目上线部署","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Node项目上线部署.md","filePath":"Document/Node后端框架开发/Node项目上线部署.md","lastUpdated":1750954157000}'),e={name:"Document/Node后端框架开发/Node项目上线部署.md"};function o(r,s,t,c,i,B){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="node项目上线部署" tabindex="-1">Node项目上线部署 <a class="header-anchor" href="#node项目上线部署" aria-label="Permalink to &quot;Node项目上线部署&quot;">​</a></h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&amp;mid=2247534374&amp;idx=1&amp;sn=d4fdd79935f4844f57e058cffb67cfc8&amp;chksm=e92a7a29de5df33fed3c5de533c72fb95aa65dfa5e3490e876eff9ae275b840fc2026e70466d&amp;mpshare=1&amp;scene=1&amp;srcid=08110cciaE8QHsjzLSKisPrd&amp;sharer_sharetime=1691717013344&amp;sharer_shareid=31c55da0340daae091e3d76b40a7b2dc&amp;from=industrynews&amp;version=4.1.8.6020&amp;platform=win#rd" target="_blank" rel="noreferrer">一名全栈工程师的技术实践之路 (qq.com)</a></p><h2 id="pm2自动化部署后端服务" tabindex="-1">pm2自动化部署后端服务 <a class="header-anchor" href="#pm2自动化部署后端服务" aria-label="Permalink to &quot;pm2自动化部署后端服务&quot;">​</a></h2><p>PM2 是一个守护进程管理器，可帮助您管理和保持应用程序在线。PM2 入门很简单，它以简单直观的 CLI 形式提供，可通过 NPM 安装。</p><h3 id="相关网址" tabindex="-1">相关网址 <a class="header-anchor" href="#相关网址" aria-label="Permalink to &quot;相关网址&quot;">​</a></h3><ul><li>PM2中文网：<a href="https://pm2.fenxianglu.cn/" target="_blank" rel="noreferrer">https://pm2.fenxianglu.cn/</a></li><li>PM2官网：<a href="https://pm2.keymetrics.io/" target="_blank" rel="noreferrer">https://pm2.keymetrics.io/</a></li><li>PM2官网文档：<a href="https://pm2.keymetrics.io/docs/usage/quick-start/" target="_blank" rel="noreferrer">https://pm2.keymetrics.io/docs/usage/quick-start/</a></li><li>GitHub：<a href="https://github.com/Unitech/pm2" target="_blank" rel="noreferrer">https://github.com/Unitech/pm2</a></li></ul><h3 id="示例教程" tabindex="-1">示例教程 <a class="header-anchor" href="#示例教程" aria-label="Permalink to &quot;示例教程&quot;">​</a></h3><p><a href="https://blog.csdn.net/sunyctf/article/details/130655852" target="_blank" rel="noreferrer">PM2 | NodeJS应用进程管理工具—PM2的基本使用-CSDN博客</a></p><h2 id="揭秘-chatgpt-流式输出的神奇原理与-sse-技术" tabindex="-1">揭秘 ChatGPT：流式输出的神奇原理与 SSE 技术 <a class="header-anchor" href="#揭秘-chatgpt-流式输出的神奇原理与-sse-技术" aria-label="Permalink to &quot;揭秘 ChatGPT：流式输出的神奇原理与 SSE 技术&quot;">​</a></h2><p>ChatGPT是如何实现流式输出的呢？这背后离不开SSE技术的支持。下面，我们就来详细讲解一下ChatGPT流式输出的原理以及SSE技术的作用，并附上代码示例。</p><p>ChatGPT，作为人工智能领域的佼佼者，以其卓越的自然语言处理能力和广泛的应用场景，赢得了众多用户的青睐。其中，ChatGPT的流式输出功能更是让人印象深刻。那么，ChatGPT是如何实现流式输出的呢？这背后离不开Server-Sent Events（SSE）技术的支持。下面，我们就来详细讲解一下ChatGPT流式输出的原理以及SSE技术的作用，并附上代码示例。</p><h4 id="一、什么是chatgpt的流式输出" tabindex="-1">一、什么是ChatGPT的流式输出？ <a class="header-anchor" href="#一、什么是chatgpt的流式输出" aria-label="Permalink to &quot;一、什么是ChatGPT的流式输出？&quot;">​</a></h4><p>ChatGPT的流式输出，指的是在与用户进行对话时，ChatGPT能够实时地、连续地输出文本内容，而不是等待整个回答完全生成后再一次性输出。这种流式输出的方式，使得ChatGPT的响应更加迅速，用户体验更加流畅。</p><h4 id="二、sse技术简介" tabindex="-1">二、SSE技术简介 <a class="header-anchor" href="#二、sse技术简介" aria-label="Permalink to &quot;二、SSE技术简介&quot;">​</a></h4><p>SSE，全称Server-Sent Events，是一种基于HTTP协议的服务器推送技术。它允许服务器主动向客户端发送数据和信息，实现了服务器到客户端的单向通信。</p><h4 id="三、chatgpt流式输出的原理与sse技术的应用" tabindex="-1">三、ChatGPT流式输出的原理与SSE技术的应用 <a class="header-anchor" href="#三、chatgpt流式输出的原理与sse技术的应用" aria-label="Permalink to &quot;三、ChatGPT流式输出的原理与SSE技术的应用&quot;">​</a></h4><p>ChatGPT采用SSE技术实现流式输出，其原理如下：</p><ul><li>建立连接：当用户与ChatGPT进行对话时，客户端与服务器之间会建立一个基于HTTP的长连接。这个连接通过SSE机制保持打开状态，允许服务器随时向客户端发送数据。</li><li>分步生成与实时推送：ChatGPT根据用户的输入和当前的上下文信息，逐步生成回答的一部分。每当有新的内容生成时，服务器就会通过SSE连接将这些内容作为事件推送给客户端。</li><li>客户端接收与展示：客户端通过JavaScript的EventSource对象监听SSE连接上的事件。一旦接收到服务器推送的数据，客户端会立即将其展示给用户，实现流式输出的效果。</li></ul><h4 id="四、代码示例" tabindex="-1">四、代码示例 <a class="header-anchor" href="#四、代码示例" aria-label="Permalink to &quot;四、代码示例&quot;">​</a></h4><p>服务器端（SSE）代码示例（以Node.js为例）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> http</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> server</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;/stream&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeHead</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#98C379;">      &#39;Content-Type&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;text/event-stream&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">      &#39;Cache-Control&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;no-cache&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">      &#39;Connection&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;keep-alive&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 模拟ChatGPT的流式输出</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> counter</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> interval</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`data: ChatGPT says: Hello, this is message </span><span style="color:#C678DD;">\${</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">counter</span><span style="color:#C678DD;">}</span><span style="color:#56B6C2;">\\n\\n</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 每秒发送一次数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;close&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">      clearInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">interval</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">      res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeHead</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">404</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">server</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">8080</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Server listening on port 8080&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>客户端（JavaScript）代码示例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;SSE Output&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;chatOutput&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> eventSource</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> EventSource</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/stream&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 连接到SSE服务器</span></span>
<span class="line"><span style="color:#C678DD;">      const</span><span style="color:#E5C07B;"> chatOutput</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;chatOutput&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 连接建立时的操作</span></span>
<span class="line"><span style="color:#E5C07B;">      eventSource</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onmessage</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> event</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;[done]&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            eventSource</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        chatOutput</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 展示接收到的数据</span></span>
<span class="line"><span style="color:#ABB2BF;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 连接建立时的操作</span></span>
<span class="line"><span style="color:#E5C07B;">      eventSource</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onopen</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> event</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;EventSource onopen:&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 错误处理</span></span>
<span class="line"><span style="color:#E5C07B;">      eventSource</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onerror</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> event</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;EventSource failed:&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      };</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>在上述示例中，服务器端代码创建了一个HTTP服务器，并监听/stream路径。当客户端连接到这个路径时，服务器会开始发送SSE事件，每个事件包含一条模拟的ChatGPT消息。客户端代码通过创建EventSource对象连接到服务器，并监听onmessage事件来接收并展示服务器发送的数据。</p><h4 id="五、sse技术的优势" tabindex="-1">五、SSE技术的优势 <a class="header-anchor" href="#五、sse技术的优势" aria-label="Permalink to &quot;五、SSE技术的优势&quot;">​</a></h4><ul><li>实时性：SSE技术使得服务器能够实时地将数据推送给客户端，无需客户端频繁发起请求，提高了数据的实时性。</li><li>效率：通过保持长连接的方式，SSE技术避免了频繁建立和断开连接的开销，提高了数据传输的效率。</li><li>轻量级：SSE技术基于HTTP协议，无需额外的协议支持，使得实现更加轻量级和简单。</li></ul><h4 id="六、chatgpt流式输出的应用场景" tabindex="-1">六、ChatGPT流式输出的应用场景 <a class="header-anchor" href="#六、chatgpt流式输出的应用场景" aria-label="Permalink to &quot;六、ChatGPT流式输出的应用场景&quot;">​</a></h4><p>ChatGPT的流式输出功能在多个领域都有广泛的应用。例如，在智能客服领域，ChatGPT可以实时地回应用户的问题，提供个性化的服务；在在线教育领域，ChatGPT可以作为智能辅导工具，实时地解答学生的疑问；在娱乐领域，ChatGPT可以作为聊天机器人，与用户进行有趣的对话。此外，流式输出功能还适用于需要实时交互的场景，如实时翻译、智能助手等。</p><h4 id="七、注意事项" tabindex="-1">七、注意事项 <a class="header-anchor" href="#七、注意事项" aria-label="Permalink to &quot;七、注意事项&quot;">​</a></h4><p>在实现ChatGPT的流式输出功能时，需要注意以下几点：</p><ul><li>服务器性能：由于流式输出需要服务器实时推送数据，因此对服务器的性能要求较高。确保服务器具备足够的处理能力和带宽，以应对大量并发连接和数据传输的需求。</li><li>数据安全性：在传输过程中，要确保数据的安全性，防止敏感信息泄露或被恶意利用。可以采用加密传输、身份验证等措施来增强数据安全性。</li><li>用户体验：流式输出功能应关注用户体验，确保数据的实时性和准确性。同时，也要注意避免过度推送数据，以免给用户造成困扰或疲劳。</li></ul><p>综上所述，ChatGPT的流式输出功能是一项具有重要意义的技术创新，它为用户提供了更加高效、智能的对话体验。通过不断优化和拓展这一功能，我们可以期待ChatGPT在未来能够为更多领域带来变革和突破。</p><h2 id="如何上线node编写的项目" tabindex="-1">如何上线Node编写的项目? <a class="header-anchor" href="#如何上线node编写的项目" aria-label="Permalink to &quot;如何上线Node编写的项目?&quot;">​</a></h2><h3 id="_1-上线项目需要考虑的几个问题" tabindex="-1">1.上线项目需要考虑的几个问题 <a class="header-anchor" href="#_1-上线项目需要考虑的几个问题" aria-label="Permalink to &quot;1.上线项目需要考虑的几个问题&quot;">​</a></h3><ul><li><p>1.1 服务稳定性, 不会因为程序的某个错误或异常导致项目停止服务</p></li><li><p>1.2 线上日志记录, 除了记录访问日志以外, 我们还需要记录错误日志和自定义日志</p></li><li><p>1.3 充分利用服务器资源, Node是单线程的, 服务器是多核的, 一台服务器只运行一个Node程序太浪费资源</p></li></ul><h3 id="_2-如何解决上述问题" tabindex="-1">2.如何解决上述问题? <a class="header-anchor" href="#_2-如何解决上述问题" aria-label="Permalink to &quot;2.如何解决上述问题?&quot;">​</a></h3><h4 id="通过pm2" tabindex="-1">通过PM2 <a class="header-anchor" href="#通过pm2" aria-label="Permalink to &quot;通过PM2&quot;">​</a></h4><ul><li><p>2.1 PM2的进程守护可以在程序崩溃后自动重启</p></li><li><p>2.2 PM2自带日志记录的功能, 可以很方便的记录错误日志和自定义日志</p></li><li><p>2.3 PM2能够启动多个Node进程, 充分利用服务器资源</p></li></ul><h3 id="_3-pm2使用" tabindex="-1">3.PM2使用 <a class="header-anchor" href="#_3-pm2使用" aria-label="Permalink to &quot;3.PM2使用&quot;">​</a></h3><p>pm2的npm文档：<a href="https://www.npmjs.com/package/pm2" target="_blank" rel="noreferrer">pm2 - npm (npmjs.com)</a></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 全局安装pm2包</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> pm2</span><span style="color:#D19A66;"> -g</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看pm2版本|用来检查是否安装成功</span></span>
<span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#D19A66;"> --version</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 在项目终端中，通过pm2运行Node项目</span></span>
<span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> start</span><span style="color:#98C379;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="pm2常用命令" tabindex="-1">pm2常用命令 <a class="header-anchor" href="#pm2常用命令" aria-label="Permalink to &quot;pm2常用命令&quot;">​</a></h4><p>appName|appId：是启动项目成功后出现的表格信息，name和id字段</p><p>如果不知道信息，可以使用罗列命令：pm2 list</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 启动应用程序</span></span>
<span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> start</span><span style="color:#98C379;"> app.js</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">config</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 列出启动的所有的应用程序</span></span>
<span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> list</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 重启应用程序</span></span>
<span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> restart</span><span style="color:#98C379;"> appName</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">appId</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 查看应用程序详细信息</span></span>
<span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> info</span><span style="color:#98C379;"> appName</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">appId</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 显示指定应用程序的日志</span></span>
<span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> log</span><span style="color:#98C379;"> appName</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">appId</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 监控应用程序</span></span>
<span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> monit</span><span style="color:#98C379;"> appName</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">appId</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 停止应用程序</span></span>
<span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> stop</span><span style="color:#98C379;"> appName</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">appId</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 关闭并删除所有应用</span></span>
<span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> delete</span><span style="color:#98C379;"> appName</span><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">appId</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="pm2日志相关命令" tabindex="-1">pm2日志相关命令 <a class="header-anchor" href="#pm2日志相关命令" aria-label="Permalink to &quot;pm2日志相关命令&quot;">​</a></h4><p>pm2 log appName|appId 日志命令：打印的是以下日志，两种日志信息</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 如果是通过pm2来启动Node项目, 那么会自动将log输出的内容记录到自定义日志当中</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;接收到请求&#39;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 自定义日志</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我是错误日志&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>监控应用程序命令：pm2 monit appName|appId</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">会实时显示应用程序状态和日志等</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="pm2进程守护" tabindex="-1">PM2进程守护 <a class="header-anchor" href="#pm2进程守护" aria-label="Permalink to &quot;PM2进程守护&quot;">​</a></h4><p>自定义错误抛出路由，测试：/error</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;/error&#39;</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">  throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;故意抛出异常, 引发程序的崩溃&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>项目抛出异常后会自动重启，达到进程守护的作用</p><h4 id="pm2常用node项目配置😍" tabindex="-1">PM2常用Node项目配置😍 <a class="header-anchor" href="#pm2常用node项目配置😍" aria-label="Permalink to &quot;PM2常用Node项目配置😍&quot;">​</a></h4><h5 id="在需要运行的node项目根目录中-新建pm2配置文件-pm2-conf-json" tabindex="-1">在需要运行的Node项目根目录中，新建pm2配置文件：<code>pm2.conf.json</code> <a class="header-anchor" href="#在需要运行的node项目根目录中-新建pm2配置文件-pm2-conf-json" aria-label="Permalink to &quot;在需要运行的Node项目根目录中，新建pm2配置文件：\`pm2.conf.json\`&quot;">​</a></h5><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;apps&quot;</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;name&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;应用程序名称，如:node-server&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;script&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;入口文件名称，如:app.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;watch&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;ignore_watch&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">      &quot;node_modules&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">      &quot;logs&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;error_file&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;logs/错误日志文件名称，如:error.log&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;out_file&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;logs/自定义日志文件名称，如:custom.log&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;log_date_format&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="通过运行pm2配置文件-pm2-conf-json-来启动项目" tabindex="-1">通过运行pm2配置文件(pm2.conf.json)来启动项目 <a class="header-anchor" href="#通过运行pm2配置文件-pm2-conf-json-来启动项目" aria-label="Permalink to &quot;通过运行pm2配置文件(pm2.conf.json)来启动项目&quot;">​</a></h5><p>可以在package.json里配置script命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> start</span><span style="color:#98C379;"> pm2.conf.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="pm2配置-负载均衡-多线程" tabindex="-1">PM2配置：负载均衡-多线程 <a class="header-anchor" href="#pm2配置-负载均衡-多线程" aria-label="Permalink to &quot;PM2配置：负载均衡-多线程&quot;">​</a></h4><p>在需要运行的Node项目根目录中，新建pm2配置文件：<code>pm2.conf.json</code></p><p>原有的配置中添加配置，CPU是多少核的服务器：&quot;instances&quot;: 4</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;apps&quot;</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;name&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;应用程序名称，如:node-server&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;script&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;入口文件名称，如:app.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;watch&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;ignore_watch&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">      &quot;node_modules&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">      &quot;logs&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;error_file&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;logs/错误日志文件名称，如:error.log&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;out_file&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;logs/自定义日志文件名称，如:custom.log&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;log_date_format&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;instances&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>再启动运行项目：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> start</span><span style="color:#98C379;"> pm2.conf.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行成功后，会启动4个进程，都是一个项目名字，前端访问，会随机分配一个服务器进程</p><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1>`,68)]))}const u=a(e,[["render",o]]);export{b as __pageData,u as default};
