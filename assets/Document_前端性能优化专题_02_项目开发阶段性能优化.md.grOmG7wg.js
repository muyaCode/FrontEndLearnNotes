import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"项目开发阶段性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端性能优化专题/02_项目开发阶段性能优化.md","filePath":"Document/前端性能优化专题/02_项目开发阶段性能优化.md","lastUpdated":1750954157000}'),e={name:"Document/前端性能优化专题/02_项目开发阶段性能优化.md"};function o(r,s,t,c,i,B){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="项目开发阶段性能优化" tabindex="-1">项目开发阶段性能优化 <a class="header-anchor" href="#项目开发阶段性能优化" aria-label="Permalink to &quot;项目开发阶段性能优化&quot;">​</a></h1><p><a href="https://juejin.cn/post/7087804464912039944" target="_blank" rel="noreferrer">10000000 条弹幕数据循环怎么优化？ - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7085941958228574215" target="_blank" rel="noreferrer">虚拟列表性能优化</a></p><p><a href="https://zhuanlan.zhihu.com/p/340596950" target="_blank" rel="noreferrer">全链路前端性能优化方案</a></p><p><a href="https://developer.aliyun.com/article/979828?spm=a2c6h.12883283.index.70.26804307LvuhUr" target="_blank" rel="noreferrer">前端性能优化之请求优化-阿里云开发者社区</a></p><p><a href="https://zhuanlan.zhihu.com/p/486016271" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/486016271</a></p><p><a href="https://juejin.cn/post/7028028584463695879" target="_blank" rel="noreferrer">你会怎么做前端优化？ - 前端监控体系</a></p><h2 id="前端懒加载" tabindex="-1">前端懒加载 <a class="header-anchor" href="#前端懒加载" aria-label="Permalink to &quot;前端懒加载&quot;">​</a></h2><h3 id="_1、什么是懒加载-什么预加载" tabindex="-1">1、什么是懒加载？什么预加载？ <a class="header-anchor" href="#_1、什么是懒加载-什么预加载" aria-label="Permalink to &quot;1、什么是懒加载？什么预加载？&quot;">​</a></h3><p>懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。 在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。</p><p>如果我们使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面较长的页面场景中。 <strong>懒加载与预加载的区别：</strong><br> 这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。</p><ul><li><p><strong>懒加载</strong>也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。懒加载的实现原理是，将页面上的图片的 src 属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的 src 属性，以此来实现图片的延迟加载。</p></li><li><p><strong>预加载</strong>指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。通过预加载能够减少用户的等待时间，提高用户的体验。我了解的预加载的最常用的方式是使用 js 中的 image 对象，通过为 image 对象来设置 scr 属性，来实现图片的预加载。</p></li></ul><h3 id="_2、图片懒加载的基本实现" tabindex="-1">2、图片懒加载的基本实现 <a class="header-anchor" href="#_2、图片懒加载的基本实现" aria-label="Permalink to &quot;2、图片懒加载的基本实现&quot;">​</a></h3><p>图片的加载是由<strong>src</strong>引起的，当对<strong>src</strong>赋值时，浏览器就会请求图片资源。根据这个原理，我们使用<strong>HTML5</strong> 的<strong>data-xxx</strong>属性来储存图片的路径，在需要加载图片的时候，将<strong>data-xxx</strong>中图片的路径赋值给<strong>src</strong>，这样就实现了图片的按需加载，即懒加载。</p><blockquote><p>注意：<strong>data-xxx</strong> 中的<strong>xxx</strong>可以自定义，这里我们使用<strong>data-src</strong>来定义。</p></blockquote><p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。</p><p><strong>知识点：</strong> （1）<code>window.innerHeight</code> 是浏览器可视区的高度 （2）<code>document.body.scrollTop || document.documentElement.scrollTop</code> 是浏览器滚动的过的距离 （3）<code>imgs.offsetTop</code> 是元素顶部距离文档顶部的高度（包括滚动条的距离） （4）图片加载条件：<code>img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</code><strong>图示：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210208154124940.png?" alt="在这里插入图片描述"></p><p><strong>代码实现：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> class</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;container&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;loading.gif&quot;</span><span style="color:#D19A66;font-style:italic;">  data-src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;pic.png&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;loading.gif&quot;</span><span style="color:#D19A66;font-style:italic;">  data-src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;pic.png&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;loading.gif&quot;</span><span style="color:#D19A66;font-style:italic;">  data-src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;pic.png&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;loading.gif&quot;</span><span style="color:#D19A66;font-style:italic;">  data-src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;pic.png&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;loading.gif&quot;</span><span style="color:#D19A66;font-style:italic;">  data-src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;pic.png&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;loading.gif&quot;</span><span style="color:#D19A66;font-style:italic;">  data-src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;pic.png&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">var imgs = document.querySelectorAll(&#39;img&#39;);</span></span>
<span class="line"><span style="color:#ABB2BF;">function lozyLoad()</span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#E06C75;">        var</span><span style="color:#E06C75;"> scrollTop</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        var</span><span style="color:#E06C75;"> winHeight</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHeight</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        for</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> imgs</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#61AFEF;">            if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">imgs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">].offsetTop &lt; </span><span style="color:#E06C75;font-style:italic;">scrollTop</span><span style="color:#ABB2BF;"> + </span><span style="color:#E06C75;font-style:italic;">winHeight</span><span style="color:#ABB2BF;"> ){</span></span>
<span class="line"><span style="color:#E06C75;">                imgs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> imgs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">getAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;data-src&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  window.onscroll = lozyLoad();</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_3、结合节流优化图片懒加载" tabindex="-1">3、结合节流优化图片懒加载 <a class="header-anchor" href="#_3、结合节流优化图片懒加载" aria-label="Permalink to &quot;3、结合节流优化图片懒加载&quot;">​</a></h3><p>上面的图片进行懒加载的时候，需要不断监听的 scroll 事件，然后判断图片是否已经在首屏页面当中，如果已经在首屏就进行加载，如果没有则无需进行拉取。我们知道 scroll 这类事件会被频繁触发，对性能的影响非常大，所以才有了防抖和节流。那么针对这个 scroll 事件，我们完全可以使用节流函数包一下，让它隔一段时间再去触发，避免多余性能消耗，如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> imgLazyLoad</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> throttle</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;懒加载操作&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;scroll&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">imgLazyLoad</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>用封装好的 throttle 去包装好懒加载操作，这样用户在频繁滚动滚动条的时候就不会产生因为频繁触发而带来的性能问题，这也是节流非常典型的一个应用。</p><h3 id="_4、intersection-observer-实现图片懒加载" tabindex="-1">4、Intersection Observer 实现图片懒加载 <a class="header-anchor" href="#_4、intersection-observer-实现图片懒加载" aria-label="Permalink to &quot;4、Intersection Observer 实现图片懒加载&quot;">​</a></h3><p>Intersection Observer 是 HTML5 新增的 API，可以用来实现图片懒加载。MDN 中对 Intersection Observer 的解释</p><blockquote><p><code>IntersectionObserver</code><strong>接口</strong> (从属于<a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" title="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API" target="_blank" rel="noreferrer">Intersection Observer API</a>) 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport" title="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport" target="_blank" rel="noreferrer">viewport</a>)交叉状态的方法。祖先元素与视窗(<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport" title="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport" target="_blank" rel="noreferrer">viewport</a>)被称为<strong>根(root)。</strong></p></blockquote><blockquote><p>当一个 IntersectionObserver 对象被创建时，其被配置为监听根中一段给定比例的可见区域。一旦 IntersectionObserver 被创建，则无法更改其配置，所以一个给定的观察者对象只能用来监听可见区域的特定变化值；然而，你可以在同一个观察者对象中配置监听多个目标元素。</p></blockquote><p>这里封装一个组件并且自定义一个 v-lazy 属性，然后替换到 src 上，实现懒加载。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useIntersectionObserver</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@vueuse/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> defaultImg</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &quot;@/assets/images/200.png&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">App</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	install</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">App</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 全局指令</span></span>
<span class="line"><span style="color:#E5C07B;">		app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">directive</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lazy&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// mounted 是 v3 中自定义指令的生命周期，他会被自动调用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 它表示的含义和组件的mounted是一样的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// el是 dom 元素， binding</span></span>
<span class="line"><span style="color:#61AFEF;">			mounted</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">binding</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> defaultImg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lazy&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">binding</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//实时鉴定el是否可见， 如果可见 给它的src设置binding.value</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">stop</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> useIntersectionObserver</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">, ([{ </span><span style="color:#E06C75;font-style:italic;">isIntersecting</span><span style="color:#ABB2BF;"> }]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isIntersecting</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">						el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> binding</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">						stop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">						el</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onerror</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">							el</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> defaultImg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">						};</span></span>
<span class="line"><span style="color:#ABB2BF;">					}</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;font-style:italic;"> v-lazy</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;item.picture&quot;</span><span style="color:#D19A66;font-style:italic;"> alt</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5、延迟加载视频" tabindex="-1">5、延迟加载视频 <a class="header-anchor" href="#_5、延迟加载视频" aria-label="Permalink to &quot;5、延迟加载视频&quot;">​</a></h3><p>图片和视频这类静态资源资源占比都最大。与图片一样，视频同样可以延迟加载，来达到优化性能的目的。正常情况下加载视频，使用的是 <strong>video</strong> 标签，那么对于一些需要由用户自己播放的视频，最好指定<strong>video</strong>标签的<strong>preload</strong>属性为<strong>none</strong>，这样浏览器就不会预加载任何视频数据。为了占用空间，使用<strong>poster</strong>属性为<strong>video</strong>占位。如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">video</span><span style="color:#D19A66;font-style:italic;"> controls</span><span style="color:#D19A66;font-style:italic;"> preload</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;none&quot;</span><span style="color:#D19A66;font-style:italic;"> poster</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;replace.jpg&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">source</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;main.webm&quot;</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;video/webm&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">source</span><span style="color:#D19A66;font-style:italic;"> src</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;main.mp4&quot;</span><span style="color:#D19A66;font-style:italic;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;video/mp4&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">video</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_6、使用第三方延迟加载库" tabindex="-1">6、使用第三方延迟加载库 <a class="header-anchor" href="#_6、使用第三方延迟加载库" aria-label="Permalink to &quot;6、使用第三方延迟加载库&quot;">​</a></h3><p>除了上面介绍的一些延迟加载方法之外，还可以借助一些已经封装好的第三方库，下面是一些成熟的第三方库：</p><p><a href="https://github.com/ApoorvSaxena/lozad.js" target="_blank" rel="noreferrer">lozad.js</a> 是超轻量级且只使用 Intersection Observer 的库， 因此它的性能极佳，但如果要在旧版本浏览器上使用，则需要配置 polyfill。</p><p><a href="https://github.com/aFarkas/lazysizes" target="_blank" rel="noreferrer">lazysizes</a> 是功能全面的延迟加载库，其使用的模式与本文所示的代码示例非常相似，会自动与  <code>&lt;img&gt;</code>  元素上的<code>lazyload</code>  类 绑定，然后在<code>data-src</code> 和 <code>data-srcset</code> 属性中指定图像网址，该库还可以通过许多插件进行扩展，执行延迟各种资源等操作。</p><p>如果使用 React，可以使用 <a href="https://github.com/jasonslyvia/react-lazyload" target="_blank" rel="noreferrer">react-lazyload</a> 来进行图片懒加载操作，这个库是 React 图片懒加载的主流解决方案。</p><hr><h2 id="前端性能优化总结" tabindex="-1">前端性能优化总结 <a class="header-anchor" href="#前端性能优化总结" aria-label="Permalink to &quot;前端性能优化总结&quot;">​</a></h2><p><a href="https://juejin.cn/post/6892994632968306702" target="_blank" rel="noreferrer">前端性能优化 24 条建议</a></p><h3 id="_1-减少-http-请求" tabindex="-1">1. 减少 HTTP 请求 <a class="header-anchor" href="#_1-减少-http-请求" aria-label="Permalink to &quot;1. 减少 HTTP 请求&quot;">​</a></h3><p>一个完整的 HTTP 请求需要经历 DNS 查找，TCP 握手，浏览器发出 HTTP 请求，服务器接收请求，服务器处理请求并发回响应，浏览器接收响应等过程。接下来看一个具体的例子帮助理解 HTTP ：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05c1c42e60734ecd8dc7db8f4a8443ce~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="在这里插入图片描述"></p><p>这是一个 HTTP 请求，请求的文件大小为 28.4KB。</p><p>名词解释：</p><ul><li><code>Queueing</code>: 在请求队列中的时间。</li><li><code>Stalled: 从TCP</code> 连接建立完成，到真正可以传输数据之间的时间差，此时间包括代理协商时间。</li><li><code>Proxy negotiation</code>: 与代理服务器连接进行协商所花费的时间。</li><li><code>DNS Lookup</code>: 执行 DNS 查找所花费的时间，页面上的每个不同的域都需要进行 DNS 查找。</li><li><code>Initial Connection / Connecting</code>: 建立连接所花费的时间，包括 TCP 握手/重试和协商 SSL。</li><li><code>SSL</code>: 完成 SSL 握手所花费的时间。</li><li><code>Request sent</code>: 发出网络请求所花费的时间，通常为一毫秒的时间。</li><li><code>Waiting(TFFB)</code>: TFFB 是发出页面请求到接收到应答数据第一个字节的时间。</li><li><code>Content Download</code>: 接收响应数据所花费的时间。</li></ul><p>从这个例子可以看出，真正下载数据的时间占比为 <code>13.05 / 204.16 = 6.39%</code>，文件越小，这个比例越小，文件越大，比例就越高。这就是为什么要建议将多个小文件合并为一个大文件，从而减少 HTTP 请求次数的原因。</p><p>参考资料：</p><ul><li><a href="https://developers.google.com/web/tools/chrome-devtools/network/understanding-resource-timing" title="https://developers.google.com/web/tools/chrome-devtools/network/understanding-resource-timing" target="_blank" rel="noreferrer">understanding-resource-timing</a></li></ul><h3 id="_2-使用-http2" tabindex="-1">2. 使用 HTTP2 <a class="header-anchor" href="#_2-使用-http2" aria-label="Permalink to &quot;2. 使用 HTTP2&quot;">​</a></h3><p>HTTP2 相比 HTTP1.1 有如下几个优点：</p><h4 id="解析速度快" tabindex="-1">解析速度快 <a class="header-anchor" href="#解析速度快" aria-label="Permalink to &quot;解析速度快&quot;">​</a></h4><p>服务器解析 HTTP1.1 的请求时，必须不断地读入字节，直到遇到分隔符 CRLF 为止。而解析 HTTP2 的请求就不用这么麻烦，因为 HTTP2 是基于帧的协议，每个帧都有表示帧长度的字段。</p><h4 id="多路复用" tabindex="-1">多路复用 <a class="header-anchor" href="#多路复用" aria-label="Permalink to &quot;多路复用&quot;">​</a></h4><p>HTTP1.1 如果要同时发起多个请求，就得建立多个 TCP 连接，因为一个 TCP 连接同时只能处理一个 HTTP1.1 的请求。</p><p>在 HTTP2 上，多个请求可以共用一个 TCP 连接，这称为多路复用。同一个请求和响应用一个流来表示，并有唯一的流 ID 来标识。 多个请求和响应在 TCP 连接中可以乱序发送，到达目的地后再通过流 ID 重新组建。</p><h4 id="首部压缩" tabindex="-1">首部压缩 <a class="header-anchor" href="#首部压缩" aria-label="Permalink to &quot;首部压缩&quot;">​</a></h4><p>HTTP2 提供了首部压缩功能。</p><p>例如有如下两个请求：</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">authority: unpkg.zhimg.com</span></span>
<span class="line"><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">method: GET</span></span>
<span class="line"><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">path: /za-js-sdk@2.16.0/dist/zap.js</span></span>
<span class="line"><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">scheme: https</span></span>
<span class="line"><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;"> *</span><span style="color:#E06C75;">/</span><span style="color:#D19A66;">*</span></span>
<span class="line"><span style="color:#61AFEF;">accept-encoding</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> gzip, deflate, br</span></span>
<span class="line"><span style="color:#61AFEF;">accept-language</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> zh-CN,zh;q=0.9</span></span>
<span class="line"><span style="color:#61AFEF;">cache-control</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> no-cache</span></span>
<span class="line"><span style="color:#61AFEF;">pragma</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> no-cache</span></span>
<span class="line"><span style="color:#61AFEF;">referer</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> https://www.zhihu.com/</span></span>
<span class="line"><span style="color:#61AFEF;">sec-fetch-dest</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> script</span></span>
<span class="line"><span style="color:#61AFEF;">sec-fetch-mode</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> no-cors</span></span>
<span class="line"><span style="color:#61AFEF;">sec-fetch-site</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> cross-site</span></span>
<span class="line"><span style="color:#61AFEF;">user-agent</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">authority: zz.bdstatic.com</span></span>
<span class="line"><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">method: GET</span></span>
<span class="line"><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">path: /linksubmit/push.js</span></span>
<span class="line"><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">scheme: https</span></span>
<span class="line"><span style="color:#61AFEF;">accept</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;"> *</span><span style="color:#E06C75;">/</span><span style="color:#D19A66;">*</span></span>
<span class="line"><span style="color:#61AFEF;">accept-encoding</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> gzip, deflate, br</span></span>
<span class="line"><span style="color:#61AFEF;">accept-language</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> zh-CN,zh;q=0.9</span></span>
<span class="line"><span style="color:#61AFEF;">cache-control</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> no-cache</span></span>
<span class="line"><span style="color:#61AFEF;">pragma</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> no-cache</span></span>
<span class="line"><span style="color:#61AFEF;">referer</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> https://www.zhihu.com/</span></span>
<span class="line"><span style="color:#61AFEF;">sec-fetch-dest</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> script</span></span>
<span class="line"><span style="color:#61AFEF;">sec-fetch-mode</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> no-cors</span></span>
<span class="line"><span style="color:#61AFEF;">sec-fetch-site</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> cross-site</span></span>
<span class="line"><span style="color:#61AFEF;">user-agent</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>从上面两个请求可以看出来，有很多数据都是重复的。如果可以把相同的首部存储起来，仅发送它们之间不同的部分，就可以节省不少的流量，加快请求的时间。</p><p>HTTP/2 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键－值对，对于相同的数据，不再通过每次请求和响应发送。</p><p>下面再来看一个简化的例子，假设客户端按顺序发送如下请求首部：</p><div class="language-makefile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">makefile</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">Header1</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">foo</span></span>
<span class="line"><span style="color:#61AFEF;">Header2</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">bar</span></span>
<span class="line"><span style="color:#61AFEF;">Header3</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">bat</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当客户端发送请求时，它会根据首部值创建一张表：</p><table tabindex="0"><thead><tr><th>索引</th><th>首部名称</th><th>值</th></tr></thead><tbody><tr><td>62</td><td>Header1</td><td>foo</td></tr><tr><td>63</td><td>Header2</td><td>bar</td></tr><tr><td>64</td><td>Header3</td><td>bat</td></tr></tbody></table><p>如果服务器收到了请求，它会照样创建一张表。 当客户端发送下一个请求的时候，如果首部相同，它可以直接发送这样的首部块：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>62 63 64</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>服务器会查找先前建立的表格，并把这些数字还原成索引对应的完整首部。</p><h4 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h4><p>HTTP2 可以对比较紧急的请求设置一个较高的优先级，服务器在收到这样的请求后，可以优先处理。</p><h4 id="流量控制" tabindex="-1">流量控制 <a class="header-anchor" href="#流量控制" aria-label="Permalink to &quot;流量控制&quot;">​</a></h4><p>由于一个 TCP 连接流量带宽（根据客户端到服务器的网络带宽而定）是固定的，当有多个请求并发时，一个请求占的流量多，另一个请求占的流量就会少。流量控制可以对不同的流的流量进行精确控制。</p><h4 id="服务器推送" tabindex="-1">服务器推送 <a class="header-anchor" href="#服务器推送" aria-label="Permalink to &quot;服务器推送&quot;">​</a></h4><p>HTTP2 新增的一个强大的新功能，就是服务器可以对一个客户端请求发送多个响应。换句话说，除了对最初请求的响应外，服务器还可以额外向客户端推送资源，而无需客户端明确地请求。</p><p>例如当浏览器请求一个网站时，除了返回 HTML 页面外，服务器还可以根据 HTML 页面中的资源的 URL，来提前推送资源。</p><p>现在有很多网站已经开始使用 HTTP2 了，例如知乎：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ecd41f4c08c419ca381f8907299e928~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="在这里插入图片描述"></p><p>其中 h2 是指 HTTP2 协议，http/1.1 则是指 HTTP1.1 协议。</p><p>参考资料：</p><ul><li><a href="https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn" title="https://developers.google.com/web/fundamentals/performance/http2/?hl=zh-cn" target="_blank" rel="noreferrer">HTTP2 简介</a></li><li><a href="https://github.com/woai3c/Front-end-articles/blob/master/http-https-http2.md" title="https://github.com/woai3c/Front-end-articles/blob/master/http-https-http2.md" target="_blank" rel="noreferrer">半小时搞懂 HTTP、HTTPS 和 HTTP2</a></li></ul><h3 id="_3-使用服务端渲染" tabindex="-1">3. 使用服务端渲染 <a class="header-anchor" href="#_3-使用服务端渲染" aria-label="Permalink to &quot;3. 使用服务端渲染&quot;">​</a></h3><p>客户端渲染: 获取 HTML 文件，根据需要下载 JavaScript 文件，运行文件，生成 DOM，再渲染。</p><p>服务端渲染：服务端返回 HTML 文件，客户端只需解析 HTML。</p><ul><li>优点：首屏渲染快，SEO 好。</li><li>缺点：配置麻烦，增加了服务器的计算压力。</li></ul><p>下面我用 Vue SSR 做示例，简单的描述一下 SSR 过程。</p><h4 id="客户端渲染过程" tabindex="-1">客户端渲染过程 <a class="header-anchor" href="#客户端渲染过程" aria-label="Permalink to &quot;客户端渲染过程&quot;">​</a></h4><ol><li>访问客户端渲染的网站。</li><li>服务器返回一个包含了引入资源语句和 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 的 HTML 文件。</li><li>客户端通过 HTTP 向服务器请求资源，当必要的资源都加载完毕后，执行 <code>new Vue()</code> 开始实例化并渲染页面。</li></ol><h4 id="服务端渲染过程" tabindex="-1">服务端渲染过程 <a class="header-anchor" href="#服务端渲染过程" aria-label="Permalink to &quot;服务端渲染过程&quot;">​</a></h4><ol><li>访问服务端渲染的网站。</li><li>服务器会查看当前路由组件需要哪些资源文件，然后将这些文件的内容填充到 HTML 文件。如果有 ajax 请求，就会执行它进行数据预取并填充到 HTML 文件里，最后返回这个 HTML 页面。</li><li>当客户端接收到这个 HTML 页面时，可以马上就开始渲染页面。与此同时，页面也会加载资源，当必要的资源都加载完毕后，开始执行 <code>new Vue()</code> 开始实例化并接管页面。</li></ol><p>从上述两个过程中可以看出，区别就在于第二步。客户端渲染的网站会直接返回 HTML 文件，而服务端渲染的网站则会渲染完页面再返回这个 HTML 文件。</p><p><strong>这样做的好处是什么？是更快的内容到达时间 (time-to-content)</strong>。</p><p>假设你的网站需要加载完 abcd 四个文件才能渲染完毕。并且每个文件大小为 1 M。</p><p>这样一算：客户端渲染的网站需要加载 4 个文件和 HTML 文件才能完成首页渲染，总计大小为 4M（忽略 HTML 文件大小）。而服务端渲染的网站只需要加载一个渲染完毕的 HTML 文件就能完成首页渲染，总计大小为已经渲染完毕的 HTML 文件（这种文件不会太大，一般为几百 K，我的个人博客网站（SSR）加载的 HTML 文件为 400K）。<strong>这就是服务端渲染更快的原因</strong>。</p><p>参考资料：</p><ul><li><a href="https://github.com/woai3c/vue-ssr-demo" title="https://github.com/woai3c/vue-ssr-demo" target="_blank" rel="noreferrer">vue-ssr-demo</a></li><li><a href="https://ssr.vuejs.org/zh/" title="https://ssr.vuejs.org/zh/" target="_blank" rel="noreferrer">Vue.js 服务器端渲染指南</a></li></ul><h3 id="_4-静态资源使用-cdn" tabindex="-1">4. 静态资源使用 CDN <a class="header-anchor" href="#_4-静态资源使用-cdn" aria-label="Permalink to &quot;4. 静态资源使用 CDN&quot;">​</a></h3><p>内容分发网络（CDN）是一组分布在多个不同地理位置的 Web 服务器。我们都知道，当服务器离用户越远时，延迟越高。CDN 就是为了解决这一问题，在多个位置部署服务器，让用户离服务器更近，从而缩短请求时间。</p><h4 id="cdn-原理" tabindex="-1">CDN 原理 <a class="header-anchor" href="#cdn-原理" aria-label="Permalink to &quot;CDN 原理&quot;">​</a></h4><p>当用户访问一个网站时，如果没有 CDN，过程是这样的：</p><ol><li>浏览器要将域名解析为 IP 地址，所以需要向本地 DNS 发出请求。</li><li>本地 DNS 依次向根服务器、顶级域名服务器、权限服务器发出请求，得到网站服务器的 IP 地址。</li><li>本地 DNS 将 IP 地址发回给浏览器，浏览器向网站服务器 IP 地址发出请求并得到资源。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d25d1b0091b4e00ae51789172a46d2d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""></p><p>如果用户访问的网站部署了 CDN，过程是这样的：</p><ol><li>浏览器要将域名解析为 IP 地址，所以需要向本地 DNS 发出请求。</li><li>本地 DNS 依次向根服务器、顶级域名服务器、权限服务器发出请求，得到全局负载均衡系统（GSLB）的 IP 地址。</li><li>本地 DNS 再向 GSLB 发出请求，GSLB 的主要功能是根据本地 DNS 的 IP 地址判断用户的位置，筛选出距离用户较近的本地负载均衡系统（SLB），并将该 SLB 的 IP 地址作为结果返回给本地 DNS。</li><li>本地 DNS 将 SLB 的 IP 地址发回给浏览器，浏览器向 SLB 发出请求。</li><li>SLB 根据浏览器请求的资源和地址，选出最优的缓存服务器发回给浏览器。</li><li>浏览器再根据 SLB 发回的地址重定向到缓存服务器。</li><li>如果缓存服务器有浏览器需要的资源，就将资源发回给浏览器。如果没有，就向源服务器请求资源，再发给浏览器并缓存在本地。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67c19972e7dd4ae0840a0f838dd6a017~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="78"></p><p>参考资料：</p><ul><li><a href="https://www.zhihu.com/question/36514327/answer/193768864" title="https://www.zhihu.com/question/36514327/answer/193768864" target="_blank" rel="noreferrer">CDN 是什么？使用 CDN 有什么优势？</a></li><li><a href="https://juejin.im/post/6844903873518239752" title="https://juejin.im/post/6844903873518239752" target="_blank" rel="noreferrer">CDN 原理简析</a></li></ul><h3 id="_5-将-css-放在文件头部-javascript-文件放在底部" tabindex="-1">5. 将 CSS 放在文件头部，JavaScript 文件放在底部 <a class="header-anchor" href="#_5-将-css-放在文件头部-javascript-文件放在底部" aria-label="Permalink to &quot;5. 将 CSS 放在文件头部，JavaScript 文件放在底部&quot;">​</a></h3><ul><li>CSS 执行会阻塞渲染，阻止 JS 执行</li><li>JS 加载和执行会阻塞 HTML 解析，阻止 CSSOM 构建</li></ul><p>如果这些 CSS、JS 标签放在 HEAD 标签里，并且需要加载和解析很久的话，那么页面就空白了。所以 JS 文件要放在底部（不阻止 DOM 解析，但会阻塞渲染），等 HTML 解析完了再加载 JS 文件，尽早向用户呈现页面的内容。</p><p>那为什么 CSS 文件还要放在头部呢？</p><p>因为先加载 HTML 再加载 CSS，会让用户第一时间看到的页面是没有样式的、“丑陋”的，为了避免这种情况发生，就要将 CSS 文件放在头部了。</p><p>另外，JS 文件也不是不可以放在头部，只要给 script 标签加上 defer 属性就可以了，异步下载，延迟执行。</p><p>参考资料：</p><ul><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/adding-interactivity-with-javascript" title="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/adding-interactivity-with-javascript" target="_blank" rel="noreferrer">使用 JavaScript 添加交互</a></li></ul><h3 id="_6-使用字体图标-iconfont-代替图片图标" tabindex="-1">6. 使用字体图标 iconfont 代替图片图标 <a class="header-anchor" href="#_6-使用字体图标-iconfont-代替图片图标" aria-label="Permalink to &quot;6. 使用字体图标 iconfont 代替图片图标&quot;">​</a></h3><p>字体图标就是将图标制作成一个字体，使用时就跟字体一样，可以设置属性，例如 font-size、color 等等，非常方便。并且字体图标是矢量图，不会失真。还有一个优点是生成的文件特别小。</p><h4 id="压缩字体文件" tabindex="-1">压缩字体文件 <a class="header-anchor" href="#压缩字体文件" aria-label="Permalink to &quot;压缩字体文件&quot;">​</a></h4><p>使用 <a href="https://github.com/patrickhulce/fontmin-webpack" title="https://github.com/patrickhulce/fontmin-webpack" target="_blank" rel="noreferrer">fontmin-webpack</a> 插件对字体文件进行压缩（感谢<a href="https://juejin.im/user/237150239985165" title="https://juejin.im/user/237150239985165" target="_blank" rel="noreferrer">前端小伟</a>提供）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/31d80f1553444be3a0b69a70eacc963b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""></p><p>参考资料：</p><ul><li><a href="https://github.com/patrickhulce/fontmin-webpack" title="https://github.com/patrickhulce/fontmin-webpack" target="_blank" rel="noreferrer">fontmin-webpack</a></li><li><a href="https://www.iconfont.cn/" title="https://www.iconfont.cn/" target="_blank" rel="noreferrer">Iconfont-阿里巴巴矢量图标库</a></li></ul><h3 id="_7-善用缓存-不重复加载相同的资源" tabindex="-1">7. 善用缓存，不重复加载相同的资源 <a class="header-anchor" href="#_7-善用缓存-不重复加载相同的资源" aria-label="Permalink to &quot;7. 善用缓存，不重复加载相同的资源&quot;">​</a></h3><p>为了避免用户每次访问网站都得请求文件，我们可以通过添加 Expires 或 max-age 来控制这一行为。Expires 设置了一个时间，只要在这个时间之前，浏览器都不会请求文件，而是直接使用缓存。而 max-age 是一个相对时间，建议使用 max-age 代替 Expires 。</p><p>不过这样会产生一个问题，当文件更新了怎么办？怎么通知浏览器重新请求文件？</p><p>可以通过更新页面中引用的资源链接地址，让浏览器主动放弃缓存，加载新资源。</p><p>具体做法是把资源地址 URL 的修改与文件内容关联起来，也就是说，只有文件内容变化，才会导致相应 URL 的变更，从而实现文件级别的精确缓存控制。什么东西与文件内容相关呢？我们会很自然的联想到利用<a href="https://baike.baidu.com/item/%25E6%25B6%2588%25E6%2581%25AF%25E6%2591%2598%25E8%25A6%2581%25E7%25AE%2597%25E6%25B3%2595/3286770?fromtitle=%25E6%2591%2598%25E8%25A6%2581%25E7%25AE%2597%25E6%25B3%2595%26fromid=12011257" title="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95/3286770?fromtitle=%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95&amp;fromid=12011257" target="_blank" rel="noreferrer">数据摘要要算法</a>对文件求摘要信息，摘要信息与文件内容一一对应，就有了一种可以精确到单个文件粒度的缓存控制依据了。</p><p>参考资料：</p><ul><li><a href="https://github.com/woai3c/node-blog/blob/master/doc/node-blog7.md" title="https://github.com/woai3c/node-blog/blob/master/doc/node-blog7.md" target="_blank" rel="noreferrer">webpack + express 实现文件精确缓存</a></li><li><a href="https://www.webpackjs.com/guides/caching/" title="https://www.webpackjs.com/guides/caching/" target="_blank" rel="noreferrer">webpack-缓存</a></li><li><a href="https://www.zhihu.com/question/20790576/answer/32602154" title="https://www.zhihu.com/question/20790576/answer/32602154" target="_blank" rel="noreferrer">张云龙--大公司里怎样开发和部署前端代码？</a></li></ul><h3 id="_8-压缩文件" tabindex="-1">8. 压缩文件 <a class="header-anchor" href="#_8-压缩文件" aria-label="Permalink to &quot;8. 压缩文件&quot;">​</a></h3><p>压缩文件可以减少文件下载时间，让用户体验性更好。</p><p>得益于 webpack 和 node 的发展，现在压缩文件已经非常方便了。</p><p>在 webpack 可以使用如下插件进行压缩：</p><ul><li>JavaScript：UglifyPlugin</li><li>CSS ：MiniCssExtractPlugin</li><li>HTML：HtmlWebpackPlugin</li></ul><p>其实，我们还可以做得更好。那就是使用 gzip 压缩。可以通过向 HTTP 请求头中的 Accept-Encoding 头添加 gzip 标识来开启这一功能。当然，服务器也得支持这一功能。</p><p>gzip 是目前最流行和最有效的压缩方法。举个例子，我用 Vue 开发的项目构建后生成的 app.js 文件大小为 1.4MB，使用 gzip 压缩后只有 573KB，体积减少了将近 60%。</p><p>附上 webpack 和 node 配置 gzip 的使用方法。</p><p><strong>下载插件</strong></p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">npm install </span><span style="color:#E06C75;">compression-webpack-plugin</span><span style="color:#C678DD;"> --save-dev</span></span>
<span class="line"><span style="color:#C678DD;">npm install compression</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>webpack 配置</strong></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">const CompressionPlugin = require(&#39;compression-webpack-plugin&#39;); module.exports</span></span>
<span class="line"><span style="color:#ABB2BF;">= { plugins: [new CompressionPlugin()], }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>node 配置</strong></p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> compression </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;compression&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在其他中间件前使用</span></span>
<span class="line"><span style="color:#ABB2BF;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">compression</span><span style="color:#ABB2BF;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_9-图片优化" tabindex="-1">9. 图片优化 <a class="header-anchor" href="#_9-图片优化" aria-label="Permalink to &quot;9. 图片优化&quot;">​</a></h3><h4 id="_1-图片延迟加载" tabindex="-1">(1). 图片延迟加载 <a class="header-anchor" href="#_1-图片延迟加载" aria-label="Permalink to &quot;(1). 图片延迟加载&quot;">​</a></h4><p>在页面中，先不给图片设置路径，只有当图片出现在浏览器的可视区域时，才去加载真正的图片，这就是延迟加载。对于图片很多的网站来说，一次性加载全部图片，会对用户体验造成很大的影响，所以需要使用图片延迟加载。</p><p>首先可以将图片这样设置，在页面不可见时图片不会加载：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">img</span></span>
<span class="line"><span style="color:#D19A66;">	data-src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;https://avatars0.githubusercontent.com/u/22117876?s=460&amp;u=7bd8f32788df6988833da6bd155c3cfbebc68006&amp;v=4&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>等页面可见时，使用 JS 加载图片：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> img</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;img&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">img</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> img</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dataset</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这样图片就加载出来了，完整的代码可以看一下参考资料。</p><p>参考资料：</p><ul><li><a href="https://juejin.im/entry/6844903482164510734" title="https://juejin.im/entry/6844903482164510734" target="_blank" rel="noreferrer">web 前端图片懒加载实现原理</a></li></ul><h4 id="_2-响应式图片" tabindex="-1">(2). 响应式图片 <a class="header-anchor" href="#_2-响应式图片" aria-label="Permalink to &quot;(2). 响应式图片&quot;">​</a></h4><p>响应式图片的优点是浏览器能够根据屏幕大小自动加载合适的图片。</p><p>通过 <code>picture</code> 实现</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">picture</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">source</span><span style="color:#D19A66;"> srcset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;banner_w1000.jpg&quot;</span><span style="color:#D19A66;"> media</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;(min-width: 801px)&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">source</span><span style="color:#D19A66;"> srcset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;banner_w800.jpg&quot;</span><span style="color:#D19A66;"> media</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;(max-width: 800px)&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">img</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;banner_w800.jpg&quot;</span><span style="color:#D19A66;"> alt</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">picture</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过 <code>@media</code> 实现</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">@media</span><span style="color:#ABB2BF;"> (min-width: </span><span style="color:#D19A66;">769</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D19A66;">	.bg</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">		background-image: </span><span style="color:#56B6C2;">url</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">bg1080.jpg</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">@media</span><span style="color:#ABB2BF;"> (max-width: </span><span style="color:#D19A66;">768</span><span style="color:#E06C75;">px</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#D19A66;">	.bg</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">		background-image: </span><span style="color:#56B6C2;">url</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">bg768.jpg</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_3-调整图片大小" tabindex="-1">(3). 调整图片大小 <a class="header-anchor" href="#_3-调整图片大小" aria-label="Permalink to &quot;(3). 调整图片大小&quot;">​</a></h4><p>例如，你有一个 1920 * 1080 大小的图片，用缩略图的方式展示给用户，并且当用户鼠标悬停在上面时才展示全图。如果用户从未真正将鼠标悬停在缩略图上，则浪费了下载图片的时间。</p><p>所以，我们可以用两张图片来实行优化。一开始，只加载缩略图，当用户悬停在图片上时，才加载大图。还有一种办法，即对大图进行延迟加载，在所有元素都加载完成后手动更改大图的 src 进行下载。</p><h4 id="_4-降低图片质量" tabindex="-1">(4). 降低图片质量 <a class="header-anchor" href="#_4-降低图片质量" aria-label="Permalink to &quot;(4). 降低图片质量&quot;">​</a></h4><p>例如 JPG 格式的图片，100% 的质量和 90% 质量的通常看不出来区别，尤其是用来当背景图的时候。我经常用 PS 切背景图时， 将图片切成 JPG 格式，并且将它压缩到 60% 的质量，基本上看不出来区别。</p><p>压缩方法有两种，一是通过 webpack 插件 <code>image-webpack-loader</code>，二是通过在线网站进行压缩。</p><p>以下附上 webpack 插件 <code>image-webpack-loader</code> 的用法。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -D</span><span style="color:#98C379;"> image-webpack-loader</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>webpack 配置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#56B6C2;">\\.</span><span style="color:#E06C75;">(png</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">jpe</span><span style="color:#D19A66;">?</span><span style="color:#E06C75;">g</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">gif</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">svg)(</span><span style="color:#56B6C2;">\\?</span><span style="color:#E06C75;">.</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">?</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  use</span><span style="color:#ABB2BF;">:[</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#E06C75;">    loader</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;url-loader&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    options</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      limit</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">/* 图片大小小于1000字节限制时会自动转成 base64 码引用*/</span></span>
<span class="line"><span style="color:#E06C75;">      name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assetsPath</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;img/[name].[hash:7].[ext]&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /*对图片进行压缩*/</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#E06C75;">      loader</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;image-webpack-loader&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      options</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        bypassOnDebug</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_5-尽可能利用-css3-效果代替图片" tabindex="-1">(5). 尽可能利用 CSS3 效果代替图片 <a class="header-anchor" href="#_5-尽可能利用-css3-效果代替图片" aria-label="Permalink to &quot;(5). 尽可能利用 CSS3 效果代替图片&quot;">​</a></h4><p>有很多图片使用 CSS 效果（渐变、阴影等）就能画出来，这种情况选择 CSS3 效果更好。因为代码大小通常是图片大小的几分之一甚至几十分之一。</p><p>参考资料：</p><ul><li><a href="https://juejin.im/post/6844903816081457159" title="https://juejin.im/post/6844903816081457159" target="_blank" rel="noreferrer">img 图片在 webpack 中使用</a></li></ul><h4 id="_6-使用-webp-格式的图片" tabindex="-1">(6). 使用 webp 格式的图片 <a class="header-anchor" href="#_6-使用-webp-格式的图片" aria-label="Permalink to &quot;(6). 使用 webp 格式的图片&quot;">​</a></h4><blockquote><p>WebP 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。</p></blockquote><p>参考资料：</p><ul><li><a href="https://www.zhihu.com/question/27201061" title="https://www.zhihu.com/question/27201061" target="_blank" rel="noreferrer">WebP 相对于 PNG、JPG 有什么优势？</a></li></ul><h3 id="_10-通过-webpack-按需加载代码-提取第三库代码-减少-es6-转为-es5-的冗余代码" tabindex="-1">10. 通过 webpack 按需加载代码，提取第三库代码，减少 ES6 转为 ES5 的冗余代码 <a class="header-anchor" href="#_10-通过-webpack-按需加载代码-提取第三库代码-减少-es6-转为-es5-的冗余代码" aria-label="Permalink to &quot;10. 通过 webpack 按需加载代码，提取第三库代码，减少 ES6 转为 ES5 的冗余代码&quot;">​</a></h3><blockquote><p>懒加载或者按需加载，是一种很好的优化网页或应用的方式。这种方式实际上是先把你的代码在一些逻辑断点处分离开，然后在一些代码块中完成某些操作后，立即引用或即将引用另外一些新的代码块。这样加快了应用的初始加载速度，减轻了它的总体体积，因为某些代码块可能永远不会被加载。</p></blockquote><h4 id="根据文件内容生成文件名-结合-import-动态引入组件实现按需加载" tabindex="-1">根据文件内容生成文件名，结合 import 动态引入组件实现按需加载 <a class="header-anchor" href="#根据文件内容生成文件名-结合-import-动态引入组件实现按需加载" aria-label="Permalink to &quot;根据文件内容生成文件名，结合 import 动态引入组件实现按需加载&quot;">​</a></h4><p>通过配置 output 的 filename 属性可以实现这个需求。filename 属性的值选项中有一个 [contenthash]，它将根据文件内容创建出唯一 hash。当文件内容发生变化时，[contenthash] 也会发生变化。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    filename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;[name].[contenthash].js&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    chunkFilename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;[name].[contenthash].js&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;../dist&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="提取第三方库" tabindex="-1">提取第三方库 <a class="header-anchor" href="#提取第三方库" aria-label="Permalink to &quot;提取第三方库&quot;">​</a></h4><p>由于引入的第三方库一般都比较稳定，不会经常改变。所以将它们单独提取出来，作为长期缓存是一个更好的选择。 这里需要使用 webpack4 的 splitChunk 插件 cacheGroups 选项。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">optimization</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      runtimeChunk</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;manifest&#39;</span><span style="color:#7F848E;font-style:italic;"> // 将 webpack 的 runtime 代码拆分为一个单独的 chunk。</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    splitChunks</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        cacheGroups</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">            vendor</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">                name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;chunk-vendors&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                test</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;"> /</span><span style="color:#D19A66;">[</span><span style="color:#56B6C2;">\\\\</span><span style="color:#D19A66;">/]</span><span style="color:#E06C75;">node_modules</span><span style="color:#D19A66;">[</span><span style="color:#56B6C2;">\\\\</span><span style="color:#D19A66;">/]</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                priority</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                chunks</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;initial&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#E06C75;">            common</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">                name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;chunk-common&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                minChunks</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                priority</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                chunks</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;initial&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                reuseExistingChunk</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ul><li>test: 用于控制哪些模块被这个缓存组匹配到。原封不动传递出去的话，它默认会选择所有的模块。可以传递的值类型：RegExp、String 和 Function;</li><li>priority：表示抽取权重，数字越大表示优先级越高。因为一个 module 可能会满足多个 cacheGroups 的条件，那么抽取到哪个就由权重最高的说了算；</li><li>reuseExistingChunk：表示是否使用已有的 chunk，如果为 true 则表示如果当前的 chunk 包含的模块已经被抽取出去了，那么将不会重新生成新的。</li><li>minChunks（默认是 1）：在分割之前，这个代码块最小应该被引用的次数（译注：保证代码块复用性，默认配置的策略是不需要多次引用也可以被分割）</li><li>chunks (默认是 async) ：initial、async 和 all</li><li>name(打包的 chunks 的名字)：字符串或者函数(函数可以根据条件自定义名字)</li></ul><h4 id="减少-es6-转为-es5-的冗余代码" tabindex="-1">减少 ES6 转为 ES5 的冗余代码 <a class="header-anchor" href="#减少-es6-转为-es5-的冗余代码" aria-label="Permalink to &quot;减少 ES6 转为 ES5 的冗余代码&quot;">​</a></h4><p>Babel 转化后的代码想要实现和原来代码一样的功能需要借助一些帮助函数，比如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>会被转换为：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> _classCallCheck</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">instance</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">Constructor</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">instance</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Constructor</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TypeError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Cannot call a class as a function&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> Person</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">	_classCallCheck</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Person</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这里 <code>_classCallCheck</code> 就是一个 <code>helper</code> 函数，如果在很多文件里都声明了类，那么就会产生很多个这样的 <code>helper</code> 函数。</p><p>这里的 <code>@babel/runtime</code> 包就声明了所有需要用到的帮助函数，而 <code>@babel/plugin-transform-runtime</code> 的作用就是将所有需要 <code>helper</code> 函数的文件，从 <code>@babel/runtime包</code> 引进来：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> _classCallCheck2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@babel/runtime/helpers/classCallCheck&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> _classCallCheck3</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> _interopRequireDefault</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_classCallCheck2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> _interopRequireDefault</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__esModule</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> obj</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> Person</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">_classCallCheck3</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">)(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Person</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这里就没有再编译出 <code>helper</code> 函数 <code>classCallCheck</code> 了，而是直接引用了 <code>@babel/runtime</code> 中的 <code>helpers/classCallCheck</code>。</p><p><strong>安装</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -D</span><span style="color:#98C379;"> @babel/plugin-transform-runtime</span><span style="color:#98C379;"> @babel/runtime</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>使用</strong> 在 <code>.babelrc</code> 文件中</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;plugins&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">        &quot;</span><span style="color:#E06C75;">@babel</span><span style="color:#98C379;">/plugin-transform-runtime&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>参考资料：</p><ul><li><a href="https://www.jianshu.com/p/d078b5f3036a" title="https://www.jianshu.com/p/d078b5f3036a" target="_blank" rel="noreferrer">Babel 7.1 介绍 transform-runtime polyfill env</a></li><li><a href="https://link.juejin.cn?target=http%3A//webpack.docschina.org/guides/lazy-loading/" title="http://webpack.docschina.org/guides/lazy-loading/" target="_blank" rel="noreferrer">懒加载</a></li><li><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html%23%25E8%25B7%25AF%25E7%2594%25B1%25E6%2587%2592%25E5%258A%25A0%25E8%25BD%25BD" title="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E8%B7%AF%E7%94%B1%E6%87%92%E5%8A%A0%E8%BD%BD" target="_blank" rel="noreferrer">Vue 路由懒加载</a></li><li><a href="https://webpack.docschina.org/guides/caching/" title="https://webpack.docschina.org/guides/caching/" target="_blank" rel="noreferrer">webpack 缓存</a></li><li><a href="https://juejin.im/post/6844903614759043079" title="https://juejin.im/post/6844903614759043079" target="_blank" rel="noreferrer">一步一步的了解 webpack4 的 splitChunk 插件</a></li></ul><h3 id="_11-减少重绘重排" tabindex="-1">11. 减少重绘重排 <a class="header-anchor" href="#_11-减少重绘重排" aria-label="Permalink to &quot;11. 减少重绘重排&quot;">​</a></h3><p><strong>浏览器渲染过程</strong></p><ol><li>解析 HTML 生成 DOM 树。</li><li>解析 CSS 生成 CSSOM 规则树。</li><li>解析 JS，操作 DOM 树和 CSSOM 规则树。</li><li>将 DOM 树与 CSSOM 规则树合并在一起生成渲染树。</li><li>遍历渲染树开始布局，计算每个节点的位置大小信息。</li><li>浏览器将所有图层的数据发送给 GPU，GPU 将图层合成并显示在屏幕上。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e927ffe33f3d4bdba64e179e9c793bb9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="在这里插入图片描述"></p><p><strong>重排</strong></p><p>当改变 DOM 元素位置或大小时，会导致浏览器重新生成渲染树，这个过程叫重排。</p><p><strong>重绘</strong></p><p>当重新生成渲染树后，就要将渲染树每个节点绘制到屏幕，这个过程叫重绘。不是所有的动作都会导致重排，例如改变字体颜色，只会导致重绘。记住，重排会导致重绘，重绘不会导致重排 。</p><p>重排和重绘这两个操作都是非常昂贵的，因为 JavaScript 引擎线程与 GUI 渲染线程是互斥，它们同时只能一个在工作。</p><p>什么操作会导致重排？</p><ul><li>添加或删除可见的 DOM 元素</li><li>元素位置改变</li><li>元素尺寸改变</li><li>内容改变</li><li>浏览器窗口尺寸改变</li></ul><p>如何减少重排重绘？</p><ul><li>用 JavaScript 修改样式时，最好不要直接写样式，而是替换 class 来改变样式。</li><li>如果要对 DOM 元素执行一系列操作，可以将 DOM 元素脱离文档流，修改完成后，再将它带回文档。推荐使用隐藏元素（display:none）或文档碎片（DocumentFragement），都能很好的实现这个方案。</li></ul><h3 id="_12-使用事件委托" tabindex="-1">12. 使用事件委托 <a class="header-anchor" href="#_12-使用事件委托" aria-label="Permalink to &quot;12. 使用事件委托&quot;">​</a></h3><p>事件委托利用了事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。所有用到按钮的事件（多数鼠标事件和键盘事件）都适合采用事件委托技术， 使用事件委托可以节省内存。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;苹果&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;香蕉&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;凤梨&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;ul&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nodeName</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;LI&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;li&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_13-注意程序的局部性" tabindex="-1">13. 注意程序的局部性 <a class="header-anchor" href="#_13-注意程序的局部性" aria-label="Permalink to &quot;13. 注意程序的局部性&quot;">​</a></h3><p>一个编写良好的计算机程序常常具有良好的局部性，它们倾向于引用最近引用过的数据项附近的数据项，或者最近引用过的数据项本身，这种倾向性，被称为局部性原理。有良好局部性的程序比局部性差的程序运行得更快。</p><p><strong>局部性通常有两种不同的形式：</strong></p><ul><li>时间局部性：在一个具有良好时间局部性的程序中，被引用过一次的内存位置很可能在不远的将来被多次引用。</li><li>空间局部性 ：在一个具有良好空间局部性的程序中，如果一个内存位置被引用了一次，那么程序很可能在不远的将来引用附近的一个内存位置。</li></ul><p>时间局部性示例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arry</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		sum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> len</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arry</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> len</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		sum</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> arry</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在这个例子中，变量 sum 在每次循环迭代中被引用一次，因此，对于 sum 来说，具有良好的时间局部性</p><p>空间局部性示例</p><p><strong>具有良好空间局部性的程序</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 二维数组</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sum1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arry</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">rows</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cols</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		j</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		sum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> rows</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> cols</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			sum</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> arry</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">][</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>空间局部性差的程序</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 二维数组</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sum2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arry</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">rows</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">cols</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		j</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		sum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> cols</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> rows</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			sum</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> arry</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">][</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>看一下上面的两个空间局部性示例，像示例中从每行开始按顺序访问数组每个元素的方式，称为具有步长为 1 的引用模式。 如果在数组中，每隔 k 个元素进行访问，就称为步长为 k 的引用模式。 一般而言，随着步长的增加，空间局部性下降。</p><p>这两个例子有什么区别？区别在于第一个示例是按行扫描数组，每扫描完一行再去扫下一行；第二个示例是按列来扫描数组，扫完一行中的一个元素，马上就去扫下一行中的同一列元素。</p><p>数组在内存中是按照行顺序来存放的，结果就是逐行扫描数组的示例得到了步长为 1 引用模式，具有良好的空间局部性；而另一个示例步长为 rows，空间局部性极差。</p><h4 id="性能测试" tabindex="-1">性能测试 <a class="header-anchor" href="#性能测试" aria-label="Permalink to &quot;性能测试&quot;">​</a></h4><p>运行环境：</p><ul><li>cpu: i5-7400</li><li>浏览器: chrome 70.0.3538.110</li></ul><p>对一个长度为 9000 的二维数组（子数组长度也为 9000）进行 10 次空间局部性测试，时间（毫秒）取平均值，结果如下：</p><p>所用示例为上述两个空间局部性示例</p><table tabindex="0"><thead><tr><th>步长为 1</th><th>步长为 9000</th></tr></thead><tbody><tr><td>124</td><td>2316</td></tr></tbody></table><p>从以上测试结果来看，步长为 1 的数组执行时间比步长为 9000 的数组快了一个数量级。</p><p>总结：</p><ul><li>重复引用相同变量的程序具有良好的时间局部性</li><li>对于具有步长为 k 的引用模式的程序，步长越小，空间局部性越好；而在内存中以大步长跳来跳去的程序空间局部性会很差</li></ul><p>参考资料：</p><ul><li><a href="https://book.douban.com/subject/26912767/" title="https://book.douban.com/subject/26912767/" target="_blank" rel="noreferrer">深入理解计算机系统</a></li></ul><h3 id="_14-if-else-对比-switch" tabindex="-1">14. if-else 对比 switch <a class="header-anchor" href="#_14-if-else-对比-switch" aria-label="Permalink to &quot;14. if-else 对比 switch&quot;">​</a></h3><p>当判断条件数量越来越多时，越倾向于使用 switch 而不是 if-else。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;blue&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;yellow&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;white&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;black&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;green&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;orange&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;pink&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;blue&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;yellow&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;white&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;black&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;green&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;orange&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;pink&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>像上面的这种情况，从可读性来说，使用 switch 是比较好的（js 的 switch 语句不是基于哈希实现，而是循环判断，所以说 if-else、switch 从性能上来说是一样的）。</p><h3 id="_15-查找表" tabindex="-1">15. 查找表 <a class="header-anchor" href="#_15-查找表" aria-label="Permalink to &quot;15. 查找表&quot;">​</a></h3><p>当条件语句特别多时，使用 switch 和 if-else 不是最佳的选择，这时不妨试一下查找表。查找表可以使用数组和对象来构建。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;1&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;2&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;3&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;4&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;5&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;6&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result6</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;7&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result7</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;8&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result8</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;9&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result9</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;10&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;11&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result11</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>可以将这个 switch 语句转换为查找表</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> results</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#E06C75;">	result0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result4</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result5</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result6</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result7</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result8</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result9</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	result11</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> results</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>如果条件语句不是数值而是字符串，可以用对象来建立查找表</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> map</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	red</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">result0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	green</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">result1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> map</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_16-避免页面卡顿" tabindex="-1">16. 避免页面卡顿 <a class="header-anchor" href="#_16-避免页面卡顿" aria-label="Permalink to &quot;16. 避免页面卡顿&quot;">​</a></h3><p><strong>60fps 与设备刷新率</strong></p><blockquote><p>目前大多数设备的屏幕刷新率为 60 次/秒。因此，如果在页面中有一个动画或渐变效果，或者用户正在滚动页面，那么浏览器渲染动画或页面的每一帧的速率也需要跟设备屏幕的刷新率保持一致。 其中每个帧的预算时间仅比 16 毫秒多一点 (1 秒/ 60 = 16.66 毫秒)。但实际上，浏览器有整理工作要做，因此您的所有工作需要在 10 毫秒内完成。如果无法符合此预算，帧率将下降，并且内容会在屏幕上抖动。 此现象通常称为卡顿，会对用户体验产生负面影响。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5877fb299fb94e979551481dcf79e67f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="在这里插入图片描述"></p><p>假如你用 JavaScript 修改了 DOM，并触发样式修改，经历重排重绘最后画到屏幕上。如果这其中任意一项的执行时间过长，都会导致渲染这一帧的时间过长，平均帧率就会下降。假设这一帧花了 50 ms，那么此时的帧率为 1s / 50ms = 20fps，页面看起来就像卡顿了一样。</p><p>对于一些长时间运行的 JavaScript，我们可以使用定时器进行切分，延迟执行。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">len</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arry</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> len</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	process</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arry</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>假设上面的循环结构由于 process() 复杂度过高或数组元素太多，甚至两者都有，可以尝试一下切分。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> todo</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arry</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">	process</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">callee</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">25</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arry</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">25</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果有兴趣了解更多，可以查看一下<a href="https://github.com/woai3c/recommended-books/blob/master/%25E5%2589%258D%25E7%25AB%25AF/%25E9%25AB%2598%25E6%2580%25A7%25E8%2583%25BDJavaScript.pdf" title="https://github.com/woai3c/recommended-books/blob/master/%E5%89%8D%E7%AB%AF/%E9%AB%98%E6%80%A7%E8%83%BDJavaScript.pdf" target="_blank" rel="noreferrer">高性能 JavaScript</a>第 6 章和<a href="https://book.douban.com/subject/30170670/" title="https://book.douban.com/subject/30170670/" target="_blank" rel="noreferrer">高效前端：Web 高效编程与优化实践</a>第 3 章。</p><p>参考资料：</p><ul><li><a href="https://developers.google.com/web/fundamentals/performance/rendering" title="https://developers.google.com/web/fundamentals/performance/rendering" target="_blank" rel="noreferrer">渲染性能</a></li></ul><h3 id="_17-使用-requestanimationframe-来实现视觉变化" tabindex="-1">17. 使用 requestAnimationFrame 来实现视觉变化 <a class="header-anchor" href="#_17-使用-requestanimationframe-来实现视觉变化" aria-label="Permalink to &quot;17. 使用 requestAnimationFrame 来实现视觉变化&quot;">​</a></h3><p>从第 16 点我们可以知道，大多数设备屏幕刷新率为 60 次/秒，也就是说每一帧的平均时间为 16.66 毫秒。在使用 JavaScript 实现动画效果的时候，最好的情况就是每次代码都是在帧的开头开始执行。而保证 JavaScript 在帧开始时运行的唯一方式是使用 <code>requestAnimationFrame</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/** * If run as a requestAnimationFrame callback, this * will be run at the start of the frame. */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> updateScreen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Make visual updates here.</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">requestAnimationFrame</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">updateScreen</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果采取 <code>setTimeout</code> 或 <code>setInterval</code> 来实现动画的话，回调函数将在帧中的某个时点运行，可能刚好在末尾，而这可能经常会使我们丢失帧，导致卡顿。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/090488e1a87540558ffdeb8fb4fd157f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="在这里插入图片描述"></p><p>参考资料：</p><ul><li><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=zh-cn" title="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=zh-cn" target="_blank" rel="noreferrer">优化 JavaScript 执行</a></li></ul><h3 id="_18-使用-web-workers" tabindex="-1">18. 使用 Web Workers <a class="header-anchor" href="#_18-使用-web-workers" aria-label="Permalink to &quot;18. 使用 Web Workers&quot;">​</a></h3><p>Web Worker 使用其他工作线程从而独立于主线程之外，它可以执行任务而不干扰用户界面。一个 worker 可以将消息发送到创建它的 JavaScript 代码, 通过将消息发送到该代码指定的事件处理程序（反之亦然）。</p><p>Web Worker 适用于那些处理纯数据，或者与浏览器 UI 无关的长时间运行脚本。</p><p>创建一个新的 worker 很简单，指定一个脚本的 URI 来执行 worker 线程（main.js）：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> myWorker</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Worker</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;worker.js&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 你可以通过postMessage() 方法和onmessage事件向worker发送消息。</span></span>
<span class="line"><span style="color:#E5C07B;">first</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onchange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	myWorker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">([</span><span style="color:#E5C07B;">first</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">second</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Message posted to worker&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">second</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onchange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	myWorker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">([</span><span style="color:#E5C07B;">first</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">second</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Message posted to worker&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在 worker 中接收到消息后，我们可以写一个事件处理函数代码作为响应（worker.js）：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">onmessage</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Message received from main script&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> workerResult</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Result: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Posting message back to main script&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	postMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">workerResult</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>onmessage 处理函数在接收到消息后马上执行，代码中消息本身作为事件的 data 属性进行使用。这里我们简单的对这 2 个数字作乘法处理并再次使用 postMessage()方法，将结果回传给主线程。</p><p>回到主线程，我们再次使用 onmessage 以响应 worker 回传的消息：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">myWorker</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onmessage</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">textContent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Message received from worker&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这里我们获取消息事件的 data，并且将它设置为 result 的 textContent，所以用户可以直接看到运算的结果。</p><p>不过在 worker 内，不能直接操作 DOM 节点，也不能使用 window 对象的默认方法和属性。然而你可以使用大量 window 对象之下的东西，包括 WebSockets，IndexedDB 以及 FireFox OS 专用的 Data Store API 等数据存储机制。</p><p>参考资料：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noreferrer">使用 Web Workers - Web API 接口参考 | MDN (mozilla.org)</a></li></ul><h3 id="_19-使用位操作" tabindex="-1">19. 使用位操作 <a class="header-anchor" href="#_19-使用位操作" aria-label="Permalink to &quot;19. 使用位操作&quot;">​</a></h3><p>JavaScript 中的数字都使用 IEEE-754 标准以 64 位格式存储。但是在位操作中，数字被转换为有符号的 32 位格式。即使需要转换，位操作也比其他数学运算和布尔操作快得多。</p><h5 id="取模" tabindex="-1">取模 <a class="header-anchor" href="#取模" aria-label="Permalink to &quot;取模&quot;">​</a></h5><p>由于偶数的最低位为 0，奇数为 1，所以取模运算可以用位操作来代替。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 奇数</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 偶数</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 位操作</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 奇数</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 偶数</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="取整" tabindex="-1">取整 <a class="header-anchor" href="#取整" aria-label="Permalink to &quot;取整&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">~~</span><span style="color:#D19A66;">10.12</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:#56B6C2;">~~</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:#56B6C2;">~~</span><span style="color:#98C379;">&quot;1.5&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#56B6C2;">~~</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#56B6C2;">~~</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="位掩码" tabindex="-1">位掩码 <a class="header-anchor" href="#位掩码" aria-label="Permalink to &quot;位掩码&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过定义这些选项，可以用按位与操作来判断 a/b/c 是否在 options 中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 选项 b 是否在选项中</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#E06C75;"> options</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_20-不要覆盖原生方法" tabindex="-1">20. 不要覆盖原生方法 <a class="header-anchor" href="#_20-不要覆盖原生方法" aria-label="Permalink to &quot;20. 不要覆盖原生方法&quot;">​</a></h3><p>无论你的 JavaScript 代码如何优化，都比不上原生方法。因为原生方法是用低级语言写的（C/C++），并且被编译成机器码，成为浏览器的一部分。当原生方法可用时，尽量使用它们，特别是数学运算和 DOM 操作。</p><h3 id="_21-降低-css-选择器的复杂性" tabindex="-1">21. 降低 CSS 选择器的复杂性 <a class="header-anchor" href="#_21-降低-css-选择器的复杂性" aria-label="Permalink to &quot;21. 降低 CSS 选择器的复杂性&quot;">​</a></h3><h4 id="_1-浏览器读取选择器-遵循的原则是从选择器的右边到左边读取" tabindex="-1">(1). 浏览器读取选择器，遵循的原则是从选择器的右边到左边读取 <a class="header-anchor" href="#_1-浏览器读取选择器-遵循的原则是从选择器的右边到左边读取" aria-label="Permalink to &quot;(1). 浏览器读取选择器，遵循的原则是从选择器的右边到左边读取&quot;">​</a></h4><p>看个示例</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">#block</span><span style="color:#D19A66;"> .text</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	color: </span><span style="color:#D19A66;">red</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li>查找所有 P 元素。</li><li>查找结果 1 中的元素是否有类名为 text 的父元素</li><li>查找结果 2 中的元素是否有 id 为 block 的父元素</li></ol><h4 id="_2-css-选择器优先级" tabindex="-1">(2). CSS 选择器优先级 <a class="header-anchor" href="#_2-css-选择器优先级" aria-label="Permalink to &quot;(2). CSS 选择器优先级&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>内联 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>根据以上两个信息可以得出结论。</p><ol><li>选择器越短越好。</li><li>尽量使用高优先级的选择器，例如 ID 和类选择器。</li><li>避免使用通配符 *。</li></ol><p>最后要说一句，据我查找的资料所得，CSS 选择器没有优化的必要，因为最慢和慢快的选择器性能差别非常小。</p><p>参考资料：</p><ul><li><a href="https://ecss.io/appendix1.html" title="https://ecss.io/appendix1.html" target="_blank" rel="noreferrer">CSS selector performance</a></li><li><a href="https://www.sitepoint.com/optimizing-css-id-selectors-and-other-myths/" title="https://www.sitepoint.com/optimizing-css-id-selectors-and-other-myths/" target="_blank" rel="noreferrer">Optimizing CSS: ID Selectors and Other Myths</a></li></ul><h3 id="_22-使用-flexbox-而不是较早的布局模型" tabindex="-1">22. 使用 flexbox 而不是较早的布局模型 <a class="header-anchor" href="#_22-使用-flexbox-而不是较早的布局模型" aria-label="Permalink to &quot;22. 使用 flexbox 而不是较早的布局模型&quot;">​</a></h3><p>在早期的 CSS 布局方式中我们能对元素实行绝对定位、相对定位或浮动定位。而现在，我们有了新的布局方式 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox" title="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox" target="_blank" rel="noreferrer">flexbox</a>，它比起早期的布局方式来说有个优势，那就是性能比较好。</p><p>下面的截图显示了在 1300 个框上使用浮动的布局开销：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8171c61cb63f4e599bd8e0144371f2dc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="在这里插入图片描述"></p><p>然后我们用 flexbox 来重现这个例子：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e95eca94007949ee8f0b4f5e7306bbf0~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="在这里插入图片描述"></p><p>现在，对于相同数量的元素和相同的视觉外观，布局的时间要少得多（本例中为分别 3.5 毫秒和 14 毫秒）。</p><p>不过 flexbox 兼容性还是有点问题，不是所有浏览器都支持它，所以要谨慎使用。</p><p>各浏览器兼容性：</p><ul><li>Chrome 29+</li><li>Firefox 28+</li><li>Internet Explorer 11</li><li>Opera 17+</li><li>Safari 6.1+ (prefixed with -webkit-)</li><li>Android 4.4+</li><li>iOS 7.1+ (prefixed with -webkit-)</li></ul><p>参考资料：</p><ul><li><a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=zh-cn" title="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing?hl=zh-cn" target="_blank" rel="noreferrer">使用 flexbox 而不是较早的布局模型</a></li></ul><h3 id="_23-使用-transform-和-opacity-属性更改来实现动画" tabindex="-1">23. 使用 transform 和 opacity 属性更改来实现动画 <a class="header-anchor" href="#_23-使用-transform-和-opacity-属性更改来实现动画" aria-label="Permalink to &quot;23. 使用 transform 和 opacity 属性更改来实现动画&quot;">​</a></h3><p>在 CSS 中，transforms 和 opacity 这两个属性更改不会触发重排与重绘，它们是可以由合成器（composite）单独处理的属性。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/675e5328a6e34e30af51e09689368f7d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt="在这里插入图片描述"></p><p>参考资料：</p><ul><li><a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count?hl=zh-cn" title="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count?hl=zh-cn" target="_blank" rel="noreferrer">使用 transform 和 opacity 属性更改来实现动画</a></li></ul><h3 id="_24-合理使用规则-避免过度优化" tabindex="-1">24. 合理使用规则，避免过度优化 <a class="header-anchor" href="#_24-合理使用规则-避免过度优化" aria-label="Permalink to &quot;24. 合理使用规则，避免过度优化&quot;">​</a></h3><p>性能优化主要分为两类：</p><ol><li>加载时优化</li><li>运行时优化</li></ol><p>上述 23 条建议中，属于加载时优化的是前面 10 条建议，属于运行时优化的是后面 13 条建议。通常来说，没有必要 23 条性能优化规则都用上，根据网站用户群体来做针对性的调整是最好的，节省精力，节省时间。</p><p>在解决问题之前，得先找出问题，否则无从下手。所以在做性能优化之前，最好先调查一下网站的加载性能和运行性能。</p><h5 id="检查加载性能" tabindex="-1">检查加载性能 <a class="header-anchor" href="#检查加载性能" aria-label="Permalink to &quot;检查加载性能&quot;">​</a></h5><p>一个网站加载性能如何主要看白屏时间和首屏时间。</p><ul><li>白屏时间：指从输入网址，到页面开始显示内容的时间。</li><li>首屏时间：指从输入网址，到页面完全渲染的时间。</li></ul><p>将以下脚本放在 <code>&lt;/head&gt;</code> 前面就能获取白屏时间。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> performance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">timing</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">navigationStart</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 通过 domLoading 和 navigationStart 也可以</span></span>
<span class="line"><span style="color:#E5C07B;">	performance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">timing</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">domLoading</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;"> performance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">timing</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">navigationStart</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 <code>window.onload</code> 事件里执行 <code>new Date() - performance.timing.navigationStart</code> 即可获取首屏时间。</p><h5 id="检查运行性能" tabindex="-1">检查运行性能 <a class="header-anchor" href="#检查运行性能" aria-label="Permalink to &quot;检查运行性能&quot;">​</a></h5><p>配合 chrome 的开发者工具，我们可以查看网站在运行时的性能。</p><p>打开网站，按 F12 选择 performance，点击左上角的灰色圆点，变成红色就代表开始记录了。这时可以模仿用户使用网站，在使用完毕后，点击 stop，然后你就能看到网站运行期间的性能报告。如果有红色的块，代表有掉帧的情况；如果是绿色，则代表 FPS 很好。performance 的具体使用方法请用搜索引擎搜索一下，毕竟篇幅有限。</p><hr><h2 id="提高首屏加载速度" tabindex="-1">提高首屏加载速度 <a class="header-anchor" href="#提高首屏加载速度" aria-label="Permalink to &quot;提高首屏加载速度&quot;">​</a></h2><p>我们知道是 app.js 文件太大，加载时间太长导致了首屏加载速度过慢，我们就需要对症下药减小 app.js 的大小，提高网站访问速度。</p><h6 id="一、压缩" tabindex="-1">一、压缩 <a class="header-anchor" href="#一、压缩" aria-label="Permalink to &quot;一、压缩&quot;">​</a></h6><p>对代码进行压缩，我们可以减小代码的体积量。</p><h6 id="二、路由懒加载" tabindex="-1">二、路由懒加载 <a class="header-anchor" href="#二、路由懒加载" aria-label="Permalink to &quot;二、路由懒加载&quot;">​</a></h6><p>当我们使用路由懒加载后，项目就会进行按需加载，其原理就是利用 webpack 大法的 code splitting，当你使用路由加载的写法，webpack 就会对 app.js 进行代码分割，减小 app.js 的体积，从而提高首屏加载数点。</p><p>没使用路由懒加载前的 app.js：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6bc2464150d4dde8cdd87dd4a303f7d~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="2444cb58e449ec5ade0be219bbc50d11jpg"></p><p>使用路由懒加载后对 app.js 进行 code splitting：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5894023f051494780324029951868de~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="859c4c1052f2ec4ce75acad28a040bedjpg"></p><h2 id="三、cdn-引入" tabindex="-1">三、CDN 引入 <a class="header-anchor" href="#三、cdn-引入" aria-label="Permalink to &quot;三、CDN 引入&quot;">​</a></h2><p>采用 CDN 引入，在 index.html 使用 CDN 引入，并在 webpack 配置。打包之后 webpack 进会从外部打包第三方引入的库,减小 app.js 的体积，从而提高首屏加载速度。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0908b9803dc47c09be50588e0552302~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="企业微信截图16445727114999png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0f4a07e69f44278ade44cd881f9c2fb~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="imagepng"></p><p>没使用 CDN 引入前 app.js 的大小：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43c7debfbeb34b8ebab5d6cc1bb202f2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="imagepng"></p><p>使用 CDN 引入后 app.js 的大小：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e45a3227929a493481bd142cdb177ef1~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="企业微信截图164273430576png"></p><h2 id="四、ssr-服务器渲染" tabindex="-1">四、SSR 服务器渲染 <a class="header-anchor" href="#四、ssr-服务器渲染" aria-label="Permalink to &quot;四、SSR 服务器渲染&quot;">​</a></h2><p>有局限性，禁用了 beforeCreate()和 created()之外的其他生命周期，我自己没有亲自测试过，但这是一种方案。</p><h2 id="五、增加带宽" tabindex="-1">五、增加带宽 <a class="header-anchor" href="#五、增加带宽" aria-label="Permalink to &quot;五、增加带宽&quot;">​</a></h2><p>增加带宽可以提高资源的访问速度，从而提高首批的加载速度，我司项目带宽由 2M 升级到 5M，效果明显。</p><h2 id="六、提取第三方库-vendor" tabindex="-1">六、提取第三方库 vendor <a class="header-anchor" href="#六、提取第三方库-vendor" aria-label="Permalink to &quot;六、提取第三方库 vendor&quot;">​</a></h2><p>这是也是 webpack 大法的 code splitting，提取一些第三方的库，从而减小 app.js 的大小。</p><hr>`,372)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
