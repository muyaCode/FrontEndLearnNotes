import{_ as a,c as n,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/image-20240219153058388.CMhJyDpn.png",o="/FrontEndLearnNotes/assets/image-20240219153153149.Dj6LX3sF.png",t="/FrontEndLearnNotes/assets/image-20240219153453646.9M_h5-QL.png",r="/FrontEndLearnNotes/assets/image-20240219153523584.CIQnt18h.png",h=JSON.parse('{"title":"Pm2的简介和配置使用","description":"","frontmatter":{},"headers":[],"relativePath":"Document/服务器相关配置和运维/Pm2的简介和配置使用.md","filePath":"Document/服务器相关配置和运维/Pm2的简介和配置使用.md","lastUpdated":1750954157000}'),c={name:"Document/服务器相关配置和运维/Pm2的简介和配置使用.md"};function i(u,s,d,y,b,m){return l(),n("div",null,s[0]||(s[0]=[p('<h1 id="pm2的简介和配置使用" tabindex="-1">Pm2的简介和配置使用 <a class="header-anchor" href="#pm2的简介和配置使用" aria-label="Permalink to &quot;Pm2的简介和配置使用&quot;">​</a></h1><h2 id="pm2介绍" tabindex="-1">Pm2介绍 <a class="header-anchor" href="#pm2介绍" aria-label="Permalink to &quot;Pm2介绍&quot;">​</a></h2><p>pm2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，因为在工作中遇到服务器重启后，需要一个个去重新启动每个服务，这样不仅繁琐、效率低，而且容易遗忘开启一些服务。</p><h2 id="pm2-的主要特性" tabindex="-1">PM2 的主要特性 <a class="header-anchor" href="#pm2-的主要特性" aria-label="Permalink to &quot;PM2 的主要特性&quot;">​</a></h2><ul><li>内建负载均衡（使用 Node cluster 集群模块）</li><li>后台运行</li><li>0 秒停机重载</li><li>具有 Ubuntu 和 CentOS 的启动脚本</li><li>停止不稳定的进程（避免无限循环）</li><li>控制台检测</li><li>提供 HTTP API</li><li>远程控制和实时的接口 API ( Nodejs 模块,允许和 PM2 进程管理器交互 )</li></ul><h2 id="一、安装-目录" tabindex="-1">一、安装 &amp; 目录 <a class="header-anchor" href="#一、安装-目录" aria-label="Permalink to &quot;一、安装 &amp; 目录&quot;">​</a></h2><p>1、运行以下命令进行全局安装</p><div class="language-coffeescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">coffeescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#E06C75;"> install </span><span style="color:#ABB2BF;">-</span><span style="color:#61AFEF;">g</span><span style="color:#E06C75;"> pm2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.查看是否安装成功，查看pm2的版本号</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#D19A66;"> -v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="二、常用命令" tabindex="-1">二、常用命令 <a class="header-anchor" href="#二、常用命令" aria-label="Permalink to &quot;二、常用命令&quot;">​</a></h2><h3 id="_1、启动命令" tabindex="-1">1、启动命令 <a class="header-anchor" href="#_1、启动命令" aria-label="Permalink to &quot;1、启动命令&quot;">​</a></h3><div class="language-cobol line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cobol</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">$ pm2 </span><span style="color:#C678DD;">start</span><span style="color:#ABB2BF;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>启动成功后，我们对应可以看到启动的服务的一些信息，如下所示</p><p><img src="'+e+'" alt="image-20240219153058388"></p><h3 id="_2、命令行参数" tabindex="-1">2、命令行参数 <a class="header-anchor" href="#_2、命令行参数" aria-label="Permalink to &quot;2、命令行参数&quot;">​</a></h3><p>我们可以在最基本的启动命令后面，添加一些参数选项，去满足我们的需求，常用的参数选项如下所示：</p><ul><li>--watch：监听应用目录的变化，一旦发生变化，自动重启。</li><li>-i or --instance：启用多少个实例，可用于负载均衡，如果 -i 0 或者 -i max，则根据当前机器核数确定实例数目。</li><li>--ignore-watch：排除监听的目录或文件，可以是特定的文件名，也可以是正则。</li></ul><p>我们在启动命令后面加入以上的一些参数，完整的启动命令如下所示：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pm2</span><span style="color:#98C379;"> start</span><span style="color:#98C379;"> app.js</span><span style="color:#D19A66;"> --watch</span><span style="color:#D19A66;"> -i</span><span style="color:#98C379;"> max</span><span style="color:#D19A66;"> -n</span><span style="color:#98C379;"> xiaoman</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>启动成功后的截图如下，我们通过截图可以看到启动的应用名称变为 xiaoman，然后启动12个进程，说明我们在启动命令后面添加的参数已经起作用。</p><p><img src="'+o+`" alt="image-20240219153153149"></p><h3 id="_3、重启" tabindex="-1">3、重启 <a class="header-anchor" href="#_3、重启" aria-label="Permalink to &quot;3、重启&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> pm2</span><span style="color:#98C379;"> restart</span><span style="color:#98C379;"> app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_4、停止应用进程" tabindex="-1">4、停止应用进程 <a class="header-anchor" href="#_4、停止应用进程" aria-label="Permalink to &quot;4、停止应用进程&quot;">​</a></h3><p>停止特定的应用，可以通过 pm2 list 先获取应用的名字或者进程的 id，然后再调用以下命令停止相应的应用；</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> pm2</span><span style="color:#98C379;"> stop</span><span style="color:#98C379;"> app_name</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">app_id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果需要停止全部的应用，则使用以下命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> pm2</span><span style="color:#98C379;"> stop</span><span style="color:#98C379;"> all</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5、删除应用进程" tabindex="-1">5、删除应用进程 <a class="header-anchor" href="#_5、删除应用进程" aria-label="Permalink to &quot;5、删除应用进程&quot;">​</a></h3><p>删除特定的应用，可以通过 pm2 list 先获取应用的名字或者进程的 id，然后再调用以下命令删除相应的应用；</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> pm2</span><span style="color:#98C379;"> delete</span><span style="color:#98C379;"> app_name</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">app_id</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果需要删除全部的应用，则使用以下命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> pm2</span><span style="color:#98C379;"> delete</span><span style="color:#98C379;"> all</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_6、查看进程" tabindex="-1">6、查看进程 <a class="header-anchor" href="#_6、查看进程" aria-label="Permalink to &quot;6、查看进程&quot;">​</a></h3><p>以表格形式显示</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> pm2</span><span style="color:#98C379;"> list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="三、配置文件" tabindex="-1">三、配置文件 <a class="header-anchor" href="#三、配置文件" aria-label="Permalink to &quot;三、配置文件&quot;">​</a></h2><p>如果我们使用命令行参数定义一些选项，那么每次启动进程时，都需要敲上一大堆的命令，非常繁琐；所以我们可以使用配置文件来将命令行参数进行配置，配置文件里的配置项跟命令行参数是基本一致的；</p><p>如下所示 pm2 的配置文件 pm2.json ，然后在 package.json 文件中配置启动命令 &quot;pm2&quot;: &quot;pm2 start pm2.json&quot; ，这样我们只需要运行 npm run pm2 就可以使用 pm2 启动我们的 express 项目，并且相关运行参数直接在 pm2.json 中配置好了。相关配置项表示的意义在下面文件中都已经注释说明</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;apps&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;express_project&quot;</span><span style="color:#ABB2BF;">,       </span><span style="color:#7F848E;font-style:italic;">// 项目名          </span></span>
<span class="line"><span style="color:#E06C75;">        &quot;script&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;app.js&quot;</span><span style="color:#ABB2BF;">,              </span><span style="color:#7F848E;font-style:italic;">// 执行文件</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;cwd&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./&quot;</span><span style="color:#ABB2BF;">,                     </span><span style="color:#7F848E;font-style:italic;">// 根目录</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;args&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,                      </span><span style="color:#7F848E;font-style:italic;">// 传递给脚本的参数</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;interpreter&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,               </span><span style="color:#7F848E;font-style:italic;">// 指定的脚本解释器</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;interpreter_args&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,          </span><span style="color:#7F848E;font-style:italic;">// 传递给解释器的参数</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;watch&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,                   </span><span style="color:#7F848E;font-style:italic;">// 是否监听文件变动然后重启</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;ignore_watch&quot;</span><span style="color:#ABB2BF;">: [                </span><span style="color:#7F848E;font-style:italic;">// 不用监听的文件</span></span>
<span class="line"><span style="color:#98C379;">            &quot;node_modules&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">            &quot;public&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        ],</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;exec_mode&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cluster_mode&quot;</span><span style="color:#ABB2BF;">,     </span><span style="color:#7F848E;font-style:italic;">// 应用启动模式，支持 fork 和 cluster 模式</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;instances&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;max&quot;</span><span style="color:#ABB2BF;">,              </span><span style="color:#7F848E;font-style:italic;">// 应用启动实例个数，仅在 cluster 模式有效 默认为 fork</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;error_file&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./logs/app-err.log&quot;</span><span style="color:#ABB2BF;">,         </span><span style="color:#7F848E;font-style:italic;">// 错误日志文件</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;out_file&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./logs/app-out.log&quot;</span><span style="color:#ABB2BF;">,           </span><span style="color:#7F848E;font-style:italic;">// 正常日志文件</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;merge_logs&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,                         </span><span style="color:#7F848E;font-style:italic;">// 设置追加日志而不是新建日志</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;log_date_format&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;YYYY-MM-DD HH:mm:ss&quot;</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// 指定日志文件的时间格式</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;min_uptime&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;60s&quot;</span><span style="color:#ABB2BF;">,                        </span><span style="color:#7F848E;font-style:italic;">// 应用运行少于时间被认为是异常启动</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;max_restarts&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">,                         </span><span style="color:#7F848E;font-style:italic;">// 最大异常重启次数</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;autorestart&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,                        </span><span style="color:#7F848E;font-style:italic;">// 默认为 true, 发生异常的情况下自动重启</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;restart_delay&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;60&quot;</span><span style="color:#7F848E;font-style:italic;">                       // 异常重启情况下，延时重启时间</span></span>
<span class="line"><span style="color:#98C379;">        &quot;env&quot;</span><span style="color:#FFFFFF;">:</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">           &quot;NODE_ENV&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;production&quot;</span><span style="color:#ABB2BF;">,                </span><span style="color:#7F848E;font-style:italic;">// 环境参数，当前指定为生产环境</span></span>
<span class="line"><span style="color:#E06C75;">           &quot;REMOTE_ADDR&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">               </span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;env_dev&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">            &quot;NODE_ENV&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;development&quot;</span><span style="color:#ABB2BF;">,              </span><span style="color:#7F848E;font-style:italic;">// 环境参数，当前指定为开发环境</span></span>
<span class="line"><span style="color:#E06C75;">            &quot;REMOTE_ADDR&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;env_test&quot;</span><span style="color:#ABB2BF;">: {                               </span><span style="color:#7F848E;font-style:italic;">// 环境参数，当前指定为测试环境</span></span>
<span class="line"><span style="color:#E06C75;">            &quot;NODE_ENV&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            &quot;REMOTE_ADDR&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="四、高阶应用" tabindex="-1">四、高阶应用 <a class="header-anchor" href="#四、高阶应用" aria-label="Permalink to &quot;四、高阶应用&quot;">​</a></h2><h3 id="_1、负载均衡" tabindex="-1">1、负载均衡 <a class="header-anchor" href="#_1、负载均衡" aria-label="Permalink to &quot;1、负载均衡&quot;">​</a></h3><p>可以使用 -i 参数配置集群数，实现负载均衡，相关命令如下，可以查看 官网章节；</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> pm2</span><span style="color:#98C379;"> start</span><span style="color:#98C379;"> app.js</span><span style="color:#D19A66;"> -i</span><span style="color:#D19A66;"> 3</span><span style="color:#98C379;"> //</span><span style="color:#98C379;"> 开启三个进程</span></span>
<span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> pm2</span><span style="color:#98C379;"> start</span><span style="color:#98C379;"> app.js</span><span style="color:#D19A66;"> -i</span><span style="color:#98C379;"> max</span><span style="color:#98C379;"> //</span><span style="color:#98C379;"> 根据机器CPU核数，开启对应数目的进程</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2、日志查看" tabindex="-1">2、日志查看 <a class="header-anchor" href="#_2、日志查看" aria-label="Permalink to &quot;2、日志查看&quot;">​</a></h3><p>我们可以通过打开日志文件查看日志外，还可以通过 pm2 logs 来查看实时日志，这点有对于线上问题排查；日志查看命令如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">$</span><span style="color:#98C379;"> pm2</span><span style="color:#98C379;"> logs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>则我们可以在命令窗口实时看到日志输出：</p><p><img src="`+t+'" alt="image-20240219153453646"></p><h3 id="_3、监控" tabindex="-1">3、监控 <a class="header-anchor" href="#_3、监控" aria-label="Permalink to &quot;3、监控&quot;">​</a></h3><p>我们可以使用以下命令，查看当前通过 pm2 运行的进程的状态；</p><div class="language-crystal line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">crystal</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">$ pm2 monit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>动态监控界面如下所示：</p><p><img src="'+r+'" alt="image-20240219153523584"></p>',55)]))}const q=a(c,[["render",i]]);export{h as __pageData,q as default};
