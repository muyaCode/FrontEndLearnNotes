import{_ as n,c as a,o as e,ah as o}from"./chunks/framework.DqD713j2.js";const p="/FrontEndLearnNotes/assets/%E8%8A%82%E6%B5%81.coD06gOq.jpg",l="/FrontEndLearnNotes/assets/%E9%98%B2%E6%8A%96.B1I3gUr0.jpg",g=JSON.parse('{"title":"性能优化前置知识","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端性能优化专题/00_性能优化前置知识.md","filePath":"Document/前端性能优化专题/00_性能优化前置知识.md","lastUpdated":1750954157000}'),t={name:"Document/前端性能优化专题/00_性能优化前置知识.md"};function r(c,s,i,d,b,m){return e(),a("div",null,s[0]||(s[0]=[o('<h1 id="性能优化前置知识" tabindex="-1">性能优化前置知识 <a class="header-anchor" href="#性能优化前置知识" aria-label="Permalink to &quot;性能优化前置知识&quot;">​</a></h1><h2 id="为什么要做前端性能优化" tabindex="-1">为什么要做前端性能优化？ <a class="header-anchor" href="#为什么要做前端性能优化" aria-label="Permalink to &quot;为什么要做前端性能优化？&quot;">​</a></h2><p>前端性能优化是指通过一系列的方法和技术，提高网页的加载速度，渲染速度，和交互速度，从而提升用户体验和用户满意度。前端性能优化的重要性有以下几点：</p><p><strong>提高用户留存率和转化率</strong>。</p><ul><li>研究表明，网页的加载速度对用户的行为和决策有很大的影响。如果网页加载时间超过 3 秒，用户的流失率会急剧增加。相反，如果网页加载速度提升 10%，用户的转化率会提升 7%。因此，前端性能优化可以帮助网站吸引和留住更多的用户，增加用户的购买和注册等行为。</li></ul><p><strong>降低服务器压力和成本</strong>。</p><ul><li>前端性能优化可以减少服务器的请求数，缩减资源的大小，减少数据的传输，从而降低服务器的负载和带宽消耗。这样可以提高服务器的稳定性和安全性，节省服务器的运维和维护成本。</li></ul><p><strong>提升品牌形象和竞争力</strong>。</p><ul><li>前端性能优化可以让网站呈现出更快，更流畅，更美观的效果，给用户留下良好的第一印象，增加用户的信任和忠诚度。</li><li>同时，前端性能优化也可以提高网站的搜索引擎排名，增加网站的曝光度和知名度，从而提升品牌形象和竞争力。</li></ul><h2 id="前端性能优化到底是在优化什么" tabindex="-1">前端性能优化到底是在优化什么？ <a class="header-anchor" href="#前端性能优化到底是在优化什么" aria-label="Permalink to &quot;前端性能优化到底是在优化什么？&quot;">​</a></h2><p>其实前端性能优化核心就是两点：</p><ul><li><strong>保证资源更快的 加载速度</strong>：达到越快渲染越快，视图展现就越快</li><li><strong>保证视图更快的 渲染速度/交互速度</strong>：用户与页面交互，前提是页面要渲染出来，其次是页面需要尽早反馈，目的就是保证用户良好的体验性</li></ul><p>而这些核心内容都可以从下面这个老生常谈的问题中延伸开来。</p><blockquote><p><strong>从输入 <code>URL</code> 到页面加载完成发生了什么？</strong></p></blockquote><p>在这还是要简单的总结一下核心内容：</p><ul><li>进行 <code>DNS</code> 解析</li><li>建立 <code>TCP</code> 连接</li><li>客户端发送 <code>HTTP</code> 请求</li><li>服务端响应 <code>HTTP</code> 资源</li><li>浏览器获取响应内容，进行解析和渲染</li></ul><p>以上任意一点都可进行无限扩展、延伸，但点到为止才是现在真正需要的。</p><p>优化高频率事件 onscrolloninput resize onkeyup keydown... 降低代码执行频率</p><p>网页展示的过程</p><p>JavaScript =&gt; Style =&gt; Layout =&gt; Paint =&gt; Composite</p><ul><li>JavaScript 动画/往页面里添加一些 DOM 元素</li><li>Style 确定每个 DOM 应该用什么样式规则</li><li>Layout 布局,计算最终显示的位置和大小</li><li>Paint 绘制 dom,在不同的层上绘制</li><li>Composite 染层合并</li></ul><p>用户 scroll 和 resize 行为会导致页面不断的重新渲染，如果在绑定的回调函数中大量操作 dom 也会出现页面卡顿优化方案</p><p>节流：</p><p><img src="'+p+'" alt="节流"></p><p>防抖：</p><p><img src="'+l+`" alt="防抖"></p><h3 id="函数节流-throttle" tabindex="-1">函数节流(Throttle) <a class="header-anchor" href="#函数节流-throttle" aria-label="Permalink to &quot;函数节流(Throttle)&quot;">​</a></h3><p>节流就是保证一段时间内，核心代码只执行一次</p><p>打个比方：水滴积攒到一定重量才会下落</p><p><strong>简易节流函数</strong>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> throttle</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">method,</span><span style="color:#98C379;"> delay</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#56B6C2;"> let</span><span style="color:#98C379;"> last</span><span style="color:#98C379;"> =</span><span style="color:#D19A66;"> 9</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;"> return</span><span style="color:#98C379;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">  var</span><span style="color:#98C379;"> now</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> +new</span><span style="color:#98C379;"> Date</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">now</span><span style="color:#98C379;"> -</span><span style="color:#98C379;"> last</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">delay</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">   method.apply(this,</span><span style="color:#98C379;"> arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">   last</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> now</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">let</span><span style="color:#98C379;"> logger</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">    console.log(</span><span style="color:#61AFEF;">&#39;logger ------&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">window.addEventListener(</span><span style="color:#61AFEF;">&#39;scrol&#39;</span><span style="color:#61AFEF;">,</span><span style="color:#98C379;"> throttle</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">logger,</span><span style="color:#D19A66;"> 50</span><span style="color:#ABB2BF;">)); </span><span style="color:#61AFEF;">//</span><span style="color:#98C379;"> 持续滚动每5ms触发logger事件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>underscore</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="防抖-debounce" tabindex="-1">防抖(Debounce) <a class="header-anchor" href="#防抖-debounce" aria-label="Permalink to &quot;防抖(Debounce)&quot;">​</a></h3><p>防抖就是一段时间结束后，才能触发一次事件，如果一段时间未结束再次触发事件，就会重新开始计算时间</p><p>打个比方：你在电梯中，门快要关了，突然有人准备上来。电梯并没有改变楼层，而是再次打开梯门。电梯延迟了改变楼层的功能，但是优化了资源。</p><p><strong>简易防抖函数</strong>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="性能指标" tabindex="-1">性能指标 <a class="header-anchor" href="#性能指标" aria-label="Permalink to &quot;性能指标&quot;">​</a></h2><h2 id="rail-模型" tabindex="-1">RAIL 模型 <a class="header-anchor" href="#rail-模型" aria-label="Permalink to &quot;RAIL 模型&quot;">​</a></h2><p><code>Google</code> 为前端页面性能的评估提出了 <code>RAIL</code> 模型，核心内容如下：</p><ul><li><strong><code>Response</code> 响应</strong></li><li><strong><code>Animation</code> 动画</strong></li><li><strong><code>Idle</code> 空闲</strong></li><li><strong><code>Load</code> 加载</strong></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef50ba21dad84cb2948cf34b12bde9cf~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="1"> <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d5b6aae0781485faee0c29c8f633454~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><h2 id="常规性能指标" tabindex="-1">常规性能指标 <a class="header-anchor" href="#常规性能指标" aria-label="Permalink to &quot;常规性能指标&quot;">​</a></h2><p>性能指标其实有不少的内容，但在这我们指列举比较常用的几种：</p><ul><li><strong>首次绘制（<code>First Paint，FP</code>）</strong><ul><li>在渲染进程确认要渲染当前响应资源后，渲染进程会先创建一个空白页面，通常把创建空白页面的这个时间点称为 <code>First Paint</code>，简称 <code>FP</code></li><li>所谓的 <strong>白屏时间</strong> 其实指的就是创建这个空白页面到浏览器开始渲染非空白内容的时间，比如页面背景发生变化等</li></ul></li><li><strong>首次内容绘制（<code>First Contentful Paint，FCP</code>）</strong><ul><li>当用户看见一些 &quot;内容&quot; 元素被绘制在页面上的时间点，和白屏是不一样，它可以是 <strong><code>文本</code></strong> 首次绘制，或 <code>SVG</code> 首次出现，或 <code>Canvas</code> 首次绘制等，即当页面中绘制了第一个 <strong>像素</strong> 时，这个时间点称为 <code>First Content Paint</code>，简称 <code>FCP</code></li></ul></li><li><strong>首屏时间 / 最大内容绘制（<code>Largest Contentful Paint, LCP</code>）</strong><ul><li><code>LCP</code> 是一种新的性能度量标准，<code>LCP</code> 侧重于用户体验的性能度量标准，与现有度量标准相比，更容易理解与推理，当首屏内容完全绘制完成时，这个时间点称为 <code>Largest Content Paint</code>，简称 <code>LCP</code></li><li><strong>最大内容绘制应在 <code>2.5s</code> 内完成</strong></li></ul></li><li><strong>首次输入延迟（<code>First Input Delay, FID</code>）</strong><ul><li><code>FID</code> 测量的是当用户第一次在页面上交互的时候（<strong>点击链接</strong>、<strong>点击按钮</strong> 或 <strong>自定义基于 <code>js</code> 的事件</strong>），到浏览器实际开始处理这个事件的时间</li><li><strong>首次输入延迟应在 <code>100ms</code> 内完成</strong></li></ul></li><li><strong>累积布局偏移（<code>Cumulative Layout Shift, CLS</code>)</strong><ul><li><code>CLS</code> 是为了测量 <strong>视觉稳定性</strong>，以便提供良好的用户体验</li><li><strong>累积布局偏移应保持在  <code>0.1</code> 或更少</strong></li></ul></li><li><strong>首字节达到时间（<code>Time to First Byte，TTFB</code>）</strong><ul><li>指的是浏览器开始收到服务器响应数据的时间（<strong>后台处理时间 + 重定向时间</strong>），是反映服务端响应速度的重要指标</li><li><strong><code>TTFB</code> 时间如果超过 <code>500ms</code>，用户在打开网页的时就会感觉到明显的等待</strong></li></ul></li></ul><h2 id="性能指标工具" tabindex="-1">性能指标工具 <a class="header-anchor" href="#性能指标工具" aria-label="Permalink to &quot;性能指标工具&quot;">​</a></h2><p>通过上述内容了解了性能指标的相关内容和一些阀值，那么接下来的问题是我们怎么获取一个网站的具体性能指标数据呢？</p><p>为了方便还是得使用工具或者说是 <code>API</code>，当然可以 <strong>自定义页面性能指标</strong> 的计算方式，比如有些就是通过计算当前页面 <code>DOM</code> 的 <strong>总节点数</strong> 和 <strong>嵌套层级</strong> 来计算一个网站的分数等，这里就不再额外介绍。</p><h2 id="performance-面板-google" tabindex="-1">Performance 面板（Google） <a class="header-anchor" href="#performance-面板-google" aria-label="Permalink to &quot;Performance 面板（Google）&quot;">​</a></h2><p>具体参数介绍可以看 <a href="https://juejin.cn/post/7052918009555320839#heading-14" title="https://juejin.cn/post/7052918009555320839#heading-14" target="_blank" rel="noreferrer"><code>Big shark@LX</code></a> 大佬的文章，里面介绍的非常详细，这里只列举一些核心点。</p><h3 id="火焰图" tabindex="-1">火焰图 <a class="header-anchor" href="#火焰图" aria-label="Permalink to &quot;火焰图&quot;">​</a></h3><h4 id="networks-指标" tabindex="-1">Networks 指标 <a class="header-anchor" href="#networks-指标" aria-label="Permalink to &quot;Networks 指标&quot;">​</a></h4><p>通过 <code>Networks</code> 指标可以查看到对应服务器加载资源的相关信息：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32819d3302c042a68f8417452a8b6f47~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><p>可以将鼠标 <strong>移动</strong> 或 <strong>点击</strong> 到具体的请求上查看加载时间和加载速度，如下：</p><p><strong>鼠标移入：</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee81a69ca54a43ec9d0104af1976f389~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><p><strong>鼠标点击：</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ffcad197c6bd43729c328bda6b3fec4a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><h3 id="frames-指标" tabindex="-1">Frames 指标 <a class="header-anchor" href="#frames-指标" aria-label="Permalink to &quot;Frames 指标&quot;">​</a></h3><p>通过 <code>Frames</code> 指标可以查看页面每一帧渲染时 <code>CPU</code> 所消耗的时间和持续时间 <code>Duration</code> 的信息，如下：</p><p><strong>图一：</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39b714717abe4a28a49ba4f0c9f1cd16~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><p><strong>图二：</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82e05fe423034338ba63af5563fdacf5~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><h3 id="timings-指标" tabindex="-1">Timings 指标 <a class="header-anchor" href="#timings-指标" aria-label="Permalink to &quot;Timings 指标&quot;">​</a></h3><p>通过 <code>Timings</code> 指标可以查看在上面列举的一些性能指标的值，如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc0b70535904cf386e100c4b6974b15~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><ul><li><strong>首次绘制（<code>First Paint，FP</code>）</strong></li><li><strong>首次内容绘制（<code>First Contentful Paint，FCP</code>）</strong></li><li><strong>首屏时间 / 最大内容绘制（<code>Largest Contentful Paint, LCP</code>）</strong></li><li><strong><code>HTML</code> 文档被完全加载 和 解析完成的时间（<code>DOMContentLoaded, DCL</code>）</strong></li></ul><h3 id="main-指标" tabindex="-1">Main 指标 <a class="header-anchor" href="#main-指标" aria-label="Permalink to &quot;Main 指标&quot;">​</a></h3><p><code>Main</code> 指标包含了加载过程的三个阶段：</p><ul><li>导航阶段 <ul><li>主要是处理响应头的数据，并执行一些老页面退出之前的清理操作</li></ul></li><li>解析 <code>HTML</code> 文件阶段 <ul><li>主要是解析 <code>HTML</code> 数据、解析 <code>CSS</code> 数据、执行 <code>JavaScript</code> 来生成 <code>DOM</code> 和 <code>CSSOM</code></li></ul></li><li>生成位图阶段 <ul><li>主要是将生成的 <code>DOM</code> 和 <code>CSSOM</code> 合并，包括了布局 (<code>Layout</code>)、分层、绘制、合成等一系列操作</li></ul></li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c1b0ccd835a148ac8688fefd4e2a6ad9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><h2 id="lighthouse-面板-google" tabindex="-1">Lighthouse 面板（Google） <a class="header-anchor" href="#lighthouse-面板-google" aria-label="Permalink to &quot;Lighthouse 面板（Google）&quot;">​</a></h2><p><code>Performance</code> 面板最大的优点就是各种数据信息非常的全，但这也是它最大的缺点，数据信息庞大到需要自行过滤，对于不熟悉的开发者来说，还是需要一定的学习成本的。</p><p>相反，<code>Lighthouse</code> 面板中的信息就相对简洁一些，除了检测结果以外，还会提供对应的改进方案，真是考虑得妥妥的，主要检测五个方面的内容：</p><ul><li><strong>Performance（性能）</strong></li><li><strong>Accessibility（可访问性）</strong></li><li><strong>Best practice（最佳实践）</strong></li><li><strong>SEO（搜索引擎优化）</strong></li><li><strong>Progressive Web App（渐进式 Web 应用）</strong></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1f35f41e077439386e03af148e56852~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><p>可以通过 <code>Analyze page load</code> 按钮来开始对页面应用进行检测，这里以掘金首页为例：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1adf55dda6c46bbb82f6b5fbe0e8b5a~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><p>下面以 <strong>Performance 性能</strong> 为例简单看一下具体包含的内容，由于篇幅有限，其他内容可自行测试并进行阅读。</p><h3 id="performance-性能-举一反三" tabindex="-1">Performance 性能（举一反三） <a class="header-anchor" href="#performance-性能-举一反三" aria-label="Permalink to &quot;Performance 性能（举一反三）&quot;">​</a></h3><p>从性能指标的数据来看，只有 <strong>累积布局偏移（<code>Cumulative Layout Shift, CLS</code>)</strong> 满足要求，其他指标显示 <strong>黄色</strong> 和 <strong>红色</strong>，意味着仍有改进的空间，特别是 <strong>首屏时间</strong> 是 <code>2.9s</code> 已经是超过了对应的阈值 <code>2.5s</code>。</p><p>性能指标数据如下图所示：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecf42aeeaea643afa4f06dd8854a457f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><p>甚至还提供了对应的诊断结果，比如提到的图片没有设置对应的宽高：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f7b9461dc014443a565817f65d286fc~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><h3 id="using-the-node-cli" tabindex="-1">Using the Node CLI <a class="header-anchor" href="#using-the-node-cli" aria-label="Permalink to &quot;Using the Node CLI&quot;">​</a></h3><p>甚至还支持在 <code>Node</code> 环境运行，感兴趣的自行去 <code>npm</code> 中查看 <a href="https://www.npmjs.com/package/lighthouse" title="https://www.npmjs.com/package/lighthouse" target="_blank" rel="noreferrer"><strong>文档</strong></a> 即可，这里不过多介绍。 <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/49142b7f6775419681a9a33487a2818f~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><h1 id="性能指标数据收集" tabindex="-1">性能指标数据收集 <a class="header-anchor" href="#性能指标数据收集" aria-label="Permalink to &quot;性能指标数据收集&quot;">​</a></h1><p>上述性能指标工具的能力已经足够强大，覆盖信息也很全面，但如果我们需要将页面性能指标数据收集并上报又该怎么办呢？</p><p>首先排除的肯定是通过 <strong>性能指标工具</strong> 的方式来收集，一旦要检测性能指标数据意味着得是不同的客户端统计数据的结果合集（<s>除非你愿意一台一台客户端来手动记录和收集数据，呸，你愿意你领导还不愿意呢</s>），最理想的方式当然是自动收集和上报，那就意味着这应该是代码要干的活！！！</p><p>既然有这样的需求，那么必定有对应的解决方案，您接着往下看！</p><h2 id="performance-api" tabindex="-1">Performance API <a class="header-anchor" href="#performance-api" aria-label="Permalink to &quot;Performance API&quot;">​</a></h2><p>实际上在浏览器端的全局对象 <code>window</code> 上有一个名为 <code>performance</code> 的属性，它是一个用于支持 <code>IE9</code> 以上及 <code>webkit</code> 内核浏览器中用于记录页面 <strong>加载</strong> 和 <strong>解析</strong> 过程中关键时间点的机制，其兼容性在 <a href="https://caniuse.com/?search=performance" title="https://caniuse.com/?search=performance" target="_blank" rel="noreferrer"><strong><code>caniuse</code></strong></a> 中的表现如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/95bd0412104649c184842a479c06e1c9~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><p>下面就简单介绍一下和 <code>window.performance</code> 相关一些核心属性和方法。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e907aa407422438fb3b405cc6c404539~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><h3 id="performance-timing-属性" tabindex="-1">performance.timing 属性 <a class="header-anchor" href="#performance-timing-属性" aria-label="Permalink to &quot;performance.timing 属性&quot;">​</a></h3><p><code>performance.timing</code> 属性中提供了很多关键的时间信息，我们可以通过这些时间节点来简单的计算出需要的性能指标数据（不一定准确），计算方式如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	domainLookupStart</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	domainLookupEnd</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	navigationStart</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	loadEventEnd</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	responseStart</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	responseEnd</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	connectStart</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	connectEnd</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	redirectStart</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	redirectEnd</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	domContentLoadedEventEnd</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">	domComplete</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> performance</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">timing</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// DNS 查询时间</span></span>
<span class="line"><span style="color:#E5C07B;">DNS</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> domainLookupEnd</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> domainLookupStart</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// TCP 建立连接时间</span></span>
<span class="line"><span style="color:#E5C07B;">TCP</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> connectEnd</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> connectStart</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 页面重定向时间</span></span>
<span class="line"><span style="color:#E06C75;">Redirect</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> redirectEnd</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> redirectStart</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 首字节到底时间</span></span>
<span class="line"><span style="color:#E5C07B;">TTFB</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> responseStart</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> navigationStart</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 首次渲染时间</span></span>
<span class="line"><span style="color:#E5C07B;">FP</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> responseStart</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> navigationStart</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// DOM 解析时间</span></span>
<span class="line"><span style="color:#E5C07B;">DOM</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> domComplete</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> responseEnd</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 首屏时间</span></span>
<span class="line"><span style="color:#E5C07B;">LCP</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> loadEventEnd</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> navigationStart</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="performance-getentries-方法" tabindex="-1">performance.getEntries() 方法 <a class="header-anchor" href="#performance-getentries-方法" aria-label="Permalink to &quot;performance.getEntries() 方法&quot;">​</a></h3><p><code>performance.getEntries()</code> 方法可以获取所有资源请求的时间数据，如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87b0729f40f8431d9353d34af9fa290b~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><p>点击可查看具体的资源信息，其他属性和上述内容有重复，就不在额外介绍计算方式了，具体如下：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f210fcecb2f2435984c635daf23d8be8~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><h3 id="performance-now-方法" tabindex="-1">performance.now() 方法 <a class="header-anchor" href="#performance-now-方法" aria-label="Permalink to &quot;performance.now() 方法&quot;">​</a></h3><p><code>performance.now()</code> 方法可以精确计算程序执行时间，它会返回以微秒（<strong>百万分之一秒</strong>）为单位的时间，即更加精准，这也是它和 <code>Date.now()</code> 是不同点：</p><ul><li><p><strong><code>Date.now()</code></strong> 返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到 <strong>当前时间</strong> 的 <strong>毫秒数</strong></p><ul><li>意味着 <strong><code>Date.now()</code></strong> 依赖于系统的当前时间，而系统时间可以被认为修改，因此它的毫秒数并不准确</li></ul></li><li><p><strong><code>performance.now()</code></strong> 的时间是以恒定速率递增的，不受系统时间的影响</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Date.now()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> begin</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot; a + b = &quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;time = &quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> begin</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// performance.now()</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> begin</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> performance</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot; a + b = &quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;time = &quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">performance</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;"> begin</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 0.10000002384185791</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h2 id="web-vitals" tabindex="-1">Web Vitals <a class="header-anchor" href="#web-vitals" aria-label="Permalink to &quot;Web Vitals&quot;">​</a></h2><p><a href="https://www.npmjs.com/package/web-vitals" title="https://www.npmjs.com/package/web-vitals" target="_blank" rel="noreferrer"><strong><code>web-vitals</code></strong></a> 库是 <code>Google</code> 推出的一个小型（约 <code>1.5K</code>）模块化库，用于测量真实用户的所有 <code>Web Vitals</code> 相关的指标，其重要核心指标信息如下（一图胜千言）：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4041541bd5e4dc98871c4c71020c2ed~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p><p>接下来，让我们通过 <code>npx create-react-app my-react-app</code> 来创建一个 <code>react</code> 项目，然后观察一下它的项目结构：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8b6e3ef8f54ce0bc11ed7b11723fa6~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt="image.png"></p><p>是不是超级显眼的 <strong><code>reportWebVitals.js</code></strong>，在进入文件查看你会发现我们需要的核心性能指标都在里面：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e6c2372f6f74ecba86a1a52afc45ba2~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp?" alt=""></p>`,117)]))}const y=n(t,[["render",r]]);export{g as __pageData,y as default};
