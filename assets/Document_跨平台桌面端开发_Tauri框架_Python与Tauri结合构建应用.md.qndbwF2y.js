import{_ as s,c as n,o as l,ah as e}from"./chunks/framework.DqD713j2.js";const y=JSON.parse('{"title":"Python 与 Tauri 结合构建应用","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Tauri框架/Python与Tauri结合构建应用.md","filePath":"Document/跨平台桌面端开发/Tauri框架/Python与Tauri结合构建应用.md","lastUpdated":1750954157000}'),o={name:"Document/跨平台桌面端开发/Tauri框架/Python与Tauri结合构建应用.md"};function p(r,a,t,i,c,u){return l(),n("div",null,a[0]||(a[0]=[e(`<h1 id="python-与-tauri-结合构建应用" tabindex="-1">Python 与 Tauri 结合构建应用 <a class="header-anchor" href="#python-与-tauri-结合构建应用" aria-label="Permalink to &quot;Python 与 Tauri 结合构建应用&quot;">​</a></h1><h3 id="一、前言" tabindex="-1">一、前言 <a class="header-anchor" href="#一、前言" aria-label="Permalink to &quot;一、前言&quot;">​</a></h3><p>在开发桌面应用时，我们常常需要在前端和后端之间进行选择。Python 作为一种强大的后端语言，与 Tauri 这种轻量级、高效的前端框架结合，可以让我们在开发桌面应用时，既能享受到 Python 的强大功能，又能体验到 Tauri 的轻量级和高效。</p><p>本文将详细介绍如何使用 Python 和 Tauri 构建应用程序。</p><h3 id="二、安装环境" tabindex="-1">二、安装环境 <a class="header-anchor" href="#二、安装环境" aria-label="Permalink to &quot;二、安装环境&quot;">​</a></h3><p>首先，我们需要安装 Python 和 Tauri 的开发环境。Python 的安装比较简单，可以直接在 Python 的官网下载安装包进行安装。Tauri 的安装需要 Node.js 环境，可以在 Node.js 的官网下载安装包进行安装，然后通过 npm（Node.js 的包管理器）安装 Tauri。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> tauri</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="三、创建-python-后端" tabindex="-1">三、创建 Python 后端 <a class="header-anchor" href="#三、创建-python-后端" aria-label="Permalink to &quot;三、创建 Python 后端&quot;">​</a></h3><p>我们可以使用 Python 的 Web 框架，如 Flask 或 Django，来创建后端。这里以 Flask 为例，创建一个简单的后端：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> flask </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> Flask</span></span>
<span class="line"><span style="color:#ABB2BF;">app </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> Flask</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__name__</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">@app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">def</span><span style="color:#61AFEF;"> hello_world</span><span style="color:#ABB2BF;">():</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &#39;Hello, World!&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> __name__</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &#39;__main__&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    app.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这个后端非常简单，只有一个路由，返回&quot;Hello, World!&quot;。</p><h3 id="四、创建-tauri-前端" tabindex="-1">四、创建 Tauri 前端 <a class="header-anchor" href="#四、创建-tauri-前端" aria-label="Permalink to &quot;四、创建 Tauri 前端&quot;">​</a></h3><p>然后，我们可以使用 Tauri 的命令行工具创建前端：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">tauri</span><span style="color:#98C379;"> init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令会创建一个新的 Tauri 项目。在这个项目中，我们可以使用 HTML、CSS 和 JavaScript 来创建前端界面。</p><h3 id="五、连接-python-后端和-tauri-前端" tabindex="-1">五、连接 Python 后端和 Tauri 前端 <a class="header-anchor" href="#五、连接-python-后端和-tauri-前端" aria-label="Permalink to &quot;五、连接 Python 后端和 Tauri 前端&quot;">​</a></h3><p>在创建了 Python 后端和 Tauri 前端之后，我们需要将它们连接起来。这可以通过在 Tauri 前端中调用 Python 后端的 API 来实现。</p><p>在 Tauri 项目的<code>src-tauri/tauri.conf.json</code>文件中，我们可以设置后端的地址：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;build&quot;</span><span style="color:#ABB2BF;">: {  </span><span style="color:#E06C75;">&quot;distDir&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;../backend&quot;</span><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，在前端代码中，我们可以使用 fetch API 来调用后端的 API：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:5000/&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="六、构建和运行应用" tabindex="-1">六、构建和运行应用 <a class="header-anchor" href="#六、构建和运行应用" aria-label="Permalink to &quot;六、构建和运行应用&quot;">​</a></h3><p>最后，我们可以使用 Tauri 的命令行工具来构建和运行应用：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">tauri</span><span style="color:#98C379;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令会构建一个桌面应用，我们可以直接运行这个应用，看到&quot;Hello, World!&quot;。</p><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><p>通过上述步骤，我们就使用 Python 和 Tauri 构建了一个简单的桌面应用。这只是一个基础的例子，实际上，我们可以使用 Python 和 Tauri 构建更复杂、更强大的桌面应用。</p>`,27)]))}const h=s(o,[["render",p]]);export{y as __pageData,h as default};
