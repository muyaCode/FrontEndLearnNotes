import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"12-装饰器","description":"","frontmatter":{},"headers":[],"relativePath":"Document/TypeScript/TypeScript语法基础/12-装饰器.md","filePath":"Document/TypeScript/TypeScript语法基础/12-装饰器.md","lastUpdated":1750954157000}'),e={name:"Document/TypeScript/TypeScript语法基础/12-装饰器.md"};function o(r,s,t,c,i,B){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_12-装饰器" tabindex="-1">12-装饰器 <a class="header-anchor" href="#_12-装饰器" aria-label="Permalink to &quot;12-装饰器&quot;">​</a></h1><h2 id="装饰器对前端的意义" tabindex="-1">装饰器对前端的意义 <a class="header-anchor" href="#装饰器对前端的意义" aria-label="Permalink to &quot;装饰器对前端的意义&quot;">​</a></h2><p>装饰器是前端了不起的技术革命，弥补了只有后端语言才有 AOP[类似装饰器]的短板，学习装饰器好处有:</p><ul><li>1.较大提升前端架构思维和前端架构能力，装饰器底层蕴含的拦截器思想在Java Spring,Nestjs框架，python 各种后端语言中都有广泛的应用，而拦截器展示的就是一种架构思维，通过学习装饰器能扩大技术视野，是作为一名前端架构师以及晋级更高职位必会技能</li><li>2.Nestis 等相对新型的 非常优秀的 Nodejs 框架大量运用了 TS 装饰器,例如: @Controller @Service@Get @Post</li><li>3.在面试中，如果告诉面试官，你精通装饰器，这也能成为你的大加分项，因为公司更需架构思维能力强的前端工程师，因为具有架构思维的前端开发人员在大中项目中一定能写出扩展性更好的代码。</li></ul><h2 id="装饰器应用" tabindex="-1">装饰器应用 <a class="header-anchor" href="#装饰器应用" aria-label="Permalink to &quot;装饰器应用&quot;">​</a></h2><h3 id="装饰器概述" tabindex="-1">装饰器概述 <a class="header-anchor" href="#装饰器概述" aria-label="Permalink to &quot;装饰器概述&quot;">​</a></h3><h4 id="_1-装饰器的定义" tabindex="-1">1.装饰器的定义 <a class="header-anchor" href="#_1-装饰器的定义" aria-label="Permalink to &quot;1.装饰器的定义&quot;">​</a></h4><p>装饰器就是一个方法或者叫函数，可以注入【写到】到类、方法、属性、参数，对象上，扩展其功能。</p><h4 id="_2-装饰器要解决的问题" tabindex="-1">2.装饰器要解决的问题 <a class="header-anchor" href="#_2-装饰器要解决的问题" aria-label="Permalink to &quot;2.装饰器要解决的问题&quot;">​</a></h4><p>装饰器就就是解决在不修改原来类、方法，属性，参数的时候为其添加额外的功能。</p><p>比如：为整个项目的所有业务类【假如50个类】的所有方法【假如6个方法】都增加日志信息，如果一个一个的增加，那要增加300次日志调用语句，假如日后日志文件格式发生了改变，也还需要修改300次。 如果有了装饰器，只需要修改一次就可以。这个属于项目中的通用功能，大家了解下即可，后面仿 Nestis 实战 时对装饰器的这个特性会有很深的体会。</p><p>在 Nestis 中 装饰器可以解决依赖注入的问题，而依赖注入是 Java等后端语言拥有的非常优秀的编程思想有了依赖注入，能大大降低项目的耦合度，大大提升项目的可扩展性。</p><h4 id="_3-装饰器分类" tabindex="-1">3.装饰器分类 <a class="header-anchor" href="#_3-装饰器分类" aria-label="Permalink to &quot;3.装饰器分类&quot;">​</a></h4><p>常见的装饰器：类装饰器、属性装饰器、方法装饰器、参数装饰器，元数据装饰器。</p><h4 id="_4-元数据装饰器初步理解" tabindex="-1">4.元数据装饰器初步理解 <a class="header-anchor" href="#_4-元数据装饰器初步理解" aria-label="Permalink to &quot;4.元数据装饰器初步理解&quot;">​</a></h4><p>元数据装饰器：在定义类或者类方法的时候，可以设置一些元数据，我们可以获取到在类与类方法上添加的元数据，需要引入 reflect-metadata 第三方库 采用 @Reflect.metadata来实现。</p><p>元数据指的是描述东西时用的数据，例如: <code>Reflect.metadata(&quot;importinfo&quot;，&quot;疫情期间用公筷戴口罩”)</code></p><h4 id="_5-装饰器两种写法" tabindex="-1">5.装饰器两种写法 <a class="header-anchor" href="#_5-装饰器两种写法" aria-label="Permalink to &quot;5.装饰器两种写法&quot;">​</a></h4><p>写法1：让调用时(使用时) 不传递参数的装饰器</p><p>写法2：装饰器工厂【让调用时 可以传递参数的装饰器】</p><h3 id="typescript写装饰器前的项目配置" tabindex="-1">typescript写装饰器前的项目配置 <a class="header-anchor" href="#typescript写装饰器前的项目配置" aria-label="Permalink to &quot;typescript写装饰器前的项目配置&quot;">​</a></h3><h4 id="_1-安装-concurrently-支持合并执行-同时运行多个-script-命令库" tabindex="-1">1.安装 concurrently 支持合并执行，同时运行多个 script 命令库 <a class="header-anchor" href="#_1-安装-concurrently-支持合并执行-同时运行多个-script-命令库" aria-label="Permalink to &quot;1.安装 concurrently 支持合并执行，同时运行多个 script 命令库&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> concurrently</span><span style="color:#D19A66;"> -S</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-tsconfig-json-文件修改如下" tabindex="-1">2.tsconfig.json 文件修改如下： <a class="header-anchor" href="#_2-tsconfig-json-文件修改如下" aria-label="Permalink to &quot;2.tsconfig.json 文件修改如下：&quot;">​</a></h4><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">--编译输入输出目录</span></span>
<span class="line"><span style="color:#98C379;">&quot;outDir&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;./dist&quot;</span></span>
<span class="line"><span style="color:#98C379;">&quot;rootDir&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;./src&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">-- 消除装饰器警告（支持编写装饰器）</span></span>
<span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">experimentalDecorators</span><span style="color:#98C379;">&quot;: true,</span></span>
<span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">emitDecoratorMetadata</span><span style="color:#98C379;">&quot;: true,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_3-配置-package-json-文件脚本信息" tabindex="-1">3.配置 package.json 文件脚本信息 <a class="header-anchor" href="#_3-配置-package-json-文件脚本信息" aria-label="Permalink to &quot;3.配置 package.json 文件脚本信息&quot;">​</a></h4><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;dev:build&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;tsc -w&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#FFFFFF;">    --监控</span><span style="color:#FFFFFF;"> dist/teaching</span><span style="color:#FFFFFF;"> 目录中的</span><span style="color:#FFFFFF;"> js</span><span style="color:#FFFFFF;"> 文件，变化时执行</span><span style="color:#FFFFFF;"> node</span><span style="color:#FFFFFF;"> 命令</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;dev:start&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;nodemon --watch dist/teaching js --exec node/dist/teaching/1cTassDecorator.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#FFFFFF;">    --合并启动</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;start&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;concurrently npm:dev:*&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#FFFFFF;">    --命令解决</span><span style="color:#FFFFFF;"> typescript</span><span style="color:#FFFFFF;"> 编译装饰器类时出现的</span><span style="color:#FFFFFF;"> bug</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;tsc&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;tsc src/teaching/1ClassDecorator.ts --target ES5 -w --experimentalDecorators&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#FFFFFF;">    --本章后面章节会用到，先配置上</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;ctr1&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ts-node src/contro1ler/HomeContro1ler.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;beginapp&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;nodemon --watch src/ -e ts --exec ts-node./src/expressapp.ts&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="类装饰器的两种实现-带参数和不带参数" tabindex="-1">类装饰器的两种实现[带参数和不带参数] <a class="header-anchor" href="#类装饰器的两种实现-带参数和不带参数" aria-label="Permalink to &quot;类装饰器的两种实现[带参数和不带参数]&quot;">​</a></h3><p>不带参数的类装饰器</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个不带参数的类装饰器</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sealed</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">target</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 对类的构造函数和原型进行密封</span></span>
<span class="line"><span style="color:#E5C07B;">  Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">seal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">  Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">seal</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用类装饰器</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E06C75;">sealed</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Greeter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  greeting</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">greeting</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> message</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  greet</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &quot;Hello, &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">greeting</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>带参数的类装饰器</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个带参数的类装饰器</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> color</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 返回一个装饰器函数</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">target</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 在类的原型上添加一个属性</span></span>
<span class="line"><span style="color:#E5C07B;">    target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用类装饰器</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">color</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Car</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#61AFEF;">  run</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot; is running with &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot; color.&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="装饰器底层-js-源码" tabindex="-1">装饰器底层 JS 源码 <a class="header-anchor" href="#装饰器底层-js-源码" aria-label="Permalink to &quot;装饰器底层 JS 源码&quot;">​</a></h2><h2 id="装饰器实战" tabindex="-1">装饰器实战 <a class="header-anchor" href="#装饰器实战" aria-label="Permalink to &quot;装饰器实战&quot;">​</a></h2>`,34)]))}const b=n(e,[["render",o]]);export{u as __pageData,b as default};
