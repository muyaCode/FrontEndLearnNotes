import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/d38f7ee2fc264e80acdd7fcfdafd9a31tplv-k3u1fbpfcp-jj-mark3024000q75.DK5MF6dD.webp",A=JSON.parse('{"title":"AssemblyScript","description":"","frontmatter":{},"headers":[],"relativePath":"Document/WebAssembly/AssemblyScript.md","filePath":"Document/WebAssembly/AssemblyScript.md","lastUpdated":1750954157000}'),e={name:"Document/WebAssembly/AssemblyScript.md"};function r(c,s,t,B,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="assemblyscript" tabindex="-1">AssemblyScript <a class="header-anchor" href="#assemblyscript" aria-label="Permalink to &quot;AssemblyScript&quot;">​</a></h1><p>GitHub：<a href="https://github.com/AssemblyScript/assemblyscript" target="_blank" rel="noreferrer">AssemblyScript/assemblyscript: A TypeScript-like language for WebAssembly. (github.com)</a></p><p>官网文档：<a href="https://www.assemblyscript.org/getting-started.html#setting-up-a-new-project" target="_blank" rel="noreferrer">Getting started | The AssemblyScript Book</a></p><h2 id="assemblyscript介绍" tabindex="-1">AssemblyScript介绍 <a class="header-anchor" href="#assemblyscript介绍" aria-label="Permalink to &quot;AssemblyScript介绍&quot;">​</a></h2><p>AssemblyScript 是一个把 TypeScript 转换到 WebAssembly 的编译器。由微软开发的 TypeScript 将类型添加到了 JavaScript 中。它已经变得相当受欢迎，即使对于不熟悉它的人，AssemblyScript 只允许 TypeScript 的有限功能子集，因此不需要花太多时间就可以上手。</p><p>因为它与 JavaScript 非常相似，所以 AssemblyScript 使 Web 开发人员可以轻松地将 WebAssembly 整合到他们的网站中，而不必使用完全不同的语言。</p><p>AssemblyScript十分的易用，它有着类似于TypeScript的语法，支持WebAssembly。</p><p><strong>AssemblyScript</strong>的语言，它采用了类TypeScript的语法设计，对于前端小伙伴来说十分的友好！几乎可以无痛的将原有的ts代码迁移过去。</p><p>安装它也十分的简单，与安装其他npm包类似，只需要执行 <code>npm install</code>就好了！</p><h2 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h2><p>首先是创建项目，我们使用官方提供的方法来创建一个AssemblyScript的项目。</p><p>官网文档：<a href="https://www.assemblyscript.org/getting-started.html#setting-up-a-new-project" target="_blank" rel="noreferrer">Getting started | The AssemblyScript Book</a></p><p>在本文中我就不具体展开了。</p><p>在<code>index.ts</code>使用 AssemblyScript编写一个计算斐波那契数列的函数。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> fib</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">   var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">   if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">     while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">       let</span><span style="color:#E06C75;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span></span>
<span class="line"><span style="color:#E06C75;">       a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> b</span></span>
<span class="line"><span style="color:#E06C75;">       b</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> t</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#C678DD;">     return</span><span style="color:#E06C75;"> b</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#C678DD;">   return</span><span style="color:#E06C75;"> a</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>最后在命令行中执行命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> asbuild:debug</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意，<code>asbuild:debug</code> 与 <code>asbuild:release</code>在运行时的性能上有较大的差异，在开发调试时我们可以使用 <code>debug</code>版本的编译结果，但是在生产环境中千万别忘了一定要使用 <code>release</code>版本的编译结果！</p><p>编译结束后，我们能够得到 <code>debug.wasm</code>与 <code>debug.js</code> 两个编译产物，我们直接在index.html中引入 <code>debug.js</code>即可。为什么不直接引入 <code>debug.wasm</code>？因为 <code>debug.js</code> 中包含了一些<strong>胶水代码</strong>，它包括但不限于以下的功能：</p><ol><li>加载 WASM文件</li><li>类型转换</li><li>导入导出WASM，JavaScript的对象等</li></ol><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">         &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">         &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">         &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Fib&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;module&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">         import</span><span style="color:#D19A66;"> *</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> module</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;./build/debug.js&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">         console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">     &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;"> &lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>我们可以在控制台中打印一下 <code>module</code> 对象，看看其中到底有什么内容。</p><p>我们可以从上图中看到，导出的对象中除了我们编写 <code>fib</code>函数以外，还有一个 <code>memory</code> 对象。在之前的<a href="https://juejin.cn/post/7288963080856059941" target="_blank" rel="noreferrer">深入浅出WebAssembly （一）—— 理解WAT - 掘金 (juejin.cn)</a>文章中我们说过，<code>memory</code> 对象是一段JavaScript与 WebAssembly共同使用的一段线性内存空间。由于我们的模块中并不涉及使用这段内存，所以它的大小为0。</p><p>接下来我们可以直接执行module.fib(10)来查看运行结果。最终的运行结果为</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fib</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 55</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="登堂入室" tabindex="-1">登堂入室 <a class="header-anchor" href="#登堂入室" aria-label="Permalink to &quot;登堂入室&quot;">​</a></h1><p>接下来，我们要开始编写一个稍微复杂的示例，我们编写一个粒子程序，创建N个粒子，让其无序的移动。</p><p>为了说明一些问题，我们采用一个比较特殊的实现方式。我们使用一个数组来保存粒子的位置，使用另一个数组来保存粒子的速度。</p><p>在TypeScript中的函数签名如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> simulate</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     posArray</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     velocityArray</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     dt</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;"> ): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>我们在 AssmeblyScript可以将这段代码直接搬过来，我们直接实现即可。实现如下。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> clamp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">min</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">max</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">     if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> min</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">         x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> min</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">     } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> max</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">         x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> max</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#C678DD;">     return</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;"> export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> simulate</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     posArray</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     velocityArray</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">[],</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     width</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     height</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     dt</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span></span>
<span class="line"><span style="color:#ABB2BF;"> ): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">     for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> posArray</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">         let</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> posArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">         let</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> posArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">         let</span><span style="color:#E06C75;"> vx</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> velocityArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">         let</span><span style="color:#E06C75;"> vy</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> velocityArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">         x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> vx</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> dt</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">         y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> vy</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> dt</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">         if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> width</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">             x</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> clamp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">               vx</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;">vx</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">         if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> height</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">             y</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> clamp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">height</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">             vy</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;">vy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">         posArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">         posArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">         velocityArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> vx</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">         velocityArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> vy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>输入 <code>npm run asbuild:debug</code>编译~启动！</p><p>编译完成后，我们可以测试一下 <code>simulate</code> 函数耗时为多少，这里我采用了1000个粒子进行测试。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#D19A66;"> *</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> module</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;./build/debug.js&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> size</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> width</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 500</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> height</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 500</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> posArray</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">size</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">fill</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> velArray</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">size</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">fill</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;"> for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> posArray</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">     posArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> width</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">     posArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> height</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">     velArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">     velArray</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">time</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;simulate&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;"> module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">simulate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">posArray</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">velArray</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.016</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">timeEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;simulate&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>测试结果如下：</p><p>但是，但是！！！我用JS同样实现了我们的粒子系统的逻辑，发现同样的逻辑JS中仅需要 0.03ms！</p><p>为什么慢了这么多！！！</p><p>我发现这个叫 <code>_lowerArray</code>的函数就占据了 ）0.96ms的时间！</p><p>这是为什么呢？</p><p>噢~！因为我们在JS代码中直接使用了 <code>Array</code>对象，而 <code>Array</code>对象是不能够直接被WebAssembly的代码所使用的。记住：</p><p>在WebAssembly当中，有且仅有4中基本的数据类型：<strong>i32, i64, f32, f64</strong>。即32位整型，64位整型，32位浮点数，64位浮点数，总共就四类数据类型（<em>SIMD数据类型不计算在其中，本文不做介绍</em>）</p><p>所以我们要尽可能的避免数据的复制。那么解决办法是什么呢？答案是显而易见的，我们需要直接将数据放入到JavaScript与WebAssembly共用的那段线性内存当中。这段内存就是之前看到的<code>memory</code>对象。</p><p>那么，我们AssemblyScript中的代码需要修改，首先我们将函数签名改为如下的代码：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> simulateSystem</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     posPtr</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     velPtr</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     size</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     width</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     height</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     dt</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span></span>
<span class="line"><span style="color:#ABB2BF;"> ): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>posPtr</code>与 <code>velPtr</code>表示的是“指针”，它表示的是在共享内存中的偏移位置。我们可以使用 AssemblyScript提供的<code>load</code>这个API来加载共享内存中的数据。相对的，使用<code>store</code>API将数据存回共享内存中。完整的代码如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> simulateSystem</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     posPtr</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     velPtr</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     size</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     width</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     height</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">     dt</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span></span>
<span class="line"><span style="color:#ABB2BF;"> ): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vx</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vy</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">     for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> size</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">         x</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> load</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">posPtr</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">         y</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> load</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">posPtr</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">         vx</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> load</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">velPtr</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">         vy</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> load</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">velPtr</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">         x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> vx</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> dt</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">         y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> vy</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> dt</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#C678DD;">         if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> width</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">             x</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> clamp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">             vx</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;">vx</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">             store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">velPtr</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vx</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#C678DD;">         if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> height</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">             y</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> clamp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">height</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">             vy</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;">vy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">             store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">velPtr</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">vy</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">         }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#61AFEF;">         store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">posPtr</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">         store</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">posPtr</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>注意，在使用 <code>load</code>与 <code>store</code>这两个API时，需要显式地制定读写数据的数据类型。还有你也许可能会对循环中的自变量<code>i</code>为什么要乘以8感到疑惑。这是因为我们的位置数据是用双精度浮点数进行表示的。它对应的正是 <code>f64</code>类型的数据，它占据64位、8个字节，所以两个相邻的数据之间的距离是8个字节，所以需要乘以8。</p><p>另外，我们在开辟内存空间时，最好采用AssemblyScript提供的 <code>heap.alloc</code>API。这样可以避免我们自己计算内存偏移量。所以我们导出一个名为 <code>malloc</code>的函数。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">size</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">     return</span><span style="color:#E5C07B;"> heap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">alloc</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">size</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>继续，编译~启动！我们先使用<code>malloc</code>函数来获取共享内存中的可用空间的起始偏移地址。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> size</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> posPtr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">size</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> velPtr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">malloc</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">size</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>再使用下面的代码来填充随机数据</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> view</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Float64Array</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">memory</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">buffer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;"> for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> size</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">     const</span><span style="color:#E5C07B;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;"> canvas</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">     const</span><span style="color:#E5C07B;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;"> canvas</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">height</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">     const</span><span style="color:#E5C07B;"> vx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">     const</span><span style="color:#E5C07B;"> vy</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">     view</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">posPtr</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 8</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">     view</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">posPtr</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 8</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E06C75;">     view</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">velPtr</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 8</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> vx</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">     view</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">velPtr</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 8</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> vy</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>再在每一帧中对粒子的位置进行迭代计算并且渲染~</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dt</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 16</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> tick</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">     module</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">simulateSystem</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">         posPtr</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">         velPtr</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">         size</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">         canvas</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">width</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">         canvas</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">height</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">         dt</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 1000</span></span>
<span class="line"><span style="color:#ABB2BF;">     );</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span></span>
<span class="line"><span style="color:#61AFEF;">     render</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">view</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subarray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">posPtr</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">posPtr</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 8</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> size</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#61AFEF;">     setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tick</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">dt</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>我们也使用JS编写相同的逻辑，并进行性能比较（JS代码略）。最终的性能对比结果如下：</p><p><img src="`+o+'" alt="image-20231021234813912"></p><p>另外，再次强调，编译一定要使用release版本的产物，这样才可以让WebAssembly发挥出最大的威力！！！</p><p>通过上图我们可以看出来，避免数据重复复制是多么的重要呀！再加上使用了release版本的编译产物，WebAssembly程序的性能几乎是JavaScript程序的<strong>3倍</strong>~ 这已经是一个相当可观的性能提升了！</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>今天我们使用AssemblyScript实现了一个简单的粒子系统。学习到了如何直接往共享内存中填充数据并通过数据在内存中的偏移量来使用它。</p><p>另外，我们在发布到生产环境时，一定要选择使用release版本的编译产物。</p>',63)]))}const b=n(e,[["render",r]]);export{A as __pageData,b as default};
