import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"1-基础类型","description":"","frontmatter":{},"headers":[],"relativePath":"Document/TypeScript/TypeScript语法基础/1-基础类型.md","filePath":"Document/TypeScript/TypeScript语法基础/1-基础类型.md","lastUpdated":1750954157000}'),e={name:"Document/TypeScript/TypeScript语法基础/1-基础类型.md"};function o(r,s,t,c,i,B){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_1-基础类型" tabindex="-1">1-基础类型 <a class="header-anchor" href="#_1-基础类型" aria-label="Permalink to &quot;1-基础类型&quot;">​</a></h1><p>参考珠峰笔记：<a href="http://www.zhufengpeixun.com/strong/html/65.1.typescript.html#t93.%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">珠峰架构师成长计划 (zhufengpeixun.com)</a></p><p>TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p><p><strong>typescript 日常类型文档</strong>：<a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html" target="_blank" rel="noreferrer">https://www.typescriptlang.org/docs/handbook/2/everyday-types.html</a></p><h2 id="一、javascript-原始数据类型" tabindex="-1">一、JavaScript 原始数据类型 <a class="header-anchor" href="#一、javascript-原始数据类型" aria-label="Permalink to &quot;一、JavaScript 原始数据类型&quot;">​</a></h2><p>JavaScript 的类型分为两种：原始数据类型（Primitive data types）和对象类型（Object types）</p><p>所有的原始数据类型都没有属性（property）</p><ul><li>Boolean：布尔类型</li><li>Number：数值类型</li><li>String：字符串类型</li><li>Null：空值类型</li><li>Undefined：未定义类型</li><li>Symbol：唯一值类型</li></ul><h3 id="包装对象" tabindex="-1">包装对象 <a class="header-anchor" href="#包装对象" aria-label="Permalink to &quot;包装对象&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;zhufeng&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;zhufeng&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当调用基本数据类型方法的时候，JavaScript 会在原始数据类型和对象类型之间做一个迅速的强制性切换</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> isOK</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 编译通过</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> isOK</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 编译通过</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> isOK</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 编译失败   期望的 isOK 是一个原始数据类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name5</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">name5</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;zhufeng&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">name5</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">name5</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E5C07B;">name5</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toFixed</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="object-对象类型" tabindex="-1">object 对象类型 <a class="header-anchor" href="#object-对象类型" aria-label="Permalink to &quot;object 对象类型&quot;">​</a></h3><p><code>object</code> 表示非原始类型，也就是除 <code>number</code>，<code>string</code>，<code>boolean</code>之外的类型。</p><p>使用 <code>object</code> 类型，就可以更好的表示像 <code>Object.create</code> 这样的 <code>API</code>。例如：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">object</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">object</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fn2()&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// return undefined</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// return null</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fn2</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;abc&quot;</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(fn2(&#39;abc&#39;)</span><span style="color:#7F848E;font-style:italic;"> // error</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fn2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="二、typescript-数据类型注解" tabindex="-1">二、TypeScript 数据类型注解 <a class="header-anchor" href="#二、typescript-数据类型注解" aria-label="Permalink to &quot;二、TypeScript 数据类型注解&quot;">​</a></h2><h3 id="布尔值类型-boolean" tabindex="-1">布尔值类型(boolean) <a class="header-anchor" href="#布尔值类型-boolean" aria-label="Permalink to &quot;布尔值类型(boolean)&quot;">​</a></h3><p>最基本的数据类型就是简单的 true/false 值，在 JavaScript 和 TypeScript 里叫做 <code>boolean</code>（其它语言中也一样）。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> isDone</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">isDone</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// isDone = 2</span><span style="color:#7F848E;font-style:italic;"> // error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="数字类型-number" tabindex="-1">数字类型(number) <a class="header-anchor" href="#数字类型-number" aria-label="Permalink to &quot;数字类型(number)&quot;">​</a></h3><p>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数。 这些浮点数的类型是 number。 除了支持十进制和十六进制字面量，TypeScript 还支持 ECMAScript 2015 中引入的二进制和八进制字面量。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 十进制</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0b1010</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 二进制</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a3</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0o12</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 八进制</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a4</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0xa</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 十六进制</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以赋值undefined和null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="字符串类型-string" tabindex="-1">字符串类型(string) <a class="header-anchor" href="#字符串类型-string" aria-label="Permalink to &quot;字符串类型(string)&quot;">​</a></h3><p>JavaScript 程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用 <code>string</code> 表示文本数据类型。 和 JavaScript 一样，可以使用双引号（<code>&quot;</code>）或单引号（<code>&#39;</code>）表示字符串。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;tom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;jack&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// name = 12</span><span style="color:#7F848E;font-style:italic;"> // error</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 12</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> info</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`My name is </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">, I am </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> years old!\`</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="undefined-和-null" tabindex="-1">undefined 和 null <a class="header-anchor" href="#undefined-和-null" aria-label="Permalink to &quot;undefined 和 null&quot;">​</a></h3><p>TypeScript 里，<code>undefined</code> 和 <code>null</code> 两者各自有自己的类型分别叫做 <code>undefined</code> 和 <code>null</code>。 它们的本身的类型用处不是很大：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> u</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">undefined</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">null</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。 就是说你可以把 <code>null</code> 和 <code>undefined</code> 赋值给 <code>number</code> 类型的变量。</p><h3 id="数组类型-array" tabindex="-1">数组类型(array) <a class="header-anchor" href="#数组类型-array" aria-label="Permalink to &quot;数组类型(array)&quot;">​</a></h3><p>TypeScript 像 JavaScript 一样可以操作数组元素。 有两种方式可以定义数组。</p><p>第一种，可以在<code>元素类型后面接上[]</code>，表示由此类型元素组成的一个数组：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> list1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>第二种方式是使用数组泛型，<code>Array&lt;元素类型&gt;</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> list2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数组里面的对象定义</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Person2</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 索引访问操作符 我们可以通过[]来获取一个类型的子类型</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	job</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 数组里面的对象类型</span></span>
<span class="line"><span style="color:#E06C75;">	interests</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">level</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> }[];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// interests: Array&lt;name: string; level: number&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myname</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Person2</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;job&quot;</span><span style="color:#ABB2BF;">][</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;fe&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> mylevel</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Person2</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&quot;interests&quot;</span><span style="color:#ABB2BF;">][</span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">][</span><span style="color:#98C379;">&quot;level&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 赋值数组里的对象属性</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="元组-tuple" tabindex="-1">元组(tuple) <a class="header-anchor" href="#元组-tuple" aria-label="Permalink to &quot;元组(tuple)&quot;">​</a></h3><p>元组类型允许表示一个已知元素数量和类型的数组，<code>各元素的类型不必相同</code>。 比如，你可以定义一对值分别为 <code>string</code> 和 <code>number</code> 类型的元组。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> t1</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">t1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E06C75;">t1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// Error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当访问一个已知索引的元素，会得到正确的类型：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">t1</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// OK</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">t1</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// Error, &#39;number&#39; 不存在 &#39;substring&#39; 方法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="枚举类型-enum" tabindex="-1">枚举类型(enum) <a class="header-anchor" href="#枚举类型-enum" aria-label="Permalink to &quot;枚举类型(enum)&quot;">​</a></h3><ul><li>事先考虑某一个变量的所有的可能的值，尽量用自然语言中的单词表示它的每一个值</li><li>比如性别、月份、星期、颜色、单位、学历</li></ul><h4 id="普通枚举" tabindex="-1">普通枚举 <a class="header-anchor" href="#普通枚举" aria-label="Permalink to &quot;普通枚举&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Gender</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	GIRL</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	BOY</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`李雷是</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">Gender</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">BOY</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`韩梅梅是</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">Gender</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">GIRL</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Week</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	MONDAY</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	TUESDAY</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`今天是星期</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">Week</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">MONDAY</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="常数枚举" tabindex="-1">常数枚举 <a class="header-anchor" href="#常数枚举" aria-label="Permalink to &quot;常数枚举&quot;">​</a></h4><ul><li>常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</li><li>假如包含了计算成员，则会在编译阶段报错</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> Colors</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Red</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Yellow</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Blue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myColors</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">Colors</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Red</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Colors</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Yellow</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Colors</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Blue</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Red</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Yellow</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Blue</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;blue&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>enum</code> 类型是对 JavaScript 标准数据类型的一个补充。 使用枚举类型可以<code>为一组数值赋予友好的名字</code>。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Red</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Green</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Blue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 枚举数值默认从0开始依次递增</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 根据特定的名称得到对应的枚举数值</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myColor</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Color</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Green</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myColor</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Red</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Blue</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>默认情况下，从 <code>0</code> 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 <code>1</code> 开始编号：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Red</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Green</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Blue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Color</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Green</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>或者，全部都采用手动赋值：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Red</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Green</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Blue</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Color</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Green</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Red</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Green</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Blue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> colorName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> Color</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">colorName</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;Green&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="任意类型-any" tabindex="-1">任意类型(any) <a class="header-anchor" href="#任意类型-any" aria-label="Permalink to &quot;任意类型(any)&quot;">​</a></h3><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code> 类型来标记这些变量：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> notSure</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">notSure</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;maybe a string&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">notSure</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 也可以是个 boolean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在对现有代码进行改写的时候，<code>any</code> 类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。并且当你只知道一部分数据的类型时，<code>any</code> 类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> list</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;free&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="void-类型-空的-没有的" tabindex="-1">void 类型 - 空的，没有的 <a class="header-anchor" href="#void-类型-空的-没有的" aria-label="Permalink to &quot;void 类型 - 空的，没有的&quot;">​</a></h3><p>某种程度上来说，<code>void</code> 类型像是与 <code>any</code> 类型相反，它<code>表示没有任何类型</code>。</p><p>当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 表示没有任何类型, 一般用来说明函数的返回值不能是undefined和null之外的值 */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fn()&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// return undefined</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// return null</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// return 1</span><span style="color:#7F848E;font-style:italic;"> // error</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>声明一个 <code>void</code> 类型的变量没有什么大用，因为你只能为它赋予 <code>undefined</code> 和 <code>null</code>：</p><p>在 typescript.typescripton 配置中的<code>strictNullChecks</code> 选项，配置返回 null 是否报错，true 就报错</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> unusable</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">void</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="never-类型" tabindex="-1">never 类型 <a class="header-anchor" href="#never-类型" aria-label="Permalink to &quot;never 类型&quot;">​</a></h3><p>never 是其它类型(null undefined)的子类型，代表不会出现的值</p><ul><li>作为不会返回（ return ）的函数的返回值类型</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 返回never的函数 必须存在 无法达到（ unreachable ） 的终点</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">never</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 由类型推论得到返回值为 never</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fail</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Something failed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> fail</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 返回never的函数 必须存在 无法达到（ unreachable ） 的终点</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> infiniteLoop</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">never</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="strictnullchecks" tabindex="-1">strictNullChecks <a class="header-anchor" href="#strictnullchecks" aria-label="Permalink to &quot;strictNullChecks&quot;">​</a></h4><ul><li>在 TS 中， null 和 undefined 是任何类型的有效值，所以无法正确地检测它们是否被错误地使用。于是 TS 引入了 --strictNullChecks 这一种检查模式</li><li>由于引入了 --strictNullChecks ，在这一模式下，null 和 undefined 能被检测到。所以 TS 需要一种新的底部类型（ bottom type ）。所以就引入了 never。</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Compiled with --strictNullChecks</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;number&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// x: number 类型</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// x: string 类型</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// x: never 类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// --strictNullChecks 模式下，这里的代码将不会被执行，x 无法被观察</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="never-和-void-的区别" tabindex="-1">never 和 void 的区别 <a class="header-anchor" href="#never-和-void-的区别" aria-label="Permalink to &quot;never 和 void 的区别&quot;">​</a></h4><ul><li>void 可以被赋值为 null 和 undefined 的类型。 never 则是一个不包含值的类型。</li><li>拥有 void 返回值类型的函数能正常运行。拥有 never 返回值类型的函数无法正常返回，无法终止，或会抛出异常。</li></ul><h4 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h4><ul><li>我们在使用 Symbol 的时候，必须添加 es6 的编译辅助库</li><li>Symbol 是在 ES2015 之后成为新的原始类型，它通过 Symbol 构造函数创建</li><li>Symbol 的值是唯一不变的</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sym1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sym2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;key&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="bigint" tabindex="-1">BigInt <a class="header-anchor" href="#bigint" aria-label="Permalink to &quot;BigInt&quot;">​</a></h4><ul><li>使用 BigInt 可以安全地存储和操作大整数</li><li>我们在使用 <code>BigInt</code> 的时候，必须添加 <code>ESNext</code> 的编译辅助库</li><li>要使用<code>1n</code>需要 <code>&quot;target&quot;: &quot;ESNext&quot;</code></li><li>number 和 BigInt 类型不一样,不兼容</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> max</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Number</span><span style="color:#ABB2BF;">.MAX_SAFE_INTEGER; </span><span style="color:#7F848E;font-style:italic;">// 2**53-1</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">max</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> max</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> max</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> BigInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.MAX_SAFE_INTEGER);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">max</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#C678DD;">n</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> max</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 2</span><span style="color:#C678DD;">n</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> bar</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">bigint</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">foo</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> bar</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">bar</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> foo</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="联合类型" tabindex="-1">联合类型 <a class="header-anchor" href="#联合类型" aria-label="Permalink to &quot;联合类型&quot;">​</a></h3><p>联合类型（Union Types）表示取值可以为多种类型中的一种</p><p>需求 1：定义一个一个函数得到一个数字或字符串值的字符串形式值</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> toString2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>需求 2：定义一个一个函数得到一个数字或字符串值的长度</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getLength</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// return x.length</span><span style="color:#7F848E;font-style:italic;"> // error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// error</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="交叉类型" tabindex="-1">交叉类型 <a class="header-anchor" href="#交叉类型" aria-label="Permalink to &quot;交叉类型&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj1</span><span style="color:#ABB2BF;">: 0</span><span style="color:#E5C07B;">bj1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;abc&quot;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj2</span><span style="color:#ABB2BF;">: 0</span><span style="color:#E5C07B;">bj2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj3</span><span style="color:#ABB2BF;">: 0</span><span style="color:#E5C07B;">bj1</span><span style="color:#ABB2BF;"> &amp; 0</span><span style="color:#E5C07B;">bj2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;wangwu&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">40</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="字面量类型和类型字面量" tabindex="-1">字面量类型和类型字面量 <a class="header-anchor" href="#字面量类型和类型字面量" aria-label="Permalink to &quot;字面量类型和类型字面量&quot;">​</a></h3><ul><li>字面量类型的要和实际的值的字面量一一对应，如果不一致就会报错</li><li>类型字面量和对象字面量的语法很相似</li></ul><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> up</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Up&quot;</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Up&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> down</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Down&quot;</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Down&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> left</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Left&quot;</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Left&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> right</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Right&quot;</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Right&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Direction</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Up&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;Down&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;Left&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;Right&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> move</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">direction</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Direction</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#61AFEF;">move</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Up&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Person</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="字符串字面量-vs-联合类型" tabindex="-1">字符串字面量 vs 联合类型 <a class="header-anchor" href="#字符串字面量-vs-联合类型" aria-label="Permalink to &quot;字符串字面量 vs 联合类型&quot;">​</a></h3><ul><li>字符串字面量类型 用来约束取值只能是某<code>几个字符串</code>中的一个；联合类型（Union Types）表示取值可以为 <code>多种类型</code> 中的一种</li><li>字符串字面量 限定了使用该字面量的地方仅接受特定的值；联合类型 对于值并没有限定，仅仅限定值的类型需要保持一致</li></ul><h2 id="typescript-类型断言" tabindex="-1">TypeScript 类型断言 <a class="header-anchor" href="#typescript-类型断言" aria-label="Permalink to &quot;TypeScript 类型断言&quot;">​</a></h2><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。</p><p>类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。</p><p>它没有运行时的影响，只是在编译阶段起作用。 TypeScript 会假设你，程序员，已经进行了必须的检查。</p><p>类型断言有两种形式。 其一是“尖括号”&lt;&gt;语法，另一个为 <code>as</code> 语法</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">类型断言(Type Assertion): 可以用来手动指定一个值的类型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">语法:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    方式一: &lt;类型&gt;值</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    方式二: 值 as 类型  tsx中只能用这种方式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 需求: 定义一个函数得到一个字符串或者数值数据的长度 */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getLength</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> ((&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">x</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> string</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getLength</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;abcd&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">getLength</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1234</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>!非空断言</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 直接!非空断言</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> root</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HTMLElement</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">null</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">root</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">style</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;red&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// ！感叹号为非空断言</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="typescript-类型推断-推导" tabindex="-1">TypeScript 类型推断|推导 <a class="header-anchor" href="#typescript-类型推断-推导" aria-label="Permalink to &quot;TypeScript 类型推断|推导&quot;">​</a></h2><p>类型推断: TS 会在没有明确的指定类型的时候推测出一个类型 有下面 2 种情况: 1. 定义变量时赋值了, 推断为对应的类型. 2. 定义变量时没有赋值, 推断为 any 类型</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 定义变量时赋值了, 推断为对应的类型 */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b9</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// number</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// b9 = &#39;abc&#39;</span><span style="color:#7F848E;font-style:italic;"> // error</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 定义变量时没有赋值, 推断为any类型 */</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b10</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// any类型</span></span>
<span class="line"><span style="color:#E06C75;">b10</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 123</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">b10</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;abc&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="总结-总共-24-种类型" tabindex="-1">总结：总共 24 种类型 <a class="header-anchor" href="#总结-总共-24-种类型" aria-label="Permalink to &quot;总结：总共 24 种类型&quot;">​</a></h2><h3 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h3><p>number，string，boolean，symbol，null，undefined</p><h3 id="根类型" tabindex="-1">根类型 <a class="header-anchor" href="#根类型" aria-label="Permalink to &quot;根类型&quot;">​</a></h3><p>Object，{}</p><h3 id="对象类型" tabindex="-1">对象类型 <a class="header-anchor" href="#对象类型" aria-label="Permalink to &quot;对象类型&quot;">​</a></h3><p>Array，object，function</p><h3 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h3><p>enum</p><h3 id="其他特殊类型" tabindex="-1">其他特殊类型 <a class="header-anchor" href="#其他特殊类型" aria-label="Permalink to &quot;其他特殊类型&quot;">​</a></h3><p>any，unknown，never，void，元组 ( tuple) ，可变元组</p><h3 id="合成类型" tabindex="-1">合成类型 <a class="header-anchor" href="#合成类型" aria-label="Permalink to &quot;合成类型&quot;">​</a></h3><p>联合类型，交叉类型</p><h3 id="字面量数据类型" tabindex="-1">字面量数据类型 <a class="header-anchor" href="#字面量数据类型" aria-label="Permalink to &quot;字面量数据类型&quot;">​</a></h3>`,123)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
