import{_ as t,c as e,o as r,ah as i}from"./chunks/framework.DqD713j2.js";const m=JSON.parse('{"title":"ECMAScript 语法简介-文档-资源","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript语法简介-文档-资源.md","filePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript语法简介-文档-资源.md","lastUpdated":1750954157000}'),c={name:"Document/JavaScript笔记/ECMAScript语法/ECMAScript语法简介-文档-资源.md"};function o(l,a,n,s,p,h){return r(),e("div",null,a[0]||(a[0]=[i('<h1 id="ecmascript-语法简介-文档-资源" tabindex="-1">ECMAScript 语法简介-文档-资源 <a class="header-anchor" href="#ecmascript-语法简介-文档-资源" aria-label="Permalink to &quot;ECMAScript 语法简介-文档-资源&quot;">​</a></h1><h2 id="ecmascript-语法简介" tabindex="-1">ECMAScript 语法简介 <a class="header-anchor" href="#ecmascript-语法简介" aria-label="Permalink to &quot;ECMAScript 语法简介&quot;">​</a></h2><p>ECMA（European Computer Manufacturers Association）中文名称为欧洲计算机制造商协会，这个组织的目标是评估、开发和认可电信和计算机标准。1994 年后该组织改名为 Ecma 国际。</p><p>最初 <code>JavaScript</code> 语言有 2 份标准：</p><p><code>ECMA-262</code>：主标准，由 ECMA 国际组织（<code>Ecma International</code>）负责管理（为了让最初的<code>JavaScript</code> 与最初的 <code>JScript</code> 能遵循同一套标准发展而诞生的 <code>ECMAScript</code> ，正好排到了作为 <code>Ecma</code> 的 <code>262</code> 号标准，所以得到 <code>ECMA-262</code> 编号。）</p><p><code>ISO/IEC 16262</code>：第二标准，由国际标准化组织 <code>ISO</code>（<code>International Standard Organization</code>）和国际电子技术委员会 <code>IEC</code>（<code>International Electrotechnical Commission</code>）负责管理</p><p>出于商标版权的原因，规范标准中将这门语言称为 <code>ECMAScript</code> ，所以原则上 <code>JavaScript</code> 与<code>ECMAScript</code> 指的是同一个东西，但有时也会加以区分：</p><ul><li><code>JavaScript</code>：指语言及其实现</li><li><code>ECMAScript</code>：指语言标准及语言版本，比如 ES6 表示语言（标准）的第 6 版</li></ul><h3 id="_1-什么是-ecmascript" tabindex="-1">1.什么是 ECMAScript <a class="header-anchor" href="#_1-什么是-ecmascript" aria-label="Permalink to &quot;1.什么是 ECMAScript&quot;">​</a></h3><ul><li>ECMAScript 是由 Ecma 国际通过 ECMA-262 标准化的脚本程序设计语言。</li></ul><h3 id="_2-什么是-ecma-262" tabindex="-1">2.什么是 ECMA-262 <a class="header-anchor" href="#_2-什么是-ecma-262" aria-label="Permalink to &quot;2.什么是 ECMA-262&quot;">​</a></h3><p>Ecma 国际制定了许多标准，而 ECMA-262 只是其中的一个，所有标准列表查看</p><ul><li><a href="http://www.ecma-international.org/publications/standards/Standard.htm" target="_blank" rel="noreferrer">http://www.ecma-international.org/publications/standards/Standard.htm</a></li></ul><h3 id="ecmascript-规范" tabindex="-1">ECMAScript 规范 <a class="header-anchor" href="#ecmascript-规范" aria-label="Permalink to &quot;ECMAScript 规范&quot;">​</a></h3><p>ECMAScript 规范每年都会更新一次，正式标准化 JavaScript 语言的 ECMAScript 的下一次年度更新将在 2023 年 6 月左右获得批准，这将是 ECMAScript 的第 14 版。所有在 2023 年 3 月之前达到阶段 4 的提案都将包含在 ECMAScript 2023 标准中。 对于一个提案，从提出到最后被纳入 ECMAScript 标准，总共分为五步：</p><ul><li><strong>stage0（strawman）</strong>：任何 TC39 的成员都可以提交。</li><li><strong>stage1（proposal）</strong>：进入此阶段就意味着这一提案被认为是正式的了，需要对此提案的场景与 API 进行详尽的描述。</li><li><strong>stage2（draft）</strong>：演进到这一阶段的提案如果能最终进入到标准，那么在之后的阶段都不会有太大的变化，因为理论上只接受增量修改。</li><li><strong>state3（candidate）</strong>：这一阶段的提案只有在遇到了重大问题才会修改，规范文档需要被全面的完成。</li><li><strong>state4（finished）</strong>：这一阶段的提案将会被纳入到 ES 每年发布的规范之中。</li></ul><h3 id="_3-ecma-262-历史" tabindex="-1">3.ECMA-262 历史 <a class="header-anchor" href="#_3-ecma-262-历史" aria-label="Permalink to &quot;3.ECMA-262 历史&quot;">​</a></h3><h4 id="_3-1-ecma-262-ecmascript-历史版本查看网址" tabindex="-1">3.1 ECMA-262（ECMAScript）历史版本查看网址 <a class="header-anchor" href="#_3-1-ecma-262-ecmascript-历史版本查看网址" aria-label="Permalink to &quot;3.1 ECMA-262（ECMAScript）历史版本查看网址&quot;">​</a></h4><ul><li><a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm" target="_blank" rel="noreferrer">http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm</a></li></ul><h4 id="_3-2-ecmasript-语法提案库" tabindex="-1">3.2 ECMASript 语法提案库 <a class="header-anchor" href="#_3-2-ecmasript-语法提案库" aria-label="Permalink to &quot;3.2 ECMASript 语法提案库&quot;">​</a></h4><ul><li><a href="https://github.com/ungap" target="_blank" rel="noreferrer">https://github.com/ungap</a></li></ul><h4 id="_3-3-ecmasript-标准文档" tabindex="-1">3.3 ECMASript 标准文档 <a class="header-anchor" href="#_3-3-ecmasript-标准文档" aria-label="Permalink to &quot;3.3 ECMASript 标准文档&quot;">​</a></h4><ul><li>文档：<a href="https://tc39.es/" target="_blank" rel="noreferrer">https://tc39.es/</a></li><li>提案：<a href="https://tc39.es/ecma262/" target="_blank" rel="noreferrer">https://tc39.es/ecma262/</a></li><li>提案程序规范：<a href="https://tc39.es/process-document/" target="_blank" rel="noreferrer">https://tc39.es/process-document/</a></li><li>组织：<a href="https://github.com/tc39" target="_blank" rel="noreferrer">https://github.com/tc39</a></li><li>提案完整列表：<a href="https://github.com/tc39/proposals/tree/main" target="_blank" rel="noreferrer">https://github.com/tc39/proposals/tree/main</a></li><li>新闻：<a href="https://ecma-international.org/news/" target="_blank" rel="noreferrer">https://ecma-international.org/news/</a></li><li>已经通过并实行的标准：<a href="https://ecma-international.org/publications-and-standards/standards/" target="_blank" rel="noreferrer">https://ecma-international.org/publications-and-standards/standards/</a></li><li>标准库：<a href="https://github.com/zloirock/core-js" target="_blank" rel="noreferrer">https://github.com/zloirock/core-js</a></li></ul><p>注：从 ES6 开始，每年的 6 月份发布一个版本，版本号比年号最后一位大 1</p><h3 id="_4-谁在维护-ecma-262" tabindex="-1">4.谁在维护 ECMA-262 <a class="header-anchor" href="#_4-谁在维护-ecma-262" aria-label="Permalink to &quot;4.谁在维护 ECMA-262&quot;">​</a></h3><p>TC39（Technical Committee 39）是推进 ECMAScript 发展的委员会。其会员都是公司（其中主要是浏览器厂商，有苹果、谷歌、微软、因特尔等）。TC39 定期召开会议，会议由会员公司的代表与特邀专家出席</p><h4 id="标准组织-tc39" tabindex="-1">标准组织 TC39 <a class="header-anchor" href="#标准组织-tc39" aria-label="Permalink to &quot;标准组织 TC39&quot;">​</a></h4><ul><li>Ecma TC39 组织库：<a href="https://github.com/tc39" target="_blank" rel="noreferrer">https://github.com/tc39</a></li><li>ECMAScript 提案：<a href="https://github.com/tc39/proposals" target="_blank" rel="noreferrer">https://github.com/tc39/proposals</a></li></ul><h2 id="ecmascript-发展历史" tabindex="-1">ECMAScript 发展历史 <a class="header-anchor" href="#ecmascript-发展历史" aria-label="Permalink to &quot;ECMAScript 发展历史&quot;">​</a></h2><ul><li>ECMAScript 1（1997 年 6 月）：规范第一版</li><li>ECMAScript 2（1998 年 6 月）：为了同步 ISO 标准，引入了一些小更新</li><li>ECMAScript 3（1999 年 12 月）：增加了正则表达式、字符串处理、控制语句（do-while、switch）、异常处理（try-catch）等众多核心特性</li><li>ECMAScript 4（2008 年 7 月废除)：本来是一次大规模升级（静态类型、模块、命名空间等），但跨度过大，出现了分歧，最终没能推广使用</li><li>ECMAScript 5（2009 年 12 月）：变化不大，加了一些标准库特性和严格模式</li><li>ECMAScript-5.1（2011 年 6 月）：又一次小更新，为了同步 ISO 标准</li><li>ECMAScript 6（2015 年 6 月）：一大波更新，实现了当年 ES4 的许多设想，并正式改为按年份命名规范版本</li><li>ECMAScript 2016（2016 年 6 月）：第一个年度版本，与 ES6 相比，发布周期较短，新特性也相对少些</li><li>ECMAScript 2017（2017 年 6 月）：第二个年度版本...</li></ul><blockquote><p>以后的 ECMAScript 版本（ES2018、ES2019、ES2020 等）都在 6 月正式获准生效</p></blockquote><h2 id="书籍文档相关" tabindex="-1">书籍文档相关 <a class="header-anchor" href="#书籍文档相关" aria-label="Permalink to &quot;书籍文档相关&quot;">​</a></h2><p>推荐阮一峰的《ES6 标准入门》：<a href="https://es6.ruanyifeng.com/" target="_blank" rel="noreferrer">https://es6.ruanyifeng.com/</a></p><p>《JavaScript 高级教程（第 4 版）》[红宝石书]</p><p>《JavaScript 权威指南》[犀牛书]</p><h2 id="资源" tabindex="-1">资源 <a class="header-anchor" href="#资源" aria-label="Permalink to &quot;资源&quot;">​</a></h2><p>ECMA-262，ECMAScript 的语法标准（语法草案和版本相关）：<a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-262/" target="_blank" rel="noreferrer">https://www.ecma-international.org/publications-and-standards/standards/ecma-262/</a></p><h2 id="mdn-语法查询" tabindex="-1">MDN 语法查询 <a class="header-anchor" href="#mdn-语法查询" aria-label="Permalink to &quot;MDN 语法查询&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/</a></p><h1 id="wicg-web-孵化器" tabindex="-1">WICG：Web 孵化器 <a class="header-anchor" href="#wicg-web-孵化器" aria-label="Permalink to &quot;WICG：Web 孵化器&quot;">​</a></h1><p>开源社区：<a href="https://github.com/WICG" target="_blank" rel="noreferrer">Web 孵化器 CG</a></p><h2 id="observable提案相关链接" tabindex="-1">observable提案相关链接 <a class="header-anchor" href="#observable提案相关链接" aria-label="Permalink to &quot;observable提案相关链接&quot;">​</a></h2><p><a href="https://mp.weixin.qq.com/s/gtTFPz4zARloKG5MqxRIGQ" target="_blank" rel="noreferrer">原生 Observable API 来了！能否取代每周下载 5200 万次的 RxJS？</a></p><ul><li><strong>规范</strong>：<a href="https://wicg.github.io/observable/" target="_blank" rel="noreferrer">https://wicg.github.io/observable/</a></li><li><strong>提案</strong>：<a href="https://github.com/WICG/observable" target="_blank" rel="noreferrer">https://github.com/WICG/observable</a></li><li><strong>Chrome 实施状态</strong>：<a href="https://chromestatus.com/feature/5154593776599040" target="_blank" rel="noreferrer">https://chromestatus.com/feature/5154593776599040</a></li></ul>',44)]))}const b=t(c,[["render",o]]);export{m as __pageData,b as default};
