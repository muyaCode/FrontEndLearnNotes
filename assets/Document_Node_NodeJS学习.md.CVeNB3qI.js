import{_ as a,c as n,o as l,ah as e}from"./chunks/framework.DqD713j2.js";const y=JSON.parse('{"title":"Node 学习","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node/NodeJS学习.md","filePath":"Document/Node/NodeJS学习.md","lastUpdated":1750954157000}'),p={name:"Document/Node/NodeJS学习.md"};function o(t,s,r,i,c,B){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="node-学习" tabindex="-1">Node 学习 <a class="header-anchor" href="#node-学习" aria-label="Permalink to &quot;Node 学习&quot;">​</a></h1><p>官网学习文档：<a href="https://nodejs.dev/en/learn/" target="_blank" rel="noreferrer">Node 简介.js (nodejs.dev)</a></p><p>官网下载和文档相关：<a href="https://nodejs.org/zh-cn" target="_blank" rel="noreferrer">Node.js (nodejs.org)</a></p><p>菜鸟教程 Node：<a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noreferrer">Node.js 教程 | 菜鸟教程 (runoob.com)</a></p><h2 id="node-进程-node-运行机制" tabindex="-1">Node 进程（Node 运行机制） <a class="header-anchor" href="#node-进程-node-运行机制" aria-label="Permalink to &quot;Node 进程（Node 运行机制）&quot;">​</a></h2><p>事件循环</p><p>宏任务</p><p>微任务</p><p>模块化</p><ul><li><p>模块对象</p></li><li><p>模块类型</p></li><li><p>模块加载机制</p></li></ul><p>global 对象</p><p>process 对象</p><p>内置模块</p><ul><li><p>stream 流</p></li><li><p>Buffer 模块</p></li><li><p>Event 模块</p></li><li><p>Process 模块</p></li><li><p>FileSystem 文件系统模块</p></li></ul><h3 id="爬虫任务运行-进程任务示例" tabindex="-1">爬虫任务运行：进程任务示例 <a class="header-anchor" href="#爬虫任务运行-进程任务示例" aria-label="Permalink to &quot;爬虫任务运行：进程任务示例&quot;">​</a></h3><h4 id="server-tasks-movie-js-爬虫运行任务进程设置" tabindex="-1">server/tasks/movie.js：爬虫运行任务进程设置 <a class="header-anchor" href="#server-tasks-movie-js-爬虫运行任务进程设置" aria-label="Permalink to &quot;server/tasks/movie.js：爬虫运行任务进程设置&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// crawler/latest-list.js的爬虫脚本任务进程配置：node server/tasks/movie.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cp</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;child_process&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">resolve</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;path&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const mongoose = require(&#39;mongoose&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const Movie = mongoose.model(&#39;Movie&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 两个页面相同任务，可切换爬取</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// const script = resolve(__dirname, &#39;../crawler/latest-list&#39;)</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> script</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;../crawler/trailer-list&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> child</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fork</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">, []);</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;3&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> invoked</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * 为子进程注册函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#E5C07B;">	child</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">invoked</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">		invoked</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	child</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;exit&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">invoked</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">		invoked</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> err</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> code</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> null</span><span style="color:#C678DD;"> :</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;exit code &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> code</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	child</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;message&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;result&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// result.forEach(async (item) =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//   let movie = await Movie.findOne({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     doubanId: item.doubanId</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//   }).exec()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//   if (!movie) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     movie = new Movie(item)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     await movie.save()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//   }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// })</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><h4 id="server-crawler-trailer-list-js-puppeteer-爬虫脚本" tabindex="-1">server\\crawler\\trailer-list.js：puppeteer 爬虫脚本 <a class="header-anchor" href="#server-crawler-trailer-list-js-puppeteer-爬虫脚本" aria-label="Permalink to &quot;server\\crawler\\trailer-list.js：puppeteer 爬虫脚本&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// puppeteer爬虫脚本01</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> puppeteer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;puppeteer&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`https://movie.douban.com/cinema/nowplaying/nanning/\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> sleep</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Start visit the target page&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 运行浏览器</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> browser</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> puppeteer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">launch</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		args</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;--no-sandbox&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">		dumpio</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 新建浏览器页面</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> page</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> browser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newPage</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 去往的页面</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> page</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">goto</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		waitUntil</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;networkidle2&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 选择点击“加载更多”标签</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> page</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">waitForSelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#nowplaying .more&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 加载更多点击多少次</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// for (let i = 0; i &lt; 2; i++) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//   await sleep(3000)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//   await page.click(&#39;.more&#39;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 寻找页面元素</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> page</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">evaluate</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> $</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> items</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> $</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.list-item&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		var</span><span style="color:#E06C75;"> links</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 元素的获取和写入数组</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">items</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			items</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">each</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> it</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> $</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> doubanId</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> it</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> title</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> it</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;data-title&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> rate</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> it</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">attr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;data-score&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				let</span><span style="color:#E06C75;"> poster</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> it</span></span>
<span class="line"><span style="color:#ABB2BF;">					.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.poster img&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">					.</span><span style="color:#61AFEF;">attr</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;src&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">					.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;s_ratio&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;l_ratio&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">				links</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">					doubanId</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					title</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					rate</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					poster</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> links</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;result&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	browser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// Node进程：运行命令文件：node server/task/movie.js | node server/crawler/trailer-list.js</span></span>
<span class="line"><span style="color:#E5C07B;">	process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">	process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 进程退出</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div><p><strong>进程模型：</strong></p><p>同步异步：</p><ol><li><p>异步 IO：</p></li><li><p>libuv：<a href="https://github.com/libuv/libuv" target="_blank" rel="noreferrer">libuv/libuv：跨平台异步 I/O (github.com)</a></p></li></ol><p>阻塞非阻塞：</p><ol><li><p>事件循环和事件驱动：</p></li><li><p>libuv 库：</p></li></ol><p>单线程：</p><ol><li>进程：</li></ol><p>子进程：</p><ol><li>启动子进程：</li></ol><p>进程通信：</p><ol><li>待定</li></ol><h2 id="内置模块" tabindex="-1">内置模块 <a class="header-anchor" href="#内置模块" aria-label="Permalink to &quot;内置模块&quot;">​</a></h2><p><a href="https://nodejs.cn/api/" target="_blank" rel="noreferrer">首页 | Node.js v20 文档 (nodejs.cn)</a></p><h3 id="fs-文件模块" tabindex="-1">fs 文件模块 <a class="header-anchor" href="#fs-文件模块" aria-label="Permalink to &quot;fs 文件模块&quot;">​</a></h3><ul><li><p>fs.rename(path1, path2, [callback]) 重命名某个文件</p><ul><li>const fs = require(&#39;fs&#39;); const root = __dirname; fs.rename(root + &#39;oldername.txt&#39;, root + &#39;newname.txt&#39;, function() { if (err) throw err; console.log(&#39;rename complete&#39;); });</li></ul></li><li><p>fs.chmod(path, mode, [callback]) 修改文件权限</p><ul><li>const fs = require(&#39;fs&#39;); const root = __dirname; fs.chmod(root + &#39;/duang.txt&#39;, &#39;666&#39;, function( err ) { if (err) throw err; console.log(&#39;chmod complete&#39;); });</li></ul></li><li><p>fs.stat( path, [callback]) 读取文件的元信息，回调函数将返回两个参数（err, stats）, 其中stats是fs.Stats的一个对象。</p><ul><li>const fs = require(&#39;fs&#39;); const root = __dirname; fs.stat(root + &#39;/duang.txt&#39;, &#39;666&#39;, function( err, stats ) { if (err) throw err; console.log( stats ); });</li></ul></li><li><p>fs.readFile(path, [callback]) 解析读取文件数据 同步接口:fs.readFileSync( path )</p></li><li><p>fs.exists(path, [callback]) 判断文件是否存在</p><ul><li>const fs = require(&#39;fs&#39;); const root = __dirname; /* 判断文件是否存在 */ fs.exists(root + &#39;/duang.txt&#39;, function( exists ) { if ( !exists ) { // you code here... } else { // code.... } });</li></ul></li><li><p>fs.unlink(path, [callback]) 删除一个文件</p><ul><li>const fs = require(&#39;fs&#39;); const root = __dirname; fs.stat(root + &#39;/duang.txt, function( err ) { if (err) throw err; });</li></ul></li><li><p>fs.write(fd, buffer, length, position, [callback]) 将buffer缓冲器内容写入fd文件</p></li><li><p>fs.read(fd, buffer, length, position, [callback]) 从fd文件中中读取数据</p><ul><li><p>buffer : 为写入数据的缓冲器。</p></li><li><p>offset : 为写入到缓冲器的偏移地址。</p></li><li><p>length : 指明了欲读取的数据字节数。</p></li><li><p>position : 为一个整数变量，标识从哪个位置开始读取文件。如果pisition的参数为null，数据将从文件的当前位置开始读取。</p></li><li><p>callback : 接受两个参数（err, bytesRead）, bytesRead是用来标识多少个字节被读取。</p></li></ul></li><li><p>fs.readdir(path[, options], callback)</p></li><li><p>fs.appendFile(filename,data,[options],callback);以追加的方式写文件。</p></li><li><p>fs.open(filename,flags,[mode],callback); 打开文件。</p></li><li><p>fs.mkdir(path,[mode],callback);创建目录。</p></li><li><p>fs.readdir(path,callback);读取目录。</p></li><li><p>fs.exists(path,callback);查看文件与目录是否存在。</p></li><li><p>fs.utimes(path,atime,mtime,callback);修改文件的访问时间和修改时间。</p></li><li><p>fs.rename(oldfilename,newfilename,callback);重命名文件名或者目录。</p></li><li><p>fs.rmdir(path,callback);删除空目录。</p></li></ul><h3 id="path-路径模块" tabindex="-1">path 路径模块 <a class="header-anchor" href="#path-路径模块" aria-label="Permalink to &quot;path 路径模块&quot;">​</a></h3><ul><li><p>路径组成</p><ul><li><p>path.dirname(p) 返回路径p所在的目录</p><ul><li><p>var path = require(&#39;path&#39;);</p></li><li><p>console.log(path.dirname(&#39;/foo/bar/baz/asdf/a.txt&#39;)); // /foo/bar/baz/asdf</p></li><li><p>console.log(path.dirname(&#39;/foo/bar/baz/asdf/&#39;)); // /foo/bar/baz</p></li><li><p>console.log(path.dirname(&#39;C:/test/aaa&#39;)); // C:/test</p></li></ul></li><li><p>path.basename(p[, ext]) 返回路径的最后一个部分，即文件名。 参数ext为需要截掉的后缀内容</p><ul><li><p>var path = require(&#39;path&#39;);</p></li><li><p>console.log(path.basename(&#39;/foo/bar/baz/asdf/a.txt&#39;)); // a.txt</p></li><li><p>console.log(path.basename(&#39;/foo/bar/baz/asdf/a.txt&#39;,&#39;.txt&#39;)); // a</p></li><li><p>console.log(path.basename(&#39;/foo/bar/baz/asdf/&#39;)); // asdf</p></li><li><p>console.log(path.basename(&#39;C:/test/aaa&#39;)); // aaa</p></li></ul></li><li><p>path.extname(p) 返回路径p的扩展名，从最后一个&#39;.&#39;到字符串的末尾。如果最后一个部分没有&#39;.&#39;，或者路径是以&#39;.&#39;开头，则返回空字符串</p><ul><li>var path = require(&#39;path&#39;); console.log(path.extname(&#39;/foo/bar/baz/asdf/a.txt&#39;)); // .txt console.log(path.extname(&#39;/foo/bar/baz/asdf/a.txt.b&#39;)); // .b console.log(path.extname(&#39;/foo/bar/baz/asdf/a.&#39;)); // . console.log(path.extname(&#39;C:/test/aaa/.&#39;)); // &#39;&#39; console.log(path.extname(&#39;C:/test/aaa&#39;)); // &#39;&#39;</li></ul></li></ul></li><li><p>分隔符</p><ul><li><p>path.sep 返回对应平台下的文件分隔符， win下为&#39;&#39;，*nix下为&#39;/&#39;</p><ul><li>var path = require(&#39;path&#39;); console.log(path.sep); // win下为\\，<em>nix下为/ console.log(&#39;foo\\bar\\baz&#39;.split(path.sep)); // [ &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39; ] console.log(&#39;foo/bar/baz&#39;.split(path.sep)); // win下返回[&#39;foo/bar/baz&#39;]，但在</em>nix系统下会返回[&#39;foo&#39;,&#39;bar&#39;,&#39;baz&#39;]</li></ul></li><li><p>path.delimiter 返回对应平台下的路径分隔符， win下为&#39;;&#39;，*nix下为&#39;:&#39;</p><ul><li>var path = require(&#39;path&#39;); console.log(path.delimiter); //win下为“;”，*nix下为“:” console.log(path.sep); // win下为\\，*nix下为/</li></ul></li></ul></li><li><p>规范化</p><ul><li><p>path.normalize(p) 规范化路径，处理冗余的“..”、“.”、“/”字符。发现多个斜杠时，会替换成一个斜杠。当路径末尾包含一个斜杠时，保留。Windows系统使用反斜杠</p><ul><li>var path = require(&#39;path&#39;); console.log(path.normalize(&#39;a/b/c/../user/bin&#39;));//a\\b\\user\\bin console.log(path.normalize(&#39;a/b/c///../user/bin/&#39;));//a\\b\\user\\bin\\ console.log(path.normalize(&#39;a/b/c/../../user/bin&#39;));//a\\user\\bin console.log(path.normalize(&#39;a/b/c/.././///../user/bin/..&#39;));//a\\user console.log(path.normalize(&#39;a/b/c/../../user/bin/../../&#39;));//a\\ console.log(path.normalize(&#39;a/../../user/bin/../../&#39;));//..\\ console.log(path.normalize(&#39;a/../../user/bin/../../../../&#39;));//......\\ console.log(path.normalize(&#39;./a/.././user/bin/./&#39;));//user\\bin\\</li></ul></li><li><p>path.join([path1], [path2], [...]) 将多个路径结合在一起，并转换为规范化路径</p><ul><li>var path = require(&#39;path&#39;); console.log(path.join(&#39;////./a&#39;, &#39;b////c&#39;, &#39;user/&#39;));//\\a\\b\\c\\user console.log(path.join(&#39;a&#39;, &#39;../../&#39;, &#39;user/&#39;));//..\\user\\</li></ul></li></ul></li><li><p>绝对和相对路径</p><ul><li><p>path.resolve([from ...], to) 从源地址 from 到目的地址 to 的绝对路径，类似在shell里执行一系列的cd命令</p><ul><li><p>path.resolve(&#39;foo/bar&#39;, &#39;/tmp/file/&#39;, &#39;..&#39;, &#39;a/../subfile&#39;)</p></li><li><p>类似于:</p><ul><li>cd foo/bar cd /tmp/file/ cd .. cd a/../subfile pwd</li></ul></li><li><p>[注意]如果某个from或to参数是绝对路径（比如 &#39;E:/abc&#39;，或是以“/”开头的路径），则将忽略之前的from参数</p><ul><li>var path = require(&#39;path&#39;); console.log(path.resolve(&#39;.&#39;, &#39;testFiles/..&#39;, &#39;trdLayer&#39;));//D:\\project\\trdLayer console.log(path.resolve(&#39;..&#39;, &#39;testFiles&#39;, &#39;a.txt&#39;));//D:\\testFiles\\a.txt console.log(path.resolve(&#39;D:&#39;, &#39;abc&#39;, &#39;D:/a&#39;));//D:\\a console.log(path.resolve(&#39;abc&#39;, &#39;ok.gif&#39;));//D:\\project\\abc\\ok.gif console.log(path.resolve(&#39;abc&#39;, &#39;..&#39;, &#39;a/../subfile&#39;)); //D:\\project\\subfile</li></ul></li></ul></li><li><p>path.isAbsolute(path) path是一个绝对路径(比如 &#39;E:/abc&#39;)，或者是以“/”开头的路径，二者都会返回true</p><ul><li>var path = require(&#39;path&#39;); console.log(path.isAbsolute(&#39;../testFiles/secLayer&#39;));//false console.log(path.isAbsolute(&#39;./join.js&#39;));//false console.log(path.isAbsolute(&#39;temp&#39;));//false console.log(path.isAbsolute(&#39;/temp/../..&#39;));//true console.log(path.isAbsolute(&#39;E:/github/nodeAPI/abc/efg&#39;));//true console.log(path.isAbsolute(&#39;///temp123&#39;));//true</li></ul></li><li><p>path.relative(from, to) 获取从 from 到 to 的相对路径， 可以看作 path.resolve 的相反实现</p><ul><li><p>path.resolve(from, path.relative(from, to)) == path.resolve(to)</p></li><li><p>var path = require(&#39;path&#39;); console.log(path.relative(&#39;C:\\\\test&#39;, &#39;C:\\\\impl\\bbb&#39;));//..\\impl\\bbb console.log(path.relative(&#39;C:/test/aaa&#39;, &#39;C:/bbb&#39;));//....\\bbb console.log(path.relative(&#39;C:/test/aaa&#39;, &#39;D:/bbb&#39;));//D:\\bbb</p></li></ul></li></ul></li></ul><h3 id="http-模块" tabindex="-1">http 模块 <a class="header-anchor" href="#http-模块" aria-label="Permalink to &quot;http 模块&quot;">​</a></h3><ul><li><p>http.server</p><ul><li><p>const http = require(&#39;http&#39;); const net = require(&#39;net&#39;); const util = require(&#39;util&#39;); //随便定义的一个函数，下面会用到 function a(){ console.log(&quot;dajiahao&quot;); } var server = new http.Server(); server.on(&#39;request&#39;,(req,res)=&gt;{ console.log(req.url); //设置应答头信息 res.writeHead(200,{&#39;Content-Type&#39;:&#39;text/html&#39;}); res.write(&#39;hello we are family&#39;); res.end(&#39;server already end\\n&#39;); }); //显示了三次这也证明了TCP的三次握手 server.on(&#39;connection&#39;,()=&gt;{ a(); }); server.on(&#39;close&#39;,()=&gt;{ console.log(&#39;server will close&#39;); }); //关闭服务为了触发close事件 server.close();</p><ul><li><p>继承自EventEmitter,提供了以下的事件：</p><ul><li><ol><li>request：当客户端请求到来的时候，该事件被触发，提供两个参数request和response，分别是http.ServerRequest和http.ServerResponse表示请求和响应的信息。</li></ol></li><li><ol start="2"><li>connection：当TCP建立连接的时候，该事件被触发，提供了一个参数socket，为net.socket的实例(底层协议对象)</li></ol></li><li><ol start="3"><li>close：当服务器关闭的时候会被触发</li></ol></li><li><ol start="4"><li>除此之外还有checkContinue、upgrade、clientError等事件</li></ol></li></ul></li></ul></li></ul></li><li><p>http.createServer() 创建服务器</p><ul><li><p>const http = require(&#39;http&#39;); const net = require(&#39;net&#39;); const util = require(&#39;util&#39;); http.createServer(function(req,res){ res.writeHead(404,{&#39;Content-Type&#39;:&#39;text/plain&#39;}) res.write(&quot;we are is content&quot;); res.end(&quot;fdsa&quot;); }).listen(3000);</p></li><li><p>可以打印res属性查看方法</p></li></ul></li><li><p>http.get(&#39;路径&#39;,callback) 发送get请求。</p></li><li><p>http.request(options,callback) 发送请求。</p><ul><li><p>options：options是一个类似关联数组的对象，表示请求的参数，callback作为回调函数，需要传递一个参数。</p></li><li><p>options常用的参数有host、port（默认为80）、method（默认为GET）、path（请求的相对于根的路径，默认是“/”。</p></li></ul></li><li><p>http.ServerRequset() 请求信息</p><ul><li><p>属性</p><ul><li><p>ccomplete 客户端请求是否已经发送完成</p></li><li><p>httpVersion HTTP协议版本，通常是1.0或1.1</p></li><li><p>method HTTP请求方法，如：GET,POST</p></li><li><p>url 原始的请求路径</p></li><li><p>headers HTTP请求头</p></li><li><p>trailers HTTP请求尾(不常见)</p></li><li><p>connection 当前HTTP连接套接字，为net.Socket的实例</p></li><li><p>socket connection属性的别名</p></li><li><p>client client属性的别名</p></li></ul></li><li><p>实例</p><ul><li>http.createServer(function(req,res){ console.log(req.httpVersion); <a href="//console.log" target="_blank" rel="noreferrer">//console.log</a>(req.socket); console.log(req.headers); console.log(req.method); res.writeHead(404,{&#39;Content-Type&#39;:&#39;text/plain&#39;}) res.write(&quot;we are is content&quot;); res.end(&quot;fdsa&quot;); }).listen(8080);</li></ul></li><li><p>获取GET请求内容</p><ul><li>const http = require(&#39;http&#39;); const net = require(&#39;net&#39;); const url = require(&#39;url&#39;); const util = require(&#39;util&#39;); http.createServer((req,res)=&gt;{ res.write(util.inspect(url.parse(req.url,true))); //利用url模块去解析客户端发送过来的URL res.end(util.inspect(url.parse(req.url,false))); }).listen(8080);</li></ul></li><li><p>获得POST请求内容</p><ul><li>const http = require(&#39;http&#39;); const net = require(&#39;net&#39;); const url = require(&#39;url&#39;); const util = require(&#39;util&#39;); //querystring用于处理URL中的查询字符串 const querystring = require(&#39;querystring&#39;); http.createServer((req,res)=&gt;{ var posr = &#39;&#39;; req.on(&#39;data&#39;,(chunk)=&gt;{ post+=chunk; }); res,on(&#39;end&#39;,()=&gt;{ //将字符串变为json的格式 post = querystring.parse(post); //向前端返回字符串 res.end(util.inspect(post)); }); })</li></ul></li></ul></li><li><p>http.ServerResponse 返回客户端信息</p></li></ul><h3 id="until-模块" tabindex="-1">until 模块 <a class="header-anchor" href="#until-模块" aria-label="Permalink to &quot;until 模块&quot;">​</a></h3><ul><li><p>util.format(格式化输出字符串);</p></li><li><p>util.isArray(检查是否为数组);</p></li><li><p>util.RegExp(是不是正则);</p></li><li><p>util.isDate(是不是日期型);</p></li><li><p>util.inherits(child,parent)实现继承；</p></li></ul><h3 id="events模块" tabindex="-1">events模块 <a class="header-anchor" href="#events模块" aria-label="Permalink to &quot;events模块&quot;">​</a></h3><ul><li><p>events.EventEmitter</p><ul><li><p>EventEmitter 的核心就是事件触发与事件监听器功能的封装</p></li><li><p>EventEmitter 的每个事件由一个事件名和若干个参 数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作 为回调函数参数传递。</p></li></ul></li></ul><h3 id="jade模块" tabindex="-1">jade模块 <a class="header-anchor" href="#jade模块" aria-label="Permalink to &quot;jade模块&quot;">​</a></h3><h2 id="第三方模块" tabindex="-1">第三方模块 <a class="header-anchor" href="#第三方模块" aria-label="Permalink to &quot;第三方模块&quot;">​</a></h2><h2 id="自定义模块" tabindex="-1">自定义模块 <a class="header-anchor" href="#自定义模块" aria-label="Permalink to &quot;自定义模块&quot;">​</a></h2><h2 id="使用require方法加载模块" tabindex="-1">使用require方法加载模块 <a class="header-anchor" href="#使用require方法加载模块" aria-label="Permalink to &quot;使用require方法加载模块&quot;">​</a></h2><h3 id="加载内置模块" tabindex="-1">加载内置模块 <a class="header-anchor" href="#加载内置模块" aria-label="Permalink to &quot;加载内置模块&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;fs&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="加载第三方模块" tabindex="-1">加载第三方模块 <a class="header-anchor" href="#加载第三方模块" aria-label="Permalink to &quot;加载第三方模块&quot;">​</a></h3><h3 id="加载自定义模块" tabindex="-1">加载自定义模块 <a class="header-anchor" href="#加载自定义模块" aria-label="Permalink to &quot;加载自定义模块&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> m1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./m1.js&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>可以省略.js后缀名</li></ul><h2 id="模块的加载机制" tabindex="-1">模块的加载机制 <a class="header-anchor" href="#模块的加载机制" aria-label="Permalink to &quot;模块的加载机制&quot;">​</a></h2><ul><li><p>1.模块在第一次加载后会被缓存</p></li><li><p>2.内置模块加载优先级是最高的</p></li><li><p>3.自定义模块的加载：必须指定以 ./或../ 开头的路径标识</p><ul><li><p>如果没有指定 ./或../ 这样的路径标识符，则node 会把它当做内置模块或者第三方模块进行加载</p></li><li><p>如果加载定义模块时，省略了文件的扩展名，则Node.js会按顺序分别尝试一下的文件</p><ul><li><p>1.安卓确切的文件名进行加载</p></li><li><p>2.补全.js扩展名进行加载</p></li><li><p>3.补全.json扩展名进行加载</p></li><li><p>4.补全.node扩展名进行加载</p></li><li><p>5.加载失败，终端报错</p></li></ul></li></ul></li><li><p>4.第三方模块的加载机制</p><ul><li><p>如果传递给require()的模块标识符不是一个内置模块，没有以 ‘./’ 或 &#39;../&#39; 开头，则Node.js 会从当前模块的父级目录开始，尝试从/node_modules 文件夹中加载第三方模块。</p></li><li><p>如果没有找到对应的第三方模块，则移动到再上一层父级目录中，进行加载，查找到文件系统的根目录</p></li></ul></li><li><p>5.目录为模块时的加载机制</p><ul><li><p>三种加载方式</p></li><li><p>1.在被加载的目录下查找一个叫做package.json的文件，并寻找main属性，作为require()</p></li><li><p>2.如果目录里没有package.json文件，或者main入囗不存在或无法解析，则Node.js将会试图加载目录下的index.js文件。</p></li><li><p>3.如果以上两步都失败了，则Nodejs“在终端打印错误消息，报告模块的缺失Error:Cannot find module ‘xxx’</p></li></ul></li></ul>`,54)]))}const b=a(p,[["render",o]]);export{y as __pageData,b as default};
