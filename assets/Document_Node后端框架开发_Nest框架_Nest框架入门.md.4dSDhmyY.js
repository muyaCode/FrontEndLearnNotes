import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/%E5%B8%AE%E5%8A%A9%E7%94%9F%E6%88%90%E6%96%87%E4%BB%B6%E5%91%BD%E4%BB%A4%E5%9B%BE%E4%BE%8B.CMtc_QWv.jpg",o="/FrontEndLearnNotes/assets/image-20240229175722750.D18b4pYM.png",r="/FrontEndLearnNotes/assets/94ffe4f1c441413499126c3cece14f22.B-bb7RuA.png",d=JSON.parse('{"title":"Nest 框架入门","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Nest框架/Nest框架入门.md","filePath":"Document/Node后端框架开发/Nest框架/Nest框架入门.md","lastUpdated":1750954157000}'),t={name:"Document/Node后端框架开发/Nest框架/Nest框架入门.md"};function c(i,s,B,y,u,b){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="nest-框架入门" tabindex="-1">Nest 框架入门 <a class="header-anchor" href="#nest-框架入门" aria-label="Permalink to &quot;Nest 框架入门&quot;">​</a></h1><p>参考文档：<a href="https://www.nestjs.com.cn/" target="_blank" rel="noreferrer">NestJS 简介 | NestJS 中文文档 | NestJS 中文网</a></p><h2 id="环境安装和项目创建运行" tabindex="-1">环境安装和项目创建运行 <a class="header-anchor" href="#环境安装和项目创建运行" aria-label="Permalink to &quot;环境安装和项目创建运行&quot;">​</a></h2><h3 id="_1-node-环境下安装-10-13-0-v13-版本除外" tabindex="-1">1.Node 环境下安装(&gt;= 10.13.0, v13 版本除外) <a class="header-anchor" href="#_1-node-环境下安装-10-13-0-v13-版本除外" aria-label="Permalink to &quot;1.Node 环境下安装(&gt;= 10.13.0, v13 版本除外)&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> @nestjs/cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-创建项目" tabindex="-1">2.创建项目 <a class="header-anchor" href="#_2-创建项目" aria-label="Permalink to &quot;2.创建项目&quot;">​</a></h3><h4 id="_2-1-命令行创建" tabindex="-1">2.1 命令行创建 <a class="header-anchor" href="#_2-1-命令行创建" aria-label="Permalink to &quot;2.1 命令行创建&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">nest</span><span style="color:#C678DD;"> new</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">project</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-2-其他三种项目安装创建方式" tabindex="-1">2.2 其他三种项目安装创建方式 <a class="header-anchor" href="#_2-2-其他三种项目安装创建方式" aria-label="Permalink to &quot;2.2 其他三种项目安装创建方式&quot;">​</a></h4><h5 id="_1-使用-git-安装" tabindex="-1">1.使用 Git 安装 <a class="header-anchor" href="#_1-使用-git-安装" aria-label="Permalink to &quot;1.使用 Git 安装&quot;">​</a></h5><p>采用 TypeScript 开发的 starter 项目：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> clone</span><span style="color:#98C379;"> https://github.com/nestjs/typescript-starter.git</span><span style="color:#98C379;"> project</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> project</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="_2-安装基于-javascript-的-starter-project" tabindex="-1">2.安装基于 JavaScript 的 starter project <a class="header-anchor" href="#_2-安装基于-javascript-的-starter-project" aria-label="Permalink to &quot;2.安装基于 JavaScript 的 starter project&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> clone</span><span style="color:#98C379;"> javascript-starter.git</span><span style="color:#98C379;"> project</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> project</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="_3-还可以通过-npm-或-yarn-来安装的核心和支撑文件-从头开始手动创建一个新项目" tabindex="-1">3.还可以通过 npm （或 yarn）来安装的核心和支撑文件，从头开始手动创建一个新项目 <a class="header-anchor" href="#_3-还可以通过-npm-或-yarn-来安装的核心和支撑文件-从头开始手动创建一个新项目" aria-label="Permalink to &quot;3.还可以通过 npm （或 yarn）来安装的核心和支撑文件，从头开始手动创建一个新项目&quot;">​</a></h5><p>当然，在这种情况下，你将自己担负起创建项目样板文件的工作。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @nestjs/core</span><span style="color:#98C379;"> @nestjs/common</span><span style="color:#98C379;"> rxjs</span><span style="color:#98C379;"> reflect-metadata</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-运行项目" tabindex="-1">3.运行项目 <a class="header-anchor" href="#_3-运行项目" aria-label="Permalink to &quot;3.运行项目&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> start</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 或</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> start:dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>启动的时候应该以 dev 模式启动，这样 Nest 会「自动检测我们的文件变化」，然后「自动重启服务」</p><h4 id="_4-浏览器打开地址" tabindex="-1">4.浏览器打开地址 <a class="header-anchor" href="#_4-浏览器打开地址" aria-label="Permalink to &quot;4.浏览器打开地址&quot;">​</a></h4><p><a href="http://localhost:3000/" target="_blank" rel="noreferrer">http://localhost:3000/</a></p><h3 id="_4-目录介绍" tabindex="-1">4.目录介绍 <a class="header-anchor" href="#_4-目录介绍" aria-label="Permalink to &quot;4.目录介绍&quot;">​</a></h3><p>1.main.ts 入口文件主文件 类似于 vue 的 main.ts</p><p>通过 NestFactory.create(AppModule) 创建一个 app 就是类似于绑定一个根组件 App.vue</p><p>app.listen(3000); 监听一个端口</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./app.module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>2.Controller.ts 控制器</p><p>你可以理解成 vue 的路由</p><p>private readonly appService: AppService 这一行代码就是依赖注入不需要实例化 appService 它内部会自己实例化的我们主需要放上去就可以了</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Controller</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Get</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./app.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> appService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AppService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">	getHello</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">appService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//-----------------------------------------------------</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//修改地址之后</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Controller</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Get</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./app.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/get&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> appService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AppService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/hello&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">	getHello</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">appService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>打开地址：<a href="http://localhost:3000/hello" target="_blank" rel="noreferrer">http://localhost:3000/hello</a></p><p>3.app.service.ts</p><p>这个文件主要实现业务逻辑的 当然 Controller 可以实现逻辑，但是就是单一的无法复用，放到 app.service 有别的模块也需要就可以实现复用</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	getHello</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;Hello World!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="nest-cli-使用-使用命令-生成文件" tabindex="-1">🅰️Nest CLI 使用(使用命令 生成文件) <a class="header-anchor" href="#nest-cli-使用-使用命令-生成文件" aria-label="Permalink to &quot;:a:Nest CLI 使用(使用命令 生成文件)&quot;">​</a></h2><p>文档：<a href="https://docs.nestjs.com/cli/overview" target="_blank" rel="noreferrer">Overview - CLI | NestJS - A progressive Node.js framework</a></p><h3 id="帮助生成文件命令详解" tabindex="-1">帮助生成文件命令详解 <a class="header-anchor" href="#帮助生成文件命令详解" aria-label="Permalink to &quot;帮助生成文件命令详解&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">nest</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> h</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>图例</p><p><img src="`+e+`" alt="帮助生成文件命令图例"></p><h4 id="命令详解和简写" tabindex="-1">命令详解和简写 <a class="header-anchor" href="#命令详解和简写" aria-label="Permalink to &quot;命令详解和简写&quot;">​</a></h4><ul><li>class (简写: cl) 类</li><li>controller (简写: co) 控制器</li><li>decorator (简写: d) 装饰器</li><li>exception (简写: e) 异常捕获</li><li>filter (简写: f) 过滤器</li><li>gateway (简写: ga) 网关</li><li>guard (简写: gu) 守卫</li><li>interceptor (简写: i) 拦截器</li><li>middleware (简写: mi) 中间件</li><li>module (简写: mo) 模块</li><li>pipe (简写: pi) 管道</li><li>provider (简写: pr) 供应商</li><li>service (简写: s) 服务</li></ul><h3 id="生成命令的使用" tabindex="-1">生成命令的使用 <a class="header-anchor" href="#生成命令的使用" aria-label="Permalink to &quot;生成命令的使用&quot;">​</a></h3><h4 id="_1-构建-module-服务模块" tabindex="-1">1.构建 module 服务模块 <a class="header-anchor" href="#_1-构建-module-服务模块" aria-label="Permalink to &quot;1.构建 module 服务模块&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> module</span><span style="color:#98C379;"> video</span><span style="color:#98C379;"> server</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 简写</span></span>
<span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> mo</span><span style="color:#98C379;"> video</span><span style="color:#98C379;"> server</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2-创建-controller" tabindex="-1">2.创建 Controller <a class="header-anchor" href="#_2-创建-controller" aria-label="Permalink to &quot;2.创建 Controller&quot;">​</a></h4><p>controller 就类似前端的「路由」，负责处理「客户端传入的请求」和「服务端返回的响应」</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> controller</span><span style="color:#98C379;"> video</span><span style="color:#98C379;"> server</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 简写</span></span>
<span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> co</span><span style="color:#98C379;"> video</span><span style="color:#98C379;"> server</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-创建-provider-服务的提供者" tabindex="-1">3.创建 Provider：服务的提供者 <a class="header-anchor" href="#_3-创建-provider-服务的提供者" aria-label="Permalink to &quot;3.创建 Provider：服务的提供者&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> service</span><span style="color:#98C379;"> video</span><span style="color:#98C379;"> server</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 简写</span></span>
<span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> s</span><span style="color:#98C379;"> video</span><span style="color:#98C379;"> server</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_4-可以直接使用一个命令生成上面的-curd" tabindex="-1">4.可以直接使用一个命令生成上面的 CURD <a class="header-anchor" href="#_4-可以直接使用一个命令生成上面的-curd" aria-label="Permalink to &quot;4.可以直接使用一个命令生成上面的 CURD&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;"> nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> resource</span><span style="color:#98C379;"> video</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>生成了一套标准的 CURD 模板</p><p><img src="`+o+'" alt="image-20240229175722750"></p><p>第一次使用这个命令的时候，除了生成文件之外还会自动使用 <code>npm</code> 帮我们更新资源，安装一些额外的插件，后续再次使用就不会更新了。</p><h2 id="restful-风格设计" tabindex="-1">RESTful 风格设计 <a class="header-anchor" href="#restful-风格设计" aria-label="Permalink to &quot;RESTful 风格设计&quot;">​</a></h2><p>RESTful 是一种风格，在 RESTful 中，一切都被认为是资源，每个资源有对应的 URL 标识。</p><p>不是标准也不是协议，只是一种风格。当然你也可以不按照他的风格去写。</p><h3 id="_1-接口-url" tabindex="-1">1.接口 url <a class="header-anchor" href="#_1-接口-url" aria-label="Permalink to &quot;1.接口 url&quot;">​</a></h3><h4 id="传统接口" tabindex="-1">传统接口 <a class="header-anchor" href="#传统接口" aria-label="Permalink to &quot;传统接口&quot;">​</a></h4><p><a href="http://localhost:8080/api/get_list?id=1" target="_blank" rel="noreferrer">http://localhost:8080/api/get_list?id=1</a></p><p><a href="http://localhost:8080/api/delete_list?id=1" target="_blank" rel="noreferrer">http://localhost:8080/api/delete_list?id=1</a></p><p><a href="http://localhost:8080/api/update_list?id=1" target="_blank" rel="noreferrer">http://localhost:8080/api/update_list?id=1</a></p><h4 id="restful-接口" tabindex="-1">RESTful 接口 <a class="header-anchor" href="#restful-接口" aria-label="Permalink to &quot;RESTful 接口&quot;">​</a></h4><p>增加/查询/删除/更新：<a href="http://localhost:8080/api/get_list/1" target="_blank" rel="noreferrer">http://localhost:8080/api/get_list/1</a></p><p>RESTful 风格一个接口就会完成 增删改差 他是通过不同的请求方式来区分的</p><ul><li><p>查询 GET</p></li><li><p>提交 POST</p></li><li><p>更新 PUT PATCH</p></li><li><p>删除 DELETE</p></li></ul><p><img src="'+r+`" alt="img"></p><h3 id="_2-restful-版本控制" tabindex="-1">2.RESTful 版本控制 <a class="header-anchor" href="#_2-restful-版本控制" aria-label="Permalink to &quot;2.RESTful 版本控制&quot;">​</a></h3><p>一共有三种我们一般用第一种 更加语义化</p><table tabindex="0"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>URI Versioning</td><td>版本将在请求的 URI 中传递（默认）</td></tr><tr><td>Header Versioning</td><td>自定义请求标头将指定版本</td></tr><tr><td>Media Type Versioning</td><td>请求的 Accept 标头将指定版本</td></tr></tbody></table><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">VersioningType</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./app.module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 版本控制</span></span>
<span class="line"><span style="color:#E5C07B;">	app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">enableVersioning</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		type</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">VersioningType</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">URI</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>然后在 user.controller 配置版本</p><p>Controller 变成一个对象 通过 version 配置版本</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Controller</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Get</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Post</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Body</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Patch</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Param</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Delete</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Version</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UserService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./user.service&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CreateUserDto</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./dto/create-user.dto&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UpdateUserDto</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./dto/update-user.dto&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  path</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  version</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;1&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> userService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">UserService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">  create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">createUserDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">CreateUserDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createUserDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // @Version(&#39;1&#39;)</span></span>
<span class="line"><span style="color:#61AFEF;">  findAll</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findAll</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;:id&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">  findOne</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Param</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;id&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findOne</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Patch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;:id&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">  update</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Param</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;id&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, @</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;font-style:italic;">updateUserDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">UpdateUserDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">updateUserDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>打开地址：<a href="http://localhost:3000/v1/user" target="_blank" rel="noreferrer">http://localhost:3000/v1/user</a></p><h3 id="_3-code-码规范" tabindex="-1">3.Code 码规范 <a class="header-anchor" href="#_3-code-码规范" aria-label="Permalink to &quot;3.Code 码规范&quot;">​</a></h3><ul><li><p>200 OK</p></li><li><p>304 Not Modified 协商缓存了</p></li><li><p>400 Bad Request 参数错误</p></li><li><p>401 Unauthorized token 错误</p></li><li><p>403 Forbidden referer origin 验证失败</p></li><li><p>404 Not Found 接口不存在</p></li><li><p>500 Internal Server Error 服务端错误</p></li><li><p>502 Bad Gateway 上游接口有问题或者服务器问题</p></li></ul><h2 id="项目工作空间两种模式" tabindex="-1">项目工作空间两种模式 <a class="header-anchor" href="#项目工作空间两种模式" aria-label="Permalink to &quot;项目工作空间两种模式&quot;">​</a></h2><h3 id="_1-标准模式" tabindex="-1">1.标准模式 <a class="header-anchor" href="#_1-标准模式" aria-label="Permalink to &quot;1.标准模式&quot;">​</a></h3><p>用于构建具有自己的依赖项和设置、不需要优化共享模块或优化复杂，构建以项目为中心的应用程序。这是默认模式。</p><h3 id="_2-monorepo-模式" tabindex="-1">2.monorepo 模式 <a class="header-anchor" href="#_2-monorepo-模式" aria-label="Permalink to &quot;2.monorepo 模式&quot;">​</a></h3><p>该模式将代码工件作为轻量级 monorepo 的一部分，可能更适合开发团队或多项目环境。它自动化了构建过程的各个部分，使创建和组合模块化组件变得容易，促进了代码重用，使集成测试变得更容易，使共享项目范围内的工件(如 tslint 规则和其他配置策略)变得容易，并且比 github 子模块之类的替代方法更容易使用。Monorepo 模式采用了在 nest-cli.json 中表示工作区的概念，以协调 monorepo 组件之间的关系。</p><h4 id="_1-创建子项目-admin" tabindex="-1">1.创建子项目 admin <a class="header-anchor" href="#_1-创建子项目-admin" aria-label="Permalink to &quot;1.创建子项目 admin&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> app</span><span style="color:#98C379;"> admin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-启动子项目-admin-并实时监听" tabindex="-1">2.启动子项目 admin，并实时监听 <a class="header-anchor" href="#_2-启动子项目-admin-并实时监听" aria-label="Permalink to &quot;2.启动子项目 admin，并实时监听&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> start</span><span style="color:#D19A66;"> -w</span><span style="color:#98C379;"> admin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-创建数据库模块-赋予名称-libs" tabindex="-1">3.创建数据库模块--赋予名称@libs <a class="header-anchor" href="#_3-创建数据库模块-赋予名称-libs" aria-label="Permalink to &quot;3.创建数据库模块--赋予名称@libs&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> lib</span><span style="color:#98C379;"> db</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_4-安装数据库模块-二选一" tabindex="-1">4.安装数据库模块(二选一) <a class="header-anchor" href="#_4-安装数据库模块-二选一" aria-label="Permalink to &quot;4.安装数据库模块(二选一)&quot;">​</a></h4><h5 id="typegoose" tabindex="-1">typegoose <a class="header-anchor" href="#typegoose" aria-label="Permalink to &quot;typegoose&quot;">​</a></h5><p>官网：<a href="https://typegoose.github.io/typegoose/" target="_blank" rel="noreferrer">https://typegoose.github.io/typegoose/</a></p><ul><li><p>更适合 typescript 开发</p></li><li><p>使用 TypeScript 类定义 Mongoose 模型</p><p>1.nest 框架专用安装命令</p></li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> nestjs-typegoose</span><span style="color:#98C379;"> @typegoose/typegoose</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.安装 mongoose @types/mongoose</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> mongoose</span><span style="color:#98C379;"> @types/mongoose</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="mongoose" tabindex="-1">mongoose <a class="header-anchor" href="#mongoose" aria-label="Permalink to &quot;mongoose&quot;">​</a></h5><p>官网：<a href="http://www.mongoosejs.net/" target="_blank" rel="noreferrer">http://www.mongoosejs.net/</a></p><p>1.nest 框架专用安装命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> @nestjs/mongoose</span><span style="color:#98C379;"> mongoose</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.配置使用：<a href="https://blog.csdn.net/webtext/article/details/122910230" target="_blank" rel="noreferrer">https://blog.csdn.net/webtext/article/details/122910230</a></p><h2 id="概述语法详情-具体看官网文档—概述" tabindex="-1">🅱️概述语法详情（具体看官网文档—概述） <a class="header-anchor" href="#概述语法详情-具体看官网文档—概述" aria-label="Permalink to &quot;:b:概述语法详情（具体看官网文档—概述）&quot;">​</a></h2><p>文档：<a href="https://docs.nestjs.com/controllers" target="_blank" rel="noreferrer">Controllers | NestJS - A progressive Node.js framework</a></p><h3 id="控制器-controller" tabindex="-1">控制器 Controller <a class="header-anchor" href="#控制器-controller" aria-label="Permalink to &quot;控制器 Controller&quot;">​</a></h3><p>控制器负责处理传入的请求和向客户端返回响应。</p><p><strong>文档</strong>：<a href="https://docs.nestjs.cn/8/controllers" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/controllers</a></p><h3 id="提供者-providers-service" tabindex="-1">提供者 Providers(Service) <a class="header-anchor" href="#提供者-providers-service" aria-label="Permalink to &quot;提供者 Providers(Service)&quot;">​</a></h3><p>许多基本的 Nest 类可能被视为 provider - service, repository, factory, helper 等等。 他们都可以通过 constructor 注入依赖关系。</p><p>Providers 是 Nest 的一个基本概念：是一个用 @Injectable() 装饰器注释的类。</p><p>相关文件</p><ul><li>cat.service.ts</li><li>cat/interfaces/cat.interface.ts <ul><li>interface：接口约束</li></ul></li><li>cat/dto/create-cat.dto <ul><li>dot：前端传来的数据校验</li></ul></li></ul><h3 id="模块-modules" tabindex="-1">模块 Modules <a class="header-anchor" href="#模块-modules" aria-label="Permalink to &quot;模块 Modules&quot;">​</a></h3><p>模块是具有 @Module() 装饰器的类</p><h4 id="module-装饰器提供了元数据-nest-用它来组织应用程序结构" tabindex="-1">@Module({}) 装饰器提供了元数据，Nest 用它来组织应用程序结构 <a class="header-anchor" href="#module-装饰器提供了元数据-nest-用它来组织应用程序结构" aria-label="Permalink to &quot;@Module({}) 装饰器提供了元数据，Nest 用它来组织应用程序结构&quot;">​</a></h4><ul><li>providers <ul><li>由 Nest 注入器实例化的提供者，并且可以至少在整个模块中共享</li></ul></li><li>controllers <ul><li>必须创建的一组控制器</li></ul></li><li>imports <ul><li>导入模块的列表，这些模块导出了此模块中所需提供者</li></ul></li><li>exports <ul><li>由本模块提供并应在其他模块中可用的提供者的子集。</li></ul></li></ul><h4 id="模块章节" tabindex="-1">模块章节 <a class="header-anchor" href="#模块章节" aria-label="Permalink to &quot;模块章节&quot;">​</a></h4><h5 id="功能模块" tabindex="-1">功能模块 <a class="header-anchor" href="#功能模块" aria-label="Permalink to &quot;功能模块&quot;">​</a></h5><p>CatsController 和 CatsService</p><p>属于同一个应用程序域</p><h6 id="_1-nest-g-module-cats-命令创建模块" tabindex="-1">1.nest g module cats 命令创建模块 <a class="header-anchor" href="#_1-nest-g-module-cats-命令创建模块" aria-label="Permalink to &quot;1.nest g module cats 命令创建模块&quot;">​</a></h6><p>cats/cats.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./cats.controller&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CatsService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./cats.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CatsModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="_2-将这个模块导入根模块-applicationmodule" tabindex="-1">2.将这个模块导入根模块 (ApplicationModule) <a class="header-anchor" href="#_2-将这个模块导入根模块-applicationmodule" aria-label="Permalink to &quot;2.将这个模块导入根模块 (ApplicationModule)&quot;">​</a></h6><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CatsModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./cats/cats.module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ApplicationModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h6 id="_3-功能模块的目录结构" tabindex="-1">3.功能模块的目录结构 <a class="header-anchor" href="#_3-功能模块的目录结构" aria-label="Permalink to &quot;3.功能模块的目录结构&quot;">​</a></h6><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">src</span></span>
<span class="line"><span style="color:#61AFEF;">├──cats</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">    ├──dto</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">    │</span><span style="color:#98C379;">   └──create-cat.dto.ts</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">    ├──interfaces</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">    │</span><span style="color:#98C379;">     └──cat.interface.ts</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">    ├─cats.service.ts</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">    ├─cats.controller.ts</span></span>
<span class="line"><span style="color:#61AFEF;">│</span><span style="color:#98C379;">    └──cats.module.ts</span></span>
<span class="line"><span style="color:#61AFEF;">├──app.module.ts</span></span>
<span class="line"><span style="color:#61AFEF;">└──main.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="共享模块" tabindex="-1">共享模块 <a class="header-anchor" href="#共享模块" aria-label="Permalink to &quot;共享模块&quot;">​</a></h5><p>在几个模块之间共享 CatsService 实例 需要把 CatsService 放到 exports 数组中</p><p>cats.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./cats.controller&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CatsService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./cats.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 共享模块</span></span>
<span class="line"><span style="color:#E06C75;">	exports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CatsModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>每个导入 CatsModule 的模块都可以访问 CatsService ，并且它们将共享相同的 CatsService 实例。</p><h5 id="模块导出" tabindex="-1">模块导出 <a class="header-anchor" href="#模块导出" aria-label="Permalink to &quot;模块导出&quot;">​</a></h5><p>模块可以导出他们的内部提供者。 而且，他们可以再导出自己导入的模块。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CommonModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	exports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CommonModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CoreModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="依赖注入" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入" aria-label="Permalink to &quot;依赖注入&quot;">​</a></h5><p>提供者也可以注入到模块(类)中（例如，用于配置目的）：</p><p>注入 cats.module.ts 模块</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./cats.controller&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CatsService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./cats.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CatsModule</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> catsService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">CatsService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>但是，由于循环依赖性，模块类不能注入到提供者中。</p><h5 id="全局模块" tabindex="-1">全局模块 <a class="header-anchor" href="#全局模块" aria-label="Permalink to &quot;全局模块&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Global</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./cats.controller&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CatsService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./cats.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  @Global 装饰器使模块成为全局作用域</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Global</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">	exports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CatsModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>全局模块应该只注册一次，最好由根或核心模块注册。</p><p>CatsService 组件将无处不在，而想要使用 CatsService 的模块则不需要在 imports 数组中导入 CatsModule。</p><p>使一切全局化并不是一个好的解决方案。 全局模块可用于减少必要模板文件的数量。 imports 数组仍然是使模块 API 透明的最佳方式。</p><h5 id="动态模块" tabindex="-1">动态模块 <a class="header-anchor" href="#动态模块" aria-label="Permalink to &quot;动态模块&quot;">​</a></h5><p>Nest 模块系统包括一个称为动态模块的强大功能</p><h6 id="_1-动态模块定义的示例-databasemodule" tabindex="-1">1.动态模块定义的示例 DatabaseModule <a class="header-anchor" href="#_1-动态模块定义的示例-databasemodule" aria-label="Permalink to &quot;1.动态模块定义的示例 DatabaseModule&quot;">​</a></h6><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">DynamicModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createDatabaseProviders</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./database.providers&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Connection</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./connection.provider&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">Connection</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> DatabaseModule</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//  forRoot() 可以同步或异步（Promise）返回动态模块。</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#61AFEF;"> forRoot</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">entities</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [], </span><span style="color:#E06C75;font-style:italic;">options</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">DynamicModule</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> providers</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createDatabaseProviders</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">entities</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			global</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 全局范围内注册动态模块</span></span>
<span class="line"><span style="color:#E06C75;">			module</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">DatabaseModule</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//  模块名字</span></span>
<span class="line"><span style="color:#E06C75;">			providers</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">providers</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			exports</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">providers</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h6 id="_2-使用-databasemodule-动态模块" tabindex="-1">2.使用 DatabaseModule 动态模块 <a class="header-anchor" href="#_2-使用-databasemodule-动态模块" aria-label="Permalink to &quot;2.使用 DatabaseModule 动态模块&quot;">​</a></h6><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">DatabaseModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./database/database.module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./users/entities/user.entity&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">DatabaseModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">])],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//  依次重新导出动态模块</span></span>
<span class="line"><span style="color:#E06C75;">	exports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">DatabaseModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="中间件-middleware" tabindex="-1">中间件 Middleware <a class="header-anchor" href="#中间件-middleware" aria-label="Permalink to &quot;中间件 Middleware&quot;">​</a></h3><h4 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h4><ul><li>中间件是在 路由处理程序 之前 调用的函数</li><li>中间件函数可以访问请求和响应对象，以及应用程序请求响应周期中的 next() 中间件函数</li><li>next() 中间件函数通常由名为 next 的变量表示</li></ul><h4 id="中间件函数可以执行以下任务" tabindex="-1">中间件函数可以执行以下任务 <a class="header-anchor" href="#中间件函数可以执行以下任务" aria-label="Permalink to &quot;中间件函数可以执行以下任务&quot;">​</a></h4><ul><li>执行任何代码。</li><li>对请求和响应对象进行更改。</li><li>结束请求-响应周期。</li><li>调用堆栈中的下一个中间件函数。</li><li>如果当前的中间件函数没有结束请求-响应周期, 它必须调用 next() 将控制传递给下一个中间件函数。否则, 请求将被挂起。</li></ul><h4 id="中间件使用" tabindex="-1">中间件使用 <a class="header-anchor" href="#中间件使用" aria-label="Permalink to &quot;中间件使用&quot;">​</a></h4><h5 id="依赖注入中间件" tabindex="-1">依赖注入中间件 <a class="header-anchor" href="#依赖注入中间件" aria-label="Permalink to &quot;依赖注入中间件&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">NestMiddleware</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> LoggerMiddleware</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> NestMiddleware</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> void</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Request...\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="应用中间件" tabindex="-1">应用中间件 <a class="header-anchor" href="#应用中间件" aria-label="Permalink to &quot;应用中间件&quot;">​</a></h5><p>应用例子</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">NestModule</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">MiddlewareConsumer</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">LoggerMiddleware</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./common/middleware/logger.middleware&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">CatsModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./cats/cats.module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">CatsModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> NestModule</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	configure</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">consumer</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">MiddlewareConsumer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		consumer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">LoggerMiddleware</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cats&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>给路由添加</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">consumer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">LoggerMiddleware</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cats&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>给路由指定 id 参数添加</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">consumer</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">LoggerMiddleware</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">forRoutes</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cats:id&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RequestMethod</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">GET</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>给路由指定 url 地址方法添加</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">consumer</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">LoggerMiddleware</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">forRoutes</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cats/say&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RequestMethod</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">GET</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="路由通配符" tabindex="-1">路由通配符 <a class="header-anchor" href="#路由通配符" aria-label="Permalink to &quot;路由通配符&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">forRoutes</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ab*cd&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RequestMethod</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ALL</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="中间件消费者" tabindex="-1">中间件消费者 <a class="header-anchor" href="#中间件消费者" aria-label="Permalink to &quot;中间件消费者&quot;">​</a></h5><p>给控制器添加中间件</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">consumer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">LoggerMiddleware</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>.exclude() 方法排除路由</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">consumer</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">LoggerMiddleware</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">exclude</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cats&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RequestMethod</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">GET</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cats&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RequestMethod</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">POST</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#98C379;">		&quot;cats/(.*)&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">forRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>可以采用一个字符串，多个字符串或一个 RouteInfo 对象来标识要排除的路由</p><p>path-to-regexp 包支持通配符参数。</p><h5 id="函数式中间件" tabindex="-1">函数式中间件 <a class="header-anchor" href="#函数式中间件" aria-label="Permalink to &quot;函数式中间件&quot;">​</a></h5><p>logger.middleware.ts 文件</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  logger.middleware.ts 文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> logger</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Request...\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在 AppModule (app.module.ts)中使用它</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">consumer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">logger</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="多个中间件" tabindex="-1">多个中间件 <a class="header-anchor" href="#多个中间件" aria-label="Permalink to &quot;多个中间件&quot;">​</a></h5><p>在 apply() 方法内用逗号分隔多个中间件</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">consumer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">cors</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">helmet</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">logger</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forRoutes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">CatsController</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="全局使用中间件" tabindex="-1">全局使用中间件 <a class="header-anchor" href="#全局使用中间件" aria-label="Permalink to &quot;全局使用中间件&quot;">​</a></h5><p>一次性将中间件绑定到每个注册路由</p><p>main.ts 里使用 INestApplication 实例提供的 use()方法</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">logger</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="异常过滤器-exception-filters" tabindex="-1">异常过滤器 Exception filters <a class="header-anchor" href="#异常过滤器-exception-filters" aria-label="Permalink to &quot;异常过滤器 Exception filters&quot;">​</a></h3><h4 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h4><ul><li>内置的异常层负责处理整个应用程序中的所有抛出的异常</li><li>当捕获到未处理的异常时，最终用户将收到友好的响应</li></ul><h4 id="异常-json-响应例子" tabindex="-1">异常 JSON 响应例子 <a class="header-anchor" href="#异常-json-响应例子" aria-label="Permalink to &quot;异常 JSON 响应例子&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#98C379;">    &quot;statusCode&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;message&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Internal server error&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h4><h5 id="基础异常类" tabindex="-1">基础异常类 <a class="header-anchor" href="#基础异常类" aria-label="Permalink to &quot;基础异常类&quot;">​</a></h5><p>Nest 提供了一个内置的 HttpException 类，它从 @nestjs/common 包中导入</p><p>控制器抛出异常</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> findAll</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HttpException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Forbidden&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">FORBIDDEN</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>我们在这里使用了 HttpStatus 。它是从 @nestjs/common 包导入的辅助枚举器。</p><p>当客户端调用这个端点时</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#98C379;">    &quot;statusCode&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">403</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &quot;message&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Forbidden&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>HttpException 构造函数</strong>：</p><p>参数</p><ul><li><strong>response 参数</strong>：定义 JSON 响应体。它可以是 string 或 object</li><li><strong>status 参数</strong>：定义 HTTP 状态代码。</li></ul><p>JSON 响应主体包含两个属性</p><ul><li><strong>statusCode</strong>：默认为 status 参数中提供的 HTTP 状态代码</li><li><strong>message</strong>：基于状态的 HTTP 错误的简短描述</li></ul><p>覆盖 JSON 响应主体的消息部分</p><p>在 response 参数中提供一个 string</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> findAll</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HttpException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我是异常消息&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">FORBIDDEN</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>覆盖整个 JSON 响应主体</p><ul><li>在 response 参数中传递一个 object，Nest 将序列化对象，并将其作为 JSON 响应返回。</li><li>第二个构造函数参数-status-是有效的 HTTP 状态代码。 最佳实践是使用从@nestjs/common 导入的 HttpStatus 枚举</li></ul><p>例子</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> findAll</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HttpException</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">    status</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">FORBIDDEN</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    error</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;This is a custom message&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#E5C07B;">HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">FORBIDDEN</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>客户端响应</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;status&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">403</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;error&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;This is a custom message&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="自定义异常" tabindex="-1">自定义异常 <a class="header-anchor" href="#自定义异常" aria-label="Permalink to &quot;自定义异常&quot;">​</a></h5><p>创建自己的异常层次结构</p><p>其中自定义异常继承自 HttpException 基类，使用这种方法，Nest 可以识别您的异常，并自动处理错误响应。</p><p>自定义异常例子</p><p>forbidden.exception.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  forbidden.exception.ts</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ForbiddenException</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> HttpException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Forbidden&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">FORBIDDEN</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>使用</p><p>cats.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// cats.controller.ts</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> findAll</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ForbiddenException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="内置-http-异常" tabindex="-1">内置 HTTP 异常 <a class="header-anchor" href="#内置-http-异常" aria-label="Permalink to &quot;内置 HTTP 异常&quot;">​</a></h5><p>@nestjs/common 包中</p><ul><li>BadRequestException</li><li>UnauthorizedException</li><li>NotFoundException</li><li>ForbiddenException</li><li>NotAcceptableException</li><li>RequestTimeoutException</li><li>ConflictException</li><li>GoneException</li><li>PayloadTooLargeException</li><li>UnsupportedMediaTypeException</li><li>UnprocessableException</li><li>InternalServerErrorException</li><li>NotImplementedException</li><li>BadGatewayException</li><li>ServiceUnavailableException</li><li>GatewayTimeoutException</li></ul><h5 id="异常过滤器" tabindex="-1">异常过滤器 <a class="header-anchor" href="#异常过滤器" aria-label="Permalink to &quot;异常过滤器&quot;">​</a></h5><h6 id="用处" tabindex="-1">用处 <a class="header-anchor" href="#用处" aria-label="Permalink to &quot;用处&quot;">​</a></h6><ul><li>基于某些动态因素添加日志记录或使用不同的 JSON 模式</li><li>控制精确的控制流以及将响应的内容发送回客户端</li></ul><h6 id="创建过滤异常处理器" tabindex="-1">创建过滤异常处理器 <a class="header-anchor" href="#创建过滤异常处理器" aria-label="Permalink to &quot;创建过滤异常处理器&quot;">​</a></h6><p>http-exception.filter.ts</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#98C379;"> g</span><span style="color:#98C379;"> f</span><span style="color:#98C379;"> http-exception</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>异常过滤器创建步骤</p><p>创建一个异常过滤器，它负责捕获作为 HttpException 类实例的异常，并为它们设置自定义响应逻辑。</p><p>步骤和用法</p><ul><li>1.我们需要访问底层平台 Request 和 Response。</li><li>2.我们将访问 Request 对象，以便提取原始 url 并将其包含在日志信息中。</li><li>3.我们将使用 Response.json()方法，使用 Response 对象直接控制发送的响应。</li></ul><p>异常过滤器例子</p><p>http-exception.filter.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	ExceptionFilter</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Catch</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	ArgumentsHost</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	HttpException</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Request</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Response</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;express&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">HttpException</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HttpExceptionFilter</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> ExceptionFilter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">exception</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HttpException</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">host</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ArgumentsHost</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> host</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">switchToHttp</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getResponse</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Response</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> request</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Request</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> status</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> exception</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStatus</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			statusCode</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			timestamp</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toISOString</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">			path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>所有异常过滤器都应该实现通用的 <code>ExceptionFilter&lt;T&gt;</code> 接口。</p><p>它需要你使用有效签名提供 catch(exception: T, host: ArgumentsHost)方法。T 表示异常的类型。</p><p>@Catch() 装饰器绑定所需的元数据到异常过滤器上。它告诉 Nest 这个特定的过滤器正在寻找 HttpException 而不是其他的。</p><p>在实践中，@Catch() 可以传递多个参数，所以你可以通过逗号分隔来为多个类型的异常设置过滤器。</p><h5 id="参数主机" tabindex="-1">参数主机 <a class="header-anchor" href="#参数主机" aria-label="Permalink to &quot;参数主机&quot;">​</a></h5><p>文档：<a href="https://docs.nestjs.cn/8/exceptionfilters?id=%e5%8f%82%e6%95%b0%e4%b8%bb%e6%9c%ba" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/exceptionfilters?id=参数主机</a></p><p>catch(exception: T, host: ArgumentsHost) 方法</p><ul><li><strong>exception 参数</strong>：是当前正在处理的异常对象</li><li><strong>host 参数</strong><ul><li>是一个 ArgumentsHost 对象 <ul><li>ArgumentsHost 是一个功能强大的实用程序对象</li><li>在上下文章节中进一步进行研究</li><li>文档：<a href="https://docs.nestjs.cn/8/fundamentals?id=%e5%ba%94%e7%94%a8%e4%b8%8a%e4%b8%8b%e6%96%87" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/fundamentals?id=应用上下文</a></li></ul></li><li>在异常过滤的例子中 <ul><li>使用它来获取对 Request 和 Response 对象的引用，这些对象被传递给原始请求处理程序（在异常发生的控制器中）</li><li>使用了一些辅助方法 ArgumentsHost 来获取所需的 Request 和 Response 对象。</li></ul></li></ul></li></ul><h5 id="绑定过滤器" tabindex="-1">绑定过滤器 <a class="header-anchor" href="#绑定过滤器" aria-label="Permalink to &quot;绑定过滤器&quot;">​</a></h5><h6 id="_1-将-httpexceptionfilter-绑定到-catscontroller-的-create-方法上" tabindex="-1">1.将 HttpExceptionFilter 绑定到 CatsController 的 create() 方法上 <a class="header-anchor" href="#_1-将-httpexceptionfilter-绑定到-catscontroller-的-create-方法上" aria-label="Permalink to &quot;1.将 HttpExceptionFilter 绑定到 CatsController 的 create() 方法上&quot;">​</a></h6><p>cats.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  cats.controller.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UseFilters</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> HttpExceptionFilter</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateCatDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ForbiddenException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>创建了 HttpExceptionFilter 的实例</p><ul><li>@UseFilters() 装饰器：需要从 @nestjs/common 包导入</li><li>@UseFilters() 装饰器：和 @Catch()装饰器类似，它可以使用单个过滤器实例，也可以使用逗号分隔的过滤器实例列表</li></ul><h6 id="_2-传递类-让框架承担实例化责任并启用依赖注入" tabindex="-1">2.传递类:让框架承担实例化责任并启用依赖注入 <a class="header-anchor" href="#_2-传递类-让框架承担实例化责任并启用依赖注入" aria-label="Permalink to &quot;2.传递类:让框架承担实例化责任并启用依赖注入&quot;">​</a></h6><p>cats.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  cats.controller.ts</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UseFilters</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">HttpExceptionFilter</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateCatDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ForbiddenException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>尽可能使用类而不是实例。由于 Nest 可以轻松地在整个模块中重复使用同一类的实例，因此可以减少内存使用。</p><p>HttpExceptionFilter 仅应用于单个 create() 路由处理程序，使其成为方法范围的</p><h6 id="异常过滤器的作用域可以划分为不同的级别" tabindex="-1">异常过滤器的作用域可以划分为不同的级别 <a class="header-anchor" href="#异常过滤器的作用域可以划分为不同的级别" aria-label="Permalink to &quot;异常过滤器的作用域可以划分为不同的级别&quot;">​</a></h6><ul><li>方法范围</li><li>控制器范围或全局范围</li></ul><h6 id="_3-将过滤器设置为控制器作用域" tabindex="-1">3.将过滤器设置为控制器作用域 <a class="header-anchor" href="#_3-将过滤器设置为控制器作用域" aria-label="Permalink to &quot;3.将过滤器设置为控制器作用域&quot;">​</a></h6><p>cats.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  cats.controller.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UseFilters</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> HttpExceptionFilter</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CatsController</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此结构为 CatsController 中的每个路由处理程序设置 HttpExceptionFilter。</p><h6 id="_4-创建一个全局范围的过滤器" tabindex="-1">4.创建一个全局范围的过滤器 <a class="header-anchor" href="#_4-创建一个全局范围的过滤器" aria-label="Permalink to &quot;4.创建一个全局范围的过滤器&quot;">​</a></h6><p>main.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  main.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">useGlobalFilters</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> HttpExceptionFilter</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>该 useGlobalFilters() 方法不会为网关和混合应用程序设置过滤器。</p><p>全局过滤器用于整个应用程序、每个控制器和每个路由处理程序</p><p>任何模块外部注册的全局过滤器（使用上面示例中的 useGlobalFilters()）不能注入依赖</p><p><strong>解决方法</strong>：</p><p>可以注册一个全局范围的过滤器直接为任何模块设置过滤器</p><p>app.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  app.module.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">APP_FILTER</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			provide</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">APP_FILTER</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			useClass</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">HttpExceptionFilter</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>当使用此方法对过滤器执行依赖注入时，请注意，无论采用哪种结构的模块，过滤器实际上都是全局的</p><p><strong>应该在哪里做？</strong></p><p>选择定义了过滤器（以上示例中为 HttpExceptionFilter）的模块。 同样，useClass 不是处理自定义提供程序注册的唯一方法。</p><p>了解更多：自定义提供者：<a href="https://docs.nestjs.cn/8/fundamentals?id=%e8%87%aa%e5%ae%9a%e4%b9%89%e6%8f%90%e4%be%9b%e8%80%85" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/fundamentals?id=自定义提供者</a></p><p>您可以根据需要添加任意数量的过滤器;只需将每个组件添加到 providers（提供者）数组。</p><h5 id="捕获异常" tabindex="-1">捕获异常 <a class="header-anchor" href="#捕获异常" aria-label="Permalink to &quot;捕获异常&quot;">​</a></h5><p>捕获每一个未处理的异常</p><p>any-exception.filter.ts</p><p>将 @Catch() 装饰器的参数列表设为空</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	ExceptionFilter</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Catch</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	ArgumentsHost</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	HttpException</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	HttpStatus</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Catch</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AllExceptionsFilter</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> ExceptionFilter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">exception</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">host</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ArgumentsHost</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> host</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">switchToHttp</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getResponse</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> request</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> status</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E06C75;">			exception</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> HttpException</span></span>
<span class="line"><span style="color:#C678DD;">				?</span><span style="color:#E5C07B;"> exception</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStatus</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">				:</span><span style="color:#E5C07B;"> HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">INTERNAL_SERVER_ERROR</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			statusCode</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			timestamp</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toISOString</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">			path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>在上面的示例中，过滤器将捕获抛出的每个异常，而不管其类型(类)如何。</p><h5 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h5><p>重用已经实现的核心异常过滤器，并基于某些因素重写行为</p><h6 id="继承例子" tabindex="-1">继承例子 <a class="header-anchor" href="#继承例子" aria-label="Permalink to &quot;继承例子&quot;">​</a></h6><p>为了将异常处理委托给基础过滤器，需要继承 BaseExceptionFilter 并调用继承的 catch() 方法。</p><p>all-exceptions.filter.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// all-exceptions.filter.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Catch</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ArgumentsHost</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">BaseExceptionFilter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Catch</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AllExceptionsFilter</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> BaseExceptionFilter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">exception</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">host</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ArgumentsHost</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">		super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">exception</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">host</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>继承自基础类的过滤器必须由框架本身实例化（不要使用 new 关键字手动创建实例）</p></blockquote><h6 id="全局过滤器" tabindex="-1">全局过滤器 <a class="header-anchor" href="#全局过滤器" aria-label="Permalink to &quot;全局过滤器&quot;">​</a></h6><p>全局过滤器可以扩展基本过滤器：2 种方法</p><p><strong>1.通过注入 HttpServer 来使用继承自基础类</strong>：</p><p>main.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// main.ts</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">httpAdapter</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">HttpAdapterHost</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">useGlobalFilters</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> AllExceptionsFilter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">httpAdapter</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>2.使用 APP_FILTER token 绑定过滤器的方法</strong>：</p><p>文档：<a href="https://docs.nestjs.cn/8/exceptionfilters?id=%e7%bb%91%e5%ae%9a%e8%bf%87%e6%bb%a4%e5%99%a8" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/exceptionfilters?id=绑定过滤器</a></p><p>app.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// app.module.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">APP_FILTER</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			provide</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">APP_FILTER</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			useClass</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">HttpExceptionFilter</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="过滤器的使用" tabindex="-1">过滤器的使用 <a class="header-anchor" href="#过滤器的使用" aria-label="Permalink to &quot;过滤器的使用&quot;">​</a></h4><h5 id="common-filters-异常过滤器目录" tabindex="-1"><code>common/filters</code> 异常过滤器目录 <a class="header-anchor" href="#common-filters-异常过滤器目录" aria-label="Permalink to &quot;\`common/filters\` 异常过滤器目录&quot;">​</a></h5><p>http-exception.filter.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	ArgumentsHost</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Catch</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	ExceptionFilter</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	HttpException</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">HttpException</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> HttpExceptionFilter</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> ExceptionFilter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HttpException</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">	catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">exception</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HttpException</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">host</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ArgumentsHost</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> host</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">switchToHttp</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getResponse</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> request</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> status</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> exception</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStatus</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">exception</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> exceptionRes</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> exception</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getResponse</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">message</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> exceptionRes</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			status</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			timestamp</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toISOString</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">			path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			error</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			message</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h5 id="模块使用例子-局部过滤器" tabindex="-1">模块使用例子-局部过滤器 <a class="header-anchor" href="#模块使用例子-局部过滤器" aria-label="Permalink to &quot;模块使用例子-局部过滤器&quot;">​</a></h5><p>exception/exception.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	Controller</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Get</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Post</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Patch</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Query</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Delete</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Body</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Param</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Headers</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	UseFilters</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	HttpException</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	HttpStatus</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	ParseIntPipe</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApiTags</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ApiBearerAuth</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ApiBody</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ApiParam</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/swagger&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ExceptionService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./exception.service&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">HttpExceptionFilter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;../../common/filters/http-exception.filter&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">ApiBearerAuth</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">ApiTags</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;exception&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// @UseFilters(new HttpExceptionFilter())</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/exception&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ExceptionController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> exceptionService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ExceptionService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 查询</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">	fetch</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Query</span><span style="color:#ABB2BF;">() { </span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;"> }, @</span><span style="color:#61AFEF;">Headers</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;token&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;font-style:italic;">token</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HttpException</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span></span>
<span class="line"><span style="color:#E06C75;">					status</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">BAD_REQUEST</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求参数id 必传&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					error</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;id is required&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#E5C07B;">				HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">BAD_REQUEST</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exceptionService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 创建</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiBody</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;填写更新内容&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#61AFEF;">	save</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() { </span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;"> }): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exceptionService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 更新</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Patch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:id&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiParam</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">ApiBody</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请输入message&quot;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 有时，我们希望参数的类型为数字，则可以通过管道进行转换</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// !现nest自带部分管道</span></span>
<span class="line"><span style="color:#61AFEF;">	update</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Param</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ParseIntPipe</span><span style="color:#ABB2BF;">()) </span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, @</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() { </span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;"> }): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exceptionService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 删除</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">Delete</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#61AFEF;">	remove</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Query</span><span style="color:#ABB2BF;">() { </span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;"> }): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exceptionService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> HttpException</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			status</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">BAD_REQUEST</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求参数id 必传&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			error</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;id is required&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E5C07B;">		HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">BAD_REQUEST</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div><p>控制器上方使用</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">HttpExceptionFilter</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;../../common/filters/http-exception.filter&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UseFilters</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> HttpExceptionFilter</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/exception&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>全局过滤器 man.ts：端口监听代码上方</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">useGlobalFilters</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> HttpExceptionFilter</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">PORTS</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0.0.0.0&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="管道-pipes" tabindex="-1">管道 Pipes <a class="header-anchor" href="#管道-pipes" aria-label="Permalink to &quot;管道 Pipes&quot;">​</a></h3><h4 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h4><ul><li>管道是具有 @Injectable() 装饰器的类。</li><li>管道应实现 PipeTransform 接口</li></ul><h4 id="两个类型" tabindex="-1">两个类型 <a class="header-anchor" href="#两个类型" aria-label="Permalink to &quot;两个类型&quot;">​</a></h4><h5 id="两个作用" tabindex="-1">两个作用 <a class="header-anchor" href="#两个作用" aria-label="Permalink to &quot;两个作用&quot;">​</a></h5><ul><li>转换：管道将输入数据转换为所需的数据输出</li><li>验证：对输入数据进行验证，如果验证成功继续传递; 验证失败则抛出异常;</li></ul><h5 id="解释" tabindex="-1">解释 <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;解释&quot;">​</a></h5><p>在这两种情况下, 管道 参数(arguments) 会由 控制器(controllers)的路由处理程序 进行处理。</p><p>Nest 会在调用这个方法之前插入一个管道，管道会先拦截方法的调用参数,进行转换或是验证处理，然后用转换好或是验证好的参数调用原方法。</p><blockquote><p>管道在异常区域内运行。这意味着当抛出异常时，它们由核心异常处理程序和应用于当前上下文的 异常过滤器 处理。当在 Pipe 中发生异常，controller 不会继续执行任何方法。</p></blockquote><h4 id="管道" tabindex="-1">管道 <a class="header-anchor" href="#管道" aria-label="Permalink to &quot;管道&quot;">​</a></h4><h5 id="内置管道-nestjs-common-包中导出" tabindex="-1">内置管道--@nestjs/common 包中导出 <a class="header-anchor" href="#内置管道-nestjs-common-包中导出" aria-label="Permalink to &quot;内置管道--@nestjs/common 包中导出&quot;">​</a></h5><h6 id="validationpipe" tabindex="-1">ValidationPipe <a class="header-anchor" href="#validationpipe" aria-label="Permalink to &quot;ValidationPipe&quot;">​</a></h6><p>只接受一个值并立即返回相同的值，其行为类似于一个标识函数</p><p>validate.pipe.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  validate.pipe.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">PipeTransform</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ArgumentMetadata</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ValidationPipe</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> PipeTransform</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">metadata</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ArgumentMetadata</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong><code>PipeTransform&lt;T, R&gt;</code></strong>：</p><ul><li>是一个通用接口</li><li>T 表示 value 的类型</li><li>R 表示 transform() 方法的返回类型。</li></ul><p><strong>每个管道必须提供 transform() 方法</strong>：</p><p>这个方法有两个参数：</p><ul><li><p>value：当前处理的参数</p></li><li><p>metadata：元数据。元数据对象包含一些属性：</p><ul><li><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> ArgumentMetadata</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;body&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;query&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;param&quot;</span><span style="color:#ABB2BF;"> | </span><span style="color:#98C379;">&quot;custom&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	metatype</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>属性参数和描述：</p><ul><li>type：告诉我们该属性是一个 body @Body()，query @Query()，param @Param() 还是自定义参数。阅读更多：<a href="https://docs.nestjs.cn/customdecorators" target="_blank" rel="noreferrer">https://docs.nestjs.cn/customdecorators</a></li><li>metatype：属性的元类型，例如 String。 如果在函数签名中省略类型声明，或者使用原生 JavaScript，则为 undefined。</li><li>data：传递给装饰器的字符串，例如 @Body(&#39;string&#39;)。 如果您将括号留空，则为 undefined。</li></ul></li></ul></li></ul><p>ValidationPipe 需要同时安装 class-validator 和 class-transformer 包</p><h6 id="parseintpipe" tabindex="-1">ParseIntPipe <a class="header-anchor" href="#parseintpipe" aria-label="Permalink to &quot;ParseIntPipe&quot;">​</a></h6><h6 id="parseboolpipe" tabindex="-1">ParseBoolPipe <a class="header-anchor" href="#parseboolpipe" aria-label="Permalink to &quot;ParseBoolPipe&quot;">​</a></h6><h6 id="parsearraypipe" tabindex="-1">ParseArrayPipe <a class="header-anchor" href="#parsearraypipe" aria-label="Permalink to &quot;ParseArrayPipe&quot;">​</a></h6><h6 id="parseuuidpipe-分析验证字符串是否是-uuid" tabindex="-1">ParseUUIDPipe：分析验证字符串是否是 UUID <a class="header-anchor" href="#parseuuidpipe-分析验证字符串是否是-uuid" aria-label="Permalink to &quot;ParseUUIDPipe：分析验证字符串是否是 UUID&quot;">​</a></h6><h6 id="defaultvaluepipe" tabindex="-1">DefaultValuePipe <a class="header-anchor" href="#defaultvaluepipe" aria-label="Permalink to &quot;DefaultValuePipe&quot;">​</a></h6><h6 id="parseenumpipe" tabindex="-1">ParseEnumPipe <a class="header-anchor" href="#parseenumpipe" aria-label="Permalink to &quot;ParseEnumPipe&quot;">​</a></h6><h6 id="parsefloatpipe" tabindex="-1">ParseFloatPipe <a class="header-anchor" href="#parsefloatpipe" aria-label="Permalink to &quot;ParseFloatPipe&quot;">​</a></h6><h5 id="测试用例" tabindex="-1">测试用例 <a class="header-anchor" href="#测试用例" aria-label="Permalink to &quot;测试用例&quot;">​</a></h5><p>CatsController 的 create() 方法：</p><p>cats.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  cats.controller.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateCatDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">catsService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>CreateCatDto 参数. 类型为 CreateCatDto:</p><p>create-cat.dto.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  create-cat.dto.ts</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CreateCatDto</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	breed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>要确保 create 方法能正确执行，所以必须验证 CreateCatDto 里的三个属性</p><h5 id="对象结构验证" tabindex="-1">对象结构验证 <a class="header-anchor" href="#对象结构验证" aria-label="Permalink to &quot;对象结构验证&quot;">​</a></h5><p>使用基于结构的验证 Joi：<a href="https://github.com/sideway/joi" target="_blank" rel="noreferrer">https://github.com/sideway/joi</a></p><p>Joi 库是允许您使用一个可读的 API 以非常简单的方式创建 schema</p><h6 id="_1-安装依赖" tabindex="-1">1.安装依赖 <a class="header-anchor" href="#_1-安装依赖" aria-label="Permalink to &quot;1.安装依赖&quot;">​</a></h6><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @hapi/joi</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save-dev</span><span style="color:#98C379;"> @types/hapi__joi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h6 id="_2-使用" tabindex="-1">2.使用 <a class="header-anchor" href="#_2-使用" aria-label="Permalink to &quot;2.使用&quot;">​</a></h6><p>创建一个 class，在构造函数中传递 schema 参数. 然后我们使用 schema.validate() 方法验证</p><p>例子</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	PipeTransform</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Injectable</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	ArgumentMetadata</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	BadRequestException</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ObjectSchema</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@hapi/joi&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> JoiValidationPipe</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> PipeTransform</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#E06C75;font-style:italic;"> schema</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ObjectSchema</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">metadata</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ArgumentMetadata</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">schema</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BadRequestException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Validation failed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="绑定管道" tabindex="-1">绑定管道 <a class="header-anchor" href="#绑定管道" aria-label="Permalink to &quot;绑定管道&quot;">​</a></h5><p>使用 @UsePipes() 装饰器并创建一个管道实例，并将其传递给 Joi 验证</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UsePipes</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> JoiValidationPipe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createCatSchema</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateCatDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">catsService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="类验证器" tabindex="-1">类验证器 <a class="header-anchor" href="#类验证器" aria-label="Permalink to &quot;类验证器&quot;">​</a></h5><p><strong>class-transformerTypeScript 类验证器</strong>：</p><p>Nest 与 class-validator 配合：<a href="https://github.com/typestack/class-validator" target="_blank" rel="noreferrer">https://github.com/typestack/class-validator</a></p><p>Nest 的 Pipe 功能相结合使用时，可以通过访问 metatype 信息做很多事情</p><h6 id="_1-安装依赖-class-transformer" tabindex="-1">1.安装依赖 class-transformer <a class="header-anchor" href="#_1-安装依赖-class-transformer" aria-label="Permalink to &quot;1.安装依赖 class-transformer&quot;">​</a></h6><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> class-validator</span><span style="color:#98C379;"> class-transformer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h6 id="_2-向-createcatdto-类添加一些装饰器" tabindex="-1">2.向 CreateCatDto 类添加一些装饰器 <a class="header-anchor" href="#_2-向-createcatdto-类添加一些装饰器" aria-label="Permalink to &quot;2.向 CreateCatDto 类添加一些装饰器&quot;">​</a></h6><p>create-cat.dto.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  create-cat.dto.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">IsString</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">IsInt</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;class-validator&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CreateCatDto</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">IsString</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">IsInt</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#61AFEF;">IsString</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">	breed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>装饰器使用信息：<a href="https://github.com/typestack/class-validator#usage" target="_blank" rel="noreferrer">https://github.com/typestack/class-validator#usage</a></p><h6 id="_3-创建一个-validationpipe-类" tabindex="-1">3.创建一个 ValidationPipe 类 <a class="header-anchor" href="#_3-创建一个-validationpipe-类" aria-label="Permalink to &quot;3.创建一个 ValidationPipe 类&quot;">​</a></h6><p>validate.pipe.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	PipeTransform</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Injectable</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	ArgumentMetadata</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	BadRequestException</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">validate</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;class-validator&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">plainToClass</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;class-transformer&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ValidationPipe</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> PipeTransform</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//  transform() 函数是 异步  Nest 支持同步和异步管道</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//  用解构赋值（从 ArgumentMetadata 中提取参数）</span></span>
<span class="line"><span style="color:#C678DD;">	async</span><span style="color:#61AFEF;"> transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">any</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;font-style:italic;">metatype</span><span style="color:#ABB2BF;"> }: </span><span style="color:#E5C07B;">ArgumentMetadata</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//  toValidate() 方法: 当验证类型不是 JavaScript 的数据类型时</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//  跳过验证</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">metatype</span><span style="color:#56B6C2;"> ||</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toValidate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">metatype</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//  一个请求中的 body 数据是不包含类型信息的，Class-validator 需要使用前面定义过的 DTO，就需要做一个类型转换。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//  plainToClass() 方法转换 JavaScript 的参数为可验证的类型对象</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> object</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> plainToClass</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">metatype</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//  要么返回值不变，要么抛出异常</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> errors</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> validate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">object</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">errors</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BadRequestException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Validation failed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	private</span><span style="color:#61AFEF;"> toValidate</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">metatype</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#61AFEF;"> types</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">[] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Boolean</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Array</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Object</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">types</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">metatype</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h6 id="_4-设置-validationpipe" tabindex="-1">4.设置 ValidationPipe <a class="header-anchor" href="#_4-设置-validationpipe" aria-label="Permalink to &quot;4.设置 ValidationPipe&quot;">​</a></h6><p>管道，与异常过滤器相同，它们可以是方法范围的、控制器范围的和全局范围的。</p><p>1.管道可以是参数范围的。我们可以直接将管道实例绑定到路由参数装饰器，例如@Body()。当验证逻辑仅涉及一个指定的参数时，参数范围的管道非常有用</p><p>cats.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  cats.controller.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ValidationPipe</span><span style="color:#ABB2BF;">()) </span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateCatDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">catsService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>2.要在方法级别设置管道，您需要使用 UsePipes() 装饰器。</p><p>cats.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  cats.controller.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UsePipes</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ValidationPipe</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateCatDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">catsService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>@UsePipes() 修饰器是从 @nestjs/common 包中导入的</p><p>3.直接传入类（而不是实例），让框架承担实例化责任，并启用依赖注入。</p><p>cats.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  cats.controller.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UsePipes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ValidationPipe</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateCatDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">catsService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>4.将 ValidationPipe 设置为一个全局作用域的管道，用于整个应用程序中的每个路由处理器。</p><p>main.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  main.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">useGlobalPipes</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ValidationPipe</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在 混合应用中 useGlobalPipes() 方法不会为网关和微服务设置管道, 对于标准(非混合) 微服务应用使用 useGlobalPipes() 全局设置管道。</p><p>混合应用：<a href="https://docs.nestjs.cn/8/faq?id=%e6%b7%b7%e5%90%88%e5%ba%94%e7%94%a8" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/faq?id=混合应用</a></p><h6 id="_5-构造直接为任何模块设置管道" tabindex="-1">5.构造直接为任何模块设置管道 <a class="header-anchor" href="#_5-构造直接为任何模块设置管道" aria-label="Permalink to &quot;5.构造直接为任何模块设置管道&quot;">​</a></h6><p>app.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  app.module.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">APP_PIPE</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			provide</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">APP_PIPE</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			useClass</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ValidationPipe</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>请注意使用上述方式依赖注入时，请牢记无论你采用那种结构模块管道都是全局的.</p><p>使用 ValidationPipe 定义管道 另外，useClass 并不是处理自定义提供者注册的唯一方法</p><ul><li>其他方法：<a href="https://docs.nestjs.cn/8/fundamentals?id=custom-providers" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/fundamentals?id=custom-providers</a></li></ul><h6 id="class-transformer-库-它和-class-validator-库由同一个作者开发-所以他们配合的很好" tabindex="-1">class-transformer 库，它和 class-validator 库由同一个作者开发，所以他们配合的很好 <a class="header-anchor" href="#class-transformer-库-它和-class-validator-库由同一个作者开发-所以他们配合的很好" aria-label="Permalink to &quot;class-transformer 库，它和 class-validator 库由同一个作者开发，所以他们配合的很好&quot;">​</a></h6><ul><li>class-transformer：<a href="https://github.com/typestack/class-transformer" target="_blank" rel="noreferrer">https://github.com/typestack/class-transformer</a></li><li>class-validator：<a href="https://github.com/typestack/class-validator" target="_blank" rel="noreferrer">https://github.com/typestack/class-validator</a></li></ul><h5 id="转换管道" tabindex="-1">转换管道 <a class="header-anchor" href="#转换管道" aria-label="Permalink to &quot;转换管道&quot;">​</a></h5><h6 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h6><ul><li>转换管道被插入在客户端请求和请求处理程序之间用来处理客户端请求。</li><li>将输入数据转换为所需的输出</li></ul><h6 id="在什么时候使用" tabindex="-1">在什么时候使用？ <a class="header-anchor" href="#在什么时候使用" aria-label="Permalink to &quot;在什么时候使用？&quot;">​</a></h6><ul><li>从客户端传来的数据需要经过一些修改（例如字符串转化为整数），然后处理函数才能正确的处理</li><li>有些数据具有默认值，用户不必传递带默认值参数，一旦用户不传就使用默认值。</li></ul><h6 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h6><p>parse-int.pipe.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	PipeTransform</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	Injectable</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	ArgumentMetadata</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	BadRequestException</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ParseIntPipe</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> PipeTransform</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">	transform</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">metadata</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ArgumentMetadata</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> val</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">			throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BadRequestException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Validation failed&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>使用配置管道来处理所参数 id:</p><p>new ParseIntPipe()</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;:id&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> findOne</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Param</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;id&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ParseIntPipe</span><span style="color:#ABB2BF;">()) </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">catsService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findOne</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>按 ID 从数据库中选择一个现有的用户实体：UserByIdPipe</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;:id&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">findOne</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Param</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;id&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">UserByIdPipe</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">userEntity</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">UserEntity</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E06C75;"> userEntity</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>ParseUUIDPipe 管道：</p><p>分析验证字符串是否是 UUID</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;:id&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> findOne</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Param</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;id&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ParseUUIDPipe</span><span style="color:#ABB2BF;">()) </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">catsService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findOne</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>ParseUUIDPipe 会使用 UUID 3,4,5 版本 来解析字符串, 你也可以单独设置需要的版本.</p><h3 id="守卫-guards" tabindex="-1">守卫 Guards <a class="header-anchor" href="#守卫-guards" aria-label="Permalink to &quot;守卫 Guards&quot;">​</a></h3><p>根据运行时出现的某些条件（例如权限，角色，访问控制列表等）来确定给定的请求是否由路由处理程序处理。这通常称为授权。</p><h4 id="守卫-guards-介绍" tabindex="-1">守卫 Guards 介绍 <a class="header-anchor" href="#守卫-guards-介绍" aria-label="Permalink to &quot;守卫 Guards 介绍&quot;">​</a></h4><ul><li>守卫是一个使用 @Injectable() 装饰器的类。</li><li>守卫应该实现 CanActivate 接口。</li><li>守卫在每个中间件之后执行，但在任何拦截器或管道之前执行。</li></ul><h4 id="章节" tabindex="-1">章节 <a class="header-anchor" href="#章节" aria-label="Permalink to &quot;章节&quot;">​</a></h4><h5 id="授权守卫" tabindex="-1">授权守卫 <a class="header-anchor" href="#授权守卫" aria-label="Permalink to &quot;授权守卫&quot;">​</a></h5><p>现在要构建的 AuthGuard 假设用户是经过身份验证的(因此，请求头附加了一个 token)。它将提取和验证 token，并使用提取的信息来确定请求是否可以继续。</p><p>例子</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">CanActivate</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ExecutionContext</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Observable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;rxjs&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  保护如何适应请求/响应周期。</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AuthGuard</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> CanActivate</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	canActivate</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ExecutionContext</span></span>
<span class="line"><span style="color:#ABB2BF;">	): </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">Observable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> request</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">switchToHttp</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> validateRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">request</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>每个守卫必须实现一个 canActivate()函数。此函数应该返回一个布尔值，指示是否允许当前请求。它可以同步或异步地返回响应(通过 Promise 或 Observable)。Nest 使用返回值来控制下一个行为:</p><ul><li>如果返回 true, 将处理用户调用。</li><li>如果返回 false, 则 Nest 将忽略当前处理的请求。</li></ul><h5 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h5><p>ExecutionContext 执行上下文 继承自 ArgumentsHost 。</p><p>ArgumentsHost 是传递给原始处理程序的参数的包装器</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> ExecutionContext</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> ArgumentsHost</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	getClass</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> any</span><span style="color:#ABB2BF;">&gt;(): </span><span style="color:#E5C07B;">Type</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#61AFEF;">	getHandler</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>getHandler()方法返回对将要调用的处理程序的引用</p><p>etClass()方法返回这个特定处理程序所属的 Controller 类的类型</p><p>如果当前处理的请求是 POST 请求，目标是 CatsController 上的 create() 方法，那么 getHandler() 将返回对 create() 方法的引用，而 getClass()将返回一个 CatsControllertype(而不是实例)</p><h5 id="基于角色认证" tabindex="-1">基于角色认证 <a class="header-anchor" href="#基于角色认证" aria-label="Permalink to &quot;基于角色认证&quot;">​</a></h5><p>只允许具有特定角色的用户访问</p><p>roles.guard.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">CanActivate</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ExecutionContext</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Observable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;rxjs&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> RolesGuard</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> CanActivate</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	canActivate</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ExecutionContext</span></span>
<span class="line"><span style="color:#ABB2BF;">	): </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">&gt; | </span><span style="color:#E5C07B;">Observable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="绑定守卫" tabindex="-1">绑定守卫 <a class="header-anchor" href="#绑定守卫" aria-label="Permalink to &quot;绑定守卫&quot;">​</a></h5><p>守卫可以是控制范围的：方法范围或全局范围的</p><h6 id="_1-使用-useguards-装饰器设置一个控制器范围的守卫" tabindex="-1">1.使用 @UseGuards()装饰器设置一个控制器范围的守卫 <a class="header-anchor" href="#_1-使用-useguards-装饰器设置一个控制器范围的守卫" aria-label="Permalink to &quot;1.使用 @UseGuards()装饰器设置一个控制器范围的守卫&quot;">​</a></h6><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 111</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cats&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  传递了 RolesGuard 类型</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UseGuards</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">RolesGuard</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CatsController</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 222</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UseGuards</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// 装饰器需要从 @nestjs/common 包导入。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 333</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cats&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  传递了 RolesGuard 实例</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">UseGuards</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RolesGuard</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CatsController</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h6 id="_2-方法级别设置全局守卫" tabindex="-1">2.方法级别设置全局守卫 <a class="header-anchor" href="#_2-方法级别设置全局守卫" aria-label="Permalink to &quot;2.方法级别设置全局守卫&quot;">​</a></h6><p>为了绑定全局守卫, 我们使用 Nest 应用程序实例的 useGlobalGuards() 方法:</p><p>main.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  main.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">useGlobalGuards</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> RolesGuard</span><span style="color:#ABB2BF;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>对于混合应用程序，useGlobalGuards() 方法不会为网关和微服务设置守卫。对于“标准”(非混合)微服务应用程序，useGlobalGuards()在全局安装守卫。</p><h6 id="_3-从任何模块设置一个守卫" tabindex="-1">3.从任何模块设置一个守卫 <a class="header-anchor" href="#_3-从任何模块设置一个守卫" aria-label="Permalink to &quot;3.从任何模块设置一个守卫&quot;">​</a></h6><p>app.module.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  app.module.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">APP_GUARD</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	providers</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			provide</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">APP_GUARD</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			useClass</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">RolesGuard</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>当使用此方法为守卫程序执行依赖项注入时，请注意，无论使用此构造的模块是什么，守卫程序实际上是全局的。 选择定义守卫的模块在“基于角色认证”的章节 RolesGuard 模块的定义。</p><p>useClass 不是处理自定义 providers 注册的唯一方法。了解更多：<a href="https://docs.nestjs.cn/8/fundamentals?id=%e8%87%aa%e5%ae%9a%e4%b9%89providercustomer-provider" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/fundamentals?id=自定义providercustomer-provider</a></p><h5 id="反射器-装饰器" tabindex="-1">反射器(装饰器) <a class="header-anchor" href="#反射器-装饰器" aria-label="Permalink to &quot;反射器(装饰器)&quot;">​</a></h5><h6 id="自定义元数据" tabindex="-1">自定义元数据 <a class="header-anchor" href="#自定义元数据" aria-label="Permalink to &quot;自定义元数据&quot;">​</a></h6><ul><li>灵活和可重用的方式将角色与路由匹配</li><li>1.Nest 提供了通过 @SetMetadata() 装饰器将定制元数据附加到路由处理程序的能力。</li><li>2.这些元数据提供了我们所缺少的角色数据，而守卫需要这些数据来做出决策</li></ul><h6 id="_1-控制器自定义元数据-setmetadata" tabindex="-1">1.控制器自定义元数据@SetMetadata() <a class="header-anchor" href="#_1-控制器自定义元数据-setmetadata" aria-label="Permalink to &quot;1.控制器自定义元数据@SetMetadata()&quot;">​</a></h6><p>@SetMetadata() 装饰器需要从 @nestjs/common 包导入。</p><p>cats.controller.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  cats.controller.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">SetMetadata</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;roles&#39;</span><span style="color:#ABB2BF;">, [</span><span style="color:#98C379;">&#39;admin&#39;</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateCatDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">catsService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>将 roles 元数据(roles 是一个键，而 [&#39;admin&#39;] 是一个特定的值)附加到 create() 方法</p><h6 id="_2-创建自己的装饰器" tabindex="-1">2.创建自己的装饰器 <a class="header-anchor" href="#_2-创建自己的装饰器" aria-label="Permalink to &quot;2.创建自己的装饰器&quot;">​</a></h6><p>roles.decorator.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  roles.decorator.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">SetMetadata</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> Roles</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">roles</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> SetMetadata</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;roles&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">roles</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h6 id="_3-控制器内使用装饰器" tabindex="-1">3.控制器内使用装饰器 <a class="header-anchor" href="#_3-控制器内使用装饰器" aria-label="Permalink to &quot;3.控制器内使用装饰器&quot;">​</a></h6><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Post</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Roles</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;admin&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> create</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">Body</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">CreateCatDto</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">catsService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">createCatDto</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h6 id="_4-rolesguard-守卫" tabindex="-1">4.RolesGuard 守卫 <a class="header-anchor" href="#_4-rolesguard-守卫" aria-label="Permalink to &quot;4.RolesGuard 守卫&quot;">​</a></h6><p>roles.guard.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">CanActivate</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ExecutionContext</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Reflector</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> RolesGuard</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> CanActivate</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#E06C75;font-style:italic;"> reflector</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Reflector</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	canActivate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ExecutionContext</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> roles</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">reflector</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[]&gt;(</span><span style="color:#98C379;">&quot;roles&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHandler</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">roles</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> request</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">switchToHttp</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//  request.user 包含用户实例和允许的角色</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> matchRoles</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">roles</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">roles</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>当用户尝试在没有足够权限的情况下调用 /cats POST 端点时，Nest 会自动返回以下响应：</p><p>当特权不足的用户请求端点时，Nest 自动返回以下响应：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;statusCode&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">403</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;message&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Forbidden resource&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>返回 false 的守卫会抛出一个 HttpException 异常。如果您想要向最终用户返回不同的错误响应，你应该抛出一个异常。</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> UnauthorizedException</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>由守卫引发的任何异常都将由异常层(全局异常过滤器和应用于当前上下文的任何异常过滤器)处理。</p><h3 id="拦截器-interceptors" tabindex="-1">拦截器 Interceptors <a class="header-anchor" href="#拦截器-interceptors" aria-label="Permalink to &quot;拦截器 Interceptors&quot;">​</a></h3><h4 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h4><ul><li>在函数执行之前/之后绑定额外的逻辑</li><li>转换从函数返回的结果</li><li>转换从函数抛出的异常</li><li>扩展基本函数行为</li><li>根据所选条件完全重写函数 (例如, 缓存目的)</li></ul><h3 id="自定义装饰器-custom-route-decorators" tabindex="-1">自定义装饰器 Custom route decorators <a class="header-anchor" href="#自定义装饰器-custom-route-decorators" aria-label="Permalink to &quot;自定义装饰器 Custom route decorators&quot;">​</a></h3><h4 id="概念-1" tabindex="-1">概念 <a class="header-anchor" href="#概念-1" aria-label="Permalink to &quot;概念&quot;">​</a></h4><ul><li>Nest 是基于装饰器这种语言特性而创建的</li><li>ES2016 装饰器是一个表达式，它返回一个可以将目标、名称和属性描述符作为参数的函数</li><li>通过在装饰器前面添加一个 @ 字符并将其放置在你要装饰的内容的最顶部来应用它。可以为类、方法或属性定义装饰器。</li></ul><h4 id="_1-自定义装饰器" tabindex="-1">1.自定义装饰器 <a class="header-anchor" href="#_1-自定义装饰器" aria-label="Permalink to &quot;1.自定义装饰器&quot;">​</a></h4><p>创建一个 @User() 装饰器并在所有控制器中使用它</p><h5 id="_1-创建装饰器" tabindex="-1">1.创建装饰器 <a class="header-anchor" href="#_1-创建装饰器" aria-label="Permalink to &quot;1.创建装饰器&quot;">​</a></h5><p>user.decorator.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  user.decorator.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createParamDecorator</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ExecutionContext</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> User</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createParamDecorator</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">unknown</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ExecutionContext</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> request</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">switchToHttp</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="_2-控制器内使用" tabindex="-1">2.控制器内使用 <a class="header-anchor" href="#_2-控制器内使用" aria-label="Permalink to &quot;2.控制器内使用&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> findOne</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">User</span><span style="color:#ABB2BF;">() </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">UserEntity</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_2-传递数据" tabindex="-1">2.传递数据 <a class="header-anchor" href="#_2-传递数据" aria-label="Permalink to &quot;2.传递数据&quot;">​</a></h4><h5 id="类似数据" tabindex="-1">类似数据 <a class="header-anchor" href="#类似数据" aria-label="Permalink to &quot;类似数据&quot;">​</a></h5><p>使用 data 参数将参数传递给装饰器的工厂函数</p><p>身份验证的请求的用户实体可能类似于</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">101</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;firstName&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Alan&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;lastName&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Turing&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;email&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;alan@email.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;roles&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;admin&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="_1-定义一个将属性名作为键的装饰器" tabindex="-1">1.定义一个将属性名作为键的装饰器 <a class="header-anchor" href="#_1-定义一个将属性名作为键的装饰器" aria-label="Permalink to &quot;1.定义一个将属性名作为键的装饰器&quot;">​</a></h5><p>user.decorator.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createParamDecorator</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ExecutionContext</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> User</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createParamDecorator</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ExecutionContext</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> request</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">switchToHttp</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> data</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> user</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> user</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> user</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="_2-通过控制器中的-user-装饰器访问特定属性" tabindex="-1">2.通过控制器中的 @User() 装饰器访问特定属性 <a class="header-anchor" href="#_2-通过控制器中的-user-装饰器访问特定属性" aria-label="Permalink to &quot;2.通过控制器中的 @User() 装饰器访问特定属性&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> findOne</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">User</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;firstName&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">firstName</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Hello </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">firstName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>您可以使用具有不同键的相同装饰器来访问不同的属性。如果用户对象复杂，使用此方法可以使请求处理程序编写更容易、并且可读性更高。</p><h4 id="_3-将管道应用到自定义装饰器上" tabindex="-1">3.将管道应用到自定义装饰器上 <a class="header-anchor" href="#_3-将管道应用到自定义装饰器上" aria-label="Permalink to &quot;3.将管道应用到自定义装饰器上&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> findOne</span><span style="color:#ABB2BF;">(@</span><span style="color:#61AFEF;">User</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> ValidationPipe</span><span style="color:#ABB2BF;">()) </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">UserEntity</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>validateCustomDecorators 选项必须设置为 true</p><p>默认情况下，ValidationPipe 不验证使用自定义装饰器注释的参数。</p><h4 id="_4-装饰器聚合" tabindex="-1">4.装饰器聚合 <a class="header-anchor" href="#_4-装饰器聚合" aria-label="Permalink to &quot;4.装饰器聚合&quot;">​</a></h4><h5 id="_1-applydecorators-聚合多个装饰器" tabindex="-1">1.applyDecorators 聚合多个装饰器 <a class="header-anchor" href="#_1-applydecorators-聚合多个装饰器" aria-label="Permalink to &quot;1.applyDecorators 聚合多个装饰器&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">applyDecorators</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> Auth</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">roles</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Role</span><span style="color:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> applyDecorators</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">		SetMetadata</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;roles&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">roles</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">		UseGuards</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AuthGuard</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">RolesGuard</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">		ApiBearerAuth</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#61AFEF;">		ApiUnauthorizedResponse</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Unauthorized&quot;&#39;</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="_2-使用-auth-自定义装饰器" tabindex="-1">2.使用 @Auth() 自定义装饰器 <a class="header-anchor" href="#_2-使用-auth-自定义装饰器" aria-label="Permalink to &quot;2.使用 @Auth() 自定义装饰器&quot;">​</a></h5><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;users&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Auth</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;admin&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">findAllUsers</span><span style="color:#ABB2BF;">() {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这具有通过一个声明应用所有四个装饰器的效果。</p><blockquote><p>来自 @nestjs/swagger 依赖中的 @ApiHideProperty() 装饰器无法聚合，因此此装饰器无法正常使用 applyDecorators 方法</p></blockquote><h3 id="参数装饰器" tabindex="-1">参数装饰器 <a class="header-anchor" href="#参数装饰器" aria-label="Permalink to &quot;参数装饰器&quot;">​</a></h3><p>Nest 装饰器和原生 Express（或 Fastify）中相应对象的映射</p><ul><li>@Request() <ul><li>@Req()req</li></ul></li><li>@Response() <ul><li>@Res()res</li></ul></li><li>@Next() <ul><li>next</li></ul></li><li>@Session() <ul><li>req.session</li></ul></li><li>@Param(param?: string) <ul><li>req.params / req.params[param]</li></ul></li><li>@Body(param?: string) <ul><li>req.body / req.body[param]</li></ul></li><li>@Query(param?: string) <ul><li>req.query / req.query[param]</li></ul></li><li>@Headers(param?: string) <ul><li>req.headers / req.headers[param]</li></ul></li><li>@Ip() <ul><li>req.ip</li></ul></li><li>@HostParam() <ul><li>req.hosts</li></ul></li></ul><h2 id="项目开发流程" tabindex="-1">项目开发流程 <a class="header-anchor" href="#项目开发流程" aria-label="Permalink to &quot;项目开发流程&quot;">​</a></h2><h3 id="执行顺序" tabindex="-1">执行顺序 <a class="header-anchor" href="#执行顺序" aria-label="Permalink to &quot;执行顺序&quot;">​</a></h3><ul><li>客户端请求 ---&gt; 中间件 ---&gt; 守卫 ---&gt; 拦截器之前 ---&gt; 管道 ---&gt; 控制器处理并响应 ---&gt; 拦截器之后 ---&gt; 过滤器</li></ul><h3 id="nest装饰器" tabindex="-1">nest装饰器 <a class="header-anchor" href="#nest装饰器" aria-label="Permalink to &quot;nest装饰器&quot;">​</a></h3><p>nest装饰器 express 对象：</p><ul><li><p>@Request() req</p></li><li><p>@Response() res</p></li><li><p>@Next() next</p></li><li><p>@Session() req.session</p></li><li><p>@Param(param?: string) req.params / req.params[param]</p></li><li><p>@Body(param?: string) req.body / req.body[param]</p></li><li><p>@Query(param?: string) req.query / req.query[param]</p></li><li><p>@Headers(param?: string) req.headers / req.headers[param]</p></li></ul><h3 id="数据库操作" tabindex="-1">数据库操作 <a class="header-anchor" href="#数据库操作" aria-label="Permalink to &quot;数据库操作&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> mongoose</span><span style="color:#98C379;"> @nestjs/mongoose</span><span style="color:#D19A66;"> --save</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @nestjs/typeorm</span><span style="color:#98C379;"> typeorm</span><span style="color:#98C379;"> mysql</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="配置fastify" tabindex="-1">配置Fastify <a class="header-anchor" href="#配置fastify" aria-label="Permalink to &quot;配置Fastify&quot;">​</a></h3><p>集成步骤</p><p>1.安装依赖@nestjs/platform-fastify</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @nestjs/platform-fastify</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.配置适配器</p><ul><li>安装 fastify 后，我们可以使用 FastifyAdapter，修改src/main.ts文件</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/core&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">FastifyAdapter</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">NestFastifyApplication</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/platform-fastify&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">ApplicationModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./app.module&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">nestfastifyapplication</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">ApplicationModule</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> FastifyAdapter</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 默认情况下，\`Fastify\`仅在 \`localhost 127.0.0.1\` 接口上监听</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 改成 0.0.0.0 接受其他主机上的连接</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0.0.0.0&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="配置路径别名tsconfig-json" tabindex="-1">配置路径别名tsconfig.json <a class="header-anchor" href="#配置路径别名tsconfig-json" aria-label="Permalink to &quot;配置路径别名tsconfig.json&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    // 配置路径别名</span></span>
<span class="line"><span style="color:#98C379;">    &quot;paths&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">      &quot;@/*&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">        &quot;src/*&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">      ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="快速启动-web-应用-create-t3-app" tabindex="-1">快速启动 Web 应用：create-t3-app <a class="header-anchor" href="#快速启动-web-应用-create-t3-app" aria-label="Permalink to &quot;快速启动 Web 应用：create-t3-app&quot;">​</a></h2><p>create-t3-app 让你以最快的方式启动一个独立、全栈、类型安全 NextJS 应用。</p><p>网址</p><ul><li><p><a href="https://github.com/t3-oss/create-t3-app" target="_blank" rel="noreferrer">https://github.com/t3-oss/create-t3-app</a></p></li><li><p><a href="https://create.t3.gg/" target="_blank" rel="noreferrer">https://create.t3.gg/</a></p></li></ul><h2 id="数据库连接" tabindex="-1">数据库连接 <a class="header-anchor" href="#数据库连接" aria-label="Permalink to &quot;数据库连接&quot;">​</a></h2><h3 id="数据库相关" tabindex="-1">数据库相关 <a class="header-anchor" href="#数据库相关" aria-label="Permalink to &quot;数据库相关&quot;">​</a></h3><ul><li><p>Nest 与数据库无关，允许您轻松地与任何 SQL 或 NoSQL 数据库集成。</p></li><li><p>可以直接使用任何通用的 Node.js 数据库集成库或 ORM ，例如 Sequelize (recipe)、knexjs (tutorial)\`和 TypeORM ，以在更高的抽象级别上进行操作。</p></li></ul><h3 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h3><ul><li><p>1.sequelize</p><ul><li><p><a href="https://sequelize.org/" target="_blank" rel="noreferrer">https://sequelize.org/</a></p></li><li><p><a href="https://www.npmjs.com/package/sequelize" target="_blank" rel="noreferrer">https://www.npmjs.com/package/sequelize</a></p></li><li><p><a href="https://github.com/sequelize/sequelize" target="_blank" rel="noreferrer">https://github.com/sequelize/sequelize</a></p></li></ul></li><li><p>2.knexjs</p><ul><li><a href="https://knexjs.org/" target="_blank" rel="noreferrer">https://knexjs.org/</a></li></ul></li><li><p>3.MongoDB</p><ul><li><p>Nest支持两种与 MongoDB 数据库集成的方式</p><ul><li><p>1.使用内置的TypeORM 提供的 MongoDB 连接器</p><ul><li><a href="https://github.com/typeorm/typeorm" target="_blank" rel="noreferrer">https://github.com/typeorm/typeorm</a></li></ul></li><li><p>2.使用最流行的 MongoDB 对象建模工具 Mongoose</p><ul><li><a href="https://mongoosejs.com/" target="_blank" rel="noreferrer">https://mongoosejs.com/</a></li></ul></li></ul></li></ul></li></ul><h3 id="typeorm" tabindex="-1">TypeORM <a class="header-anchor" href="#typeorm" aria-label="Permalink to &quot;TypeORM&quot;">​</a></h3><h4 id="typeorm-1" tabindex="-1">typeorm <a class="header-anchor" href="#typeorm-1" aria-label="Permalink to &quot;typeorm&quot;">​</a></h4><ul><li><a href="https://github.com/typeorm/typeorm" target="_blank" rel="noreferrer">https://github.com/typeorm/typeorm</a></li></ul><h4 id="介绍-1" tabindex="-1">介绍 <a class="header-anchor" href="#介绍-1" aria-label="Permalink to &quot;介绍&quot;">​</a></h4><ul><li><p>Nest 还提供了与现成的 TypeORM 与 @nestjs/typeorm 的紧密集成</p></li><li><p>为了与 SQL和 NoSQL 数据库集成，Nest 提供了 @nestjs/typeorm 包。Nest 使用TypeORM是因为它是 TypeScript 中最成熟的对象关系映射器( ORM )。因为它是用 TypeScript 编写的，所以可以很好地与 Nest 框架集成。</p></li><li><p>TypeORM 提供了对许多关系数据库的支持</p><ul><li>PostgreSQL 、Oracle、Microsoft SQL Server、SQLite，甚至像 MongoDB这样的 NoSQL 数据库</li></ul></li></ul><h4 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h4><ul><li><p>1.为所选数据库安装相关的客户端 API 库 mysql为例</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @nestjs/typeorm</span><span style="color:#98C379;"> typeorm</span><span style="color:#98C379;"> mysql2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>2.将 TypeOrmModule 导入AppModule app.module.ts</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  app.module.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">    TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">      type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;mysql&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;localhost&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      entities</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">      synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li><li><p>forRoot() 方法说明</p><ul><li><p>forRoot() 方法支持所有TypeORM包中createConnection()函数暴露出的配置属性</p></li><li><p>额外对象属性配置</p><ul><li><p>retryAttempts:</p><ul><li>重试连接数据库的次数（默认：10）</li></ul></li><li><p>retryDelay:</p><ul><li>两次重试连接的间隔(ms)（默认：3000）</li></ul></li><li><p>autoLoadEntities:</p><ul><li>如果为true,将自动加载实体(默认：false)</li></ul></li><li><p>keepConnectionAlive:</p><ul><li>如果为true，在应用程序关闭后连接不会关闭 (默认：false)</li></ul></li></ul></li><li><p>更多连接选项</p><ul><li><a href="https://typeorm.io/#/connection-options" target="_blank" rel="noreferrer">https://typeorm.io/#/connection-options</a></li></ul></li></ul></li></ul></li><li><p>3.可以创建 ormconfig.json (选项模块化：2和3任选一项配置)</p><ul><li><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;mysql&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;host&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;localhost&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;port&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;username&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;password&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;database&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;entities&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;dist/**/*.entity{.ts,.js}&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;synchronize&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>然后，可以不带任何选项地调用 forRoot() app.module.ts</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  app.module.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">()],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul></li><li><p>静态全局路径(例如 dist/**/*.entity{ .ts,.js} )不适用于 Webpack 热重载。</p></li><li><p>注意，ormconfig.json 文件由typeorm库载入，因此，任何上述参数之外的属性都不会被应用（例如由forRoot()方法内部支持的属性–例如autoLoadEntities和retryDelay())</p></li></ul></li><li><p>4.完成2或3，TypeORM 的Connection和 EntityManager 对象 就可以在整个项目中注入(不需要导入任何模块)</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  app.module.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Connection</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">PhotoModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> connection</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul></li></ul><h4 id="typeorm模式介绍和使用" tabindex="-1">TypeORM模式介绍和使用 <a class="header-anchor" href="#typeorm模式介绍和使用" aria-label="Permalink to &quot;TypeORM模式介绍和使用&quot;">​</a></h4><h5 id="存储库模式" tabindex="-1">存储库模式 <a class="header-anchor" href="#存储库模式" aria-label="Permalink to &quot;存储库模式&quot;">​</a></h5><p>TypeORM 支持存储库设计模式，因此每个实体都有自己的存储库</p><p>从数据库连接获得这些存储库</p><p>1.定义User 实体 user.entity.ts</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  user.entity.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Entity</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Column</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Entity</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">  firstName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">  lastName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E06C75;">  isActive</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li><p>该 User 实体在 users 目录下。这个目录包含了和 UsersModule模块有关的所有文件。你可以决定在哪里保存模型文件，但我们推荐在他们的域中就近创建，即在相应的模块目录中。</p></li><li><p>实体的更多内容：<a href="https://typeorm.io/#/entities" target="_blank" rel="noreferrer">https://typeorm.io/#/entities</a></p></li></ul><p>2.使用 user 实体 app.module.ts</p><p>需要在模块的forRoot()方法的选项中（除非你使用一个静态的全局路径）将它插入entities数组中来让 TypeORM知道它的存在</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./users/user.entity&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">    TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">      type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;mysql&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;localhost&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //  存储库</span></span>
<span class="line"><span style="color:#E06C75;">      entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">      synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>3.user.module.ts 使用 forFeature() 方法 定义注册存储库</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./users.service&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./users.controller&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./user.entity&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">])],</span></span>
<span class="line"><span style="color:#E06C75;">  providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">  controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>此模块使用 forFeature() 方法定义在当前范围中注册哪些存储库。</li></ul><p>4.注入到 UsersService服务提供者中 users.service.ts</p><ul><li>使用 @InjectRepository()装饰器将 UsersRepository 注入到 UsersService 中:</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  users.service.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">InjectRepository</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Repository</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./user.entity&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#61AFEF;">InjectRepository</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E06C75;font-style:italic;"> usersRepository</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Repository</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  findAll</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">[]&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">usersRepository</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  findOne</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">usersRepository</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findOne</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  async</span><span style="color:#61AFEF;"> remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">usersRepository</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delete</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>5.将 UsersModule 导入根 AppModule app.module.ts</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./users/user.entity&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">    TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">      type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;mysql&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;localhost&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //  存储库</span></span>
<span class="line"><span style="color:#E06C75;">      entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">      synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //  导入</span></span>
<span class="line"><span style="color:#E06C75;">    UserModule</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>6.要在导入TypeOrmModule.forFeature 的模块之外使用存储库（users.module.ts）</p><p>如果要在导入TypeOrmModule.forFeature 的模块之外使用存储库，则需要重新导出由其生成的提供程序。 可以通过导出整个模块来做到这一点</p><p>6.1.导出模块 users.module.ts</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./user.entity&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">])],</span></span>
<span class="line"><span style="color:#E06C75;">  exports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>6.2.其他地方导入使用 users-http.module.ts</p><p>在 UserHttpModule 中导入 UsersModule ，我们可以在后一个模块的提供者中使用 @InjectRepository(User)</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  users-http.module.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./user.module&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./users.service&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./users.controller&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">  providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">  controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserHttpModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="关系" tabindex="-1">关系 <a class="header-anchor" href="#关系" aria-label="Permalink to &quot;关系&quot;">​</a></h5><h6 id="介绍-2" tabindex="-1">介绍 <a class="header-anchor" href="#介绍-2" aria-label="Permalink to &quot;介绍&quot;">​</a></h6><ul><li><p>关系是指两个或多个表之间的联系</p></li><li><p>关系基于每个表中的常规字段，通常包含主键和外键。</p></li></ul><h6 id="三种关系-和装饰器" tabindex="-1">三种关系 和装饰器 <a class="header-anchor" href="#三种关系-和装饰器" aria-label="Permalink to &quot;三种关系 和装饰器&quot;">​</a></h6><ul><li><p>一对一</p><ul><li><p>主表中的每一行在外部表中有且仅有一个对应行</p></li><li><p>使用 @OneToOne() 装饰器来定义这种类型的关系</p></li></ul></li><li><p>一对多/多对一</p><ul><li><p>主表中的每一行在外部表中有一个或多的对应行</p></li><li><p>使用 @OneToMany() 和 @ManyToOne()装饰器 来定义这种类型的关系</p></li></ul></li><li><p>多对多</p><ul><li><p>主表中的每一行在外部表中有多个对应行，外部表中的每个记录在主表中也有多个行</p></li><li><p>使用 @ManyToMany()装饰器 来定义这种类型的关系</p></li></ul></li></ul><h6 id="使用装饰器例子" tabindex="-1">使用装饰器例子 <a class="header-anchor" href="#使用装饰器例子" aria-label="Permalink to &quot;使用装饰器例子&quot;">​</a></h6><p>@OneToMany()装饰器 定义每个User可以有多个Photo （user.entity.ts）</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  user.entity.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Entity</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Column</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">OneToMany</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Photo</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;../photos/photo.entity&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Entity</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> User</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">PrimaryGeneratedColumn</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">  id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">  firstName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">  lastName</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Column</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#E06C75;">  isActive</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">boolean</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">OneToMany</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> Photo</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">photo</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> photo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">  photos</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Photo</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>要了解 TypeORM 中关系的内容 可以查看TypeORM 文档：<a href="https://typeorm.io/#/relations" target="_blank" rel="noreferrer">https://typeorm.io/#/relations</a></p><h5 id="自动载入实体" tabindex="-1">自动载入实体 <a class="header-anchor" href="#自动载入实体" aria-label="Permalink to &quot;自动载入实体&quot;">​</a></h5><p>使用静态全局路径来自动载入实体</p><ul><li>例如, dist/*/.entity{.ts,.js}</li></ul><p>webpack不支持全局路径，因此如果你要在单一仓库(Monorepo)中构建应用，可能不能使用全局路径。</p><ul><li><p>解决方案</p><ul><li><p>在配置对象的属性中(传递给forRoot()方法的)设置autoLoadEntities属性为true来自动载入实体 app.module.ts</p></li><li><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// app.module.ts</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">    TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span></span>
<span class="line"><span style="color:#E06C75;">      autoLoadEntities</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>通过配置这一选项，每个通过forFeature()注册的实体都会自动添加到配置对象的entities数组中</p></li><li><p>注意，那些没有通过forFeature()方法注册，而仅仅是在实体中被引用（通过关系）的实体不能通过autoLoadEntities配置被包含。</p></li></ul></li></ul><h5 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h5><h6 id="简介-1" tabindex="-1">简介 <a class="header-anchor" href="#简介-1" aria-label="Permalink to &quot;简介&quot;">​</a></h6><p>数据库事务代表在数据库管理系统（DBMS）中针对数据库的一组操作，这组操作是有关的、可靠的并且和其他事务相互独立的。</p><p>一个事务通常可以代表数据库中的任何变更：<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1" target="_blank" rel="noreferrer">https://zh.wikipedia.org/wiki/数据库事务</a></p><h6 id="typeorm-事务" tabindex="-1">TypeORM 事务 <a class="header-anchor" href="#typeorm-事务" aria-label="Permalink to &quot;TypeORM 事务&quot;">​</a></h6><ul><li><a href="https://typeorm.io/#/transactions" target="_blank" rel="noreferrer">https://typeorm.io/#/transactions</a></li></ul><h6 id="typeorm-事务使用queryrunner类" tabindex="-1">TypeORM 事务使用QueryRunner类 <a class="header-anchor" href="#typeorm-事务使用queryrunner类" aria-label="Permalink to &quot;TypeORM 事务使用QueryRunner类&quot;">​</a></h6><p>1.将Connection对象在服务提供者注入</p><ul><li><p>@Injectable() export class UsersService { constructor(private connection: Connection) {} }</p></li><li><p>Connection类需要从typeorm包中导入</p></li></ul><p>2.使用这个对象来创建一个事务</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> createMany</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">connection</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createQueryRunner</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">connect</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">startTransaction</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">  try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">manager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">manager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commitTransaction</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //如果遇到错误，可以回滚事务</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">rollbackTransaction</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //你需要手动实例化并部署一个queryRunner</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> queryRunner</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">release</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>注意connection仅用于创建QueryRunner。 然而，要测试这个类，就需要模拟整个Connection对象（它暴露出来的几个方法），因此，我们推荐采用一个帮助工厂类（也就是QueryRunnerFactory)并且定义一个包含仅限于维持事务需要的方法的接口。 这一技术让模拟这些方法变得非常直接。</li></ul><p>3.可选地，你可以使用一个Connection对象的回调函数风格的transaction方法</p><ul><li>更多方法：<a href="https://typeorm.io/#/transactions/creating-and-using-transactions" target="_blank" rel="noreferrer">https://typeorm.io/#/transactions/creating-and-using-transactions</a></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> createMany</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">[]) {</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">connection</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transaction</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#E06C75;font-style:italic;"> manager</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> manager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#C678DD;">    await</span><span style="color:#E5C07B;"> manager</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">users</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>不推荐使用装饰器来控制事务(@Transaction()和@TransactionManager())。</p><h5 id="订阅者" tabindex="-1">订阅者 <a class="header-anchor" href="#订阅者" aria-label="Permalink to &quot;订阅者&quot;">​</a></h5><ul><li>使用 TypeORM订阅者，你可以监听特定的实体事件：<a href="https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber" target="_blank" rel="noreferrer">https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber</a></li></ul><h6 id="使用例子" tabindex="-1">使用例子 <a class="header-anchor" href="#使用例子" aria-label="Permalink to &quot;使用例子&quot;">​</a></h6><p>1.订阅例子</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Connection</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">EntitySubscriberInterface</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">EventSubscriber</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">InsertEvent</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./user.entity&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">EventSubscriber</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserSubscriber</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> EntitySubscriberInterface</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">connection</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    connection</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">subscribers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  listenTo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> User</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  beforeInsert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">event</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">InsertEvent</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`BEFORE USER INSERTED: \`</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">event</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">entity</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>事件订阅者不能是请求范围的</p><ul><li><a href="https://docs.nestjs.com/fundamentals/injection-scopes" target="_blank" rel="noreferrer">https://docs.nestjs.com/fundamentals/injection-scopes</a></li></ul><p>2.将UserSubscriber类添加到providers数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">TypeOrmModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/typeorm&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./user.entity&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./users.controller&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./users.service&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">UserSubscriber</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./user.subscriber&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">])],</span></span>
<span class="line"><span style="color:#E06C75;">  providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersService</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">UserSubscriber</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">  controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">UsersController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>更多实体订阅者内容：<a href="https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber" target="_blank" rel="noreferrer">https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber</a></p><h5 id="迁移" tabindex="-1">迁移 <a class="header-anchor" href="#迁移" aria-label="Permalink to &quot;迁移&quot;">​</a></h5><ul><li><p>迁移提供了一个在保存数据库中现有数据的同时增量升级数据库使其与应用中的数据模型保持同步的方法。</p></li><li><p>TypeORM 提供了一个专用CLI 命令行工具用于生成、运行以及回滚迁移。</p></li><li><p>迁移类和Nest应用源码是分开的。他们的生命周期由TypeORM CLI管理，因此，你不能在迁移中使用依赖注入和其他Nest专有特性</p></li><li><p>详情查看TypeORM 文档：<a href="https://typeorm.io/migrations" target="_blank" rel="noreferrer">https://typeorm.io/migrations</a></p></li></ul><h5 id="多个数据库" tabindex="-1">多个数据库 <a class="header-anchor" href="#多个数据库" aria-label="Permalink to &quot;多个数据库&quot;">​</a></h5><p>1.创建多个数据库连接</p><p>假设有一个Album 实体存储在数据库中</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> defaultOptions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;postgres&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5432</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;password&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;db&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E5C07B;">    TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span><span style="color:#E06C75;">defaultOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user_db_host&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#E5C07B;">    TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRoot</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span><span style="color:#E06C75;">defaultOptions</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;albumsConnection&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;album_db_host&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">Album</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>如果未为连接设置任何 name ，则该连接的名称将设置为 default。 请注意，不应该有多个没有名称或同名的连接，否则它们会被覆盖。</p><p>2.告诉 TypeOrmModule.forFeature() 方法和 @InjectRepository() 装饰器应该使用哪种连接</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">]), </span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">Album</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&#39;albumsConnection&#39;</span><span style="color:#ABB2BF;">)],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>如果不传递任何连接名称，则使用 default 连接</li></ul><p>3.为给定的连接注入 Connection 或 EntityManager</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AlbumsService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#61AFEF;">InjectConnection</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;albumsConnection&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E06C75;font-style:italic;"> connection</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Connection</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#61AFEF;">InjectEntityManager</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;albumsConnection&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E06C75;font-style:italic;"> entityManager</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">EntityManager</span></span>
<span class="line"><span style="color:#ABB2BF;">  ) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h5><p>在单元测试我们的应用程序时，我们通常希望避免任何数据库连接，从而使我们的测试适合于独立，并使它们的执行过程尽可能快。但是我们的类可能依赖于从连接实例中提取的存储库。那是什么？</p><ul><li><p>解决方案</p><ul><li><p>创建假存储库。为了实现这一点，我们设置了[自定义提供者]</p></li><li><p>事实上，每个注册的存储库都由 entitynamereposition 标记表示，其中 EntityName 是实体类的名称。</p></li></ul></li></ul><p>getRepositoryToken() 函数</p><p>@nestjs/typeorm 包提供了基于给定实体返回准备好 token 的 getRepositoryToken() 函数</p><p>1.使用</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  providers</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#E06C75;">    UsersService</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#E06C75;">      provide</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">getRepositoryToken</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">User</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 使用mockRepository 作为 UsersRepository</span></span>
<span class="line"><span style="color:#E06C75;">      useValue</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">mockRepository</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UsersModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>使用mockRepository 作为 UsersRepository 每当任何提供程序使用 @InjectRepository() 装饰器请求 UsersRepository 时, Nest 会使用注册的 mockRepository 对象。</li></ul><h5 id="定制存储库" tabindex="-1">定制存储库 <a class="header-anchor" href="#定制存储库" aria-label="Permalink to &quot;定制存储库&quot;">​</a></h5><p>TypeORM 提供称为自定义存储库的功能：<a href="https://typeorm.io/custom-repository" target="_blank" rel="noreferrer">https://typeorm.io/custom-repository</a></p><p>自定义存储库允许您扩展基本存储库类，并使用几种特殊方法对其进行丰富</p><p>1.使用 @EntityRepository() 装饰器和扩展 Repository 类 创建自定义存储库</p><ul><li><p>@EntityRepository(Author) export class AuthorRepository extends Repository {}</p></li><li><p>@EntityRepository() 和 Repository 来自 typeorm 包</p></li></ul><p>2.将实例化责任移交给 Nest 将 AuthorRepository 类传递给 TypeOrm.forFeature() 函数</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forFeature</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">AuthorRepository</span><span style="color:#ABB2BF;">])],</span></span>
<span class="line"><span style="color:#E06C75;">  controller</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AuthorController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">  providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AuthorService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AuthorModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>3.注入存储库</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AuthorService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#C678DD;"> readonly</span><span style="color:#E06C75;font-style:italic;"> authorRepository</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AuthorRepository</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="异步配置" tabindex="-1">异步配置 <a class="header-anchor" href="#异步配置" aria-label="Permalink to &quot;异步配置&quot;">​</a></h5><p>异步传递模块选项：forRootAsync() 函数， 提供了几种处理异步数据的方法</p><h6 id="_1-使用工厂函数" tabindex="-1">1.使用工厂函数 <a class="header-anchor" href="#_1-使用工厂函数" aria-label="Permalink to &quot;1.使用工厂函数&quot;">​</a></h6><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRootAsync</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">  useFactory</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;mysql&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;localhost&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">__dirname</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;/**/*.entity{.ts,.js}&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">    synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  }),</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>工厂的行为与任何其他异步提供者一样(例如，它可以是异步的，并且它能够通过inject注入依赖)。如下</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRootAsync</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  imports</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">ConfigModule</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#61AFEF;">  useFactory</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">configService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ConfigService</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;mysql&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    host</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">configService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;HOST&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">    port</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">configService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;PORT&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">    username</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">configService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;USERNAME&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">    password</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">configService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;PASSWORD&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">    database</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">configService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#98C379;">&#39;DATABASE&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">    entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">__dirname</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;/**/*.entity{.ts,.js}&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">    synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  }),</span></span>
<span class="line"><span style="color:#E06C75;">  inject</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">ConfigService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h6 id="_2-使用useclass语法" tabindex="-1">2.使用useClass语法 <a class="header-anchor" href="#_2-使用useclass语法" aria-label="Permalink to &quot;2.使用useClass语法&quot;">​</a></h6><p>1.在 TypeOrmConfigService 实现 TypeOrmOptionsFactory 的接口</p><p>在TypeOrmModule内部实例化TypeOrmConfigService，并通过调用createTypeOrmOptions()</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> TypeOrmConfigService</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> TypeOrmOptionsFactory</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  createTypeOrmOptions</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">TypeOrmModuleOptions</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;mysql&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;localhost&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      entities</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">__dirname</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;/**/*.entity{.ts,.js}&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">      synchronize</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>2.useClass语法调用</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">TypeOrmModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forRootAsync</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  useClass</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">TypeOrmConfigService</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>将 TypeOrmConfigService 在内部进行实例化 TypeOrmModule，并将利用它来创建选项对象。</li></ul><p>3.使用 useExisting 语法调用</p><ul><li><p>防止在 TypeOrmModule 中创建 TypeOrmConfigService 并使用从不同模块导入的提供程序，可以使用 useExisting 语法</p></li><li><p>TypeOrmModule.forRootAsync({ imports: [ConfigModule], useExisting: ConfigService, });</p></li><li><p>这个构造与 useClass 的工作原理相同，但有一个关键的区别 — TypeOrmModule 将查找导入的模块来重用现有的 ConfigService，而不是实例化一个新的 ConfigService</p></li></ul><p>集成例子：<a href="https://github.com/nestjs/nest/tree/master/sample/05-sql-typeorm" target="_blank" rel="noreferrer">https://github.com/nestjs/nest/tree/master/sample/05-sql-typeorm</a></p><h3 id="sequelize集成" tabindex="-1">Sequelize集成 <a class="header-anchor" href="#sequelize集成" aria-label="Permalink to &quot;Sequelize集成&quot;">​</a></h3><ul><li><p>Sequelize 集成</p><ul><li><a href="https://docs.nestjs.cn/8/techniques?id=sequelize-%e9%9b%86%e6%88%90" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/techniques?id=sequelize-集成</a></li></ul></li><li><p>介绍</p><ul><li><p>另一个使用TypeORM的选择是使用@nestjs/sequelize包中的Sequelize ROM</p></li><li><p>我们使用sequelize-typescript包来提供一系列额外的装饰器以声明实体。</p></li><li><p>Sequelize支持很多种关系数据库，例如PostgreSQL,MySQL,Microsoft SQL Server,SQLite以及MariaDB</p></li></ul></li><li><p>基本使用</p><ul><li><p>1.安装需要的依赖 MySQL关系数据库为例</p><ul><li><p>也适合其他任何Sequelize支持的数据库， 按需安装所选数据库相应的客户端 API 库就可以</p></li><li><p>安装</p><ul><li><p>npm install --save @nestjs/sequelize sequelize sequelize-typescript mysql2</p></li><li><p>npm install --save-dev @types/sequelize</p></li></ul></li></ul></li><li><p>2.将SequelizeModule导入到根AppModule中</p><ul><li><p>// app.module.ts import { Module } from &#39;@nestjs/common&#39;; import { SequelizeModule } from &#39;@nestjs/sequelize&#39;; @Module({ imports: [ SequelizeModule.forRoot({ dialect: &#39;mysql&#39;, host: &#39;localhost&#39;, port: 3306, username: &#39;root&#39;, password: &#39;root&#39;, database: &#39;test&#39;, models: [], }), ], }) export class AppModule {}</p></li><li><p>forRoot()方法支持所有Sequelize构造器暴露的配置属性</p><ul><li><p>(了解更多)</p></li><li><p><a href="https://sequelize.org/v5/manual/getting-started.html#setting-up-a-connection" target="_blank" rel="noreferrer">https://sequelize.org/v5/manual/getting-started.html#setting-up-a-connection</a></p></li></ul></li><li><p>额外的配置属性</p><ul><li><p>retryAttempts</p><ul><li>尝试连接数据库的次数（默认：10）</li></ul></li><li><p>retryDelay</p><ul><li>两次连接之间间隔时间(ms)(默认：3000)</li></ul></li><li><p>autoLoadModels</p><ul><li>如果为true，模型将自动载入（默认:false)</li></ul></li><li><p>keepConnectionAlive</p><ul><li>如果为true，在应用关闭后连接将不会关闭（默认:false)</li></ul></li><li><p>synchronize</p><ul><li>如果为true，自动载入的模型将同步（默认：false）</li></ul></li></ul></li></ul></li><li><p>3.Sequelize对象注入到整个项目中 app.service.ts</p><ul><li>import { Injectable } from &#39;@nestjs/common&#39;; import { Sequelize } from &#39;sequelize-typescript&#39;; @Injectable() export class AppService { constructor(private sequelize: Sequelize) {} }</li></ul></li></ul></li><li><p>Sequelize模式介绍和使用</p><ul><li><p>模型</p></li><li><p>关系</p></li><li><p>自动载入模型</p></li><li><p>事务</p></li><li><p>迁移</p></li><li><p>多个数据库</p></li><li><p>测试</p></li><li><p>异步配置</p></li></ul></li></ul><h3 id="mongo" tabindex="-1">Mongo <a class="header-anchor" href="#mongo" aria-label="Permalink to &quot;Mongo&quot;">​</a></h3><ul><li><p>Mongo</p><ul><li><a href="https://docs.nestjs.cn/8/techniques?id=mongo" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/techniques?id=mongo</a></li></ul></li><li><p>介绍</p></li><li><p>基本使用</p></li><li><p>Mongo模式的介绍和使用</p><ul><li><p>模型注入</p></li><li><p>连接</p></li><li><p>钩子（中间件）</p></li><li><p>插件</p></li><li><p>测试</p></li><li><p>异步配置</p></li><li><p>例子</p><ul><li><a href="https://github.com/nestjs/nest/tree/master/sample/06-mongoose" target="_blank" rel="noreferrer">https://github.com/nestjs/nest/tree/master/sample/06-mongoose</a></li></ul></li></ul></li></ul><h2 id="swagger生成api文档-openapi" tabindex="-1">swagger生成API文档 （OpenAPI） <a class="header-anchor" href="#swagger生成api文档-openapi" aria-label="Permalink to &quot;swagger生成API文档 （OpenAPI）&quot;">​</a></h2><h3 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h3><p><a href="https://docs.nestjs.cn/8/openapi" target="_blank" rel="noreferrer">https://docs.nestjs.cn/8/openapi</a></p><h3 id="_1-安装依赖-1" tabindex="-1">1.安装依赖 <a class="header-anchor" href="#_1-安装依赖-1" aria-label="Permalink to &quot;1.安装依赖&quot;">​</a></h3><p>express</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @nestjs/swagger</span><span style="color:#98C379;"> swagger-ui-express</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>fastify</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save</span><span style="color:#98C379;"> @nestjs/swagger</span><span style="color:#98C379;"> fastify-swagger</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-使用-1" tabindex="-1">2.使用 <a class="header-anchor" href="#_2-使用-1" aria-label="Permalink to &quot;2.使用&quot;">​</a></h3><p>1).main.ts里面添加</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/core&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">DocumentBuilder</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">SwaggerModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;@nestjs/swagger&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./app.module&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">logger</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./logger.middleware&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 生成swagger文档</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> config</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> DocumentBuilder</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setTitle</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;博客文档&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setDescription</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;博客文档API示例&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">setVersion</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1.0&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">addTag</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;cats&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> document</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> SwaggerModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createDocument</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">  SwaggerModule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setup</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;api&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 使用全局中间件：只能使用函数形式</span></span>
<span class="line"><span style="color:#E5C07B;">  app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">logger</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 监听端口</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>2).创建文档目录模板</p><ul><li><p>1.执行：nest g res products 命令</p></li><li><p>2.选择生成选项</p></li><li><p>3.输入y确定</p></li></ul><p>3).OpenAPI装饰器</p><ul><li><p>class Product { @ApiProperty({ description: &#39;产品名称&#39;, }) name: string; }</p><ul><li>请求说明：和@ApiResponse 的 type 属性配合使用</li></ul></li><li><p>@ApiTags(&quot;&#39;产品-product&#39;&quot;)</p><ul><li>装饰类的名字</li></ul></li><li><p>@ApiResponse( { status: 200, type: [Product], } )</p><ul><li>请求方法返回</li></ul></li><li><p>@ApiQuery( { name: &#39;page&#39;, description: &#39;页码&#39;, type: Number, } )</p><ul><li>接口请求参数Parameters栏</li></ul></li><li><p>@ApiOperation({ summary: &#39;查询所有产品&#39; })</p><ul><li>接口说明</li></ul></li><li><p>...</p></li></ul>`,676)]))}const A=n(t,[["render",c]]);export{d as __pageData,A as default};
