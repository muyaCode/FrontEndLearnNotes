import{_ as a,c as e,o as p,ah as n}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"CSS工程化(模块化)方案","description":"","frontmatter":{},"headers":[],"relativePath":"Document/HTML和CSS/CSS/CSS工程化(模块化)方案.md","filePath":"Document/HTML和CSS/CSS/CSS工程化(模块化)方案.md","lastUpdated":1750954157000}'),r={name:"Document/HTML和CSS/CSS/CSS工程化(模块化)方案.md"};function o(t,s,l,c,i,m){return p(),e("div",null,s[0]||(s[0]=[n(`<h1 id="css工程化-模块化-方案" tabindex="-1">CSS工程化(模块化)方案 <a class="header-anchor" href="#css工程化-模块化-方案" aria-label="Permalink to &quot;CSS工程化(模块化)方案&quot;">​</a></h1><h2 id="方案1-postcss" tabindex="-1">方案1：PostCSS <a class="header-anchor" href="#方案1-postcss" aria-label="Permalink to &quot;方案1：PostCSS&quot;">​</a></h2><p>官网：<a href="https://postcss.org/" target="_blank" rel="noreferrer">PostCSS - a tool for transforming CSS with JavaScript</a></p><p>中文网：<a href="https://www.postcss.com.cn/" target="_blank" rel="noreferrer">PostCSS - 用 JavaScript 工具和插件来转换 CSS 代码的工具 | PostCSS中文网</a></p><p>中文文档：<a href="https://github.com/postcss/postcss/blob/HEAD/docs/README-cn.md" target="_blank" rel="noreferrer">postcss/README-cn.md at postcss/postcss (github.com)</a></p><p>npm文档：<a href="https://www.npmjs.com/package/postcss" target="_blank" rel="noreferrer">postcss - npm (npmjs.com)</a></p><p>GitHub：<a href="https://github.com/postcss/postcss" target="_blank" rel="noreferrer">postcss/postcss: Transforming styles with JS plugins (github.com)</a></p><hr><h3 id="postcss安装和使用" tabindex="-1">PostCSS安装和使用 <a class="header-anchor" href="#postcss安装和使用" aria-label="Permalink to &quot;PostCSS安装和使用&quot;">​</a></h3><h4 id="postcss-cli脚手架安装-可以项目中安装-也可以-g全局安装-也可以不装-单单安装postcss" tabindex="-1">postcss-cli脚手架安装(可以项目中安装，也可以-g全局安装，也可以不装，单单安装postcss) <a class="header-anchor" href="#postcss-cli脚手架安装-可以项目中安装-也可以-g全局安装-也可以不装-单单安装postcss" aria-label="Permalink to &quot;postcss-cli脚手架安装(可以项目中安装，也可以-g全局安装，也可以不装，单单安装postcss)&quot;">​</a></h4><p>需要在你的命令行界面或 npm 脚本里使用 PostCSS，你可以使用 <a href="https://github.com/postcss/postcss-cli" target="_blank" rel="noreferrer"><code>postcss-cli</code></a></p><p>npm文档：<a href="https://www.npmjs.com/package/postcss-cli" target="_blank" rel="noreferrer">postcss-cli - npm (npmjs.com)</a></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -D</span><span style="color:#98C379;"> postcss</span><span style="color:#98C379;"> postcss-cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="使用postcss" tabindex="-1">使用postcss <a class="header-anchor" href="#使用postcss" aria-label="Permalink to &quot;使用postcss&quot;">​</a></h4><p>参考npm文档的Usage和配置文件：<a href="https://www.npmjs.com/package/postcss-cli" target="_blank" rel="noreferrer">postcss-cli - npm (npmjs.com)</a></p><p>项目根目录中，添加postcss.config.js配置文件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 导入的插件都是按照顺序执行</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  parser</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;sugarss&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  plugins</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#61AFEF;">    require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;postcss-import&#39;</span><span style="color:#ABB2BF;">)({ ...</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> }),</span></span>
<span class="line"><span style="color:#61AFEF;">    require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;postcss-url&#39;</span><span style="color:#ABB2BF;">)({ </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;copy&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">useHash</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> }),</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用插件：autoprefixer：<a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noreferrer">postcss/autoprefixer</a>自动加前缀</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">postcss</span><span style="color:#D19A66;"> --use</span><span style="color:#98C379;"> autoprefixer</span><span style="color:#D19A66;"> -c</span><span style="color:#98C379;"> options.json</span><span style="color:#D19A66;"> -o</span><span style="color:#98C379;"> main.css</span><span style="color:#98C379;"> css/</span><span style="color:#E5C07B;">*</span><span style="color:#98C379;">.css</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p>PostCSS是一款使用插件去转换CSS的工具，PostCSS本身只有解析能力，各种神奇的能力主要靠插件，各种插件的功能有：模块化、浏览器前缀添加、兼容性的等等</p><p><strong>插件列表</strong>：<a href="https://github.com/postcss/postcss/blob/HEAD/docs/README-cn.md#%E6%8F%92%E4%BB%B6" target="_blank" rel="noreferrer">postcss/README-cn.md at postcss/postcss (github.com)</a></p><ul><li><p><strong>Autoprefixer</strong>：是一个根据can i use解析css并且为其添加浏览器厂商前缀的PostCSS插件</p><ul><li><p>npm文档：<a href="https://www.npmjs.com/package/autoprefixer" target="_blank" rel="noreferrer">autoprefixer - npm (npmjs.com)</a></p></li><li><p>GitHub开源文档：<a href="https://github.com/postcss/autoprefixer#readme" target="_blank" rel="noreferrer">postcss/autoprefixer：解析CSS并将供应商前缀添加到规则中(github.com)</a></p><ul><li><p>不加任何vender prefix的通常写法。</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">::placeholder</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    color: </span><span style="color:#D19A66;">gray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Autoprefixer将使用基于当前浏览器支持的特性和属性数据去为你添加前缀。你可以尝试下Autoprefixer的demo：<a href="http://autoprefixer.github.io/" target="_blank" rel="noreferrer">Autoprefixer CSS online</a></p></li></ul></li></ul></li><li><p>postcss-import：模块合并</p><ul><li>npm文档：<a href="https://www.npmjs.com/package/postcss-import" target="_blank" rel="noreferrer">postcss-import - npm (npmjs.com)</a></li></ul></li><li><p>cssnano：CSS代码压缩，分析没有引用或者不起作用的CSS代码，重复的属性，有可以简写的方式，便会简写</p></li><li><p>cssnext：使用新的CSS特性，编译使用（被弃用，改用<a href="http://preset-env.cssdb.org/" target="_blank" rel="noreferrer"><code>postcss-preset-env</code></a>）</p><ul><li><p>官网：<a href="https://cssnext.github.io/" target="_blank" rel="noreferrer">cssnext</a></p></li><li><p>npm文档：<a href="https://www.npmjs.com/package/cssnano" target="_blank" rel="noreferrer">CSSNANO - npm (npmjs.com)</a></p></li></ul></li><li><p>postcss-preset-env：</p><ul><li><p>官网：<a href="https://preset-env.cssdb.org/" target="_blank" rel="noreferrer">PostCSS Preset Env - CSSTools (cssdb.org)</a></p></li><li><p>npm文档：<a href="https://www.npmjs.com/package/postcss-preset-env" target="_blank" rel="noreferrer">postcss-preset-env - npm (npmjs.com)</a></p></li></ul></li></ul><h2 id="方案2-css预处理器" tabindex="-1">方案2：CSS预处理器 <a class="header-anchor" href="#方案2-css预处理器" aria-label="Permalink to &quot;方案2：CSS预处理器&quot;">​</a></h2><p>如sass、less、stylus等，在下一篇幅笔记文档：CSS预处理器</p><h2 id="方案3-webpack等打包构建工具" tabindex="-1">方案3：webpack等打包构建工具 <a class="header-anchor" href="#方案3-webpack等打包构建工具" aria-label="Permalink to &quot;方案3：webpack等打包构建工具&quot;">​</a></h2><p>webpack处理css(css-loader：打包CSS成js + style-loader：把CSS注入到html的head里面)</p><p>具体请看笔记文档：<strong>前端工程化/自动化 - 项目打包构建工具</strong> 的文档</p>`,28)]))}const h=a(r,[["render",o]]);export{b as __pageData,h as default};
