import{_ as n,c as a,o as p,ah as l}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"Tauri 开发的应用实现插件化机制","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Tauri框架/Tauri开发的应用实现插件化机制.md","filePath":"Document/跨平台桌面端开发/Tauri框架/Tauri开发的应用实现插件化机制.md","lastUpdated":1750954157000}'),e={name:"Document/跨平台桌面端开发/Tauri框架/Tauri开发的应用实现插件化机制.md"};function o(r,s,t,c,B,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="tauri-开发的应用实现插件化机制" tabindex="-1">Tauri 开发的应用实现插件化机制 <a class="header-anchor" href="#tauri-开发的应用实现插件化机制" aria-label="Permalink to &quot;Tauri 开发的应用实现插件化机制&quot;">​</a></h1><p>Tauri 是一个强大的多语言通用工具包，允许工程师构建各种应用程序。它使用 Rust 工具和 Webview 中呈现的 HTML 的组合来构建桌面应用程序。后端使用 Rust 与系统进行交互，如获取系统信息、系统通知、系统文件等。包装成 Tauri 插件后，会暴露出 JavaScript API 供前端使用，通过 Webview 进行消息传递来控制系统。</p><p>使用 tauri 开发应用，应用内部实现 API，可以供其他开发者调用 API 实现插件化机制，基于我的应用开发插件嵌入我的应用使用。有哪些实现思路？思路用代码怎么实现？</p><p>基于tauri实现的工具集合应用，支持插件安装：</p><ul><li>源码：<a href="https://github.com/feint123/dtools/tree/dev" target="_blank" rel="noreferrer">https://github.com/feint123/dtools/tree/dev</a></li><li>视频：<a href="https://www.bilibili.com/video/BV13r4y157sg/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV13r4y157sg/</a></li></ul><h2 id="tauri-实现思路以及如何用代码实现" tabindex="-1">Tauri 实现思路以及如何用代码实现： <a class="header-anchor" href="#tauri-实现思路以及如何用代码实现" aria-label="Permalink to &quot;Tauri 实现思路以及如何用代码实现：&quot;">​</a></h2><p>tauri 文档：<a href="https://tauri.app/zh-cn/v1/guides/features/plugin/" target="_blank" rel="noreferrer">Tauri 插件 | Tauri Apps</a></p><p><strong>插件化机制</strong>：为了实现插件化机制，可以考虑以下方法：</p><ul><li><strong>插件注册和加载</strong>：在应用启动时，动态加载插件。插件可以是单独的 Rust 模块或者 JavaScript 文件。你可以在应用的配置中指定要加载的插件列表。</li><li><strong>插件接口定义</strong>：定义一个标准的插件接口，包括插件的生命周期方法（例如初始化、销毁、处理消息等）。插件必须实现这些接口方法。</li><li><strong>插件通信</strong>：使用 Webview 进行插件之间的通信。插件可以通过 Webview 发送消息给其他插件或应用本身。</li></ul><p><strong>代码示例</strong>：下面是一个简单的示例，展示如何创建一个 Tauri 插件并实现插件化机制：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个插件</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tauri</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">plugin</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TauriPlugin</span><span style="color:#ABB2BF;">}, </span><span style="color:#E5C07B;">Runtime</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 自定义插件命令处理函数</span></span>
<span class="line"><span style="color:#ABB2BF;">#[tauri::command]</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> initialize</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 插件初始化逻辑</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tauri::command]</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> do_something</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 插件处理逻辑</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Runtime</span><span style="color:#ABB2BF;">&gt;() -&gt; </span><span style="color:#E5C07B;">TauriPlugin</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;awesome&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">invoke_handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">generate_handler!</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">initialize</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">do_something</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在你的应用中，你可以这样使用插件：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">my_awesome_plugin</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">generate_context!</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">expect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;failed to run app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="基于-rust-的实现思路" tabindex="-1">基于 Rust 的实现思路： <a class="header-anchor" href="#基于-rust-的实现思路" aria-label="Permalink to &quot;基于 Rust 的实现思路：&quot;">​</a></h2><h2 id="思路一-使用-tauri-提供的插件系统-来实现-tauri-的应用内部-api-和插件化机制。" tabindex="-1">思路一：使用 Tauri 提供的插件系统，来实现 Tauri 的应用内部 API 和插件化机制。 <a class="header-anchor" href="#思路一-使用-tauri-提供的插件系统-来实现-tauri-的应用内部-api-和插件化机制。" aria-label="Permalink to &quot;思路一：使用 Tauri 提供的插件系统，来实现 Tauri 的应用内部 API 和插件化机制。&quot;">​</a></h2><p>这种思路的优点是，你可以利用 Tauri 已经封装好的插件构建器和调用处理器，来方便地定义和使用你的插件。</p><p>你的插件可以使用 Tauri 的内置 API，也可以自定义自己的命令和状态。你的插件还可以提供一个 JavaScript 包，来让其他开发者在 Web 端调用你的插件提供的功能。</p><p>这种思路的缺点是，你的插件需要遵循 Tauri 的插件规范，可能会受到一些限制或约束。你的插件也需要和 Tauri 的版本保持一致，否则可能会出现兼容性问题。</p><p>这种思路的代码示例大致如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的插件定义</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tauri</span><span style="color:#ABB2BF;">::{ </span><span style="color:#E5C07B;">plugin</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TauriPlugin</span><span style="color:#ABB2BF;">}, </span><span style="color:#E5C07B;">Runtime</span><span style="color:#ABB2BF;">, };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的自定义命令</span></span>
<span class="line"><span style="color:#ABB2BF;">#[tauri::command]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这个命令可以让其他插件获取你的应用的信息</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> get_app_info</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以返回你的应用的名称、版本、描述等信息</span></span>
<span class="line"><span style="color:#98C379;">  &quot;My App Info&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tauri::command]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这个命令可以让其他插件执行你的应用的某个功能</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> do_something</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以执行你的应用的某个功能，例如打开一个窗口、发送一个通知等</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Runtime</span><span style="color:#ABB2BF;">&gt;() -&gt; </span><span style="color:#E5C07B;">TauriPlugin</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">  Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;my_app_api&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">invoke_handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">generate_handler!</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">get_app_info</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">do_something</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用的主函数，你需要将你的应用内部 API 的插件实例传递给应用程序的 plugin 方法</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">  tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">plugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">my_app_api</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">generate_context!</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">expect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;failed to run app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的 JavaScript 包，你可以将它发布到 npm 上，让其他开发者在 Web 端调用你的应用内部 API</span></span>
<span class="line"><span style="color:#E06C75;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">invoke</span><span style="color:#ABB2BF;"> } </span><span style="color:#E06C75;">from</span><span style="color:#98C379;"> &#39;@tauri-apps/api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">export</span><span style="color:#C678DD;"> async</span><span style="color:#E06C75;"> function</span><span style="color:#61AFEF;"> getAppInfo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#61AFEF;"> invoke</span><span style="color:#ABB2BF;">(&#39;</span><span style="color:#E5C07B;">plugin</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">my_app_api</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">get_app_info</span><span style="color:#98C379;">&#39;)</span></span>
<span class="line"><span style="color:#98C379;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">export async function doSomething() {</span></span>
<span class="line"><span style="color:#98C379;">  return invoke(&#39;</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">my_app_api</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">do_something</span><span style="color:#98C379;">&#39;)</span></span>
<span class="line"><span style="color:#98C379;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>基于你的应用内部 API 开发的插件的示例</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是一个基于你的应用内部 API 开发的插件的示例</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tauri</span><span style="color:#ABB2BF;">::{ </span><span style="color:#E5C07B;">plugin</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TauriPlugin</span><span style="color:#ABB2BF;">}, </span><span style="color:#E5C07B;">Runtime</span><span style="color:#ABB2BF;">, };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的插件的自定义命令</span></span>
<span class="line"><span style="color:#ABB2BF;">#[tauri::command]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这个命令可以调用你的应用内部 API 的 get_app_info 命令，获取你的应用的信息</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> get_my_app_info</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Runtime</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">_app</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AppHandle</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以使用 tauri::execute_promise 来异步调用你的应用内部 API 的命令</span></span>
<span class="line"><span style="color:#E5C07B;">  tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">execute_promise</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">    _app</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // the argument passed to the Rust command</span></span>
<span class="line"><span style="color:#C678DD;">    move</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // invoke your app api command here</span></span>
<span class="line"><span style="color:#61AFEF;">      invoke</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_app_api|get_app_info&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // the callback on resolve</span></span>
<span class="line"><span style="color:#56B6C2;">    |</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">info</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // do something with the info here</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // the callback on reject</span></span>
<span class="line"><span style="color:#56B6C2;">    |</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // handle the error here</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tauri::command]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这个命令可以调用你的应用内部 API 的 do_something 命令，执行你的应用的某个功能</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> do_something_with_my_app</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Runtime</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">_app</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AppHandle</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以使用 tauri::execute_promise 来异步调用你的应用内部 API 的命令</span></span>
<span class="line"><span style="color:#E5C07B;">  tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">execute_promise</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">    _app</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // the argument passed to the Rust command</span></span>
<span class="line"><span style="color:#C678DD;">    move</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // invoke your app api command here</span></span>
<span class="line"><span style="color:#61AFEF;">      invoke</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_app_api|do_something&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // the callback on resolve</span></span>
<span class="line"><span style="color:#56B6C2;">    |</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">result</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // do something with the result here</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // the callback on reject</span></span>
<span class="line"><span style="color:#56B6C2;">    |</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // handle the error here</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Runtime</span><span style="color:#ABB2BF;">&gt;() -&gt; </span><span style="color:#E5C07B;">TauriPlugin</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">R</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">  Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;my_plugin&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">invoke_handler</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tauri</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">generate_handler!</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">get_my_app_info</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">do_something_with_my_app</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h2 id="思路二-使用-rust-的动态库机制-来实现你的应用内部-api-和插件化机制。" tabindex="-1">思路二：使用 Rust 的动态库机制，来实现你的应用内部 API 和插件化机制。 <a class="header-anchor" href="#思路二-使用-rust-的动态库机制-来实现你的应用内部-api-和插件化机制。" aria-label="Permalink to &quot;思路二：使用 Rust 的动态库机制，来实现你的应用内部 API 和插件化机制。&quot;">​</a></h2><p>这种思路的优点是，你可以自由地定义和实现你的应用内部 API 和插件，不受 Tauri 的插件规范的限制或约束。</p><p>你的插件可以使用任何 Rust 的库或框架，也可以使用其他语言编写，只要能够编译成动态库。</p><p>你的插件也不需要和 Tauri 的版本保持一致，只要能够和你的应用内部 API 兼容。</p><p>这种思路的缺点是，你需要自己处理动态库的加载和调用，可能会遇到一些复杂或棘手的问题，例如平台差异、内存安全、错误处理等。你的插件也不能提供一个 JavaScript 包，让其他开发者在 Web 端调用你的插件提供的功能，而需要通过你的应用内部 API 来进行中转。</p><p>这种思路的代码示例大致如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的动态库定义</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">ffi</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">CString</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">os</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">raw</span><span style="color:#ABB2BF;">::{c_char, c_int};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的接口类型，你可以根据你的需要自定义</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> AppInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> *</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> c_char</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> AppResult</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c_int</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的接口函数，你可以根据你的需要自定义</span></span>
<span class="line"><span style="color:#ABB2BF;">#[no_mangle]</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> extern</span><span style="color:#98C379;"> &quot;C&quot;</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> get_app_info</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">AppInfo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以返回你的应用的名称、版本、描述等信息</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> info</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;My App Info&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> c_info</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> CString</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">  c_info</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">into_raw</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[no_mangle]</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> extern</span><span style="color:#98C379;"> &quot;C&quot;</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> do_something</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">AppResult</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以执行你的应用的某个功能，例如打开一个窗口、发送一个通知等</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以返回你的应用的执行结果，例如成功或失败的状态码</span></span>
<span class="line"><span style="color:#D19A66;">  0</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>应用的主函数，你需要将你的应用内部 API 的动态库加载到你的应用中，然后将它传递给你的插件</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用的主函数，你需要将你的应用内部 API 的动态库加载到你的应用中，然后将它传递给你的插件</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> libloading</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Library</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里可以加载你的应用内部 API 的动态库，例如 libmy_app_api.so</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> app_api_lib</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Library</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;libmy_app_api.so&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里可以获取你的应用内部 API 的接口函数的符号，例如 get_app_info 和 do_something</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> get_app_info</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">unsafe</span><span style="color:#C678DD;"> extern</span><span style="color:#ABB2BF;"> &quot;</span><span style="color:#E5C07B;">C</span><span style="color:#ABB2BF;">&quot; </span><span style="color:#C678DD;">fn</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">AppInfo</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#C678DD;">        unsafe</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">app_api_lib</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">b&quot;get_app_info&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">() };</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> do_something</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">unsafe</span><span style="color:#C678DD;"> extern</span><span style="color:#ABB2BF;"> &quot;</span><span style="color:#E5C07B;">C</span><span style="color:#ABB2BF;">&quot; </span><span style="color:#C678DD;">fn</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">AppResult</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#C678DD;">        unsafe</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">app_api_lib</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">b&quot;do_something&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">() };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里可以调用你的应用内部 API 的接口函数，例如获取你的应用的信息、执行你的应用的某个功能等</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> app_info</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> unsafe</span><span style="color:#ABB2BF;"> { </span><span style="color:#61AFEF;">get_app_info</span><span style="color:#ABB2BF;">() };</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> app_result</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> unsafe</span><span style="color:#ABB2BF;"> { </span><span style="color:#61AFEF;">do_something</span><span style="color:#ABB2BF;">() };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里可以将你的应用内部 API 的接口函数的符号传递给你的插件，例如 my_plugin</span></span>
<span class="line"><span style="color:#E5C07B;">    my_plugin</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">init</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">get_app_info</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">do_something</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>基于你的应用内部 API 开发的插件的定义：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是一个基于你的应用内部 API 开发的插件的定义</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">ffi</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">CStr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">os</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">raw</span><span style="color:#ABB2BF;">::{c_char, c_int};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的接口类型，你可以根据你的需要自定义</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> AppInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> *</span><span style="color:#C678DD;">const</span><span style="color:#E06C75;"> c_char</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> AppResult</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> c_int</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的插件的初始化函数，你可以根据你的需要自定义</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">    get_app_info</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">unsafe</span><span style="color:#C678DD;"> extern</span><span style="color:#98C379;"> &quot;C&quot;</span><span style="color:#C678DD;"> fn</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">AppInfo</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    do_something</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">unsafe</span><span style="color:#C678DD;"> extern</span><span style="color:#98C379;"> &quot;C&quot;</span><span style="color:#C678DD;"> fn</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">AppResult</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里可以调用你的应用内部 API 的接口函数，例如获取你的应用的信息、执行你的应用的某个功能等</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> app_info</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> unsafe</span><span style="color:#ABB2BF;"> { </span><span style="color:#61AFEF;">get_app_info</span><span style="color:#ABB2BF;">() };</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> app_result</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> unsafe</span><span style="color:#ABB2BF;"> { </span><span style="color:#61AFEF;">do_something</span><span style="color:#ABB2BF;">() };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里可以打印或处理你的应用内部 API 的返回值，例如转换成 Rust 的类型或字符串等</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> app_info_str</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> unsafe</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">CStr</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_ptr</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app_info</span><span style="color:#ABB2BF;">) }.</span><span style="color:#61AFEF;">to_str</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;App info: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">app_info_str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;App result: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">app_result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="基于前端-js-代码的实现思路" tabindex="-1">基于前端 JS 代码的实现思路： <a class="header-anchor" href="#基于前端-js-代码的实现思路" aria-label="Permalink to &quot;基于前端 JS 代码的实现思路：&quot;">​</a></h2><h2 id="思路一-使用-tauri-提供的-invoke-api-来实现你的应用内部-api-和插件化机制。" tabindex="-1"><strong>思路一</strong>：使用 Tauri 提供的 invoke API，来实现你的应用内部 API 和插件化机制。 <a class="header-anchor" href="#思路一-使用-tauri-提供的-invoke-api-来实现你的应用内部-api-和插件化机制。" aria-label="Permalink to &quot;**思路一**：使用 Tauri 提供的 invoke API，来实现你的应用内部 API 和插件化机制。&quot;">​</a></h2><p>这种思路的优点是，你可以利用 Tauri 已经封装好的 invoke API，来方便地从 Web 端调用你的应用内部 API 或插件提供的命令。</p><p>你的应用内部 API 或插件可以使用 Tauri 的内置 API，也可以自定义自己的命令和状态。</p><p>你的应用内部 API 或插件还可以提供一个 JavaScript 包，来让其他开发者在 Web 端调用你的应用内部 API 或插件提供的功能。</p><p>这种思路的缺点是，你的应用内部 API 或插件需要遵循 Tauri 的插件规范，可能会受到一些限制或约束。你的应用内部 API 或插件也需要和 Tauri 的版本保持一致，否则可能会出现兼容性问题。</p><p>这种思路的代码示例大致如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的 JavaScript 包，你可以将它发布到 npm 上，让其他开发者在 Web 端调用你的应用内部 API</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">invoke</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@tauri-apps/api&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> getAppInfo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> invoke</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_app_api|get_app_info&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> invoke</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_app_api|do_something&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这是一个基于你的应用内部 API 开发的插件的 JavaScript 包，你可以将它发布到 npm 上，让其他开发者在 Web 端调用你的插件提供的功能：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是一个基于你的应用内部 API 开发的插件的 JavaScript 包，你可以将它发布到 npm 上，让其他开发者在 Web 端调用你的插件提供的功能</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">invoke</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@tauri-apps/api&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> getMyAppInfo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> invoke</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_plugin|get_my_app_info&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> doSomethingWithMyApp</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> invoke</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_plugin|do_something_with_my_app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这是你的 Web 端的代码，你可以使用你的应用内部 API 或插件提供的 JavaScript 包，来调用你的应用内部 API 或插件提供的功能</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的 Web 端的代码，你可以使用你的应用内部 API 或插件提供的 JavaScript 包，来调用你的应用内部 API 或插件提供的功能</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">getAppInfo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">doSomething</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;my-app-api&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">getMyAppInfo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">doSomethingWithMyApp</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;my-plugin&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以调用你的应用内部 API 或插件提供的功能，例如获取你的应用的信息、执行你的应用的某个功能等</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> appInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> getAppInfo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">appInfo</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> myAppInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> getMyAppInfo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myAppInfo</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> doSomethingWithMyApp</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="思路二-使用-tauri-提供的-event-api-来实现你的应用内部-api-和插件化机制。" tabindex="-1"><strong>思路二</strong>：使用 Tauri 提供的 event API，来实现你的应用内部 API 和插件化机制。 <a class="header-anchor" href="#思路二-使用-tauri-提供的-event-api-来实现你的应用内部-api-和插件化机制。" aria-label="Permalink to &quot;**思路二**：使用 Tauri 提供的 event API，来实现你的应用内部 API 和插件化机制。&quot;">​</a></h2><p>这种思路的优点是，你可以利用 Tauri 已经封装好的 event API，来方便地从 Web 端监听和触发你的应用内部 API 或插件提供的事件。</p><p>你的应用内部 API 或插件可以使用 Tauri 的内置 API，也可以自定义自己的事件和状态。</p><p>你的应用内部 API 或插件还可以提供一个 JavaScript 包，来让其他开发者在 Web 端监听和触发你的应用内部 API 或插件提供的事件。</p><p>这种思路的缺点是，你的应用内部 API 或插件需要遵循 Tauri 的插件规范，可能会受到一些限制或约束。你的应用内部 API 或插件也需要和 Tauri 的版本保持一致，否则可能会出现兼容性问题。</p><p>这种思路的代码示例大致如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的 JavaScript 包，你可以将它发布到 npm 上，让其他开发者在 Web 端调用你的应用内部 API</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@tauri-apps/api&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> getAppInfo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以触发你的应用内部 API 的 get_app_info 事件，让你的应用返回你的应用的信息</span></span>
<span class="line"><span style="color:#E5C07B;">	event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_app_api|get_app_info&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以监听你的应用内部 API 的 app_info 事件，获取你的应用返回的信息</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listenOnce</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_app_api|app_info&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">info</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以触发你的应用内部 API 的 do_something 事件，让你的应用执行你的应用的某个功能</span></span>
<span class="line"><span style="color:#E5C07B;">	event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_app_api|do_something&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以监听你的应用内部 API 的 app_result 事件，获取你的应用返回的结果</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listenOnce</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_app_api|app_result&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这是一个基于你的应用内部 API 开发的插件的 JavaScript 包，你可以将它发布到 npm 上，让其他开发者在 Web 端调用你的插件提供的功能</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是一个基于你的应用内部 API 开发的插件的 JavaScript 包，你可以将它发布到 npm 上，让其他开发者在 Web 端调用你的插件提供的功能</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;@tauri-apps/api&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> getMyAppInfo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以触发你的插件的 get_my_app_info 事件，让你的插件调用你的应用内部 API 的 get_app_info 事件，获取你的应用的信息</span></span>
<span class="line"><span style="color:#E5C07B;">	event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_plugin|get_my_app_info&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以监听你的插件的 my_app_info 事件，获取你的插件返回的信息</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listenOnce</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_plugin|my_app_info&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">info</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> doSomethingWithMyApp</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以触发你的插件的 do_something_with_my_app 事件，让你的插件调用你的应用内部 API 的 do_something 事件，执行你的应用的某个功能</span></span>
<span class="line"><span style="color:#E5C07B;">	event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">emit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_plugin|do_something_with_my_app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以监听你的插件的 my_app_result 事件，获取你的插件返回的结果</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listenOnce</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;plugin:my_plugin|my_app_result&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">			resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这是你的 Web 端的代码，你可以使用你的应用内部 API 或插件提供的 JavaScript 包，来调用你的应用内部 API 或插件提供的功能</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的 Web 端的代码，你可以使用你的应用内部 API 或插件提供的 JavaScript 包，来调用你的应用内部 API 或插件提供的功能</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">getAppInfo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">doSomething</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;my-app-api&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">getMyAppInfo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">doSomethingWithMyApp</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;my-plugin&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以调用你的应用内部 API 或插件提供的功能，例如获取你的应用的信息、执行你的应用的某个功能等</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> appInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> getAppInfo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">appInfo</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> myAppInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> getMyAppInfo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myAppInfo</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	await</span><span style="color:#61AFEF;"> doSomethingWithMyApp</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="思路三-使用-webassembly-来实现你的应用内部-api-和插件化机制。" tabindex="-1">思路三：使用 WebAssembly，来实现你的应用内部 API 和插件化机制。 <a class="header-anchor" href="#思路三-使用-webassembly-来实现你的应用内部-api-和插件化机制。" aria-label="Permalink to &quot;思路三：使用 WebAssembly，来实现你的应用内部 API 和插件化机制。&quot;">​</a></h2><p>这种思路的优点是，你可以利用 WebAssembly 的跨平台和高性能的特性，来编写和运行你的应用内部 API 和插件。</p><p>你的应用内部 API 和插件可以使用任何支持编译成 WebAssembly 的语言，例如 Rust、C、C++ 等。</p><p>你的应用内部 API 和插件也不需要和 Tauri 的版本保持一致，只要能够和你的 Web 端兼容。</p><p>这种思路的缺点是，你需要自己处理 WebAssembly 的编译和加载，可能会遇到一些复杂或棘手的问题，例如模块化、内存管理、错误处理等。</p><p>你的应用内部 API 和插件也不能提供一个 JavaScript 包，让其他开发者在 Web 端调用你的应用内部 API 或插件提供的功能，而需要通过 WebAssembly 的导入和导出来进行交互。</p><p>这种思路的代码示例大致如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的 WebAssembly 模块定义，你可以使用 Rust 或其他支持编译成 WebAssembly 的语言来编写</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> wasm_bindgen</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">prelude</span><span style="color:#ABB2BF;">::*;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的应用内部 API 的导出函数，你可以根据你的需要自定义</span></span>
<span class="line"><span style="color:#ABB2BF;">#[wasm_bindgen]</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> get_app_info</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以返回你的应用的名称、版本、描述等信息</span></span>
<span class="line"><span style="color:#98C379;">  &quot;My App Info&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[wasm_bindgen]</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> do_something</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以执行你的应用的某个功能，例如打开一个窗口、发送一个通知等</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以返回你的应用的执行结果，例如成功或失败的状态码</span></span>
<span class="line"><span style="color:#D19A66;">  0</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>基于你的应用内部 API 开发的插件的 WebAssembly 模块定义，你可以使用 Rust 或其他支持编译成 WebAssembly 的语言来编写：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是一个基于你的应用内部 API 开发的插件的 WebAssembly 模块定义，你可以使用 Rust 或其他支持编译成 WebAssembly 的语言来编写</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> wasm_bindgen</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">prelude</span><span style="color:#ABB2BF;">::*;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的插件的导入函数，你可以根据你的需要自定义</span></span>
<span class="line"><span style="color:#ABB2BF;">#[wasm_bindgen(module </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;/my_app_api.wasm&quot;</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#98C379;"> &quot;C&quot;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  fn</span><span style="color:#61AFEF;"> get_app_info</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  fn</span><span style="color:#61AFEF;"> do_something</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的插件的导出函数，你可以根据你的需要自定义</span></span>
<span class="line"><span style="color:#ABB2BF;">#[wasm_bindgen]</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> get_my_app_info</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以调用你的应用内部 API 的 get_app_info 函数，获取你的应用的信息</span></span>
<span class="line"><span style="color:#61AFEF;">  get_app_info</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[wasm_bindgen]</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> do_something_with_my_app</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 这里可以调用你的应用内部 API 的 do_something 函数，执行你的应用的某个功能</span></span>
<span class="line"><span style="color:#61AFEF;">  do_something</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>Web 端的代码，你可以使用 WebAssembly 的 API，来加载和调用你的应用内部 API 或插件提供的 WebAssembly 模块：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是你的 Web 端的代码，你可以使用 WebAssembly 的 API，来加载和调用你的应用内部 API 或插件提供的 WebAssembly 模块</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以加载你的应用内部 API 的 WebAssembly 模块，例如 my_app_api.wasm</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> appApiModule</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> WebAssembly</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">instantiateStreaming</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">		fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;my_app_api.wasm&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以加载你的插件的 WebAssembly 模块，例如 my_plugin.wasm</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> pluginModule</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> WebAssembly</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">instantiateStreaming</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">		fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;my_plugin.wasm&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这里可以调用你的应用内部 API 或插件提供的功能，例如获取你的应用的信息、执行你的应用的某个功能等</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> appInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> appApiModule</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_app_info</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">appInfo</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> appResult</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> appApiModule</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">do_something</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">appResult</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> myAppInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pluginModule</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_my_app_info</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myAppInfo</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> myAppResult</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> pluginModule</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">do_something_with_my_app</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">myAppResult</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>`,68)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
