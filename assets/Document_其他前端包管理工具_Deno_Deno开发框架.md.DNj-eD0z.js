import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/image-20240314143332025.DIgfyO7o.png",o="/FrontEndLearnNotes/assets/image-20240314144329146.D1VR1qwh.png",t="/FrontEndLearnNotes/assets/image-20240314144355347.XI2k2mHa.png",r="/FrontEndLearnNotes/assets/image-20240314144436510.Dht7yen4.png",c="/FrontEndLearnNotes/assets/image-20240314144507666.D-5JY8oG.png",i="/FrontEndLearnNotes/assets/image-20240314144531127.5yp9JGM-.png",B="/FrontEndLearnNotes/assets/image-20240314144553365.DffA8NUC.png",y="/FrontEndLearnNotes/assets/image-20240314144642967.CDS-gz1_.png",E=JSON.parse('{"title":"Deno 开发框架","description":"","frontmatter":{},"headers":[],"relativePath":"Document/其他前端包管理工具/Deno/Deno开发框架.md","filePath":"Document/其他前端包管理工具/Deno/Deno开发框架.md","lastUpdated":1750954157000}'),u={name:"Document/其他前端包管理工具/Deno/Deno开发框架.md"};function d(b,s,C,m,F,h){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="deno-开发框架" tabindex="-1">Deno 开发框架 <a class="header-anchor" href="#deno-开发框架" aria-label="Permalink to &quot;Deno 开发框架&quot;">​</a></h1><h2 id="fresh-全栈开发框架" tabindex="-1">Fresh 全栈开发框架 <a class="header-anchor" href="#fresh-全栈开发框架" aria-label="Permalink to &quot;Fresh 全栈开发框架&quot;">​</a></h2><h3 id="fresh-简介" tabindex="-1">Fresh 简介 <a class="header-anchor" href="#fresh-简介" aria-label="Permalink to &quot;Fresh 简介&quot;">​</a></h3><p><strong>Fresh 官网</strong>：<a href="https://fresh.deno.dev/" target="_blank" rel="noreferrer">https://fresh.deno.dev/</a></p><p>下一代 Web 全栈开发框架。</p><p>Fresh 是一个面向 JavaScript 和 TypeScript 开发人员的全栈现代 Web 框架，旨在创建高质量、高性能和个性化的 Web 应用程序变得轻而易举。以下是关于 Fresh 的一些特点：</p><ul><li>基于 Deno 运行时：Fresh 由 Deno 原班人马开发，享有 Deno 一系列工具链和生态的优势，比如内置的测试工具、支持 http、import 等等。</li><li>Islands SSR 架构：Fresh 整体采用 Islands SSR 架构，实现了客户端按需 Hydration，有一定的渲染性能优势。</li><li>Bundle-less 构建：Fresh 的构建层做到了 Bundle-less，即应用代码不需要打包即可直接部署上线。</li><li>前端渲染层由 Preact 完成：包括 Islands 架构的实现也是基于 Preact，且不支持其它前端框架。</li></ul><p>可以说，Fresh 中凝结这 Deno 对 ES 语系开发的理解，是他们技术的结晶。</p><h3 id="_1-创建项目" tabindex="-1">1.创建项目 <a class="header-anchor" href="#_1-创建项目" aria-label="Permalink to &quot;1.创建项目&quot;">​</a></h3><p>再终端直接运行</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 创建项目</span></span>
<span class="line"><span style="color:#61AFEF;">deno</span><span style="color:#98C379;"> run</span><span style="color:#D19A66;"> -A</span><span style="color:#D19A66;"> -r</span><span style="color:#98C379;"> https://fresh.deno.dev</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 进入目录</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> fresh-project</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 运行项目</span></span>
<span class="line"><span style="color:#61AFEF;">deno</span><span style="color:#98C379;"> task</span><span style="color:#98C379;"> start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-项目结构" tabindex="-1">2.项目结构 <a class="header-anchor" href="#_2-项目结构" aria-label="Permalink to &quot;2.项目结构&quot;">​</a></h3><p>在运行项目以后，目录结构如下</p><p><img src="`+e+`" alt="image-20240314143332025"></p><p>根目录文件：</p><ul><li><code>dev.ts</code> 开发环境入口点，启动项目用的，名字可以改变，但是一般都是这个名字。</li><li><code>main.ts</code> 生产环境入口点，启动项目用的，名字可以改变，但是一般都是这个名字。</li><li><code>fresh.gen.ts</code> 清单文件，包括 routes 和 islands，是自动生成的。</li><li><code>deno.json</code> 是 deno 的配置文件，和 package.json 类似，用来管理依赖以及 deno cli 命令的。</li></ul><p>根目录文件夹：</p><ul><li><code>routes</code> 存放你项目中的路由。</li><li><code>islands</code> 作用就相当于页面之于组件，但中的来说是组件的封装。</li><li><code>components</code> 存放组件相关代码。</li><li><code>static</code> 存放静态文件，js、css 等文件都放在这里。</li></ul><blockquote><p>islands 和 components 是不一样的，后者更像是 Web Component，而前者更像我们常规开发中的 Component。</p></blockquote><h3 id="_3-创建一个路由" tabindex="-1">3.创建一个路由 <a class="header-anchor" href="#_3-创建一个路由" aria-label="Permalink to &quot;3.创建一个路由&quot;">​</a></h3><p>Fresh 使用的是文件系统路由，对于经常使用电脑的人来说，这个概念会比较容易理解，如果你使用的是 Linux 的画就会更加容易理解，如果你使用的是 Windows，同样也很容易就能理解。</p><ul><li><p>文件系统路由是操作系统中的一个重要概念，它用于管理和组织计算机中的文件和文件夹。文件系统路由可以帮助我们在计算机上查找、访问和操作存储在不同位置的文件。</p></li><li><p>在 Linux 操作系统中，文件系统路由是通过 Linux 文件系统层次结构来实现的。在 Linux 中，根目录以斜杠（/）表示，所有其他文件和文件夹都是在根目录下的子目录。例如，如果我们要访问根目录下的名为“home”的文件夹，就可以使用路径“/home”。同样，如果要访问“home”文件夹下的“user1”的文件夹，可以使用路径“/home/user1”。</p></li><li><p>在 Windows 操作系统中，文件系统路由是通过驱动器和文件路径来实现的。Windows 操作系统使用字母来表示驱动器。例如，C:\\是计算机上的一个驱动器，它通常用于存储操作系统和应用程序。在 Windows 中，我们可以使用驱动器和文件夹路径来访问文件。例如，如果要访问 C:\\下的“Users”文件夹，可以使用路径“C:\\Users”。同样，如果要访问“Users”文件夹下的“user1”的文件夹，可以使用路径“C:\\Users\\user1”。</p></li><li><p>在这两个操作系统中，文件系统路由允许我们在计算机上轻松浏览和访问文件和文件夹。通过使用正确的路径，我们可以快速找到所需的文件，进行复制、粘贴、移动或删除等操作。</p></li></ul><p>假设我们有一个文件路由系统，用于管理和导航文件夹和文件。该系统可以通过一系列文件夹和子文件夹来组织文件。</p><p>例如，我们有一个名为“根文件夹”的文件夹，其中包含以下几个子文件夹：文件夹 A、文件夹 B 和文件夹 C。在文件夹 A 中，我们有一个名为“文件 1”的文件和一个名为“文件 2”的文件。在文件夹 B 中，我们有一个名为“文件 3”的文件。</p><p>根文件夹</p><ul><li><p>文件夹 A</p><ul><li>文件 1</li><li>文件 2</li></ul></li><li><p>文件夹 B</p><ul><li>文件 3</li></ul></li><li><p>文件夹 C</p></li></ul><p>这是一个简单的示例，展示了文件路由系统中文件夹和文件的层次结构。</p><p>而在 Fresh 项目中，你可以将 <code>routes</code> 文件夹作为根目录，下面的文件用来路由。此时如果添加一个 <code>/about</code> 的页面，只需要创建个 <code>about.tsx</code> 文件即可</p><blockquote><p>Fresh 使用了 jsx，因此只需要返回你的 html 内容就可以了，和 react 是一样的，但是 fresh 没有用 react，而是用的 preact，这两者再用法上几乎没区别。</p></blockquote><p>保存后可以直接在浏览器打开(默认是热更新启动的)：localhost:8000/about</p><h3 id="_4-创建一个动态路由" tabindex="-1">4. 创建一个动态路由 <a class="header-anchor" href="#_4-创建一个动态路由" aria-label="Permalink to &quot;4. 创建一个动态路由&quot;">​</a></h3><p>动态路由即需要传递参数，根据输入的参数来动态的生成页面的路由。</p><p>在 Fresh 中，默认提供了匹配路径参数的动态路由 <code>greet</code> 文件夹</p><p>其中<code>name</code>为需要传递的参数，其文件内容为：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">PageProps</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;$fresh/server.ts&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> GreetPage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">props</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PageProps</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> props</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E5C07B;">main</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">Greetings</span><span style="color:#E06C75;"> to</span><span style="color:#E06C75;font-style:italic;"> you</span><span style="color:#ABB2BF;">, {</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">}</span><span style="color:#56B6C2;">!&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">		&lt;/</span><span style="color:#E06C75;">main</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>可以看出路径参数是通过 props 对象的 params 来获取的。</p><p>比如要给 name 传 haha，则访问</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">http://localhost:8000/greet/haha</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5-自定义-handlers" tabindex="-1">5.自定义 handlers <a class="header-anchor" href="#_5-自定义-handlers" aria-label="Permalink to &quot;5.自定义 handlers&quot;">​</a></h3><p>hanldler 是一个路由的处理程序，可以有一个 hanldler 覆盖所有 HTTP 方法，也可以每个方法有一个 hanldler。hanldler 的作用是 Request =&gt; Response</p><p>hanldler 必须返回一个 Response 对象。Response 对象可以手动创建（例如 API 路由的 JSON 响应），也可以通过呈现页面组件来创建。默认情况下，所有未定义自定义处理程序的路由都使用仅呈现页面组件的默认处理程序。</p><p>创建 handler 只需要定义一个 handler 对象并导出就可以了，handler 可以是纯函数，也可以是纯对象。</p><p>以下是官方给出的两个例子</p><h4 id="_1-自定义响应头" tabindex="-1">1.自定义响应头 <a class="header-anchor" href="#_1-自定义响应头" aria-label="Permalink to &quot;1.自定义响应头&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Handlers</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;$fresh/server.ts&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> handler</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Handlers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	async</span><span style="color:#61AFEF;"> GET</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">_req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> resp</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		resp</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">headers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;X-Custom-Header&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> resp</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> AboutPage</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E5C07B;">main</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">h1</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">About</span><span style="color:#56B6C2;">&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">This</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> about</span><span style="color:#E06C75;"> page</span><span style="color:#ABB2BF;">.</span><span style="color:#56B6C2;">&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">		&lt;/</span><span style="color:#E06C75;">main</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_2-随即生成-uuid" tabindex="-1">2. 随即生成 uuid <a class="header-anchor" href="#_2-随即生成-uuid" aria-label="Permalink to &quot;2. 随即生成 uuid&quot;">​</a></h4><p>routes/api/random-uuid.ts</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Handlers</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;$fresh/server.ts&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> handler</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Handlers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	GET</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">_req</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> uuid</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> crypto</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">randomUUID</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Response</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">uuid</span><span style="color:#ABB2BF;">), {</span></span>
<span class="line"><span style="color:#E06C75;">			headers</span><span style="color:#ABB2BF;">: { </span><span style="color:#98C379;">&quot;Content-Type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;application/json&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>此时访问该页面<code>http://localhost:8000/api/random-uuid</code></p><h3 id="_6-表单提交" tabindex="-1">6. 表单提交 <a class="header-anchor" href="#_6-表单提交" aria-label="Permalink to &quot;6. 表单提交&quot;">​</a></h3><p>在以上内容理解的基础上，就可以实现表单提交了，官方给出的例子</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Handlers</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">PageProps</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;$fresh/server.ts&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> NAMES</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;Alice&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Bob&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Charlie&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Dave&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Eve&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Frank&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">interface</span><span style="color:#E5C07B;"> Data</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	results</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#E06C75;">	query</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> handler</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Handlers</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Data</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	GET</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> URL</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> query</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> url</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">searchParams</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;q&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> results</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> NAMES</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> name</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">results</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> Page</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;"> }: </span><span style="color:#E5C07B;">PageProps</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Data</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">results</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">query</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E5C07B;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">form</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">				&lt;</span><span style="color:#E06C75;">input</span><span style="color:#E06C75;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;q&quot;</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">/&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">				&lt;</span><span style="color:#E06C75;">button</span><span style="color:#E06C75;"> type</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;submit&quot;</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;">Search</span><span style="color:#56B6C2;">&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">			&lt;/</span><span style="color:#E06C75;">form</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E5C07B;">ul</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span><span style="color:#E06C75;font-style:italic;">results</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;font-style:italic;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=&gt;</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#56B6C2;">					&lt;</span><span style="color:#E06C75;">li</span><span style="color:#E06C75;"> key</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">}</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">}</span><span style="color:#56B6C2;">&lt;/</span><span style="color:#E06C75;">li</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">				))}</span></span>
<span class="line"><span style="color:#56B6C2;">			&lt;/</span><span style="color:#E06C75;">ul</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#56B6C2;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>可以看出，其实就是获取请求参数以后，使用 render 来渲染页面。</p><h3 id="_7-部署到生产环境" tabindex="-1">7. 部署到生产环境 <a class="header-anchor" href="#_7-部署到生产环境" aria-label="Permalink to &quot;7. 部署到生产环境&quot;">​</a></h3><p>部署 fresh 项目要经过两个步骤：</p><h4 id="_1-将代码上传到-github" tabindex="-1">1. 将代码上传到 github <a class="header-anchor" href="#_1-将代码上传到-github" aria-label="Permalink to &quot;1. 将代码上传到 github&quot;">​</a></h4><p>在 github 新建一个项目，然后吧你的代码上传即可。</p><p><img src="`+o+'" alt="image-20240314144329146"></p><p><img src="'+t+`" alt="image-20240314144355347"></p><p>然后在目录运行</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> init</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &quot;first commit&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -M</span><span style="color:#98C379;"> main</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> remote</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> 你的仓库地址</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#D19A66;"> -u</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-在-deno-控制面板创建一个项目" tabindex="-1">2. 在 Deno 控制面板创建一个项目 <a class="header-anchor" href="#_2-在-deno-控制面板创建一个项目" aria-label="Permalink to &quot;2. 在 Deno 控制面板创建一个项目&quot;">​</a></h4><p>首先打开官网你的控制面板<code>https://dash.deno.com/projects</code>，用你的 github 登陆即可，然后创建项目</p><p><img src="`+r+'" alt="image-20240314144436510"></p><p>选择你的账户</p><p><img src="'+c+'" alt="image-20240314144507666"></p><p>选择账户需要授权一下，允许即可</p><p><img src="'+i+'" alt="image-20240314144531127"></p><p>目前只需要这样就可以，然后点击部署，等待部署完成</p><p><img src="'+B+'" alt="image-20240314144553365"></p><p>完成后首页会出现你的域名</p><p><img src="'+y+'" alt="image-20240314144642967"></p><p>打开任意一个，比如我的<code>dirty-pig-75.deno.dev</code>，打开就会出现部署的结果了</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>现在的 Fresh 开发起来还是比较丝滑的，但是有一些问题也是真的。</p><ul><li><p>比如在部署的时候可能会出莫名其妙的错误，导致样式直接没有了；</p></li><li><p>比如 idea 插件检测不到 deno 环境，那就只能换 vscode 了；</p></li><li><p>比如第一次运行项目可能有依赖加载不上。。。</p></li></ul><p>一堆堆都是坑，然后莫名其妙就好了。</p><p>除此以外，这东西只能在 Fresh 的面板上部署吗?</p><p>在我目前看来，这玩意儿做个个人网站估计差不多了，免费版每个月限制 1,000,000 个请求，100G 流量，而且还只能部署在官方网站，但是专业版一个月 20 刀，友友们自己判断吧。</p><p>我认为如果能自己部署的话，还有必要再看看。</p>',80)]))}const D=n(u,[["render",d]]);export{E as __pageData,D as default};
