import{_ as a,c as n,o as e,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"GitHub 快速入门","description":"","frontmatter":{},"headers":[],"relativePath":"Document/GitHub的使用/GitHub快速入门.md","filePath":"Document/GitHub的使用/GitHub快速入门.md","lastUpdated":1750954157000}'),l={name:"Document/GitHub的使用/GitHub快速入门.md"};function t(o,s,i,r,c,d){return e(),n("div",null,s[0]||(s[0]=[p(`<h1 id="github-快速入门" tabindex="-1">GitHub 快速入门 <a class="header-anchor" href="#github-快速入门" aria-label="Permalink to &quot;GitHub 快速入门&quot;">​</a></h1><p>GitHub 文档：<a href="https://docs.github.com/cn" target="_blank" rel="noreferrer">https://docs.github.com/cn</a></p><p>GitHub 新功能：<a href="https://github.blog/" target="_blank" rel="noreferrer">https://github.blog/</a></p><p>教程：<a href="https://www.geeksforgeeks.org/ultimate-guide-git-github/?ref=lbp" target="_blank" rel="noreferrer">Git 和 Github 终极指南 - GeeksforGeeks</a></p><p>Git 备忘清单（github-cheat-sheet）：<a href="https://docs.github.com/cn/get-started/quickstart/git-cheatsheet" target="_blank" rel="noreferrer">Git 备忘清单 - GitHub Docs</a></p><p>编程之家 GitHub 教程：<a href="https://www.jb51.cc/github-tutorial/" target="_blank" rel="noreferrer">https://www.jb51.cc/github-tutorial/</a></p><blockquote><p>当您忘记命令或不想在 CLI 中使用帮助时，此 Git 备忘清单可节省时间。</p><p>很快掌握所有可用的 Git 命令可能是一项艰巨的任务。 可以使用“<a href="https://training.github.com/" target="_blank" rel="noreferrer">Git 速查表</a>”快速参考常用命令。 “Using Git（使用 Git）”备忘清单有多种语言版本。</p><p>此外，请查看  <a href="https://docs.github.com/cn/articles/git-and-github-learning-resources" target="_blank" rel="noreferrer">Git 和 GitHub 学习资源</a>页，该页链接到指南、视频等。</p></blockquote><hr><p>GitHub 在程序开发领域家喻户晓，现在几乎整个互联网的开发者都将版本管理工具 GitHub 作为版本控制的首选，甚至像笔者这样非开发者，一名和每天和数据打交道的人也在使用 GitHub，目的主要有：</p><ul><li><p>查找资料：GitHub 上有很多国内外大神开源的数据挖掘、机器学习的资料、代码，笔者直接 fork 或者 clone 下来学习</p></li><li><p>技术交流：通过对开源项目提出 issue，能够起到技术交流的效果</p></li><li><p>个人展示：现在互联网领域中，如果一个程序员在 GitHub 上有一个很好的开源项目，必定是会备受关注。因此 GitHub 实际上是一个很好的展示个人实力的舞台，或许它能够让你受到招聘人员的青睐</p></li></ul><p>github 作为全球最大的开源软件项目托管平台，相信很多程序员都在使用，不仅仅是因为它可以免费的作为我们公有或者私有的代码仓库，更因为 github 上面有大量的开源学习项目或资源，秉着开源自由的理念，吸引了大量的个人或者企业开发者。</p><p>github 将所有的改动行为称为 contributions，包括 commit，pr, code review,isssue,fork 等等。</p><p>github 有个叫活动概览(Activity overview)的功能，将 contributions 按照下面四个象限进行分类统计：</p><ul><li><p>Commits：建仓、提交代码或 fork 等会触发</p></li><li><p>Pull requests：指开发者在本地对源代码进行更改后，向 GitHub 中托管的 Git 仓库请求合并的功能。</p></li><li><p>Code review：预览代码</p></li><li><p>Issues：用于 BUG 报告、功能添加、方向性讨论等，将这些以 Issue 形式进行管理。</p></li></ul><h2 id="github-使用技巧" tabindex="-1">Github 使用技巧 <a class="header-anchor" href="#github-使用技巧" aria-label="Permalink to &quot;Github 使用技巧&quot;">​</a></h2><p>很多人搜索 github，但是芸芸众生，要找到自己想要的项目犹如海底捞针一般，今天教大家几项神技，可以快速找到自己想要的内容。</p><p>1、按 star 数目搜索，比如 JavaScript，要求星数，这样就能获取 star 数目最多的项目</p><p>2、follow 一些 github 上面的大牛</p><p>请登录：<a href="https://github-ranking.com/" target="_blank" rel="noreferrer">https://github-ranking.com/</a></p><p>国内大牛：<a href="http://outofmemory.cn/github/" target="_blank" rel="noreferrer">http://outofmemory.cn/github/</a></p><p>这里是搜索名人的网址：<a href="https://github.com/search" target="_blank" rel="noreferrer">Code Search · GitHub</a></p><p>高级搜索：<a href="https://github.com/search/advanced" target="_blank" rel="noreferrer">GitHub · Where software is built</a></p><p>3、Awesome + 你的关键字：搜索一些优秀的框架、教程、项目等</p><p>4、看一些搜索技巧，设定条件进行搜索</p><p>地址：<a href="https://help.github.com/articles/searching-repositories/" target="_blank" rel="noreferrer">搜索仓库 - GitHub Docs</a></p><p>5、通过 readme 看看人家是否发出 pull request</p><p>看看这篇文章：<a href="http://blog.csdn.net/qianlong4526888/article/details/11529981" target="_blank" rel="noreferrer">如何在 github 中贡献自己的力量_乾龙_Heron 的博客-CSDN 博客</a></p><p>6、看 explore 推荐</p><p><a href="https://github.com/explore" target="_blank" rel="noreferrer">Explore GitHub · GitHub</a></p><p>7、看看其他</p><p><a href="http://blog.sina.com.cn/s/blog_4e60b09d0102vcso.html" target="_blank" rel="noreferrer">新浪博客</a></p><p>8、直接 github 上搜 fackbook 或者其他，可以看到他们的最新作品</p><p><strong>可以说，正式 GitHub，让社会化全员编程成为了现实。</strong></p><h2 id="版本管理" tabindex="-1">版本管理 <a class="header-anchor" href="#版本管理" aria-label="Permalink to &quot;版本管理&quot;">​</a></h2><p>版本管理就是管理更新的历史记录。Git 出现之前，人们主要是使用 Subversion（简称为 SVN）作为版本控制的工具。</p><h3 id="svn" tabindex="-1">SVN <a class="header-anchor" href="#svn" aria-label="Permalink to &quot;SVN&quot;">​</a></h3><p>SVN 是属于<strong>集中型</strong>的版本管理系统，其特点是<strong>将仓库集中存放在服务器中，所以只存在一个仓库</strong>。集中型将所有特点是方便管理，但是如果开发者所处的环境无法联网，则无法获取到最新的源码，进而无法进行开发工作。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2942439a8eb248d88a9b1e1610b87f8a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="SVN"></p><h3 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h3><p>Git 是<strong>分散型</strong>的版本管理系统。从下图中我们可以观察出来，GitHub 将仓库 fork 给每个用户。fork 的仓库和原始的仓库是两个不同的仓库，开发者是可以随意编辑的。</p><p>Fork 的过程其实就是将某个仓库复制到自己的账户下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cffee4cfb7e6414d96abac58a67fdad4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="Git"></p><h2 id="什么-github" tabindex="-1">什么 GitHub <a class="header-anchor" href="#什么-github" aria-label="Permalink to &quot;什么 GitHub&quot;">​</a></h2><p>GitHub 是一个基于 Git 的代码托管平台。如果是付费用户可以建立自己的私人仓库，一般用户的话只能建立公用仓库，也就是说仓库的代码必须是公开的。到底 Git 和 GitHub 有什么区别呢？</p><p>在 Git 中，开发者将源代码存入名叫“Git 仓库”的资料库中，方便使用；而 GitHub 则是在网络上提供 Git 仓库的一项服务</p><p>GitHub 上公开的源代码都是通过 Git 进行管理的。</p><h2 id="安装与配置-git" tabindex="-1">安装与配置 Git <a class="header-anchor" href="#安装与配置-git" aria-label="Permalink to &quot;安装与配置 Git&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>现在笔者使用的<code>MacOS</code>系统，是自带<code>Git</code>的。关于 Windows 系统下安装，请参考如下文章，讲解的非常详细。</p><p>Windows 系统 Git 安装教程（详解 Git 安装过程）：</p><p><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html" target="_blank" rel="noreferrer">www.cnblogs.com/xueweisuoyo…</a></p><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>首先需要设置使用 Git 时候的名字和邮箱，名字需要使用英文</p><p>git config --global user.name &quot;Firstname Lastname&quot; # 名称 git config --global user.email &quot;<a href="mailto:your_email@example.com" target="_blank" rel="noreferrer">your_email@example.com</a>&quot; # 邮箱</p><h3 id="gitconfig-中以如下形式输出文件" tabindex="-1">~/.gitconfig 中以如下形式输出文件 <a class="header-anchor" href="#gitconfig-中以如下形式输出文件" aria-label="Permalink to &quot;~/.gitconfig 中以如下形式输出文件&quot;">​</a></h3><p>[user] name = Firstname Lastname email = <a href="mailto:your_email@example.com" target="_blank" rel="noreferrer">your_email@example.com</a></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>需要注意的是：</p><ol><li><p>GitHub 上公开仓库的时候，名字和邮箱会一同被公开，所以请不要使用不便公开的隐私信息</p></li><li><p>程序员来自世界各地，请使用英文，不要使用汉字；如果不想使用真名，可以使用网站的昵称</p></li></ol><p><strong>如何提高命令输出的可读性</strong>？</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> config</span><span style="color:#D19A66;"> --global</span><span style="color:#98C379;"> color.ui</span><span style="color:#98C379;"> auto</span><span style="color:#7F848E;font-style:italic;">   # 将color.ui 设置成auto</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="创建账户" tabindex="-1">创建账户 <a class="header-anchor" href="#创建账户" aria-label="Permalink to &quot;创建账户&quot;">​</a></h3><p>进入创建用户的页面：<a href="https://link.juejin.cn/?target=http%3A//github.com/join" target="_blank" rel="noreferrer">github.com/join</a></p><p>填写如下的信息在点击<code>Create an accout</code>即可</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff235251c6af4e8e923b548dff208d05~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><h3 id="配置-ssh" tabindex="-1">配置 SSH <a class="header-anchor" href="#配置-ssh" aria-label="Permalink to &quot;配置 SSH&quot;">​</a></h3><p>GitHub 上连接现有仓库的认证，是通过使用了 SSH 的公开密钥认证方式进行的。现在我们需要创建公开密钥所需的 SSH Key，并将其添加到 GitHub。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">ssh-keygen</span><span style="color:#D19A66;"> -t</span><span style="color:#98C379;"> rsa</span><span style="color:#D19A66;"> -C</span><span style="color:#7F848E;font-style:italic;">   # 创建SSH Key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来需要输入两次密码，最终会生成两个文件：</p><ul><li><p>id_rsa：私有密钥</p></li><li><p>id_rsa.pub：公开密钥</p></li></ul><p>下面我们需要在 GitHub 中添加公开密钥，今后就可以使用私有密钥进行认证。点击右上角的账户设定按钮：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6186e3ae3dc34358ad69b8ac14e0a8bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>进入 settings 之后，添加新的 SSH Key</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8fc995e4f00457a8ee5f484f97f8905~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>接下来会出现 Title 和 Key 两个输入框，在 Title 中输入适当的密钥名称，Key 部分复制上面 id_rsa.pub 文件中的内容</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">cat</span><span style="color:#98C379;"> ~/.ssh/id_rsa.pub</span><span style="color:#7F848E;font-style:italic;">   # 查看内容</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>添加完成之后，会在我们的邮箱中收到一封提示“公开密钥添加完成”的邮件，确认即可。这样便完成了整个手中的私人密钥和 GitHub 的认证和通信问题，验证一下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">ssh</span><span style="color:#D19A66;"> -T</span><span style="color:#98C379;"> git@github.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在接下来的页面中输入密码和 yes 即可完成验证。</p><h2 id="建立仓库" tabindex="-1">建立仓库 <a class="header-anchor" href="#建立仓库" aria-label="Permalink to &quot;建立仓库&quot;">​</a></h2><p>首先我们必须明白一点：<strong>仓库有两种</strong></p><ul><li><p>远程在 GitHub 上的仓库：远程仓库</p></li><li><p>在自己本地的仓库：本地仓库</p></li></ul><p>本文是以 MacOS 系统为例，基于 Linux；如果是想学习 Windows 下的仓库创建，请参考下文，讲解的很详细：</p><p>Git 使用（10 分钟入门）：</p><p><a href="https://www.jianshu.com/p/09f243768cf6" target="_blank" rel="noreferrer">www.jianshu.com/p/09f243768…</a></p><h3 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-label="Permalink to &quot;远程仓库&quot;">​</a></h3><p>1、建立远程仓库需要我们先登陆自己的 GitHub 账号，再进行建仓。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/24782d0a81e44c01880afe88b4942c44~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>2、我们创建一个<code>git_start</code>的仓库</p><ul><li><p>仓库的名字</p></li><li><p>仓库的简单描述</p></li><li><p><strong>不要</strong>在远程仓库添加 README.md 文件。我们使用手动 push 的方式来添加</p></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9e5b6ad22154dd2a2506d98188809d5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>3、仓库解释</p><p>打开上面我们创建好的仓库，会出现如下的内容（先写上注释，后面慢慢解释）</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;# git_start&quot;</span><span style="color:#ABB2BF;"> &gt;&gt; </span><span style="color:#98C379;">README.md</span><span style="color:#7F848E;font-style:italic;">    # 往README.md中写入内容</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> init</span><span style="color:#7F848E;font-style:italic;">  # 初始化</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> README.md</span><span style="color:#7F848E;font-style:italic;">   # 添加文件</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &quot;first commit&quot;</span><span style="color:#7F848E;font-style:italic;">   # 提交并注释</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -M</span><span style="color:#98C379;"> main</span><span style="color:#7F848E;font-style:italic;">  # 提交分支</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> remote</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> git@github.com:pidada/git_start.git</span><span style="color:#7F848E;font-style:italic;">   # 建立远程仓库与本地仓库的连接</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#D19A66;"> -u</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> main</span><span style="color:#7F848E;font-style:italic;">  # 推送</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48cf5bcefc9a490ebe0a43ede27301c8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><h3 id="本地仓库" tabindex="-1">本地仓库 <a class="header-anchor" href="#本地仓库" aria-label="Permalink to &quot;本地仓库&quot;">​</a></h3><p>1、建立本地仓库</p><p>所谓的本地仓库，就是你自己电脑客户端的仓库。同样地，笔者在本地建立了同样名字的本地仓库<code>git_start</code>，其实就是个文件夹</p><p><strong>本地仓库要和远程仓库保持一致</strong>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">mkdir</span><span style="color:#98C379;"> git_start</span><span style="color:#7F848E;font-style:italic;">  # 创建文件夹，即仓库</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> git_start</span><span style="color:#7F848E;font-style:italic;">  # 切换到仓库中</span></span>
<span class="line"><span style="color:#61AFEF;">ls</span><span style="color:#7F848E;font-style:italic;">  # 查看内容，目前是没有任何内容</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/793c8d1780d14b798878588c13e0a24e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>2、初始化操作</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;学习GitHub的使用，快速入门&quot;</span><span style="color:#ABB2BF;"> &gt;&gt; </span><span style="color:#98C379;">README.md</span><span style="color:#7F848E;font-style:italic;">   # 往文件中写入内容，后面可以更改</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> init</span><span style="color:#7F848E;font-style:italic;">   # 初始化</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ded2e5360fc4254b4f14eefd61d2c09~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>初始化之后会在当前目录下自动生成一个<code>.git</code>的文件。这个文件下存储着管理当前目录内容所需要的仓库数据</p><p>3、查看待提交文档</p><p>通过<code>ls</code>查看已经有了<code>README.md</code>文档</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> status</span><span style="color:#7F848E;font-style:italic;">  # 查看待提交的文档</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/457c5058a7b44547a0c37fb7db29bd52~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>4、提交文档</p><p>我们将上面的<code>README.md</code>文档和生成的<code>.git</code>文档一并提交</p><p>git add . # 提交全部文件 git add README.md # 单独提交一个文件 git commmit -m &quot;2021-1-1&quot; # commit 提交，同时写上备注：2021-1-1</p><h3 id="add-和-commit-的同步操作" tabindex="-1">add 和 commit 的同步操作 <a class="header-anchor" href="#add-和-commit-的同步操作" aria-label="Permalink to &quot;add 和 commit 的同步操作&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -am</span><span style="color:#98C379;"> &quot;2021-1-1&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>注意：执行了 add 操作，文件还没有被上传到 Git 远程仓库中，只是提交到了缓存区域</strong></p><p><code>git commit -m &quot;2021-1-1&quot;</code>才是真正地提交内容，同时写上备注：将文件从缓存区提交到远程</p><p>5、建立远程仓库连接并推送</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> remote</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> git@github.com:peter/git_start.git</span><span style="color:#7F848E;font-style:italic;">  # 建立连接</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#D19A66;"> -u</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> main</span><span style="color:#7F848E;font-style:italic;">  # 推送到main分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62eaf35496204d3d8f7949bff9eddb65~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>6、检查</p><p>此时我们刷新远程仓库的页面，会发现页面更新了，也有了内容：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3aa2107ed8ca47999730726ced028072~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>7、查看提交日志</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#7F848E;font-style:italic;">  # 查看提交日志</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#D19A66;"> --pretty=short</span><span style="color:#7F848E;font-style:italic;">  # 只显示一行简述信息</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#98C379;"> README.md</span><span style="color:#7F848E;font-style:italic;">  # 只显示指定目录、文件的日志</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> README.md</span><span style="color:#7F848E;font-style:italic;">  # 只显示指定目录、文件的日志修改前后的改动</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>commit</code>栏旁边显示的是指向这个提交的哈希值。<strong>Git 的其他命令中，在指向提交时会用到这个哈希值</strong></p><p>Author 栏旁边是 Git 设置的用户名和邮箱地址</p><p>Date 栏显示的是执行日期和时间</p><p>最下面是提交信息，-m 参数后面的信息</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cef230666bd479d852949744052e09e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>8、修改<code>README.md</code>文件</p><p>通过 vim 编辑器修改内容如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/73bb3f8f377640059aa0858689ff4705~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>上面使用了 Markdown 语法，然后我们重新按照上面的命令执行一遍：</p><p>git status # 状态是红色 git add . # 提交到缓存区 git commit -m &quot;修改 README.md&quot; # 记录提交信息</p><h3 id="git-remote-add-origin-git-github-com-peter-git-start-git-已经建立了连接-所以不必在执行此命令" tabindex="-1">git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noreferrer">git@github.com</a>:peter/git_start.git # 已经建立了连接，所以不必在执行此命令 <a class="header-anchor" href="#git-remote-add-origin-git-github-com-peter-git-start-git-已经建立了连接-所以不必在执行此命令" aria-label="Permalink to &quot;git remote add origin git@github.com:peter/git_start.git # 已经建立了连接，所以不必在执行此命令&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#D19A66;"> -u</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> main</span><span style="color:#7F848E;font-style:italic;"> # 推到main分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/607b0a24cc3b49488c0dd704ff00af7c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>回顾下整个操作的过程：</p><ol><li><p>建立远程仓库</p></li><li><p>建立本地仓库</p></li><li><p>初始化本地仓库</p></li><li><p>文档提交到缓存区</p></li><li><p>缓存区推送到远程仓库</p></li></ol><h3 id="重要命令" tabindex="-1">重要命令 <a class="header-anchor" href="#重要命令" aria-label="Permalink to &quot;重要命令&quot;">​</a></h3><p>我们总结一下上面操作中几个重要的命令：</p><p>1、git status</p><p>查看仓库中文件的状态。如果有新的文件或者原来的文件有修改过，会出现红色</p><p>2、git add</p><p>向缓存区中添加内容，缓存区是提交之前的一个临时区域（Stage 或者 Index）</p><p>3、git commit  [-m]</p><p>将暂存区中的文件保存仓库的历史记录中；-m 参数后面跟上提交信息：<strong>git commit -m &quot;第一次提交&quot;</strong></p><p>4、git log</p><p>查看以往提交日志信息：什么人在什么时候进行了提交或者合并等，以及操作前后有怎样的差别</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#7F848E;font-style:italic;">  # 查看日志</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#D19A66;"> --pretty=short</span><span style="color:#7F848E;font-style:italic;">  # 只显示提交信息的第一行</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#98C379;"> README.md</span><span style="color:#7F848E;font-style:italic;">  # 查看某个文件的提交信息</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#D19A66;"> -p</span><span style="color:#98C379;"> README.md</span><span style="color:#7F848E;font-style:italic;">  #  -p参数只查看提交的改动部分</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>5、git diff</p><p>查看工作树、暂存区、最新提交之间的差别。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> diff</span><span style="color:#7F848E;font-style:italic;">  # 查看当前工作树和暂存区的差别</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> diff</span><span style="color:#98C379;"> HEAD</span><span style="color:#7F848E;font-style:italic;">  # 查看本次提交和上次提交的差别；HEAD指向当前分支中的最新一次提交的指针</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>养成习惯：git commit 之前先执行 git diff HEAD 命令来查看本次提交与上次提交之间的差别；HEAD 指向当前分支中最新的一次提交的指针。</p><p>6、仓库操作</p><p><code>-u</code>作用：将来运行 git pull 命令从远程仓库获取内容时，本地仓库就可以直接从 origin 的 main 分支中获取内容，不需要添加其他的参数</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> remote</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> git@github.com:github/peter/git_start.git</span><span style="color:#7F848E;font-style:italic;">  # 添加远程仓库</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#7F848E;font-style:italic;"> # 推送到远程仓库</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#D19A66;"> -u</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> main</span><span style="color:#7F848E;font-style:italic;">  # 推送到main分支下</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#D19A66;"> -u</span><span style="color:#98C379;"> origin</span><span style="color:#98C379;"> feature_A</span><span style="color:#7F848E;font-style:italic;">  # 推送到分支A</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> clone</span><span style="color:#98C379;">  仓库地址</span><span style="color:#7F848E;font-style:italic;">  # 将某个远程仓库的内容复制到本地</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> push</span><span style="color:#7F848E;font-style:italic;">  # 推送</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> pull</span><span style="color:#7F848E;font-style:italic;">  # 获取最新的远程分支内容</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h3><h3 id="main-分支" tabindex="-1">main 分支 <a class="header-anchor" href="#main-分支" aria-label="Permalink to &quot;main 分支&quot;">​</a></h3><p>main 分支是 Git 默认创建的分支，其他所有的分支都是在这个分支的基础上进行的。</p><ul><li><p>不同的分支单独进行各自的作业</p></li><li><p>该分支的作业完成之后再和 main 分支合并</p></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9de61957e1d44d484746d005407ce85~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>进行完作业之后的合并操作：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9306d8792e294cb296bffb011385f44a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><h3 id="分支相关命令" tabindex="-1">分支相关命令 <a class="header-anchor" href="#分支相关命令" aria-label="Permalink to &quot;分支相关命令&quot;">​</a></h3><p>1、git branch-显示分支</p><p>显示分支一览表：将分支名列表显示出来，同时确认当前所在的分支；标有星号<code>*</code>表示当前分支</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#D19A66;"> -a</span><span style="color:#7F848E;font-style:italic;">  # 查看当前分支的相关信息</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2、git branch feature-创建分支</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> branch</span><span style="color:#98C379;"> feature</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3、git checkout feature-切换分支</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> feature</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> main</span><span style="color:#7F848E;font-style:italic;">  # 切换到main分支</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> -</span><span style="color:#7F848E;font-style:italic;">  # 切换到上一个分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面两个命令的合并，创建新的分支并切换到新的分支：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#D19A66;"> -b</span><span style="color:#98C379;"> feature</span><span style="color:#7F848E;font-style:italic;">  # 切换到创建的新分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4、git merge-合并分支</p><p>假设某个分支已经完成了作业需要和主分支 main 合并，使用如下语句：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> checkout</span><span style="color:#98C379;"> main</span><span style="color:#7F848E;font-style:italic;">  # 切到主分支</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> merge</span><span style="color:#D19A66;"> --no-off</span><span style="color:#98C379;"> feature-A</span><span style="color:#7F848E;font-style:italic;">  # 合并分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>5、git log —graph-图的形式查看分支</p><p>通过图表的形式查看提交的内容</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#D19A66;"> --graph</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c8cb3f99dd86478eb859ff026c8a966f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><h3 id="版本回溯" tabindex="-1">版本回溯 <a class="header-anchor" href="#版本回溯" aria-label="Permalink to &quot;版本回溯&quot;">​</a></h3><p>既然是版本控制系统，那么对于不同版本的管理肯定是至关重要的。<strong>GitHub 的另一个特征便是可以灵活地操作不同的历史版本</strong>。借助分散仓库的优势，可以在不影响其他仓库的前提下对历史版本进行操作。</p><p>1、回溯到指定状态</p><p><strong>哈希值只要输入 4 位以上就可以执行了</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> --hard</span><span style="color:#ABB2BF;"> [哈希值]  </span><span style="color:#7F848E;font-style:italic;"># 添加指定的哈希值，代表某个时间点的状态</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2、查看<strong>当前仓库的全部执行过</strong>的操作日志</p><p>记录我们操作的每次命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reflog</span><span style="color:#7F848E;font-style:italic;">   # 针对当前仓库</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> log</span><span style="color:#7F848E;font-style:italic;">   # 查看以当前状态为终点的历史日志</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78793e9f70024d4590c0787745923456~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p>所以我们可以先通过<code>git reflog</code>来查看哈希值，再通过<code>git reset —hard [哈希值]</code>回到某个状态</p><p>3、修改上一条提交信息</p><p>使用<code>git commit --amend</code>命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> --amend</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4、压缩历史</p><p>在合并特性分支之前，如果发现已经提交的内容中有拼写等错误，可以先提交一个修改，然后将这个修改包含到前一个提交之中，压缩成一个历史记录</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> rebase</span><span style="color:#D19A66;"> -i</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> rebase</span><span style="color:#D19A66;"> -i</span><span style="color:#98C379;"> HEAD~2</span><span style="color:#7F848E;font-style:italic;">  # 当前分支下的两个最新历史记录进行压缩</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>5、添加提交一次完成</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -am</span><span style="color:#98C379;"> &quot;add和commit同时完成&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="git-reset-详解" tabindex="-1">git reset 详解 <a class="header-anchor" href="#git-reset-详解" aria-label="Permalink to &quot;git reset 详解&quot;">​</a></h3><h4 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h4><p>对版本回溯命令的详解。git reset 命令用于回退版本，可以指定回退到某个具体的历史版本。</p><p>git reset 命令语法格式具体如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#ABB2BF;"> [--soft | </span><span style="color:#61AFEF;">--mixed</span><span style="color:#ABB2BF;"> | </span><span style="color:#61AFEF;">--hard]</span><span style="color:#ABB2BF;"> [HEAD]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>--mixed</code>是<strong>默认参数，可以不带</strong>，用于重置暂存区的文件与上一次的提交（commit）保持一致，工作区文件内容保持不变</p><h4 id="soft" tabindex="-1">soft <a class="header-anchor" href="#soft" aria-label="Permalink to &quot;soft&quot;">​</a></h4><p><code>--soft</code>参数用于回退到某个版本</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> --soft</span><span style="color:#98C379;"> HEAD</span><span style="color:#7F848E;font-style:italic;">  #  回退到上个版本</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> --soft</span><span style="color:#98C379;"> HEAD~3</span><span style="color:#7F848E;font-style:italic;">  # 回退到上上上个版本</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="hard⚠️" tabindex="-1">hard⚠️ <a class="header-anchor" href="#hard⚠️" aria-label="Permalink to &quot;hard⚠️&quot;">​</a></h4><p>！！！⚠️ 谨慎使用<code>--hard</code> 参数，它会删除回退点之前的所有信息</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> --hard</span><span style="color:#98C379;"> HEAD~3</span><span style="color:#7F848E;font-style:italic;">   # 回退到上上上个版本</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> --hard</span><span style="color:#98C379;"> 1de43</span><span style="color:#7F848E;font-style:italic;">  # 回退到指定版本</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#D19A66;"> --hard</span><span style="color:#98C379;"> origin/main</span><span style="color:#7F848E;font-style:italic;">  # 本地状态回退到和远程相同</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="head" tabindex="-1">HEAD <a class="header-anchor" href="#head" aria-label="Permalink to &quot;HEAD&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#98C379;"> HEAD^</span><span style="color:#7F848E;font-style:italic;">   # 回退到所有内容的上一个版本</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#98C379;"> HEAD^</span><span style="color:#98C379;"> Git入门.md</span><span style="color:#7F848E;font-style:italic;">  # 回退到Git入门.md文件的版本的上一个版本（指定版本的上个版本）</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#98C379;"> 01b42</span><span style="color:#7F848E;font-style:italic;">  # 回退到指定版本，需要至少哈希值的前4位；可以通过git reflog命令先查看我们要回退的版本号的哈希值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>git reset HEAD 还能取消已缓存的内容。当我们对某个文件的内容进行了修改并且已经执行<code>git add</code>之后，我们想取消缓存区的内容，使用如下命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> reset</span><span style="color:#98C379;"> HEAD</span><span style="color:#ABB2BF;"> [filename]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5042b0c244e449c99e79a5369db4ca72~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt=""></p><p><strong>关于 HEAD 说明</strong>：</p><ul><li><p>HEAD 表示当前版本</p></li><li><p>HEAD^ 上一个版本</p></li><li><p>HEAD^^ 上上一个版本</p></li><li><p>HEAD^^^ 上上上一个版本</p></li><li><p>以此类推…</p></li></ul><p>可以使用 ～数字表示</p><ul><li><p>HEAD~0 表示当前版本</p></li><li><p>HEAD~1 上一个版本</p></li><li><p>HEAD^2 上上一个版本</p></li><li><p>HEAD^3 上上上一个版本</p></li><li><p>以此类推…</p></li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li><p><code>HEAD</code>指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</p></li><li><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p></li><li><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p></li></ul>`,222)]))}const m=a(l,[["render",t]]);export{u as __pageData,m as default};
