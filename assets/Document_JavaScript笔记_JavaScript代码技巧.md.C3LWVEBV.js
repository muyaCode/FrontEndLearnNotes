import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/640.BrLV2lUt.webp",e="/FrontEndLearnNotes/assets/640-1713272938221-22.CtbqqTNK.webp",r="/FrontEndLearnNotes/assets/640-1713272938221-23.BExjjxcu.webp",t="/FrontEndLearnNotes/assets/640-1713272938221-24.DgnI8KZj.gif",c="/FrontEndLearnNotes/assets/9e7e584063314231960f28db69357acdtplv-k3u1fbpfcp-zoom-in-crop-mark1512000.Dxy97Fbb.webp",C=JSON.parse('{"title":"JavaScript 代码技巧","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/JavaScript代码技巧.md","filePath":"Document/JavaScript笔记/JavaScript代码技巧.md","lastUpdated":1750954157000}'),B={name:"Document/JavaScript笔记/JavaScript代码技巧.md"};function y(i,s,b,F,d,u){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="javascript-代码技巧" tabindex="-1">JavaScript 代码技巧 <a class="header-anchor" href="#javascript-代码技巧" aria-label="Permalink to &quot;JavaScript 代码技巧&quot;">​</a></h1><p><a href="https://juejin.cn/post/7296755101622878248" target="_blank" rel="noreferrer">我敢打赌你不知道的十个JavaScript技巧 - 掘金 (juejin.cn)</a></p><h2 id="es6-简化代码技巧" tabindex="-1">ES6 简化代码技巧 <a class="header-anchor" href="#es6-简化代码技巧" aria-label="Permalink to &quot;ES6 简化代码技巧&quot;">​</a></h2><h3 id="块级作用域" tabindex="-1">块级作用域 <a class="header-anchor" href="#块级作用域" aria-label="Permalink to &quot;块级作用域&quot;">​</a></h3><p>为什么需要块级作用域?</p><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这导致很多场景不合理。</p><ul><li>第一种场景，内层变量可能会覆盖外层变量。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tmp</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> tmp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;">  hello</span><span style="color:#E06C75;"> world</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>以上代码的原意是， if 代码块的外部使用外层的 tmp 变量，内部使用内层的 tmp 变量。但是，函数 <code>fn</code> 执行后，输出结果为 <code>undefined</code> ，原因在于变量提升导致内层的 tmp 变量覆盖了外层的 tmp 变量。</p><ul><li>第二种场景，用来计数的循环变量泄露为全局变量。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> hello</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> O</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面的代码中，变量 <code>i</code> 只用来控制循环，但是循环结束后，它并没有消失，而是泄露成了全局变量。</p><p><code>let</code> 实际上为 <code>JavaScript</code> 新增了块级作用域。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fl</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 5</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面的函数有两个代码块，都声明了变量 <code>n</code>，运行后输出 <code>5</code> 。这表示外层代码块不受内层代码块的影响。如果使用 <code>var</code> 定义变量 ，最后输出的值就是 <code>10</code></p><p>那么我们能利用<code>块级作用域</code>做什么呢？</p><p>我们先来做道面试题</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 5 5 5 5 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>改成 <code>ES6</code> 中的 let</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 0 1 2 3 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>看到这，相信聪明的你已经理解块级作用域的好处了 O(∩_∩)O</p><p>那么 <code>ES5</code> 能不能实现 <code>块级作用域</code> 的效果呢? 可以的，我们可以利用闭包</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 0 1 2 3 4</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="解构" tabindex="-1">解构 <a class="header-anchor" href="#解构" aria-label="Permalink to &quot;解构&quot;">​</a></h3><blockquote><p>解构 ：是将一个数据结构分解为更小的部分的过程。ES6 中，从数组和对象中提取值，对变量进行赋值。</p></blockquote><p>那么解构有什么用处呢？</p><ol><li>可以大大的简化变量声明操作。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ES5</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> foo</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> bar</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> baz</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ES6</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">baz</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol><li>变量交换：看起来如同镜像。赋值语句的左侧的解构模式，右侧是临时创建的数组字面量。x 被赋值为数组中的 y，y 被赋值为数组中的 x。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// x = 2, y = 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol><li>对象解构</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// x = 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// y = 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol><li>字符串解构</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">c</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> hello</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// a =&gt; h</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// b =&gt; e</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// c =&gt; l</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// d =&gt; l</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// e =&gt; o</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol><li>函数参数解构</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> xueyue</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">雪月</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getAge</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">今年</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">岁\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">getAge</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">xueyue</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 雪月今年18岁</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h3><p><code>ES6</code> 允许使用箭头 <code>=&gt;</code> 定义函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> f</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于 ES5 的</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> f</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> v</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果箭头函数不需要参数或需要多个参数，就使用圆括号代表参数部分。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> f</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于 ES5 的</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> f</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">numl</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">num2</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> numl</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> num2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于 ES5 的</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#61AFEF;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">numl</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">num2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> numl</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> num2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>箭头函数可以与解构结合使用。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> full</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;font-style:italic;">first</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">last</span><span style="color:#ABB2BF;"> }) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> first</span><span style="color:#56B6C2;"> +</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;">last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于 ES5 的</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> full</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">person</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">first</span><span style="color:#56B6C2;"> +</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">last</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>箭头函数使得表达更加简洁</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isEven</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> square</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> values</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于 ES5 的</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> values</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。</p><p><strong>箭头函数使用注意点</strong></p><ol><li>函数体内的 <code>this</code> 对象，就是定义时所在的对象，而不是使用时所在的对象。</li><li>不可以当作构造函数，也就是说，不可以使用 <code>new</code> 命令，否则会抛出一个错误。</li><li>不可以使用 <code>arguments</code> 对象，该对象在函数体内不存在。如果要用，可以用 <code>rest</code> 参数代替。</li><li>不可以使用 <code>yield</code> 命令，因此箭头函数不能用作 <code>Generator</code> 函数。</li></ol><p>上面四点中，第一点尤其值得注意。<code>this</code> 对象的指向是可变的，但是在箭头函数中，它是固定的。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ES6</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">  setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: , </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 转换成ES5</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  var</span><span style="color:#E06C75;"> _this</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">  setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: , </span><span style="color:#E5C07B;">_this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>上面代码中，转换后的 <code>ES5</code> 版本清楚地说明了，箭头函数里面根本没有自己的 <code>this</code>，而是引用外层的 <code>this</code>。</p><h3 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串&quot;">​</a></h3><blockquote><p>模板字符串（ template string ）是增强版的字符串 ，用反引号 <code>(\`\`)</code> 标识 。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">log</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> console</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> 雪月</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 18</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 普通字符串拼接</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> 今年</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> age</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> 岁</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用模板字符串</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result2</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">今年</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">age</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">岁\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 雪月今年18岁</span></span>
<span class="line"><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 雪月今年18岁</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// \${} 大括号可以放入任意的 JavaScript 表达式，可以进行运算</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result3</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">name</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">今年</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">岁\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result3</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 雪月今年36岁</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="剩余参数-展开语法" tabindex="-1">剩余参数 / 展开语法 <a class="header-anchor" href="#剩余参数-展开语法" aria-label="Permalink to &quot;剩余参数 / 展开语法&quot;">​</a></h3><p>ES6 引入了 rest 参数（形式为<code>...变量名</code>），用于获取函数的多余参数，这样就不需要使用 <code>arguments</code> 对象了。<code>rest</code> 参数搭配的变量是一个数组，该变量将多余的参数放入其中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sortNumbers</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 rest</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> sortNumbers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">numbers</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> numbers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>比较上面的两种写法可以发现， <code>rest</code> 参数的写法更自然也更简洁。</p><p>扩展运算符（ <code>spread</code> ）是三个点（...） 如同 <code>rest</code> 参数的逆运算 将一个数组转为用逗号分隔的参数序列</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(...[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1 2 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, ...[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">], </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1 2 3 4 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>下面是扩展运算符取代 <code>apply</code> 方法的一个实际例子 应用 <code>Math.max</code> 方法简化求出数组中的最大元素。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ESS 的写法</span></span>
<span class="line"><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">max</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">14</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">77</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ES6 的写法</span></span>
<span class="line"><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(...[</span><span style="color:#D19A66;">14</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">77</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">14</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">77</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>扩展运算符提供了数组合并的新写法。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//  ESS</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">more</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ES6</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">more</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>对象的扩展运算符（...）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> z</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">bb</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">z</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// { a: 3, b:  bb  }</span></span>
<span class="line"><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> z</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>特别注意：</strong> <code>...</code>扩展对象，只能做到当对象属性是 <code>基本数据类型</code> 才是 <code>深拷贝</code>，如果是 <code>引用数据类型</code>，那就是<code>浅拷贝</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> z</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">bb</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ccc</span><span style="color:#ABB2BF;"> } };</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">z</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// { a: 3, b:  bb , c: { name:  ccc  } }</span></span>
<span class="line"><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> z</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#E5C07B;">n</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> z</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// n.c 跟 z.c 是同一个引用地址</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="对象字面量简写语法" tabindex="-1">对象字面量简写语法 <a class="header-anchor" href="#对象字面量简写语法" aria-label="Permalink to &quot;对象字面量简写语法&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> 雪月</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ES5写法</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	f</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ES6简写</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	f</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 雪月</span></span>
<span class="line"><span style="color:#E5C07B;">obj2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 雪月</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>使用 <code>vue</code> 的同学是不是感到很熟悉</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  el</span><span style="color:#ABB2BF;">:  #</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;"> ,</span></span>
<span class="line"><span style="color:#61AFEF;">  data</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      list</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="数组实例的-includes" tabindex="-1">数组实例的 includes() <a class="header-anchor" href="#数组实例的-includes" aria-label="Permalink to &quot;数组实例的 includes()&quot;">​</a></h3><p>Array.prototype.includes 方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的 includes 方法类似。ES2016 引入了该方法。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>没有该方法之前，我们通常使用数组的 indexOf 方法，检查是否包含某个值。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ES5</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!==</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ES6</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 那么 indexOf 能不能做到类似于 includes 的写法呢？ 我们可以利用 ~ 位运算符</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">~</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>indexOf</code> 方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对 <code>NaN</code> 的误判。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// -1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>includes</code> 使用的是不一样的判断算法，就没有这个问题</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="async-await-异步语法" tabindex="-1">Async/await 异步语法 <a class="header-anchor" href="#async-await-异步语法" aria-label="Permalink to &quot;Async/await 异步语法&quot;">​</a></h3><p><code>ES2017</code> 标准引入了 <code>async</code> 函数，使得异步操作变得更加方便。</p><p><code>async</code> 函数是什么？一句话，它就是 <code>Generator</code> 函数的语法糖。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> getTitle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> html</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">text</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#E5C07B;"> html</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">/&lt;</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">sS</span><span style="color:#ABB2BF;">]</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">/title&gt;/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">getTitle</span><span style="color:#ABB2BF;">( </span><span style="color:#E06C75;">https</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//tc39.github.io/ecma262/ ).then((res) =&gt; console.log(res))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面代码中，函数 <code>getTitle</code> 内部有三个操作：<code>抓取网页</code>、<code>取出文本</code>、<code>匹配页面标题</code>。只有这三个操作全部完成，才会执行 <code>then</code> 方法里面的 <code>console.log</code></p><h2 id="结束-意犹未尽" tabindex="-1">结束（意犹未尽） <a class="header-anchor" href="#结束-意犹未尽" aria-label="Permalink to &quot;结束（意犹未尽）&quot;">​</a></h2><p>文章介绍了 <code>ES6</code> 常用的一些语法以及使用场景; 但是 <code>ES6</code> 内容远不止于此，感兴趣的同学可以去 <code>阮一峰老师的</code> ES6 入门教程 一书中查看详细内容。如果您认可这本书，也可以去正版渠道购买书籍。这样可以使出版社不因出版开源书籍而亏钱，进而鼓励更多的作者开源自己的书籍。</p><h2 id="后记-列举-api" tabindex="-1">后记（列举 API） <a class="header-anchor" href="#后记-列举-api" aria-label="Permalink to &quot;后记（列举 API）&quot;">​</a></h2><p>还有很多 <code>ES6</code> 实用的 <code>API</code> 我就简单提及一下，朋友们看看平时是否有用到</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// -5</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">findIndex</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 9</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]]].</span><span style="color:#61AFEF;">flat</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [1, 2, 3, [4, 5]]</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">]]].</span><span style="color:#61AFEF;">flat</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [1, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">54</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">number</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#E06C75;"> index</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [3, 8, 54, &quot;NaN&quot;] 利用filter过滤去重，注意会漏掉NaN</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [2, 4, 6, 8] 利用map返回一个新数组，不改变原数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 reduce 求和; reduce功能极其强大 ! yyds</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	accumulator</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	currentValue</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	currentIndex</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">	array</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> accumulator</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> currentValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ES2017 引入了跟 Object.keys 配套的 Object.values 和 Object.entries，作为遍历一个对象的补充手段，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 供 for...of 循环使用。</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">values</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">entries</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> Object</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> of</span><span style="color:#61AFEF;"> keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//  a ,  b ,  c</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value</span><span style="color:#C678DD;"> of</span><span style="color:#61AFEF;"> values</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 1, 2, 3</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">] </span><span style="color:#C678DD;">of</span><span style="color:#61AFEF;"> entries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// [ a , 1], [ b , 2], [ c , 3]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="掌握-javascript-光标和选区的-神-操作" tabindex="-1">掌握 JavaScript 光标和选区的“神”操作 <a class="header-anchor" href="#掌握-javascript-光标和选区的-神-操作" aria-label="Permalink to &quot;掌握 JavaScript 光标和选区的“神”操作&quot;">​</a></h2><p>在一些业务场景，比如高亮文本、输入编辑、等场景中需要对光标和选区进行操作时，可以使用浏览器提供的 <code>Selection</code> 对象和 <code>Range</code> 对象来操作光标和选区。</p><h3 id="selection-对象" tabindex="-1">Selection 对象 <a class="header-anchor" href="#selection-对象" aria-label="Permalink to &quot;Selection 对象&quot;">​</a></h3><p><code>Selection</code> 对象表示用户选择的选区或插入符号的当前位置，它可能横跨多个元素。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取 Selection 对象window.getSelection();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>用户可能从左到右（与文档方向相同）选择文本或从右到左（与文档方向相反）选择文本。</p><p><strong><code>anchor</code></strong> <strong>（锚点）：</strong> 指用户开始选择的地方。 <strong><code>focus</code></strong> <strong>（焦点）：</strong> 指用户结束选择的地方。</p><p>如果使用鼠标选择文本的话，<code>anchor</code> 就指你按下鼠标键的地方，而 <code>fo\`\`cus</code> 就指你松开鼠标键的地方。<code>anchor</code> 和 <code>focus</code> 的概念不能与选区的起始位置和终止位置混淆，因为 <code>anchor</code> 可能在 <code>focus</code> 的前面，也可能在 <code>focus</code> 的后面，这取决于你选择文本时鼠标移动的方向，也就是按下鼠标键和松开鼠标键的位置。</p><p>如下图所示：</p><p><img src="`+o+'" alt="图片"></p><p><img src="'+e+`" alt="图片"></p><h4 id="属性" tabindex="-1">属性： <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性：&quot;">​</a></h4><ul><li><p><strong>anchorNode：</strong> 锚点（<code>anchor</code>）所在节点。</p></li><li><p><strong>anchorOffset：</strong></p></li><li><p>如果 <code>anchorNode</code> 是文本节点、注释节点，返回锚点（<code>anchor</code>）到该节点中第一个字的字符个数。</p></li><li><p>如果 <code>anchorNode</code> 是元素节点，返回锚点（<code>anchor</code>）之前的同级节点总数。</p></li><li><p><strong>focusNode：</strong> 焦点（<code>focus</code>）所在节点。</p></li><li><p><strong>focusOffset：</strong></p></li><li><p>如果 <code>focusNode</code> 是文本节点、注释节点，返回焦点（<code>focus</code>）到该节点中的第一个字的字符个数。</p></li><li><p>如果 <code>focusNode</code> 是元素节点，返回焦点（<code>focus</code>）之前的同级节点总数。</p></li><li><p><strong>isCollapsed：</strong> 表示选区的起始位置和终止位置是否重合的 <code>Boolean</code> 值，如果为 <code>true</code>，可以认为当前没有内容选中。</p></li><li><p><strong>rangeCount：</strong> 选区中包含的 <code>Range</code> 对象数量。</p></li><li><p><strong>type：</strong> 描述当前选区的类型，有以下三个值：</p></li><li><p><strong>None：</strong> 当前没有选择。</p></li><li><p><strong>Caret：</strong> 仅单击，但未选择，选区已折叠（即光标在字符之间，并未处于选中状态）。</p></li><li><p><strong>Range：</strong> 选择的是一个范围。</p></li></ul><p><strong>注意：</strong> 以上所有属性都是<strong>只读属性</strong>。</p><h4 id="方法" tabindex="-1">方法： <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法：&quot;">​</a></h4><h4 id="addrange-range" tabindex="-1">addRange(range) <a class="header-anchor" href="#addrange-range" aria-label="Permalink to &quot;addRange(range)&quot;">​</a></h4><p>向选区（<code>Selection</code> 对象）中添加一个区域（ <code>Range</code> 对象）。</p><h4 id="参数" tabindex="-1">参数： <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数：&quot;">​</a></h4><p>range：一个区域对象</p><h4 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例：&quot;">​</a></h4><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">p</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">&gt;文本&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 添加一个选区</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> text</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#text&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRange</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addRange</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rangeObj</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="collapse-parentnode-offset" tabindex="-1">collapse(parentNode,offset) <a class="header-anchor" href="#collapse-parentnode-offset" aria-label="Permalink to &quot;collapse(parentNode,offset)&quot;">​</a></h4><p>收起当前选区到一个点。文档不会发生改变。</p><h5 id="参数-1" tabindex="-1">参数： <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>parentNode</code>：光标落在的目标节点 <code>offset</code>：可选，在目标节点内的偏移量</p><h5 id="示例-1" tabindex="-1">示例： <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> contenteditable</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;true&quot;</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">&gt;文本&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 收起选区到一个点，光标落在一个可编辑元素上</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> text</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#text&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">collapse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="collapsetoend" tabindex="-1">collapseToEnd() <a class="header-anchor" href="#collapsetoend" aria-label="Permalink to &quot;collapseToEnd()&quot;">​</a></h4><p>取消当前选区，并把光标定位在原选区的最末尾处。</p><h5 id="参数-2" tabindex="-1">参数： <a class="header-anchor" href="#参数-2" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p>无</p><h5 id="示例-2" tabindex="-1">示例： <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">collapseToEnd</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="collapsetostart" tabindex="-1">collapseToStart() <a class="header-anchor" href="#collapsetostart" aria-label="Permalink to &quot;collapseToStart()&quot;">​</a></h4><p>取消当前选区，并把光标定位在原选区的最开始处。</p><h5 id="参数-3" tabindex="-1">参数： <a class="header-anchor" href="#参数-3" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p>无</p><h5 id="示例-3" tabindex="-1">示例： <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">collapseToStart</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="containsnode-anode-apartlycontained" tabindex="-1">containsNode(aNode,aPartlyContained) <a class="header-anchor" href="#containsnode-anode-apartlycontained" aria-label="Permalink to &quot;containsNode(aNode,aPartlyContained)&quot;">​</a></h4><p>判断指定的节点是否包含在 <code>Selection</code> 对象中（即是否被选中）。</p><h5 id="参数-4" tabindex="-1">参数： <a class="header-anchor" href="#参数-4" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>aNode</code>：用于判断是否包含在 <code>Selection</code> 对象中的节点。 <code>aPartlyContained</code>： 当此参数为 <code>true</code> 时，<code>Selection</code> 对象包含 <code>aNode</code> 的一部分或全部时，<code>containsNode()</code> 方法返回<code>true</code>。 当此参数为 <code>false</code> （默认值）时，只有 <code>Selection</code> 对象完全包含 <code>aNode</code> 时，<code>containsNode()</code> 方法才返回 <code>true</code>。</p><h5 id="示例-4" tabindex="-1">示例： <a class="header-anchor" href="#示例-4" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">&gt;文本&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> text</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#text&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> contains</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">containsNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="deletefromdocument" tabindex="-1">deleteFromDocument() <a class="header-anchor" href="#deletefromdocument" aria-label="Permalink to &quot;deleteFromDocument()&quot;">​</a></h4><p>从 <code>DOM</code> 中删除选中的文档片段。</p><h5 id="参数-5" tabindex="-1">参数： <a class="header-anchor" href="#参数-5" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p>无</p><h5 id="示例-5" tabindex="-1">示例： <a class="header-anchor" href="#示例-5" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deleteFromDocument</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="extend-node-offset" tabindex="-1">extend(node,offset) <a class="header-anchor" href="#extend-node-offset" aria-label="Permalink to &quot;extend(node,offset)&quot;">​</a></h4><p>移动选区的焦点（<code>focus</code>）到指定的点。选区的锚点（<code>anchor</code>）不会移动。选区将从锚点（<code>anchor</code>）开始到新的焦点（<code>focus</code>），不管方向。</p><h5 id="参数-6" tabindex="-1">参数： <a class="header-anchor" href="#参数-6" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>node</code>：焦点（<code>focus</code>）会被移至此节点内。 <code>offset</code>：可选，默认值为 0，焦点（<code>focus</code>）会被移至 <code>node</code> 内的偏移位置。</p><h5 id="示例-6" tabindex="-1">示例： <a class="header-anchor" href="#示例-6" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text&quot;</span><span style="color:#ABB2BF;">&gt;文本&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> text</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#text&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="getrangeat-index" tabindex="-1">getRangeAt(index) <a class="header-anchor" href="#getrangeat-index" aria-label="Permalink to &quot;getRangeAt(index)&quot;">​</a></h4><p>返回一个当前选区包含的 <code>Range</code> 对象。</p><h5 id="参数-7" tabindex="-1">参数： <a class="header-anchor" href="#参数-7" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>index</code>：该参数指定 <code>Range</code> 对象的索引。如果该数值大于或等于 <code>rangeCount</code> ，将会报错。</p><h5 id="示例-7" tabindex="-1">示例： <a class="header-anchor" href="#示例-7" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 获取一个 Selection 对象</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取一个 Range 对象</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="modify-alter-direction-granularity" tabindex="-1">modify(alter,direction,granularity) <a class="header-anchor" href="#modify-alter-direction-granularity" aria-label="Permalink to &quot;modify(alter,direction,granularity)&quot;">​</a></h4><p>通过文本命令来更改当前选区或光标位置。</p><h5 id="参数-8" tabindex="-1">参数： <a class="header-anchor" href="#参数-8" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>alter</code>：改变类型，传入 <code>move</code> 来移动光标位置，或者 <code>extend</code> 来扩展当前选区。 <code>direction</code>：调整选区的方向。你可以传入 <code>forward</code> 或 <code>backward</code> 来根据选区内容的语言书写方向来调整。或者使用 <code>left</code> 或 <code>right</code> 来指明一个明确的调整方向。 <code>granularity</code>：调整的距离颗粒度。可选值有 <code>character</code>、<code>word</code>、<code>sentence</code>、<code>line</code>、<code>paragraph</code>、<code>lineboundary</code>、<code>sentenceboundary</code>、<code>paragraphboundary</code>、<code>documentboundary</code>。</p><h5 id="示例-8" tabindex="-1">示例： <a class="header-anchor" href="#示例-8" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selection</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">selection</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">modify</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;extend&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;forward&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;word&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="removeallranges" tabindex="-1">removeAllRanges() <a class="header-anchor" href="#removeallranges" aria-label="Permalink to &quot;removeAllRanges()&quot;">​</a></h4><p>会从当前 <code>Selection</code> 对象中移除所有的 <code>Range</code> 对象，取消所有的选择。</p><h5 id="参数-9" tabindex="-1">参数： <a class="header-anchor" href="#参数-9" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p>无</p><h5 id="示例-9" tabindex="-1">示例： <a class="header-anchor" href="#示例-9" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeAllRanges</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="removerange-range" tabindex="-1">removeRange(range) <a class="header-anchor" href="#removerange-range" aria-label="Permalink to &quot;removeRange(range)&quot;">​</a></h4><p>将一个 <code>Range</code> 对象从选区中移除。</p><h5 id="参数-10" tabindex="-1">参数： <a class="header-anchor" href="#参数-10" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>range</code>：一个将从选区中移除的 <code>Range</code> 对象。</p><h5 id="示例-10" tabindex="-1">示例： <a class="header-anchor" href="#示例-10" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeRange</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rangeObj</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="selectallchildren-parentnode" tabindex="-1">selectAllChildren(parentNode) <a class="header-anchor" href="#selectallchildren-parentnode" aria-label="Permalink to &quot;selectAllChildren(parentNode)&quot;">​</a></h4><p>把指定元素的所有子元素设置为选区（该元素本身除外），并取消之前的选区。</p><h5 id="参数-11" tabindex="-1">参数： <a class="header-anchor" href="#参数-11" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>parentNode</code>：指定元素</p><h5 id="示例-11" tabindex="-1">示例： <a class="header-anchor" href="#示例-11" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;selectAll&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;文本1&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;文本2&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selectAll</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#selectAll&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectAllChildren</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">selectAll</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="setbaseandextent-anchornode-anchoroffset-focusnode-focusoffset" tabindex="-1">setBaseAndExtent(anchorNode,anchorOffset,focusNode,focusOffset) <a class="header-anchor" href="#setbaseandextent-anchornode-anchoroffset-focusnode-focusoffset" aria-label="Permalink to &quot;setBaseAndExtent(anchorNode,anchorOffset,focusNode,focusOffset)&quot;">​</a></h4><p>选中两个特定 <code>DOM</code> 节点之间的内容。</p><h5 id="参数-12" tabindex="-1">参数： <a class="header-anchor" href="#参数-12" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>anchorNode</code>：选中内容的开始节点 <code>anchorOffset</code>：选区起始位置在 <code>anchorNode</code> 内的偏移量。 如果 <code>anchorNode</code> 是文本节点，表示选区起始位置在该节点第几个字符位置。 如果 <code>anchorNode</code> 是元素节点，表示选区起始位置在该节点内第几个子节点的位置。 <code>focusNode</code>：选中内容的结束节点 <code>focusOffset</code>：选区终止位置在 <code>focusNode</code> 内的偏移量。 如果 <code>focusNode</code> 是文本节点，表示选区终止位置在该节点第几个字符位置。 如果 <code>focusNode</code> 是元素节点，表示选区终止位置在该节点内第几个子节点的位置。</p><h5 id="示例-12" tabindex="-1">示例： <a class="header-anchor" href="#示例-12" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;start&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;end&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#start&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> end</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#end&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setBaseAndExtent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">end</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="tostring" tabindex="-1">toString() <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString()&quot;">​</a></h4><p>返回代表当前 <code>Selection</code> 对象的字符串，例如当前选择的文本。</p><h5 id="参数-13" tabindex="-1">参数： <a class="header-anchor" href="#参数-13" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p>无</p><h5 id="示例-13" tabindex="-1">示例： <a class="header-anchor" href="#示例-13" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="range-对象" tabindex="-1">Range 对象 <a class="header-anchor" href="#range-对象" aria-label="Permalink to &quot;Range 对象&quot;">​</a></h3><p><code>Range</code> 对象表示被选中的文档片段。一个 <code>Range</code> 对象可能包含整个元素节点，也可能包含元素节点的一部分，例如文本节点的一部分文字。用户通常只能选择一个 <code>Range</code> 对象，但是有的时候用户也有可能选择多个 <code>Range</code> 对象（只有火狐浏览器可以选择多个 <code>Range</code> 对象）。</p><p>可以用 Document 对象的 Document.createRange 方法创建 <code>Range</code>，也可以用 Selection 对象的 getRangeAt 方法获取 <code>Range</code>。另外，还可以通过 Document 对象的构造函数 Range() 来得到 <code>Range</code>。</p><h4 id="属性-1" tabindex="-1">属性 <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ul><li><p><strong>collapsed：</strong> 返回一个表示起始位置和终止位置是否相同的 <code>Boolean</code> 值。</p></li><li><p><strong>commonAncestorContainer：</strong> 返回包含 <code>startContainer</code> 和 <code>endContainer</code> 的最深一级的节点。</p></li><li><p><strong>endContainer：</strong> 返回包含 <code>Range</code> 终点位置的节点。</p></li><li><p><strong>endOffset：</strong></p></li><li><ul><li>如果 <code>endContainer</code> 是文本节点、注释节点，返回该节点第一个字到选区边界的字符个数（即被选中的字符个数）。</li><li>如果 <code>endContainer</code> 是元素节点，返回选区终止位置之后第一个节点之前的同级节点总数。</li></ul></li><li><p><strong>startContainer：</strong> 返回包含 <code>Range</code> 开始位置的节点。</p></li><li><p><strong>startOffset：</strong></p></li><li><ul><li>如果 <code>startContainer</code> 是文本节点、注释节点，返回该节点第一个字到选区边界的字符个数（即未被选中的字符个数）。</li><li>如果 <code>startContainer</code> 是元素节点，返回选区起始位置第一个节点之前的同级节点总数。</li></ul></li></ul><p><strong>注意：</strong> 以上所有属性都是<strong>只读属性</strong>。</p><h4 id="方法-1" tabindex="-1">方法 <a class="header-anchor" href="#方法-1" aria-label="Permalink to &quot;方法&quot;">​</a></h4><h5 id="clonecontents" tabindex="-1">cloneContents() <a class="header-anchor" href="#clonecontents" aria-label="Permalink to &quot;cloneContents()&quot;">​</a></h5><p>返回一个文档片段，它是 <code>Range</code> 对象中所有节点的副本。</p><h6 id="参数-14" tabindex="-1">参数 <a class="header-anchor" href="#参数-14" aria-label="Permalink to &quot;参数&quot;">​</a></h6><p>无</p><h6 id="示例-14" tabindex="-1">示例 <a class="header-anchor" href="#示例-14" aria-label="Permalink to &quot;示例&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 在文档中插入选中元素</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">documentFragment</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cloneContents</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">documentFragment</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="clonerange" tabindex="-1">cloneRange() <a class="header-anchor" href="#clonerange" aria-label="Permalink to &quot;cloneRange()&quot;">​</a></h5><p>返回一个 <code>Range</code> 对象的副本（两个对象各自做出改变，都不会影响另一方）。</p><h6 id="参数-15" tabindex="-1">参数 <a class="header-anchor" href="#参数-15" aria-label="Permalink to &quot;参数&quot;">​</a></h6><p>无</p><h6 id="示例-15" tabindex="-1">示例 <a class="header-anchor" href="#示例-15" aria-label="Permalink to &quot;示例&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">clone</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cloneRange</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="collapse-tostart" tabindex="-1">collapse(toStart) <a class="header-anchor" href="#collapse-tostart" aria-label="Permalink to &quot;collapse(toStart)&quot;">​</a></h5><p>向开始或结束方向折叠 <code>Range</code> 。</p><h6 id="参数-16" tabindex="-1">参数： <a class="header-anchor" href="#参数-16" aria-label="Permalink to &quot;参数：&quot;">​</a></h6><p><strong>toStart</strong>：可选，<code>Boolean</code> 值（默认值 <code>false</code>）， <code>true</code> 折叠到 <code>Range</code> 的开始方向，<code>false</code> 折叠到结束方向。</p><h6 id="示例-16" tabindex="-1">示例： <a class="header-anchor" href="#示例-16" aria-label="Permalink to &quot;示例：&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">collapse</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="compareboundarypoints-how-sourcerange" tabindex="-1">compareBoundaryPoints(how, sourceRange) <a class="header-anchor" href="#compareboundarypoints-how-sourcerange" aria-label="Permalink to &quot;compareBoundaryPoints(how, sourceRange)&quot;">​</a></h5><p>比较两个 <code>Range</code> 对象的起始位置节点或结束位置节点。</p><h6 id="参数-17" tabindex="-1">参数： <a class="header-anchor" href="#参数-17" aria-label="Permalink to &quot;参数：&quot;">​</a></h6><p><code>how</code> 表示比较方法的常量：</p><p>Range.END_TO_END ：比较 sourceRange 对象的结束位置节点和原 Range 对象的结束位置节点。 Range.END_TO_START ：比较 sourceRange 对象的结束位置节点和原 Range 对象的起始位置节点。 Range.START_TO_END ：比较 sourceRange 对象的起始位置节点和原 Range 对象的结束位置节点。 Range.START_TO_START ：比较 sourceRange 对象的起始位置节点和原 Range 对象的起始位置节点。</p><p><strong><code>sourceRange</code></strong>：一个与原 <code>Range</code> 对象比较的 <code>Range</code> 对象。</p><h6 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h6><p><code>compare</code> 表示一个数字：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> ：</span><span style="color:#E06C75;">原</span><span style="color:#E06C75;"> Range</span><span style="color:#E06C75;"> 对象的比较节点在</span><span style="color:#E06C75;"> sourceRange</span><span style="color:#E06C75;"> 对象的比较节点之前</span></span>
<span class="line"><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> ：</span><span style="color:#E06C75;">原</span><span style="color:#E06C75;"> Range</span><span style="color:#E06C75;"> 对象的比较节点在</span><span style="color:#E06C75;"> sourceRange</span><span style="color:#E06C75;"> 对象的比较节点的相同位置</span></span>
<span class="line"><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> ：</span><span style="color:#E06C75;">原</span><span style="color:#E06C75;"> Range</span><span style="color:#E06C75;"> 对象的比较节点在</span><span style="color:#E06C75;"> sourceRange</span><span style="color:#E06C75;"> 对象的比较节点之后</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h6 id="示例-17" tabindex="-1">示例 <a class="header-anchor" href="#示例-17" aria-label="Permalink to &quot;示例&quot;">​</a></h6><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;range&quot;</span><span style="color:#ABB2BF;">&gt;range&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;sourceRange&quot;</span><span style="color:#ABB2BF;">&gt;sourceRange&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> range</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sourceRange</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">compare</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">range</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRange</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">range</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#rang&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E06C75;">sourceRange</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRange</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">sourceRange</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#sourceRange&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E06C75;">compare</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> range</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareBoundaryPoints</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Range</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">START_TO_END</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sourceRange</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="comparepoint-referencenode-offset" tabindex="-1">comparePoint(referenceNode,offset) <a class="header-anchor" href="#comparepoint-referencenode-offset" aria-label="Permalink to &quot;comparePoint(referenceNode,offset)&quot;">​</a></h5><p>判断指定节点是在 <code>Range</code> 对象的之前、相同还是之后位置。</p><h6 id="参数-18" tabindex="-1">参数： <a class="header-anchor" href="#参数-18" aria-label="Permalink to &quot;参数：&quot;">​</a></h6><p><code>referenceNode</code>：与 <code>Range</code> 对象进行比较的节点。 <code>offset</code>：在 <code>referenceNode</code> 内的偏移量。 如果 <code>referenceNode</code> 是文本节点、注释节点，<code>offset</code> 表示在该节点中字符的偏移位置。 如果 <code>referenceNode</code> 是元素节点，<code>offset</code> 表示在该节点中子元素的偏移位置。</p><h6 id="示例-18" tabindex="-1">示例： <a class="header-anchor" href="#示例-18" aria-label="Permalink to &quot;示例：&quot;">​</a></h6><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;range&quot;</span><span style="color:#ABB2BF;">&gt;range&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;referenceNode&quot;</span><span style="color:#ABB2BF;">&gt;referenceNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">range</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRange</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">range</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#range&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E06C75;">returnValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> range</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">comparePoint</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#referenceNode&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="createcontextualfragment-tagstring" tabindex="-1">createContextualFragment(tagString) <a class="header-anchor" href="#createcontextualfragment-tagstring" aria-label="Permalink to &quot;createContextualFragment(tagString)&quot;">​</a></h5><p>将 <code>HTML</code> 字符串转换为文档片段</p><h6 id="参数-19" tabindex="-1">参数： <a class="header-anchor" href="#参数-19" aria-label="Permalink to &quot;参数：&quot;">​</a></h6><p><code>tagString</code>：要转换的 <code>HTML</code> 字符串。</p><h6 id="示例-19" tabindex="-1">示例： <a class="header-anchor" href="#示例-19" aria-label="Permalink to &quot;示例：&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> tagString</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&lt;div&gt;node&lt;/div&gt;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> range</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRange</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> documentFragment</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> range</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createContextualFragment</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tagString</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">documentFragment</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="deletecontents" tabindex="-1">deleteContents() <a class="header-anchor" href="#deletecontents" aria-label="Permalink to &quot;deleteContents()&quot;">​</a></h5><p>从 <code>DOM</code> 中删除选中的文档片段，不返回删除的文档片段。</p><h6 id="参数-20" tabindex="-1">参数： <a class="header-anchor" href="#参数-20" aria-label="Permalink to &quot;参数：&quot;">​</a></h6><p>无</p><h6 id="示例-20" tabindex="-1">示例： <a class="header-anchor" href="#示例-20" aria-label="Permalink to &quot;示例：&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> tagString</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&lt;div&gt;node&lt;/div&gt;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> range</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRange</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> documentFragment</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> range</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createContextualFragment</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tagString</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">documentFragment</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="extractcontents" tabindex="-1">extractContents() <a class="header-anchor" href="#extractcontents" aria-label="Permalink to &quot;extractContents()&quot;">​</a></h4><p>从 <code>DOM</code> 中删除选中的文档片段，返回删除的文档片段（不保留 <code>DOM</code> 事件）。</p><h5 id="参数-21" tabindex="-1">参数： <a class="header-anchor" href="#参数-21" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p>无</p><h5 id="示例-21" tabindex="-1">示例： <a class="header-anchor" href="#示例-21" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deleteContents</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="getboundingclientrect" tabindex="-1">getBoundingClientRect() <a class="header-anchor" href="#getboundingclientrect" aria-label="Permalink to &quot;getBoundingClientRect()&quot;">​</a></h4><p>返回一个 DOMRect 对象，表示整个选区的位置信息。</p><h5 id="参数-22" tabindex="-1">参数： <a class="header-anchor" href="#参数-22" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p>无</p><h5 id="示例-22" tabindex="-1">示例： <a class="header-anchor" href="#示例-22" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> boundingRect</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBoundingClientRect</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="getclientrects" tabindex="-1">getClientRects() <a class="header-anchor" href="#getclientrects" aria-label="Permalink to &quot;getClientRects()&quot;">​</a></h4><p>返回一个选区内所有元素调用 Element.getClientRects() 方法所得结果的列表。表示选区在屏幕上所占的区域。</p><h5 id="参数-23" tabindex="-1">参数： <a class="header-anchor" href="#参数-23" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p>无</p><h5 id="示例-23" tabindex="-1">示例： <a class="header-anchor" href="#示例-23" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> boundingRect</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getClientRects</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="insertnode-newnode" tabindex="-1">insertNode(newNode) <a class="header-anchor" href="#insertnode-newnode" aria-label="Permalink to &quot;insertNode(newNode)&quot;">​</a></h4><p>在选区开始处插入一个节点。</p><h5 id="参数-24" tabindex="-1">参数： <a class="header-anchor" href="#参数-24" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>newNode</code>：需要插入的节点</p><h5 id="示例-24" tabindex="-1">示例： <a class="header-anchor" href="#示例-24" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;insertNode&quot;</span><span style="color:#ABB2BF;">&gt;insertNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;node&quot;</span><span style="color:#ABB2BF;">&gt;node&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">range</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createRange</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">newNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#node&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">range</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#insertNode&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">range</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">insertNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newNode</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="intersectsnode-referencenode" tabindex="-1">intersectsNode(referenceNode) <a class="header-anchor" href="#intersectsnode-referencenode" aria-label="Permalink to &quot;intersectsNode(referenceNode)&quot;">​</a></h4><p>返回一个 <code>Boolean</code> 值，判断指定节点和 <code>Range</code> 对象是否相交。</p><h5 id="参数-25" tabindex="-1">参数： <a class="header-anchor" href="#参数-25" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>referenceNode</code>：需要比较的节点</p><h5 id="示例-25" tabindex="-1">示例： <a class="header-anchor" href="#示例-25" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;referenceNode&quot;</span><span style="color:#ABB2BF;">&gt;referenceNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">referenceNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#referenceNode&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">intersectsNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">referenceNode</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="ispointinrange-referencenode-offset" tabindex="-1">isPointInRange(referenceNode,offset) <a class="header-anchor" href="#ispointinrange-referencenode-offset" aria-label="Permalink to &quot;isPointInRange(referenceNode,offset)&quot;">​</a></h4><p>返回一个 <code>Boolean</code> 值，判断指定节点是否在 <code>Range</code> 对象内。</p><h5 id="参数-26" tabindex="-1">参数： <a class="header-anchor" href="#参数-26" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>referenceNode</code>：指定节点 <code>offset</code>：在 <code>referenceNode</code> 内的偏移量。 如果 <code>referenceNode</code> 是文本节点，<code>offset</code> 表示在该节点中字符的偏移位置。 如果 <code>referenceNode</code> 是元素节点，<code>offset</code> 表示在该节点中子元素的偏移位置。</p><h5 id="示例-26" tabindex="-1">示例： <a class="header-anchor" href="#示例-26" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;referenceNode&quot;</span><span style="color:#ABB2BF;">&gt;referenceNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">referenceNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#referenceNode&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isPointInRange</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">referenceNode</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="selectnode-referencenode" tabindex="-1">selectNode(referenceNode) <a class="header-anchor" href="#selectnode-referencenode" aria-label="Permalink to &quot;selectNode(referenceNode)&quot;">​</a></h4><p>将指定节点包含在 <code>Range</code> 对象内。</p><h5 id="参数-27" tabindex="-1">参数： <a class="header-anchor" href="#参数-27" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>referenceNode</code>：指定节点</p><h5 id="示例-27" tabindex="-1">示例： <a class="header-anchor" href="#示例-27" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;referenceNode&quot;</span><span style="color:#ABB2BF;">&gt;referenceNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">referenceNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#referenceNode&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectNode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">referenceNode</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="selectnodecontents-referencenode" tabindex="-1">selectNodeContents(referenceNode) <a class="header-anchor" href="#selectnodecontents-referencenode" aria-label="Permalink to &quot;selectNodeContents(referenceNode)&quot;">​</a></h4><p>将指定节点的内容包含在 <code>Range</code> 对象内。</p><h5 id="参数-28" tabindex="-1">参数： <a class="header-anchor" href="#参数-28" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>referenceNode</code>：指定节点</p><h5 id="示例-28" tabindex="-1">示例： <a class="header-anchor" href="#示例-28" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;referenceNode&quot;</span><span style="color:#ABB2BF;">&gt;referenceNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">referenceNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#referenceNode&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">selectNodeContents</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">referenceNode</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="setend-endnode-endoffset" tabindex="-1">setEnd(endNode,endOffset) <a class="header-anchor" href="#setend-endnode-endoffset" aria-label="Permalink to &quot;setEnd(endNode,endOffset)&quot;">​</a></h4><p>设置选区的终止位置。</p><h5 id="参数-29" tabindex="-1">参数： <a class="header-anchor" href="#参数-29" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>endNode</code>：终止位置所在的节点 <code>endOffset</code>：在 <code>endNode</code> 内的偏移量。 如果 <code>endNode</code> 是文本节点、注释节点，<code>endOffset</code> 表示在该节点中字符的偏移位置。 如果 <code>endNode</code> 是元素节点，<code>endOffset</code> 表示在该节点中子元素的偏移位置。</p><h5 id="示例-29" tabindex="-1">示例： <a class="header-anchor" href="#示例-29" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;endNode&quot;</span><span style="color:#ABB2BF;">&gt;endNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> endNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#endNode&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">endNode</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="setendafter-referencenode" tabindex="-1">setEndAfter(referenceNode) <a class="header-anchor" href="#setendafter-referencenode" aria-label="Permalink to &quot;setEndAfter(referenceNode)&quot;">​</a></h4><p>设置选区的结束位置在指定节点之后。</p><h5 id="参数-30" tabindex="-1">参数： <a class="header-anchor" href="#参数-30" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>referenceNode</code>：指定节点</p><h5 id="示例-30" tabindex="-1">示例： <a class="header-anchor" href="#示例-30" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;referenceNode&quot;</span><span style="color:#ABB2BF;">&gt;referenceNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> referenceNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#referenceNode&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setEndAfter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">referenceNode</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="setendbefore-referencenode" tabindex="-1">setEndBefore(referenceNode) <a class="header-anchor" href="#setendbefore-referencenode" aria-label="Permalink to &quot;setEndBefore(referenceNode)&quot;">​</a></h4><p>设置选区的结束位置在指定节点之前。</p><h5 id="参数-31" tabindex="-1">参数： <a class="header-anchor" href="#参数-31" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>referenceNode</code>：指定节点</p><h5 id="示例-31" tabindex="-1">示例： <a class="header-anchor" href="#示例-31" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;referenceNode&quot;</span><span style="color:#ABB2BF;">&gt;referenceNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> referenceNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#referenceNode&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setEndBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">referenceNode</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="setstart-startnode-startoffset" tabindex="-1">setStart(startNode,startOffset) <a class="header-anchor" href="#setstart-startnode-startoffset" aria-label="Permalink to &quot;setStart(startNode,startOffset)&quot;">​</a></h4><p>设置选区的起始位置。</p><h5 id="参数-32" tabindex="-1">参数： <a class="header-anchor" href="#参数-32" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>startNode</code>：起始位置所在的节点 <code>startOffset</code>：在 <code>startNode</code> 内的偏移量。 如果 <code>startNode</code> 是文本节点、注释节点，<code>startOffset</code> 表示在该节点中字符的偏移位置。 如果 <code>startNode</code> 是元素节点，<code>startOffset</code> 表示在该节点中子元素的偏移位置。</p><h5 id="示例-32" tabindex="-1">示例： <a class="header-anchor" href="#示例-32" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;startNode&quot;</span><span style="color:#ABB2BF;">&gt;startNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">startNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#startNode&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">startNode</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="setstartafter-referencenode" tabindex="-1">setStartAfter(referenceNode) <a class="header-anchor" href="#setstartafter-referencenode" aria-label="Permalink to &quot;setStartAfter(referenceNode)&quot;">​</a></h4><p>设置选区的起始位置在指定节点之后。</p><h5 id="参数-33" tabindex="-1">参数： <a class="header-anchor" href="#参数-33" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>referenceNode</code>：指定节点</p><h5 id="示例-33" tabindex="-1">示例： <a class="header-anchor" href="#示例-33" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;referenceNode&quot;</span><span style="color:#ABB2BF;">&gt;referenceNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">referenceNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#referenceNode&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setStartAfter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">referenceNode</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="setstartbefore-referencenode" tabindex="-1">setStartBefore(referenceNode) <a class="header-anchor" href="#setstartbefore-referencenode" aria-label="Permalink to &quot;setStartBefore(referenceNode)&quot;">​</a></h4><p>设置选区的起始位置在指定节点之前。</p><h5 id="参数-34" tabindex="-1">参数： <a class="header-anchor" href="#参数-34" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>referenceNode</code>：指定节点</p><h5 id="示例-34" tabindex="-1">示例： <a class="header-anchor" href="#示例-34" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;referenceNode&quot;</span><span style="color:#ABB2BF;">&gt;referenceNode&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">referenceNode</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#referenceNode&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setStartBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">referenceNode</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="surroundcontents-newparent" tabindex="-1">surroundContents(newParent) <a class="header-anchor" href="#surroundcontents-newparent" aria-label="Permalink to &quot;surroundContents(newParent)&quot;">​</a></h4><p>把指定节点插入选区的起始位置，然后把指定节点的内容替换为选区的内容。</p><h5 id="参数-35" tabindex="-1">参数： <a class="header-anchor" href="#参数-35" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p><code>newParent</code>：指定节点</p><h5 id="示例-35" tabindex="-1">示例： <a class="header-anchor" href="#示例-35" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;newParent&quot;</span><span style="color:#ABB2BF;">&gt;newParent&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">newParent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#newParent&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">surroundContents</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newParent</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="tostring-1" tabindex="-1">toString() <a class="header-anchor" href="#tostring-1" aria-label="Permalink to &quot;toString()&quot;">​</a></h4><p>返回代表当前 <code>Range</code> 对象的字符串，例如当前选择的文本。</p><h5 id="参数-36" tabindex="-1">参数： <a class="header-anchor" href="#参数-36" aria-label="Permalink to &quot;参数：&quot;">​</a></h5><p>无</p><h5 id="示例-36" tabindex="-1">示例： <a class="header-anchor" href="#示例-36" aria-label="Permalink to &quot;示例：&quot;">​</a></h5><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeStr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> rangeObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="选区中的多个区域" tabindex="-1">选区中的多个区域 <a class="header-anchor" href="#选区中的多个区域" aria-label="Permalink to &quot;选区中的多个区域&quot;">​</a></h3><p>一个 <code>Selection</code> 对象表示用户选择的区域（<code>Range</code> 对象）的集合，通常它只包含一个区域，访问方式如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//获取一个 Selection 对象</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> selObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//获取一个 Range 对象</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> rangeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> selObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRangeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>只有火狐浏览器实现了多个区域，如下图所示：</p><p><img src="`+r+'" alt="图片"></p><h3 id="修改选区样式" tabindex="-1">修改选区样式 <a class="header-anchor" href="#修改选区样式" aria-label="Permalink to &quot;修改选区样式&quot;">​</a></h3><p>使用 ::selection 选择器可以匹配被选中的部分。 目前只有一小部分 CSS 属性可以用于 ::selection 选择器：</p><ul><li>color</li><li>background-color</li><li>text-shadow</li></ul><p><strong>图例</strong></p><p><img src="'+t+`" alt="图片"></p><h2 id="_5-种使-javascript-代码更干净的方法" tabindex="-1">5 种使 JavaScript 代码更干净的方法 <a class="header-anchor" href="#_5-种使-javascript-代码更干净的方法" aria-label="Permalink to &quot;5 种使 JavaScript 代码更干净的方法&quot;">​</a></h2><p>JavaScript 无处不在，从 PC 端到移动设备端，甚至是后端，都在使用 JavaScript。</p><p>在本文中，我将尝试一些可用来使代码看起来更简洁的实践方案。</p><h3 id="_1、使用默认参数代替短路或条件" tabindex="-1">1、使用默认参数代替短路或条件 <a class="header-anchor" href="#_1、使用默认参数代替短路或条件" aria-label="Permalink to &quot;1、使用默认参数代替短路或条件&quot;">​</a></h3><p>默认参数通常比短路更干净。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> SomeMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">paramThatCanBeUndefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> localValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> paramThatCanBeUndefined</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;Default Value&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">localValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">SomeMethod</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// Default Value</span></span>
<span class="line"><span style="color:#61AFEF;">SomeMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;SomeValue&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// SomeValue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>尝试以下方法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> SomeMethod</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">  console.log(</span><span style="color:#E06C75;font-style:italic;">paramThatCanBeUndefined</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">SomeMethod</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// Default Value</span></span>
<span class="line"><span style="color:#61AFEF;">SomeMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;SomeValue&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// SomeValue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>声明：Falsy 值，如&#39;&#39;，&quot;&quot;，false，null，0，和 NaN 将不会被默认值替代：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> SomeMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">paramThatCanBeUndefined</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Default Value&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">paramThatCanBeUndefined</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">SomeMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// will not Default Value, will null Instead</span></span>
<span class="line"><span style="color:#61AFEF;">SomeMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;SomeValue&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// SomeValue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2、处理多个条件" tabindex="-1">2、处理多个条件 <a class="header-anchor" href="#_2、处理多个条件" aria-label="Permalink to &quot;2、处理多个条件&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> conditions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;Condition 2&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;Condition String2&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">someFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;someValue1&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;someValue2&quot;</span><span style="color:#ABB2BF;">)){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> true</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#D19A66;"> false</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>一种更干净的方法是：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">someFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">   const</span><span style="color:#E5C07B;"> conditions</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;someValue1&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;someValue2&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">   return</span><span style="color:#E5C07B;"> conditions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">condition</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">condition</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3、用动态键值对替换开关-即对象文字" tabindex="-1">3、用动态键值对替换开关（即对象文字） <a class="header-anchor" href="#_3、用动态键值对替换开关-即对象文字" aria-label="Permalink to &quot;3、用动态键值对替换开关（即对象文字）&quot;">​</a></h3><p>开关版本（或将开关替换为 if / else）：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> UserRole</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	ADMIN</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Admin&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	GENERAL_USER</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;GeneralUser&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	SUPER_ADMIN</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;SuperAdmin&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">userRole</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;default role&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">userRole</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		case</span><span style="color:#E5C07B;"> UserRole</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ADMIN</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#98C379;"> &quot;/admin&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		case</span><span style="color:#E5C07B;"> UserRole</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">GENERAL_USER</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#98C379;"> &quot;/GENERAL_USER&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		case</span><span style="color:#E5C07B;"> UserRole</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SUPER_ADMIN</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#98C379;"> &quot;/superadmin&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#98C379;"> &quot;/&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UserRole</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ADMIN</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// return &quot;/admin&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Anything&quot;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// return Default path</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getRoute</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// return Default path</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// return Default path</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// More cases if new arrive</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// You can think if else instead of switch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>动态键值对版本：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> UserRole</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	ADMIN</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Admin&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	GENERAL_USER</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;GeneralUser&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	SUPER_ADMIN</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;SuperAdmin&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">userRole</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;default role&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> appRoute</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">		[</span><span style="color:#E5C07B;">UserRole</span><span style="color:#E06C75;">.ADMIN</span><span style="color:#ABB2BF;">]: </span><span style="color:#98C379;">&quot;/admin&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		[</span><span style="color:#E5C07B;">UserRole</span><span style="color:#E06C75;">.GENERAL_USER</span><span style="color:#ABB2BF;">]: </span><span style="color:#98C379;">&quot;/user&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		[</span><span style="color:#E5C07B;">UserRole</span><span style="color:#E06C75;">.SUPER_ADMIN</span><span style="color:#ABB2BF;">]: </span><span style="color:#98C379;">&quot;/superadmin&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> appRoute</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">userRole</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">||</span><span style="color:#98C379;"> &quot;Default path&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UserRole</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ADMIN</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// return &quot;/admin&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Anything&quot;</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// return Default path</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getRoute</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// return Default path</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">getRoute</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// return Default path</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// No more switch/if-else here.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Easy to Further expansion</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_4、避免过多的函数参数" tabindex="-1">4、避免过多的函数参数 <a class="header-anchor" href="#_4、避免过多的函数参数" aria-label="Permalink to &quot;4、避免过多的函数参数&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> myFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">employeeName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">jobTitle</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">yrExp</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">majorExp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">employeeName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> is working as </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">jobTitle</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> with </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">yrExp</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">    years of experience in </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">majorExp</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//output be like John is working as Project Manager with 12 year of experience in Project Management</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// you can call it via</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">myFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Project Manager&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Project Management&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    ***** PROBLEMS ARE *****</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Violation of &#39;clean code&#39; principle</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Parameter sequencing is important</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Unused Params warning if not used</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Testing need to consider a lot of edge cases.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这是一种更清洁的方法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> myFunction</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">employeeName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">jobTitle</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">yrExp</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">majorExp</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">employeeName</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> is working as </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">jobTitle</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> with </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">yrExp</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> years of experience in </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">majorExp</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//output be like John is working as Project Manager with 12 year of experience in Project Management</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// you can call it via</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mockTechPeople</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	employeeName</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;John&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	jobTitle</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Project Manager&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	yrExp</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	majorExp</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Project Management&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">myFunction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">mockTechPeople</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ES2015/ES6 destructuring syntax is in action</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// map your desired value to variable you need.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_5、使用-object-assign-设置默认对象" tabindex="-1">5、使用 Object.assign 设置默认对象 <a class="header-anchor" href="#_5、使用-object-assign-设置默认对象" aria-label="Permalink to &quot;5、使用 Object.assign 设置默认对象&quot;">​</a></h3><p>这看起来很繁琐：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> someObject</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	title</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	subTitle</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Subtitle&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	buttonColor</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	disabled</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createOption</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">someObject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	someObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> someObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">title</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;Default Title&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	someObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subTitle</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> someObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">subTitle</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;Default Subtitle&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	someObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">buttonColor</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> someObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">buttonColor</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;blue&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	someObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">disabled</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">		someObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">disabled</span><span style="color:#56B6C2;"> !==</span><span style="color:#D19A66;"> undefined</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> someObject</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">disabled</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> someObject</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">createOption</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">someObject</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Output be like</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// {title: &#39;Default Title&#39;, subTitle: &#39;Subtitle&#39;, buttonColor: &#39;blue&#39;, disabled: true}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这种方法看起来更好：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> someObject</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	title</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	subTitle</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Subtitle&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	buttonColor</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	disabled</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> creteOption</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">someObject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> newObject</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Default Title&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			subTitle</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Default Subtitle&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			buttonColor</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;blue&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			disabled</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#E06C75;">		someObject</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> newObject</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">creteOption</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">someObject</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="_56-个-javascript-实用工具函数助你提升开发效率" tabindex="-1">56 个 JavaScript 实用工具函数助你提升开发效率 <a class="header-anchor" href="#_56-个-javascript-实用工具函数助你提升开发效率" aria-label="Permalink to &quot;56 个 JavaScript 实用工具函数助你提升开发效率&quot;">​</a></h2><h3 id="_1-数字操作" tabindex="-1">1. 数字操作 <a class="header-anchor" href="#_1-数字操作" aria-label="Permalink to &quot;1. 数字操作&quot;">​</a></h3><h4 id="_1-生成指定范围随机数" tabindex="-1">（1）生成指定范围随机数 <a class="header-anchor" href="#_1-生成指定范围随机数" aria-label="Permalink to &quot;（1）生成指定范围随机数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> randomNum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">min</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">max</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">	Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">max</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> min</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> min</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-数字千分位分隔" tabindex="-1">（2）数字千分位分隔 <a class="header-anchor" href="#_2-数字千分位分隔" aria-label="Permalink to &quot;（2）数字千分位分隔&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> format</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> num</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> n</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> len</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> num</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">len</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> temp</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> remainder</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> len</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">remainder</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 不是3的整数倍</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E5C07B;">				num</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">remainder</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">				&quot;,&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E5C07B;">				num</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">remainder</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">len</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/\\d</span><span style="color:#D19A66;">{3}</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;,&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">				temp</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 3的整数倍</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> num</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">len</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/\\d</span><span style="color:#D19A66;">{3}</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;,&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> temp</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="_2-数组操作" tabindex="-1">2. 数组操作 <a class="header-anchor" href="#_2-数组操作" aria-label="Permalink to &quot;2. 数组操作&quot;">​</a></h3><h4 id="_1-数组乱序" tabindex="-1">（1）数组乱序 <a class="header-anchor" href="#_1-数组乱序" aria-label="Permalink to &quot;（1）数组乱序&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> arrScrambling</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> randomIndex</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">round</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		[</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">randomIndex</span><span style="color:#ABB2BF;">]] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">randomIndex</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-数组扁平化" tabindex="-1">（2）数组扁平化 <a class="header-anchor" href="#_2-数组扁平化" aria-label="Permalink to &quot;（2）数组扁平化&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> flatten</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])) {</span></span>
<span class="line"><span style="color:#E06C75;">			result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">flatten</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]));</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_3-数组中获取随机数" tabindex="-1">（3）数组中获取随机数 <a class="header-anchor" href="#_3-数组中获取随机数" aria-label="Permalink to &quot;（3）数组中获取随机数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> sample</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">)];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-字符串操作" tabindex="-1">3. 字符串操作 <a class="header-anchor" href="#_3-字符串操作" aria-label="Permalink to &quot;3. 字符串操作&quot;">​</a></h3><h4 id="_1-生成随机字符串" tabindex="-1">（1）生成随机字符串 <a class="header-anchor" href="#_1-生成随机字符串" aria-label="Permalink to &quot;（1）生成随机字符串&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> randomString</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">len</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> chars</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> strLen</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> chars</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> randomStr</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> len</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		randomStr</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> chars</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;"> strLen</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> randomStr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_2-字符串首字母大写" tabindex="-1">（2）字符串首字母大写 <a class="header-anchor" href="#_2-字符串首字母大写" aria-label="Permalink to &quot;（2）字符串首字母大写&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> fistLetterUpper</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-手机号中间四位变成" tabindex="-1">（3）手机号中间四位变成* <a class="header-anchor" href="#_3-手机号中间四位变成" aria-label="Permalink to &quot;（3）手机号中间四位变成\\*&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> telFormat</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">tel</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	tel</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tel</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> tel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substr</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;****&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> tel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substr</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_4-驼峰命名转换成短横线命名" tabindex="-1">（4）驼峰命名转换成短横线命名 <a class="header-anchor" href="#_4-驼峰命名转换成短横线命名" aria-label="Permalink to &quot;（4）驼峰命名转换成短横线命名&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getKebabCase</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#D19A66;">[A-Z]</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#98C379;"> &quot;-&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> item</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_5-短横线命名转换成驼峰命名" tabindex="-1">（5）短横线命名转换成驼峰命名 <a class="header-anchor" href="#_5-短横线命名转换成驼峰命名" aria-label="Permalink to &quot;（5）短横线命名转换成驼峰命名&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getCamelCase</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/-(</span><span style="color:#D19A66;">[a-z]</span><span style="color:#E06C75;">)/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> item</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_6-全角转换为半角" tabindex="-1">（6）全角转换为半角 <a class="header-anchor" href="#_6-全角转换为半角" aria-label="Permalink to &quot;（6）全角转换为半角&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> toCDB</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		code</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 65281</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> code</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 65374</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			result</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fromCharCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 65248</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 12288</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			result</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fromCharCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 12288</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 32</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			result</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_7-半角转换为全角" tabindex="-1">（7）半角转换为全角 <a class="header-anchor" href="#_7-半角转换为全角" aria-label="Permalink to &quot;（7）半角转换为全角&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> toDBC</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		code</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 33</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> code</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 126</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			result</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fromCharCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 65248</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 32</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			result</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fromCharCode</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 12288</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 32</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			result</span><span style="color:#56B6C2;"> +=</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_4-格式转化" tabindex="-1">4. 格式转化 <a class="header-anchor" href="#_4-格式转化" aria-label="Permalink to &quot;4. 格式转化&quot;">​</a></h3><h4 id="_1-数字转化为大写金额" tabindex="-1">（1）数字转化为大写金额 <a class="header-anchor" href="#_1-数字转化为大写金额" aria-label="Permalink to &quot;（1）数字转化为大写金额&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> digitUppercase</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">n</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> fraction</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;角&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;分&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> digit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;零&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;壹&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;贰&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;叁&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;肆&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;伍&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;陆&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;柒&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;捌&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;玖&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> unit</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">		[</span><span style="color:#98C379;">&quot;元&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;万&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;亿&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">		[</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;拾&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;佰&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;仟&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">	];</span></span>
<span class="line"><span style="color:#E06C75;">	n</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> fraction</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		s</span><span style="color:#56B6C2;"> +=</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;">			digit</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 10</span><span style="color:#56B6C2;"> *</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pow</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">%</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> fraction</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">		).</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/零./</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">	s</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;整&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	n</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> unit</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> j</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> unit</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> n</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			p</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> digit</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> unit</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">][</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			n</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#E06C75;">		s</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/(零.)</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">零</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;零&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> unit</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">][</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> s</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/(零.)</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">零元/</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;元&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/(零.)</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;零&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">整</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;零元整&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h4 id="_2-数字转化为中文数字" tabindex="-1">（2）数字转化为中文数字 <a class="header-anchor" href="#_2-数字转化为中文数字" aria-label="Permalink to &quot;（2）数字转化为中文数字&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> intToChinese</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> len</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> idxs</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#98C379;">		&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;十&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;百&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;千&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;万&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;十&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;百&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;千&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;亿&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;十&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;百&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;千&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;万&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;十&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;百&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;千&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;亿&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	];</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> num</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;零&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;一&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;二&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;三&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;四&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;五&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;六&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;七&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;八&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;九&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/(</span><span style="color:#D19A66;">[1-9]</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">0</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">)/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">$</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">$1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">idx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">full</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> pos</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			pos</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> len</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> idx</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">idx</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> $1</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> idxs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">len</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> idx</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;十&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> idxs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">len</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> idx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]] </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> idxs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">len</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> idx</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> left</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> len</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> idx</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> right</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> len</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> idx</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> $1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">right</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">left</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">				pos</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> left</span><span style="color:#56B6C2;"> -</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">left</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> idxs</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]];</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">idx</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> $1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#E06C75;"> len</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">$1</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]];</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h3 id="_5-操作存储" tabindex="-1">5. 操作存储 <a class="header-anchor" href="#_5-操作存储" aria-label="Permalink to &quot;5. 操作存储&quot;">​</a></h3><h4 id="_1-存储-loalstorage" tabindex="-1">（1）存储 loalStorage <a class="header-anchor" href="#_1-存储-loalstorage" aria-label="Permalink to &quot;（1）存储 loalStorage&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> loalStorageSet</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-获取-localstorage" tabindex="-1">（2）获取 localStorage <a class="header-anchor" href="#_2-获取-localstorage" aria-label="Permalink to &quot;（2）获取 localStorage&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> loalStorageGet</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3-删除-localstorage" tabindex="-1">（3）删除 localStorage <a class="header-anchor" href="#_3-删除-localstorage" aria-label="Permalink to &quot;（3）删除 localStorage&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> loalStorageRemove</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">localStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_4-存储-sessionstorage" tabindex="-1">（4）存储 sessionStorage <a class="header-anchor" href="#_4-存储-sessionstorage" aria-label="Permalink to &quot;（4）存储 sessionStorage&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> sessionStorageSet</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> !==</span><span style="color:#98C379;"> &quot;string&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		value</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E5C07B;">	window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_5-获取-sessionstorage" tabindex="-1">（5）获取 sessionStorage <a class="header-anchor" href="#_5-获取-sessionstorage" aria-label="Permalink to &quot;（5）获取 sessionStorage&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> sessionStorageGet</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_6-删除-sessionstorage" tabindex="-1">（6）删除 sessionStorage <a class="header-anchor" href="#_6-删除-sessionstorage" aria-label="Permalink to &quot;（6）删除 sessionStorage&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> sessionStorageRemove</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">sessionStorage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_6-操作-cookie" tabindex="-1">6. 操作 cookie <a class="header-anchor" href="#_6-操作-cookie" aria-label="Permalink to &quot;6. 操作 cookie&quot;">​</a></h3><h4 id="_1-设置-cookie" tabindex="-1">（1）设置 cookie <a class="header-anchor" href="#_1-设置-cookie" aria-label="Permalink to &quot;（1）设置 cookie&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> setCookie</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">expire</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setDate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDate</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> expire</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cookie</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">=</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">value</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">;expires=</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">d</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toUTCString</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-读取-cookie" tabindex="-1">（2）读取 cookie <a class="header-anchor" href="#_2-读取-cookie" aria-label="Permalink to &quot;（2）读取 cookie&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getCookie</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> cookieStr</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> unescape</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cookie</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cookieStr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;; &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> cookieValue</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> temp</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;=&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">temp</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#E06C75;"> key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			cookieValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> temp</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">			break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> cookieValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="_3-删除-cookie" tabindex="-1">（3）删除 cookie <a class="header-anchor" href="#_3-删除-cookie" aria-label="Permalink to &quot;（3）删除 cookie&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> delCookie</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cookie</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`</span><span style="color:#C678DD;">\${</span><span style="color:#61AFEF;">encodeURIComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">=;expires=</span><span style="color:#C678DD;">\${</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_7-格式校验" tabindex="-1">7. 格式校验 <a class="header-anchor" href="#_7-格式校验" aria-label="Permalink to &quot;7. 格式校验&quot;">​</a></h3><h4 id="_1-校验身份证号码" tabindex="-1">（1）校验身份证号码 <a class="header-anchor" href="#_1-校验身份证号码" aria-label="Permalink to &quot;（1）校验身份证号码&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> checkCardNo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> reg</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /(</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">{15}</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">{18}</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">{17}</span><span style="color:#E06C75;">(\\d</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">X</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">x)</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_2-校验是否包含中文" tabindex="-1">（2）校验是否包含中文 <a class="header-anchor" href="#_2-校验是否包含中文" aria-label="Permalink to &quot;（2）校验是否包含中文&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> haveCNChars</span><span style="color:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> /</span><span style="color:#D19A66;">[\\u4e00-\\u9fa5]</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-校验是否为中国大陆的邮政编码" tabindex="-1">（3）校验是否为中国大陆的邮政编码 <a class="header-anchor" href="#_3-校验是否为中国大陆的邮政编码" aria-label="Permalink to &quot;（3）校验是否为中国大陆的邮政编码&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> isPostCode</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#D19A66;">[1-9][0-9]{5}</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_4-校验是否为-ipv6-地址" tabindex="-1">（4）校验是否为 IPv6 地址 <a class="header-anchor" href="#_4-校验是否为-ipv6-地址" aria-label="Permalink to &quot;（4）校验是否为 IPv6 地址&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> isIPv6</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> Boolean</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">		str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/:/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			?</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/:/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 7</span></span>
<span class="line"><span style="color:#C678DD;">			:</span><span style="color:#D19A66;"> false</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> /::/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			?</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">a-f]{1,4}</span><span style="color:#E06C75;">(:</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">::))</span><span style="color:#D19A66;">{1,6}[</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">a-f]{1,4}</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			:</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">a-f]{1,4}</span><span style="color:#E06C75;">:)</span><span style="color:#D19A66;">{7}[</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">a-f]{1,4}</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_5-校验是否为邮箱地址" tabindex="-1">（5）校验是否为邮箱地址 <a class="header-anchor" href="#_5-校验是否为邮箱地址" aria-label="Permalink to &quot;（5）校验是否为邮箱地址&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> isEmail</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    return /^[</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">zA</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">Z0</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">9_</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">]</span><span style="color:#E06C75;">+@</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">zA</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">Z0</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">9_</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">]</span><span style="color:#E06C75;">+(\\.</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">zA</span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;">Z0</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">9_</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">]</span><span style="color:#E06C75;">+)+$/.test(value);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_6-校验是否为中国大陆手机号" tabindex="-1">（6）校验是否为中国大陆手机号 <a class="header-anchor" href="#_6-校验是否为中国大陆手机号" aria-label="Permalink to &quot;（6）校验是否为中国大陆手机号&quot;">​</a></h4><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>export const isTel = (value) =&gt; {</span></span>
<span class="line"><span>    return /^1[3,4,5,6,7,8,9][0-9]{9}$/.test(value.toString());</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_7-校验是否包含-emoji-表情" tabindex="-1">（7）校验是否包含 emoji 表情 <a class="header-anchor" href="#_7-校验是否包含-emoji-表情" aria-label="Permalink to &quot;（7）校验是否包含 emoji 表情&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> isEmojiCharacter</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	value</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> hs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0xd800</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> hs</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> hs</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0xdbff</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> ls</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> uc</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">hs</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 0xd800</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 0x400</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">ls</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 0xdc00</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 0x10000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0x1d000</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> uc</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> uc</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0x1f77f</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> ls</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> value</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charCodeAt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">ls</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0x20e3</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0x2100</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> hs</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> hs</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0x27ff</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0x2b05</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> hs</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> hs</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0x2b07</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0x2934</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> hs</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> hs</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0x2935</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">0x3297</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E06C75;"> hs</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> hs</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#D19A66;"> 0x3299</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;">				hs</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0xa9</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E06C75;">				hs</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0xae</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E06C75;">				hs</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0x303d</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E06C75;">				hs</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0x3030</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E06C75;">				hs</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0x2b55</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E06C75;">				hs</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0x2b1c</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E06C75;">				hs</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0x2b1b</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E06C75;">				hs</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 0x2b50</span></span>
<span class="line"><span style="color:#ABB2BF;">			) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h3 id="_8-操作-url" tabindex="-1">8. 操作 URL <a class="header-anchor" href="#_8-操作-url" aria-label="Permalink to &quot;8. 操作 URL&quot;">​</a></h3><h4 id="_1-获取-url-参数列表" tabindex="-1">（1）获取 URL 参数列表 <a class="header-anchor" href="#_1-获取-url-参数列表" aria-label="Permalink to &quot;（1）获取 URL 参数列表&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> GetRequest</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">search</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> paramsStr</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /.</span><span style="color:#D19A66;">+</span><span style="color:#56B6C2;">\\?</span><span style="color:#E06C75;">(.</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">)</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// 将 ? 后面的字符串取出来</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> paramsArr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> paramsStr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&amp;&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 将字符串以 &amp; 分割后存到数组中</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> paramsObj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 将 params 存到对象中</span></span>
<span class="line"><span style="color:#E5C07B;">	paramsArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">/=/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 处理有 value 的参数</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> param</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;=&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 分割 key 和 value</span></span>
<span class="line"><span style="color:#E06C75;">			val</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> decodeURIComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 解码</span></span>
<span class="line"><span style="color:#E06C75;">			val</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">+</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#61AFEF;"> parseFloat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 判断是否转为数字</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">paramsObj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果对象有 key，则添加一个值</span></span>
<span class="line"><span style="color:#E06C75;">				paramsObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [].</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">paramsObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 如果对象没有这个 key，创建 key 并设置值</span></span>
<span class="line"><span style="color:#E06C75;">				paramsObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 处理没有 value 的参数</span></span>
<span class="line"><span style="color:#E06C75;">			paramsObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> paramsObj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="_2-检测-url-是否有效" tabindex="-1">（2）检测 URL 是否有效 <a class="header-anchor" href="#_2-检测-url-是否有效" aria-label="Permalink to &quot;（2）检测 URL 是否有效&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getUrlState</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">URL</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> xmlhttp</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ActiveXObject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;microsoft.xmlhttp&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	xmlhttp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;GET&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		xmlhttp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Send</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> xmlhttp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">xmlhttp</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Status</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_3-键值对拼接成-url-参数" tabindex="-1">（3）键值对拼接成 URL 参数 <a class="header-anchor" href="#_3-键值对拼接成-url-参数" aria-label="Permalink to &quot;（3）键值对拼接成 URL 参数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> params2Url</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> params</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		params</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">=</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> encodeURIComponent</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&amp;&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_4-修改-url-中的参数" tabindex="-1">（4）修改 URL 中的参数 <a class="header-anchor" href="#_4-修改-url-中的参数" aria-label="Permalink to &quot;（4）修改 URL 中的参数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> replaceParamVal</span><span style="color:#56B6C2;"> =&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">paramName</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">replaceWith</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">   const </span><span style="color:#E06C75;">oUrl</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> location</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">href</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">   const </span><span style="color:#E06C75;">re</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> eval</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/(&#39;</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> paramName</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&#39;=)([^&amp;]*)/gi&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">   location.</span><span style="color:#E06C75;">href</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> oUrl</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">re</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">paramName</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&#39;=&#39;</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">replaceWith</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">   return location.href;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_5-删除-url-中指定参数" tabindex="-1">（5）删除 URL 中指定参数 <a class="header-anchor" href="#_5-删除-url-中指定参数" aria-label="Permalink to &quot;（5）删除 URL 中指定参数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> funcUrlDel</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> baseUrl</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">origin</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pathname</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;?&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> query</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> location</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">search</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substr</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">query</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> query</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&amp;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;=&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">][</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">][</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		delete</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;">			baseUrl</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E5C07B;">			JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#D19A66;">[</span><span style="color:#56B6C2;">\\&quot;\\{\\}</span><span style="color:#D19A66;">]</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#56B6C2;">\\:</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;=&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#56B6C2;">\\,</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&amp;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_9-设备判断" tabindex="-1">9. 设备判断 <a class="header-anchor" href="#_9-设备判断" aria-label="Permalink to &quot;9. 设备判断&quot;">​</a></h3><h4 id="_1-判断是移动还是-pc-设备" tabindex="-1">（1）判断是移动还是 PC 设备 <a class="header-anchor" href="#_1-判断是移动还是-pc-设备" aria-label="Permalink to &quot;（1）判断是移动还是 PC 设备&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> isMobile</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E5C07B;">		navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userAgent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">			/(iPhone</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">iPod</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">Android</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">ios</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">iOS</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">iPad</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">Backerry</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">WebOS</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">Symbian</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">Windows Phone</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">Phone)/</span><span style="color:#C678DD;">i</span></span>
<span class="line"><span style="color:#ABB2BF;">		)</span></span>
<span class="line"><span style="color:#ABB2BF;">	) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;mobile&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &quot;desktop&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_2-判断是否是苹果还是安卓移动设备" tabindex="-1">（2）判断是否是苹果还是安卓移动设备 <a class="header-anchor" href="#_2-判断是否是苹果还是安卓移动设备" aria-label="Permalink to &quot;（2）判断是否是苹果还是安卓移动设备&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> isAppleMobileDevice</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> reg</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /iphone</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">ipod</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">ipad</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">Macintosh/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> reg</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userAgent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3-判断是否是安卓移动设备" tabindex="-1">（3）判断是否是安卓移动设备 <a class="header-anchor" href="#_3-判断是否是安卓移动设备" aria-label="Permalink to &quot;（3）判断是否是安卓移动设备&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> isAndroidMobileDevice</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> /android/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userAgent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_4-判断是-windows-还是-mac-系统" tabindex="-1">（4）判断是 Windows 还是 Mac 系统 <a class="header-anchor" href="#_4-判断是-windows-还是-mac-系统" aria-label="Permalink to &quot;（4）判断是 Windows 还是 Mac 系统&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> osType</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> agent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userAgent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> isMac</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> /macintosh</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">mac os x/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">userAgent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> isWindows</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">		agent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;win64&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E5C07B;">		agent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;wow64&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E5C07B;">		agent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;win32&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> ||</span></span>
<span class="line"><span style="color:#E5C07B;">		agent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;wow32&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isWindows</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;windows&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isMac</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;mac&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_5-判断是否是微信-qq-内置浏览器" tabindex="-1">（5）判断是否是微信/QQ 内置浏览器 <a class="header-anchor" href="#_5-判断是否是微信-qq-内置浏览器" aria-label="Permalink to &quot;（5）判断是否是微信/QQ 内置浏览器&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> broswer</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> ua</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userAgent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/MicroMessenger/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;micromessenger&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;weixin&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">ua</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/QQ/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;qq&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;QQ&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_6-浏览器型号和版本" tabindex="-1">（6）浏览器型号和版本 <a class="header-anchor" href="#_6-浏览器型号和版本" aria-label="Permalink to &quot;（6）浏览器型号和版本&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getExplorerInfo</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userAgent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E5C07B;"> t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;msie&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		?</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//ie &lt; 11</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;IE&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				version</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/msie (</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">		  }</span></span>
<span class="line"><span style="color:#C678DD;">		:</span><span style="color:#56B6C2;"> !!</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/trident</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">.</span><span style="color:#D19A66;">+?</span><span style="color:#E06C75;">rv:((</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\d.</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">))/</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		?</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// ie 11</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;IE&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				version</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		  }</span></span>
<span class="line"><span style="color:#C678DD;">		:</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E5C07B;"> t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;edge&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		?</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Edge&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				version</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/edge</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">		  }</span></span>
<span class="line"><span style="color:#C678DD;">		:</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E5C07B;"> t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;firefox&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		?</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Firefox&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				version</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/firefox</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">		  }</span></span>
<span class="line"><span style="color:#C678DD;">		:</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E5C07B;"> t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;chrome&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		?</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Chrome&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				version</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/chrome</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">		  }</span></span>
<span class="line"><span style="color:#C678DD;">		:</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E5C07B;"> t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;opera&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		?</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Opera&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				version</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/opera.(</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">		  }</span></span>
<span class="line"><span style="color:#C678DD;">		:</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &lt;=</span><span style="color:#E5C07B;"> t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Safari&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">		?</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Safari&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				version</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">t</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/version</span><span style="color:#56B6C2;">\\/</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">[</span><span style="color:#E06C75;">\\d</span><span style="color:#D19A66;">]+</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">		  }</span></span>
<span class="line"><span style="color:#C678DD;">		:</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">				type</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				version</span><span style="color:#ABB2BF;">: </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h3 id="_10-浏览器操作" tabindex="-1">10. 浏览器操作 <a class="header-anchor" href="#_10-浏览器操作" aria-label="Permalink to &quot;10. 浏览器操作&quot;">​</a></h3><h4 id="_1-滚动到页面顶部" tabindex="-1">（1）滚动到页面顶部 <a class="header-anchor" href="#_1-滚动到页面顶部" aria-label="Permalink to &quot;（1）滚动到页面顶部&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> scrollToTop</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> height</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">scrollTop</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">height</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">requestAnimationFrame</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scrollToTop</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scrollTo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">height</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> height</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_2-滚动到页面底部" tabindex="-1">（2）滚动到页面底部 <a class="header-anchor" href="#_2-滚动到页面底部" aria-label="Permalink to &quot;（2）滚动到页面底部&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> scrollToBottom</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">scrollTo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-滚动到指定元素区域" tabindex="-1">（3）滚动到指定元素区域 <a class="header-anchor" href="#_3-滚动到指定元素区域" aria-label="Permalink to &quot;（3）滚动到指定元素区域&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> smoothScroll</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">element</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">element</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">scrollIntoView</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">		behavior</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;smooth&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_4-获取可视窗口高度" tabindex="-1">（4）获取可视窗口高度 <a class="header-anchor" href="#_4-获取可视窗口高度" aria-label="Permalink to &quot;（4）获取可视窗口高度&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getClientHeight</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> clientHeight</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		clientHeight</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span></span>
<span class="line"><span style="color:#C678DD;">				?</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span></span>
<span class="line"><span style="color:#C678DD;">				:</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		clientHeight</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">			document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span></span>
<span class="line"><span style="color:#C678DD;">				?</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span></span>
<span class="line"><span style="color:#C678DD;">				:</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">clientHeight</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> clientHeight</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_5-获取可视窗口宽度" tabindex="-1">（5）获取可视窗口宽度 <a class="header-anchor" href="#_5-获取可视窗口宽度" aria-label="Permalink to &quot;（5）获取可视窗口宽度&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getPageViewWidth</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">compatMode</span><span style="color:#56B6C2;"> ==</span><span style="color:#98C379;"> &quot;BackCompat&quot;</span></span>
<span class="line"><span style="color:#C678DD;">			?</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span></span>
<span class="line"><span style="color:#C678DD;">			:</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">documentElement</span></span>
<span class="line"><span style="color:#ABB2BF;">	).</span><span style="color:#E06C75;">clientWidth</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_6-打开浏览器全屏" tabindex="-1">（6）打开浏览器全屏 <a class="header-anchor" href="#_6-打开浏览器全屏" aria-label="Permalink to &quot;（6）打开浏览器全屏&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> toFullScreen</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> element</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">element</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">requestFullscreen</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		element</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">requestFullscreen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">element</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mozRequestFullScreen</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		element</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mozRequestFullScreen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">element</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msRequestFullscreen</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		element</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">msRequestFullscreen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">element</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">webkitRequestFullscreen</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		element</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">webkitRequestFullScreen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_7-退出浏览器全屏" tabindex="-1">（7）退出浏览器全屏 <a class="header-anchor" href="#_7-退出浏览器全屏" aria-label="Permalink to &quot;（7）退出浏览器全屏&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> exitFullscreen</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">exitFullscreen</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exitFullscreen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msExitFullscreen</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">msExitFullscreen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mozCancelFullScreen</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mozCancelFullScreen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">webkitExitFullscreen</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">webkitExitFullscreen</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_11-时间操作" tabindex="-1">11. 时间操作 <a class="header-anchor" href="#_11-时间操作" aria-label="Permalink to &quot;11. 时间操作&quot;">​</a></h3><h4 id="_1-当前时间" tabindex="-1">（1）当前时间 <a class="header-anchor" href="#_1-当前时间" aria-label="Permalink to &quot;（1）当前时间&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> nowTime</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> now</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> year</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFullYear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> month</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMonth</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> date</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDate</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 10</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDate</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDate</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> hour</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHours</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 10</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHours</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHours</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> miu</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">		now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMinutes</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 10</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMinutes</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMinutes</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> sec</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">		now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSeconds</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#D19A66;"> 10</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSeconds</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSeconds</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#56B6C2;">		+</span><span style="color:#E06C75;">year</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">		&quot;年&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E06C75;">month</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">		&quot;月&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E06C75;">		date</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">		&quot;日 &quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E06C75;">		hour</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">		&quot;:&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E06C75;">		miu</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#98C379;">		&quot;:&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">		sec</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="_2-格式化时间" tabindex="-1">（2）格式化时间 <a class="header-anchor" href="#_2-格式化时间" aria-label="Permalink to &quot;（2）格式化时间&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> dateFormater</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">formater</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> date</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> time</span><span style="color:#C678DD;"> ?</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">		Y</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFullYear</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		M</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMonth</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		D</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDate</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">		H</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHours</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">		m</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMinutes</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">		s</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSeconds</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> formater</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/YYYY</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">yyyy/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/YY</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">yy/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Y</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substr</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/MM/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, (</span><span style="color:#E5C07B;">M</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> M</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/DD/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, (</span><span style="color:#E5C07B;">D</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> D</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/HH</span><span style="color:#ABB2BF;">|</span><span style="color:#E06C75;">hh/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, (</span><span style="color:#E5C07B;">H</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> H</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/mm/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">m</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> m</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/ss/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">s</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// dateFormater(&#39;YYYY-MM-DD HH:mm:ss&#39;)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// dateFormater(&#39;YYYYMMDDHHmmss&#39;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_12-javascript-操作" tabindex="-1">12. JavaScript 操作 <a class="header-anchor" href="#_12-javascript-操作" aria-label="Permalink to &quot;12. JavaScript 操作&quot;">​</a></h3><h4 id="_1-阻止冒泡事件" tabindex="-1">（1）阻止冒泡事件 <a class="header-anchor" href="#_1-阻止冒泡事件" aria-label="Permalink to &quot;（1）阻止冒泡事件&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> stopPropagation</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	e</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">event</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">stopPropagation</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// W3C阻止冒泡方法</span></span>
<span class="line"><span style="color:#E5C07B;">		e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stopPropagation</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cancelBubble</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// IE阻止冒泡方法</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_2-防抖函数" tabindex="-1">（2）防抖函数 <a class="header-anchor" href="#_2-防抖函数" aria-label="Permalink to &quot;（2）防抖函数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> debounce</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">wait</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> timer</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			args</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			clearTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">			timer</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">		timer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">			fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#E06C75;">wait</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="_3-节流函数" tabindex="-1">（3）节流函数 <a class="header-anchor" href="#_3-节流函数" aria-label="Permalink to &quot;（3）节流函数&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> throttle</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">delay</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> curTime</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			args</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arguments</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			nowTime</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">nowTime</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> curTime</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#E06C75;"> delay</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			curTime</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">context</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_4-数据类型判断" tabindex="-1">（4）数据类型判断 <a class="header-anchor" href="#_4-数据类型判断" aria-label="Permalink to &quot;（4）数据类型判断&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> getType</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 判断数据是引用类型的情况</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> valueClass</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">toString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> valueClass</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		type</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> type</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 判断数据是基本数据类型的情况和函数的情况</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> typeof</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="_5-对象深拷贝" tabindex="-1">（5）对象深拷贝 <a class="header-anchor" href="#_5-对象深拷贝" aria-label="Permalink to &quot;（5）对象深拷贝&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#61AFEF;"> deepClone</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">hash</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> WeakMap</span><span style="color:#ABB2BF;">()) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 日期对象直接返回一个新的日期对象</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">obj</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Date</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//正则对象直接返回一个新的正则对象</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">obj</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> RegExp</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> RegExp</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//如果循环引用,就用 weakMap 来解决</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">hash</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> hash</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 获取对象所有自身属性的描述</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> allDesc</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyDescriptors</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 遍历传入参数所有键的特性</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> cloneObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPrototypeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">allDesc</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	hash</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">cloneObj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> of</span><span style="color:#E5C07B;"> Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ownKeys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			cloneObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> deepClone</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">hash</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			cloneObj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> cloneObj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h1 id="你不知道的-javascript-细节" tabindex="-1">你不知道的 JavaScript 细节 <a class="header-anchor" href="#你不知道的-javascript-细节" aria-label="Permalink to &quot;你不知道的 JavaScript 细节&quot;">​</a></h1><p>本文主要给大家带来一些我读《你不知道的 JavaScript（中卷）》中遇到的一些<strong>有意思</strong>的内容，可以说是<strong>打开新世界的大门</strong>的感觉。希望能在工作之余，给大家带来一点乐趣。</p><blockquote><p>JavaScript 是一门优秀的语言。只学其中一部分内容很容易，但是要全面掌握则很难。开发人员遇到困难时往往将其归咎于语言本身，而不反省他们自己对语言的理解有多匮乏。《你不知道的 JavaScript》旨在解决这个问题，使读者能够发自内心地喜欢上这门语言。</p></blockquote><h2 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-label="Permalink to &quot;强制类型转换&quot;">​</a></h2><h3 id="值类型转换" tabindex="-1">值类型转换 <a class="header-anchor" href="#值类型转换" aria-label="Permalink to &quot;值类型转换&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 42</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 隐式强制类型转换</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 显式强制类型转换</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="抽象值操作" tabindex="-1">抽象值操作 <a class="header-anchor" href="#抽象值操作" aria-label="Permalink to &quot;抽象值操作&quot;">​</a></h3><blockquote><p><code>document.all</code> 是假值对象。也就是 <code>!!document.all</code> 值为 <code>false</code>。</p></blockquote><h3 id="显示强制类型转换" tabindex="-1">显示强制类型转换 <a class="header-anchor" href="#显示强制类型转换" aria-label="Permalink to &quot;显示强制类型转换&quot;">​</a></h3><h4 id="日期显示转换为数字" tabindex="-1">日期显示转换为数字： <a class="header-anchor" href="#日期显示转换为数字" aria-label="Permalink to &quot;日期显示转换为数字：&quot;">​</a></h4><p>使用 <code>Date.now()</code> 来获得当前的时间戳，使用 <code>new Date(..).getTime()</code> 来获得指定时间的时间戳。</p><h4 id="奇特的-运算符" tabindex="-1">奇特的 ~ 运算符： <a class="header-anchor" href="#奇特的-运算符" aria-label="Permalink to &quot;奇特的 ~ 运算符：&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">~</span><span style="color:#61AFEF;">x</span><span style="color:#98C379;">\` 大致等同于 \`</span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">\`。很奇怪，但相对更容易说明问题：\`</span><span style="color:#56B6C2;">~</span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// -(42+1) ==&gt; -43</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>JavaScript 中字符串的 <code>indexOf(..)</code> 方法也遵循这一惯例，该方法在字符串中搜索指定的子 字符串，如果找到就返回子字符串所在的位置（从 0 开始），否则返回 -1。</p><p><code>~</code> 和 <code>indexOf()</code> 一起可以将结果强制类型转换（实际上仅仅是转换）为真 / 假值：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Hello World&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">~</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lo&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// -4 &lt;-- 真值!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">~</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lo&quot;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// true</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 找到匹配！</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="解析非字符串" tabindex="-1">解析非字符串： <a class="header-anchor" href="#解析非字符串" aria-label="Permalink to &quot;解析非字符串：&quot;">​</a></h4><p>曾经有人发帖吐槽过 <code>parseInt(..)</code> 的一个坑：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">19</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 18</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>parseInt(1/0, 19)</code> 实际上是 <code>parseInt(&quot;Infinity&quot;, 19)</code>。第一个字符是 &quot;I&quot;，以 19 为基数 时值为 18。</p><p>此外还有一些看起来奇怪但实际上解释得通的例子：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.000008</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 0 (&quot;0&quot; 来自于 &quot;0.000008&quot;)</span></span>
<span class="line"><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.0000008</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 8 (&quot;8&quot; 来自于 &quot;8e-7&quot;)</span></span>
<span class="line"><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 250 (&quot;fa&quot; 来自于 &quot;false&quot;)</span></span>
<span class="line"><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parseInt</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 15 (&quot;f&quot; 来自于 &quot;function..&quot;)</span></span>
<span class="line"><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;0x10&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 16</span></span>
<span class="line"><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;103&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="隐式强制类型转换" tabindex="-1">隐式强制类型转换 <a class="header-anchor" href="#隐式强制类型转换" aria-label="Permalink to &quot;隐式强制类型转换&quot;">​</a></h3><h4 id="字符串和数字之间的隐式强制类型转换" tabindex="-1">字符串和数字之间的隐式强制类型转换 <a class="header-anchor" href="#字符串和数字之间的隐式强制类型转换" aria-label="Permalink to &quot;字符串和数字之间的隐式强制类型转换&quot;">​</a></h4><p>例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;42&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;0&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 42</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;420&quot;</span></span>
<span class="line"><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> d</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 42</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>再例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &quot;1,23,4&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>根据 ES5 规范 11.6.1 节，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作（规范 9.1 节），该抽象操作再调用 <code>[[DefaultValue]]</code>（规范 8.12.8 节），以数字作为上下文。</p><p>你或许注意到这与 <code>ToNumber</code> 抽象操作处理对象的方式一样（参见 4.2.2 节）。因为数组的 <code>valueOf()</code> 操作无法得到简单基本类型值，于是它转而调用 <code>toString()</code>。因此上例中的两个数组变成了 &quot;<code>1,2</code>&quot; 和 &quot;<code>3,4</code>&quot; 。+ 将它们拼接后返回 &quot;<code>1,23,4</code>&quot; 。</p><p><strong>简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤可以得到字符串），则执行字符串拼接；否则执行数字加法。</strong></p><h4 id="符号的强制类型转换" tabindex="-1">符号的强制类型转换 <a class="header-anchor" href="#符号的强制类型转换" aria-label="Permalink to &quot;符号的强制类型转换&quot;">​</a></h4><p>ES6 允许从符号到字符串的显式强制类型转换，然而隐式强制类型转换会产生错误，具体的原因不在本书讨论范围之内。</p><p>例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> s1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cool&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &quot;Symbol(cool)&quot;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> s2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;not cool&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">s2</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// TypeError</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>符号不能够被强制类型转换为数字（显式和隐式都会产生错误），但可以被强制类型转换为布尔值（显式和隐式结果都是 <code>true</code>）。</p><p>由于规则缺乏一致性，我们要对 ES6 中符号的强制类型转换多加小心。</p><p>好在鉴于符号的特殊用途，我们不会经常用到它的强制类型转换。</p><h3 id="宽松相等和严格相等" tabindex="-1">宽松相等和严格相等 <a class="header-anchor" href="#宽松相等和严格相等" aria-label="Permalink to &quot;宽松相等和严格相等&quot;">​</a></h3><p>常见的误区是“<code>==</code> 检查值是否相等，<code>===</code> 检查值和类型是否相等”。听起来蛮有道理，然而还不够准确。很多 JavaScript 的书籍和博客也是这样来解释的，但是很遗憾他们都错了。</p><p>正确的解释是：“<code>==</code> 允许在相等比较中进行强制类型转换，而 <code>===</code> 不允许。”</p><p>字符串和数字之间的相等比较：</p><ul><li>如果 Type(x) 是数字，Type(y) 是字符串，则返回 x == ToNumber(y) 的结果。</li><li>如果 Type(x) 是字符串，Type(y) 是数字，则返回 ToNumber(x) == y 的结果。</li></ul><p>其他类型和布尔类型之间的相等比较：</p><ul><li>如果 Type(x) 是布尔类型，则返回 ToNumber(x) == y 的结果；</li><li>如果 Type(y) 是布尔类型，则返回 x == ToNumber(y) 的结果。</li></ul><p><code>null</code> 和 <code>undefined</code> 之间的相等比较：</p><ul><li>如果 x 为 null，y 为 undefined，则结果为 true。</li><li>如果 x 为 undefined，y 为 null，则结果为 true。</li></ul><p>对象和非对象之间的相等比较：</p><ul><li>如果 Type(x) 是字符串或数字，Type(y) 是对象，则返回 x == ToPrimitive(y) 的结果；</li><li>如果 Type(x) 是对象，Type(y) 是字符串或数字，则返回 ToPromitive(x) == y 的结果。</li></ul><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><h3 id="错误" tabindex="-1">错误 <a class="header-anchor" href="#错误" aria-label="Permalink to &quot;错误&quot;">​</a></h3><p>提前使用变量</p><p>ES6 规范定义了一个新概念，叫作 TDZ（Temporal Dead Zone，暂时性死区）。</p><p>TDZ 指的是由于代码中的变量还没有初始化而不能被引用的情况。</p><p>对此，最直观的例子是 ES6 规范中的 <code>let</code> 块作用域：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// ReferenceError!</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>a = 2</code> 试图在 <code>let a</code> 初始化 <code>a</code> 之前使用该变量（其作用域在 <code>{ .. }</code> 内），这里就是 <code>a</code> 的 TDZ，会产生错误。</p><p>有意思的是，对未声明变量使用 typeof 不会产生错误（参见第 1 章），但在 TDZ 中却会报错：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">	typeof</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C678DD;">	typeof</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// ReferenceError! (TDZ)</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="回调" tabindex="-1">回调 <a class="header-anchor" href="#回调" aria-label="Permalink to &quot;回调&quot;">​</a></h2><h3 id="省点回调" tabindex="-1">省点回调 <a class="header-anchor" href="#省点回调" aria-label="Permalink to &quot;省点回调&quot;">​</a></h3><p>构造一个超时验证工具：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> timeoutify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">delay</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> intv</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E06C75;">		intv</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">		fn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Timeout!&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#E06C75;">delay</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 还没有超时？</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">intv</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			clearTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">intv</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>以下是使用方式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用 ‘error-first 风格’ 回调设计</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://some.url.1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">timeoutify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果你不确定关注的 API 会不会永远异步执行怎么办呢？可以创建一个类似于这个“验证概念”版本的 <code>asyncify(..)</code> 工具：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> asyncify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> orig_fn</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> fn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		intv</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E06C75;">			intv</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">	fn</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 触发太快，在定时器intv触发指示异步转换发生之前？</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">intv</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			fn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> orig_fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">bind</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">				orig_fn</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 把封装器的this添加到bind(..)调用的参数中，</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 以及克里化（currying）所有传入参数</span></span>
<span class="line"><span style="color:#ABB2BF;">				[</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">([].</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 已经是异步</span></span>
<span class="line"><span style="color:#C678DD;">		else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 调用原来的函数</span></span>
<span class="line"><span style="color:#E5C07B;">			orig_fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>可以像这样使用 <code>asyncify(..)</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> result</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">ajax</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;..pre-cached-url..&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">asyncify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>不管这个 Ajax 请求已经在缓存中并试图对回调立即调用，还是要从网络上取得，进而在将来异步完成，这段代码总是会输出 1，而不是 0——result(..) 只能异步调用，这意味着 a++ 有机会在 result(..) 之前运行。</p><p>关于回调地狱的可以看：<a href="http://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&amp;mid=2650095306&amp;idx=2&amp;sn=b145772a5d4ea2f2cc0895e7fe3f61b5&amp;chksm=83dba3afb4ac2ab97921cd77f898fe93f874849a8d87ddb637f1963a4290cbf677642ffb532f&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">JS 中优雅的使用 async await</a></p><h2 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h2><h3 id="promise-信任问题" tabindex="-1">Promise 信任问题 <a class="header-anchor" href="#promise-信任问题" aria-label="Permalink to &quot;Promise 信任问题&quot;">​</a></h3><h4 id="回调未调用" tabindex="-1">回调未调用 <a class="header-anchor" href="#回调未调用" aria-label="Permalink to &quot;回调未调用&quot;">​</a></h4><p>提供一个超时处理的解决方案：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 用于超时一个Promise的工具</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> timeoutPromise</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">delay</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">			reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Timeout!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#E06C75;">delay</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 设置foo()超时</span></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">race</span><span style="color:#ABB2BF;">([</span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(), </span><span style="color:#61AFEF;">timeoutPromise</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">)]).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// foo(..)及时完成！</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 或者foo()被拒绝，或者只是没能按时完成</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 查看err来了解是哪种情况</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="链式流" tabindex="-1">链式流 <a class="header-anchor" href="#链式流" aria-label="Permalink to &quot;链式流&quot;">​</a></h3><p>为了进一步阐释链接，让我们把延迟 Promise 创建（没有决议消息）过程一般化到一个工具中，以便在多个步骤中复用：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> delay</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">time</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">delay</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 步骤1</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> STEP2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;step 2 (after 100ms)&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> delay</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> STEP3</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;step 3 (after another 200ms)&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> STEP4</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;step 4 (next Job)&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> delay</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> STEP5</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;step 5 (after another 50ms)&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>调用 <code>delay(200)</code> 创建了一个将在 200ms 后完成的 promise，然后我们从第一个 <code>then(..)</code> 完成回调中返回这个 promise，这会导致第二个 <code>then(..)</code> 的 promise 等待这个 200ms 的 promise。</p><h3 id="promise-局限性" tabindex="-1">Promise 局限性 <a class="header-anchor" href="#promise-局限性" aria-label="Permalink to &quot;Promise 局限性&quot;">​</a></h3><h4 id="顺序错误处理" tabindex="-1">顺序错误处理 <a class="header-anchor" href="#顺序错误处理" aria-label="Permalink to &quot;顺序错误处理&quot;">​</a></h4><p>Promise 的设计局限性（链式调用）造成了一个让人很容易中招的陷阱，即 Promise 链中的错误很容易被无意中默默忽略掉。</p><p>关于 Promise 错误，还有其他需要考虑的地方。由于一个 Promise 链仅仅是连接到一起的成员 Promise，没有把整个链标识为一个个体的实体，这意味着没有外部方法可以用于观察可能发生的错误。</p><p>如果构建了一个没有错误处理函数的 Promise 链，链中任何地方的任何错误都会在链中一直传播下去，直到在某个步骤注册拒绝处理函数。在这个特定的例子中，只要有一个指向链中最后一个 promise 的引用就足够了（下面代码中的 p），因为你可以在那里注册拒绝处理函数，而且这个处理函数能够得到所有传播过来的错误的通知：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// foo(..), STEP2(..)以及STEP3(..)都是支持promise的工具</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">STEP2</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">STEP3</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>虽然这里可能令人迷惑，但是这里的 <code>p</code> 并不指向链中的第一个 promise（调用 <code>foo(42)</code> 产生的那一个），而是指向最后一个 promise，即来自调用 <code>then(STEP3)</code> 的那一个。</p><p>还有，这个 Promise 链中的任何一个步骤都没有显式地处理自身错误。这意味着你可以在 <code>p</code> 上注册一个拒绝错误处理函数，对于链中任何位置出现的任何错误，这个处理函数都会得到通知：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">handleErrors</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但是，如果链中的任何一个步骤事实上进行了自身的错误处理（可能以隐藏或抽象的不可见的方式），那你的 <code>handleErrors(..)</code> 就不会得到通知。这可能是你想要的——毕竟这是一个“已处理的拒绝”——但也可能并不是。不能清晰得到（对具体某一个“已经处理”的拒绝的）错误通知也是一个缺陷，它限制了某些用例的功能。</p><p>基本上，这等同于 try..catch 存在的局限：try..catch 可能捕获一个异常并简单地吞掉它。所以这并不是 Promise 独有的局限性，但可能是我们希望绕过的陷阱。</p><p>遗憾的是，很多时候并没有为 Promise 链序列的中间步骤保留的引用。因此，没有这样的引用，你就无法关联错误处理函数来可靠地检查错误。</p><p>关于 Promise 你还可以看这个：<a href="http://mp.weixin.qq.com/s?__biz=MzAxODE4MTEzMA==&amp;mid=2650088417&amp;idx=2&amp;sn=6fbb9fc773214ff807b499f7c456a478&amp;chksm=83dbbe84b4ac379222cd94f84439299d21cae6285cde5bf73f8ad85a1eb88e1c8ad6f4594c43&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">一道让人失眠的 Promise 试题深入分析</a></p><h4 id="单一值" tabindex="-1">单一值 <a class="header-anchor" href="#单一值" aria-label="Permalink to &quot;单一值&quot;">​</a></h4><p>根据定义，Promise 只能有一个完成值或一个拒绝理由。在简单的例子中，这不是什么问题，但是在更复杂的场景中，你可能就会发现这是一种局限了。</p><p>一般的建议是构造一个值封装（比如一个对象或数组）来保持这样的多个信息。这个解决方案可以起作用，但要在 Promise 链中的每一步都进行封装和解封，就十分丑陋和笨重了。</p><ol><li>分裂值</li></ol><p>有时候，你可以把这一点，当作提示你应该把问题分解为两个或更多 Promise 的信号。</p><p>设想你有一个工具 <code>foo(..)</code>，它可以异步产生两个值（x 和 y）：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getY</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">			resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">bar</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">baz</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> bar</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> baz</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> getY</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 把两个值封装到容器中</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">msgs</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> msgs</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> msgs</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 200 599</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>首先，我们重新组织一下 <code>foo(..)</code> 返回的内容，这样就不再需要把 <code>x</code> 和 <code>y</code> 封装到一个数组值中以通过 promise 传输。取而代之的是，我们可以把每个值封装到它自己的 promise：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">bar</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">baz</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> bar</span><span style="color:#56B6C2;"> *</span><span style="color:#E06C75;"> baz</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 返回两个 promise</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">getY</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">)];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">msgs</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> msgs</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> msgs</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>一个 promise 数组真的要优于传递给单个 promise 的一个值数组吗？从语法的角度来说，这算不上是一个改进。</p><p>但是，这种方法更符合 Promise 的设计理念。如果以后需要重构代码把对 <code>x</code> 和 <code>y</code> 的计算分开，这种方法就简单得多。由调用代码来决定如何安排这两个 promise，而不是把这种细节放在 <code>foo(..)</code> 内部抽象，这样更整洁也更灵活。这里使用了 <code>Promise.all([ .. ])</code>，当然，这并不是唯一的选择。</p><ol><li>传递参数</li></ol><p><code>var x = ..</code> 和 <code>var y = ..</code> 赋值操作仍然是麻烦的开销。我们可以在辅助工具中采用某种函数技巧：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> spread</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">apply</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">	spread</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 200 599</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这样会好一点！当然，你可以把这个函数戏法在线化，以避免额外的辅助工具：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">	Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">apply</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 200 599</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这些技巧可能很灵巧，但 ES6 给出了一个更好的答案：解构。数组解构赋值形式看起来是这样的：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">msgs</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> msgs</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 200 599</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>不过最好的是，ES6 提供了数组参数解构形式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> ([</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 200 599</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>现在，我们符合了“每个 Promise 一个值”的理念，并且又将重复样板代码量保持在了最小！</p><h4 id="单决议" tabindex="-1">单决议 <a class="header-anchor" href="#单决议" aria-label="Permalink to &quot;单决议&quot;">​</a></h4><p>Promise 最本质的一个特征是：Promise 只能被决议一次（完成或拒绝）。在许多异步情况中，你只会获取一个值一次，所以这可以工作良好。</p><p>但是，还有很多异步的情况适合另一种模式——一种类似于事件或数据流的模式。在表面上，目前还不清楚 Promise 能不能很好用于这样的用例，如果不是完全不可用的话。如果不在 Promise 之上构建显著的抽象，Promise 肯定完全无法支持多值决议处理。</p><p>设想这样一个场景：你可能要启动一系列异步步骤以响应某种可能多次发生的激励（就像是事件），比如按钮点击。</p><p>这样可能不会按照你的期望工作：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// click(..) 把&quot;click&quot;事件绑定到一个 DOM 元素</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// request(..) 是前面定义的支持 Promise 的 Ajax</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	click</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#mybtn&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">evt</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> btnID</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> evt</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">currentTarget</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#61AFEF;"> request</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://some.url.1/?id=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> btnID</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">text</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>只有在你的应用只需要响应按钮点击一次的情况下，这种方式才能工作。如果这个按钮被点击了第二次的话，promise p 已经决议，因此第二个 <code>resolve(..)</code> 调用就会被忽略。</p><p>因此，你可能需要转化这个范例，为每个事件的发生创建一整个新的 Promise 链：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">click</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#mybtn&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">evt</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> btnID</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> evt</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">currentTarget</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">	request</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://some.url.1/?id=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> btnID</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">text</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这种方法可以工作，因为针对这个按钮上的每个 &quot;click&quot; 事件都会启动一整个新的 Promise 序列。</p><p>由于需要在事件处理函数中定义整个 Promise 链，这很丑陋。除此之外，这个设计在某种程度上破坏了关注点与功能分离（SoC）的思想。你很可能想要把事件处理函数的定义和对事件的响应（那个 Promise 链）的定义放在代码中的不同位置。如果没有辅助机制的话，在这种模式下很难这样实现。</p><h1 id="实用的-js-技巧" tabindex="-1">实用的 JS 技巧 <a class="header-anchor" href="#实用的-js-技巧" aria-label="Permalink to &quot;实用的 JS 技巧&quot;">​</a></h1><h3 id="_1-函数懒加载" tabindex="-1">1.函数懒加载 <a class="header-anchor" href="#_1-函数懒加载" aria-label="Permalink to &quot;1.函数懒加载&quot;">​</a></h3><p>如：判断当前环境是否微信</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isWechat</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#C678DD;">		typeof</span><span style="color:#E06C75;"> wx</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">		navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userAgent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/MicroMessenger/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;micromessenger&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 改写函数，直接返回结果，下次运行则无须经过重重判断了；</span></span>
<span class="line"><span style="color:#61AFEF;">	isWechat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>以上写法会产生闭包，result 变量不会被释放，以下针对此问题进行改造：</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> isWechat</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#C678DD;">		typeof</span><span style="color:#E06C75;"> wx</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;object&quot;</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E5C07B;">		navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">userAgent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/MicroMessenger/</span><span style="color:#C678DD;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;micromessenger&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">		isWechat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 返回的是字面量而不是变量</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		isWechat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="_2-赋值立即执行函数" tabindex="-1">2.赋值立即执行函数 <a class="header-anchor" href="#_2-赋值立即执行函数" aria-label="Permalink to &quot;2.赋值立即执行函数&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 赋值可以写成立即执行函数，这样不仅仅局限于三元运算符了</span></span>
<span class="line"><span style="color:#E06C75;">  prop</span><span style="color:#ABB2BF;">: (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ....</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_3-闭包的应用" tabindex="-1">3.闭包的应用 <a class="header-anchor" href="#_3-闭包的应用" aria-label="Permalink to &quot;3.闭包的应用&quot;">​</a></h3><p>如：单请求限制</p><blockquote><p>真实业务场景，如微信小程序的登录，当打开某个页面，用户 token 若过期，该页面所有接口都会 401，此时应发起登录，但需要避免多个接口的 401 触发多次登录请求，解决办法，可参考以下代码</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> handleLogin</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> promise</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回请求的promise</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">promise</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> promise</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    promise</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> loginApi</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">      ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }).</span><span style="color:#61AFEF;">finally</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 请求响应后，需要清空promise</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 避免下次再发起登录出问题，同时也释放了变量</span></span>
<span class="line"><span style="color:#E06C75;">      promise</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> promise</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>以上闭包的应用，单例模式的设计实现也类似</p></blockquote><h4 id="_3-1-闭包应用-请求结果缓存" tabindex="-1">3.1 闭包应用-请求结果缓存 <a class="header-anchor" href="#_3-1-闭包应用-请求结果缓存" aria-label="Permalink to &quot;3.1 闭包应用-请求结果缓存&quot;">​</a></h4><blockquote><p>以下请求缓存的封装可直接 copy 使用哦； 包含请求结果缓存、相同请求单一限制、最大缓存接口数控制。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 最多缓存接口数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> CACHE_MAX</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> cacheArr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">params</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> uniKey</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">				if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">uniKey</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// promise特性，如果resolve出去的是一个promise，则会替代外层promise</span></span>
<span class="line"><span style="color:#61AFEF;">					resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">uniKey</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">					const</span><span style="color:#E5C07B;"> promise</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getRequest</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">						.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">							if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">cacheArr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E5C07B;"> CACHE_MAX</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">								const</span><span style="color:#E5C07B;"> _api</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cacheArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">								this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_api</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">							}</span></span>
<span class="line"><span style="color:#E5C07B;">							this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">uniKey</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">							resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">							return</span><span style="color:#E06C75;"> res</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">						})</span></span>
<span class="line"><span style="color:#ABB2BF;">						.</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">							reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">						});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">					// 此处还做了单请求限制</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">uniKey</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> promise</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">uniKey</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">uniKey</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			cacheArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">uniKey</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#61AFEF;">		remove</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">uniKey</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 释放内存</span></span>
<span class="line"><span style="color:#E06C75;">			cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">uniKey</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			delete</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">uniKey</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h3 id="_4-函数结果缓存" tabindex="-1">4.函数结果缓存 <a class="header-anchor" href="#_4-函数结果缓存" aria-label="Permalink to &quot;4.函数结果缓存&quot;">​</a></h3><blockquote><p>对于一些计算需要耗费较大的性能的纯函数，我们可以针对参数进行结果缓存</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> _sin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> _sin</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 利用闭包创建缓存空间</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 缓存中有，则从缓存中拿</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 存入缓存并返回结果</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_4-1-函数结果缓存的简单封装" tabindex="-1">4.1 函数结果缓存的简单封装： <a class="header-anchor" href="#_4-1-函数结果缓存的简单封装" aria-label="Permalink to &quot;4.1 函数结果缓存的简单封装：&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fnCache</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 将参数变为字符串，作为缓存key</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> key</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 用法示例：</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sum</span><span style="color:#ABB2BF;">() { ...}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cacheSum</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> fnCache</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 我们还可以将key的生成方式暴露出去</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fnCache</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">keyCreator</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 优先自定义的key生成函数</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> key</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> keyCreator</span><span style="color:#C678DD;"> ?</span><span style="color:#61AFEF;"> keyCreator</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="_5-compose" tabindex="-1">5.compose <a class="header-anchor" href="#_5-compose" aria-label="Permalink to &quot;5.compose&quot;">​</a></h3><blockquote><p>compose 函数应用广泛，一般用于控制程序流程； 假如有这样一个场景，需要对传入的参数依次进行：取绝对值，取整，再平方；你可能会这么写：</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> square</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> **</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> square</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">abs</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">2.4</span><span style="color:#ABB2BF;">)));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>这么写存在一定的弊端，假如需要改变一下函数执行顺序或增加一个流程，都会很困难；</p></blockquote><p>compose 改写：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> compose</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">fns</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> fns</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">				a</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> square</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> **</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> compose</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">square</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">floor</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">abs</span><span style="color:#ABB2BF;">)(</span><span style="color:#D19A66;">2.4</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><blockquote><p>可以看到经过 compose 改造，现在可以很简单对流程进行修改或增加了；悄悄告诉你，其实这就是 redux 中间件的核销源码哦</p></blockquote><p>异步 compose</p><blockquote><p>讲完同步的，咱们再来讲异步的</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn3</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">	next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> compose</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">chain</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> exec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> chain</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> chain</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> current</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> exec</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">++</span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 初始从第1个函数开始执行</span></span>
<span class="line"><span style="color:#61AFEF;">	exec</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">compose</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn3</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p>核心原理是通过传递 next 给每个函数，函数内部自行控制什么时候往下执行；再悄悄告诉你哦，其实 koa 的核心与此类似哦；</p></blockquote><blockquote><p>对于 compose 的封装，webpack 提供了<code>tapable</code>库，里面封装了各种针对同步、异步的 compose 的封装，感兴趣的可以自行查阅。</p></blockquote><h3 id="_6-promise-实现-chain-将请求变成串行" tabindex="-1">6.Promise 实现 chain，将请求变成串行 <a class="header-anchor" href="#_6-promise-实现-chain-将请求变成串行" aria-label="Permalink to &quot;6.Promise 实现 chain，将请求变成串行&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 方法1：</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> tasks</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">request1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">request2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">request3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> promise</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">tasks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">request</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	promise</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> request</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 执行到这里表示请求已经串行执行完成</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方法2：</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> serialExec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">tasks</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> task</span><span style="color:#C678DD;"> of</span><span style="color:#E06C75;"> tasks</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#61AFEF;"> task</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">serialExec</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tasks</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_7-usepromise" tabindex="-1">7.usePromise <a class="header-anchor" href="#_7-usepromise" aria-label="Permalink to &quot;7.usePromise&quot;">​</a></h3><p>假如有这个一个场景，父组件需要在两个子组件获取完请求结果后做些什么</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">function usePromise() { let resolve,reject; // Promise的回调函数参数会被同步执行</span></span>
<span class="line"><span style="color:#ABB2BF;">const promise = new Promsie((_resolve, _reject) =&gt; { resolve = _resolve; reject</span></span>
<span class="line"><span style="color:#ABB2BF;">= _reject; }) return { promise, resolve, reject } }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">Child1</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">on-got-data</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">child1Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">Child2</span><span style="color:#ABB2BF;"> @</span><span style="color:#D19A66;">on-got-data</span><span style="color:#ABB2BF;">=</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#E5C07B;">child2Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">const child1Promise = usePromise(); const child2Promise = usePromise();</span></span>
<span class="line"><span style="color:#ABB2BF;">Promise.allSettled([ child1Promise.promise, child2Promise.promise ]).then(() =&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">{ // 执行到这里表示Child1、Child2都已经派发过on-got-data事件 })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>以上写法算是一个怪招，只是提供一下 promise 的思路，不太建议使用，因为不止会产生闭包，而且当 promise 一直没有结果时，会一直占用内存。</p></blockquote><h3 id="_8-函数缺省值-及必填限制" tabindex="-1">8.函数缺省值，及必填限制 <a class="header-anchor" href="#_8-函数缺省值-及必填限制" aria-label="Permalink to &quot;8.函数缺省值，及必填限制&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 使用或运算设置缺省值</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	a</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用es6函数参数默认值</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 当a未传入，则为触发赋值默认值，导致抛出错误</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> triggerError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`缺少必填参数</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> triggerError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">)) {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_9-使用箭头函数简化代码" tabindex="-1">9.使用箭头函数简化代码 <a class="header-anchor" href="#_9-使用箭头函数简化代码" aria-label="Permalink to &quot;9.使用箭头函数简化代码&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 将[1，2，3]每个值+1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 原始写法</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	[</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// es6箭头函数，可以省掉return</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	].</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	[</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// return 对象的简化写法</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	].</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}) </span><span style="color:#7F848E;font-style:italic;">// 这样写大括号内会被当成函数体!</span></span>
<span class="line"><span style="color:#ABB2BF;">	[(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)].</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;"> })); </span><span style="color:#7F848E;font-style:italic;">// 用括号括起来就解决啦</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_10-访问对象深层属性-避免报错" tabindex="-1">10.访问对象深层属性，避免报错 <a class="header-anchor" href="#_10-访问对象深层属性-避免报错" aria-label="Permalink to &quot;10.访问对象深层属性，避免报错&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	info</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 假如我们要访问obj.info.name属性，此时直接访问则为报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1.if判断：</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">info</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.或运算，注意需要将或运算内容括起来</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">info</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {}).</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.可选链，新特性，需要考虑兼容性</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> name</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> obj</span><span style="color:#ABB2BF;">?.</span><span style="color:#E5C07B;">info</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_11-短路语句" tabindex="-1">11.短路语句 <a class="header-anchor" href="#_11-短路语句" aria-label="Permalink to &quot;11.短路语句&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	callback</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> callback</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_12-创建-0-1-2-数组" tabindex="-1">12.创建[0,1,2]数组 <a class="header-anchor" href="#_12-创建-0-1-2-数组" aria-label="Permalink to &quot;12.创建[0,1,2]数组&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">()];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_13-截断、清空数组" tabindex="-1">13.截断、清空数组 <a class="header-anchor" href="#_13-截断、清空数组" aria-label="Permalink to &quot;13.截断、清空数组&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 截断</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 清空数组</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="_14-数组乱序" tabindex="-1">14.数组乱序 <a class="header-anchor" href="#_14-数组乱序" aria-label="Permalink to &quot;14.数组乱序&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 0.5</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_15-数组去重" tabindex="-1">15.数组去重 <a class="header-anchor" href="#_15-数组去重" aria-label="Permalink to &quot;15.数组去重&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.双循环</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 其他比如for+for、for+includes等，都可以归类于双循环</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> unique</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">index</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">indexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#E06C75;"> index</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.hash(对象属性唯一的特点)</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> unique</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]]) {</span></span>
<span class="line"><span style="color:#E5C07B;">			res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#E06C75;">			obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]] </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> res</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3.Set</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> unique</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> [...</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_16-限制最大最小值" tabindex="-1">16.限制最大最小值 <a class="header-anchor" href="#_16-限制最大最小值" aria-label="Permalink to &quot;16.限制最大最小值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1.三元运算</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> num</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> num</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 5</span><span style="color:#C678DD;"> ?</span><span style="color:#D19A66;"> 5</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2.Math.min</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> num</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_17-字符串补-0" tabindex="-1">17.字符串补 0 <a class="header-anchor" href="#_17-字符串补-0" aria-label="Permalink to &quot;17.字符串补 0&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> day</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;9&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;00&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> day</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 09</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> day</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;9&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">day</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_18-获取当前时间戳" tabindex="-1">18.获取当前时间戳 <a class="header-anchor" href="#_18-获取当前时间戳" aria-label="Permalink to &quot;18.获取当前时间戳&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#56B6C2;">+</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#E5C07B;">Date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_19-交换两个值" tabindex="-1">19.交换两个值 <a class="header-anchor" href="#_19-交换两个值" aria-label="Permalink to &quot;19.交换两个值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> num1</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> num2</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">num1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">num2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">num2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">num1</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_20-对象、数组克隆" tabindex="-1">20.对象、数组克隆 <a class="header-anchor" href="#_20-对象、数组克隆" aria-label="Permalink to &quot;20.对象、数组克隆&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 浅克隆对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> } };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cloneObj1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">obj1</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cloneObj2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">({}, </span><span style="color:#E06C75;">obj1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 浅克隆数组</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cloneArr1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#E06C75;">arr1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cloneArr2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 深克隆，这种方式最简单，只不过缺点也很多</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cloneObj3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_21-去除数组假值" tabindex="-1">21.去除数组假值 <a class="header-anchor" href="#_21-去除数组假值" aria-label="Permalink to &quot;21.去除数组假值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Boolean</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 一行搞定，需要注意的是，0也会被过滤掉</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_22-干掉-if" tabindex="-1">22.干掉 if <a class="header-anchor" href="#_22-干掉-if" aria-label="Permalink to &quot;22.干掉 if&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 假如有这样一段代码</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;success&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &quot;green&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;warning&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &quot;yellow&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;error&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#98C379;"> &quot;red&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// switch改造</span></span>
<span class="line"><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;success&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;green&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;warning&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;yellow&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;error&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#98C379;"> &quot;red&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对象映射改造</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> typeMap</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	success</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;green&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	warning</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;yellow&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	error</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;red&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> typeMap</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><blockquote><p>以上是对于特别简单的情况下去除 if，真正的能干掉 if，还得是设计模式。</p></blockquote><h3 id="_1-初始化数组" tabindex="-1">1. 初始化数组 <a class="header-anchor" href="#_1-初始化数组" aria-label="Permalink to &quot;1. 初始化数组&quot;">​</a></h3><p>如果想要初始化一个指定长度的一维数组，并指定默认值，可以这样：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">fill</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果想要初始化一个指定长度的二维数组，并指定默认值，可以这样：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> matrix</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">fill</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">fill</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [[0, 0, 0, 0, 0],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  [0, 0, 0, 0, 0],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  [0, 0, 0, 0, 0],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  [0, 0, 0, 0, 0],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  [0, 0, 0, 0, 0],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//  [0, 0, 0, 0, 0]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_2-数组求和、求最大值、最小值" tabindex="-1">2. 数组求和、求最大值、最小值 <a class="header-anchor" href="#_2-数组求和、求最大值、最小值" aria-label="Permalink to &quot;2. 数组求和、求最大值、最小值&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数组求和：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>数组最大值：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#E06C75;"> b</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> a</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>数组最小值：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;"> b</span><span style="color:#C678DD;"> ?</span><span style="color:#E06C75;"> a</span><span style="color:#C678DD;"> :</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">min</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用数组的 reduce 方法可以解决很多数组的求值问题。</p><h3 id="_3-过滤错误值" tabindex="-1">3. 过滤错误值 <a class="header-anchor" href="#_3-过滤错误值" aria-label="Permalink to &quot;3. 过滤错误值&quot;">​</a></h3><p>如果想过滤数组中的 false、0、null、undefined 等值，可以这样：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Boolean</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [1, 6, 7]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-使用逻辑运算符" tabindex="-1">4. 使用逻辑运算符 <a class="header-anchor" href="#_4-使用逻辑运算符" aria-label="Permalink to &quot;4. 使用逻辑运算符&quot;">​</a></h3><p>如果有一段这样的代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	doSomething</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以使用逻辑运算符来改写：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 10</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样写就会简洁很多，如果逻辑与&amp;&amp;操作符前面的值为假，就会发生短路操作，直接结束这一句的执行；如果为真，就会继续执行&amp;&amp;后面的代码，并返回后面代码的返回值。使用这种方式可以减少很多 if...else 判断。</p><h3 id="_5-判断简化" tabindex="-1">5. 判断简化 <a class="header-anchor" href="#_5-判断简化" aria-label="Permalink to &quot;5. 判断简化&quot;">​</a></h3><p>如果有下面的这样的一个判断：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> undefined</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 10</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 15</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>就可以使用数组来简化这个判断逻辑：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> ([</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样代码就会简洁很多，并且便于扩展，如果还有需要等于 a 的判断，直接在数组中添加即可。</p><h3 id="_6-清空数组" tabindex="-1">6. 清空数组 <a class="header-anchor" href="#_6-清空数组" aria-label="Permalink to &quot;6. 清空数组&quot;">​</a></h3><p>如果想要清空一个数组，可以将数组的 length 置于 0:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;C&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;E&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;F&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// []</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_7-计算代码性能" tabindex="-1">7. 计算代码性能 <a class="header-anchor" href="#_7-计算代码性能" aria-label="Permalink to &quot;7. 计算代码性能&quot;">​</a></h3><p>可以使用以下操作来计算代码的性能：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> startTime</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> performance</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 某些程序</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> endTime</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> performance</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> totaltime</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> endTime</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> startTime</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">totaltime</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 30.299999952316284</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_8-拼接数组" tabindex="-1">8. 拼接数组 <a class="header-anchor" href="#_8-拼接数组" aria-label="Permalink to &quot;8. 拼接数组&quot;">​</a></h3><p>如果我们想要拼接几个数组，可以使用扩展运算符：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> end</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> numbers</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">end</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// [9, 1, 2, 5, 6, 7 , 8]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>或者使用数组的 concat()方法：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> end</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">start</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">end</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [1, 2, 3, 4, 5, 6, 7]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是使用 concat()方法时，如果需要合并的数组很大，那么 concat() 函数会在创建单独的新数组时消耗大量内存。这时可以使用以下方法来实现数组的合并：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">push</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">end</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过这种方式就能在很大程度上较少内存的使用。</p><h3 id="_9-对象验证方式" tabindex="-1">9. 对象验证方式 <a class="header-anchor" href="#_9-对象验证方式" aria-label="Permalink to &quot;9. 对象验证方式&quot;">​</a></h3><p>如果我们有一个这样的对象：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> parent</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	child</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		child1</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			child2</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				key</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>很多时候我们会这样去写，避免某一层级不存在导致报错：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">child</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">child1</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">child1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">child2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样代码看起来就会很臃肿，可以使用 JavaScript 的可选链运算符：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">?.</span><span style="color:#E5C07B;">child</span><span style="color:#ABB2BF;">?.</span><span style="color:#E5C07B;">child1</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">child2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样实现和效果和上面的一大长串是一样的。</p><p>可选链运算符同样适用于数组：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">?.[</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可选链运算符允许我们读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。在引用为空(null 或者 undefined) 的情况下不会引起错误，该表达式短路返回值是 undefined。与函数调用一起使用时，如果给定的函数不存在，则返回 undefined。</p><h3 id="_10-验证-undefined-和-null" tabindex="-1">10. 验证 undefined 和 null <a class="header-anchor" href="#_10-验证-undefined-和-null" aria-label="Permalink to &quot;10. 验证 undefined 和 null&quot;">​</a></h3><p>如果有这样一段代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	doSomething</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>也就是如果需要验证一个值如果等于 null 或者 undefined 时，需要执行一个操作时，可以使用空值合并运算符来简化上面的代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> ??</span><span style="color:#61AFEF;"> doSomething</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样，只有 a 是 undefined 或者 null 时，才会执行控制合并运算符后面的代码。空值合并操作符（??）是一个逻辑操作符，当左侧的操作数为 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。</p><h3 id="_11-数组元素转化为数字" tabindex="-1">11. 数组元素转化为数字 <a class="header-anchor" href="#_11-数组元素转化为数字" aria-label="Permalink to &quot;11. 数组元素转化为数字&quot;">​</a></h3><p>如果有一个数组，想要把数组中的元素转化为数字，可以使用 map 方法来实现：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;12&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;3.1415&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;-10.01&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Number</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [12, 1, 3.1415, -10.01]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>通过这种方式，map 会在遍历数组时，对数组的每个元素执行 Number 构造函数并返回结果。</p><h3 id="_12-类数组转为数组" tabindex="-1">12. 类数组转为数组 <a class="header-anchor" href="#_12-类数组转为数组" aria-label="Permalink to &quot;12. 类数组转为数组&quot;">​</a></h3><p>可以使用以下方法将类数组 arguments 转化为数组：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">slice</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>除此之外，还可以使用扩展运算符来实现：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[...</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_13-对象动态声明属性" tabindex="-1">13. 对象动态声明属性 <a class="header-anchor" href="#_13-对象动态声明属性" aria-label="Permalink to &quot;13. 对象动态声明属性&quot;">​</a></h3><p>如果想要给对象动态声明属性，可以这样：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dynamic</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;color&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	brand</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Ford&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	[</span><span style="color:#E06C75;">dynamic</span><span style="color:#ABB2BF;">]: </span><span style="color:#98C379;">&quot;Blue&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// { brand: &quot;Ford&quot;, color: &quot;Blue&quot; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_14-缩短-console-log" tabindex="-1">14. 缩短 console.log() <a class="header-anchor" href="#_14-缩短-console-log" aria-label="Permalink to &quot;14. 缩短 console.log()&quot;">​</a></h3><p>每次进行调试时书写很多 console.log()就会比较麻烦，可以使用以下形式来简化这个代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">document</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">c</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">996</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">c</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello world&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样每次执行 c 方法就行了。</p><h3 id="_15-获取查询参数" tabindex="-1">15. 获取查询参数 <a class="header-anchor" href="#_15-获取查询参数" aria-label="Permalink to &quot;15. 获取查询参数&quot;">​</a></h3><p>如果我们想要获取 URL 中的参数，可以使用 window 对象的属性：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">search</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果一个 URL 为<a href="https://www.baidu.com%3Fproject%3Djs%26type%3D1" target="_blank" rel="noreferrer">www.baidu.com?project=js&amp;type=1</a> 那么通过上面操作就会获取到?project=js&amp;type=1。如果在想获取到其中某一个参数，可以这样：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> type</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> URLSearchParams</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">search</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;type&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_16-数字取整" tabindex="-1">16. 数字取整 <a class="header-anchor" href="#_16-数字取整" aria-label="Permalink to &quot;16. 数字取整&quot;">​</a></h3><p>如果有一个数字包含小数，我们想要去除小数，通过会使用 math.floor、math.ceil 或 math.round 方法来消除小数。其实可以使用~~运算符来消除数字的小数部分，它相对于数字的那些方法会快很多。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">~~</span><span style="color:#D19A66;">3.1415926</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其实这个运算符的作用有很多，通常是用来将变量转化为数字类型的，不同类型的转化结果不一样：</p><ul><li>如果是数字类型的字符串，就会转化为纯数字；</li><li>如果字符串包含数字之外的值，就会转化为 0；</li><li>如果是布尔类型，true 会返回 1，false 会返回 0；</li></ul><p>除了这种方式之外，我们还可以使用按位与来实现数字的取整操作，只需要在数字后面加上<code>|0</code>即可：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">23.9</span><span style="color:#56B6C2;"> |</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#D19A66;">0</span><span style="color:#56B6C2;"> -</span><span style="color:#7F848E;font-style:italic;"> // 23</span></span>
<span class="line"><span style="color:#D19A66;">		23.9</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">|</span></span>
<span class="line"><span style="color:#D19A66;">	0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// -23</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个操作也是直接去除数字后面的小数。这个方法和上面方法类似，使用起来性能都会比 JavaScript 的的 API 好很多。</p><h3 id="_17-删除数组元素" tabindex="-1">17. 删除数组元素 <a class="header-anchor" href="#_17-删除数组元素" aria-label="Permalink to &quot;17. 删除数组元素&quot;">​</a></h3><p>如果我们想删除数组中的一个元素，我们可以使用 delete 来实现，但是删除完之后的元素会变为 undefined，并不会消失，并且执行时会消耗大量的时间，这样多数情况下都不能满足我们的需求。所以可以使用数组的 splice()方法来删除数组元素：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> array</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;b&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;c&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;d&quot;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">splice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [&quot;a&quot;, &quot;b&quot;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_18-检查对象是否为空" tabindex="-1">18. 检查对象是否为空 <a class="header-anchor" href="#_18-检查对象是否为空" aria-label="Permalink to &quot;18. 检查对象是否为空&quot;">​</a></h3><p>如果我们想要检查对象是否为空，可以使用以下方式：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">({}).</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> }).</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Object.keys()方法用于获取对象的 key，会返回一个包含这些 key 值的数组。如果返回的数组长度为 0，那对象肯定为空了。</p><h3 id="_19-使用-switch-case-替换-if-else" tabindex="-1">19. 使用 switch case 替换 if/else <a class="header-anchor" href="#_19-使用-switch-case-替换-if-else" aria-label="Permalink to &quot;19. 使用 switch case 替换 if/else&quot;">​</a></h3><p>switch case 相对于 if/else 执行性能更高，代码看起来会更加清晰。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> IsLeapYear</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">year</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> 29</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> 28</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">6</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">7</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">8</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">9</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">10</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">11</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">12</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">	days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>使用 switch...case 来改写：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">month</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> IsLeapYear</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">year</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">?</span><span style="color:#D19A66;"> 29</span><span style="color:#C678DD;"> :</span><span style="color:#D19A66;"> 28</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 7</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 9</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 11</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#D19A66;"> 12</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">		days</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 31</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>看起来相对来说简洁了一点。可以根据情况，使用数组或对象来改写 if...else。</p><h3 id="_20-获取数组中的最后一项" tabindex="-1">20. 获取数组中的最后一项 <a class="header-anchor" href="#_20-获取数组中的最后一项" aria-label="Permalink to &quot;20. 获取数组中的最后一项&quot;">​</a></h3><p>如果想获取数组中的最后一项，很多时候会这样来写：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>其实我们还可以使用数组的 slice 方法来获取数组的最后一个元素：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当我们将 slice 方法的参数设置为负值时，就会从数组后面开始截取数组值，如果我们想截取后两个值，参数传入-2 即可。</p><h3 id="_21-值转为布尔值" tabindex="-1">21. 值转为布尔值 <a class="header-anchor" href="#_21-值转为布尔值" aria-label="Permalink to &quot;21. 值转为布尔值&quot;">​</a></h3><p>在 JavaScript 中，以下值都会在布尔值转化时转化为 false，其他值会转化为 true：</p><ul><li>undefined</li><li>null</li><li>0</li><li>-0</li><li>NaN</li><li>&quot;&quot;</li></ul><p>通常我们如果想显式的值转化为布尔值，会使用 Boolean()方法进行转化。其实我们可以使用!!运算符来将一个值转化我布尔值。我们知道，一个！是将对象转为布尔型并取反，两个！是将取反后的布尔值再取反，相当于直接将非布尔类型值转为布尔类型值。这种操作相对于 Boolean()方法性能会快很多，因为它是计算机的原生操作：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">!!</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#56B6C2;">!!</span><span style="color:#98C379;">&quot;996&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#56B6C2;">!!</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#56B6C2;">!!</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_22-格式化-json-代码" tabindex="-1">22. 格式化 JSON 代码 <a class="header-anchor" href="#_22-格式化-json-代码" aria-label="Permalink to &quot;22. 格式化 JSON 代码&quot;">​</a></h3><p>相信大家都使用过 JSON.stringify 方法，该方法可以将一个 JavaScript 对象或值转换为 JSON 字符串。他的语法如下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">replacer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">space</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>它有三个参数:</p><ul><li><strong>value</strong>：将要序列化成 一个 JSON 字符串的值。</li><li><strong>replacer</strong> 可选：如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为 null 或者未提供，则对象所有的属性都会被序列化。</li><li><strong>space</strong> 可选：指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为 10。该值若小于 1，则意味着没有空格；如果该参数为字符串（当字符串长度超过 10 个字母，取其前 10 个字母），该字符串将被作为空格；如果该参数没有提供（或者为 null），将没有空格。</li></ul><p>通常情况下，我们都写一个参数来将一个 JavaScript 对象或值转换为 JSON 字符串。可以看到它还有两个可选的参数，所以我们可以用这俩参数来格式化 JSON 代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">alpha</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">beta</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;B&quot;</span><span style="color:#ABB2BF;"> }, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\t</span><span style="color:#98C379;">&quot;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输出结果如下：</p><p><img src="`+c+`" alt="imagepng"></p><h3 id="_23-避免使用-eval-和-with" tabindex="-1">23. 避免使用 eval()和 with() <a class="header-anchor" href="#_23-避免使用-eval-和-with" aria-label="Permalink to &quot;23. 避免使用 eval()和 with()&quot;">​</a></h3><ul><li>with() 会在全局范围内插入一个变量。因此，如果另一个变量具有相同的名称，则可能会导致混淆并覆盖该值。</li><li>eval() 是比较昂贵的操作，每次调用它时，脚本引擎都必须将源代码转换为可执行代码。</li></ul><h3 id="_24-函数参数使用对象而不是参数列表" tabindex="-1">24. 函数参数使用对象而不是参数列表 <a class="header-anchor" href="#_24-函数参数使用对象而不是参数列表" aria-label="Permalink to &quot;24. 函数参数使用对象而不是参数列表&quot;">​</a></h3><p>当我们使用参数列表给函数传递参数时，如果参数较少还好，如果参数较多时，就会比较麻烦，因为我们必须按照参数列表的顺序来传递参数。如果使用 TypeScript 来写，那么写的时候还需要让可选参数排在必选参数的后面。</p><p>如果我们的函数参数较多，就可以考虑使用对象的形式来传递参数，对象的形式传递参数时，传递可选参数并不需要放在最后，并且参数的顺序不在重要。与参数列表相比，通过对象传递的内容也更容易阅读和理解。</p><p>下面来看一个例子：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">price</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">quantity</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">description</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;bananas&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;fruit&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>下面来使用对象传参：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> getItem</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">price</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">quantity</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">description</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">getItem</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;bananas&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	price</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	quantity</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;fruit&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 字符转数字</span></span>
<span class="line"><span style="color:#98C379;">&quot;32&quot;</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 32</span></span>
<span class="line"><span style="color:#D19A66;">null</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#D19A66;">undefined</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// NaN</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 转字符串</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 32</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;32&#39;</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;undifined&#39;</span></span>
<span class="line"><span style="color:#98C379;">&quot;&quot;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#D19A66;">	null</span><span style="color:#56B6C2;"> +</span><span style="color:#7F848E;font-style:italic;"> // &#39;null&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 时间戳</span></span>
<span class="line"><span style="color:#C678DD;">	new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 1656041075862</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>tips</code>：利用 <code>js</code> 运算符中的隐式转换，在做运算的时候会根据运算符的不同对数据做不同的转换。</p><h3 id="多值分配" tabindex="-1">多值分配 <a class="header-anchor" href="#多值分配" aria-label="Permalink to &quot;多值分配&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">c</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hi&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// a = 1 , b = &#39;hi&#39; , c = true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E5C07B;">y</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// x = 1 , y = [2, 3]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>tips</code>：利用数组的解构赋值（对象解构也可以）。</p><h3 id="取整" tabindex="-1">取整 <a class="header-anchor" href="#取整" aria-label="Permalink to &quot;取整&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">5.8</span><span style="color:#56B6C2;"> |</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#D19A66;">0</span><span style="color:#56B6C2;"> -</span><span style="color:#7F848E;font-style:italic;"> // 5</span></span>
<span class="line"><span style="color:#D19A66;">		5.8</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">|</span></span>
<span class="line"><span style="color:#D19A66;">	0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// -5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>tips</code>：利用计算机中二进制按位或进行计算（注意，如果<code>n</code>为正，则<code>n | 0</code> 是向下舍入，如果<code>n</code>为负数，则是向上舍入）,<code>~~</code>(双非按位取反运算) 也可以达到类似效果。</p><h3 id="奇偶数" tabindex="-1">奇偶数 <a class="header-anchor" href="#奇偶数" aria-label="Permalink to &quot;奇偶数&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> num</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 13</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;"> &amp;</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;odd&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">else</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;even&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// odd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>tips</code>：利用计算机中二进制按位与运算，通过 <code>&amp; 1</code> ，可以得出 <code>奇数（十进制）</code>位与<code>1</code>的结果是<code>1</code>，<code>偶数（十进制）</code>位与<code>1</code>的结果是<code>0</code>。</p><h3 id="和" tabindex="-1">&amp;&amp; 和 || <a class="header-anchor" href="#和" aria-label="Permalink to &quot;&amp;&amp; 和 ||&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#D19A66;"> 4</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#98C379;"> &quot;a&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#D19A66;"> 0</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#98C379;"> &quot;b&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> ||</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;d&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;hi&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;d&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> e</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#98C379;"> &quot;hi&quot;</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;hi&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 常用于回调函数调用</span></span>
<span class="line"><span style="color:#E06C75;">cb</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> cb</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// cb 存在执行 cb 方法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>tips</code>： 利用逻辑运算符的特性，可以实现降低代码的</p><p><strong>&amp;&amp;</strong> ：从左往右依次判断，当当前值为 <strong>true</strong> 则继续，为 <strong>false</strong> 则返回此值。</p><p><strong>||</strong> ：从左往右依次判断，当当前值为 <strong>false</strong> 则继续，为 <strong>true</strong> 则返回此值。</p><h3 id="运算符" tabindex="-1">?? 运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;?? 运算符&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">0</span><span style="color:#56B6C2;"> ??</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> ??</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#D19A66;">false</span><span style="color:#56B6C2;"> ??</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#D19A66;">null</span><span style="color:#56B6C2;"> ??</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#D19A66;">undefined</span><span style="color:#56B6C2;"> ??</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>tips</code>：某些情况可以用 <code>??</code> 来替代 <code>||</code>，因为 <code>??</code> 判断运算符左侧的值为<code>null</code> 或 <code>undefined</code>时，才返回右侧的值，可以处理 <code>0</code> ， <code>false</code> 的情况。</p><h3 id="uniqueid-生成器" tabindex="-1">UniqueID 生成器 <a class="header-anchor" href="#uniqueid-生成器" aria-label="Permalink to &quot;UniqueID 生成器&quot;">​</a></h3><div class="language-scss line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">Math</span><span style="color:#ABB2BF;">.random().toString(36).slice(8)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>tips</code>：利用<code>toSring</code>函数将随机数转换为一个<code>36进制</code>字符串，在通过<code>slice</code>函数截取小数点以后的字符。</p><h3 id="uuid-生成器" tabindex="-1">uuid 生成器 <a class="header-anchor" href="#uuid-生成器" aria-label="Permalink to &quot;uuid 生成器&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> uuid</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> crypto</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">randomUUID</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// &#39;460e025e-cf90-47c0-a2a3-f920755d63c5&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>tips</code>：利用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API" target="_blank" rel="noreferrer">Web Crypto</a> 提供的加密接口，可以很方便的使用其 <code>api</code> 生成 <code>uuid</code>。</p><h3 id="数组过滤-false-类型值" tabindex="-1">数组过滤 <code>False</code> 类型值 <a class="header-anchor" href="#数组过滤-false-类型值" aria-label="Permalink to &quot;数组过滤 \`False\` 类型值&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> nArr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Boolean</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [1,2,3]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>tips</code>：利用 <code>Boolean</code> 函数对数组中的元素进行转换后过滤。</p><h3 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> uArr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)]; </span><span style="color:#7F848E;font-style:italic;">// [1,2,3]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>tips</code>：利用 <code>ES6</code> 中 <code>Set</code> 数据解构不重复的特性。</p><h3 id="数组乱序" tabindex="-1">数组乱序 <a class="header-anchor" href="#数组乱序" aria-label="Permalink to &quot;数组乱序&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 0.5</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [5, 4, 3, 2, 6, 8, 1, 7]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>tips</code>：利用数组自带的 <code>sort</code> 函数通过随机数的比较来打乱（会改变原始数组）。</p><h3 id="数组求和" tabindex="-1">数组求和 <a class="header-anchor" href="#数组求和" aria-label="Permalink to &quot;数组求和&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>tips</code>：利用 <code>reduce</code> 函数收敛的特性，传入一个累加函数，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><h3 id="数组交集" tabindex="-1">数组交集 <a class="header-anchor" href="#数组交集" aria-label="Permalink to &quot;数组交集&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">arr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> arr2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// [2, 3, 4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>tips</code>：利用数组 <code>filter</code> 和 <code>includes</code> 函数过滤过存在于另一个数组中的元素，求交集。</p><h3 id="数组并集" tabindex="-1">数组并集 <a class="header-anchor" href="#数组并集" aria-label="Permalink to &quot;数组并集&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">arr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">arr2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">arr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">))); </span><span style="color:#7F848E;font-style:italic;">// [1, 2, 3, 4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>tips</code>：利用数组 <code>concat</code> 和 <code>includes</code> 函数拼接另一个数组中不存在的元素，求并集。</p><h3 id="数组差集" tabindex="-1">数组差集 <a class="header-anchor" href="#数组差集" aria-label="Permalink to &quot;数组差集&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">arr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">arr2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// [1, 4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>tips</code>：<code>arr1</code> 利用 <code>filter</code> 函数过滤出不存在于 <code>arr2</code> 中的元素，得到差集。</p><h3 id="数组补集" tabindex="-1">数组补集 <a class="header-anchor" href="#数组补集" aria-label="Permalink to &quot;数组补集&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">	new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">		arr1</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#56B6C2;"> !</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr1</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#56B6C2;"> !</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr2</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">	)</span></span>
<span class="line"><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [1, 4, 5, 6]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>tips</code>：先通过<code>concat</code>拼接两数组后，然后再通过<code>filter</code>函数分别过滤过不存在于自身内的元素，得到其补集。</p><h3 id="格式化金额" tabindex="-1">格式化金额 <a class="header-anchor" href="#格式化金额" aria-label="Permalink to &quot;格式化金额&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> num</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100010001</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">num</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">\\B</span><span style="color:#E06C75;">(?=(\\d</span><span style="color:#D19A66;">{3}</span><span style="color:#E06C75;">)</span><span style="color:#D19A66;">+</span><span style="color:#E06C75;">(?!\\d))/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;,&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 100,010,001</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>tips</code>：利用 <code>replace</code> 函数做正则匹配每匹配到三位数字添加一个<code>,</code>。</p><h3 id="补-0" tabindex="-1">补 0 <a class="header-anchor" href="#补-0" aria-label="Permalink to &quot;补 0&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> fillZero</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">len</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> num</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">len</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">fillZero</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 09</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>tips</code>：利用<code>padStart</code>函数补全字符串长度，可以达到不够补<code>0</code> 的情况，可以格式化时间等。</p><h3 id="保留小数" tabindex="-1">保留小数 <a class="header-anchor" href="#保留小数" aria-label="Permalink to &quot;保留小数&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> round</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">decimal</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">round</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 10</span><span style="color:#56B6C2;"> **</span><span style="color:#E06C75;"> decimal</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;"> 10</span><span style="color:#56B6C2;"> **</span><span style="color:#E06C75;"> decimal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">round</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">12.453</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 12.45</span></span>
<span class="line"><span style="color:#61AFEF;">round</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">12.457</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 12.46</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>tips</code>：利用进行指数倍增，再指数缩减的方式，可以实现保留任意位数小数，还可以避免精度丢失的问题。</p><h3 id="判断数据类型" tabindex="-1">判断数据类型 <a class="header-anchor" href="#判断数据类型" aria-label="Permalink to &quot;判断数据类型&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> type</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">toString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Number</span></span>
<span class="line"><span style="color:#61AFEF;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;s&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// String</span></span>
<span class="line"><span style="color:#61AFEF;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Boolean</span></span>
<span class="line"><span style="color:#61AFEF;">type</span><span style="color:#ABB2BF;">([]); </span><span style="color:#7F848E;font-style:italic;">// Array</span></span>
<span class="line"><span style="color:#61AFEF;">type</span><span style="color:#ABB2BF;">({}); </span><span style="color:#7F848E;font-style:italic;">// Object</span></span>
<span class="line"><span style="color:#61AFEF;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// Date</span></span>
<span class="line"><span style="color:#61AFEF;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// Symbol</span></span>
<span class="line"><span style="color:#61AFEF;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Undefined</span></span>
<span class="line"><span style="color:#61AFEF;">type</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>tips</code>：利用 <code>Object.prototype.toString.call</code> 方法可以准确判断数据类型</p><h3 id="获取-url-参数" tabindex="-1">获取 URL 参数 <a class="header-anchor" href="#获取-url-参数" aria-label="Permalink to &quot;获取 URL 参数&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> urlSearch</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;?name=tom&amp;age=18&amp;id=1&amp;id=2&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> urlParams</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> URLSearchParams</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">urlSearch</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">urlParams</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// tom</span></span>
<span class="line"><span style="color:#E5C07B;">urlParams</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">urlParams</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;xx&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// null</span></span>
<span class="line"><span style="color:#E5C07B;">urlParams</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// name=tom&amp;age=18&amp;id=1&amp;id=2</span></span>
<span class="line"><span style="color:#E5C07B;">urlParams</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// [&#39;1&#39;,&#39;2&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">urlParams</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">append</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;method&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;get&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">urlParams</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// name=tom&amp;age=18&amp;id=1&amp;id=2&amp;method=get</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>tips</code>：利用 <code>URLSearchParams()</code> 构造器创建并返回一个新的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams" target="_blank" rel="noreferrer">URLSearchParams</a> 对象，可以很方便的获取<code>url</code>参数，还有类似<code>Object.keys()</code>，<code>Object.values()</code>等方法。</p><h3 id="图片懒加载" tabindex="-1">图片懒加载 <a class="header-anchor" href="#图片懒加载" aria-label="Permalink to &quot;图片懒加载&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> lazyLoad</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> observer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> IntersectionObserver</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">entries</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		entries</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">entry</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">entry</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">intersectionRatio</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				entry</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> entry</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">dataset</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unobserve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">entry</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#E5C07B;">	Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementsByTagName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;img&quot;</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		observer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">observe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">el</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>tips</code>：利用 <code>IntersectionObserver()</code> 构造器创建并返回一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver" target="_blank" rel="noreferrer"><code>IntersectionObserver</code></a>对象，通过观察 <code>intersectionRatio</code> 的状态来确定目标是否在视口内。</p><h3 id="_1、复制到剪贴板" tabindex="-1">1、复制到剪贴板 <a class="header-anchor" href="#_1、复制到剪贴板" aria-label="Permalink to &quot;1、复制到剪贴板&quot;">​</a></h3><p>使用 navigator.clipboard.writeText 轻松将任何文本复制到剪贴板。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> copyToClipboard</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">text</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">clipboard</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeText</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">copyToClipboard</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello World&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2、检查日期是否有效" tabindex="-1">2、检查日期是否有效 <a class="header-anchor" href="#_2、检查日期是否有效" aria-label="Permalink to &quot;2、检查日期是否有效&quot;">​</a></h3><p>使用以下代码段检查给定日期是否有效。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isDateValid</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#56B6C2;"> !</span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#61AFEF;">isDateValid</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;December 17, 1995 03:24:00&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3、找出一年中的哪一天" tabindex="-1">3、找出一年中的哪一天 <a class="header-anchor" href="#_3、找出一年中的哪一天" aria-label="Permalink to &quot;3、找出一年中的哪一天&quot;">​</a></h3><p>查找给定日期的哪一天。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> dayOfYear</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">date</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">	Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">date</span><span style="color:#56B6C2;"> -</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFullYear</span><span style="color:#ABB2BF;">(), </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;"> 1000</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 60</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 60</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 24</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">dayOfYear</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: 272</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4、将首字符串大写" tabindex="-1">4、将首字符串大写 <a class="header-anchor" href="#_4、将首字符串大写" aria-label="Permalink to &quot;4、将首字符串大写&quot;">​</a></h3><p>Javascript 没有内置的大写函数，因此我们可以使用以下代码。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> capitalize</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> str</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toUpperCase</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">capitalize</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;follow for more&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#7F848E;font-style:italic;">// Result: Follow for more</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5、找出两日期之间的天数" tabindex="-1">5、找出两日期之间的天数 <a class="header-anchor" href="#_5、找出两日期之间的天数" aria-label="Permalink to &quot;5、找出两日期之间的天数&quot;">​</a></h3><p>使用以下代码段查找给定 2 个日期之间的天数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> dayDif</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">date1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">date2</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ceil</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">abs</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">date1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">-</span><span style="color:#E5C07B;"> date2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">()) </span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;"> 86400000</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;">dayDif</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;2020-10-21&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;2021-10-22&quot;</span><span style="color:#ABB2BF;">))</span><span style="color:#7F848E;font-style:italic;">// Result: 366</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_6、清除所有-cookie" tabindex="-1">6、清除所有 Cookie <a class="header-anchor" href="#_6、清除所有-cookie" aria-label="Permalink to &quot;6、清除所有 Cookie&quot;">​</a></h3><p>你可以通过使用 document.cookie 访问 cookie 并清除它来轻松清除存储在网页中的所有 cookie。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> clearCookies</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">cookie</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;;&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">	(</span><span style="color:#E06C75;font-style:italic;">cookie</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cookie</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cookie</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">^</span><span style="color:#D19A66;"> +</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">			/=.</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">			\`=;expires=</span><span style="color:#C678DD;">\${</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toUTCString</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">;</span></span>
<span class="line"><span style="color:#98C379;">path=/\`</span></span>
<span class="line"><span style="color:#ABB2BF;">		))</span></span>
<span class="line"><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_7、生成随机十六进制" tabindex="-1">7、生成随机十六进制 <a class="header-anchor" href="#_7、生成随机十六进制" aria-label="Permalink to &quot;7、生成随机十六进制&quot;">​</a></h3><p>你可以使用 Math.random 和 padEnd 属性生成随机十六进制颜色。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> randomHex</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span></span>
<span class="line"><span style="color:#98C379;">	\`#</span><span style="color:#C678DD;">\${</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 0xffffff</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">padEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">randomHex</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//Result: #92b008</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_8、从数组中删除重复项" tabindex="-1">8、从数组中删除重复项 <a class="header-anchor" href="#_8、从数组中删除重复项" aria-label="Permalink to &quot;8、从数组中删除重复项&quot;">​</a></h3><p>你可以使用 JavaScript 中的 Set 轻松删除重复项。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> removeDuplicates</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> [...</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)];</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">removeDuplicates</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">]));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: [ 1, 2, 3, 4, 5, 6 ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_9、从-url-获取查询参数" tabindex="-1">9、从 URL 获取查询参数 <a class="header-anchor" href="#_9、从-url-获取查询参数" aria-label="Permalink to &quot;9、从 URL 获取查询参数&quot;">​</a></h3><p>你可以通过传递 window.location 或原始 URL goole.com?search=easy&amp;page=3 从 url 轻松检索查询参数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> getParameters</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">URL</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	URL</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">		&#39;{&quot;&#39;</span><span style="color:#56B6C2;"> +</span></span>
<span class="line"><span style="color:#61AFEF;">			decodeURI</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;?&quot;</span><span style="color:#ABB2BF;">)[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/&quot;/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&quot;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/&amp;/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&quot;,&quot;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">				.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/=/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&quot;:&quot;&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#98C379;">			&#39;&quot;}&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">URL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">getParameters</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Result: { search : &quot;easy&quot;, page : 3 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_10、从日期记录时间" tabindex="-1">10、从日期记录时间 <a class="header-anchor" href="#_10、从日期记录时间" aria-label="Permalink to &quot;10、从日期记录时间&quot;">​</a></h3><p>我们可以从给定日期以小时::分钟::秒的格式记录时间。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> timeFromDate</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">date</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> date</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toTimeString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">timeFromDate</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2021</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">17</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: &quot;17:30:00&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_11、检查数字是偶数还是奇数" tabindex="-1">11、检查数字是偶数还是奇数 <a class="header-anchor" href="#_11、检查数字是偶数还是奇数" aria-label="Permalink to &quot;11、检查数字是偶数还是奇数&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isEven</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> num</span><span style="color:#56B6C2;"> %</span><span style="color:#D19A66;"> 2</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isEven</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: True</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_12、求数字的平均值" tabindex="-1">12、求数字的平均值 <a class="header-anchor" href="#_12、求数字的平均值" aria-label="Permalink to &quot;12、求数字的平均值&quot;">​</a></h3><p>使用 reduce 方法找到多个数字之间的平均值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> average</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">/</span><span style="color:#E5C07B;"> args</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">average</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: 2.5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_13、反转字符串" tabindex="-1">13、反转字符串 <a class="header-anchor" href="#_13、反转字符串" aria-label="Permalink to &quot;13、反转字符串&quot;">​</a></h3><p>你可以使用 split、reverse 和 join 方法轻松反转字符串。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> reverse</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">str</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">reverse</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">reverse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello world&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: &#39;dlrow olleh&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_14、检查数组是否为空" tabindex="-1">14、检查数组是否为空 <a class="header-anchor" href="#_14、检查数组是否为空" aria-label="Permalink to &quot;14、检查数组是否为空&quot;">​</a></h3><p>检查数组是否为空的简单单行程序将返回 true 或 false。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isNotEmpty</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isArray</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">isNotEmpty</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Result: true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_15、获取选定的文本" tabindex="-1">15、获取选定的文本 <a class="header-anchor" href="#_15、获取选定的文本" aria-label="Permalink to &quot;15、获取选定的文本&quot;">​</a></h3><p>使用内置的 getSelectionproperty 获取用户选择的文本。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> getSelectedText</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSelection</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">getSelectedText</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_16、打乱数组" tabindex="-1">16、打乱数组 <a class="header-anchor" href="#_16、打乱数组" aria-label="Permalink to &quot;16、打乱数组&quot;">​</a></h3><p>使用 sort 和 random 方法打乱数组非常容易。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> shuffleArray</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#D19A66;"> 0.5</span><span style="color:#56B6C2;"> -</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">shuffleArray</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">])); </span><span style="color:#7F848E;font-style:italic;">// Result: [ 1, 4, 3, 2 ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_17、检测暗模式" tabindex="-1">17、检测暗模式 <a class="header-anchor" href="#_17、检测暗模式" aria-label="Permalink to &quot;17、检测暗模式&quot;">​</a></h3><p>使用以下代码检查用户的设备是否处于暗模式。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> isDarkMode</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">	window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">matchMedia</span><span style="color:#56B6C2;"> &amp;&amp;</span></span>
<span class="line"><span style="color:#E06C75;">	window</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#61AFEF;">matchMedia</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;(prefers-color-scheme: dark)&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">		.</span><span style="color:#E5C07B;">matchesconsole</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">isDarkMode</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// Result: True or False</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_18、将-rgb-转换为十六进制" tabindex="-1">18、将 RGB 转换为十六进制 <a class="header-anchor" href="#_18、将-rgb-转换为十六进制" aria-label="Permalink to &quot;18、将 RGB 转换为十六进制&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> rgbToHex</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">r</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#98C379;">   &quot;#&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> ((</span><span style="color:#D19A66;">1</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 24</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">r</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 16</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">g</span><span style="color:#56B6C2;"> &lt;&lt;</span><span style="color:#D19A66;"> 8</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span><span style="color:#61AFEF;">rgbToHex</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_1-不使用临时变量来交换变量的值" tabindex="-1">1. 不使用临时变量来交换变量的值 <a class="header-anchor" href="#_1-不使用临时变量来交换变量的值" aria-label="Permalink to &quot;1. 不使用临时变量来交换变量的值&quot;">​</a></h3><p>例如我们想要将 <code>a</code> 于 <code>b</code> 的值交换</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 交换值</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: a = 2, b = 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这行代码使用数组<strong>解构赋值</strong>的方式来交换两个变量的值，无需定义新的临时变量。这个巧妙的技巧可让代码看起来更简洁明了。语法<code>[a, b] = [b, a]</code>通过解构右侧的数组并将其分配给左侧来实现交换它们的值。</p><h3 id="_2-对象解构-让数据访问更便捷" tabindex="-1">2. 对象解构，让数据访问更便捷 <a class="header-anchor" href="#_2-对象解构-让数据访问更便捷" aria-label="Permalink to &quot;2. 对象解构，让数据访问更便捷&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">age</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;张三&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: name = &#39;张三&#39;, age = 23</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这里使用对象<strong>解构赋值</strong>的方式将对象中的属性直接提取到新的变量中。这种方法简化了访问对象属性的过程，并增强了代码的可读性。</p><h3 id="_3-浅克隆对象" tabindex="-1">3. 浅克隆对象 <a class="header-anchor" href="#_3-浅克隆对象" aria-label="Permalink to &quot;3. 浅克隆对象&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> originalObj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;张三&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">24</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> clonedObj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">originalObj</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: clonedObj = { name: &#39;张三&#39;, age: 24 }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 此时改变 clonedObj 的属性，将不会影响到原始对象 originalObj</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>通过使用<strong>扩展运算符</strong> (<code>...</code>) 创建<code>originalObj</code>的<strong>浅克隆</strong>对象。此技术将所有可枚举的自身属性从原始对象复制到新对象。</p><h3 id="_4-合并对象" tabindex="-1">4. 合并对象 <a class="header-anchor" href="#_4-合并对象" aria-label="Permalink to &quot;4. 合并对象&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;张三&#39;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">22</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> mergedObj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">obj1</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">obj2</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: mergedObj = { name: &#39;张三&#39;, age: 22 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>与克隆类似，通过<strong>扩展运算符</strong>将<code>obj1</code>和合并<code>obj2</code>为一个新的对象。如果有重叠的属性，则最后一个对象的属性将覆盖前一个对象的属性。</p><h3 id="_5-清理数组" tabindex="-1">5. 清理数组 <a class="header-anchor" href="#_5-清理数组" aria-label="Permalink to &quot;5. 清理数组&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [ </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> ];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> cleanedArray</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Boolean</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: cleanedArray = [1, 2, 3]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过<code>Array.prototype.filter()</code>函数并使用<code>Boolean</code>函数作为回调。它将会从数组中删除所有假值（ <code>0</code>，<code>false</code>，<code>null</code>，<code>undefined</code>，<code>&#39;&#39;</code>，<code>NaN</code>）。</p><h3 id="_6-将-nodelist-转换为数组" tabindex="-1">6. 将 NodeList 转换为数组 <a class="header-anchor" href="#_6-将-nodelist-转换为数组" aria-label="Permalink to &quot;6. 将 NodeList 转换为数组&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> nodesArray</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [ ...</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;div&#39;</span><span style="color:#ABB2BF;">) ];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过<strong>扩展运算符</strong>将<code>NodeList</code>( <code>document.querySelectorAll</code>函数的返回值) 转换为 JavaScript 数组，从而能够使用数组的<code>map</code>方法<code>filter</code>去操作查找到的元素。</p><h3 id="_7-检查数组是否满足指定条件" tabindex="-1">7. 检查数组是否满足指定条件 <a class="header-anchor" href="#_7-检查数组是否满足指定条件" aria-label="Permalink to &quot;7. 检查数组是否满足指定条件&quot;">​</a></h3><p>例如我们要判断一个数组中是否存在负数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [ </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> ];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 数组中是否有负数</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> hasNegativeNumbers</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> num</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: hasNegativeNumbers = true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>Array.prototype.some()</code>函数用于检查数组中是否<strong>至少有一个元素</strong>，通过所提供的回调函数实现的测试（此处判断是否是负数，返回<code>true</code>表示通过）</p><p>另外，还可以使用<code>Array.prototype.every()</code>来检查数组的所有元素是否<strong>全部通过测试</strong>（此处判断是否是正数）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [ </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> ];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 数组元素是否全部为正</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> allPositive</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">every</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E06C75;"> num</span><span style="color:#56B6C2;"> &gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: allPositive = false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_8-将文本复制到剪贴板" tabindex="-1">8. 将文本复制到剪贴板 <a class="header-anchor" href="#_8-将文本复制到剪贴板" aria-label="Permalink to &quot;8. 将文本复制到剪贴板&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">clipboard</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeText</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Text to copy&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过使用 Clipboard API 以编程方式将文本复制到剪贴板。这是一种最新的复制方法，可让文本复制变得无缝且高效（但目前各大浏览器支持度还不是很高，需要考虑兼容性问题）。</p><h3 id="_9-删除数组重复项" tabindex="-1">9. 删除数组重复项 <a class="header-anchor" href="#_9-删除数组重复项" aria-label="Permalink to &quot;9. 删除数组重复项&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> unique</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [...</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">)];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: unique = [1, 2, 3, 4, 5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这里利用了<code>Set</code>对象存储的值会保持唯一，以及<strong>扩展运算符</strong>能将<code>Set</code>转换回数组的特性。这是一种优雅的删除数组中重复项的方式。</p><h3 id="_10-取两个数组的交集" tabindex="-1">10. 取两个数组的交集 <a class="header-anchor" href="#_10-取两个数组的交集" aria-label="Permalink to &quot;10. 取两个数组的交集&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 取两个数组中公共的元素</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> intersection</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> arr2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: intersection = [2, 4]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此示例通过使用<code>Array.prototype.filter()</code>函数去查找<code>arr1</code>与<code>arr2</code>中的公共元素。传入的回调函数会检查<code>arr2</code>是否包含<code>arr1</code>的每一个元素，从而得到两个数组的交集。</p><h3 id="_11-求数组元素的总和" tabindex="-1">11. 求数组元素的总和 <a class="header-anchor" href="#_11-求数组元素的总和" aria-label="Permalink to &quot;11. 求数组元素的总和&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 求总和</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">total</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> total</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: sum = 10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此示例使用<code>Array.prototype.reduce()</code>方法将数组中所有的值全部累加起来。<code>reduce</code>方法接收一个回调函数和一个初始值（即前一个回调函数累加值的初始值），这个回调函数有两个参数：累加值<code>total</code>和当前值<code>value</code>。它将会遍历数组所有元素，将每个元素添加到总和中（总和初始为0）。</p><h3 id="_12-根据指定条件判断-是否给对象的属性赋值" tabindex="-1">12. 根据指定条件判断，是否给对象的属性赋值 <a class="header-anchor" href="#_12-根据指定条件判断-是否给对象的属性赋值" aria-label="Permalink to &quot;12. 根据指定条件判断，是否给对象的属性赋值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> condition</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;你好，世界&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果条件为真，则将 value 变量的值赋给 newObject.key 属性</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> newObject</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {...(</span><span style="color:#E06C75;">condition</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">})};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: newObject = { key: &#39;你好，世界&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此案例使用扩展运算符 (<code>...</code>) 与短路求值(<code>&amp;&amp;</code>)，将属性有条件地添加到对象中。 如果<code>condition</code>为真，则会将<code>{key: value}</code>扩展到对象中；否则不进行任何操作。</p><h3 id="_13-使用变量作为对象的键" tabindex="-1">13. 使用变量作为对象的键 <a class="header-anchor" href="#_13-使用变量作为对象的键" aria-label="Permalink to &quot;13. 使用变量作为对象的键&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> dynamicKey</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;name&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;张三&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用一个动态的变量作为 key</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {[</span><span style="color:#E06C75;">dynamicKey</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: obj = { name: &#39;张三&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这种语法称为<strong>计算属性名</strong>，它允许使用变量作为对象的键。方括号内的<code>dynamicKey</code>表达式会计算其值，以将其用作属性名称。</p><h3 id="_14-离线状态检查器" tabindex="-1">14. 离线状态检查器 <a class="header-anchor" href="#_14-离线状态检查器" aria-label="Permalink to &quot;14. 离线状态检查器&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> isOnline</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> navigator</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onLine</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &#39;在线&#39;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &#39;离线&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: isOnline = &#39;在线&#39; 或 &#39;离线&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这段代码使用三元运算符检查浏览器的在线状态(<code>navigator.onLine</code>)，如果为真则返回<code>&#39;在线&#39;</code>，否则返回<code>&#39;离线&#39;</code>。这是一种动态检查用户网络连接状态的方法。</p><h3 id="_15-离开页面弹出确认对话框" tabindex="-1">15. 离开页面弹出确认对话框 <a class="header-anchor" href="#_15-离开页面弹出确认对话框" aria-label="Permalink to &quot;15. 离开页面弹出确认对话框&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onbeforeunload</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#98C379;"> &#39;你确定要离开吗？&#39;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这行代码与<code>window</code>的<code>onbeforeunload</code>事件挂钩，当用户离开页面时会弹出一个确认对话框，一般用于防止用户因未保存更改就关闭页面而导致数据丢失。</p><h3 id="_16-对象数组-根据对象的某个key求对应值的总和" tabindex="-1">16. 对象数组，根据对象的某个key求对应值的总和 <a class="header-anchor" href="#_16-对象数组-根据对象的某个key求对应值的总和" aria-label="Permalink to &quot;16. 对象数组，根据对象的某个key求对应值的总和&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> arrayOfObjects</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">}, {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">}, {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">}];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 指定要求和的 key值</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> sumBy</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">acc</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> acc</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">], </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 传入 &#39;x&#39;，求元素对象 key 为 &#39;x&#39; 的值的总和</span></span>
<span class="line"><span style="color:#61AFEF;">sumBy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayOfObjects</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;x&#39;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: 6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>sumBy</code>函数使用<code>Array.prototype.reduce()</code>对数组中元素特定键的值求和。这是一种根据给定键计算对象数组总和的灵活方法。</p><h3 id="_17-将-url-问号后面的查询字符串转为对象" tabindex="-1">17. 将 url 问号后面的查询字符串转为对象 <a class="header-anchor" href="#_17-将-url-问号后面的查询字符串转为对象" aria-label="Permalink to &quot;17. 将 url 问号后面的查询字符串转为对象&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> query</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;name=John&amp;age=30&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 将字符串解析为对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> parseQuery</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> query</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fromEntries</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> URLSearchParams</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: parseQuery = { name: &#39;John&#39;, age: &#39;30&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>此示例将一个查询字符串转换为了一个对象。其中<code>URLSearchParams</code>会进行字符串解析，它将返回一个可迭代对象，然后在通过<code>Object.fromEntries</code>将它转换为对象，从而使 URL 参数检索变得方便多了。</p><h3 id="_18-将秒数转换为时间格式的字符串" tabindex="-1">18. 将秒数转换为时间格式的字符串 <a class="header-anchor" href="#_18-将秒数转换为时间格式的字符串" aria-label="Permalink to &quot;18. 将秒数转换为时间格式的字符串&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> seconds</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3661</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 一小时是 3600 秒，多出 61 秒</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> toTimeString</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> seconds</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">seconds</span><span style="color:#56B6C2;"> *</span><span style="color:#D19A66;"> 1000</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toISOString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">substr</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">toTimeString</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">seconds</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: &#39;01:01:01&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此示例将秒数转换为 HH:MM:SS 格式的字符串。它通过给定的秒数加上时间戳起始点来创建一个新的 Date 对象，然后将其转换为 ISO 字符串，并提取时间部分得到结果。</p><h3 id="_19-求某对象所有属性值的最大值" tabindex="-1">19. 求某对象所有属性值的最大值 <a class="header-anchor" href="#_19-求某对象所有属性值的最大值" aria-label="Permalink to &quot;19. 求某对象所有属性值的最大值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 数学、语文、英语成绩</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> scores</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">math</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">95</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">chinese</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">99</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">english</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">88</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> maxObjectValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> obj</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">max</span><span style="color:#ABB2BF;">(...</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 最高分</span></span>
<span class="line"><span style="color:#61AFEF;">maxObjectValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">scores</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: 99</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>此示例用于在对象所有的属性值中找到最大值。其中<code>Object.values(obj)</code>将对象所有的属性值提取为数组，然后使用展开运算符将数组的所有元素作为<code>Math.max</code>函数的参数进行最大值查找。</p><h3 id="_20-判断对象的值中是否包含有某个值" tabindex="-1">20. 判断对象的值中是否包含有某个值 <a class="header-anchor" href="#_20-判断对象的值中是否包含有某个值" aria-label="Permalink to &quot;20. 判断对象的值中是否包含有某个值&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;张三&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> hasValue</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">hasValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>hasValue</code>函数会检查对象的值中是否存在指定的值。其中<code>Object.values(obj)</code>用于获取对象中所有的值的数组，然后通过<code>includes(value)</code>检查指定值是否在该数组中。</p><h3 id="_21-安全访问深度嵌套的对象属性" tabindex="-1">21. 安全访问深度嵌套的对象属性 <a class="header-anchor" href="#_21-安全访问深度嵌套的对象属性" aria-label="Permalink to &quot;21. 安全访问深度嵌套的对象属性&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">profile</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;张三&#39;</span><span style="color:#ABB2BF;"> } };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> userName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> user</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">profile</span><span style="color:#ABB2BF;">?.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ??</span><span style="color:#98C379;"> &#39;匿名&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: userName = &#39;张三&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此代码首先演示了如何使用可选链运算符 (<code>?.</code>) 安全地访问<code>user.profile</code>的<code>name</code>值。如果<code>user.profile</code>是<code>undefined</code>或<code>null</code>，它会短路并返回<code>undefined</code>，从而避免潜在的类型错误<code>TypeError</code>。</p><p>然后，使用空值合并运算符 (<code>??</code>) 检查左侧是否为<code>null</code>或<code>undefined</code>，如果是，则使用默认值<code>&#39;匿名&#39;</code>。这可确保后备值不会是其他假值（如<code>&#39;&#39;</code>或<code>0</code>）。这对于访问数据结构中<strong>可能不存在</strong>某些中间属性的深层嵌套属性非常有用。</p><p>在 JavaScript 中，空值合并运算符 (<code>??</code>) 和逻辑或 (<code>||</code>) 都可以用于提供默认值，但它们处理假值的方式有所不同。</p><p>在上面的例子中，如果把<code>??</code>改为<code>||</code>，行为会稍微有些不同。<code>||</code>的左侧如果为假值，它将会返回右侧的值。JavaScript 中的假值包括<code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code>、<code>&#39;&#39;</code>（空字符串）和<code>false</code>。这意味着<code>||</code>左边的值不仅仅是<code>null</code>或<code>undefined</code>，如果还是其他假值，那么都将返回右侧的值。</p><h3 id="_22-条件执行语句" tabindex="-1">22. 条件执行语句 <a class="header-anchor" href="#_22-条件执行语句" aria-label="Permalink to &quot;22. 条件执行语句&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> isEligible</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">isEligible</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> performAction</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果 isEligible 为真，则调用 performAction()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>利用逻辑 AND ( <code>&amp;&amp;</code>) 运算符，函数<code>performAction()</code>仅会在<code>isEligible</code>结果为<code>true</code>时执行。这是一种无需<code>if</code>语句即可有条件地执行函数的简介语法。这对于根据某些条件执行函数非常有用，尤其是在事件处理或回调中。</p><p>如果想要条件赋值，则可以这样写</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> isEligible</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 需要将赋值语句用用括号括起来</span></span>
<span class="line"><span style="color:#E06C75;">isEligible</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;条件达成&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 如果 isEligible 为真，则执行 (value = &#39;条件达成&#39;) 语句</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_23-创建包含值为指定数字范围的数组" tabindex="-1">23. 创建包含值为指定数字范围的数组 <a class="header-anchor" href="#_23-创建包含值为指定数字范围的数组" aria-label="Permalink to &quot;23. 创建包含值为指定数字范围的数组&quot;">​</a></h3><p>例如创建数字5以内所有正数的数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> range</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;"> }, (</span><span style="color:#E06C75;font-style:italic;">_</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: range = [1, 2, 3, 4, 5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>Array.from()</code>从类数组或可迭代对象创建一个新数组。这里，它接受一个具有属性<code>length</code>和映射函数的对象。映射函数 ( <code>(_, i) =&gt; i + 1</code>) 使用索引 ( <code>i</code>) 生成从 1 到 5 的数字。下划线 ( <code>_</code>) 是一种惯例，表示未使用该参数。</p><h3 id="_24-提取文件扩展名" tabindex="-1">24. 提取文件扩展名 <a class="header-anchor" href="#_24-提取文件扩展名" aria-label="Permalink to &quot;24. 提取文件扩展名&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fileName</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;example.png&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> getFileExtension</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> str</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(((</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lastIndexOf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">&gt;&gt;&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果: getFileExtension = &#39;png&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个案例实现了从字符串中提取文件扩展名。它先找到最后一次出现点号 (<code>.</code>) 位置，然后截取从该位置到末尾的字符串。位运算符 (<code>&gt;&gt;&gt;</code>) 确保了即使未找到点号 (<code>.</code>) ，操作也是安全的，因为在这种情况下仍然会返回一个空字符串。</p><h3 id="_25-切换元素的-class" tabindex="-1">25. 切换元素的 class <a class="header-anchor" href="#_25-切换元素的-class" aria-label="Permalink to &quot;25. 切换元素的 class&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> element</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;.my-element&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> toggleClass</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">el</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">className</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> el</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">classList</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toggle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">className</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">toggleClass</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">element</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;active&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>toggleClass</code>函数使用<code>classList.toggle()</code>方法从一个元素的 class 列表中添加或移除某个 class。如果该 class 存在，则删除，否则添加。这是一种根据用户交互或应用程序状态动态更新 class 的方法。非常适合实现响应式设计元素，例如菜单根据用户操作显示或隐藏。</p><h1 id="编写异步-javascript-的最佳实践" tabindex="-1">编写异步 JavaScript 的最佳实践 <a class="header-anchor" href="#编写异步-javascript-的最佳实践" aria-label="Permalink to &quot;编写异步 JavaScript 的最佳实践&quot;">​</a></h1><h2 id="_1-拥抱-promises-或-async-await-控制流" tabindex="-1">1. 拥抱 Promises 或 Async/Await 控制流： <a class="header-anchor" href="#_1-拥抱-promises-或-async-await-控制流" aria-label="Permalink to &quot;1. 拥抱 Promises 或 Async/Await 控制流：&quot;">​</a></h2><p>问题：传统的回调可能导致“回调地狱”，使代码难以阅读和维护。</p><p>解决方案：</p><p>Promises：使用 .then() 和 .catch() 方法提供更清晰的方法来处理异步操作。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fetchData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> xhr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onload</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">responseText</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">        xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onerror</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> reject</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        xhr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fetchData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://api.example.com/data&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Async/Await：Promise 之上的语法糖，提供更像同步的感觉。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> fetchData</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetchData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://api.example.com/data&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_2-利用-fetch-进行现代异步操作" tabindex="-1">2. 利用 fetch 进行现代异步操作： <a class="header-anchor" href="#_2-利用-fetch-进行现代异步操作" aria-label="Permalink to &quot;2. 利用 fetch 进行现代异步操作：&quot;">​</a></h2><p>问题：旧的 XMLHttpRequest (XHR) API 更加冗长。</p><p>解决方案：使用 fetch API，提供更简洁且基于 Promise 的方法。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://api.example.com/data&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_3-优雅地处理错误" tabindex="-1">3. 优雅地处理错误： <a class="header-anchor" href="#_3-优雅地处理错误" aria-label="Permalink to &quot;3. 优雅地处理错误：&quot;">​</a></h2><p>问题：未处理的错误可能会使您的应用程序崩溃。</p><p>解决方案：将 .catch() 与 Promises 结合使用，或将 try...catch 与 async/await 结合使用来管理错误。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetchData</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://api.example.com/data&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Error fetching data:&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_4-考虑使用异步迭代器进行流处理" tabindex="-1">4.考虑使用异步迭代器进行流处理： <a class="header-anchor" href="#_4-考虑使用异步迭代器进行流处理" aria-label="Permalink to &quot;4.考虑使用异步迭代器进行流处理：&quot;">​</a></h2><p>问题：如果立即处理，大数据集可能会使浏览器不堪重负。</p><p>解决方案：使用异步迭代器（如由response.body.getReader()返回的迭代器）来处理块中的数据。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> processDataStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">stream</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> reader</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> stream</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getReader</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ‘’;</span></span>
<span class="line"><span style="color:#C678DD;">    while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">await</span><span style="color:#E5C07B;"> reader</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">closed</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">done</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">value</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> reader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        result</span><span style="color:#56B6C2;"> +=</span><span style="color:#E06C75;"> value</span><span style="color:#C678DD;"> ?</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TextDecoder</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">decode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> ‘’;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(‘</span><span style="color:#E06C75;">https</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//api.example.com/large-data’)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> processDataStream</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_5-对长时间运行的操作采用取消" tabindex="-1">5. 对长时间运行的操作采用取消： <a class="header-anchor" href="#_5-对长时间运行的操作采用取消" aria-label="Permalink to &quot;5. 对长时间运行的操作采用取消：&quot;">​</a></h2><p>问题：如果用户离开，长时间运行的操作可能会变得过时。</p><p>解决方案：利用 AbortController API 创建取消信号。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> controller</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AbortController</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> signal</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> controller</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">signal</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://api.example.com/long-running&#39;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">signal</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &#39;AbortError&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Operation cancelled&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Simulate user navigation (cancelling the request)</span></span>
<span class="line"><span style="color:#E5C07B;">controller</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">abort</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_6-性能优化-去抖和节流" tabindex="-1">6. 性能优化：去抖和节流 <a class="header-anchor" href="#_6-性能优化-去抖和节流" aria-label="Permalink to &quot;6. 性能优化：去抖和节流&quot;">​</a></h2><p>问题：频繁的事件处理程序（例如，按键时）可能会触发不必要的请求。</p><p>解决方案：Debounce：延迟操作，直到自上次事件以来经过一定时间。</p><h2 id="_7-利用生成器进行复杂的异步工作流程" tabindex="-1">7. 利用生成器进行复杂的异步工作流程： <a class="header-anchor" href="#_7-利用生成器进行复杂的异步工作流程" aria-label="Permalink to &quot;7. 利用生成器进行复杂的异步工作流程：&quot;">​</a></h2><p>问题：具有多个异步操作的复杂逻辑可能变得难以管理。</p><p>解决方案：生成器（带有yield的函数）可用于暂停和恢复执行，使代码更具可读性。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function*</span><span style="color:#61AFEF;"> fetchDataInParts</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#C678DD;"> await</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> chunk</span><span style="color:#C678DD;"> of</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        yield</span><span style="color:#E06C75;"> chunk</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#C678DD;"> await</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> chunk</span><span style="color:#C678DD;"> of</span><span style="color:#61AFEF;"> fetchDataInParts</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://api.example.com/large-data&#39;</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> TextDecoder</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">decode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">chunk</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_8-探索异步-等待与并行执行" tabindex="-1">8. 探索异步/等待与并行执行： <a class="header-anchor" href="#_8-探索异步-等待与并行执行" aria-label="Permalink to &quot;8. 探索异步/等待与并行执行：&quot;">​</a></h2><p>问题：您可能想要同时执行多个异步操作。</p><p>解决方案：虽然 async/await 本质上是顺序的，但请使用 Promise.all() 或 async.parallel（来自外部库）并行运行操作。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> fetchData1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ... fetch data from URL 1</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> fetchData2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ... fetch data from URL 2</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">data1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">data2</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">([</span><span style="color:#61AFEF;">fetchData1</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;url1&#39;</span><span style="color:#ABB2BF;">), </span><span style="color:#61AFEF;">fetchData2</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;url2&#39;</span><span style="color:#ABB2BF;">)]);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_9-考虑复杂数据流的可观察量" tabindex="-1">9. 考虑复杂数据流的可观察量： <a class="header-anchor" href="#_9-考虑复杂数据流的可观察量" aria-label="Permalink to &quot;9. 考虑复杂数据流的可观察量：&quot;">​</a></h2><p>问题：异步数据流可能需要复杂的逻辑和订阅。</p><p>解决方案：Observables（例如，来自 RxJS）提供了一种强大的方法来使用用于转换和操作的运算符来处理数据流。</p><h2 id="_10-彻底测试您的异步代码" tabindex="-1">10.彻底测试您的异步代码： <a class="header-anchor" href="#_10-彻底测试您的异步代码" aria-label="Permalink to &quot;10.彻底测试您的异步代码：&quot;">​</a></h2><p>问题：由于异步代码的非阻塞性质，测试起来可能很棘手。</p><p>解决方案：利用 Jest 或 Mocha 等具有模拟功能的库来测试不同的场景，包括错误处理和边缘情况。</p><blockquote><p>通过遵循这些最佳实践，您将能够很好地编写干净、可维护且高效的异步 JavaScript 代码！</p></blockquote><h1 id="待定" tabindex="-1">待定 <a class="header-anchor" href="#待定" aria-label="Permalink to &quot;待定&quot;">​</a></h1><p><a href="https://juejin.cn/post/6844903526796099591" target="_blank" rel="noreferrer">JavaScript 实用技巧和写法建议 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7079935342966472711" target="_blank" rel="noreferrer">几个一看就会的实用 JavaScript 优雅小技巧 🌟 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6844903878253608968" target="_blank" rel="noreferrer">8 个有用的 JS 技巧 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6971225536882278413" target="_blank" rel="noreferrer">Vue 源码学习 | 4 个实用的 Javascript 技巧 - 掘金 (juejin.cn)</a></p>`,1117)]))}const m=n(B,[["render",y]]);export{C as __pageData,m as default};
