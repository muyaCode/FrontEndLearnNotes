import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/b7f77480c9324b3a9b9b295a1269b013tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.DxheykB9.webp",e="/FrontEndLearnNotes/assets/b3edbdd9c56043569733e990ffe24a9dtplv-k3u1fbpfcp-zoom-in-crop-mark1512000.BAhpc_KU.webp",t="/FrontEndLearnNotes/assets/fa1ea8cc836b46cc84d982c78b404fe7tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.CuYQqvub.webp",r="/FrontEndLearnNotes/assets/527df3360c07495fbfbfbe4146c5e4betplv-k3u1fbpfcp-zoom-in-crop-mark1512000.DHx2k5Nv.webp",c="/FrontEndLearnNotes/assets/50c5e635aa4b461abe578a43c8c3b414tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.y1A4RrPi.webp",m=JSON.parse('{"title":"微前端架构设计","description":"","frontmatter":{},"headers":[],"relativePath":"Document/微前端/微前端架构设计.md","filePath":"Document/微前端/微前端架构设计.md","lastUpdated":1750954157000}'),B={name:"Document/微前端/微前端架构设计.md"};function i(y,s,b,d,u,F){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="微前端架构设计" tabindex="-1">微前端架构设计 <a class="header-anchor" href="#微前端架构设计" aria-label="Permalink to &quot;微前端架构设计&quot;">​</a></h1><h2 id="一、微前端方案" tabindex="-1">一、微前端方案 <a class="header-anchor" href="#一、微前端方案" aria-label="Permalink to &quot;一、微前端方案&quot;">​</a></h2><p>目前主流的微前端有如下六种实现方式：</p><p>1.路由分发式。通过 HTTP 服务器的反向代理功能，将请求路由到对应的应用上。</p><p><img src="'+o+'" alt="路由.png"></p><ol start="2"><li>前端微服务化。在不同的框架之上设计通信和加载机制，以在一个页面内加载对应的应用，这是目前社区主流微前端框架采用最多的方式。</li></ol><p><img src="'+e+'" alt="微服务化.png"></p><ol start="3"><li>微应用，通过软件工程的方式，在部署构建环境中，把多个独立的应用组合成一个单体应用，即开发时独立，构建时集成。</li></ol><p><img src="'+t+'" alt="微服务化2.png"></p><p>4.微件化。开发一个新的构建系统，将部分业务功能构建成一个独立的 Chunk 代码，使用时只需要远程加载即可。</p><p>5.前端容器化。将 iframe 作为容器来容纳其他前端应用，这是最快速最简单的方式，天然隔离各子应用执行环境，但是最大的缺点就是加载应用时有明显的加载延迟，用户体验很差。</p><p>6.应用组件化。借助于 Web Components 技术，来构建跨框架的前端应用，该方案最大的问题是浏览器对 Web Component 支持程度不高。</p><p><img src="'+r+`" alt="webcomponent.png"></p><p>目前比较主流的微前端方式是<strong>前端微服务化</strong>，所以这部分内容讲的是实现前端微服务化方案的方式方法。</p><h3 id="javascript-沙盒环境隔离" tabindex="-1">JavaScript 沙盒环境隔离 <a class="header-anchor" href="#javascript-沙盒环境隔离" aria-label="Permalink to &quot;JavaScript 沙盒环境隔离&quot;">​</a></h3><h4 id="闭包隔离" tabindex="-1">闭包隔离 <a class="header-anchor" href="#闭包隔离" aria-label="Permalink to &quot;闭包隔离&quot;">​</a></h4><p>隔离核心需要解决的问题一句话描述：<strong>不同子应用对全局资源的访问需要控制。</strong> 对应在浏览器的语境下，意味着两点：</p><ol><li>需要隔离对全局上下文产生的副作用。</li><li>特别地，要隔离 DOM / BOM 对象。 在 JavaScript 中，讲到隔离，很容易就能联想到闭包，没错，在微前端中，子应用环境隔离最常用的方式就是使用闭包，在创建沙箱时把全局变量的副本通过参数传到闭包即可。</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">exports</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">require</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">__filename</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">__dirname</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 实际的 Module 代码</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>但是在实际创建子应用沙箱的时候，创建全局对象的成本过高，所以通常不直接创建主应用的副本传递给子应用，而是创建一个 iframe ，因为 iframe 天然就是一个独立的环境，完全和主应用隔离,并且能在主应用中引用。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 子应用被包上 wrapper</span></span>
<span class="line"><span style="color:#61AFEF;">__GLOBAL_HOOK</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">exports</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">require</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">module</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;font-style:italic;">window</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 实际的子应用代码</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// wrapper 的实现</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> frame</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;iframe&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 创建一个新的子应用沙箱</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> _window</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> frame</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">contentWindow</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 新建子应用的 window 环境</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> __GLOBAL_HOOK</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">entry</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">	entry</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">require</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">		window</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">_window</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>拿到隔离后的 DOM / BOM 对象之后，我们可以使用 proxy 去插入一些额外的逻辑，比如把子应用某些方法直接委托给主应用，或者禁用子应用的某些方法。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> History</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">_history</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_history</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">			get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					case</span><span style="color:#98C379;"> &quot;pushState&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">						// 在这里魔改掉</span></span>
<span class="line"><span style="color:#C678DD;">						break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="diff-方法隔离" tabindex="-1">diff 方法隔离 <a class="header-anchor" href="#diff-方法隔离" aria-label="Permalink to &quot;diff 方法隔离&quot;">​</a></h4><p>当我们的子页面加载到父类的基座中的时候，我们可以生成一个 map 的散列表。在页面渲染之前，我们先把当前的 window 上的变量等都存储在这个 map 中。当页面卸载的时候，我们在遍历这个 map，将其数据在替换回去。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Sandbox</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cacheMy</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {}; </span><span style="color:#7F848E;font-style:italic;">// 存放修改的属性</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cacheBeforeWindow</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	showPage</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cacheBeforeWindow</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> item</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> window</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">			this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cacheBeforeWindow</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> window</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cacheMy</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">p</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			window</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cacheMy</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	hidePage</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> item</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> window</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cacheBeforeWindow</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">!==</span><span style="color:#E06C75;"> window</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 记录变更</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cacheMy</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> window</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 还原window</span></span>
<span class="line"><span style="color:#E06C75;">				window</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">cacheBeforeWindow</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> diffSandbox</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Sandbox</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 模拟页面激活</span></span>
<span class="line"><span style="color:#E5C07B;">diffSandbox</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">showPage</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 激活沙箱</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">info</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;我是子应用&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;页面激活，子应用对应的值&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 模拟页面卸载</span></span>
<span class="line"><span style="color:#E5C07B;">diffSandbox</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hidePage</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 模拟页面激活</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;页面卸载后，子应用的对应的值&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">diffSandbox</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">showPage</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 重新激活</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;页面激活，子应用对应的值&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h4 id="使用-es6-的新特性-proxy代理" tabindex="-1">使用 es6 的新特性：<code>proxy</code>代理 <a class="header-anchor" href="#使用-es6-的新特性-proxy代理" aria-label="Permalink to &quot;使用 es6 的新特性：\`proxy\`代理&quot;">​</a></h4><p>这里需要用到 es6 的新特性：<code>proxy</code>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy - JavaScript | MDN (mozilla.org)</a>。原理是监听 get 和 set 方法，针对当前路由进行 window 的属性或方法的存取</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> windowMap</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> resertWindow</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> routerUrl</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> handler</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> tempWindow</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> windowMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">routerUrl</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">windowMap</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">routerUrl</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> tempWindow</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">prop</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">windowMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">routerUrl</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">			windowMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">routerUrl</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resertWindow</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> tempWindow</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> windowMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">routerUrl</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">		tempWindow</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">prop</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(obj, prop, value);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> proxyWindow</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resertWindow</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 首先是父类的a属性.</span></span>
<span class="line"><span style="color:#E5C07B;">proxyWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;我是父类的a属性的值&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 改变路由到子类</span></span>
<span class="line"><span style="color:#E06C75;">routerUrl</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;routeA&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">proxyWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;我是routerA的a属性的值&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 改变路由到父类</span></span>
<span class="line"><span style="color:#E06C75;">routerUrl</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">proxyWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 改变路由到子类</span></span>
<span class="line"><span style="color:#E06C75;">routerUrl</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;routeA&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">proxyWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h4 id="iframe-自带-css-和-js-沙盒隔离" tabindex="-1">iframe 自带 css 和 js 沙盒隔离 <a class="header-anchor" href="#iframe-自带-css-和-js-沙盒隔离" aria-label="Permalink to &quot;iframe 自带 css 和 js 沙盒隔离&quot;">​</a></h4><h3 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h3><h4 id="_1-主应用不处理路由-完全由子应用来接管。" tabindex="-1">1.主应用不处理路由，完全由子应用来接管。 <a class="header-anchor" href="#_1-主应用不处理路由-完全由子应用来接管。" aria-label="Permalink to &quot;1.主应用不处理路由，完全由子应用来接管。&quot;">​</a></h4><blockquote><p>主应用就只作为容器，触发加载和渲染子应用。</p></blockquote><p>主应用对子应用的加载定义，可以写死在一个配置 map 中，并且通过手动绑定外部事件（如点击 tab）触发。 而子应用自己的路由逻辑该干嘛还是干嘛，URL 的变化直接反馈到当前地址栏中。 主子的关系：<strong>单向传递参数（参数写死），后续子应用的状态变化按照原逻辑运行。</strong></p><p>此方案存在以下 2 个问题：</p><ol><li>不同的子应用如果存在相同的路由，就会冲突。</li><li>由于主应用没处理路由，带着路由进页面的时候不会产生效果（而是进入初始状态）。</li></ol><h4 id="_2-子应用和主应用共享路由" tabindex="-1">2.子应用和主应用共享路由 <a class="header-anchor" href="#_2-子应用和主应用共享路由" aria-label="Permalink to &quot;2.子应用和主应用共享路由&quot;">​</a></h4><blockquote><p>主应用根据路由调度子应用，子应用内部的状态变化根据特定规则反映到主应用的路由。</p></blockquote><p>第一个方案存在路由冲突的问题，解决方案很简单，只需使用命名空间去区分子应用即可，如下 方案 1: 由于子应用 1 与子应用 2 首页路由一样，就会存在冲突</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">Route</span><span style="color:#D19A66;"> path</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">{</span><span style="color:#D19A66;">\`</span><span style="color:#FFFFFF;">/home\`}</span><span style="color:#D19A66;"> component</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">{Home}</span><span style="color:#ABB2BF;"> /&gt; // 子应用1首页路由 &lt;</span><span style="color:#E06C75;">Route</span></span>
<span class="line"><span style="color:#D19A66;">path</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">{</span><span style="color:#D19A66;">\`</span><span style="color:#FFFFFF;">/home\`}</span><span style="color:#D19A66;"> component</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">{Home}</span><span style="color:#ABB2BF;"> /&gt; // 子应用2首页路由</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用命名空间优化:</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">const APP1_NAME = &#39;app1&#39;; const APP2_NAME = &#39;app2&#39;; &lt;</span><span style="color:#E06C75;">Route</span></span>
<span class="line"><span style="color:#D19A66;">path</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">{</span><span style="color:#D19A66;">\`\${APP1_NAME\`}</span><span style="color:#FFFFFF;">/home\`}</span><span style="color:#D19A66;"> component</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">{Home}</span><span style="color:#ABB2BF;"> /&gt; // 子应用1首页路由 &lt;</span><span style="color:#E06C75;">Route</span></span>
<span class="line"><span style="color:#D19A66;">path</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">{</span><span style="color:#D19A66;">\`\${APP2_NAME}</span><span style="color:#FFFFFF;">/home\`}</span><span style="color:#D19A66;"> component</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">{Home}</span><span style="color:#ABB2BF;"> /&gt; // 子应用2首页路由</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样就解决了路由冲突，但是这就相当于需要约束子应用的路由规则，对子应用有入侵。 此方案的主子关系：<strong>单向传递参数，参数从 URL 中来，主应用控制大粒度的路由，后续子应用的状态变化稍加改造运行。</strong></p><h4 id="_3-子应用维护隔离的路由" tabindex="-1">3.子应用维护隔离的路由 <a class="header-anchor" href="#_3-子应用维护隔离的路由" aria-label="Permalink to &quot;3.子应用维护隔离的路由&quot;">​</a></h4><blockquote><p>主应用根据路由调度子应用，子应用内部的状态变化反映到各自的沙箱中，互不干扰，但不会反映到主应用的路由中。</p></blockquote><p>在上一节已经讲过，在子应用中使用的是独立的沙箱环境，可以想到，在使用了沙箱后，子应用所有的引用以及操作，都是基于创建的 iframe 环境的，比如 <code>location / history / document</code> 等实际都是使用 iframe 的对象。 点击子应用中的链接，被框架拦截默认的链接跳转行为，改为 <code>pushState</code>，由于子应用使用的是沙箱的 <code>history</code>，所以最终实际上是改变了 iframe 的 URL。 那此时点击会不会触发主应用侧的 popstate 呢？答案是不会，因为子应用 DOM 中的点击事件最终会冒泡到沙箱的 <code>document</code>，和主应用并无关联。 这样就<strong>解决了主应用路由冲突的问题，同时又不侵入子应用路由制定，子应用路由可以随心所欲的制定了。</strong> 此方案好像已经完美了？其实并不是，还存在一个问题：由于子应用路由是在沙箱中进行的，主应用完全感受不到，所以就体现不出子应用的路由状态（浏览器地址栏不会随子应用路由变化而改变）。</p><h4 id="_4-子应用路由同步回主应用" tabindex="-1">4.子应用路由同步回主应用 <a class="header-anchor" href="#_4-子应用路由同步回主应用" aria-label="Permalink to &quot;4.子应用路由同步回主应用&quot;">​</a></h4><blockquote><p>主应用根据路由调度子应用，子应用内部的状态变化反映到各自的沙箱中，互不干扰，并且最终会反映到主应用的路由中。</p></blockquote><p>主应用要感知到子应用路由变化并且反应到地址栏，需要 3 步：</p><ol><li>主应用监听子应用消息</li><li>子应用路由变化之后，发送新路由相关信息给主应用</li><li>主应用拿到消息，做出相应变化，如更新到地址栏 思考一下，子应用每次路由变化都要主动发消息给主应用，这样不是很繁琐吗？是的，不过还记得在上一节创建子应用环境时我们对子应用的某些对象创建了 proxy 吗？这里的 proxy 就是可以来做这些 hook 逻辑的。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	case</span><span style="color:#98C379;"> &quot;pushState&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> returnValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> _pushState</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_history</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 插入消息通信逻辑</span></span>
<span class="line"><span style="color:#E5C07B;">			frame</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">postMessage</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">				{</span></span>
<span class="line"><span style="color:#E06C75;">					type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;statechange&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">					data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">						location</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">frame</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">location</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">						state</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">_history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#98C379;">				&quot;*&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">			);</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E06C75;"> returnValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>主应用侧监听子应用消息，然后拼出路由后 <code>replaceState</code>，从而更新浏览器地址栏。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">frame</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">contentWindow</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;message&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> payload</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">payload</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		case</span><span style="color:#98C379;"> &quot;statechange&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> payload</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			const</span><span style="color:#E5C07B;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">href</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="实践-子应用加载" tabindex="-1">实践：子应用加载 <a class="header-anchor" href="#实践-子应用加载" aria-label="Permalink to &quot;实践：子应用加载&quot;">​</a></h3><p>子应用加载有两种方式：</p><ol><li>JS Entry，子应用将资源打成一个 <code>entry script</code>，比如 <code>single-spa</code> 的 <a href="https://link.segmentfault.com/?enc=V4vNM3PeC4viRHYRWP0bOQ==.q376bO8a%2BVDc%2B%2B3aXYvI4g3QjX4S%2BbJcQFFrrysYe4540Kwf2XS2eZSa5aH5Ixb/2kQXkLg5Ae2ceUjfO7X5gPPw8b1cKWFGmGp1zmuIbT%2Bzm68EV3zfcWxTjXxdENJipfI1Hsaue4rOp4UosAkjJeJsPB0o2K9lsY00Gj0uWdX/%2BnGueUR9hUKj5%2BqECSo2tn7LMGuA%2BH1u1tTBEVcv2Q==" target="_blank" rel="noreferrer">example</a> 中的方式。但这个方案的限制也颇多，如要求子应用的所有资源打包到一个 <code>js bundle</code> 里，包括 <code>css</code>、图片等资源。除了打出来的包可能体积庞大之外的问题之外，资源的并行加载等特性也无法利用上。</li><li>HTML Entry，更加灵活，直接将子应用打出来 <code>HTML</code> 作为入口，主框架可以通过 <code>fetch html</code> 的方式获取子应用的静态资源，同时将 <code>HTML document</code> 作为子节点塞到主框架的容器中。这样不仅可以极大的减少主应用的接入成本，子应用的开发方式及打包方式基本上也不需要调整，而且可以天然的解决子应用之间样式隔离的问题。 HTML Entry 子应用注册代码一般如下：</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">framework</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">registerApp</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;subApp1&quot;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">entry</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;//www.a.com/index.html&quot;</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里 HTML 本质上还是充当了静态资源表的角色，所以在追求性能极致的情况下，可以改为静态的 JSON 配置，从而去掉请求 HTML 以及解析 HTML 里静态资源列表的时间。</p><table tabindex="0"><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>HTML Entry</td><td>解耦更彻底，子应用不依赖主应用 DOM，子应用独立开发，独立部署</td><td>多了一次 HTML 请求，解析有性能损耗，无法做构建时优化</td></tr><tr><td>JS Entry</td><td>便于作构建时优化</td><td>依赖主应用提供挂载节点，打包产物体积膨胀，资源无法并行加载</td></tr></tbody></table><h3 id="css-样式隔离" tabindex="-1">CSS 样式隔离 <a class="header-anchor" href="#css-样式隔离" aria-label="Permalink to &quot;CSS 样式隔离&quot;">​</a></h3><p>在微前端架构中，由于存在同时运行多个子应用的场景，样式隔离就是必不可少的工作。</p><h4 id="_1-shadow-dom" tabindex="-1">1.Shadow DOM <a class="header-anchor" href="#_1-shadow-dom" aria-label="Permalink to &quot;1.Shadow DOM&quot;">​</a></h4><p>如果不考虑浏览器兼容性，<code>Shadow DOM</code>肯定是优先想到的方案，因为这是浏览器原生支持的 CSS 隔离</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> shadow</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> document</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#hostElement&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	.</span><span style="color:#61AFEF;">attachShadow</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">mode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;open&quot;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#E5C07B;">shadow</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#98C379;">	&#39;&lt;sub-app&gt;sub app1&lt;/sub-app&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;//www.a.com/index.css&quot;&gt;&#39;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此方案存在一个致命问题，<strong>子应用的样式作用域仅在<code>shadow</code> 元素下，那么一旦子应用中出现运行时越界跑到外面构建 <code>DOM</code> 的场景，必定会导致构建出来的 <code>DOM</code> 无法应用子应用的样式的情况</strong>。 比如一些通用弹窗，一般都是挂在 <code>document.body</code> 下面的，不在 <code>Shadow DOM</code> 里面，导致无法应用到<code>Shadow DOM</code>里的样式。</p><h4 id="_2-自定义-css-属性前缀" tabindex="-1">2.自定义 css 属性前缀 <a class="header-anchor" href="#_2-自定义-css-属性前缀" aria-label="Permalink to &quot;2.自定义 css 属性前缀&quot;">​</a></h4><p><strong>通过约定 <code>css</code> 前缀的方式来避免样式冲突，即各个子应用使用特定的前缀来命名 <code>class</code>，或者直接基于 <code>css module</code> 方案写样式</strong>。</p><p>这种方案对于新系统是可以的，但是微前端很多场景都是需要去接入已经存在的旧系统，显然这种方式需要对旧系统进行大量改造。</p><p>其实解决方案很简单，子应用的所有元素都插入到<code>id=&quot;root&quot;</code>标签中，<code>id</code>是唯一的，所以通过添加属性选择器前缀<code>#root</code>可以让<code>css</code>样式在指定的<code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code>内生效。</p><p>在开发子模块之前，需要确定一个全局唯一的 css 前缀，然后在书写的过程中同一添加此前缀，或在根 root 上添加此前缀，使用 less 或 sass 作用域嵌套即可。例如：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;rootA&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">span</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;rootA-span&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">span</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#D19A66;">	.root</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">		.rootA-span {</span></span>
<span class="line"><span style="color:#ABB2BF;">			// 子路由A的css</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>思考一下，如何实现动态 <code>css</code>，保证运行某个子应用时只有该应用的 <code>css</code>生效，而加载此应用之前的其他子应用样式自动卸载，避免互相影响？</p><p>其实如果使用 <code>HTML Entry</code>的方式，是天然支持 <code>css</code>自动卸载的</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">main</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;subApp1&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			// 子应用完整的 html 结构</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">link</span><span style="color:#D19A66;"> rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;stylesheet&quot;</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;//www.a.com/subapp1.css&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">&gt;....&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当卸载子应用 app1 时，app1 的 container 节点会被卸载，从而删除了里面的 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;www.a.com/subapp1.css&quot;&gt;</code>节点，也就自动卸载了该应用的样式，从而避免影响到后续加载的其他子应用。</p><h4 id="_3-css-属性的-key-值-hash" tabindex="-1">3.css 属性的 key 值+hash <a class="header-anchor" href="#_3-css-属性的-key-值-hash" aria-label="Permalink to &quot;3.css 属性的 key 值+hash&quot;">​</a></h4><p>类似于 vue 的 scoped。在打包的时候，对 css 选择器加上响应的属性，属性的 key 值是一些不重复的 hash 值，然后在选择的时候，使用属性选择器进行选择。</p><h3 id="实践-父子应用通信" tabindex="-1">实践：父子应用通信 <a class="header-anchor" href="#实践-父子应用通信" aria-label="Permalink to &quot;实践：父子应用通信&quot;">​</a></h3><h4 id="_1-发布订阅" tabindex="-1">1.发布订阅 <a class="header-anchor" href="#_1-发布订阅" aria-label="Permalink to &quot;1.发布订阅&quot;">​</a></h4><p>在全局挂一个<strong>事件总线</strong>，应用之间不直接交互，而是统一去事件总线上注册事件，监听事件，通过发布订阅模型来做应用间的通信。</p><p>这是最方便的方式，不用引入任何第三方库，直接使用 window 的 <code>CustomEvent</code> 来监听一个自定义事件，然后在任意地方派发一个自定义事件，就可以天然的通过自定义事件来做到应用间互相通信。</p><h4 id="_2-基于-props" tabindex="-1">2.基于 props <a class="header-anchor" href="#_2-基于-props" aria-label="Permalink to &quot;2.基于 props&quot;">​</a></h4><p>这个方式就跟<code>React</code>和<code>Vue</code>父组件传递数据给子组件一样，把 <code>state</code>,<code>onStateChange</code>, <code>setState</code>都传递给子应用，这样就实现了子应用与主应用通信。</p><p>特别的，为了保证数据流清晰，子应用间一般不直接通信，而是都基于<code>props</code>来变相通信，保证自顶向下的单一数据流。</p><h3 id="静态资源处理" tabindex="-1">静态资源处理 <a class="header-anchor" href="#静态资源处理" aria-label="Permalink to &quot;静态资源处理&quot;">​</a></h3><p>使用 <code>globalAssets</code> 共享资源：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// index.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> microApp</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;@micro-zoe/micro-app&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">microApp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  globalAssets</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    js</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;js地址1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;js地址2&#39;</span><span style="color:#ABB2BF;">, ...], </span><span style="color:#7F848E;font-style:italic;">// js地址</span></span>
<span class="line"><span style="color:#E06C75;">    css</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;css地址1&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;css地址2&#39;</span><span style="color:#ABB2BF;">, ...], </span><span style="color:#7F848E;font-style:italic;">// css地址</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>或者使用 <code>global</code> 属性：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">link</span><span style="color:#D19A66;"> rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;stylesheet&quot;</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;xx.css&quot;</span><span style="color:#D19A66;"> global</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;xx.js&quot;</span><span style="color:#D19A66;"> global</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>以及对资源的过滤：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">link</span><span style="color:#D19A66;"> rel</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;stylesheet&quot;</span><span style="color:#D19A66;"> href</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;xx.css&quot;</span><span style="color:#D19A66;"> exclude</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;xx.js&quot;</span><span style="color:#D19A66;"> exclude</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">style</span><span style="color:#D19A66;"> exclude</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">style</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="渲染微前端模式" tabindex="-1">渲染微前端模式 <a class="header-anchor" href="#渲染微前端模式" aria-label="Permalink to &quot;渲染微前端模式&quot;">​</a></h3><ul><li><strong>默认模式</strong>：每次都按顺序执行一次 JS，具有幂等性</li><li><strong>umd 模式</strong>：只在初次渲染时执行所有 JS，对于需要频繁切换微应用的项目可以提高其性能</li></ul><h3 id="插件系统" tabindex="-1">插件系统 <a class="header-anchor" href="#插件系统" aria-label="Permalink to &quot;插件系统&quot;">​</a></h3><blockquote><p>插件系统的主要作用就是对 js 进行修改，每一个 js 文件都会经过插件系统，我们可以对这些 js 进行拦截和处理，它通常用于修复 js 中的错误或向子应用注入一些全局变量。</p></blockquote><p>这个插件系统主要可以在中间层处理一下 JS，避免一些由于固定模板而无法处理的 JS 报错。总的来说，这个系统还是个新生儿，需要后续其它开发者一起共建。</p><h2 id="二、微前端架构设计" tabindex="-1">二、微前端架构设计 <a class="header-anchor" href="#二、微前端架构设计" aria-label="Permalink to &quot;二、微前端架构设计&quot;">​</a></h2><p>目前主流的微前端框架都采用 <code>Master-Slaves</code> 的架构，即主从架构。 主应用提供子应用加载器，通过不同的路由加载不同的子应用。 在业务功能上，主应用可以提供一些基础的能力，避免各子应用重复开发，比如：</p><ol><li>用户的登录、注册管理。</li><li>系统的统一鉴权管理。</li><li>导航菜单管理。</li><li>路由管理。</li><li>数据管理。</li><li>通信代理。 <img src="`+c+'" alt="主从架构.png"></li></ol><h3 id="原理学习文章" tabindex="-1">原理学习文章 <a class="header-anchor" href="#原理学习文章" aria-label="Permalink to &quot;原理学习文章&quot;">​</a></h3><p><a href="https://juejin.cn/column/7140116822098968606" target="_blank" rel="noreferrer">Qiankun 原理与实践指南 - 写代码的海怪的专栏 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7104253657251577886" target="_blank" rel="noreferrer">一文带你进入微前端世界 - 掘金 (juejin.cn)</a></p><h2 id="三、手写实现简易微前端框架" tabindex="-1">三、手写实现简易微前端框架 <a class="header-anchor" href="#三、手写实现简易微前端框架" aria-label="Permalink to &quot;三、手写实现简易微前端框架&quot;">​</a></h2><p>文章：<a href="https://github.com/Yataozhang/my-single-spa/issues/4" target="_blank" rel="noreferrer">带你手写微前端框架 · Issue #4 · YataoZhang/my-single-spa (github.com)</a></p><p>[带你手写微前端框架]文章代码开源地址：<a href="https://github.com/YataoZhang/my-single-spa" target="_blank" rel="noreferrer">YataoZhang/my-single-spa: 微前端框架简易实现，方便不了解微前端实现原理的同学快速掌握其原理 (github.com)</a></p><p>微前端 2：<a href="https://github.com/FrankFang/micro-frontend-starter" target="_blank" rel="noreferrer">FrankFang/micro-frontend-starter (github.com)</a></p>',106)]))}const C=n(B,[["render",i]]);export{m as __pageData,C as default};
