import{_ as a,c as n,o as e,ah as l}from"./chunks/framework.DqD713j2.js";const B=JSON.parse('{"title":"Koa框架前置JS知识","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Koa框架/Koa框架前置JS知识.md","filePath":"Document/Node后端框架开发/Koa框架/Koa框架前置JS知识.md","lastUpdated":1750954157000}'),o={name:"Document/Node后端框架开发/Koa框架/Koa框架前置JS知识.md"};function p(r,s,t,c,i,b){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="koa框架前置js知识" tabindex="-1">Koa框架前置JS知识 <a class="header-anchor" href="#koa框架前置js知识" aria-label="Permalink to &quot;Koa框架前置JS知识&quot;">​</a></h1><p><strong>Express</strong>：Express是第一代最流行的web框架，它对Node.js的http进行了封装 但是它是&#39;基于ES5&#39;的语法，内部实现异步代码，只有一个方法：&#39;回调&#39;</p><p><strong>koa1.x</strong>：基于ES6开发，使用generator实现异步，generator实现异步比回调简单不少，但generator的本意并不是异步</p><p><strong>koa2.x</strong>：基于ES7开发：koa2.x完全使用Promise并配合async实现异步</p><p>所以学习Koa需要ES6和ES7的知识</p><h2 id="express、koa1-x、koa2-x区别" tabindex="-1">Express、Koa1.x、Koa2.x区别 <a class="header-anchor" href="#express、koa1-x、koa2-x区别" aria-label="Permalink to &quot;Express、Koa1.x、Koa2.x区别&quot;">​</a></h2><h3 id="最大的区别就是内部实现异步的方式不同" tabindex="-1">最大的区别就是内部实现异步的方式不同 <a class="header-anchor" href="#最大的区别就是内部实现异步的方式不同" aria-label="Permalink to &quot;最大的区别就是内部实现异步的方式不同&quot;">​</a></h3><ul><li><strong>Express</strong>使用回调函数实现异步, 容易出现回调地狱问题, 但是语法更老兼容性更好</li><li><strong>Koa1.x</strong>使用generator实现异步, 解决了回调地域问题, 但是generator的本意并不是异步</li><li><strong>Koa2.x</strong>使用Promise并配合async来实现异步, 解决了回调地域问题, 但是语法太新兼容性不好</li></ul><h3 id="第二大的区别就是重量级不同" tabindex="-1">第二大的区别就是重量级不同 <a class="header-anchor" href="#第二大的区别就是重量级不同" aria-label="Permalink to &quot;第二大的区别就是重量级不同&quot;">​</a></h3><ul><li>Express中内置了很多封装好的功能，而Koa中将这些功能都封装到了独立的模块中，想要使用这些功能必须先安装对应的模块才能使用，所以Koa比Express更轻量级</li></ul><h2 id="使用-babel-实现-async-方法" tabindex="-1">使用 Babel 实现 Async 方法 <a class="header-anchor" href="#使用-babel-实现-async-方法" aria-label="Permalink to &quot;使用 Babel 实现 Async 方法&quot;">​</a></h2><p>要在 node &lt; 7.6 版本的 Koa 中使用 <code>async</code> 方法, 我们推荐使用 <a href="https://www.babeljs.cn/docs/usage/babel-register/" target="_blank" rel="noreferrer">babel&#39;s require hook</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;babel-register&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 应用的其余 require 需要被放到 hook 后面</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./app&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>要解析和编译 async 方法, 你至少应该有 <a href="https://www.babeljs.cn/docs/plugins/transform-async-to-generator/" target="_blank" rel="noreferrer">transform-async-to-generator</a> 或 <a href="https://www.babeljs.cn/docs/plugins/transform-async-to-module-method/" target="_blank" rel="noreferrer">transform-async-to-module-method</a> 插件.</p><p>例如, 在你的 <code>.babelrc</code> 文件中, 你应该有:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;plugins&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;transform-async-to-generator&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>你也可以用 <a href="https://www.babeljs.cn/docs/plugins/preset-env/" target="_blank" rel="noreferrer">env preset</a> 的 target 参数 <code>&quot;node&quot;: &quot;current&quot;</code> 替代.</p><h2 id="前置知识promise—async-await" tabindex="-1">前置知识promise—async+await <a class="header-anchor" href="#前置知识promise—async-await" aria-label="Permalink to &quot;前置知识promise—async+await&quot;">​</a></h2><h3 id="koa的中间件next" tabindex="-1">Koa的中间件next() <a class="header-anchor" href="#koa的中间件next" aria-label="Permalink to &quot;Koa的中间件next()&quot;">​</a></h3><ul><li><a href="https://juejin.cn/post/7012031464237694983" target="_blank" rel="noreferrer">【Node】深入浅出 Koa 的洋葱模型 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7262158134323560508" target="_blank" rel="noreferrer">三言两语说透koa的洋葱模型 - 掘金 (juejin.cn)</a></li></ul><p>Koa 的中间件是通过 Async/Await 实现的，中间件执行顺序是“洋葱圈”模型。</p><p>每一个中间件就相当于洋葱的一层，请求从最外层进去，然后从最里层出来，每个中间件都会执行两次。</p><p>next() 的作用是将控制权交给下一个中间件，当一个中间件调用 next() 后，会暂停当前中间件的执行，进入下一个中间件，直到下一个中间件不再执行 next() 时沿路返回，依次将控制权交给上一个中间件。</p><p>例如，以下代码定义了三个中间件 one、two、three：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> one</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&gt;&gt; one&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">  next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&lt;&lt; one&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> two</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&gt;&gt; two&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">  next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&lt;&lt; two&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> three</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&gt;&gt; three&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">  next</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&lt;&lt; three&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">one</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">two</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">three</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>当请求到达时，中间件的执行顺序是：</p><ul><li>one 中间件打印 <code>&gt;&gt; one</code>，然后调用 next()，进入 two 中间件。</li><li>two 中间件打印 <code>&gt;&gt; two</code>，然后调用 next()，进入 three 中间件。</li><li>three 中间件打印 <code>&gt;&gt; three</code>，然后调用 next()，但是没有下一个中间件了，所以返回 three 中间件。</li><li>three 中间件打印 <code>&lt;&lt; three</code>，然后结束，返回 two 中间件。</li><li>two 中间件打印 <code>&lt;&lt; two</code>，然后结束，返回 one 中间件。</li><li>one 中间件打印 <code>&lt;&lt; one</code>，然后结束，响应请求。</li></ul><p>所以，最终的输出结果是：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&gt;&gt; one</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;&gt; two</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;&gt; three</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;&lt; </span><span style="color:#ABB2BF;">three</span></span>
<span class="line"><span style="color:#98C379;">&lt;&lt; two</span></span>
<span class="line"><span style="color:#98C379;">&lt;&lt; one</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果 three 中间件不调用 next()，那么它就是最后一个执行的中间件，不会再返回上一层，所以输出结果是：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&gt;&gt; one</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;&gt; two</span></span>
<span class="line"><span style="color:#ABB2BF;">&gt;&gt; three</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="迭代器和生成器函数" tabindex="-1">迭代器和生成器函数 <a class="header-anchor" href="#迭代器和生成器函数" aria-label="Permalink to &quot;迭代器和生成器函数&quot;">​</a></h3><h3 id="co-库执行-promise-和-generator-function" tabindex="-1">co 库执行 promise 和 generator function <a class="header-anchor" href="#co-库执行-promise-和-generator-function" aria-label="Permalink to &quot;co 库执行 promise 和 generator function&quot;">​</a></h3><p>co库：<a href="https://www.npmjs.com/package/co" target="_blank" rel="noreferrer">co - npm (npmjs.com)</a></p><h3 id="箭头函数-arrow-function" tabindex="-1">箭头函数 arrow function <a class="header-anchor" href="#箭头函数-arrow-function" aria-label="Permalink to &quot;箭头函数 arrow function&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> arrow</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">param</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> arrow</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> param</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> arrow</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> param</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">param</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="异步函数-async-function-统一世界" tabindex="-1">异步函数 async function 统一世界 <a class="header-anchor" href="#异步函数-async-function-统一世界" aria-label="Permalink to &quot;异步函数 async function 统一世界&quot;">​</a></h3><h3 id="借助-babel-编译-import-与-export" tabindex="-1">借助 babel 编译 import 与 export <a class="header-anchor" href="#借助-babel-编译-import-与-export" aria-label="Permalink to &quot;借助 babel 编译 import 与 export&quot;">​</a></h3><p><strong>Node 8版本不支持import 与 export语法</strong></p><h4 id="解决方法" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h4><p>1.安装babel和插件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> babel-cli</span><span style="color:#98C379;"> babel-preset-env</span><span style="color:#D19A66;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.项目新增配置文件<code>.babelrc</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;presets&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        [</span></span>
<span class="line"><span style="color:#98C379;">            &quot;env&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span></span>
<span class="line"><span style="color:#E06C75;">                &quot;targets&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">                    &quot;node&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;current&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        ]</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>3.在package.json的&quot;script&quot;运行命令配置</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&quot;dev&quot;: &quot;nodemon -w src -exec \\&quot;babel-node src --presets env\\&quot;&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>4.在js使用</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>import { writeFileSync as wfs } from &#39;fs&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="export使用" tabindex="-1">export使用 <a class="header-anchor" href="#export使用" aria-label="Permalink to &quot;export使用&quot;">​</a></h5><p>export文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="noreferrer">export - JavaScript | MDN (mozilla.org)</a></p><h3 id="生产环境使用-babel-支持-es6-7" tabindex="-1">生产环境使用 babel 支持 es6-7 <a class="header-anchor" href="#生产环境使用-babel-支持-es6-7" aria-label="Permalink to &quot;生产环境使用 babel 支持 es6-7&quot;">​</a></h3><p>1.在package.json的&quot;script&quot;打包构建命令配置，安装rimraf 依赖包，<code>rimraf dist</code> 打包前删除目录</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;build&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;rimraf dist &amp;&amp; babel src -s -D -d dist --presets env&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.运行编译命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行打包构建编译后会在生成dist目录</p>`,56)]))}const u=a(o,[["render",p]]);export{B as __pageData,u as default};
