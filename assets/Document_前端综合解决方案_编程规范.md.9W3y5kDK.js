import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/image-20240221161309074.B0BUzDBW.png",o="/FrontEndLearnNotes/assets/image-20240221161840415.C1cGQpS6.png",t="/FrontEndLearnNotes/assets/image-20210904185336318-1708445224395-7.BKi1L_tc.png",c="/FrontEndLearnNotes/assets/image-20210904195026475.DKz-1uUA.png",r="/FrontEndLearnNotes/assets/image-20210904200638072.BD7zzEqm.png",i="/FrontEndLearnNotes/assets/image-20210904200738067-1708445149848-3.CHTfBfOn.png",d="/FrontEndLearnNotes/assets/image-20240221200247506.WwFX-35U.png",y="/FrontEndLearnNotes/assets/image-20240221200501367.NPnfyx39.png",u="/FrontEndLearnNotes/assets/image-20240221200559796.CMFZI319.png",b="/FrontEndLearnNotes/assets/image-20210904201057594-1708445036771-1.C2vZSwbz.png",m="/FrontEndLearnNotes/assets/image-20210904203051754-1708445446790-10.A6Ihh6Gn.png",B="/FrontEndLearnNotes/assets/image-20210904205519762-1708445464346-12.gsIX33Kk.png",h="/FrontEndLearnNotes/assets/image-20210710121456416.DVoElC_A.png",g="/FrontEndLearnNotes/assets/image-20240221010133051.DseDssY5.png",C="/FrontEndLearnNotes/assets/image-20240221010203924.BJ2t9xzr.png",k="/FrontEndLearnNotes/assets/image-20240220225609127.lSaIlNLh.png",F="/FrontEndLearnNotes/assets/image-20240220235218703.DnWuZABy.png",A="/FrontEndLearnNotes/assets/image-20240220230232250.BZQ5vkBf.png",D=JSON.parse('{"title":"编码规范：代码检测工具+代码格式化+Git 提交规范","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端综合解决方案/编程规范.md","filePath":"Document/前端综合解决方案/编程规范.md","lastUpdated":1750954157000}'),v={name:"Document/前端综合解决方案/编程规范.md"};function E(q,s,f,x,j,w){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="编码规范-代码检测工具-代码格式化-git-提交规范" tabindex="-1">编码规范：代码检测工具+代码格式化+Git 提交规范 <a class="header-anchor" href="#编码规范-代码检测工具-代码格式化-git-提交规范" aria-label="Permalink to &quot;编码规范：代码检测工具+代码格式化+Git 提交规范&quot;">​</a></h1><h2 id="vue3-项目创建的配置-eslint-代码检测工具-prettier-代码格式化工具" tabindex="-1">Vue3 项目创建的配置：eslint：代码检测工具 + prettier：代码格式化工具 <a class="header-anchor" href="#vue3-项目创建的配置-eslint-代码检测工具-prettier-代码格式化工具" aria-label="Permalink to &quot;Vue3 项目创建的配置：eslint：代码检测工具 + prettier：代码格式化工具&quot;">​</a></h2><p>vue3 官方创建 vue 项目命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> create</span><span style="color:#98C379;"> vue@latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>根据交互式选择构建项目</p><p><img src="'+e+'" alt="image-20240221161309074"></p><p>至此，集成了 eslint+prettier 的 vue3 项目模版创建完成。</p><h3 id="eslint-代码检测工具" tabindex="-1">eslint：代码检测工具 <a class="header-anchor" href="#eslint-代码检测工具" aria-label="Permalink to &quot;eslint：代码检测工具&quot;">​</a></h3><ul><li>eslint 官网：<a href="https://eslint.org/" target="_blank" rel="noreferrer">Find and fix problems in your JavaScript code - ESLint - Pluggable JavaScript Linter</a></li><li>npm：<a href="https://www.npmjs.com/package/eslint" target="_blank" rel="noreferrer">eslint - npm (npmjs.com)</a></li></ul><p><code>ESLint</code> 是 <code>2013年6月</code> 创建的一个开源项目，它的目标非常简单，只有一个，那就是 <strong>提供一个插件化的 <code>javascript</code> 代码检测工具</strong> ，说白了就是做 <strong>代码格式检测使用的</strong></p><p>打开项目，在当前的项目中，包含一个 <code>.eslintrc.cjs</code> 文件，这个文件就是 <code>eslint</code> 的配置文件。</p><p><img src="'+o+`" alt="image-20240221161840415"></p><p>接下来我们就在该规则之下，看一看 <code>ESLint</code> 它的一些配置都有什么？</p><p>打开项目中的 <code>.eslintrc.cjs</code> 文件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* eslint-env node */</span></span>
<span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;@rushstack/eslint-patch/modern-module-resolution&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 文档：https://eslint.bootcss.com/docs/user-guide/configuring</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 表示当前目录即为根目录，ESLint 规则将被限制到该目录下</span></span>
<span class="line"><span style="color:#E06C75;">	root</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	extends</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">		&quot;plugin:vue/vue3-essential&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;eslint:recommended&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;@vue/eslint-config-typescript&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;@vue/eslint-config-prettier/skip-formatting&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 解析器</span></span>
<span class="line"><span style="color:#E06C75;">	parserOptions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		ecmaVersion</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;latest&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		parser</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;@babel/eslint-parser&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 需要修改的启用规则及其各自的错误级别</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * 错误级别分为三种：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * &quot;off&quot; 或 0 - 关闭规则</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * &quot;warn&quot; 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * &quot;error&quot; 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#E06C75;">	rules</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#98C379;">		&quot;no-console&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;production&quot;</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;warn&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;off&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">		&quot;no-debugger&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;production&quot;</span><span style="color:#C678DD;"> ?</span><span style="color:#98C379;"> &quot;warn&quot;</span><span style="color:#C678DD;"> :</span><span style="color:#98C379;"> &quot;off&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>那么到这里咱们已经大致的了解了<code>.eslintrc.cjs</code> 文件，基于 <code>ESLint</code> 如果我们出现不符合规范的代码格式时，那么就会得到一个对应的错误。</p><p>比如：</p><blockquote><p>我们可以把 <code>Home.vue</code> 中的 <code>name</code> 属性值，由单引号改为双引号</p></blockquote><p>此时，只要我们一保存代码，那么就会得到一个对应的错误</p><p><img src="`+t+`" alt="image-20210904185336318"></p><p>这个错误表示：</p><ol><li>此时我们触发了一个 《错误级别的错误》</li><li>触发该错误的位置是 在 <code>Home.vue</code> 的第 13 行 第九列 中</li><li>错误描述为：字符串必须使用单引号</li><li>错误规则为：<code>quotes</code></li></ol><p>那么想要解决这个错误，通常情况下我们有两种方式：</p><ol><li>按照 <code>ESLint</code> 的要求修改代码</li><li>修改 <code>ESLint</code> 的验证规则</li></ol><p><strong>按照 <code>ESLint</code> 的要求修改代码：</strong></p><blockquote><p>在 <code>Home.vue</code> 的第 13 行中把双引号改为单引号</p></blockquote><p><strong>修改 <code>ESLint</code> 的验证规则：</strong></p><ol><li><p>在 <code>.eslintrc.cjs</code> 文件中，新增一条验证规则</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;quotes&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;error&quot;</span><span style="color:#7F848E;font-style:italic;"> // 默认</span></span>
<span class="line"><span style="color:#98C379;">&quot;quotes&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;warn&quot;</span><span style="color:#7F848E;font-style:italic;"> // 修改为警告</span></span>
<span class="line"><span style="color:#98C379;">&quot;quotes&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;off&quot;</span><span style="color:#7F848E;font-style:italic;"> // 修改不校验</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><p>一个团队中，人员的水平高低不齐，大量的 <code>ESLint</code> 规则校验，会让很多的开发者头疼不已，从而大大影响了项目的开发进度。</p><p>试想一下，在你去完成项目代码的同时，还需要时时刻刻注意代码的格式问题，这将是一件多么痛苦的事情！</p><p>那么有没有什么办法，既可以保证 <code>ESLint</code> 规则校验，又可以解决严苛的格式规则导致的影响项目进度的问题呢？</p><p>欲知后事如何，请看下一节《<code>Prettier</code> ，：代码格式化工具，让你的代码变得更漂亮！》</p><h3 id="prettier-代码格式化工具" tabindex="-1">prettier：代码格式化工具 <a class="header-anchor" href="#prettier-代码格式化工具" aria-label="Permalink to &quot;prettier：代码格式化工具&quot;">​</a></h3><ul><li>prettier 官网：<a href="https://prettier.io/docs/en/install.html" target="_blank" rel="noreferrer">Install · Prettier</a></li><li>Prettier 中文网：<a href="https://www.prettier.cn/" target="_blank" rel="noreferrer">Prettier 中文网 · Prettier 是一个“有态度”的代码格式化工具</a></li></ul><p><strong><code>prettier</code> 是什么？</strong></p><ol><li>一个代码格式化工具</li><li>开箱即用</li><li>可以直接集成到 <code>VSCode</code> 之中</li><li>在保存时，让代码直接符合 <code>ESLint</code> 标准（需要通过一些简单配置）</li></ol><p>那么这些简单配置具体指的是什么呢？</p><h3 id="eslint-与-prettier-配合解决代码格式问题" tabindex="-1">ESLint 与 Prettier 配合解决代码格式问题 <a class="header-anchor" href="#eslint-与-prettier-配合解决代码格式问题" aria-label="Permalink to &quot;ESLint 与 Prettier 配合解决代码格式问题&quot;">​</a></h3><ol><li><p>在 <code>VSCode</code> 中安装 <code>prettier</code> 插件（搜索 <code>prettier</code>），这个插件可以帮助我们在配置 <code>prettier</code> 的时候获得提示</p><p><img src="`+c+`" alt="image-20210904195026475"></p></li><li><p>在项目中 <code>.prettierrc.json</code> 文件，该文件为 <code>perttier</code> 默认配置文件</p></li><li><p>在该文件中如下配置：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;$schema&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;https://json.schemastore.org/prettierrc&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;semi&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 不尾随分号</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;tabWidth&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;singleQuote&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 使用单引号</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;printWidth&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;trailingComma&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;none&quot;</span><span style="color:#7F848E;font-style:italic;"> // 多行逗号分割的语法中，最后一行不加逗号</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>打开 <code>VSCode</code> 《设置面板》</p><p><img src="`+r+'" alt="image-20210904200638072"></p></li><li><p>在设置中，搜索 <code>save</code> ，勾选 <code>Format On Save</code></p><p><img src="'+i+'" alt="image-20210904200738067"></p></li></ol><p>至此，你即可在 <strong><code>VSCode</code> 保存时，自动格式化代码！</strong></p><p><strong>但是！</strong> 你只做到这样还不够！</p><blockquote><ol><li><p>VSCode 而言，默认一个 tab 等于 4 个空格，而 ESLint 希望一个 tab 为两个空格</p><ol><li>VSCode 设置里面，Tab Size 改成 2，这样就能与 ESLint 同步 <img src="'+d+'" alt="image-20240221200247506"></li></ol></li><li><p>ESLint 和 prettier 之间的冲突问题</p></li></ol><p>代码中，右键 <code>使用...格式化文档</code> 配置默认格式化文档程序，选择 prettier</p><p><img src="'+y+'" alt="image-20240221200501367"></p><p><img src="'+u+'" alt="image-20240221200559796"></p></blockquote><p>我们尝试在 <code>Home.vue</code> 中写入一个 <code>created</code> 方法，写入完成之后，打开我们的控制台我们会发现，此时代码抛出了一个 <code>ESLint</code> 的错误</p><p><img src="'+b+'" alt="image-20210904201057594"></p><p>这个错误的意思是说：<strong><code>created</code> 这个方法名和后面的小括号之间，应该有一个空格！</strong></p><p>但是当我们加入了这个空格之后，只要一保存代码，就会发现 <code>prettier</code> 会自动帮助我们去除掉这个空格。</p><p>那么此时的这个问题就是 <code>prettier</code> 和 <code>ESLint</code> 的冲突问题。</p><p>针对于这个问题我们想要解决也非常简单：</p><ol><li><p>打开 <code>.eslintrc.cjs</code> 配置文件</p></li><li><p>在 <code>rules</code> 规则下，新增一条规则</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&#39;space-before-function-paren&#39;: &#39;off&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>该规则表示关闭《方法名后增加空格》的规则</p></li><li><p>重启项目</p></li></ol><p>至此我们整个的 <code>perttier</code> 和 <code>ESLint</code> 的配合使用就算是全部完成了。</p><p>在之后我们写代码的过程中，只需要保存代码，那么 <code>perttier</code> 就会帮助我们自动格式化代码，使其符合 <code>ESLint</code> 的校验规则。而无需我们手动进行更改了。</p><h2 id="git-约定式提交规范" tabindex="-1">Git 约定式提交规范 <a class="header-anchor" href="#git-约定式提交规范" aria-label="Permalink to &quot;Git 约定式提交规范&quot;">​</a></h2><p>在现在的项目开发中，通常情况下，我们都会通过 <code>git</code> 来管理项目。只要通过 <code>git</code> 来管理项目，那么就必然会遇到使用 <code>git</code> 提交代码的场景</p><p>当我们执行 <code>git commit -m &quot;描述信息&quot;</code> 的时候，我们知道此时必须添加一个描述信息。但是中华文化博大精深，不同的人去填写描述信息的时候，都会根据自己的理解来进行描述。</p><p>而很多人的描述 “天马行空” ，这样就会导致别人在看你的提交记录时，看不懂你说的什么意思？不知道你当前的这次提交到底做了什么事情？会不会存在潜在的风险？</p><p>比如说，我们来看这几条提交记录：</p><p><img src="'+m+`" alt="image-20210904203051754"></p><p>你能够想象得到它们经历了什么吗？</p><p>所以 <strong><code>git</code> 提交规范</strong> 势在必行。</p><p>对于 <strong><code>git</code> 提交规范</strong> 来说，不同的团队可能会有不同的标准，那么咱们今天就以目前使用较多的 <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines" target="_blank" rel="noreferrer">Angular 团队规范</a> 延伸出的 <a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noreferrer">Conventional Commits specification（约定式提交）</a> 为例，来为大家详解 <strong><code>git</code> 提交规范</strong></p><p>约定式提交规范要求如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">&gt;[optional scope]: &lt;</span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[optional body]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[optional footer(s)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">--------  翻译 -------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">类型</span><span style="color:#ABB2BF;">&gt;[可选 范围]: &lt;</span><span style="color:#E5C07B;">描述</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[可选 正文]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[可选 脚注]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>其中 <code>&lt;type&gt;</code> 类型，必须是一个可选的值，比如：</p><ol><li>新功能：<code>feat</code></li><li>修复：<code>fix</code></li><li>文档变更：<code>docs</code></li><li>....</li></ol><p>也就是说，如果要按照 <strong>约定式提交规范</strong> 来去做的化，那么你的一次提交描述应该式这个样子的：</p><p><img src="`+B+`" alt="image-20210904205519762"></p><h3 id="git-hooks" tabindex="-1">Git Hooks <a class="header-anchor" href="#git-hooks" aria-label="Permalink to &quot;Git Hooks&quot;">​</a></h3><p>类似于前端框架中的生命周期钩子，git 在某些特定事件发生前或后也会有某些执行特定功能的钩子，githooks 就是在 git 执行特定事件（如 commit、push、receive 等）时触发运行的脚本（git 钩子 || git 回调方法）。</p><p>也就是：<strong><code>git</code> 在执行某个事件之前或之后进行一些其他额外的操作</strong></p><p>而我们所期望的 <strong>阻止不合规的提交消息</strong>，那么就需要使用到 <code>hooks</code> 的钩子函数。</p><p>githooks 保存在 .git 文件夹中</p><p>具体钩子如下表所示：</p><table tabindex="0"><thead><tr><th>git hook</th><th>执行调用时机</th><th>说明</th></tr></thead><tbody><tr><td>applypatch-msg</td><td>git am 执行前</td><td>默认情况下，如果 commit-msg 启用的话，applpatch-msg 钩子在启用时会运行 commit-msg 钩子</td></tr><tr><td>pre-applypatc</td><td>git am 执行前</td><td>默认的 pre-applypatch 钩子在启用时运行 pre-commit 钩子（如果后者已启用）</td></tr><tr><td>post-applypatch</td><td>git am 执行后</td><td>这个钩子主要用于通知，不能影响 git-am 的结果</td></tr><tr><td><strong>pre-commit</strong></td><td>git commit 执行前</td><td>可以使用 git commit --no verify 命令绕过该钩子</td></tr><tr><td>pre-merge-commit</td><td>git merge 执行前</td><td>可以使用 git merge --no verify 命令绕过该钩子</td></tr><tr><td>prepare-commit-msg</td><td>git commit 执行之后，编辑器打开之前</td><td></td></tr><tr><td><strong>commit-msg</strong></td><td>git commit 执行前</td><td>可以使用 git commit --no verify 命令绕过该钩子</td></tr><tr><td>post-commit</td><td>git commit 执行后</td><td>不影响 git commit 的结果</td></tr><tr><td>pre-rebase</td><td>git rebase 执行前</td><td></td></tr><tr><td>post-checkout</td><td>git checkout 或 git switch 执行后</td><td>如果不使用 --no-checkout 参数，则在 git clone 之后也会执行</td></tr><tr><td>post-merge</td><td>git merge 执行后</td><td>在执行 git pull 时也会被调用</td></tr><tr><td>pre-push</td><td>git push 执行前</td><td></td></tr><tr><td>pre-receive</td><td>git receive pack 执行前</td><td></td></tr><tr><td>update</td><td></td><td></td></tr><tr><td>proc-receive</td><td><code>git-receive-pack</code>执行后</td><td>不影响<code>git-receive-pack</code>的结果</td></tr><tr><td>post-receive</td><td>git receive pack 执行前</td><td>不影响 git receive pack 的执行结果</td></tr><tr><td>post-update</td><td>当 <code>git-receive-pack</code>对 <code>git push</code> 作出反应并更新仓库中的引用时</td><td></td></tr><tr><td>reference-transaction</td><td></td><td></td></tr><tr><td>push-to-checkout</td><td>当 git receive pack 对 git push 作出反应并更新仓库中的引用时，以及当推送试图更新当前被签出的分支且 receive.denyCurrentBranch 配置被 updateInstead 时</td><td></td></tr><tr><td>pre-auto-gc</td><td>git gc --auto 执行前</td><td></td></tr><tr><td>post-rewrite</td><td>执行 git commit --amend 或 git rebase 时</td><td></td></tr><tr><td>sendemail-validate</td><td>git send-email 执行前</td><td></td></tr><tr><td>fsmonitor-watchman</td><td>配置 core.fsmonitor 被设置为.git/hooks/fsmonitor-watchman 或.git/hooks/fsmonitor-watchmanv2 时</td><td></td></tr><tr><td>p4-changelist</td><td>git-p4 submit 执行并编辑完 changelist message 之后</td><td>可以使用 git-p4 submit --no-verify 绕过该钩子</td></tr><tr><td>p4-prepare-changelist</td><td>git-p4 submit 执行后，编辑器启动前</td><td>可以使用 git-p4 submit --no-verify 绕过该钩子</td></tr><tr><td>p4-post-changelist</td><td>git-p4 submit 执行后</td><td></td></tr><tr><td>p4-pre-submit</td><td>git-p4 submit 执行前</td><td>可以使用 git-p4 submit --no-verify 绕过该钩子</td></tr><tr><td>post-index-change</td><td>索引被写入 read-cache.c do_write_locked_index 后</td><td></td></tr></tbody></table><p>PS：详细的 <code>HOOKS介绍</code> 可点击 <a href="https://git-scm.com/docs/githooks" target="_blank" rel="noreferrer">这里</a> 查看</p><p>整体的 <code>hooks</code> 非常多，当时我们其中用的比较多的其实只有两个：</p><table tabindex="0"><thead><tr><th style="text-align:left;">Git Hook</th><th>调用时机</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>pre-commit</strong></td><td><code>git commit</code>执行前<br>它不接受任何参数，并且在获取提交日志消息并进行提交之前被调用。脚本<code>git commit</code>以非零状态退出会导致命令在创建提交之前中止。</td><td>可以用<code>git commit --no-verify</code>绕过</td></tr><tr><td style="text-align:left;"><strong>commit-msg</strong></td><td><code>git commit</code>执行前<br>可用于将消息规范化为某种项目标准格式。<br>还可用于在检查消息文件后拒绝提交。</td><td>可以用<code>git commit --no-verify</code>绕过</td></tr><tr><td style="text-align:left;">pre-push</td><td>git push 执行前</td><td></td></tr></tbody></table><p>简单来说这两个钩子：</p><ol><li><code>commit-msg</code>：可以用来规范化标准格式，并且可以按需指定是否要拒绝本次提交</li><li><code>pre-commit</code>：会在提交前被调用，并且可以按需指定是否要拒绝本次提交</li></ol><p>而我们接下来要做的关键，就在这两个钩子上面。</p><h2 id="husky-库介绍" tabindex="-1">husky 库介绍 <a class="header-anchor" href="#husky-库介绍" aria-label="Permalink to &quot;husky 库介绍&quot;">​</a></h2><p>husky 是一个用来管理 git 钩子的插件，它可以让您在提交或推送代码时执行一些自定义的操作，例如检查代码风格、运行测试等。</p><p>使用 git 的<code>commit</code>或者<code>push</code>的时候，可以使用它来对<code>commit</code>、<code>run</code>、<code>test</code>、<code>lint code</code>等进行 lint 处理。<code>Husky</code> 支持所有的 Git hooks。</p><ul><li>husky 的 npm：<a href="https://www.npmjs.com/package/husky" target="_blank" rel="noreferrer">husky - npm (npmjs.com)</a></li><li>husky 的 github 开源地址：<a href="https://github.com/typicode/husky" target="_blank" rel="noreferrer">typicode/husky: Git hooks made easy 🐶 woof! (github.com)</a></li><li><strong>husky 官网文档</strong>：<a href="https://typicode.github.io/husky/" target="_blank" rel="noreferrer">Husky (typicode.github.io)</a></li></ul><p>——————————————————————————————————</p><h2 id="husky-版本功能更新说明" tabindex="-1">husky 版本功能更新说明 <a class="header-anchor" href="#husky-版本功能更新说明" aria-label="Permalink to &quot;husky 版本功能更新说明&quot;">​</a></h2><p><a href="https://www.npmjs.com/package/husky" target="_blank" rel="noreferrer">husky 已经更新到了 9.0 版本，它于 2021 年 7 月 1 日发布了 7.0.0 版本</a>。这个版本主要是修复了一些 bug 和细节，没有太大的变化。</p><p>可以在 <a href="https://github.com/typicode/husky/releases" target="_blank" rel="noreferrer">husky 的发布页面</a> 中查看 husky 各个版本的更新内容和说明。</p><p>截止 2024-02-20，husky 目前的最新版本是 v9.0.11，它与之前的版本有一些不同和改进，主要包括：</p><ul><li>husky v9 改变了许可证，它使用了 MIT 许可证，这意味着 husky 可以免费用于商业或非商业的项目。</li><li>husky v9 优化了 husky init 命令，它可以自动检测您的项目使用的包管理器，并使用相应的命令来安装 husky。</li><li>husky v9 修复了一些 bug 和细节，例如支持了 Windows 上的 PowerShell 7，以及在 husky install 命令中添加了 --skip-validate 选项。</li></ul><p>husky v8 之前的版本也有一些重要的更新，主要包括：</p><ul><li>husky v8 简化了安装和配置的过程，您只需要运行 <code>npm install husky --save-dev</code> 和 <code>npx husky-init</code> 命令，就可以在您的项目中初始化 husky，并生成一些示例的钩子。</li></ul><p>husky v7 版本新特性：</p><ul><li>husky v7 使用了新的许可证，即 ISC 许可证，它是一个更简洁的 MIT 许可证。</li><li>husky v7 支持了 Yarn 2 和 pnpm，它可以自动检测您的项目使用的包管理器，并使用相应的命令来运行钩子。</li><li>husky v7 简化了安装和配置的过程，您只需要运行 <code>npm install husky --save-dev</code> 和 <code>npx husky-init</code> 命令，就可以在您的项目中初始化 husky，并生成一些示例的钩子。</li><li>husky v7 减少了依赖的数量和包的大小，它只依赖了一个名为 run-node 的包，用来在不同的平台上运行 node。</li><li>husky v7 改变了钩子的存放位置和格式，它将钩子文件放在了 <code>.husky</code> 目录下，而不是 <code>.git/hooks</code> 目录下，这样可以避免一些权限问题。它也将钩子文件改为了 shell 脚本，而不是 JSON 文件，这样可以提供更多的灵活性。</li></ul><p>husky v7 之前的版本也有一些重要的更新，主要包括：</p><ul><li>husky v6 引入了自动安装的功能，它可以在您的 <code>package.json</code> 文件中添加一个 <code>prepare</code> 脚本，用来在安装依赖或发布包时自动安装 husky。</li><li>husky v5 重新设计了 husky 的核心，它使用了一个名为 <code>husky.sh</code> 的脚本来管理所有的钩子，这样可以提高性能和安全性。 <ul><li>在 2021 年 1 月 27 日，husky 迎来了 v5 的大版本升级，配置方式较上一版本有了比较大的变化。如果在 27 日之后，再按照原来的套路配置 husky 和 lint-staged，结果将是钩子校验无法生效。</li></ul></li><li>husky v4 增加了对 Yarn 和 pnpm 的支持，它可以在你的 <code>package.json</code> 文件中添加一个 <code>husky</code> 字段，用来配置不同的钩子。 <ul><li>以前的老版本的项目主要用的版本 4，之后版本 5 有了比较大的更新</li></ul></li><li>husky v3 修复了一些 bug，并优化了一些细节，例如支持了 <code>HUSKY_DEBUG</code> 环境变量，用来打印一些调试信息。</li><li>husky v2 增加了对 Git 工作树的支持，它可以在您的项目的子目录中使用 husky。</li><li>husky v1 增加了对 Git 钩子的验证，它可以检查您的钩子是否被 husky 管理，以及是否有冲突的钩子。</li><li>husky v0.14 引入了 <code>.huskyrc</code> 文件，用来存放 husky 的配置，这样可以避免污染 <code>package.json</code> 文件。</li></ul><h3 id="husky-版本使用更新" tabindex="-1">husky 版本使用更新 <a class="header-anchor" href="#husky-版本使用更新" aria-label="Permalink to &quot;husky 版本使用更新&quot;">​</a></h3><p>从版本 4 开始，husky 的使用方法有了一些变化，主要有以下几个步骤：</p><p>主要是使用了 core.hooksPath 功能来指定 git hooks 的目录，而不是使用 package.json 中的 husky 字段。这样可以让用户只添加需要的 git hooks，而不是所有的 git hooks。具体的使用方法如下：</p><ol><li>安装 husky 作为开发依赖：<code>npm install husky --save-dev</code> 或 <code>yarn add husky -D</code></li><li>在 package.json 中添加 prepare 脚本，用于在安装后自动启用钩子：<code>&quot;prepare&quot;: &quot;husky install&quot;</code></li><li>使用 husky add 命令创建你需要的 git hooks，比如 pre-commit、commit-msg 等。例如：<code>npx husky add .husky/pre-commit &quot;npm test&quot;</code> 或 <code>yarn husky add .husky/commit-msg &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</code></li><li>将创建的 git hooks 添加到 git 中：<code>git add .husky</code></li></ol><ul><li><p>husky 5：需要手动运行 <code>npx husky install</code> 来创建 .husky 目录和设置 core.hooksPath，然后使用 <code>npx husky add .husky/ &quot;&quot;</code> 来添加 git hooks，比如 <code>npx husky add .husky/pre-commit &quot;npm test&quot;</code>。husky 5 是免费的，但是需要遵守 MIT 协议。</p></li><li><p>husky 6：在 husky 5 的基础上，增加了 <code>npm set-script prepare &quot;husky install&quot;</code> 命令，可以在 package.json 中添加 prepare 脚本，用于在安装后自动启用钩子。husky 6 也是免费的，但是需要遵守 MIT 协议。</p><ul><li><p><code>v6</code>版本发布后，使用方式上有了很大的改变；可以说是它的设计发生了变化；</p></li><li><p><code>v6</code>版本已不在使用<code>.huskyrc.js</code>文件，同时也不支持在<code>package.json</code>文件中配置，而是使用了<code>.husky/</code>目录中配置的单个 git 钩子；</p></li><li><h4 id="husky-为什么放弃了传统方式的配置呢" tabindex="-1">husky 为什么放弃了传统方式的配置呢 <a class="header-anchor" href="#husky-为什么放弃了传统方式的配置呢" aria-label="Permalink to &quot;husky 为什么放弃了传统方式的配置呢&quot;">​</a></h4></li><li><p>在<code>v4</code>版本之前<code>husky</code>为了能够运行用户在<code>.huskyrc.json</code>中创建的任何钩子，它不得不将所有的钩子都安装在<code>.git/hooks</code>目录中。当触发到钩子脚本的时候，每个脚本都会先检查<code>.huskyrc.json</code>文件中是否有相应的钩子定义；这样的好处就是用户可以随意的添加、更新和删除钩子，所做的更改会自动的生效；缺点就是，即使没有任何东西要运行，该钩子节点也会被启动；</p><p>在当时<code>husky</code>有过这样的设想，就是只启动在<code>.huskyrc.json</code>文件中配置的钩子，但随后的问题就又出现了，如果改动了<code>.huskyrc.json</code>文件中的钩子定义，<code>husky</code>将不会自动工作，因为在<code>.git/hooks</code>目录里还没有启动相应的钩子脚本，所以保证两个地方的配置同步成了一个难题；</p><p>直到 2016 年，<code>Git 2.9</code>引进了<code>core.hooksPath</code>，可以设置<code>Git hooks</code>脚本的目录，这个引进也就是新版<code>husky</code>改进的基础；</p><ul><li><code>husky install</code>命令告诉<code>Git</code>使用<code>.hooks</code>目录作为钩子脚本目录，实际上就是修改了<code>core.hooksPath</code>的值；</li><li><code>husky add</code>创建了一个独立的<code>shell</code>脚本</li></ul><p>这样也就解决了启动单一的钩子脚本和所有的配置都在一个文件目录下；但是这样也就在根目录下生成了一个<code>.hooks</code>目录，看起来不爽的话， 你也可以指定让<code>.hooks</code>放到<code>config</code>目录下；</p><p>husky 7：在 husky 6 的基础上，简化了 husky 的安装和使用，不再需要 prepare 脚本，只需要运行 <code>npm install husky -D</code> 和 <code>npx husky-init</code>，然后编辑 .husky 目录下的钩子脚本即可。husky 7 是免费的，但是需要遵守 ISC 协议。</p></li></ul></li><li><p>husky 8：在 husky 7 的基础上，增加了 husky 的配置文件 .huskyrc，可以在其中设置一些全局的选项，比如 concurrent、shell、quiet 等。husky 8 是免费的，但是需要遵守 ISC 协议。</p></li><li><p>husky 9：在 husky 8 的基础上，增加了 husky 的命令行工具 husky-cli，可以用来更方便地管理 husky 的安装、卸载、更新、添加、删除、列出、运行等操作。husky 9 是收费的，需要购买许可证才能使用。</p></li></ul><h2 id="应该使用哪个版本的-husky" tabindex="-1">应该使用哪个版本的 husky? <a class="header-anchor" href="#应该使用哪个版本的-husky" aria-label="Permalink to &quot;应该使用哪个版本的 husky?&quot;">​</a></h2><p>这个问题没有一个确定的答案，不同的版本的 husky 有不同的特点和优缺点，你应该根据你的项目需求和个人喜好来选择。一般来说，你可以考虑以下的因素：</p><ul><li>兼容性：如果你的项目需要支持较旧的 git 版本，你可能需要使用 husky 4 或以下的版本，因为 husky 5 及以上的版本需要 git 2.13.0 或更高的版本。</li><li>协议：如果你的项目需要遵守某些特定的开源协议，你可能需要注意 husky 的协议变化。husky 4 使用了 MIT 协议，husky 5 和 6 也使用了 MIT 协议，但是增加了一些限制，husky 7 和 8 使用了 ISC 协议，husky 9 需要购买许可证才能使用。</li><li>功能：如果你的项目需要一些高级的功能，比如并发执行、自定义 shell、静默模式等，你可能需要使用 husky 8 或以上的版本，因为它们提供了 husky 的配置文件 .huskyrc，可以在其中设置一些全局的选项。如果你想使用 husky-cli 来管理 husky 的操作，你需要使用 husky 9 的版本，但是你也需要付费。</li><li>简洁性：如果你的项目需要简化 husky 的安装和使用，你可能需要使用 husky 7 或以上的版本，因为它们不再需要 prepare 脚本，只需要运行 <code>npm install husky -D</code> 和 <code>npx husky-init</code>，然后编辑 .husky 目录下的钩子脚本即可。</li></ul><p>总之，你应该根据你的项目和个人的情况，权衡 husky 的各个版本的优缺点，选择一个适合你的版本。你也可以参考 husky 的官方文档和其他用户的经验，来帮助你做出决定。</p><h3 id="版本-6-的具体使用方法" tabindex="-1">版本 6 的具体使用方法 <a class="header-anchor" href="#版本-6-的具体使用方法" aria-label="Permalink to &quot;版本 6 的具体使用方法&quot;">​</a></h3><h4 id="自定配置-推荐" tabindex="-1">自定配置（推荐） <a class="header-anchor" href="#自定配置-推荐" aria-label="Permalink to &quot;自定配置（推荐）&quot;">​</a></h4><p><code>husky-init</code>是一个一次性命令，可以在项目中快速添加<code>husky</code>配置；</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">npx</span><span style="color:#E06C75;"> husky</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">init</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E06C75;"> npm</span><span style="color:#E06C75;"> isntall</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上边命令会设置<code>husky</code>，修改<code>package.json</code>并且创建了一个可执行的<code>pre-commit</code>脚本样例，当你<code>git commit</code>命令式，默认会执行<code>npm test</code></p><p><code>hooks add</code>添加其他 hooks</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">npx</span><span style="color:#E06C75;"> hooks</span><span style="color:#E5C07B;"> add</span><span style="color:#ABB2BF;"> .</span><span style="color:#E06C75;">hooks</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">commit</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">msg</span><span style="color:#98C379;"> &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="手动配置" tabindex="-1">手动配置 <a class="header-anchor" href="#手动配置" aria-label="Permalink to &quot;手动配置&quot;">​</a></h4><p>1、 安装 husky</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> husky</span><span style="color:#D19A66;"> --save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2、修改 git hooks 默认目录</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3、如果想安装后自动启用 hooks，请编辑<code>package.json</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;prepare&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;husky install&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>yarn2 不支持<code>prepare</code>，可以修改为<code>postinstall</code></p></blockquote><p>4、创建 hooks，语法：<code>husky add &lt;file&gt; [cmd]</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">npx</span><span style="color:#E06C75;"> husky</span><span style="color:#E5C07B;"> add</span><span style="color:#ABB2BF;"> .</span><span style="color:#E06C75;">husky</span><span style="color:#56B6C2;">/</span><span style="color:#E06C75;">pre</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">commit</span><span style="color:#98C379;"> &quot;npm test&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行<code>git commit -m &quot;test&quot;</code> 命令，如果<code>npm test</code>失败，将终止提交</p><p>5、卸载 husky</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">npm</span><span style="color:#E06C75;"> uninstall</span><span style="color:#E06C75;"> husky</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> config</span><span style="color:#7F848E;font-style:italic;"> --unset core.hooksPath</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="其他用法" tabindex="-1">其他用法 <a class="header-anchor" href="#其他用法" aria-label="Permalink to &quot;其他用法&quot;">​</a></h4><p>1、推荐在<code>package.json</code>中添加 husky，您可以使用<code>lerna</code> 和<code>filter</code>等工具来只运行已更改包中的脚本</p><p>(1) 添加 hooks</p><div class="language-dockerfile line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">npx husky add .husky/pre-commit </span><span style="color:#98C379;">&quot;npm run pre-commit&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>(2) 在<code>package.json</code>文件中添加<code>pre-commit</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;script&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;pre-commit&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;npm run test &amp;&amp; eslint&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>2、自定义<code>.husky</code>目录</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> .config/husky</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3、绕过钩子</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> commit</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &quot;test&quot;</span><span style="color:#D19A66;"> --no-verify</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="推荐使用-7-以后的版本" tabindex="-1">推荐使用 7 以后的版本 <a class="header-anchor" href="#推荐使用-7-以后的版本" aria-label="Permalink to &quot;推荐使用 7 以后的版本&quot;">​</a></h3><p>如果您想使用 husky 7.0 之后的版本，您可以使用以下命令来安装或更新 husky：</p><ul><li>1.在 husky 7 之前，需要手动运行 npx husky install 来设置 husky。</li><li>2.在 husky 7 之后，可以继续使用 npx husky-init，也可以使用 husky-cli 的 husky init 命令 <ul><li>husky-cli 是 husky 9 版本新增的一个命令行工具，可以用来更方便地管理 husky 的安装、卸载、更新、添加、删除、列出、运行等操作。你可以使用 <code>npx husky-cli</code> 或 <code>yarn husky-cli</code> 来运行它，或者将它安装到全局或本地。husky-cli 的使用方法和参数可以参考 <a href="https://www.npmjs.com/package/husky" target="_blank" rel="noreferrer">husky - NPM (npmjs.com)</a>。需要注意的是，husky-cli 是收费的，需要购买许可证才能使用。</li></ul></li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 推荐使用pnpm安装husky（yarn有两个版本安装方法，比较复杂，不推荐）</span></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> --save-dev</span><span style="color:#98C379;"> husky</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>以下是 husky 版本 7.0 之后的初始化命令</strong>：对应 npm、yarn、pnpm 安装的 husky 库的初始化命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky-init</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#7F848E;font-style:italic;">       # npm</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky-init</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#61AFEF;">yarn</span><span style="color:#7F848E;font-style:italic;">              # Yarn 1</span></span>
<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> dlx</span><span style="color:#98C379;"> husky-init</span><span style="color:#D19A66;"> --yarn2</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#61AFEF;">yarn</span><span style="color:#7F848E;font-style:italic;"> # Yarn 2+：Yarn 2+安装手册：https://blog.csdn.net/HHoao/article/details/127833268</span></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> dlx</span><span style="color:#98C379;"> husky-init</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> install</span><span style="color:#7F848E;font-style:italic;"> # pnpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>它将设置 husky，修改 package.json 并创建一个可以编辑的示例 pre-commit 钩子。默认情况下，commit 时它将运行 npm 测试。</p><h4 id="在-husky-的-v7-x-版本之前" tabindex="-1">在 husky 的 v7.x 版本之前 <a class="header-anchor" href="#在-husky-的-v7-x-版本之前" aria-label="Permalink to &quot;在 husky 的 v7.x 版本之前&quot;">​</a></h4><ul><li><p>在 husky 的 4.x 版本中引入的 <code>npx husky add</code> 是一个用于添加 git 钩子的命令。</p><ul><li><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/commit-msg</span><span style="color:#98C379;"> &#39;npx --no -- commitlint --edit &quot;$1&quot;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>在 husky 的 5.x 版本中，<code>npx husky add</code>这个命令被废弃了，取而代之的是 <code>husky install</code> 和 <code>husky add</code> 两个命令，它们可以让您指定 git 钩子所在的目录，而不是使用默认的 .git/hooks/</p><ul><li><p>在 husky 的 5.x 版本中，您可以使用 <code>husky install</code> 命令来指定 git 钩子的目录，然后使用 <code>husky add</code> 命令来添加您需要的钩子脚本。例如，如果您想添加一个 pre-commit 钩子，您可以运行以下命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> install</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/pre-commit</span><span style="color:#98C379;"> &quot;npm test&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul></li></ul><h4 id="在-husky-的-v7-x-版本中" tabindex="-1">在 husky 的 v7.x 版本中 <a class="header-anchor" href="#在-husky-的-v7-x-版本中" aria-label="Permalink to &quot;在 husky 的 v7.x 版本中&quot;">​</a></h4><p>可以使用相同的命令来添加钩子，但是不需要再运行 <code>husky install</code> 命令了，因为 husky 会自动安装钩子。您只需要在 package.json 中添加一个 <code>prepare</code> 脚本，如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">  &quot;scripts&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    &quot;prepare&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#98C379;"> &quot;husky install&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>或者执行命令启用钩子：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 版本7+8都可以执行</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> set-script</span><span style="color:#98C379;"> prepare</span><span style="color:#98C379;"> &quot;husky install&quot;</span></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> set-script</span><span style="color:#98C379;"> prepare</span><span style="color:#98C379;"> &quot;husky install&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样，当安装依赖时，自动执行该命令，从而 husky 会自动创建 <code>.husky</code> 目录，并将其设置为 git 钩子的目录。</p><p>这样，就不需要再手动运行 <code>husky install</code> 命令了，只需要使用 <code>husky add</code> 命令来添加钩子脚本。</p><p>可以像之前一样使用 <code>husky add</code> 命令来添加钩子脚本</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 添加一个 pre-commit 钩子</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/pre-commit</span><span style="color:#98C379;"> &quot;npm test&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 添加一个 pre-push 钩子</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/pre-push</span><span style="color:#98C379;"> &quot;npm run lint&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 创建一个commit-msg钩子：</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/commit-msg</span><span style="color:#98C379;"> &#39;yarn commitlint --edit &quot;$1&quot;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样，当安装依赖时，husky 会自动创建 <code>.husky</code> 目录，并将其设置为 git 钩子的目录。然后，可以在 .husky 目录下查看或修改钩子脚本。</p><ul><li><p>此外还有 <code>husky-init</code>命令， 执行之后可以在项目中快速的初始化一个 husky。</p></li><li><p>husky 7.x 版本及以前的版本需要在 package.json 中添加 husky 配置，而是使用 .husky 目录来存放钩子脚本。</p><ul><li><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 版本7.x以前需要配置</span></span>
<span class="line"><span style="color:#98C379;">&quot;husky&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;hooks&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;pre-commit&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lint-staged&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;commit-msg&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul></li><li><p>husky 7.x 版本及以前的版本需要在 package.json 中添加 prepare 脚本，而是自动安装钩子。</p><ul><li><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 版本8.x以前需要配置</span></span>
<span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;prepare&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;husky &amp;&amp; husky install&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul></li><li><p>husky 7.x 版本及以前的版本需要在 package.json 中添加 config。</p><ul><li><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 版本8.x以前需要配置</span></span>
<span class="line"><span style="color:#98C379;">&quot;config&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;commitizen&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;path&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node_modules/cz-customizable&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;cz-customizable&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;config&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;.cz-config.cjs&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul></li><li><p>husky 7.x 版本及以前的版本需要在 package.json 中添加 lint-staged 配置。</p><ul><li><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 版本8.x以前需要配置</span></span>
<span class="line"><span style="color:#98C379;">&quot;lint-staged&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;src/**/*.{js,jsx,ts,tsx,json,vue}&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">      &quot;eslint --fix&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">      &quot;prettier --write&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">      &quot;git add&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;*.scss&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#98C379;">      &quot;stylelint --fix&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul></li></ul><h4 id="在-husky-的-v8-x-版本中" tabindex="-1">在 husky 的 v8.x 版本中 <a class="header-anchor" href="#在-husky-的-v8-x-版本中" aria-label="Permalink to &quot;在 husky 的 v8.x 版本中&quot;">​</a></h4><p>husky 的 8.x 版本添加新钩子的方法和 7.x 版本是一样的，您只需要使用 <code>husky add</code> 命令来添加钩子脚本。例如，如果您想添加一个 pre-push 钩子，您可以运行以下命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/pre-push</span><span style="color:#98C379;"> &quot;npm run lint&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样，当安装依赖时，husky 会自动创建 <code>.husky</code> 目录，并将其设置为 git 钩子的目录。然后，您可以在 .husky 目录下查看或修改钩子脚本</p><h4 id="在-husky-的-v9-x-版本中-商业收费-不推荐使用" tabindex="-1">在 husky 的 v9.x 版本中(商业收费，不推荐使用) <a class="header-anchor" href="#在-husky-的-v9-x-版本中-商业收费-不推荐使用" aria-label="Permalink to &quot;在 husky 的 v9.x 版本中(商业收费，不推荐使用)&quot;">​</a></h4><p>husky 的作者在 9.x 版本中引入了一个新的许可证，叫做 Parity Public License。这个许可证的主要目的是为了支持开源软件的开发者，让他们能够从自己的劳动中获得收入。</p><p>具体来说，这个许可证的含义是，如果您使用 husky 的 9.x 版本，您必须遵守以下规则：</p><ul><li>如果您只是在个人项目中使用 husky，或者您的项目是开源的，并且使用了和 husky 相同的许可证，那么您可以免费使用 husky。</li><li>如果您在商业项目中使用 husky，或者您的项目是闭源的，或者您的项目使用了和 husky 不同的许可证，那么您必须向 husky 的作者支付一定的费用，或者获得他的授权。</li></ul><p><strong>在 husky 的 v9.x 版本中</strong>，运行 <code>husky install</code> 后，您可能会看到以下警告：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">install</span><span style="color:#98C379;"> command</span><span style="color:#98C379;"> is</span><span style="color:#98C379;"> deprecated</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># husky9.0版本中：husky install命令被废除</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>解决方法是将 package.json 中的 script 脚本：<code>postinstall</code> 命令 改成 <code>prepare</code>命令</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">-    </span><span style="color:#98C379;">&quot;postinstall&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;husky install&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">+    </span><span style="color:#98C379;">&quot;prepare&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;husky&quot;</span><span style="color:#ABB2BF;">,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>在 husky 的 v9.x 版本中</strong>，<code>npx husky add</code> 命令已经被废弃了，不再支持添加 git hooks 的功能，<strong>要添加另一个钩子</strong>，而是使用 echo 命令来创建钩子脚本，并将其重定向到 .husky 目录下的相应文件中。</p><p>1.<strong>取而代之的是使用 echo 命令来创建钩子脚本</strong>，并将其重定向到 .husky 目录下的相应文件中。</p><p>例如，如果您想添加一个 pre-commit 钩子，您可以运行以下命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;npm test&quot;</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">.husky/pre-commit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这样，当您安装依赖时，husky 会自动创建 <code>.husky</code> 目录，并将其设置为 git 钩子的目录。然后，您可以在 .husky 目录下查看或修改钩子脚本。</p><p>2.<strong>也可以使用 husky-cli 来管理 git hooks</strong>，或者直接在 .husky 目录下创建或编辑钩子脚本。</p><p>例如，如果你想添加 commit-msg 钩子，你可以使用以下的命令：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>npx husky-cli add commit-msg &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.<strong>或者直接在 .husky 目录下创建一个名为 <code>commit-msg</code> 的文件</strong>，内容为：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="color:#56B6C2;">.</span><span style="color:#98C379;"> “</span><span style="color:#ABB2BF;">$(</span><span style="color:#61AFEF;">dirname</span><span style="color:#98C379;"> “</span><span style="color:#E06C75;font-style:italic;">$0</span><span style="color:#98C379;">”</span><span style="color:#ABB2BF;">)</span><span style="color:#98C379;">/_/husky.sh”</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#D19A66;"> --no-install</span><span style="color:#98C379;"> commitlint</span><span style="color:#D19A66;"> --edit</span><span style="color:#98C379;"> “</span><span style="color:#E06C75;font-style:italic;">$1</span><span style="color:#98C379;">”</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="使用-husky-来规范-git-提交的格式" tabindex="-1">使用 husky 来规范 Git 提交的格式 <a class="header-anchor" href="#使用-husky-来规范-git-提交的格式" aria-label="Permalink to &quot;使用 husky 来规范 Git 提交的格式&quot;">​</a></h2><h3 id="_0-git-代码提交规范——整合安装的库" tabindex="-1">0.Git 代码提交规范——整合安装的库 <a class="header-anchor" href="#_0-git-代码提交规范——整合安装的库" aria-label="Permalink to &quot;0.Git 代码提交规范——整合安装的库&quot;">​</a></h3><p>husky 搞定 Git 代码提交规范</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> add</span><span style="color:#D19A66;"> -D</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> lint-staged</span><span style="color:#98C379;"> cz-customizable</span><span style="color:#98C379;"> @commitlint/cli</span><span style="color:#98C379;"> @commitlint/config-conventional</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># commitizen库需要全局安装</span></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> add</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> commitizen</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> commitizen</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>添加 pre-commit hook 钩子需要安装以下依赖：</p><ul><li>husky</li><li>lint-staged</li></ul><p>添加 commit-msg hook 钩子需要以下依赖：</p><ul><li>commitizen：交互式 git commit 配置库。</li><li>cz-customizable：可自定义的 commitizen 插件，它可以让你根据自己的需求来配置提交信息的格式，而不是使用预定义的格式。</li><li>@commitlint/cli</li><li>@commitlint/config-conventional</li></ul><h3 id="_1-需要先初始化-husky文件夹目录-执行命令" tabindex="-1">1.需要先初始化<code>.husky</code>文件夹目录，执行命令 <a class="header-anchor" href="#_1-需要先初始化-husky文件夹目录-执行命令" aria-label="Permalink to &quot;1.需要先初始化\`.husky\`文件夹目录，执行命令&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># husky版本7及之前版本</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> install</span></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> dlx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># husky版本8</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky-init</span></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> dlx</span><span style="color:#98C379;"> husky-init</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># husky版本9</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> init</span></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> exec</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2-自动启用-husky-命令" tabindex="-1">2.自动启用 husky 命令 <a class="header-anchor" href="#_2-自动启用-husky-命令" aria-label="Permalink to &quot;2.自动启用 husky 命令&quot;">​</a></h3><p>项目中运行命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># husky版本7和8都可以执行</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> set-script</span><span style="color:#98C379;"> prepare</span><span style="color:#98C379;"> &quot;husky install&quot;</span><span style="color:#ABB2BF;">  &amp;&amp; </span><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> prepare</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> pkg</span><span style="color:#98C379;"> set</span><span style="color:#98C379;"> scripts.prepare=&quot;husky install&quot;</span><span style="color:#ABB2BF;"> &amp;&amp; </span><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> prepare</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>会在 package.json 中添加命令（手动在 package.json 中添加这条命令也可以）</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">  &quot;prepare&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;husky install&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>执行 <code>prepare</code> 指令</p><p>执行成功，提示：<code>husky - Git hooks installed</code></p><p>之后就可以进行下面的操作</p><h3 id="_3-lint-staged-自动修复格式错误" tabindex="-1">3.lint-staged 自动修复格式错误 <a class="header-anchor" href="#_3-lint-staged-自动修复格式错误" aria-label="Permalink to &quot;3.lint-staged 自动修复格式错误&quot;">​</a></h3><ul><li>npm 文档：<a href="https://www.npmjs.com/package/lint-staged" target="_blank" rel="noreferrer">lint-staged - npm (npmjs.com)</a></li><li>开源地址：<a href="https://github.com/lint-staged/lint-staged" target="_blank" rel="noreferrer">lint-staged/lint-staged: 🚫💩 — Run linters on git staged files (github.com)</a></li></ul><p><strong>lint-staged 是一个在 git 暂存区上运行 linters 的工具。</strong></p><p>它将根据 package.json 依赖项中的代码质量工具来安装和配置 husky 和 lint-staged ，因此请确保在此之前安装（npm install --save-dev）并配置所有代码质量工具，比如 Prettier 和 ESlint。</p><p>通过 <code>pre-commit</code> 处理了 <strong>检测代码的提交规范问题，当我们进行代码提交时，会检测所有的代码格式规范</strong> 。</p><p>但是这样会存在两个问题：</p><ol><li>我们只修改了个别的文件，没有必要检测所有的文件代码格式</li><li>它只能给我们提示出对应的错误，我们还需要手动的进行代码修改</li></ol><p>那么想要处理这两个问题，就需要使用另外一个插件 <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noreferrer">lint-staged</a> ！</p><p><a href="https://github.com/okonet/lint-staged" target="_blank" rel="noreferrer">lint-staged</a> 可以让你当前的代码检查 <strong>只检查本次修改更新的代码，并在出现错误的时候，自动修复并且推送</strong></p><p>安装 lint-staged</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> lint-staged</span><span style="color:#D19A66;"> -D</span></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> lint-staged</span><span style="color:#D19A66;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">执行</span><span style="color:#E06C75;"> npx</span><span style="color:#E06C75;"> lint</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">staged</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;">help</span><span style="color:#E06C75;"> 命令可以看到相关的所有参数如下</span><span style="color:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#E06C75;">用法</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">lint</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">staged</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">Options</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#56B6C2;">  -</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">version</span><span style="color:#E06C75;">                      输出版本号</span></span>
<span class="line"><span style="color:#56B6C2;">  --</span><span style="color:#E06C75;">allow</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">empty</span><span style="color:#E06C75;">                      当任务撤消所有分阶段的更改时允许空提交</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">默认值</span><span style="color:#ABB2BF;">：</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">）</span></span>
<span class="line"><span style="color:#56B6C2;">  -</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">]                </span><span style="color:#E06C75;">配置文件的路径</span></span>
<span class="line"><span style="color:#56B6C2;">  -</span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">debug</span><span style="color:#E06C75;">                        打印其他调试信息</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">默认值</span><span style="color:#ABB2BF;">：</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">）</span></span>
<span class="line"><span style="color:#56B6C2;">  -</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">concurrent</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E06C75;">parallel</span><span style="color:#E06C75;"> tasks</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;">  要同时运行的任务数</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">或者为false则要连续运行任务</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">默认值</span><span style="color:#ABB2BF;">：</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">）</span></span>
<span class="line"><span style="color:#56B6C2;">  -</span><span style="color:#E06C75;">q</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">quiet</span><span style="color:#E06C75;">                        自己的控制台输出</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">默认值</span><span style="color:#ABB2BF;">：</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">）</span></span>
<span class="line"><span style="color:#56B6C2;">  -</span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">relative</span><span style="color:#E06C75;">                     将相对文件路径传递给任务</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">默认值</span><span style="color:#ABB2BF;">：</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">）</span></span>
<span class="line"><span style="color:#56B6C2;">  -</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">shell</span><span style="color:#E06C75;">                        跳过任务解析以更好地支持shell</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">默认值</span><span style="color:#ABB2BF;">：</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">）</span></span>
<span class="line"><span style="color:#56B6C2;">  -</span><span style="color:#E06C75;">h</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">--</span><span style="color:#E06C75;">help</span><span style="color:#E06C75;">                         输出用法信息</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li><strong>--allow-empty</strong>：使用此参数允许创建空的 git 提交。默认情况下，当 LITER 任务撤消所有阶段性的更改时，LITET 阶段将抛出一个错误，并中止提交。</li></ul><h4 id="husky-创建钩子配置" tabindex="-1">husky 创建钩子配置 <a class="header-anchor" href="#husky-创建钩子配置" aria-label="Permalink to &quot;husky 创建钩子配置&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/pre-commit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="生成的文件中写入" tabindex="-1">生成的文件中写入 <a class="header-anchor" href="#生成的文件中写入" aria-label="Permalink to &quot;生成的文件中写入&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#98C379;"> lint-staged</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="把-package-json-文件的-lint-staged-修改为" tabindex="-1">把 package.json 文件的 lint-staged 修改为 <a class="header-anchor" href="#把-package-json-文件的-lint-staged-修改为" aria-label="Permalink to &quot;把 package.json 文件的 lint-staged 修改为&quot;">​</a></h4><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;lint-staged&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">   &quot;src/**/*.{js,vue}&quot;</span><span style="color:#ABB2BF;">: [      </span><span style="color:#7F848E;font-style:italic;">//src目录下所有的js和vue文件</span></span>
<span class="line"><span style="color:#98C379;">     &quot;eslint --fix&quot;</span><span style="color:#ABB2BF;">,           </span><span style="color:#7F848E;font-style:italic;">// 自动修复</span></span>
<span class="line"><span style="color:#98C379;">     &quot;git add&quot;</span><span style="color:#7F848E;font-style:italic;">                 // 自动提交时修复</span></span>
<span class="line"><span style="color:#ABB2BF;">   ]</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_4-commitlint-config-conventional-和-commitlint-cli——校验-git-提交的描述规范库" tabindex="-1">4.@commitlint/config-conventional 和@commitlint/cli——校验 git 提交的描述规范库 <a class="header-anchor" href="#_4-commitlint-config-conventional-和-commitlint-cli——校验-git-提交的描述规范库" aria-label="Permalink to &quot;4.@commitlint/config-conventional 和@commitlint/cli——校验 git 提交的描述规范库&quot;">​</a></h3><p>npm 可以这样子选择两个包安装：<code>npm i @commitlint/{cli,config-conventional} -D</code></p><p><strong>规范 git 提交记录</strong>：commitlint 相关依赖（用来帮助我们在多人开发时，遵守 git 提交约定）</p><ul><li>以下参考<strong>官网文档</strong>得出：<a href="https://commitlint.js.org/#/" target="_blank" rel="noreferrer">commitlint - Lint commit messages</a></li></ul><p>1.<strong>执行命令自动创建 <code>commitlint.config.js</code> 文件</strong>：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#98C379;"> &quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot;</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">commitlint.config.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.<strong>或在根目录手动创建 <code>commitlint.config.js</code> 文件其内容如下所示</strong>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 规范commit日志官网配置：https://commitlint.js.org</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 继承的规则</span></span>
<span class="line"><span style="color:#E06C75;">	extends</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;@commitlint/config-conventional&quot;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 定义规则类型：https://github.com/conventional-changelog/commitlint/blob/master/docs/reference-rules.md</span></span>
<span class="line"><span style="color:#E06C75;">	rules</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 规定提交类型的大小写的。它的含义是：2：表示这是一个错误级别的规则，如果不符合，提交会被拒绝。always：表示这个规则总是生效，无论提交类型是什么。[‘lower-case’, ‘upper-case’]：表示提交类型必须是全小写或全大写，不能混合使用。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// &#39;type-case&#39;: [2, &#39;always&#39;, [&#39;lower-case&#39;, &#39;upper-case&#39;]],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// type 类型定义：为必填项，用于指定 commit 的类型，表示 git 提交的 type 必须在以下类型范围内。</span></span>
<span class="line"><span style="color:#98C379;">		&quot;type-enum&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#D19A66;">			2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">			&quot;always&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			[</span></span>
<span class="line"><span style="color:#98C379;">				&quot;feat&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 新功能 feature：增加一个新特性</span></span>
<span class="line"><span style="color:#98C379;">				&quot;fix&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 修复 bug</span></span>
<span class="line"><span style="color:#98C379;">				&quot;docs&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 文档注释：仅仅修改文档说明</span></span>
<span class="line"><span style="color:#98C379;">				&quot;style&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 代码格式(不影响代码运行的变动)：不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</span></span>
<span class="line"><span style="color:#98C379;">				&quot;refactor&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 重构(既不增加新功能，也不是修复bug)</span></span>
<span class="line"><span style="color:#98C379;">				&quot;perf&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 性能优化：更改代码以提高性能</span></span>
<span class="line"><span style="color:#98C379;">				&quot;test&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 增加测试</span></span>
<span class="line"><span style="color:#98C379;">				&quot;chore&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 构建过程或辅助工具的变动</span></span>
<span class="line"><span style="color:#98C379;">				&quot;revert&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 回退</span></span>
<span class="line"><span style="color:#98C379;">				&quot;wip&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 正在进行的工作</span></span>
<span class="line"><span style="color:#98C379;">				&quot;build&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 打包：更改构建系统和外部依赖项（如将 gulp 改为 webpack，更新某个 npm 包）</span></span>
<span class="line"><span style="color:#98C379;">				&quot;ci&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 对 CI 配置文件和脚本的更改</span></span>
<span class="line"><span style="color:#98C379;">				&quot;test&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 增加新的测试功能或更改原有的测试模块</span></span>
<span class="line"><span style="color:#ABB2BF;">			],</span></span>
<span class="line"><span style="color:#ABB2BF;">		],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// subject 大小写不做校验</span></span>
<span class="line"><span style="color:#98C379;">		&quot;subject-case&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// &#39;subject-case&#39;: [2, &#39;never&#39;, [&#39;upper-case&#39;]],</span><span style="color:#7F848E;font-style:italic;"> // 提交信息的主题不能是大写</span></span>
<span class="line"><span style="color:#98C379;">		&quot;header-max-length&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;always&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">999</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 提交信息的长度不能超过999个字符</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p><strong>注意：确保保存为 <code>UTF-8</code> 的编码格式</strong>，否则可能会出现以下错误：</p><p><img src="`+h+'" alt="image-20210710121456416"></p><h4 id="执行-commitlint-钩子命令" tabindex="-1">执行 commitlint 钩子命令： <a class="header-anchor" href="#执行-commitlint-钩子命令" aria-label="Permalink to &quot;执行 commitlint 钩子命令：&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/commit-msg</span><span style="color:#98C379;"> &#39;pnpm commitlint --edit &quot;$1&quot;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>之后，会看到在根目录的<code>.husky</code>文件夹下多了一个 <code>commit-msg</code> 文件</p><p><img src="'+g+`" alt="image-20240221010133051"></p><p>其内容如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="color:#56B6C2;">.</span><span style="color:#98C379;"> &quot;$(</span><span style="color:#61AFEF;">dirname</span><span style="color:#98C379;"> &quot;</span><span style="color:#E06C75;font-style:italic;">$0</span><span style="color:#98C379;">&quot;)/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> commitlint</span><span style="color:#D19A66;"> --edit</span><span style="color:#98C379;"> &quot;</span><span style="color:#E06C75;font-style:italic;">$1</span><span style="color:#98C379;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>将添加的 <code>.husky/commit-msg</code> 钩子添加到 git 中去，执行命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/commit-msg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="再执行-lint-staged-库添加的-husky-pre-commit-钩子命令" tabindex="-1">再执行 lint-staged 库添加的.husky/pre-commit 钩子命令： <a class="header-anchor" href="#再执行-lint-staged-库添加的-husky-pre-commit-钩子命令" aria-label="Permalink to &quot;再执行 lint-staged 库添加的.husky/pre-commit 钩子命令：&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#98C379;"> husky</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/pre-commit</span><span style="color:#98C379;"> &#39;pnpm lint-staged --allow-empty &quot;$1&quot;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>之后，会看到在根目录的<code>.husky</code>文件夹下多了一个 <code>pre-commit</code> 文件</p><p><img src="`+C+`" alt="image-20240221010203924"></p><p>其内容如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="color:#ABB2BF;">. </span><span style="color:#98C379;">&quot;$(dirname &quot;</span><span style="color:#E06C75;">$0</span><span style="color:#98C379;">&quot;)/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">yarn</span><span style="color:#E06C75;"> lint</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">staged</span><span style="color:#56B6C2;"> --</span><span style="color:#E06C75;">allow</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">empty</span><span style="color:#98C379;"> &quot;$1&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>同样的，将添加的 <code>.husky/pre-commit</code> 钩子添加到 git 中去，执行命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .husky/pre-commit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="检验现有的配置" tabindex="-1">检验现有的配置 <a class="header-anchor" href="#检验现有的配置" aria-label="Permalink to &quot;检验现有的配置&quot;">​</a></h4><p>git 提交格式：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. type 为必填项，用于指定 commit 的类型</span></span>
<span class="line"><span></span></span>
<span class="line"><span>build : 更改构建系统和外部依赖项（如将 gulp 改为 webpack，更新某个 npm 包）</span></span>
<span class="line"><span>ci : 对 CI 配置文件和脚本的更改</span></span>
<span class="line"><span>docs : 仅仅修改文档说明</span></span>
<span class="line"><span>feat : 增加一个新特性</span></span>
<span class="line"><span>fix : 修复一个 bug</span></span>
<span class="line"><span>perf : 更改代码以提高性能</span></span>
<span class="line"><span>refactor : 代码重构时使用</span></span>
<span class="line"><span>style : 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</span></span>
<span class="line"><span>test : 增加新的测试功能或更改原有的测试模块</span></span>
<span class="line"><span>还支持其他自定义类型：在配置文件新增即可</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. scope 为非必填项，用于描述改动的影响范围</span></span>
<span class="line"><span>scope可以是文件名，也可以是模块名，由自己定</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. subject 是必填项，代表此次提交的日志信息</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>接下来，就是检验配置的时候了：当我们按照 git commit 规范正确提交时，可以在控制台看到如下输出</p><p>规范化提交代码，会提交成功</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 规范化提交代码，会提交成功</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> ci</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &#39;feat: 新增功能&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>不规范提交代码，阻止你的代码提交，并提交失败</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 不规范提交代码，阻止你的代码提交，并提交失败</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> ci</span><span style="color:#D19A66;"> -m</span><span style="color:#98C379;"> &#39;哈哈哈哈哈哈&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">✖</span><span style="color:#98C379;">   subject</span><span style="color:#98C379;"> may</span><span style="color:#98C379;"> not</span><span style="color:#98C379;"> be</span><span style="color:#98C379;"> empty</span><span style="color:#ABB2BF;"> [subject-empty]</span></span>
<span class="line"><span style="color:#61AFEF;">✖</span><span style="color:#98C379;">   type</span><span style="color:#98C379;"> may</span><span style="color:#98C379;"> not</span><span style="color:#98C379;"> be</span><span style="color:#98C379;"> empty</span><span style="color:#ABB2BF;"> [type-empty]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">✖</span><span style="color:#98C379;">   found</span><span style="color:#D19A66;"> 2</span><span style="color:#98C379;"> problems,</span><span style="color:#D19A66;"> 0</span><span style="color:#98C379;"> warnings</span></span>
<span class="line"><span style="color:#61AFEF;">ⓘ</span><span style="color:#98C379;">   Get</span><span style="color:#98C379;"> help:</span><span style="color:#98C379;"> https://github.com/conventional-changelog/commitlint/#what-is-commitlint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">husky</span><span style="color:#98C379;"> -</span><span style="color:#98C379;"> commit-msg</span><span style="color:#98C379;"> hook</span><span style="color:#98C379;"> exited</span><span style="color:#98C379;"> with</span><span style="color:#98C379;"> code</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;"> (error)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>那么至此，我们就已经可以处理好了 <strong>强制规范化的提交要求</strong>，到现在 <strong>不符合规范的提交信息，将不可在被提交！</strong></p><h3 id="_5-commitizen-cz-customizable-库——添加交互式-git-commit-交互式描述的配置" tabindex="-1">5.commitizen+cz-customizable 库——添加交互式 git commit 交互式描述的配置 <a class="header-anchor" href="#_5-commitizen-cz-customizable-库——添加交互式-git-commit-交互式描述的配置" aria-label="Permalink to &quot;5.commitizen+cz-customizable 库——添加交互式 git commit 交互式描述的配置&quot;">​</a></h3><p><strong>commitizen 助你规范化交互提交代码</strong></p><p><code>commitizen</code> 仓库名为 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">cz-cli</a> ，它提供了一个 <code>git cz</code> 的指令用于代替 <code>git commit</code>，简单一句话介绍它：</p><blockquote><p>当你使用 <code>commitizen</code> 进行代码提交（git commit）时，<code>commitizen</code> 会提交你在提交时填写所有必需的提交字段！</p></blockquote><ul><li><strong>commitizen</strong>：这是一个命令行工具，它可以让您通过交互式的方式来输入提交信息，而不是直接使用 git commit 命令。</li><li><strong>cz-conventional-changelog</strong>：这是 commitizen 的官方适配器，它可以让您按照 Angular 团队的提交信息格式来生成提交信息。</li><li><strong>cz-customizable</strong>：这是一个可自定义的 commitizen 插件，它可以让您根据自己的需求来配置提交信息的格式，而不是使用预定义的格式</li></ul><p>我们以下用的是 commitizen 和 cz-customizable 这两个库，cz-customizable 用来自定义配置属于我们的提交信息的格式</p><h4 id="在-package-json-中追加以下配置" tabindex="-1">在 package.json 中追加以下配置： <a class="header-anchor" href="#在-package-json-中追加以下配置" aria-label="Permalink to &quot;在 package.json 中追加以下配置：&quot;">​</a></h4><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;config&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;commitizen&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;path&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node_modules/cz-customizable&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;cz-customizable&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;config&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;.cz-config.cjs&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="新建-cz-config-cjs-文件-并写入" tabindex="-1">新建 <code>.cz-config.cjs</code> 文件，并写入： <a class="header-anchor" href="#新建-cz-config-cjs-文件-并写入" aria-label="Permalink to &quot;新建 \`.cz-config.cjs\` 文件，并写入：&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 参考文档：https://www.npmjs.com/package/cz-customizable</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 指定要使用的适配器</span></span>
<span class="line"><span style="color:#E06C75;">  adapter</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;cz-customizable&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 指定要使用的预设</span></span>
<span class="line"><span style="color:#E06C75;">  preset</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;vue&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 指定要使用的语言</span></span>
<span class="line"><span style="color:#E06C75;">  locale</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;zh-CN&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 指定要使用的主题</span></span>
<span class="line"><span style="color:#E06C75;">  theme</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;default&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 指定要使用的表情符号</span></span>
<span class="line"><span style="color:#E06C75;">  useEmoji</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 指定要使用的提交类型</span></span>
<span class="line"><span style="color:#E06C75;">  types</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;feat&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;feat:✨  新功能&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;fix&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;fix:🐞  修复bug&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;docs&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;docs:📝  文档变更&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;style&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;style:💅  修改样式(不影响代码运行的变动)&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;refactor&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;refactor:🔨  代码重构(既不是增加feature，也不是修复bug)&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;perf&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;perf:🚀  性能|体验优化&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test:🧪  增加测试&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;chore&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;chore:🗯  构建过程或辅助工具的变动&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;revert&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;revert:⏪  回退&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;WIP&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;WIP:🚧  正在进行中的工作&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;merge&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;merge:⌛  合并代码&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;build&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;build:📦  打包&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ci&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ci:🔧  持续集成&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 指定要使用的提交范围</span></span>
<span class="line"><span style="color:#E06C75;">  scopes</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;UI&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;API&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Data&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Auth&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Other&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#E06C75;">  scopeOverrides</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    fix</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Bug&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Hotfix&#39;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 消息步骤</span></span>
<span class="line"><span style="color:#E06C75;">  messages</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;请选择提交类型:&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    scope</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;请选择提交范围 (可选):&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    customScope</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;请输入自定义修改提交的范围(可选):&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    subject</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;请简要描述提交——短说明(必填):&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    body</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;请输入提交的详细描述——长说明。使用&quot;|&quot;换行(可选):&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    breaking</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;请列出非兼容性变更 (可选):&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    footer</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;请输入要关闭的issue相关的问题或合并请求，例如：#31, #34((可选):&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    confirmCommit</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;确认使用以上信息提交吗？&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  allowCustomScopes</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  allowBreakingChanges</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;feat&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;fix&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 跳过问题</span></span>
<span class="line"><span style="color:#E06C75;">  skipQuestions</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;body&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;footer&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 指定要使用的提交主题的最大长度：72</span></span>
<span class="line"><span style="color:#E06C75;">  subjectLimit</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">72</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><h4 id="js-模块化扩展知识-关于我这里为什么把-js-写成-cjs-后缀" tabindex="-1">js 模块化扩展知识（关于我这里为什么把.js 写成.cjs 后缀） <a class="header-anchor" href="#js-模块化扩展知识-关于我这里为什么把-js-写成-cjs-后缀" aria-label="Permalink to &quot;js 模块化扩展知识（关于我这里为什么把.js 写成.cjs 后缀）&quot;">​</a></h4><h5 id="package-json-中的-type-module-配置" tabindex="-1">package.json 中的 <code>{&quot;type&quot;: &quot;module&quot;}</code> 配置： <a class="header-anchor" href="#package-json-中的-type-module-配置" aria-label="Permalink to &quot;package.json 中的 \`{&quot;type&quot;: &quot;module&quot;}\` 配置：&quot;">​</a></h5><p>想要导入 CommonJS 的语法来编写和导入模块 <code>.cjs</code>：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// a.cjs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导出一个函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">add</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// b.cjs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入 a.cjs 模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">add</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./a.cjs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="package-json-中的-type-commonjs-配置" tabindex="-1">package.json 中的 <code>{&quot;type&quot;: &quot;commonjs&quot;}</code> 配置： <a class="header-anchor" href="#package-json-中的-type-commonjs-配置" aria-label="Permalink to &quot;package.json 中的 \`{&quot;type&quot;: &quot;commonjs&quot;}\` 配置：&quot;">​</a></h5><p>想要导入使用 ES 模块的语法来编写和导入在 .mjs 后缀文件，例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// a.mjs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导出一个函数</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// b.mjs</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入 a.mjs 模块</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">add</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;./a.mjs&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>————————————————————————————————</p><h4 id="再次校验-git-提交的配置" tabindex="-1">再次校验 git 提交的配置： <a class="header-anchor" href="#再次校验-git-提交的配置" aria-label="Permalink to &quot;再次校验 git 提交的配置：&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> .</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># git cz命令 替代了git commit命令</span></span>
<span class="line"><span style="color:#61AFEF;">git</span><span style="color:#98C379;"> cz</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>会输出以下，根据步骤交互选择和输入描述，会自动一步步校验：</p><p><img src="`+k+'" alt="image-20240220225609127"></p><p>如果没有错误，便会成功提交：</p><p><img src="'+F+'" alt="image-20240220235218703"></p><p>如果有错误，则会有所提示，找出来修复即可：</p><p><img src="'+A+'" alt="image-20240220230232250"></p><p>那么到这里我们就已经可以使用<code>git cz</code> 来代替了 <code>git commit</code> 实现了规范化的提交诉求了。</p>',275)]))}const z=n(v,[["render",E]]);export{D as __pageData,z as default};
