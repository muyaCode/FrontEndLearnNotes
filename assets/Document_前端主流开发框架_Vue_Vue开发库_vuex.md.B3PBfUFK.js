import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"vuex：状态管理库","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端主流开发框架/Vue/Vue开发库/vuex.md","filePath":"Document/前端主流开发框架/Vue/Vue开发库/vuex.md","lastUpdated":1750954157000}'),e={name:"Document/前端主流开发框架/Vue/Vue开发库/vuex.md"};function t(o,s,r,c,i,B){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="vuex-状态管理库" tabindex="-1">vuex：状态管理库 <a class="header-anchor" href="#vuex-状态管理库" aria-label="Permalink to &quot;vuex：状态管理库&quot;">​</a></h1><p>官网：<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noreferrer">Vuex 是什么？ | Vuex</a></p><p>GitHub：<a href="https://github.com/vuejs/vuex" target="_blank" rel="noreferrer">GitHub - vuejs/vuex: 🗃️ Centralized State Management for Vue.js.</a></p><p><strong>vuex 已更新到 v4.x 版本，v5 版本不会再出，官方推荐使用<code>pinia</code>作为 vuex 的 v5 版本</strong></p><hr><h4 id="非父子通信、状态管理" tabindex="-1">非父子通信、状态管理： <a class="header-anchor" href="#非父子通信、状态管理" aria-label="Permalink to &quot;非父子通信、状态管理：&quot;">​</a></h4><h6 id="_1-state-通过-this-store-state-共享状态属性-来访问共享状态属性" tabindex="-1">1.State 通过：this.$store.state.共享状态属性，来访问共享状态属性 <a class="header-anchor" href="#_1-state-通过-this-store-state-共享状态属性-来访问共享状态属性" aria-label="Permalink to &quot;1.State 通过：this.$store.state.共享状态属性，来访问共享状态属性&quot;">​</a></h6><p>在<a href="https://cn.vuejs.org/guide/computed.html" target="_blank" rel="noreferrer">计算属性</a>中返回某个状态：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个 Counter 组件</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Counter</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	template</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\`&lt;div&gt;{{ count }}&lt;/div&gt;\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">		count</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> $store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 返回状态，通过计算属性接收，然后在页面上使用</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="_1-1-mapstate-辅助函数-来访问共享状态-state-属性的第二种方法" tabindex="-1">1.1 <code>mapState</code>  辅助函数：来访问共享状态 state 属性的第二种方法 <a class="header-anchor" href="#_1-1-mapstate-辅助函数-来访问共享状态-state-属性的第二种方法" aria-label="Permalink to &quot;1.1 \`mapState\`  辅助函数：来访问共享状态 state 属性的第二种方法&quot;">​</a></h6><ul><li><p>一个组件需要获取多个状态，可以使用  <code>mapState</code>  辅助函数帮助我们生成计算属性，让你少按几次键：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">mapState</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">mapState</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 箭头函数可使代码更简练</span></span>
<span class="line"><span style="color:#61AFEF;">		count</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 传字符串参数 &#39;count&#39; 等同于 \`state =&gt; state.count\`</span></span>
<span class="line"><span style="color:#E06C75;">		countAlias</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;count&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 为了能够使用 \`this\` 获取局部状态，必须使用常规函数</span></span>
<span class="line"><span style="color:#61AFEF;">		countPlusLocalState</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">			return</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">localCount</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	}),</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li><li><p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给  <code>mapState</code>  传一个字符串数组。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">mapState</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 映射 this.count 为 store.state.count</span></span>
<span class="line"><span style="color:#98C379;">  &#39;count&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以配合ES6展开运算符使用：可以对数组或对象进行展开，方便后面可以自定义属性合并</span></span>
<span class="line"><span style="color:#E06C75;">computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span><span style="color:#61AFEF;">mapState</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;count&#39;</span><span style="color:#ABB2BF;">]),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h6 id="_2-getter-通过-getters-定义-store-的计算方法-相当于-vue-的计算属性" tabindex="-1">2.Getter 通过：getters: {} 定义 store 的计算方法：相当于 vue 的计算属性 <a class="header-anchor" href="#_2-getter-通过-getters-定义-store-的计算方法-相当于-vue-的计算属性" aria-label="Permalink to &quot;2.Getter 通过：getters: {} 定义 store 的计算方法：相当于 vue 的计算属性&quot;">​</a></h6><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    todos</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;...&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">      { </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;...&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 页面内可以通过this.$store.getters.doneTodos，访问</span></span>
<span class="line"><span style="color:#61AFEF;">    doneTodos</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">getters</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">doneTodos</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 其他 getter</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">todos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">todo</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 也可以通过让 getter 返回一个函数，来实现给 getter 传参</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 页面内可以通过this.$store.getters.getTodoById(2)，访问</span></span>
<span class="line"><span style="color:#61AFEF;">    getTodoById</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">id</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">       return</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">todos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">find</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">todo</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#E5C07B;"> todo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">     }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h6 id="_2-1-mapgetters-辅助函数-第二种调用-getters-属性的方法" tabindex="-1">2.1 <code>mapGetters</code>  辅助函数：第二种调用 getters 属性的方法 <a class="header-anchor" href="#_2-1-mapgetters-辅助函数-第二种调用-getters-属性的方法" aria-label="Permalink to &quot;2.1 \`mapGetters\`  辅助函数：第二种调用 getters 属性的方法&quot;">​</a></h6><ul><li><p><code>mapGetters</code>  辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">mapGetters</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 使用对象展开运算符将 getter 混入 computed 对象中</span></span>
<span class="line"><span style="color:#ABB2BF;">		...</span><span style="color:#61AFEF;">mapGetters</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#98C379;">			&quot;doneTodosCount&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">			&quot;anotherGetter&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">		]),</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>将一个 getter 属性另取一个名字，使用对象形式：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">...</span><span style="color:#61AFEF;">mapGetters</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 把 \`this.doneCount\` 映射为 \`this.$store.getters.doneTodosCount\`</span></span>
<span class="line"><span style="color:#E06C75;">  doneCount</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;doneTodosCount&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h6 id="_3-mutation-通过-mutations-里面添加修改状态的函数方法" tabindex="-1">3.Mutation 通过：mutations: {} 里面添加修改状态的函数方法 <a class="header-anchor" href="#_3-mutation-通过-mutations-里面添加修改状态的函数方法" aria-label="Permalink to &quot;3.Mutation 通过：mutations: {} 里面添加修改状态的函数方法&quot;">​</a></h6><h6 id="_3-1-使用常量替代-mutation-事件类型" tabindex="-1">3.1 使用常量替代 Mutation 事件类型 <a class="header-anchor" href="#_3-1-使用常量替代-mutation-事件类型" aria-label="Permalink to &quot;3.1 使用常量替代 Mutation 事件类型&quot;">​</a></h6><p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：防止名字冲突、更方便修改</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// mutation-types.js</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> const</span><span style="color:#E5C07B;"> SOME_MUTATION</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;SOME_MUTATION&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// store.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;vuex&#39;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">SOME_MUTATION</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &#39;./mutation-types&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  state</span><span style="color:#ABB2BF;">: { ... },</span></span>
<span class="line"><span style="color:#E06C75;">  mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 我们可以使用 ES2015(ES6) 风格的计算属性命名功能(对象的变量属性)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 来使用一个常量作为函数名</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#E5C07B;">SOME_MUTATION</span><span style="color:#ABB2BF;">] (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 修改 state</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>用不用常量取决于你——在需要多人协作的大型项目中，这会很有帮助。但如果你不喜欢，你完全可以不这样做。</p><h6 id="_4-action-通过-action-里面添加方法调用-mutations-里面的方法" tabindex="-1">4.Action 通过：action: {} 里面添加方法调用 mutations 里面的方法 <a class="header-anchor" href="#_4-action-通过-action-里面添加方法调用-mutations-里面的方法" aria-label="Permalink to &quot;4.Action 通过：action: {} 里面添加方法调用 mutations 里面的方法&quot;">​</a></h6><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 定义共享状态</span></span>
<span class="line"><span style="color:#E06C75;">  state</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 修改状态</span></span>
<span class="line"><span style="color:#E06C75;">  mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 页面内通过：this.$store.commit(&#39;increment&#39;, data参数)，普通风格</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 或this.$store.commit({ type: &#39;increment&#39;, amount: 10 }),对象风格触发</span></span>
<span class="line"><span style="color:#61AFEF;">    increment</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // state.count += data.amount</span><span style="color:#7F848E;font-style:italic;"> // data参数的使用：两种风格都是这样使用</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 异步修改状态的方法(异步修改状态)</span></span>
<span class="line"><span style="color:#E06C75;">  actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 页面内通过：this.$store.dispatch(&#39;increment&#39;, data参数)，普通风格</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 或this.$store.dispatch({ type: &#39;increment&#39;, amount: 10 }),对象风格触发</span></span>
<span class="line"><span style="color:#61AFEF;">    increment</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">context</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 异步提交到mutations的方法</span></span>
<span class="line"><span style="color:#E5C07B;">      context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;increment&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ** new Promise组合 Action</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 页面中可以：this.$store.dispatch(&#39;actionA&#39;).then(() =&gt; {...})，调用</span></span>
<span class="line"><span style="color:#61AFEF;">    actionA</span><span style="color:#ABB2BF;"> ({ </span><span style="color:#E06C75;font-style:italic;">commit</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">          commit</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;someMutation&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">          resolve</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        }, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h6 id="_3-1-mapmutations辅助函数-在组件中提交-mutation-第二种调用状态管理-mutation-里的修改的方法" tabindex="-1">3.1 <code>mapMutations</code>辅助函数：在组件中提交 Mutation--第二种调用状态管理 Mutation 里的修改的方法 <a class="header-anchor" href="#_3-1-mapmutations辅助函数-在组件中提交-mutation-第二种调用状态管理-mutation-里的修改的方法" aria-label="Permalink to &quot;3.1 \`mapMutations\`辅助函数：在组件中提交 Mutation--第二种调用状态管理 Mutation 里的修改的方法&quot;">​</a></h6><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">mapMutations</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//</span></span>
<span class="line"><span style="color:#ABB2BF;">		...</span><span style="color:#61AFEF;">mapMutations</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#98C379;">			&quot;increment&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 将 \`this.increment()\` 映射为 \`this.$store.commit(&#39;increment&#39;)\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// \`mapMutations\` 也支持载荷：</span></span>
<span class="line"><span style="color:#98C379;">			&quot;incrementBy&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 将 \`this.incrementBy(amount)\` 映射为 \`this.$store.commit(&#39;incrementBy&#39;, amount)\`</span></span>
<span class="line"><span style="color:#ABB2BF;">		]),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用另一个名字</span></span>
<span class="line"><span style="color:#ABB2BF;">		...</span><span style="color:#61AFEF;">mapMutations</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			add</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;increment&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 将 \`this.add()\` 映射为 \`this.$store.commit(&#39;increment&#39;)\`</span></span>
<span class="line"><span style="color:#ABB2BF;">		}),</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h6 id="_4-1-mapactions辅助函数-在组件中分发action-第二种调用状态管理-action-里的异步修改的方法" tabindex="-1">4.1 <code>mapActions</code>辅助函数：在组件中分发<mark>Action</mark>--第二种调用状态管理 action 里的异步修改的方法 <a class="header-anchor" href="#_4-1-mapactions辅助函数-在组件中分发action-第二种调用状态管理-action-里的异步修改的方法" aria-label="Permalink to &quot;4.1 \`mapActions\`辅助函数：在组件中分发&lt;mark&gt;Action&lt;/mark&gt;--第二种调用状态管理 action 里的异步修改的方法&quot;">​</a></h6><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">mapActions</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;vuex&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#E06C75;">	methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		...</span><span style="color:#61AFEF;">mapActions</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将 \`this.increment()\`方法 映射为 \`this.$store.dispatch(&#39;increment&#39;)\`</span></span>
<span class="line"><span style="color:#98C379;">			&quot;increment&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// \`mapActions\` 也支持载荷：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将 \`this.incrementBy(amount)\`方法 映射为 \`this.$store.dispatch(&#39;incrementBy&#39;, amount)\`</span></span>
<span class="line"><span style="color:#98C379;">			&quot;incrementBy&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		]),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 调用另一个名字</span></span>
<span class="line"><span style="color:#ABB2BF;">		...</span><span style="color:#61AFEF;">mapActions</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 将 \`this.add()\`方法 映射为 \`this.$store.dispatch(&#39;increment&#39;)\`</span></span>
<span class="line"><span style="color:#E06C75;">			add</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;increment&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		}),</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h6 id="_4-2-通过-vue-的-devtools-浏览器调试插件可以看到-mutations-的方法的调用情况和结果" tabindex="-1">4.2.通过：vue 的 Devtools 浏览器调试插件可以看到 mutations 的方法的调用情况和结果 <a class="header-anchor" href="#_4-2-通过-vue-的-devtools-浏览器调试插件可以看到-mutations-的方法的调用情况和结果" aria-label="Permalink to &quot;4.2.通过：vue 的 Devtools 浏览器调试插件可以看到 mutations 的方法的调用情况和结果&quot;">​</a></h6><h6 id="_5-通过-module-来将-store-分割成模块-每个模块拥有自己的-state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割" tabindex="-1">5.通过：Module 来将 store 分割成模块，每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割 <a class="header-anchor" href="#_5-通过-module-来将-store-分割成模块-每个模块拥有自己的-state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割" aria-label="Permalink to &quot;5.通过：Module 来将 store 分割成模块，每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割&quot;">​</a></h6><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> moduleA</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({ ... }), </span><span style="color:#7F848E;font-style:italic;">// state的第二种写法：回调函数</span></span>
<span class="line"><span style="color:#E06C75;">  mutations</span><span style="color:#ABB2BF;">: { ... },</span></span>
<span class="line"><span style="color:#E06C75;">  actions</span><span style="color:#ABB2BF;">: { ... },</span></span>
<span class="line"><span style="color:#E06C75;">  getters</span><span style="color:#ABB2BF;">: { ... }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> moduleB</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 命名空间的模块:当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名</span></span>
<span class="line"><span style="color:#E06C75;">  namespaced</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 模块内的状态已经是嵌套的了，使用 \`namespaced\` 属性不会对其产生影响</span></span>
<span class="line"><span style="color:#61AFEF;">  state</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> ({ ... }),</span></span>
<span class="line"><span style="color:#E06C75;">  getters</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">    isAdmin</span><span style="color:#ABB2BF;"> () { ... } </span><span style="color:#7F848E;font-style:italic;">// 命名空间调用-&gt; getters[&#39;moduleB/isAdmin&#39;]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 在这个模块的 getter 中，\`getters\` 被局部化了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 你可以使用 getter 的第四个参数来调用 \`rootGetters\`</span></span>
<span class="line"><span style="color:#61AFEF;">    someGetter</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">rootState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">rootGetters</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      getters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">someOtherGetter</span><span style="color:#7F848E;font-style:italic;"> // -&gt; &#39;moduleB/someOtherGetter&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">      rootGetters</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">someOtherGetter</span><span style="color:#7F848E;font-style:italic;"> // -&gt; &#39;someOtherGetter&#39;</span></span>
<span class="line"><span style="color:#E06C75;">      rootGetters</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;bar/someOtherGetter&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// 调用其他命名空间的-&gt; &#39;bar/someOtherGetter&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  mutations</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">    login</span><span style="color:#ABB2BF;"> () { ... } </span><span style="color:#7F848E;font-style:italic;">// 命名空间调用-&gt; commit(&#39;moduleB/login&#39;)</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  actions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">    login</span><span style="color:#ABB2BF;"> () { ... } </span><span style="color:#7F848E;font-style:italic;">// 命名空间调用-&gt; dispatch(&#39;moduleB/login&#39;)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">  modules</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">moduleA</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    b</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">moduleB</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">a</span><span style="color:#7F848E;font-style:italic;"> // -&gt; moduleA 的状态</span></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#7F848E;font-style:italic;"> // -&gt; moduleB 的状态</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h4 id="需要缓存的状态数据" tabindex="-1">需要缓存的状态数据 <a class="header-anchor" href="#需要缓存的状态数据" aria-label="Permalink to &quot;需要缓存的状态数据&quot;">​</a></h4><p>1.为了不需要多次请求 tab 里的数据，减轻服务器压力。可以使用 vuex 的 actions 异步提交 mutations 把请求的数据缓存起来，在对应页面的时候，先判断是否有缓存数据，如果有，直接使用，没有再去请求</p><p>2.登录的信息，需要用到的登录用户的信息，后期要用这些参数来请求相关接口</p><h4 id="vuex-实现原理" tabindex="-1">Vuex 实现原理 <a class="header-anchor" href="#vuex-实现原理" aria-label="Permalink to &quot;Vuex 实现原理&quot;">​</a></h4><p>Vuex 的原理关键：使用 Vue 实例管理状态</p><h6 id="vuex-装载分析" tabindex="-1">Vuex 装载分析 <a class="header-anchor" href="#vuex-装载分析" aria-label="Permalink to &quot;Vuex 装载分析&quot;">​</a></h6><p>这个问题实际就是问到 Vuex 的 store 是如何装载到组件中的，首先利用了 Vue 的插件机制使用 Vue.use(Vuex)来去安装 Vuex 插件，那么此时会调用 vuex 的 install 方法，当调用 install 时此时会利用 mixin 机制在 beforeCreate 阶段去执行 vuexInit。核心源码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">beforeCreate</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">vuexInit</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们可以发现在 beforeCreate 阶段调用了 vuexInit 方法，我们分析一下 vuexInit 方法。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Vuex init hook, injected into each instances init hooks list.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> vuexInit</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> options</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$options</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// store injection</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#C678DD;">			typeof</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;function&quot;</span><span style="color:#C678DD;"> ?</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">store</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">options</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">parent</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> options</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>分析如上代码：</p><p>将初始化 Vue 根组件时传入的 store 设置到 this 对象的$store属性上，子组件从其父组件引用$store 属性，层层嵌套进行设置。</p><p>在任意组件中执行 this.$store 都能找到装载的那个 store 对象。</p><h6 id="vuex-中的-state-与-getter" tabindex="-1">Vuex 中的 state 与 getter <a class="header-anchor" href="#vuex-中的-state-与-getter" aria-label="Permalink to &quot;Vuex 中的 state 与 getter&quot;">​</a></h6><p>vuex 的 Store 会划分出 state 和 getters 两个数据区。getter 是从 store 的 state 中派生出的状态。那么首先我们先看我们是如何访问 state 的？</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">  get</span><span style="color:#61AFEF;"> state</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_vm</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">_data</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$$state</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当我们使用 this.$store.state.xxx去获取xxx属性时，实际获取的是store挂载到_vm中store._vm.data.$$state 中的数据。</p><hr><p>state 是如何挂载上去的？我们在 Store constructor 找到了核心函数 resetStoreVM，观察 resetStoreVM 的核心代码，其主要做的事情是初始化了一个 vue 实例_vm，由于 vue 的 data 是响应式的，所以，$$state 也是响应式的，那么当我们 在一个组件实例中 对 state.xxx 进行 更新时，基于 vue 的 data 的响应式机制，所有相关组件的 state.xxx 的值都会自动更新，视图自然也会自动更新，核心代码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		$$state</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上面所介绍的是 state，那么接下来我们介绍一下 getter，其核心源码也是在<br> resetStoreVM 中，核心源码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">wrappedGetters</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// use computed to leverage its lazy-caching mechanism</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// direct inline function use will lead to closure preserving oldVm.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// using partial to return function with only arguments preserved in closure environment.</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> partial</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getters</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">		get</span><span style="color:#ABB2BF;">: () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vm</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">		enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// for local getters</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>until.js 的部分源码如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * forEach for object</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> forEachValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> partial</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>对 wrappedGetters 进行处理，让 getter 存储至 computed 对象上，对 getter 对象的属性进行数据劫持，当触发 get 时，返回<code>store._vm[key]</code>，最后将 computed 挂载到 vue 实例上，当做计算属性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		$$state</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">state</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#E06C75;">	computed</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><p>Vuex 原理讲解</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Vuex原理解析&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;root1&quot;</span><span style="color:#ABB2BF;">&gt;{{data1}}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;root2&quot;</span><span style="color:#ABB2BF;">&gt;{{data2}}&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;root3&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">			&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> @click</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;change&quot;</span><span style="color:#ABB2BF;">&gt;change&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 注册vue插件</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> registerPlugin</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">Vue</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				const</span><span style="color:#E5C07B;"> vuex</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">				vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">					data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">						message</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello vue.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// vuex赋值</span></span>
<span class="line"><span style="color:#E5C07B;">				vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_vm</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">mutations</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">					setMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">						vuex</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 初始化</span></span>
<span class="line"><span style="color:#C678DD;">				function</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">					this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">$store</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> vuex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 所有的vue实例beforeCreate时都调用init方法</span></span>
<span class="line"><span style="color:#E5C07B;">				Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">					beforeCreate</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">init</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">				});</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 使用插件</span></span>
<span class="line"><span style="color:#E5C07B;">			Vue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">registerPlugin</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// Vue实例化例子</span></span>
<span class="line"><span style="color:#C678DD;">			new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#root1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">					data1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">						return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#C678DD;">			new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#root2&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				computed</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">					data2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">						return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#C678DD;">			new</span><span style="color:#61AFEF;"> Vue</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">				el</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;#root3&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				methods</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#61AFEF;">					change</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">						const</span><span style="color:#E5C07B;"> newValue</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;.&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">						this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">$store</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">mutations</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newValue</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">					},</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			});</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><hr><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li><p>vuex 利用了 vue 的 mixin 机制，混合 beforeCreate 钩子 将 store 注入至 vue 组件实例上，并注册了 vuex store 的引用属性 $store。</p></li><li><p>vuex 的 state 是借助 vue 的响应式 data 实现的。getter 是借助 vue 的计算属性 computed 特性实现的。</p></li></ul>`,62)]))}const b=n(e,[["render",t]]);export{u as __pageData,b as default};
