import{_ as e,c as r,o as l,ah as n}from"./chunks/framework.DqD713j2.js";const _=JSON.parse('{"title":"Electron打包工具的选择","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Electron/Electron打包工具的选择.md","filePath":"Document/跨平台桌面端开发/Electron/Electron打包工具的选择.md","lastUpdated":1750954157000}'),a={name:"Document/跨平台桌面端开发/Electron/Electron打包工具的选择.md"};function d(o,t,c,i,s,g){return l(),r("div",null,t[0]||(t[0]=[n('<h1 id="electron打包工具的选择" tabindex="-1">Electron打包工具的选择 <a class="header-anchor" href="#electron打包工具的选择" aria-label="Permalink to &quot;Electron打包工具的选择&quot;">​</a></h1><h2 id="两种主流打包工具-electron-forge-和-electron-builder-的不同" tabindex="-1">两种主流打包工具 @electron-forge 和 electron-builder 的不同 <a class="header-anchor" href="#两种主流打包工具-electron-forge-和-electron-builder-的不同" aria-label="Permalink to &quot;两种主流打包工具 @electron-forge 和 electron-builder 的不同&quot;">​</a></h2><p>electron-forge和electron-builder都是用于构建和打包Electron应用程序的工具，但它们的主要区别在于：</p><p>electron-forge是一个全面的开发框架，它提供了一整套开发工具和插件，用于加快Electron应用程序的开发过程。它有一个强大的CLI命令行接口，可以自动化很多开发任务，如创建项目模板、支持本地开发服务器、支持开发热更新、支持自动安装依赖、打包成不同的平台的可执行文件等。</p><ul><li>electron-packager不包含在electron-forge中，但是electron-forge是构建在electron-packager之上的。具体来说，当你使用electron-forge打包你的Electron应用程序时，它会使用electron-packager来创建可执行文件。这意味着您无需单独安装electron-packager，因为它已经被electron-forge包含在内了。</li></ul><p>electron-builder则是一个纯粹的构建和打包工具。它主要用于将已经开发完毕的Electron应用程序打包成不同的平台的可执行文件。它支持多种构建方式，例如打包成可执行文件、打包成安装程序、打包成独立的应用程序、打包成蓝色灯、snap、flatpak等。</p><p>因此，如果你正在开发Electron应用程序，并需要加速开发过程，electron-forge是一个不错的选择；如果您的应用程序已经开发完毕，并需要将其打包为可执行文件或安装程序，electron-builder则是一个更好的选择。</p><h2 id="两种工具的场景对比" tabindex="-1">两种工具的场景对比 <a class="header-anchor" href="#两种工具的场景对比" aria-label="Permalink to &quot;两种工具的场景对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th style="text-align:center;">electron-builder</th><th style="text-align:center;">electron-forge</th></tr></thead><tbody><tr><td>签名</td><td style="text-align:center;">✔✔✔</td><td style="text-align:center;">✔✔✔</td></tr><tr><td>安装包类型</td><td style="text-align:center;">✔✔✔</td><td style="text-align:center;">✔✔✔</td></tr><tr><td>原生模块编译</td><td style="text-align:center;">✔✔✔</td><td style="text-align:center;">✔✔✔</td></tr><tr><td>定制化</td><td style="text-align:center;">✔✔✔</td><td style="text-align:center;">✔</td></tr><tr><td>上手成本</td><td style="text-align:center;">✔✔</td><td style="text-align:center;">✔</td></tr><tr><td>boilerplate</td><td style="text-align:center;">✖</td><td style="text-align:center;">✔✔✔</td></tr><tr><td>跨平台构建</td><td style="text-align:center;">Linux、Windows</td><td style="text-align:center;">✖</td></tr><tr><td>社区活跃度</td><td style="text-align:center;">✔✔✔</td><td style="text-align:center;">✔✔</td></tr><tr><td>场景</td><td style="text-align:center;">打包和发布的完整解决方案，基本适用于所有场景</td><td style="text-align:center;">创建到发布的一体化解决方案，适合从0到1的项目</td></tr></tbody></table>',9)]))}const p=e(a,[["render",d]]);export{_ as __pageData,p as default};
