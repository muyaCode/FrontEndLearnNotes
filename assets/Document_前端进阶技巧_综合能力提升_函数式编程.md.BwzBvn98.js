import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"函数式编程","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端进阶技巧/综合能力提升/函数式编程.md","filePath":"Document/前端进阶技巧/综合能力提升/函数式编程.md","lastUpdated":1750954157000}'),e={name:"Document/前端进阶技巧/综合能力提升/函数式编程.md"};function o(t,s,c,r,i,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="函数式编程" tabindex="-1">函数式编程 <a class="header-anchor" href="#函数式编程" aria-label="Permalink to &quot;函数式编程&quot;">​</a></h1><ul><li>前置知识 <ul><li>js 基础</li><li>js面向对象</li></ul></li></ul><h3 id="函数式编程含义" tabindex="-1">函数式编程含义 <a class="header-anchor" href="#函数式编程含义" aria-label="Permalink to &quot;函数式编程含义&quot;">​</a></h3><ul><li><p>函数式编程是一种强调以函数使用为主的软件开发风格 ，也是一种范式。</p></li><li><p>某些函数式编程语言Haskell、lisp、Scheme等。</p></li></ul><h3 id="js中函数式编程" tabindex="-1">js中函数式编程 <a class="header-anchor" href="#js中函数式编程" aria-label="Permalink to &quot;js中函数式编程&quot;">​</a></h3><ul><li><p>数学中函数</p><p>f(x) = y;</p></li><li><p>js中的函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">   let</span><span style="color:#E06C75;"> factor</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#61AFEF;"> totalNum</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> num</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;">factor</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">   console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">( </span><span style="color:#61AFEF;">totalNum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) );</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>对比两种函数，基于数学函数 来修复 js函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">   let</span><span style="color:#61AFEF;"> totalNum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">num</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">factor</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;">factor</span><span style="color:#56B6C2;">*</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">   console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">( </span><span style="color:#61AFEF;">totalNum</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">) );</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>js是多范式编程语言，但是函数作为一等公民，函数式编程具有天然优势。</p></li></ul><h3 id="函数式编程中涉及到的概念" tabindex="-1">函数式编程中涉及到的概念 <a class="header-anchor" href="#函数式编程中涉及到的概念" aria-label="Permalink to &quot;函数式编程中涉及到的概念&quot;">​</a></h3><h4 id="纯函数" tabindex="-1">纯函数 <a class="header-anchor" href="#纯函数" aria-label="Permalink to &quot;纯函数&quot;">​</a></h4><ul><li><p>函数式编程基于纯函数</p><ul><li><p>纯函数是对给定的输入返还相同输出的函数；例如</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> double</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> value</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;">value</span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li><li><p>纯函数意义</p><ul><li><p>纯函数可以产生可测试的代码</p><ul><li><p>不依赖外部环境计算，不会产生副作用，提高函数的复用性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;double(2) 等于 4&#39;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">  expect</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">double</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">toBe</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul></li><li><p>可读性更强 ，js函数不管是否是纯函数 都会有一个语义化的名称，更便于阅读。</p></li><li><p>可以组装成复杂任务的可能性。符合模块化概念及单一职责原则。</p></li></ul></li></ul><h3 id="作业-通过声明式编程方式实现-filter-及-map-达到原生的效果" tabindex="-1">作业：通过声明式编程方式实现 filter 及 map 达到原生的效果 <a class="header-anchor" href="#作业-通过声明式编程方式实现-filter-及-map-达到原生的效果" aria-label="Permalink to &quot;作业：通过声明式编程方式实现 filter 及 map 达到原生的效果&quot;">​</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">   Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">myMap</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> resArr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">            resArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]));</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> resArr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">   }</span></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#E06C75;"> users</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [{</span></span>
<span class="line"><span style="color:#E06C75;">       name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;张三&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">       age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">20</span></span>
<span class="line"><span style="color:#ABB2BF;">   },{</span></span>
<span class="line"><span style="color:#E06C75;">       name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;李四&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">       age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">21</span></span>
<span class="line"><span style="color:#ABB2BF;">   },{</span></span>
<span class="line"><span style="color:#E06C75;">       name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;王五&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">       age</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">28</span></span>
<span class="line"><span style="color:#ABB2BF;">   }]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   let res =  users.myMap(item=&gt;item);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   console.log(res);</span></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">myFilter</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> resArr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])){</span></span>
<span class="line"><span style="color:#E5C07B;">            resArr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> resArr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;">  users</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">myFilter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">item</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h3 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-label="Permalink to &quot;高阶函数&quot;">​</a></h3><ul><li><p>高阶函数定义</p><ul><li>高阶函数：以函数作为输入或者输出的函数被称为高阶函数(Higher-Order Function)。</li></ul></li><li><p>高阶函数的抽象</p><ul><li><p>一般高阶函数用于抽象通用问题，简而言之，高阶函数就是定义抽象。</p><ul><li><p>命令式循环(注重“如何”做，注重过程)；</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>通过高阶函数抽象过程,声明式编程（注重做“什么”，注重结果）;</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> forEach</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">arr</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#61AFEF;">        fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">,(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">item</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面通过高阶函数 “forEach”来抽象循环&quot;如何&quot;做的逻辑,直接关注 做&quot;什么&quot;</p></li></ul></li></ul></li><li><p>高阶函数的缓存特性</p><ul><li><p>主要是利用函数的闭包</p><ul><li>once 高阶函数</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> once</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> done</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">            fn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">            console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;this fn is already execute&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">        done</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myfn</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;">  once</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">myfn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">myfn</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ul></li></ul><h3 id="函数柯里化" tabindex="-1">函数柯里化 <a class="header-anchor" href="#函数柯里化" aria-label="Permalink to &quot;函数柯里化&quot;">​</a></h3><ul><li><p>什么是柯里化？</p><ul><li><p>柯里化是把一个多参数函数转化成一个嵌套的一元函数的过程；</p><ul><li><p>如下二元函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> fn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>柯里化函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> curry</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myfn</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> curry</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">( </span><span style="color:#61AFEF;">myfn</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) );</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul></li></ul></li><li><p>多参数函数柯里化</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 多参数柯里化；</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#61AFEF;"> curry</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> curriedFn</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">args</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;">fn</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#61AFEF;"> curriedFn</span><span style="color:#ABB2BF;">(...</span><span style="color:#E5C07B;">args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">([...</span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">]));</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">           return</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#61AFEF;"> fn</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">z</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">z</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> myfn</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> curry</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(myfn(1)(2));</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">myfn</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">)(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li><li><p>柯里化意义</p><ul><li>让纯函数更”纯“，每次接受一个参数，松散解耦</li><li>某些语言及特定环境下只能接受一个参数</li><li>惰性执行</li></ul></li></ul><h3 id="组合-composition-和管道-pipe" tabindex="-1">组合（composition）和管道（pipe） <a class="header-anchor" href="#组合-composition-和管道-pipe" aria-label="Permalink to &quot;组合（composition）和管道（pipe）&quot;">​</a></h3><h4 id="组合-composition" tabindex="-1">组合（composition） <a class="header-anchor" href="#组合-composition" aria-label="Permalink to &quot;组合（composition）&quot;">​</a></h4><ul><li><p>组合函数：无需创建新的函数，通过基础函数解决眼前问题。</p><ul><li><p>组合高阶函数 map 及 filter；</p><ul><li><p>map高阶函数</p></li><li><p>组合map及filter来使用</p></li></ul></li><li><p>compose组合</p><p>可以封装组合函数来实现函数执行</p><ul><li>2个函数组合</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> afn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> bfn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> compose</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;font-style:italic;">c</span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;">a</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">b</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> myfn</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;">  compose</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">afn</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">bfn</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">( </span><span style="color:#61AFEF;">myfn</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><p>多函数组合</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> compose</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">fns</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">fns</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reverse</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">acc</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">acc</span><span style="color:#ABB2BF;">),</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul></li></ul><h3 id="管道-pipe" tabindex="-1">管道（pipe） <a class="header-anchor" href="#管道-pipe" aria-label="Permalink to &quot;管道（pipe）&quot;">​</a></h3><p>compose 执行是从右到左，pipe是从左至右的执行。函数如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> pipe</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (...</span><span style="color:#E06C75;font-style:italic;">fns</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">fns</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reduce</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">acc</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">acc</span><span style="color:#ABB2BF;">),</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 管道、组合 取舍 ：管道及组合最大区别在于执行顺序的不同，数据流向不同，达到目的是类似的。所以无优 劣之分，保持团队风格统一就好了。</p><p>组合及管道的意义 把很多小函数组合起来完成更复杂的逻辑。</p><p>​</p><h3 id="pointfree-编程风格" tabindex="-1">Pointfree 编程风格 <a class="header-anchor" href="#pointfree-编程风格" aria-label="Permalink to &quot;Pointfree  编程风格&quot;">​</a></h3><p>概念：不适用处理的值，只合成运算过程，也就是无值风格。</p><ul><li><p>获取所有的句号</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> sentenceNum</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> str</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">match</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/。/</span><span style="color:#C678DD;">g</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;大家好，我是中国人。我爱中国。我们同住地球村。&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">sentenceNum</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>统计长度</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> countFn</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> arr</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>判断奇偶</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> oddOrEven</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> num</span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;">%</span><span style="color:#D19A66;">2</span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;">0</span><span style="color:#C678DD;">?</span><span style="color:#98C379;">&quot;偶数&quot;</span><span style="color:#C678DD;">:</span><span style="color:#98C379;">&quot;奇数&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>pointfree风格组合函数使用:找到句号统计长度最后判断奇偶数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;大家好，我是中国人。我爱中国。我们同住地球村。&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> myfn</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> compose</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">oddOrEven</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">countFn</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">sentenceNum</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">myfn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">str</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h3 id="js函数式编程库" tabindex="-1">js函数式编程库 <a class="header-anchor" href="#js函数式编程库" aria-label="Permalink to &quot;js函数式编程库&quot;">​</a></h3><ul><li><p>lodash.js 、ramda.js 、Underscore.js</p></li><li><p>通过 ramda.js实现数据筛选功能；</p></li></ul><h2 id="函数式编程在redux-中应用" tabindex="-1">函数式编程在redux 中应用 <a class="header-anchor" href="#函数式编程在redux-中应用" aria-label="Permalink to &quot;函数式编程在redux 中应用&quot;">​</a></h2><ul><li><p>Redux 整体是通过函数式 编程思维实现的；</p></li><li><p>createStore 简单实现</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> createStore</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">reducer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">initialState</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;">  currentState</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> initialState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#E5C07B;">  listeners</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#61AFEF;"> getState</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> currentState</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#61AFEF;"> subscribe</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">listener</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        listeners</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">listener</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#61AFEF;"> dispatch</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // store.state = deepFreeze(reducer(store.state, action) );</span></span>
<span class="line"><span style="color:#E06C75;">        currentState</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> reducer</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">currentState</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">action</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        listeners</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">listener</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#61AFEF;"> listener</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        getState</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        subscribe</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        dispatch</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>状态管理调用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">createStore</span><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;../MyRedux.js&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// import { createStore } from &#39;redux&#39;;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Counter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">},</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    switch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &quot;ADD_COUNT&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &quot;REDUCE_COUNT&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Counter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">btn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(store);</span></span>
<span class="line"><span style="color:#E5C07B;">    store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;ADD_COUNT&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(store)</span></span>
<span class="line"><span style="color:#61AFEF;">    renderDom</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> renderDom</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> mydiv</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;">   document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.countDiv&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">  if</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &quot;undefined&quot;</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">    mydiv</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">().</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></li></ul><p>ddd</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 编程范式  ： 面向过程  面向对象  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 是一种强调以函数使用为主的软件开发风格 ，也是一种范式。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 多范式语言 函数一等公民</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 一、纯函数:纯函数是对给定的输入返还相同输出的函数.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // f(x) = y;  1-&gt;2  2-&gt;4 3-&gt;6...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 不是纯函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let factor = 3;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // const y = function (x){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return x * factor ;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(y(2));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // const y = function (x){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     let factor = 2;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return x * factor ;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 意义：复用性  可推测性 组合成复杂功能</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // test(&quot;double(2) 等于 4&quot; ,()=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     expect(double(2)).toBe(4);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // })</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 高阶函数：以函数作为输入或者输出的函数被称为高阶函数(Higher-Order Function)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // function test(cb){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     cb &amp;&amp; cb();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // test(function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     console.log(&quot;test&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // function test(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         console.log(&quot;test&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // test()();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 意义；抽象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 命令式 强调“如何做”    声明式编程 ： “做什么”</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let arr = [1,2,3];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // for(let i=0;i&lt;arr.length;i++){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     console.log(arr[i]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 声明式</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // const forEach = function(arr,fn){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     for(let i=0;i&lt;arr.length;i++){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //       fn &amp;&amp; fn(arr[i]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // forEach(arr,function(item){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     console.log(item);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let arr = [true,false,true];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // const every = function(arr,fn){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     let result = true;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     for(let i=0;i&lt;arr.length;i++){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         result = result &amp;&amp; fn(arr[i]);  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return result;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let res =  every(arr,item=&gt;item);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(res);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 缓存特性</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // const once  = function(fn){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     let done = false;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         if(!done){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //             fn();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //             done = true;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         }else{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //             console.log(&quot;已经执行过了&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // function test(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     console.log(&quot;test函数&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let myFn = once(test);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // myFn();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // myFn();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // function memorize(fn){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     let cache = [];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         cache.push(fn(...arguments));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         return cache;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // const sum = function(a,b){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return a + b;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let mySum = memorize(sum);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log( mySum(1,2));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log( mySum(2,2));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log( mySum(3,2));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 柯里化  curry  : 把一个多参数函数转化成一个嵌套的一元函数的过程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // function add(x,y,z,o){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return x+y+z+o;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // add(1,2,3);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // add(1)(2)(3); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //柯里化</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // const curry = function(fn){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return function(x){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         return function(y){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //             return function(z){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //                 return fn(x,y,z);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //             }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 通用柯里化</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // x ---&gt; x,y ---&gt;x,y,z ....</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // const curry = function (fn) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return function curryFn(...args) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         if (args.length &lt; fn.length) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //             return function () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //                 return curryFn(...args, ...arguments);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //             }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         } else {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //             return fn(...args);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let myAdd = curry(add);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(myAdd(1)(2)(3)(4));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 意义；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 参数复用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let str1 = &quot;abcfdsafd&quot;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let str2 = &quot;fdsaljllj&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // function addPre(pre,str){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return pre + &quot;-&quot; + str;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let pre = &quot;AA&quot;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //</span><span style="color:#7F848E;font-style:italic;"> // console.log(addPre(pre,str1));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //</span><span style="color:#7F848E;font-style:italic;"> // console.log(addPre(pre,str2));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //</span><span style="color:#7F848E;font-style:italic;"> // 参数复用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let addPreFn = curry(addPre)(pre);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(addPreFn(str1));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(addPreFn(str2));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 延迟执行；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // function getAjax(url,method){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     let xhr;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     if(XMLHttpRequest){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         xhr = new XMLHttpRequest();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }else{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         xhr = new ActiveXObject(); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return xhr;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // function getAjax(url,method){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     if(XMLHttpRequest){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         return function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //             return new XMLHttpRequest();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }else{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         return function(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //             return new ActiveXObject(); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //         }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let myGetAjax = curry(getAjax)(&quot;api/users&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // let xhr =  myGetAjax(&quot;get&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(xhr());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // bind(this)(1)(2)....</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 组合及管道  compose  pipe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // function aFn(num) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return num + 2;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // function bFn(num) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //     return 2 * num;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 基于值来计算</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log( bFn(aFn(5)));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 无值编程 （合成运算过程）;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// pointFree风格：无值编程  合成运算过程  。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 组合：从右至左执行的；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 管道：从左至右执行的；</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const compose = function(bFn,aFn){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     return function(num){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//         return bFn(aFn(num));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const compose = function(...fns){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     return function(arg){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//        return  fns.reverse().reduce((acc,fn)=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//            return fn(acc);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//        },arg)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 组合</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const compose = (...fns)=&gt;arg=&gt;fns.reverse().reduce((acc,fn)=&gt;fn(acc),arg);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 管道</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const pipe = (...fns)=&gt;arg=&gt;fns.reduce((acc,fn)=&gt;fn(acc),arg);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// let myFn = compose(bFn,aFn);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// let res =  myFn(5);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(res);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const str = &quot;大家好，我是中国人。我爱中国。我们同住地球村。&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;"> // function formatStr(str){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;"> //     let res = str.match(/。/g);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;"> //     return res.length%2===0?&#39;偶数&#39;:&#39;奇数&#39;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;"> // }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;"> // 获取句号</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const getPeriod = str=&gt;str.match(/。/g);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;"> // 获取长度</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const getLength = str=&gt;str.length;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//</span><span style="color:#7F848E;font-style:italic;"> // 判断奇偶</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const oddOrEven = num=&gt;num%2===0?&#39;偶数&#39;:&#39;奇数&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const formatStr = compose(oddOrEven,getLength,getPeriod);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(formatStr(str));</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// forEach map  filter some every reduce ....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 作业：实现 myMap  和 myFilter </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// let arr = [{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     name:&quot;张三&quot;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     age:20</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// },{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     name:&quot;李四&quot;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     age:25</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// },{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     name:&quot;王五&quot;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     age:28</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// let res =  arr.map(item=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   console.log(item);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//   return item;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(res);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// let res = arr.filter(item=&gt;item.age&gt;25);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(res);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br><span class="line-number">277</span><br><span class="line-number">278</span><br><span class="line-number">279</span><br><span class="line-number">280</span><br><span class="line-number">281</span><br><span class="line-number">282</span><br><span class="line-number">283</span><br><span class="line-number">284</span><br><span class="line-number">285</span><br><span class="line-number">286</span><br><span class="line-number">287</span><br><span class="line-number">288</span><br><span class="line-number">289</span><br><span class="line-number">290</span><br><span class="line-number">291</span><br><span class="line-number">292</span><br><span class="line-number">293</span><br><span class="line-number">294</span><br><span class="line-number">295</span><br><span class="line-number">296</span><br><span class="line-number">297</span><br><span class="line-number">298</span><br></div></div><p>redux的使用</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#D19A66;"> content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;numDiv&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;点击&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;module&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#E06C75;"> createStore</span><span style="color:#C678DD;"> from</span><span style="color:#98C379;"> &#39;./createStore.js&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Counter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">state</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">},</span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">    switch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">action</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &#39;ADD&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        case</span><span style="color:#98C379;"> &#39;MINUS&#39;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">:</span><span style="color:#E5C07B;">state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        default</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E06C75;"> state</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createStore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Counter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> btn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">btn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onclick</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#E5C07B;">    store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dispatch</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&#39;ADD&#39;</span><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">    renderDom</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> renderDom</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> mydiv</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.numDiv&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">   let</span><span style="color:#E06C75;"> state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;">  store</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getState</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">   mydiv</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">innerHTML</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> state</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h3 id="函子" tabindex="-1">函子 <a class="header-anchor" href="#函子" aria-label="Permalink to &quot;函子&quot;">​</a></h3><h3 id="容器函子functor" tabindex="-1">容器函子Functor <a class="header-anchor" href="#容器函子functor" aria-label="Permalink to &quot;容器函子Functor&quot;">​</a></h3><p>函子是函数式编程里面最重要的数据类型，也是基本的运算单位和功能单位。</p><ul><li><p>定义自己的Functor。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Container</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#61AFEF;"> of</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Container</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Container</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>通过map修改Functor值</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Container</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#61AFEF;"> of</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Container</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> Container</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_value</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Container</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// console.log(res);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> reslut</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;">  res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // console.log(item);</span></span>
<span class="line"><span style="color:#C678DD;">   return</span><span style="color:#E06C75;"> item</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">3</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">item</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#98C379;"> &quot;最终结果是&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> item</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="mebe函子" tabindex="-1">MeBe函子 <a class="header-anchor" href="#mebe函子" aria-label="Permalink to &quot;MeBe函子&quot;">​</a></h3><p>处理空值的函子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Mabe</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_value</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#61AFEF;"> of</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Mabe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    isNoThing</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_value</span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;">null</span><span style="color:#56B6C2;"> ||</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_value</span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;"> undefined</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">fn</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isNoThing</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Mabe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;">Mabe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_value</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="either-函子" tabindex="-1">Either 函子 <a class="header-anchor" href="#either-函子" aria-label="Permalink to &quot;Either 函子&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Either</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Functor</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">left</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">rigth</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">        super</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">left</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> left</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">right</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> rigth</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">f</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">right</span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;">Either</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">left</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E5C07B;">      Either</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">left</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#61AFEF;"> of</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">left</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">right</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Either</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">left</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,45)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
