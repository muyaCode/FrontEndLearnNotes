import{_ as n,c as a,o as e,ah as l}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/cbd08cdf204746df89b85a421d6230ddtplv-k3u1fbpfcp-jj-mark3024000q75.H0Nr1V_b.webp",p="/FrontEndLearnNotes/assets/c92df7835c844320989d6e8c7f785445tplv-k3u1fbpfcp-jj-mark3024000q75.Zb3Lv0Jw.webp",t="/FrontEndLearnNotes/assets/f5aad3d80dc8450ebd165661c157decbtplv-k3u1fbpfcp-jj-mark3024000q75.9yIpZFGD.webp",r="/FrontEndLearnNotes/assets/188d7e043b4342b7a42655e5dda523f1tplv-k3u1fbpfcp-jj-mark3024000q75.C0YCGoJk.webp",c="/FrontEndLearnNotes/assets/2a8144f4da0e43589ca11f45be658ddctplv-k3u1fbpfcp-jj-mark3024000q75.Cf1uWqZI.webp",i="/FrontEndLearnNotes/assets/9c8cf283f83a46018469d59e8578f28etplv-k3u1fbpfcp-jj-mark3024000q75.TI6wmP5U.webp",d="/FrontEndLearnNotes/assets/ce4e25393e74482f829a5d82332d63f3tplv-k3u1fbpfcp-jj-mark3024000q75.DEengldm.webp",B="/FrontEndLearnNotes/assets/b77a7e188a9345688d81a844b820d70dtplv-k3u1fbpfcp-jj-mark3024000q75.g5tQ6ikP.webp",b="/FrontEndLearnNotes/assets/de8b7f06ce35425bb0632bff37923b41tplv-k3u1fbpfcp-jj-mark3024000q75.BwyjaB0E.webp",y="/FrontEndLearnNotes/assets/5d74e1c9a2eb4d7286f9075c50e41102tplv-k3u1fbpfcp-jj-mark3024000q75.p5AAe5D0.webp",u="/FrontEndLearnNotes/assets/e36328fd5b9c40bbb10150ae30e3986dtplv-k3u1fbpfcp-jj-mark3024000q75.B68Oe6vQ.webp",m="/FrontEndLearnNotes/assets/5af038d0c73a424e9e04eadf7d3b7f98tplv-k3u1fbpfcp-jj-mark3024000q75.CIRA-6Hj.webp",F="/FrontEndLearnNotes/assets/f3070cbb797a4c0687320ca28bbbfa54tplv-k3u1fbpfcp-jj-mark3024000q75.4N9IqqUy.webp",h="/FrontEndLearnNotes/assets/3737f32aa9b44c9397b7f13488c4ca9atplv-k3u1fbpfcp-jj-mark3024000q75.BkFTmfpC.webp",A="/FrontEndLearnNotes/assets/0a6416337ee84521a59522be910085a5tplv-k3u1fbpfcp-jj-mark3024000q75.BYu61VNI.webp",C="/FrontEndLearnNotes/assets/bf4355df19f04570bdfd86a5d4a2de68tplv-k3u1fbpfcp-jj-mark3024000q75.COJKMp4A.webp",g="/FrontEndLearnNotes/assets/a9e5e08775354fb69a8c9a406e24fca8tplv-k3u1fbpfcp-jj-mark3024000q75.ubJnTLG_.webp",f="/FrontEndLearnNotes/assets/dc1e8573700f4f1aa59dbfe45a550e0etplv-k3u1fbpfcp-jj-mark3024000q75.BysTGmLO.webp",E="/FrontEndLearnNotes/assets/e2a01366b5b04bdebd083200087a589etplv-k3u1fbpfcp-jj-mark3024000q75.DHv9LQ5t.webp",v="/FrontEndLearnNotes/assets/Fconditional-breakpoint-console-log.2d18d3e4.CzRFfIv9.gif",q="/FrontEndLearnNotes/assets/Fconsole-table-in-watch.03919d55.CaMLb4Dl.png",k="/FrontEndLearnNotes/assets/Fconditional-breakpoint-DOM-mutation-chrome.27f07619.CZgakdga.png",D="/FrontEndLearnNotes/assets/Fconsole-trace-find-stack.d107e89c.Bt1ZYn6O.gif",_="/FrontEndLearnNotes/assets/Fconditional-breakpoint-parameter-override.375af5d5.Cw9T8sT4.gif",w="/FrontEndLearnNotes/assets/Fconsole-time-performance-profile.9b494665.D4fUfKjs.gif",j="/FrontEndLearnNotes/assets/Fconditional-breakpoint-argument-length.eedb2e1c.CloGdDZ1.gif",x="/FrontEndLearnNotes/assets/Fconditional-breakpoint-arity-check.70c0a60c.DB_Mup79.gif",S="/FrontEndLearnNotes/assets/Fnever-pause-here.a4010ee4.CngRwhSh.png",P="/FrontEndLearnNotes/assets/Fnever-pause-here-result.32dc71c3.apnQhPl9.png",L="/FrontEndLearnNotes/assets/Fconditional-breakpoint-gated.d32764ce.BpaKU4_f.png",N="/FrontEndLearnNotes/assets/Fconditional-breakpoint-gated-enable-from-breakpoint.1c568b6e.Bx2ptahn.png",O="/FrontEndLearnNotes/assets/Felusive-element.495b0945.BfbTKD7n.gif",M="/FrontEndLearnNotes/assets/Felusive-element-inspected.f5f036b4.D1Qr3Puw.gif",T="/FrontEndLearnNotes/assets/Fmonitor-focus.b9692b99.DYCWqMkp.gif",J="/FrontEndLearnNotes/assets/FgetEventListeners.4ae6f43e.B3CeLew0.png",I="/FrontEndLearnNotes/assets/FmonitorEvents.a03f9e53.Dg3dfzL1.gif",$="/FrontEndLearnNotes/assets/image-20240312231146235.v6H1Z_a_.png",H="/FrontEndLearnNotes/assets/640.C31stk5G.gif",R="/FrontEndLearnNotes/assets/640-1713281365154-794.CLJ0XdMQ.gif",U="/FrontEndLearnNotes/assets/640-1713281365154-795.Bn2rHOur.gif",G="/FrontEndLearnNotes/assets/640-1713281365154-796.D3chdW0j.gif",W="/FrontEndLearnNotes/assets/640-1713281365154-797.J0VlphUJ.gif",Y="/FrontEndLearnNotes/assets/640-1713281365154-798.rGgpqqLI.gif",V="/FrontEndLearnNotes/assets/640-1713281365154-799.rsJAVA3N.gif",Z="/FrontEndLearnNotes/assets/640-1713281365154-800.DRcWpMxH.webp",Q="/FrontEndLearnNotes/assets/640-1713281365154-801.BnSe0qZw.webp",z="/FrontEndLearnNotes/assets/640-1713281365154-802.wdnYSGJC.gif",K="/FrontEndLearnNotes/assets/640-1713281365154-803.BSqCiA8_.gif",X="/FrontEndLearnNotes/assets/640-1713281365154-804.DYPwumN4.gif",ss="/FrontEndLearnNotes/assets/640-1713281365154-805.t4ebHQsY.gif",cs=JSON.parse('{"title":"DevTools 开发者工具调试","description":"","frontmatter":{},"headers":[],"relativePath":"Document/DevDebug/DevTools开发者工具调试.md","filePath":"Document/DevDebug/DevTools开发者工具调试.md","lastUpdated":1750954157000}'),ns={name:"Document/DevDebug/DevTools开发者工具调试.md"};function as(es,s,ls,os,ps,ts){return e(),a("div",null,s[0]||(s[0]=[l('<h1 id="devtools-开发者工具调试" tabindex="-1">DevTools 开发者工具调试 <a class="header-anchor" href="#devtools-开发者工具调试" aria-label="Permalink to &quot;DevTools 开发者工具调试&quot;">​</a></h1><p><a href="https://juejin.cn/collection/7072953319152418829" target="_blank" rel="noreferrer">代码调试 - 牧涯的收藏集 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7345297230201716776" target="_blank" rel="noreferrer">关于浏览器调试的30个奇淫技巧 - 掘金 (juejin.cn)</a></p><h2 id="前端属性、方法兼容性查询网站" tabindex="-1">前端属性、方法兼容性查询网站 <a class="header-anchor" href="#前端属性、方法兼容性查询网站" aria-label="Permalink to &quot;前端属性、方法兼容性查询网站&quot;">​</a></h2><p><a href="https://caniuse.com/" target="_blank" rel="noreferrer">https://caniuse.com/</a></p><h2 id="笔记待整理-看语雀《学习笔记》" tabindex="-1">笔记待整理：看语雀《学习笔记》 <a class="header-anchor" href="#笔记待整理-看语雀《学习笔记》" aria-label="Permalink to &quot;笔记待整理：看语雀《学习笔记》&quot;">​</a></h2><p>如何看懂性能调试的火焰图：<a href="https://www.ruanyifeng.com/blog/2017/09/flame-graph.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2017/09/flame-graph.html</a></p><p>Node 调试工具入门教程：<a href="https://www.ruanyifeng.com/blog/2019/12/git-undo.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2019/12/git-undo.html</a></p><h2 id="_1-chrome-devtools-的用处" tabindex="-1">1. Chrome Devtools 的用处 <a class="header-anchor" href="#_1-chrome-devtools-的用处" aria-label="Permalink to &quot;1. Chrome Devtools 的用处&quot;">​</a></h2><p>Chrome DevTools 是一款功能丰富的浏览器内置开发工具集，为Web开发者提供了从元素检查、网络监控到性能分析和安全检测等全方位的开发和调试支持。通过 Devtools 可以实时编辑和调试网页的HTML、CSS和JavaScript代码，监控和分析网络请求和性能数据，管理浏览器数据和应用状态，以及确保网页的安全性。此外，DevTools还支持设备模拟功能，方便开发者测试网页在不同设备上的显示效果。</p><p>**官方文档：**<a href="https://developer.chrome.com/docs/devtools?hl=zh-cn" target="_blank" rel="noreferrer">https://developer.chrome.com/docs/devtools?hl=zh-cn</a></p><p>前端开发：开发预览、远程调试、性能调优、bug 跟踪、断点调试等</p><p>后端开发：网络抓包、开发调试 Response</p><p>测试：服务端 API 数据是否正确、审查页面元素样式及布局、页面加载性能分析、自动化测试</p><p>其他：安装扩展插件，如 AdBlock、Gliffy、Axure 等</p><hr><p>基本用法</p><ul><li>打开关闭</li><li>常用配置</li></ul><p>元素面板</p><ul><li>审查、修改元素</li><li>查看、修改样式</li><li>查看、管理事件</li></ul><p>终端面板</p><ul><li>审查变量</li><li>运行代码</li></ul><h2 id="_2-菜单面板拆解" tabindex="-1">2. 菜单面板拆解 <a class="header-anchor" href="#_2-菜单面板拆解" aria-label="Permalink to &quot;2. 菜单面板拆解&quot;">​</a></h2><p>Elements - 页面 dom 元素</p><p>Console - 控制台</p><p>Sources - 页面静态资源（html+css+js） ---- JavaScript 代码断点调试</p><p>Resources - 数据的存储和缓存</p><p>Network - 网络</p><p>Performance - 设备加载性能分析</p><p>Application - 应用信息，PWA/Storage/Cache/Frames</p><p>Security - 安全分析</p><p>Audits - 审计，自动化测试工具</p><hr><p>网络面板</p><ul><li>过滤、审查网络请求</li><li>网速限制、录制等</li></ul><p>资源面板</p><ul><li>审查、管理 Cookie</li><li>查看、管理 LocalStorage</li></ul><p>源码面板</p><ul><li>查看、格式化源代码</li><li>实时 Javascript 调试</li></ul><h3 id="查看元素" tabindex="-1">查看元素 <a class="header-anchor" href="#查看元素" aria-label="Permalink to &quot;查看元素&quot;">​</a></h3><h3 id="网络请求" tabindex="-1">网络请求 <a class="header-anchor" href="#网络请求" aria-label="Permalink to &quot;网络请求&quot;">​</a></h3><h3 id="断点调试-javascript" tabindex="-1">断点调试 JavaScript <a class="header-anchor" href="#断点调试-javascript" aria-label="Permalink to &quot;断点调试 JavaScript&quot;">​</a></h3><h3 id="performance-设备加载性能分析" tabindex="-1">Performance-设备加载性能分析 <a class="header-anchor" href="#performance-设备加载性能分析" aria-label="Permalink to &quot;Performance-设备加载性能分析&quot;">​</a></h3><h2 id="css-overview-工具-css-调试工具" tabindex="-1">CSS Overview 工具：CSS 调试工具 <a class="header-anchor" href="#css-overview-工具-css-调试工具" aria-label="Permalink to &quot;CSS Overview 工具：CSS 调试工具&quot;">​</a></h2><p>视频参考：<a href="https://www.bilibili.com/video/BV1kv4y1D7Y5/?spm_id_from=333.999.0.0&amp;vd_source=5f0c99b3deddffe219938763769b15ac" target="_blank" rel="noreferrer">调试 CSS 好帮手 - CSS Overview 工具_哔哩哔哩_bilibili</a></p><p>开发者工具--右上角三个点(自定义和控制开发工具)--更多工具(More tools)--CSS 概述(# CSS Overview)：点击蓝色按钮--捕获概述(Capture overview)：就可以开始根据分析来进行调试</p><p>分析调试颜色对比度和其他信息</p><p>字体信息：是否有继承</p><p>未使用的声明</p><p>媒体查询</p><h2 id="内存泄漏实战调试" tabindex="-1">内存泄漏实战调试 <a class="header-anchor" href="#内存泄漏实战调试" aria-label="Permalink to &quot;内存泄漏实战调试&quot;">​</a></h2><h3 id="chrome-devtools-查看内存情况" tabindex="-1">Chrome devTools 查看内存情况 <a class="header-anchor" href="#chrome-devtools-查看内存情况" aria-label="Permalink to &quot;Chrome devTools 查看内存情况&quot;">​</a></h3><blockquote><ul><li>打开<code>Chrome</code>的无痕模式，这样做的目的是为了屏蔽掉<code>Chrome</code>插件对我们之后测试内存占用情况的影响</li><li>打开开发者工具，找到<code>Performance</code>这一栏，可以看到其内部带着一些功能按钮，例如：开始录制按钮；刷新页面按钮；清空记录按钮；记录并可视化 js 内存、节点、事件监听器按钮；触发垃圾回收机制按钮等</li></ul></blockquote><p><img src="'+o+'" alt="img"></p><p>简单录制一下百度页面，看看我们能获得什么，如下动图所示：</p><p><img src="'+p+'" alt="img"></p><blockquote><p>从上图中我们可以看到，在页面从零到加载完成这个过程中<code>JS Heap</code>（js 堆内存）、<code>documents</code>（文档）、<code>Nodes</code>（DOM 节点）、<code>Listeners</code>（监听器）、<code>GPU memory</code>（<code>GPU</code>内存）的最低值、最高值以及随时间的走势曲线，这也是我们主要关注的点</p></blockquote><p>看看开发者工具中的<code>Memory</code>一栏，其主要是用于记录页面堆内存的具体情况以及 js 堆内存随加载时间线动态的分配情况</p><p><img src="'+t+'" alt="img"></p><p>堆快照就像照相机一样，能记录你当前页面的堆内存情况，每快照一次就会产生一条快照记录</p><p><img src="'+r+'" alt="img"></p><blockquote><p>如上图所示，刚开始执行了一次快照，记录了当时堆内存空间占用为<code>33.7MB</code>，然后我们点击了页面中某些按钮，又执行一次快照，记录了当时堆内存空间占用为<code>32.5MB</code>。并且点击对应的快照记录，能看到当时所有内存中的变量情况（结构、占总占用内存的百分比...）</p></blockquote><p><img src="'+c+'" alt="img"></p><blockquote><p>在开始记录后，我们可以看到图中右上角有起伏的蓝色与灰色的柱形图，其中<code>蓝色</code>表示当前时间线下占用着的内存；<code>灰色</code>表示之前占用的内存空间已被清除释放</p></blockquote><p>在得知有内存泄漏的情况存在时，我们可以改用<code>Memory</code>来更明确得确认问题和定位问题</p><p>首先可以用<code>Allocation instrumentation on timeline</code>来确认问题，如下图所示：</p><p><img src="'+i+`" alt="img"></p><h3 id="内存泄漏的场景" tabindex="-1">内存泄漏的场景 <a class="header-anchor" href="#内存泄漏的场景" aria-label="Permalink to &quot;内存泄漏的场景&quot;">​</a></h3><ul><li>闭包使用不当引起内存泄漏</li><li>全局变量</li><li>分离的<code>DOM</code>节点</li><li>控制台的打印</li><li>遗忘的定时器</li></ul><p><strong>1. 闭包使用不当引起内存泄漏</strong></p><p>使用<code>Performance</code>和<code>Memory</code>来查看一下闭包导致的内存泄漏问题</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#D19A66;"> onclick</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;</span><span style="color:#61AFEF;">myClick</span><span style="color:#98C379;">()&quot;</span><span style="color:#ABB2BF;">&gt;执行fn1函数&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> fn1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 这里设置了一个很大的数组对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		function</span><span style="color:#61AFEF;"> fn2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		fn2</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> myClick</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">fn1</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p>在退出<code>fn1</code>函数执行上下文后，该上下文中的变量<code>a</code>本应被当作垃圾数据给回收掉，但因<code>fn1</code>函数最终将变量<code>a</code>返回并赋值给全局变量<code>res</code>，其产生了对变量<code>a</code>的引用，所以变量<code>a</code>被标记为活动变量并一直占用着相应的内存，假设变量<code>res</code>后续用不到，这就算是一种闭包使用不当的例子</p></blockquote><p>设置了一个按钮，每次执行就会将<code>fn1</code>函数的返回值添加到全局数组变量<code>res</code>中，是为了能在<code>performacne</code>的曲线图中看出效果，如图所示：</p><p><img src="`+d+'" alt="img"></p><ul><li>在每次录制开始时手动触发一次垃圾回收机制，这是为了确认一个初始的堆内存基准线，便于后面的对比，然后我们点击了几次按钮，即往全局数组变量<code>res</code>中添加了几个比较大的数组对象，最后再触发一次垃圾回收，发现录制结果的 JS Heap 曲线刚开始成阶梯式上升的，最后的曲线的高度比基准线要高，说明可能是存在内存泄漏的问题</li><li>在得知有内存泄漏的情况存在时，我们可以改用<code>Memory</code>来更明确得确认问题和定位问题</li><li>首先可以用<code>Allocation instrumentation on timeline</code>来确认问题，如下图所示：</li></ul><p><img src="'+B+'" alt="img"></p><ul><li>在我们每次点击按钮后，动态内存分配情况图上都会出现一个<code>蓝色的柱形</code>，并且在我们触发垃圾回收后，<code>蓝色柱形</code>都没变成灰色柱形，即之前分配的内存并未被清除</li><li>所以此时我们就可以更明确得确认内存泄漏的问题是存在的了，接下来就精准定位问题，可以利用<code>Heap snapshot</code>来定位问题，如图所示：</li></ul><p><img src="'+b+`" alt="img"></p><ul><li>第一次先点击快照记录初始的内存情况，然后我们多次点击按钮后再次点击快照，记录此时的内存情况，发现从原来的<code>1.1M</code>内存空间变成了<code>1.4M</code>内存空间，然后我们选中第二条快照记录，可以看到右上角有个<code>All objects</code>的字段，其表示展示的是当前选中的快照记录所有对象的分配情况，而我们想要知道的是第二条快照与第一条快照的区别在哪，所以选择<code>Object allocated between Snapshot1 and Snapshot2</code>即展示第一条快照和第二条快照存在差异的内存对象分配情况，此时可以看到 Array 的百分比很高，初步可以判断是该变量存在问题，点击查看详情后就能查看到该变量对应的具体数据了</li></ul><p>以上就是一个判断闭包带来内存泄漏问题并简单定位的方法了</p><p><strong>2. 全局变量</strong></p><p>全局的变量一般是不会被垃圾回收掉的当然这并不是说变量都不能存在全局，只是有时候会因为疏忽而导致某些变量流失到全局，例如未声明变量，却直接对某变量进行赋值，就会导致该变量在全局创建，如下所示：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 此处变量name未被声明</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">99999999</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fn1</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>此时这种情况就会在全局自动创建一个变量<code>name</code>，并将一个很大的数组赋值给<code>name</code>，又因为是全局变量，所以该内存空间就一直不会被释放</li><li>解决办法的话，自己平时要多加注意，不要在变量未声明前赋值，或者也可以<code>开启严格模式</code>，这样就会在不知情犯错时，收到报错警告，例如</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#98C379;">	&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">99999999</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fn1</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>3. 分离的<code>DOM</code>节点</strong></p><p>假设你手动移除了某个<code>dom</code>节点，本应释放该 dom 节点所占用的内存，但却因为疏忽导致某处代码仍对该被移除节点有引用，最终导致该节点所占内存无法被释放，例如这种情况</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;child&quot;</span><span style="color:#ABB2BF;">&gt;我是子元素&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;移除&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> btn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> child</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.child&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> root</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#root&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	btn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>该代码所做的操作就是点击按钮后移除<code>.child</code>的节点，虽然点击后，该节点确实从<code>dom</code>被移除了，但全局变量<code>child</code>仍对该节点有引用，所以导致该节点的内存一直无法被释放，可以尝试用<code>Memory</code>的快照功能来检测一下，如图所示</p></blockquote><p><img src="`+y+`" alt="img"></p><blockquote><p>同样的先记录一下初始状态的快照，然后点击移除按钮后，再点击一次快照，此时内存大小我们看不出什么变化，因为移除的节点占用的内存实在太小了可以忽略不计，但我们可以点击第二条快照记录，在筛选框里输入<code>detached</code>，于是就会展示所有脱离了却又未被清除的节点对象</p></blockquote><p>解决办法如下图所示：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;child&quot;</span><span style="color:#ABB2BF;">&gt;我是子元素&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;移除&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> btn</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	btn</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> child</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;.child&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> root</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#root&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		root</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">removeChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">child</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>改动很简单，就是将对<code>.child</code>节点的引用移动到了<code>click</code>事件的回调函数中，那么当移除节点并退出回调函数的执行上文后就会自动清除对该节点的引用，那么自然就不会存在内存泄漏的情况了，我们来验证一下，如下图所示：</p></blockquote><p><img src="`+u+`" alt="img"></p><p>结果很明显，这样处理过后就不存在内存泄漏的情况了</p><p><strong>4. 控制台的打印</strong></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;按钮&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们在按钮的点击回调事件中创建了一个很大的数组对象并打印，用<code>performance</code>来验证一下</p><p><img src="`+m+`" alt="img"></p><blockquote><p>开始录制，先触发一次垃圾回收清除初始的内存，然后点击三次按钮，即执行了三次点击事件，最后再触发一次垃圾回收。查看录制结果发现<code>JS Heap</code>曲线成阶梯上升，并且最终保持的高度比初始基准线高很多，这说明每次执行点击事件创建的很大的数组对象<code>obj</code>都因为<code>console.log</code>被浏览器保存了下来并且无法被回收</p></blockquote><p>接下来注释掉<code>console.log</code>，再来看一下结果：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;按钮&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(obj);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="`+F+'" alt="img"></p><p>可以看到没有打印以后，每次创建的<code>obj</code>都立马被销毁了，并且最终触发垃圾回收机制后跟初始的基准线同样高，说明已经不存在内存泄漏的现象了</p><p>其实同理 <code>console.log</code>也可以用<code>Memory</code>来进一步验证</p><p>未注释 <code>console.log</code></p><p><img src="'+h+'" alt="img"></p><p>注释掉了<code>console.log</code></p><p><img src="'+A+`" alt="img"></p><blockquote><p>最后简单总结一下：在开发环境下，可以使用控制台打印便于调试，但是在生产环境下，尽可能得不要在控制台打印数据。所以我们经常会在代码中看到类似如下的操作：</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 如果在开发环境下，打印变量obj</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">isDev</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>这样就避免了生产环境下无用的变量打印占用一定的内存空间，同样的除了<code>console.log</code>之外，<code>console.error</code>、<code>console.info</code>、<code>console.dir</code>等等都不要在生产环境下使用</p></blockquote><p><strong>5. 遗忘的定时器</strong></p><blockquote><p>定时器也是平时很多人会忽略的一个问题，比如定义了定时器后就再也不去考虑清除定时器了，这样其实也会造成一定的内存泄漏。来看一个代码示例：</p></blockquote><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;开启定时器&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> fn1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> largeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">		setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> myObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> largeObj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">		fn1</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这段代码是在点击按钮后执行<code>fn1</code>函数，<code>fn1</code>函数内创建了一个很大的数组对象<code>largeObj</code>，同时创建了一个<code>setInterval</code>定时器，定时器的回调函数只是简单的引用了一下变量<code>largeObj</code>，我们来看看其整体的内存分配情况吧：</p><p><img src="`+C+'" alt="img"></p><p>按道理来说点击按钮执行<code>fn1</code>函数后会退出该函数的执行上下文，紧跟着函数体内的局部变量应该被清除，但图中<code>performance</code>的录制结果显示似乎是存在内存泄漏问题的，即最终曲线高度比基准线高度要高，那么再用<code>Memory</code>来确认一次：</p><p><img src="'+g+`" alt="img"></p><ul><li>在我们点击按钮后，从动态内存分配的图上看到出现一个蓝色柱形，说明浏览器为变量<code>largeObj</code>分配了一段内存，但是之后这段内存并没有被释放掉，说明的确存在内存泄漏的问题，原因其实就是因为<code>setInterval</code>的回调函数内对变量<code>largeObj</code>有一个引用关系，而定时器一直未被清除，所以变量<code>largeObj</code>的内存也自然不会被释放</li><li>那么我们如何来解决这个问题呢，假设我们只需要让定时器执行三次就可以了，那么我们可以改动一下代码：</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;开启定时器&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">	function</span><span style="color:#61AFEF;"> fn1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> largeObj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> timer</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">index</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">clearInterval</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			let</span><span style="color:#E06C75;"> myObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> largeObj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">			index</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelector</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;button&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;click&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#61AFEF;">		fn1</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>现在我们再通过<code>performance</code>和<code>memory</code>来看看还不会存在内存泄漏的问题</p><ul><li><code>performance</code></li></ul><p><img src="`+f+'" alt="img"></p><blockquote><p>这次的录制结果就能看出，最后的曲线高度和初始基准线的高度一样，说明并没有内存泄漏的情况</p></blockquote><ul><li><code>memory</code></li></ul><p><img src="'+E+'" alt="img"></p><p>这里做一个解释，图中刚开始出现的蓝色柱形是因为我在录制后刷新了页面，可以忽略；然后我们点击了按钮，看到又出现了一个蓝色柱形，此时就是为<code>fn1</code>函数中的变量<code>largeObj</code>分配了内存，<code>3s</code>后该内存又被释放了，即变成了灰色柱形。所以我们可以得出结论，这段代码不存在内存泄漏的问题</p><blockquote><p>简单总结一下： 大家在平时用到了定时器，如果在用不到定时器后一定要清除掉，否则就会出现本例中的情况。除了<code>setTimeout</code>和<code>setInterval</code>，其实浏览器还提供了一个<code>API</code>也可能就存在这样的问题，那就是<code>requestAnimationFrame</code></p></blockquote><h2 id="_67-个奇怪的调试技巧" tabindex="-1">67 个奇怪的调试技巧 <a class="header-anchor" href="#_67-个奇怪的调试技巧" aria-label="Permalink to &quot;67 个奇怪的调试技巧&quot;">​</a></h2><p>翻译自：<a href="https://alan.norbauer.com/articles/browser-debugging-tricks" target="_blank" rel="noreferrer">67 Weird Debugging Tricks Your Browser Doesn&#39;t Want You to Know | Alan Norbauer</a></p><p>一系列有用的、不明显的技巧，可帮助您充分利用浏览器的 <a href="https://alan.norbauer.com/articles/browser-debugging-tricks#user-content-fn-1" target="_blank" rel="noreferrer">1</a> 调试器。假设对开发人员工具有中级或更高的了解。</p><h3 id="高级条件断点" tabindex="-1">高级条件断点 <a class="header-anchor" href="#高级条件断点" aria-label="Permalink to &quot;高级条件断点&quot;">​</a></h3><p>通过在您意想不到的地方使用具有副作用的表达式，我们可以从条件断点等基本功能中挤出更多功能。</p><h4 id="日志点-跟踪点" tabindex="-1">日志点/跟踪点 <a class="header-anchor" href="#日志点-跟踪点" aria-label="Permalink to &quot;日志点/跟踪点&quot;">​</a></h4><p>例如，我们可以在断点中 <code>console.log</code> 。日志点是记录到控制台而不暂停执行的断点。虽然 Microsoft Edge 内置日志点已经有一段时间了，Chrome 也只是在 v73 中添加了它们，但 Firefox 却没有。但是，我们可以使用条件断点在任何浏览器中模拟它们。</p><p><img src="'+v+'" alt="Conditional Breakpoint - console.log"></p><p>如果您还想获得该行执行次数的运行计数，请使用 <code>console.count</code> 而不是 <code>console.log</code> 。</p><p>更新（2020 年 5 月）：所有主要浏览器现在都直接支持日志点/跟踪点（Chrome 日志点、Edge 跟踪点、Firefox 日志点）</p><h5 id="监视窗格" tabindex="-1">监视窗格 <a class="header-anchor" href="#监视窗格" aria-label="Permalink to &quot;监视窗格&quot;">​</a></h5><p>您还可以在监视窗格中使用 <code>console.log</code> 。例如，要在每次应用程序在调试器中暂停时转储 <code>localStorage</code> 的快照，您可以创建一个 <code>console.table(localStorage)</code> 监视：</p><p><img src="'+q+'" alt="console.table in watch pane"></p><p>或者要在 DOM 突变后执行表达式，请设置 DOM 突变断点（在元素检查器中）：<img src="'+k+'" alt="DOM Mutation Breakpoint"></p><p>然后添加您的手表表达式，例如记录 DOM 的快照： <code>(window.doms = window.doms || []).push(document.documentElement.outerHTML)</code> 。现在，在修改任何 DOM 子树之后，调试器将暂停执行，新的 DOM 快照将位于 <code>window.doms</code> 数组的末尾。 （无法创建不暂停执行的 DOM 突变断点。）</p><h5 id="跟踪调用堆栈" tabindex="-1">跟踪调用堆栈 <a class="header-anchor" href="#跟踪调用堆栈" aria-label="Permalink to &quot;跟踪调用堆栈&quot;">​</a></h5><p>假设您有一个显示加载微调器的函数和一个隐藏它的函数，但在代码中的某个地方您调用了 show 方法，而没有匹配的 hide 调用。如何找到未配对的显示通话的来源？在 show 方法的条件断点中使用 <code>console.trace</code> ，运行代码，找到 show 方法的最后一个堆栈跟踪，然后单击调用者转到代码：</p><p><img src="'+D+'" alt="console.trace in conditional breakpoint"></p><h4 id="改变程序行为" tabindex="-1">改变程序行为 <a class="header-anchor" href="#改变程序行为" aria-label="Permalink to &quot;改变程序行为&quot;">​</a></h4><p>通过使用对程序行为有副作用的表达式，我们可以在浏览器中即时更改程序行为。</p><p>例如，您可以将参数重写为 <code>getPerson</code> 函数 <code>id</code> 。由于 <code>id=1</code> 的计算结果为 true，因此该条件断点将暂停调试器。为了防止这种情况，请将 <code>, false</code> 附加到表达式中。</p><p><img src="'+_+'" alt="Conditional Breakpoint - parameter override"></p><h4 id="快速而肮脏的性能分析" tabindex="-1">快速而肮脏的性能分析 <a class="header-anchor" href="#快速而肮脏的性能分析" aria-label="Permalink to &quot;快速而肮脏的性能分析&quot;">​</a></h4><p>您不应该将性能分析与条件断点评估时间之类的内容混为一谈，但如果您想要快速准确地测量某项运行所需的时间，则可以在条件断点中使用控制台计时 API。在起点设置一个具有条件 <code>console.time(&#39;label&#39;)</code> 的断点，并在终点设置一个具有条件 <code>console.timeEnd(&#39;label&#39;)</code> 的断点。每次您正在测量的东西运行时，浏览器都会将其花费的时间记录到控制台。</p><p><img src="'+w+'" alt="Conditional Breakpoint - performance profile"></p><h4 id="使用函数参数" tabindex="-1">使用函数参数 <a class="header-anchor" href="#使用函数参数" aria-label="Permalink to &quot;使用函数参数&quot;">​</a></h4><h5 id="参数数量中断" tabindex="-1">参数数量中断 <a class="header-anchor" href="#参数数量中断" aria-label="Permalink to &quot;参数数量中断&quot;">​</a></h5><p>仅在使用 3 个参数调用当前函数时暂停： <code>arguments.callee.length === 3</code></p><p>当您有一个带有可选参数的重载函数时很有用。</p><p><img src="'+j+'" alt="Conditional Breakpoint - argument length"></p><h5 id="函数参数数量不匹配时中断" tabindex="-1">函数参数数量不匹配时中断 <a class="header-anchor" href="#函数参数数量不匹配时中断" aria-label="Permalink to &quot;函数参数数量不匹配时中断&quot;">​</a></h5><p>仅在使用错误数量的参数调用当前函数时暂停： <code>(arguments.callee.length) != arguments.length</code></p><p><img src="'+x+'" alt="Conditional Breakpoint - arity check"></p><p>在查找函数调用站点中的错误时很有用。</p><h4 id="使用时间" tabindex="-1">使用时间 <a class="header-anchor" href="#使用时间" aria-label="Permalink to &quot;使用时间&quot;">​</a></h4><h5 id="跳过页面加载" tabindex="-1">跳过页面加载 <a class="header-anchor" href="#跳过页面加载" aria-label="Permalink to &quot;跳过页面加载&quot;">​</a></h5><p>页面加载后 5 秒才暂停： <code>performance.now() &gt; 5000</code></p><p>当您想要设置断点但您只想在初始页面加载后暂停执行时很有用。</p><h5 id="跳过-n-秒" tabindex="-1">跳过 N 秒 <a class="header-anchor" href="#跳过-n-秒" aria-label="Permalink to &quot;跳过 N 秒&quot;">​</a></h5><p>如果在接下来的 5 秒内命中断点，则不暂停执行，但在以下时间后随时暂停： <code>window.baseline = window.baseline || Date.now(), (Date.now() - window.baseline) &gt; 5000</code></p><p>您可以随时从控制台重置计数器： <code>window.baseline = Date.now()</code></p><h4 id="使用-css" tabindex="-1">使用 CSS <a class="header-anchor" href="#使用-css" aria-label="Permalink to &quot;使用 CSS&quot;">​</a></h4><p>根据计算出的 CSS 值暂停，例如仅当文档正文具有红色背景色时暂停执行： <code>window.getComputedStyle(document.body).backgroundColor === &quot;rgb(255,0,0)&quot;</code></p><h4 id="甚至仅通话" tabindex="-1">甚至仅通话 <a class="header-anchor" href="#甚至仅通话" aria-label="Permalink to &quot;甚至仅通话&quot;">​</a></h4><p>仅在执行该行时每隔一段时间暂停一次： <code>window.counter = (window.counter || 0) + 1, window.counter % 2 === 0</code></p><h4 id="样品断裂" tabindex="-1">样品断裂 <a class="header-anchor" href="#样品断裂" aria-label="Permalink to &quot;样品断裂&quot;">​</a></h4><p>仅在该行执行的随机样本上中断，例如该行每执行 10 次，只中断 1 次： <code>Math.random() &lt; 0.1</code></p><h4 id="永远不要在这里暂停" tabindex="-1">永远不要在这里暂停 <a class="header-anchor" href="#永远不要在这里暂停" aria-label="Permalink to &quot;永远不要在这里暂停&quot;">​</a></h4><p><strong>Chrome</strong></p><p>当您右键单击装订线并选择“永不在此暂停”时，Chrome 会创建一个条件断点 <code>false</code> 并且永远不会通过。这使得调试器永远不会在此行暂停。</p><p><img src="'+S+'" alt="Never Pause Here"></p><p><img src="'+P+'" alt="Never Pause Here Result"></p><p>当您想要从 XHR 断点中免除一行、忽略正在抛出的异常等时很有用。</p><h4 id="自动实例-id" tabindex="-1">自动实例 ID <a class="header-anchor" href="#自动实例-id" aria-label="Permalink to &quot;自动实例 ID&quot;">​</a></h4><p>通过在构造函数中设置条件断点，自动为类的每个实例分配唯一的 ID： <code>(window.instances = window.instances || []).push(this)</code></p><p>然后检索唯一 ID： <code>window.instances.indexOf(instance)</code> （例如，在类方法中时为 <code>window.instances.indexOf(this)</code> ）</p><h4 id="以编程方式切换" tabindex="-1">以编程方式切换 <a class="header-anchor" href="#以编程方式切换" aria-label="Permalink to &quot;以编程方式切换&quot;">​</a></h4><p>使用全局布尔值来门控一个或多个条件断点：</p><p><img src="'+L+'" alt="Boolean gate"></p><p>然后以编程方式切换布尔值，例如</p><ul><li><p>手动，从控制台</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">1</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">enableBreakpoints</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>从其他断点<img src="'+N+`" alt="Boolean gate - enable from other breakpoint"></p></li><li><p>从控制台上的计时器</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">1</span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">enableBreakpoints</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">), </span><span style="color:#D19A66;">5000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>etc</p></li></ul><h3 id="monitor-类调用" tabindex="-1">Monitor() 类调用 <a class="header-anchor" href="#monitor-类调用" aria-label="Permalink to &quot;Monitor() 类调用&quot;">​</a></h3><p><strong>Chrome</strong></p><p>您可以使用 Chrome 的 <code>monitor</code> 命令行方法轻松跟踪对类方法的所有调用。例如。给定一个类 <code>Dog</code></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Dog</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	bark</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">count</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		/* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果我们想知道对 <code>Dog</code> 的所有实例进行的所有调用，请将其粘贴到命令行中：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyNames</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">k</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> monitor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">]));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>你将在控制台中得到输出：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&gt; function bark called with arguments: 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果您想暂停任何方法调用的执行（而不是仅仅记录到控制台），可以使用 <code>debug</code> 而不是 <code>monitor</code> 。</p><h4 id="来自特定实例" tabindex="-1">来自特定实例 <a class="header-anchor" href="#来自特定实例" aria-label="Permalink to &quot;来自特定实例&quot;">​</a></h4><p><strong>Chrome</strong></p><p>如果您不知道该类但有一个实例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyNames</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">k</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> monitor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">]));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当您想编写一个对任何类的任何实例执行此操作的函数（而不仅仅是 <code>Dog</code> ）时很有用</p><h3 id="调用和调试函数" tabindex="-1">调用和调试函数 <a class="header-anchor" href="#调用和调试函数" aria-label="Permalink to &quot;调用和调试函数&quot;">​</a></h3><p>在控制台中调用要调试的函数之前，请调用 <code>debugger</code> 。例如。给定：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>从您的控制台：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&gt; debugger; </span><span style="color:#61AFEF;">fn(1</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后“Step into next function call”来调试 <code>fn</code> 的实现。</p><p>当您不想查找 <code>fn</code> 的定义并手动添加断点，或者如果 <code>fn</code> 动态绑定到函数并且您不知道源在哪里时，这很有用。</p><p>在 Chrome 中，您还可以选择在命令行上调用 <code>debug(fn)</code> ，调试器将在每次调用时暂停 <code>fn</code> 内的执行。</p><h3 id="url-更改时暂停执行" tabindex="-1">URL 更改时暂停执行 <a class="header-anchor" href="#url-更改时暂停执行" aria-label="Permalink to &quot;URL 更改时暂停执行&quot;">​</a></h3><p>要在单页应用程序修改 URL 之前暂停执行（即发生某些路由事件）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> dbg</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	debugger</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">pushState</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> dbg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">history</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">replaceState</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> dbg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onhashchange</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> dbg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">onpopstate</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> dbg</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>创建一个暂停执行而不中断导航的 <code>dbg</code> 版本是留给读者的练习。</p><p>另请注意，当代码直接调用 <code>window.location.replace/assign</code> 时，这不会处理，因为页面将在分配后立即卸载，因此无需调试。如果您仍然想查看这些重定向的来源（并调试重定向时的状态），在 Chrome 中您可以 <code>debug</code> 相关方法：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">debug</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">replace</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">debug</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">location</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">assign</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="调试属性读取" tabindex="-1">调试属性读取 <a class="header-anchor" href="#调试属性读取" aria-label="Permalink to &quot;调试属性读取&quot;">​</a></h3><p>如果您有一个对象并且想知道何时读取该对象的属性，请使用带有 <code>debugger</code> 调用的对象 getter。例如，将 <code>{configOption: true}</code> 转换为 <code>{get configOption() { debugger; return true; }}</code> （在原始源代码中或使用条件断点）。</p><p>当您将一些配置选项传递给某些东西并且您想了解它们如何使用时很有用。</p><h3 id="使用-copy" tabindex="-1">使用 copy() <a class="header-anchor" href="#使用-copy" aria-label="Permalink to &quot;使用 copy()&quot;">​</a></h3><p><strong>Chrome、Firefox</strong></p><p>您可以使用 <code>copy()</code> 控制台 API 将感兴趣的信息从浏览器直接复制到剪贴板，而无需任何字符串截断。您可能想要复制一些有趣的内容：</p><ul><li>当前 DOM 的快照： <code>copy(document.documentElement.outerHTML)</code></li><li>有关资源的元数据（例如图像）： <code>copy(performance.getEntriesByType(&quot;resource&quot;))</code></li><li>一个大的 JSON blob，格式为： <code>copy(JSON.parse(blob))</code></li><li>本地存储的转储： <code>copy(localStorage)</code></li><li>ETC。</li></ul><h3 id="调试-html-css" tabindex="-1">调试 HTML/CSS <a class="header-anchor" href="#调试-html-css" aria-label="Permalink to &quot;调试 HTML/CSS&quot;">​</a></h3><p>JS 控制台在诊断 HTML/CSS 问题时非常有用。</p><h4 id="在禁用-js-的情况下检查-dom" tabindex="-1">在禁用 JS 的情况下检查 DOM <a class="header-anchor" href="#在禁用-js-的情况下检查-dom" aria-label="Permalink to &quot;在禁用 JS 的情况下检查 DOM&quot;">​</a></h4><p>在 DOM 检查器中按 ctrl+\\ (Chrome/Windows) 可随时暂停 JS 执行。这允许您检查 DOM 的快照，而不必担心 JS 改变 DOM 或事件（例如鼠标悬停）导致 DOM 从您的下方发生变化。</p><h4 id="检查难以捉摸的元素" tabindex="-1">检查难以捉摸的元素 <a class="header-anchor" href="#检查难以捉摸的元素" aria-label="Permalink to &quot;检查难以捉摸的元素&quot;">​</a></h4><p>假设您想要检查仅有条件出现的 DOM 元素。检查所述元素需要将鼠标移动到它，但是当你尝试这样做时，它就会消失：</p><p><img src="`+O+'" alt="Elusive element"></p><p>要检查该元素，您可以将其粘贴到控制台中： <code>setTimeout(function() { debugger; }, 5000);</code> 。这给了你 5 秒的时间来触发 UI，然后一旦 5 秒计时器到了，JS 执行就会暂停，并且没有任何东西会让你的元素消失。您可以自由地将鼠标移动到开发工具而不会丢失该元素：</p><p><img src="'+M+`" alt="Elusive element - inspected"></p><p>当 JS 执行暂停时，您可以检查元素、编辑其 CSS、在 JS 控制台中执行命令等。</p><p>在检查依赖于特定光标位置、焦点等的 DOM 时很有用。</p><h4 id="记录-dom-的快照" tabindex="-1">记录 DOM 的快照 <a class="header-anchor" href="#记录-dom-的快照" aria-label="Permalink to &quot;记录 DOM 的快照&quot;">​</a></h4><p>要获取当前状态下 DOM 的副本：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">1</span><span style="color:#61AFEF;">copy</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">outerHTML</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>每秒记录一次 DOM 快照：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">doms</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> domStr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">outerHTML</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	doms</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">domStr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>或者将其转储到控制台：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> domStr</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">documentElement</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">outerHTML</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;snapshotting DOM: &quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">domStr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="监控重点元素" tabindex="-1">监控重点元素 <a class="header-anchor" href="#监控重点元素" aria-label="Permalink to &quot;监控重点元素&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> last</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">activeElement</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">	setInterval</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">activeElement</span><span style="color:#56B6C2;"> !==</span><span style="color:#E06C75;"> last</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">			last</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">activeElement</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Focus changed to: &quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">last</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><img src="`+T+`" alt="Monitor focused element"></p><h4 id="寻找大胆的元素" tabindex="-1">寻找大胆的元素 <a class="header-anchor" href="#寻找大胆的元素" aria-label="Permalink to &quot;寻找大胆的元素&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#61AFEF;"> isBold</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> w</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getComputedStyle</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">fontWeight</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> w</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;bold&quot;</span><span style="color:#56B6C2;"> ||</span><span style="color:#E06C75;"> w</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;700&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">isBold</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="只是后裔" tabindex="-1">只是后裔 <a class="header-anchor" href="#只是后裔" aria-label="Permalink to &quot;只是后裔&quot;">​</a></h5><p>或者只是当前在检查器中选择的元素的后代：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Array</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">$0</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">querySelectorAll</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;*&quot;</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">isBold</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="参考当前选定的元素" tabindex="-1">参考当前选定的元素 <a class="header-anchor" href="#参考当前选定的元素" aria-label="Permalink to &quot;参考当前选定的元素&quot;">​</a></h4><p>控制台中的 <code>$0</code> 是对元素检查器中当前选定元素的自动引用。</p><h5 id="以前的元素" tabindex="-1">以前的元素 <a class="header-anchor" href="#以前的元素" aria-label="Permalink to &quot;以前的元素&quot;">​</a></h5><p><strong>Chrome、Edge</strong></p><p>在 Chrome 和 Edge 中，您可以使用 <code>$1</code> 访问上次检查的元素，使用 <code>$2</code> 访问之前的元素，等等。</p><h5 id="获取事件监听器" tabindex="-1">获取事件监听器 <a class="header-anchor" href="#获取事件监听器" aria-label="Permalink to &quot;获取事件监听器&quot;">​</a></h5><p><strong>Chrome</strong></p><p>在 Chrome 中，您可以检查当前所选元素的事件侦听器： <code>getEventListeners($0)</code> ，例如</p><p><img src="`+J+'" alt="getEventListeners"></p><h4 id="监视元素的事件" tabindex="-1">监视元素的事件 <a class="header-anchor" href="#监视元素的事件" aria-label="Permalink to &quot;监视元素的事件&quot;">​</a></h4><p><strong>Chrome</strong></p><p>调试所选元素的所有事件： <code>monitorEvents($0)</code></p><p>调试所选元素的特定事件： <code>monitorEvents($0, [&quot;control&quot;, &quot;key&quot;])</code></p><p><img src="'+I+'" alt="monitorEvents"></p><h3 id="footnotes" tabindex="-1">Footnotes <a class="header-anchor" href="#footnotes" aria-label="Permalink to &quot;Footnotes&quot;">​</a></h3><p>Chrome、Firefox 和 Edge 均支持提示，除非浏览器徽标另有说明： <img src="'+$+'" alt="image-20240312231146235"></p><h1 id="chrome高级调试技巧" tabindex="-1">chrome高级调试技巧 <a class="header-anchor" href="#chrome高级调试技巧" aria-label="Permalink to &quot;chrome高级调试技巧&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>chrome浏览器作为前端童鞋的<code>老婆</code>，相信你一定不陌生。<code>调页面</code>、<code>写BUG</code>、<code>画样式</code>、<code>看php片</code>少了它整个世界都不香了。</p><p>不信？一起来看看我们的<code>老婆</code>有多厉害....</p><h2 id="_1-一键重新发起请求" tabindex="-1">1#. 一键重新发起请求 <a class="header-anchor" href="#_1-一键重新发起请求" aria-label="Permalink to &quot;1#. 一键重新发起请求&quot;">​</a></h2><p>在与后端接口联调或排查线上BUG时，你是不是也经常听到他们说这句话：<strong>你再发起一次请求试试，我这边看下为啥出错了！</strong></p><p>重发请求，这有一种简单到发指的方式。</p><ol><li>选中<code>Network</code></li><li>点击<code>Fetch/XHR</code></li><li>选择要重新发送的请求</li><li>右键选择<code>Replay XHR</code></li></ol><p><img src="'+H+'" alt="图片"></p><p>不用刷新页面，不用走页面交互，是不是非常爽！！！</p><h2 id="_2-在控制台快速发起请求" tabindex="-1">2#. 在控制台快速发起请求 <a class="header-anchor" href="#_2-在控制台快速发起请求" aria-label="Permalink to &quot;2#. 在控制台快速发起请求&quot;">​</a></h2><p>还是联调或修BUG的场景，针对同样的请求，有时候需要<strong>修改入参</strong>重新发起，有啥快捷方式？</p><ol><li>选中<code>Network</code></li><li>点击<code>Fetch/XHR</code></li><li>选择<code>Copy as fetch</code></li><li>控制台粘贴代码</li><li>修改参数，回车搞定</li></ol><p><img src="'+R+'" alt="图片"></p><p>曾经我总是通过改代码或者手写<code>fetch</code>的方式处理，想想真是太傻了...</p><h2 id="_3-复制javascript变量" tabindex="-1">3#. 复制JavaScript变量 <a class="header-anchor" href="#_3-复制javascript变量" aria-label="Permalink to &quot;3#. 复制JavaScript变量&quot;">​</a></h2><p>假如你的代码经过计算会输出一个<strong>复杂的对象</strong>，且需要被复制下来发送给其他人，怎么办？</p><ol><li>使用<code>copy</code>函数，将<code>对象</code>作为入参执行即可</li></ol><p><img src="'+U+'" alt="图片"></p><p>以前我总是通过<code>JSON.stringify(fetfishObj, null, 2)</code>打印到控制台，再手动复制粘贴，这效率实在是太低了...</p><h2 id="_4-控制台获取elements面板选中的元素" tabindex="-1">4#. 控制台获取Elements面板选中的元素 <a class="header-anchor" href="#_4-控制台获取elements面板选中的元素" aria-label="Permalink to &quot;4#. 控制台获取Elements面板选中的元素&quot;">​</a></h2><p>调试网页时通过<code>Elements</code>面板选中元素后，如果想通过<code>JS</code>知道它的一些属性，如<code>宽</code>、<code>高</code>、<code>位置</code>等怎么办呢？</p><ol><li>通过<code>Elements</code>选择要调试的元素</li><li>控制台直接用<code>$0</code>访问</li></ol><p><img src="'+G+'" alt="图片"></p><h2 id="_5-截取一张全屏的网页" tabindex="-1">5#. 截取一张全屏的网页 <a class="header-anchor" href="#_5-截取一张全屏的网页" aria-label="Permalink to &quot;5#. 截取一张全屏的网页&quot;">​</a></h2><p>偶尔咱们也会有对网页截屏的需求，一屏还好，系统自带的截屏或者微信截图等都可以办到，但是要求<strong>将超出一屏的内容也截下来咋办呢</strong>？</p><ol><li>准备好需要截屏的内容</li><li><code>cmd + shift + p</code> 执行<code>Command</code>命令</li><li>输入<code>Capture full size screenshot</code> 按下回车</li></ol><p><img src="'+W+'" alt="图片"></p><p><strong>如果要截取选中的部分元素呢？</strong></p><p>答案也很简单，第三步输入<code>Capture node screenshot</code>即可</p><p><img src="'+Y+'" alt="图片"></p><h2 id="_6-一键展开所有dom元素" tabindex="-1">6#. 一键展开所有DOM元素 <a class="header-anchor" href="#_6-一键展开所有dom元素" aria-label="Permalink to &quot;6#. 一键展开所有DOM元素&quot;">​</a></h2><p>调试元素时，在层级比较深的情况下，你是不是也经常一个个展开去调试？有一种更加快捷的方式</p><ol><li>按住<code>opt</code>键 + click（需要展开的最外层元素）</li></ol><p><img src="'+V+`" alt="图片"></p><h2 id="_7-控制台引用上一次执行的结果" tabindex="-1">7#. 控制台引用上一次执行的结果 <a class="header-anchor" href="#_7-控制台引用上一次执行的结果" aria-label="Permalink to &quot;7#. 控制台引用上一次执行的结果&quot;">​</a></h2><p>来看看这个场景，我猜你也一定遇到过, 对某个字符串进行了各种工序，然后我们想知道每一步执行的结果，该咋办？。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>&#39;fatfish&#39;.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><span> // hsiftaf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>你可能会这样做</strong></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>// 第1步</span></span>
<span class="line"><span>&#39;fatfish&#39;.split(&#39;&#39;)</span><span> // [&#39;f&#39;, &#39;a&#39;, &#39;t&#39;, &#39;f&#39;, &#39;i&#39;, &#39;s&#39;, &#39;h&#39;]</span></span>
<span class="line"><span>// 第2步</span></span>
<span class="line"><span>[&#39;f&#39;, &#39;a&#39;, &#39;t&#39;, &#39;f&#39;, &#39;i&#39;, &#39;s&#39;, &#39;h&#39;].reverse() // [&#39;h&#39;, &#39;s&#39;, &#39;i&#39;, &#39;f&#39;, &#39;t&#39;, &#39;a&#39;, &#39;f&#39;]</span></span>
<span class="line"><span>// 第3步</span></span>
<span class="line"><span>[&#39;h&#39;, &#39;s&#39;, &#39;i&#39;, &#39;f&#39;, &#39;t&#39;, &#39;a&#39;, &#39;f&#39;].join(&#39;&#39;) // hsiftaf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+Z+`" alt="图片"></p><p><strong>更简单的方式</strong></p><p>使用<code>$_</code>引用上一次操作的结果，不用每次都复制一遍</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>// 第1步</span></span>
<span class="line"><span>&#39;fatfish&#39;.split(&#39;&#39;)</span><span> // [&#39;f&#39;, &#39;a&#39;, &#39;t&#39;, &#39;f&#39;, &#39;i&#39;, &#39;s&#39;, &#39;h&#39;]</span></span>
<span class="line"><span>// 第2步</span></span>
<span class="line"><span>$_.reverse() // [&#39;h&#39;, &#39;s&#39;, &#39;i&#39;, &#39;f&#39;, &#39;t&#39;, &#39;a&#39;, &#39;f&#39;]</span></span>
<span class="line"><span>// 第3步</span></span>
<span class="line"><span>$_.join(&#39;&#39;) // hsiftaf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+Q+'" alt="图片"></p><h2 id="_8-快速切换主题" tabindex="-1">8.# 快速切换主题 <a class="header-anchor" href="#_8-快速切换主题" aria-label="Permalink to &quot;8.# 快速切换主题&quot;">​</a></h2><p>有的同学喜欢chrome的白色主题，有的喜欢黑色，我们可以使用快捷键迅速切换两个主题。</p><ol><li><code>cmd + shift + p</code> 执行<code>Command</code>命令</li><li>输入<code>Switch to dark theme</code>或者<code>Switch to light theme</code>进行主题切换</li></ol><p><img src="'+z+'" alt="图片"></p><h2 id="_9-和-选择器" tabindex="-1">9.# &quot;<code>$</code>&quot;和&quot;<code>$$</code>&quot;选择器 <a class="header-anchor" href="#_9-和-选择器" aria-label="Permalink to &quot;9.# &quot;`$`&quot;和&quot;`$$`&quot;选择器&quot;">​</a></h2><p>在控制台使用<code>document.querySelector</code>和<code>document.querySelectorAll</code>选择当前页面的元素是最常见的需求了，不过着实有点太长了，咱们可以使用<code>$</code>和<code>$$</code>替代。</p><p><img src="'+K+'" alt="图片"></p><h2 id="_10-i直接在控制台安装npm包" tabindex="-1">10.# <code>$i</code>直接在控制台安装npm包 <a class="header-anchor" href="#_10-i直接在控制台安装npm包" aria-label="Permalink to &quot;10.# `$i`直接在控制台安装npm包&quot;">​</a></h2><p>你遇到过这个场景吗？有时候想使用比如<code>dayjs</code>或者<code>lodash</code>的某个<code>API</code>，但是又不想去官网查，如果可以在控制台直接试出来就好了。</p><p>Console Importer 就是这么一个插件，用来在控制台直接安装<code>npm</code>包。</p><ol><li>安装<code>Console Importer</code>插件</li><li>$i(&#39;name&#39;)安装npm包</li></ol><p><img src="'+X+`" alt="图片"></p><h2 id="_11-add-conditional-breakpoint条件断点的妙用" tabindex="-1">11.# Add conditional breakpoint条件断点的妙用 <a class="header-anchor" href="#_11-add-conditional-breakpoint条件断点的妙用" aria-label="Permalink to &quot;11.# Add conditional breakpoint条件断点的妙用&quot;">​</a></h2><p>假设有下面这段代码，咱们希望食物名字是<code>🍫</code>时才触发断点，可以怎么弄？</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>const foods = [</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    name: &#39;🍔&#39;,</span></span>
<span class="line"><span>    price: 10</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    name: &#39;🍫&#39;,</span></span>
<span class="line"><span>    price: 15</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    name: &#39;🍵&#39;,</span></span>
<span class="line"><span>    price: 20</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>foods.forEach((v) =&gt; {</span></span>
<span class="line"><span>  console.log(v.name, v.price)</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这在大量数据下，只想对符合条件时打断点条件将会非常方便。试想如果没有条件断点咱们是不是要点n次debugger？</p><p><img src="`+ss+'" alt="图片"></p>',331)]))}const is=n(ns,[["render",as]]);export{cs as __pageData,is as default};
