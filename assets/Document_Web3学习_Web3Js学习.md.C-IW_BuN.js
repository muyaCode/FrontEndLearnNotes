import{_ as a,c as s,o,ah as n}from"./chunks/framework.DqD713j2.js";const h=JSON.parse('{"title":"Web3Js 学习","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Web3学习/Web3Js学习.md","filePath":"Document/Web3学习/Web3Js学习.md","lastUpdated":1750954157000}'),l={name:"Document/Web3学习/Web3Js学习.md"};function t(r,e,p,c,i,b){return o(),s("div",null,e[0]||(e[0]=[n('<h1 id="web3js-学习" tabindex="-1">Web3Js 学习 <a class="header-anchor" href="#web3js-学习" aria-label="Permalink to &quot;Web3Js 学习&quot;">​</a></h1><h2 id="简单介绍-web3-js" tabindex="-1">简单介绍 web3.js <a class="header-anchor" href="#简单介绍-web3-js" aria-label="Permalink to &quot;简单介绍 web3.js&quot;">​</a></h2><p><strong>Web3.js</strong> 是一个标准的以太坊 JavaScript API 库，该 JS 库由一个与以太坊基金开发和维护，同时它也是最早且使用最广泛的一个 ETH API 库。它提供实用的 API 参考。从大约 2015 年开始，它在许多项目中被广泛使用。因此，该库已经成为许多“构建去中心化应用新手入门”教程的“必备资源”，由于 Moonbeam 完全兼容以太坊 EVM，因此 web3.js 可以在 Moonbeam 上进行正常交互。</p><h2 id="web3-js-相关网站" tabindex="-1">web3.js 相关网站 <a class="header-anchor" href="#web3-js-相关网站" aria-label="Permalink to &quot;web3.js 相关网站&quot;">​</a></h2><p>web3.js 库官方使用文档：<a href="https://web3js.readthedocs.io/" target="_blank" rel="noreferrer">https://web3js.readthedocs.io/</a></p><p>web3.js 库官方 GitHub 开源：<a href="https://github.com/web3/web3.js" target="_blank" rel="noreferrer">web3/web3.js: Ethereum JavaScript API (github.com)</a></p><h2 id="web3-js-由哪些模块组成" tabindex="-1">web3.js 由哪些模块组成？ <a class="header-anchor" href="#web3-js-由哪些模块组成" aria-label="Permalink to &quot;web3.js 由哪些模块组成？&quot;">​</a></h2><p>Web3.js 有一个主类，称为 web3。在该类中可以找到该库的大多数功能。组成 web3js 的另外 5 个模块分别是：</p><ol><li>web3-eth</li><li>web3-shh</li><li>web3-bzz</li><li>web3-net</li><li>web3-utils</li></ol><h3 id="web3-eth-有什么作用" tabindex="-1">web3-eth 有什么作用？ <a class="header-anchor" href="#web3-eth-有什么作用" aria-label="Permalink to &quot;web3-eth 有什么作用？&quot;">​</a></h3><p>web3-eth 模块中包含函数，其作用是使 web3.js 的用户可以与以太坊区块链进行交互。具体来说，这些函数能够与智能合约、归外部所有的账户、节点、挖出的区块以及交易进行交互。下面是三个说明示例：</p><ul><li><em>web3.eth.getBalance</em> 的作用是获得指定区块的某个地址的以太坊余额</li><li><em>web3.eth.signTransaction</em> 的作用是对交易签名</li><li><em>web3.eth.sendSignedTransaction</em> 的作用是将签名的交易发送到以太坊区块链。</li></ul><h3 id="web3-shh-有什么作用" tabindex="-1">web3-shh 有什么作用？ <a class="header-anchor" href="#web3-shh-有什么作用" aria-label="Permalink to &quot;web3-shh 有什么作用？&quot;">​</a></h3><p>web3-shh 模块的作用是使你可以与 Whisper 协议进行交互。Whisper[4] 是一个消息传输协议，其目的是轻松广播消息以及进行低层异步通信。下面显示了两个说明性示例：</p><ul><li><em>web3.shh.post</em> 将 whisper 消息发布到网络</li><li><em>web3.shh.subscribe</em> 创建传入的 whisper 消息订阅</li></ul><h3 id="web3-bzz-有什么作用" tabindex="-1">web3-bzz 有什么作用？ <a class="header-anchor" href="#web3-bzz-有什么作用" aria-label="Permalink to &quot;web3-bzz 有什么作用？&quot;">​</a></h3><p>web3-bzz 模块的作用是使你可以与 Swarm 交互。Swarm[5] 是一个去中心化存储平台和内容分发服务，它可以用来为去中心化应用存储图片或视频等文件。下面显示了两个说明性示例：</p><ul><li><em>web3.bzz.upload</em> 的作用是使你可以将文件和文件夹上传到 Swarm</li><li><em>Web3.bzz.download</em> 的作用是使你可以从 Swarm 下载文件和文件夹</li></ul><h3 id="web3-net-有什么作用" tabindex="-1">web3-net 有什么作用？ <a class="header-anchor" href="#web3-net-有什么作用" aria-label="Permalink to &quot;web3-net 有什么作用？&quot;">​</a></h3><p>web3-net 模块的作用是使你可以与以太坊节点的网络属性进行交互。通过 web3-net，你可以采用你需要获得的信息所关联的协议后加 .net(在这里使用 * 指定，表示选择 web.eth.net、web3.shh.net 或 web3.bzz.net)来查找该节点的相关信息。下面显示了两个说明性示例：</p><ul><li>web3.*.net.getID 返回网络 ID</li><li>web3.*.net.getPeerCount 返回连接到节点的对等点数</li></ul><h3 id="web3-utils-有什么作用" tabindex="-1">web3-utils 有什么作用？ <a class="header-anchor" href="#web3-utils-有什么作用" aria-label="Permalink to &quot;web3-utils 有什么作用？&quot;">​</a></h3><p>web3-utils 模块为你提供实用程序函数，这些函数可在以太坊去中心化应用以及其他 web3.js 模块中使用。实用程序函数可以重复使用，使代码编写更轻松，在 JavaScript 和其他编程语言中很常见。Web3-utils 包含实用程序函数，这些函数用于转换数字、验证值是否满足特定条件以及搜索数据集。下面显示了三个说明性示例：</p><ul><li><em>web3.utils.toWei</em> 将以太转换为 Wei</li><li><em>web3.utils.hexToNumberString</em> 将十六进制值转换为字符串</li><li><em>web3.utils.isAddress</em>，校验特定字符串是否为有效的以太坊地址。</li></ul><h2 id="web3-js-的安装与常用-api-介绍" tabindex="-1">web3.js 的安装与常用 API 介绍 <a class="header-anchor" href="#web3-js-的安装与常用-api-介绍" aria-label="Permalink to &quot;web3.js 的安装与常用 API 介绍&quot;">​</a></h2><h3 id="安装-web3-js" tabindex="-1">安装 web3.js <a class="header-anchor" href="#安装-web3-js" aria-label="Permalink to &quot;安装 web3.js&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> web3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="常用-api-介绍" tabindex="-1">常用 API 介绍 <a class="header-anchor" href="#常用-api-介绍" aria-label="Permalink to &quot;常用 API 介绍&quot;">​</a></h3><h4 id="_1-签名交易-web3-eth-accounts-signtransaction" tabindex="-1">1. 签名交易 web3.eth.accounts.signTransaction() <a class="header-anchor" href="#_1-签名交易-web3-eth-accounts-signtransaction" aria-label="Permalink to &quot;1. 签名交易 web3.eth.accounts.signTransaction()&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">web3</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">eth</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">accounts</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">signTransaction</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">privateKey</span><span style="color:#ABB2BF;">, [, </span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> promise</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">object</span><span style="color:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>第一个参数为 tx，即定义该交易的细则，在其中可以定义的交易细则有 gas，to，value，gasPrice 等参数，其中 gas 是必须要设置的参数（其余用到的交易参数都是可选择的），gas 参数规定了该交易将要花费的 gas 费用，to 参数则说明了这笔交易的接受者，而 value 参数则规定了这笔交易中转移代币的数量</li><li>第二个参数为 privateKey，为发起交易人的私钥，该交易将由该私钥进行签署</li><li>第三个参数为 callback，该参数为一个可选参数，该回调函数返回的第一个参数为一个错误对象，第二个参数为结果对象</li></ul><p>该接口返回一个 Promise 对象，如果签署交易成功，将会返回该交易的一些具体信息，如<code>messageHash</code>，<code>rawTransaction</code>，<code>transactionHash</code>等信息</p><h4 id="_2-部署合约-contractinstance-deploy" tabindex="-1">2. 部署合约 contractInstance.deploy() <a class="header-anchor" href="#_2-部署合约-contractinstance-deploy" aria-label="Permalink to &quot;2. 部署合约 contractInstance.deploy()&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> web3</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">eth</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Contract</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">jsonInterface</span><span style="color:#ABB2BF;">[, </span><span style="color:#E06C75;">address</span><span style="color:#ABB2BF;">][, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> promise</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">contract</span><span style="color:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该方法用于生产合约实例，只有通过合约实例才能进行部署操作。该函数只需要填写一个一个参数即可，jsonInterface 即为该合约的 abi，填入该参数即可完成合约实例的生成</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">contractInstace</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deploy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> promise</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">transaction</span><span style="color:#56B6C2;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>改方法用于部署合约，调用该函数将返回部署合约交易的具体信息 其中的参数为 options，其中里面可以写入两个部分，即 data(String)与 arguments(Array)两个参数，data 参数为合约的 bytecode；arguments 参数为合约构造函数中的参数，因此该参数为可选的</p><p>deploy 函数会返回一个交易对象，该对象自带一个数组与 4 个函数，数组表示先前传入的构造函数的入参，四个函数分别为<code>send()</code>，<code>estimateGas()</code>，<code>encodeABI()</code>，<code>createAccessList()</code></p><h4 id="_3-调用合约方法-methods-mymethod-call" tabindex="-1">3. 调用合约方法 methods.myMethod.call() <a class="header-anchor" href="#_3-调用合约方法-methods-mymethod-call" aria-label="Permalink to &quot;3. 调用合约方法 methods.myMethod.call()&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">myContract</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">methods</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">myMethod</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">param1</span><span style="color:#ABB2BF;">[, </span><span style="color:#E06C75;">param2</span><span style="color:#ABB2BF;">[, ...]]).</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;"> [, </span><span style="color:#E06C75;">defaultBlock</span><span style="color:#ABB2BF;">] [, </span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> returnValuesOfContract</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该方法用于调用一个“constant”方法并在不发起任何交易的同时在 EVM 执行智能合约的方法，使用此方法调用的智能合约方法均不会改变合约状态 其中 myMethod()括号中填入的参数为该方法的入参，call()中填入的 options 包含如下几个方面的值：from、gasPrice、gas，call()中还可以选择性的填入 defaultBlock 与 callback，其中 defaultBlock 为默认区块设置，callback 回调函数第一个参数为错误对象，第二个参数为合约方法结果</p><p>该方法会返回调用函数的返回结果，如果返回结果为多个，则返回一个带有索引的对象</p><h4 id="_4-订阅监听事件-web3-eth-subscribe" tabindex="-1">4. 订阅监听事件 web3.eth.subscribe() <a class="header-anchor" href="#_4-订阅监听事件-web3-eth-subscribe" aria-label="Permalink to &quot;4. 订阅监听事件 web3.eth.subscribe()&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">web3</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">eth</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">subscribe</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;"> [, </span><span style="color:#E06C75;">options</span><span style="color:#ABB2BF;">] [, </span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">]) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E06C75;"> subscriptionInstance</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该方法用于订阅监听智能合约中触发的事件 其中订阅方法包含四种方法，分别为：pendingTransactions，newBlockHeaders，syncing，logs</p><p>监听事件一般采用 newBlockHeaders 模式，该模式订阅监听传入的区块头，该特性可以作为计时器来检查区块链上的变化。callback 参数与上述函数一样，第一个参数为错误对象，第二个参数为结果对象</p><p>同时在该函数的返回内容中，有几个回调函数比较常见：<code>on(&quot;connected&quot;)</code>, <code>on(&quot;data&quot;)</code>, <code>on(&quot;error&quot;)</code>, <code>on(&quot;changed&quot;)</code>，</p><ol><li>一旦订阅成功连接则触发<code>on(&quot;connected&quot;)</code>，该函数返回订阅 id;</li><li>当 log 有数据时触发<code>on(&quot;data&quot;)</code>；</li><li>当订阅出错时触发<code>on(&quot;error&quot;)</code>；</li><li>当有 log 被删除出区块链时触发<code>on(&quot;changed&quot;)</code>；</li></ol>',48)]))}const u=a(l,[["render",t]]);export{h as __pageData,u as default};
