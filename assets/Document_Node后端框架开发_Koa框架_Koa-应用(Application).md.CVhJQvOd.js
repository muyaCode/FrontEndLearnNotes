import{_ as a,c as n,o as p,ah as l}from"./chunks/framework.DqD713j2.js";const d=JSON.parse('{"title":"Koa-应用(Application)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Koa框架/Koa-应用(Application).md","filePath":"Document/Node后端框架开发/Koa框架/Koa-应用(Application).md","lastUpdated":1750954157000}'),e={name:"Document/Node后端框架开发/Koa框架/Koa-应用(Application).md"};function o(r,s,c,t,i,B){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="koa-应用-application" tabindex="-1">Koa-应用(Application) <a class="header-anchor" href="#koa-应用-application" aria-label="Permalink to &quot;Koa-应用(Application)&quot;">​</a></h1><h2 id="koa项目初始" tabindex="-1">koa项目初始 <a class="header-anchor" href="#koa项目初始" aria-label="Permalink to &quot;koa项目初始&quot;">​</a></h2><p>1.新建项目目录，初始化项目的package.json</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.安装koa</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> koa</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>3.利用Node的http和https内置库将同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> http</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> https</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#E06C75;font-style:italic;"> ctx</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;Koa服务启动成功&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 开始监听http服务 */</span></span>
<span class="line"><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 开始监听https服务 */</span></span>
<span class="line"><span style="color:#E5C07B;">https</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3001</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="项目设置属性" tabindex="-1">项目设置属性 <a class="header-anchor" href="#项目设置属性" aria-label="Permalink to &quot;项目设置属性&quot;">​</a></h2><p>应用程序设置是 <code>app</code> 实例上的属性，目前支持如下：</p><ul><li><code>app.env</code> 默认是 <strong>NODE_ENV</strong> 或 &quot;development&quot;</li><li><code>app.keys</code> 签名的 cookie 密钥数组</li><li><code>app.proxy</code> 当真正的代理头字段将被信任时</li><li>忽略 <code>.subdomains</code> 的 <code>app.subdomainOffset</code> 偏移量，默认为 2</li><li><code>app.proxyIpHeader</code> 代理 ip 消息头, 默认为 <code>X-Forwarded-For</code></li><li><code>app.maxIpsCount</code> 从代理 ip 消息头读取的最大 ips, 默认为 0 (代表无限)</li></ul><p>您可以将设置传递给构造函数:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">proxy</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>或动态的:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">proxy</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>bin/www可执行文件配置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="实例化new-koa-的属性和方法" tabindex="-1">实例化new Koa()的属性和方法 <a class="header-anchor" href="#实例化new-koa-的属性和方法" aria-label="Permalink to &quot;实例化new Koa()的属性和方法&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>下面是app的方法和属性</p><h3 id="app-listen-端口监听" tabindex="-1">app.listen(...) 端口监听 <a class="header-anchor" href="#app-listen-端口监听" aria-label="Permalink to &quot;app.listen(...) 端口监听&quot;">​</a></h3><p>Koa 应用程序不是 HTTP 服务器的1对1展现。 可以将一个或多个 Koa 应用程序安装在一起以形成具有单个HTTP服务器的更大应用程序。</p><p>创建并返回 HTTP 服务器，将给定的参数传递给 <code>Server#listen()</code>。这些内容都记录在 <a href="http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback" target="_blank" rel="noreferrer">nodejs.org</a>.</p><p>以下是一个无作用的 Koa 应用程序被绑定到 <code>3000</code> 端口：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这里的 <code>app.listen(...)</code> 方法只是以下方法的语法糖:</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> http</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这意味着您可以将同一个应用程序同时作为 HTTP 和 HTTPS 或多个地址：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> http</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> https</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Koa</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;koa&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Koa</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">http</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">https</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createServer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3001</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="app-callback-方法的回调函数" tabindex="-1">app.callback() 方法的回调函数 <a class="header-anchor" href="#app-callback-方法的回调函数" aria-label="Permalink to &quot;app.callback() 方法的回调函数&quot;">​</a></h3><p>返回适用于 <code>http.createServer()</code> 方法的回调函数来处理请求。你也可以使用此回调函数将 koa 应用程序挂载到 Connect/Express 应用程序中。</p><h3 id="app-use-function-请求到来时执行的函数-注册中间件" tabindex="-1">app.use(function) 请求到来时执行的函数（注册中间件） <a class="header-anchor" href="#app-use-function-请求到来时执行的函数-注册中间件" aria-label="Permalink to &quot;app.use(function) 请求到来时执行的函数（注册中间件）&quot;">​</a></h3><p>将给定的中间件方法添加到此应用程序。<code>app.use()</code> 返回 <code>this</code>, 因此可以链式表达调用.</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">someMiddleware</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">someOtherMiddleware</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>它等同于</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">someMiddleware</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">someOtherMiddleware</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>参阅 <a href="https://github.com/koajs/koa/wiki#middleware" target="_blank" rel="noreferrer">Middleware</a> 获取更多信息.</p><h3 id="app-keys-设置签名的-cookie-密钥" tabindex="-1">app.keys= 设置签名的 Cookie 密钥 <a class="header-anchor" href="#app-keys-设置签名的-cookie-密钥" aria-label="Permalink to &quot;app.keys=  设置签名的 Cookie 密钥&quot;">​</a></h3><p>这些被传递给 <a href="https://github.com/crypto-utils/keygrip" target="_blank" rel="noreferrer">KeyGrip</a>，但是你也可以传递你自己的 <code>KeyGrip</code> 实例。</p><p>例如，以下是可以接受的：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keys</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;im a newer secret&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;i like turtle&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keys</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> KeyGrip</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;im a newer secret&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;i like turtle&#39;</span><span style="color:#ABB2BF;">], </span><span style="color:#98C379;">&#39;sha256&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这些密钥可以倒换，并在使用 <code>{ signed: true }</code> 参数签名 Cookie 时使用。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">cookies</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;name&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;tobi&#39;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">signed</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="app-context-是app-use-async-ctx-的参数" tabindex="-1">app.context 是app.use(async ctx =&gt; {})的参数 <a class="header-anchor" href="#app-context-是app-use-async-ctx-的参数" aria-label="Permalink to &quot;app.context 是app.use(async ctx =&gt; {})的参数&quot;">​</a></h3><p><code>app.context</code> 是从其创建 <code>ctx</code> 的原型。</p><p>所有的app.use下的ctx都是共享的，可以在某一个app.use中通过ctx来传递数据给下一个app.use中间件：使用ctx.state.xxx传递，文档请看： <strong>Koa-上下文(Context)</strong></p><p>您可以通过编辑 <code>app.context</code> 为 <code>ctx</code> 添加其他属性。这对于将 <code>ctx</code> 添加到整个应用程序中使用的属性或方法非常有用，这可能会更加有效（不需要中间件）和/或 更简单（更少的 <code>require()</code>），而更多地依赖于<code>ctx</code>，这可以被认为是一种反模式。</p><p>例如，要从 <code>ctx</code> 添加对数据库的引用：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">context</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">db</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> db</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#E06C75;font-style:italic;"> ctx</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">db</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意:</p><ul><li><code>ctx</code> 上的许多属性都是使用 <code>getter</code> ，<code>setter</code> 和 <code>Object.defineProperty()</code> 定义的。你只能通过在 <code>app.context</code> 上使用 <code>Object.defineProperty()</code> 来编辑这些属性（不推荐）。查阅：<a href="https://github.com/koajs/koa/issues/652" target="_blank" rel="noreferrer">https://github.com/koajs/koa/issues/652</a>.</li><li>安装的应用程序目前使用其父级的 <code>ctx</code> 和设置。 因此，安装的应用程序只是一组中间件。</li></ul><h3 id="app-on-错误处理" tabindex="-1">app.on 错误处理 <a class="header-anchor" href="#app-on-错误处理" aria-label="Permalink to &quot;app.on 错误处理&quot;">​</a></h3><p>默认情况下，将所有错误输出到 stderr，除非 <code>app.silent</code> 为 <code>true</code>。 当 <code>err.status</code> 是 <code>404</code> 或 <code>err.expose</code> 是 <code>true</code> 时默认错误处理程序也不会输出错误。 要执行自定义错误处理逻辑，如集中式日志记录，您可以添加一个 “error” 事件侦听器：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;error&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;server error&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果 req/res 期间出现错误，并且 <em>无法</em> 响应客户端，<code>Context</code>实例仍然被传递：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;error&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ctx</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">  log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;server error&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ctx</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当发生错误 <em>并且</em> 仍然可以响应客户端时，也没有数据被写入 socket 中，Koa 将用一个 500 “内部服务器错误” 进行适当的响应。在任一情况下，为了记录目的，都会发出应用级 “错误”。</p>`,57)]))}const b=a(e,[["render",o]]);export{d as __pageData,b as default};
