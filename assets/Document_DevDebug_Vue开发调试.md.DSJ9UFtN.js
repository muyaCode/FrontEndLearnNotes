import{_ as a,c as s,o as n,ah as o}from"./chunks/framework.DqD713j2.js";const r="/FrontEndLearnNotes/assets/640.Cgrq9ZLe.webp",p="/FrontEndLearnNotes/assets/640-1715067582539-27.BxqHhp37.webp",t="/FrontEndLearnNotes/assets/640-1715067582539-28.BlmBggUZ.webp",l="/FrontEndLearnNotes/assets/640-1715067582539-29.D7avX95u.webp",c="/FrontEndLearnNotes/assets/640-1715067582539-30.qBkKMfiS.webp",i="/FrontEndLearnNotes/assets/640-1715067582539-31.D5XxNw6Y.webp",u="/FrontEndLearnNotes/assets/640-1715067582539-32.B5KhDhfF.webp",d="/FrontEndLearnNotes/assets/640-1715067582539-33.DO_RaORB.webp",m="/FrontEndLearnNotes/assets/640-1715067582539-34.k8wpTrOC.webp",h="/FrontEndLearnNotes/assets/640-1715067582539-35.Cwzr62hE.webp",b="/FrontEndLearnNotes/assets/640-1715067582539-36.CmwDxYNQ.webp",g="/FrontEndLearnNotes/assets/640-1715067582539-37.Bna9A0u-.webp",C=JSON.parse('{"title":"Vue开发调试","description":"","frontmatter":{},"headers":[],"relativePath":"Document/DevDebug/Vue开发调试.md","filePath":"Document/DevDebug/Vue开发调试.md","lastUpdated":1750954157000}'),v={name:"Document/DevDebug/Vue开发调试.md"};function _(k,e,f,V,w,x){return n(),s("div",null,e[0]||(e[0]=[o(`<h1 id="vue开发调试" tabindex="-1">Vue开发调试 <a class="header-anchor" href="#vue开发调试" aria-label="Permalink to &quot;Vue开发调试&quot;">​</a></h1><p>前后端联调和接口对接：<a href="https://juejin.cn/collection/7061786423799578637" target="_blank" rel="noreferrer">https://juejin.cn/collection/7061786423799578637</a></p><p>代码调试：<a href="https://juejin.cn/collection/7072953319152418829" target="_blank" rel="noreferrer">https://juejin.cn/collection/7072953319152418829</a></p><p>Chrome 调试技巧： <a href="https://frontendwingman.com/Chrome/C02/hotkey.html" target="_blank" rel="noreferrer">https://frontendwingman.com/Chrome/C02/hotkey.html</a></p><p><a href="https://github.com/dendoink/FrontendWingman" target="_blank" rel="noreferrer">https://github.com/dendoink/FrontendWingman</a></p><h2 id="vue-devtools" tabindex="-1">Vue Devtools <a class="header-anchor" href="#vue-devtools" aria-label="Permalink to &quot;Vue Devtools&quot;">​</a></h2><p>Vue DevTools是一款专为Vue.js框架设计的浏览器扩展工具，它提供了一系列功能来帮助开发者更好地理解和调试Vue.js应用程序。这些功能包括概览应用信息、查看页面和路由、深入探索组件层次结构、管理项目资源、追踪状态变化、可视化组件依赖关系、自定义设置以及与其他Vite插件的集成。Vue DevTools还可以作为一个独立的窗口运行，便于开发者在需要时进行分屏调试。</p><p>**官方文档：**<a href="https://devtools-next.vuejs.org/" target="_blank" rel="noreferrer">https://devtools-next.vuejs.org/</a></p><h1 id="如何优雅的调试-vue-项目" tabindex="-1">如何优雅的调试 Vue 项目 <a class="header-anchor" href="#如何优雅的调试-vue-项目" aria-label="Permalink to &quot;如何优雅的调试 Vue 项目&quot;">​</a></h1><h2 id="引言" tabindex="-1"><strong>引言</strong> <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;**引言**&quot;">​</a></h2><p>在前端开发过程中，我们经常会使用 <code>console.log</code> 或 <code>debugger</code> 语句来进行调试，<code>console.log</code> 优点在于简单易用，缺点就是入侵了代码，缺乏上下文信息，而且可能会造成性能影响，影响开发体验；<code>debugger</code> 语句优点在于可以暂停逐行调试，可以看到完整的调试信息，例如变量、调用堆栈、作用域链等等，缺点是代码入侵，无法支持条件断点，这两种语句虽然我们可以在打包的时候去掉，但是不够优雅，简单的情况下可以用用。</p><p>本文以 Vue 项目为例，介绍另一种方式，使用 VSCode Debugger 功能进行开发调试，以及如何调试线上代码的报错问题。</p><h2 id="调试准备" tabindex="-1"><strong>调试准备</strong> <a class="header-anchor" href="#调试准备" aria-label="Permalink to &quot;**调试准备**&quot;">​</a></h2><p>相关环境：</p><ul><li>编辑器：VS Code</li><li>Node 版本：16.20.x</li><li>包管理器：pnpm</li></ul><h2 id="调试-vue-项目" tabindex="-1"><strong>调试 Vue 项目</strong> <a class="header-anchor" href="#调试-vue-项目" aria-label="Permalink to &quot;**调试 Vue 项目**&quot;">​</a></h2><p>初始化一个 Vue 项目有两种方式，分别基于 Vite 和 Webpack 作为构建工具：</p><ul><li><p>使用 create-vue[1] 脚手架工具，创建基于 Vite 的 Vue 项目；</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>pnpm create vue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>使用 Vue CLI[2] 的 @vue/cli 脚手架工具，创建基于 Webpack 的 Vue 项目；</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span># 先全局安装 @vue/cli 包</span></span>
<span class="line"><span>npm i -g @vue/cli</span></span>
<span class="line"><span># 再使用 vue 命令创建项目</span></span>
<span class="line"><span>vue create vue-project</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>分别来看一下两种方式创建的项目如何调试；</p><h3 id="调试基于-vite-的-vue-项目" tabindex="-1"><strong>调试基于 Vite 的 Vue 项目</strong> <a class="header-anchor" href="#调试基于-vite-的-vue-项目" aria-label="Permalink to &quot;**调试基于 Vite 的 Vue 项目**&quot;">​</a></h3><ol><li><p>使用 <code>pnpm create vue</code> 命令创建一个基于 Vite 的 Vue 3 项目，启动服务 <code>pnpm dev</code>；</p><p><img src="`+r+'" alt="图片"></p></li><li><p>创建调试配置文件 <code>launch.json</code>，添加一个调试配置，</p><p><img src="'+p+'" alt="图片"></p><p>url 改为启动服务后对应的地址和端口，启动调试，会打开一个新的 chrome 窗口实例访问我们指定的 url；</p><p><img src="'+t+'" alt="图片"></p><p>PS：启动调试时，默认打开的浏览器是一个全新的窗口，啥都没有，可以添加 <code>userDataDir</code> 配置来指定用户数据目录，例如<code>userDataDir: false</code> 这样打开的就是使用浏览器默认登录的用户。注意浏览器的用户数据目录有个特点，只能被一个 Chrome 实例访问。</p></li><li><p>在 App.vue 文件打个断点试试，刷新页面，没问题能断住。</p><p><img src="'+l+'" alt="图片"></p></li></ol><p><strong>PS：</strong></p><ul><li><p>如果发现先打断点再启动调试，先断在了编译后的文件，可以试试先启动调试，再打断点。<img src="'+c+'" alt="图片"></p></li><li><p>如果启动调试后，第一次能断住，后面刷新网页没断住，有可能是缓存的原因，可以禁用掉缓存，勾选 Network 面板 Disable cache。</p><p><img src="'+i+'" alt="图片"></p></li></ul><h3 id="调试基于-webpack-的-vue-项目" tabindex="-1"><strong>调试基于 Webpack 的 Vue 项目</strong> <a class="header-anchor" href="#调试基于-webpack-的-vue-项目" aria-label="Permalink to &quot;**调试基于 Webpack 的 Vue 项目**&quot;">​</a></h3><ol><li><p>使用 <code>vue create vue3-webpack-debug</code> 创建一个基于 Webpack 的 Vue 3 项目，启动服务 <code>pnpm serve</code>；</p><p><img src="'+u+'" alt="图片"></p></li><li><p>创建调试配置文件 <code>launch.json</code>，添加一个调试配置；url 改为启动服务时对应的地址和端口，启动调试；</p><p><img src="'+d+`" alt="图片"></p></li><li><p>在 App.vue 文件打个断点，没断住，需要将 vue cli 的 <code>devtool</code> 默认配置 <code>eval-cheap-module-source-map</code> 改为 <code>cheap-module-source-map</code> ；</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>// vue.config.js</span></span>
<span class="line"><span>const { defineConfig } = require(&#39;@vue/cli-service&#39;)</span></span>
<span class="line"><span>module.exports = defineConfig({</span></span>
<span class="line"><span>  // 修改 devtool 配置为 cheap-module-source-map</span></span>
<span class="line"><span>  chainWebpack: (config) =&gt; {</span></span>
<span class="line"><span>    config.devtool(&quot;cheap-module-source-map&quot;);</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  // 省略其他配置</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>修改 <code>devtool</code> 原因是，vue cli 默认配置为 <code>eval-cheap-module-source-map</code>，其中的 <code>eval</code> 会导致映射的模块文件带有 hash 参数，无法在本地找到对应文件；如下图，我们在代码中用 debugger 打断点，发现打开的是一个 <code>App.vue?91a0</code> 文件，这个路径无法映射到本地文件，只能只读，应该把 hash 参数处理掉：</p><p><img src="`+m+'" alt="图片"></p><p>devtool 配置详情参考文档 <strong>webpack - devtool</strong>[3]</p></li></ol><h2 id="调试线上代码报错" tabindex="-1"><strong>调试线上代码报错</strong> <a class="header-anchor" href="#调试线上代码报错" aria-label="Permalink to &quot;**调试线上代码报错**&quot;">​</a></h2><p>这里我们通过关联 sourcemap 文件的方式，将打包后的代码映射回源码进行调试。关联 sourcemap 是通过在文件末尾添加一行注释，例如<code>//# sourceMappingURL=xxx.js.map</code>。但是，在生产部署的代码中，不会将 sourcemap 文件关联在一起，否则源码就会被暴露。</p><p>首先，在打包时需要生成单独的 sourcemap 文件，打包工具都有相应的配置：</p><ul><li>对于 webpack，可以通过将 <code>devtool</code> 配置为<code>hidden-source-map</code>来实现。该配置的意思是生成 sourcemap 文件，但不会在代码文件末尾中添加关联注释。</li><li>对于 vite，可以通过将 <code>build.sourcemap</code> 配置为 <code>hidden</code> 来实现，其效果与 webpack 配置相同。</li></ul><p>然后需要一个 url 来访问 sourcemap 文件。这里我们在本地 sourcemap 文件所在目录起一个服务 <code>npx http-server .</code> ，这样就有一个本地的 url 能访问到 sourcemap 文件了，接下来就是进行关联操作，有以下几种方式：</p><p><strong>方式 1：开发者工具 - Source 面板中手动关联 sourcemap</strong></p><p>在 Source 面板报错文件中右键添加 sourcemap 将报错文件的 sourmap url 输入，就能映射到源码文件了。但是这种方式页面刷新就得重新添加 sourcemap url。</p><ul><li>截图：未关联 sourcemap 的源文件<img src="'+h+'" alt="图片"></li><li>截图：添加 sourcemap url 映射到源文件<img src="'+b+'" alt="图片"></li></ul><p><strong>方式 2：开发者工具 - Source 面板 - Overrides 修改文件内容关联 sourcemap</strong></p><p>在 Network 面板中，右键报错文件请求选择 Override content，会在 Source 面板中保存一份为本地文件，页面刷新重新请求将会使用该本地文件，因此可以在该报错文件末尾添加 sourcemap url，这样就能映射到源码文件了。</p><ul><li>截图：Override content 修改内容<img src="'+g+'" alt="图片"></li></ul><p><strong>方式 3：通过 Charles 等抓包工具断点修改响应内容关联 sourcemap</strong></p><p>在 Charles 中勾选报错文件断点，断住时修改 Response，在文件内容末尾处添加 sourcemap url。对比方式 1 的好处就是修改的内容会缓存，跟方式 2 差不多。</p><h2 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h2><p>有效的代码调试无疑是提高开发效率的关键一步，无论是在开发新功能的过程中，还是在定位修复现有问题。通过本文了解了如何调试 Vue 项目，包括基于 Vite 和 Webpack 的 Vue 项目的调试方法，调试其他框架项目应该也差不多。同时也介绍了如何调试线上代码报错，通过关联 sourcemap 文件的方式，将打包后的代码映射回源码进行调试。大家如果有更优的调试方案，欢迎交流！另外推荐神光的前端调试通关秘籍，学到很多。</p><p><strong>参考资料</strong></p><p>[1] create-vue: <em><a href="https://github.com/vuejs/create-vue" target="_blank" rel="noreferrer">https://github.com/vuejs/create-vue</a></em></p><p>[2] Vue CLI: <em><a href="https://cli.vuejs.org/zh/guide/" target="_blank" rel="noreferrer">https://cli.vuejs.org/zh/guide/</a></em></p><p>[3] webpack - devtool: <em><a href="https://webpack.js.org/configuration/devtool/" target="_blank" rel="noreferrer">https://webpack.js.org/configuration/devtool/</a></em></p>',44)]))}const D=a(v,[["render",_]]);export{C as __pageData,D as default};
