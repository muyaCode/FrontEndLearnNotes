import{_ as l,c as a,o as e,ah as n}from"./chunks/framework.DqD713j2.js";const d=JSON.parse('{"title":"Socket.IO","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Socket-IO.md","filePath":"Document/Node后端框架开发/Socket-IO.md","lastUpdated":1750954157000}'),o={name:"Document/Node后端框架开发/Socket-IO.md"};function t(i,s,r,p,c,B){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="socket-io" tabindex="-1">Socket.IO <a class="header-anchor" href="#socket-io" aria-label="Permalink to &quot;Socket.IO&quot;">​</a></h1><p>官网：<a href="https://socket.io/zh-CN/" target="_blank" rel="noreferrer">https://socket.io/zh-CN/</a></p><p>GitHub：<a href="https://github.com/socketio/socket.io" target="_blank" rel="noreferrer">https://github.com/socketio/socket.io</a></p><hr><ul><li>轮询ajax <strong>缺点：不停询问服务器，浪费性能</strong></li><li>服务器不关闭连接，一次响应，一直保持连接 <strong>缺点：只有服务器向客户端不断输出</strong></li><li>html5中有一个webAPI：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">WebSocket</a>，他是在原来http协议的基础上，去升级当前协议为websocket升级 <ul><li>将原本 先有请求才有响应的机制，更改成了，服务端也可以主动发请求给客户端</li><li>HTTP 一问一答， TCP协议，客户端与服务器建立连接以后，就可以自由的通信了</li><li>缺点：<strong>有兼容性问题</strong>（IE11及以下不兼容）</li></ul></li><li>总结: <ul><li>长轮询 : 客户端不停问，服务器不停回</li><li>长连接: 客户端一次，服务器多次（服务器向客户端单向输出）</li><li>ws（握手） WebSocket <ul><li>全双工（双向工作（客户端和服务器））通信</li></ul></li></ul></li><li>socket.io交互方式可能通过websocket/轮询ajax/服务器响应流(保持连接) <ul><li>1.服务器可主动发数据到客户端</li><li>2.客户端向客户端发数据通过服务器</li></ul></li><li>Socket.IO 由两部分组成： <ul><li><a href="https://github.com/socketio/socket.io" target="_blank" rel="noreferrer"><strong>socket.io</strong></a>：与Node.js HTTP 服务器 <a href="https://github.com/socketio/socket.io" target="_blank" rel="noreferrer">socket.io</a> 集成（或挂载）的服务器</li><li><strong><a href="https://github.com/socketio/socket.io-client" target="_blank" rel="noreferrer">socket.io-client</a></strong>：在浏览器端 <a href="https://github.com/socketio/socket.io-client" target="_blank" rel="noreferrer">socket.io 客户端</a>加载的客户端库</li></ul></li></ul><h2 id="即时通讯软件开发" tabindex="-1">即时通讯软件开发 <a class="header-anchor" href="#即时通讯软件开发" aria-label="Permalink to &quot;即时通讯软件开发&quot;">​</a></h2><h3 id="聊天室练习" tabindex="-1">聊天室练习 <a class="header-anchor" href="#聊天室练习" aria-label="Permalink to &quot;聊天室练习&quot;">​</a></h3><ul><li><p>异步ajax聊天</p></li><li><p>功能扩展</p><ul><li><ol><li>即时聊天</li><li>统计在线人数</li><li>显示在线列表</li><li>私聊</li><li>群组聊天</li></ol></li></ul></li></ul><h3 id="操作步骤" tabindex="-1">操作步骤 <a class="header-anchor" href="#操作步骤" aria-label="Permalink to &quot;操作步骤&quot;">​</a></h3><ul><li>服务器广播 <code>io.broadcast(&#39;事件名&#39;,{ 数据} );</code></li><li>服务器向客户端||客户端向服务器 <code> socket.emit(&#39;事件名&#39;,{数据});</code></li><li>客户端接收 <code>socket.on(&#39;事件名&#39;,data=&gt;{} )</code></li><li>服务器接收 <code>io.on(&#39;事件名&#39;,data=&gt;{});</code></li></ul><h3 id="进阶学习" tabindex="-1">进阶学习 <a class="header-anchor" href="#进阶学习" aria-label="Permalink to &quot;进阶学习&quot;">​</a></h3><ul><li>私聊 <ul><li><ol><li>客户端告诉服务器to谁,及内容</li><li>服务器通过io.to(socket.id)找到目标客户端,再通过emit通信</li></ol></li></ul></li><li>群组聊天 <ul><li>加入群组 <code>ctx.socket.join(groupid);</code></li><li>向群里通信\`\`\`ctx.socket.broadcast</li><li>.to(groupId).emit(&#39;xxxx&#39;,data)</li><li>后续接收还是对应on(&#39;xxxx&#39;)</li><li>客户端端与服务器之间都是 on(&#39;xxx&#39;) emit(&#39;xxx&#39;)去对应 <ul><li>join加入组</li><li>to 私聊</li><li>事件名,数据 数据可以是对象，如果仅仅是字符串， ctx.data拿就可以了，是对象ctx.data.xxxx</li></ul></li></ul></li></ul><h4 id="session-store" tabindex="-1">session store <a class="header-anchor" href="#session-store" aria-label="Permalink to &quot;session store&quot;">​</a></h4><ul><li><p>客户端cookie长度有限</p></li><li><p>客户端保存cookie信息不安全</p></li><li><p><strong>客户端保存钥匙，服务器存储数据</strong></p></li><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> store</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  storage</span><span style="color:#ABB2BF;">: {},</span></span>
<span class="line"><span style="color:#61AFEF;">  get</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">storage</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;">  set</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">sess</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">storage</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> sess</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#61AFEF;">  destroy</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    delete</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">storage</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">session</span><span style="color:#ABB2BF;">({</span><span style="color:#E06C75;">store</span><span style="color:#ABB2BF;">},</span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><h4 id="excel操作" tabindex="-1">excel操作 <a class="header-anchor" href="#excel操作" aria-label="Permalink to &quot;excel操作&quot;">​</a></h4><ul><li>node-xlsx</li></ul>`,16)]))}const h=l(o,[["render",t]]);export{d as __pageData,h as default};
