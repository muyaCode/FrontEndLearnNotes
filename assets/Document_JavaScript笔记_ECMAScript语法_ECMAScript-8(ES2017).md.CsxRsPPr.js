import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const b=JSON.parse('{"title":"ECMAScript-8(ES2017)","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-8(ES2017).md","filePath":"Document/JavaScript笔记/ECMAScript语法/ECMAScript-8(ES2017).md","lastUpdated":1750954157000}'),e={name:"Document/JavaScript笔记/ECMAScript语法/ECMAScript-8(ES2017).md"};function o(r,s,c,t,B,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="ecmascript-8-es2017" tabindex="-1">ECMAScript-8(ES2017) <a class="header-anchor" href="#ecmascript-8-es2017" aria-label="Permalink to &quot;ECMAScript-8(ES2017)&quot;">​</a></h1><h2 id="提案" tabindex="-1">提案 <a class="header-anchor" href="#提案" aria-label="Permalink to &quot;提案&quot;">​</a></h2><h2 id="新特性" tabindex="-1">新特性 <a class="header-anchor" href="#新特性" aria-label="Permalink to &quot;新特性&quot;">​</a></h2><ul><li><code>Async functions</code></li><li><code>Object.entries</code></li><li><code>Object.values</code></li><li><code>Object.getOwnPropertyDescriptors</code></li><li><code>Trailing commas</code></li></ul><h2 id="async-和-await" tabindex="-1">async 和 await <a class="header-anchor" href="#async-和-await" aria-label="Permalink to &quot;async 和 await&quot;">​</a></h2><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>async 是“异步”的简写，而 await 可以认为是 async wait 的简写。 所以应该很好理解 async用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p><p>简单理解：</p><ul><li><p>async 是让方法变成异步。</p></li><li><p>await 是等待异步方法执行完成。</p></li><li><p>async 和 await 两种语法结合 可以让异步代码像同步代码一样</p></li></ul><h3 id="async-函数" tabindex="-1">async 函数 <a class="header-anchor" href="#async-函数" aria-label="Permalink to &quot;async 函数&quot;">​</a></h3><ul><li>1.async 函数的返回值为 promise 对象，</li><li>2.promise 对象的结果由 async 函数执行的返回值决定</li></ul><p>代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//async 函数</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回一个字符串</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // return &#39;尚硅谷&#39;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 返回的结果不是一个 Promise 类型的对象, 返回的结果就是成功 Promise 对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // return;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //抛出错误, 返回的结果是一个失败的 Promise</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // throw new Error(&#39;出错啦!&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //返回的结果如果是一个 Promise 对象</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#61AFEF;">        resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;成功的数据&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // reject(&quot;失败的错误&quot;);</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> fn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//调用 then 方法</span></span>
<span class="line"><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#E06C75;font-style:italic;">reason</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">warn</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">reason</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="await-表达式" tabindex="-1">await 表达式 <a class="header-anchor" href="#await-表达式" aria-label="Permalink to &quot;await 表达式&quot;">​</a></h3><ul><li><p>1.await 必须写在 async 函数中</p></li><li><p>2.await 右侧的表达式一般为 promise 对象</p></li><li><p>3.await 返回的是 promise 成功的值</p></li><li><p>4.await 的 promise 失败了, 就会抛出异常, 需要通过 try...catch 捕获处理</p></li></ul><p>代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//创建 promise 对象</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // resolve(&quot;用户数据&quot;);</span></span>
<span class="line"><span style="color:#61AFEF;">    reject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;失败啦!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// await 要放在 async 函数中.</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">        console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//调用函数</span></span>
<span class="line"><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>async和await 结合 读取文件代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//1. 引入 fs 模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> fs</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fs&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//读取『为学』</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> readWeiXue</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./resources/为学.md&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //如果失败</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //如果成功</span></span>
<span class="line"><span style="color:#61AFEF;">            resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> readChaYangShi</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./resources/插秧诗.md&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //如果失败</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //如果成功</span></span>
<span class="line"><span style="color:#61AFEF;">            resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> readGuanShu</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        fs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readFile</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;./resources/观书有感.md&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">err</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //如果失败</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //如果成功</span></span>
<span class="line"><span style="color:#61AFEF;">            resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//声明一个 async 函数</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //获取为学内容</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> weixue</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> readWeiXue</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //获取插秧诗内容</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> chayang</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> readChaYangShi</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取观书有感</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> guanshu</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> readGuanShu</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">weixue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">chayang</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">guanshu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>async和await 结合 封装AJAX请求例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 发送 AJAX 请求, 返回的结果是 Promise 对象</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sendAJAX</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //1. 创建对象</span></span>
<span class="line"><span style="color:#C678DD;">        const</span><span style="color:#E5C07B;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> XMLHttpRequest</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //2. 初始化</span></span>
<span class="line"><span style="color:#E5C07B;">        x</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;GET&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //3. 发送</span></span>
<span class="line"><span style="color:#E5C07B;">        x</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //4. 事件绑定</span></span>
<span class="line"><span style="color:#E5C07B;">        x</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">onreadystatechange</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">readyState</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 200</span><span style="color:#56B6C2;"> &amp;&amp;</span><span style="color:#E5C07B;"> x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 300</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    //成功啦</span></span>
<span class="line"><span style="color:#61AFEF;">                    resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                    //如果失败</span></span>
<span class="line"><span style="color:#61AFEF;">                    reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">x</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//promise then 方法测试</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// sendajax(&quot;https://api.apiopen.top/getjoke&quot;).then(value=&gt;{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//     console.log(value);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// }, reason=&gt;{})</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// async 与 await 测试  axios</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //发送 AJAX 请求</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> sendAJAX</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;https://api.apiopen.top/getJoke&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            //再次测试</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> tianqi</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> sendAJAX</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://www.tianqiapi.com/api/?version=v1&amp;city=%E5%8C%97%E4%BA%AC&amp;appid=23941491&amp;appsecret=TXoD5e8P&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tianqi</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">main</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p>假如有这样一个使用场景：需要先请求 a 链接，等返回信息之后，再请求 b 链接的另外一个资源。下面代码展示的是使用 fetch 来实现这样的需求，fetch 被定义在 window 对象中，它返回的是一个 Promise 对象。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://blog.csdn.net/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://juejin.im/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">response</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">response</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">catch</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">error</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>虽然上述代码可以实现这个需求，但语义化不明显，代码不能很好地表示执行流程。基于这个原因，ES8 引入了 async/await，这是 JavaScript 异步编程的一个重大改进，提供了在不阻塞主线程的情况下使用同步代码实现异步访问资源的能力，并且使得代码逻辑更加清晰。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">  try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> response1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://blog.csdn.net/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">response1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> response2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#61AFEF;"> fetch</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;https://juejin.im/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">response2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>通过上面代码，你会发现整个异步处理的逻辑都是使用同步代码的方式来实现的，而且还支持 try catch 来捕获异常，这感觉就在写同步代码，所以是非常符合人的线性思维的。</p><h3 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h3><ul><li>await 只能在 async 标记的函数内部使用，单独使用会触发 Syntax error。</li><li>await后面需要跟异步操作，不然就没有意义，而且await后面的Promise对象不必写then，因为await的作用之一就是获取后面Promise对象成功状态传递出来的参数。</li></ul><h3 id="async-await的缺陷" tabindex="-1">async/await的缺陷 <a class="header-anchor" href="#async-await的缺陷" aria-label="Permalink to &quot;async/await的缺陷&quot;">​</a></h3><p>了解<code>Async/await</code>是非常有用的，但还有一些缺点需要考虑。</p><p><code>Async/await</code> 让你的代码看起来是同步的，在某种程度上，也使得它的行为更加地同步。 <code>await</code> 关键字会阻塞其后的代码，直到promise完成，就像执行同步操作一样。它确实可以允许其他任务在此期间继续运行，但您自己的代码被阻塞。</p><p>这意味着您的代码可能会因为大量<code>await</code>的promises相继发生而变慢。每个<code>await</code>都会等待前一个完成，而你实际想要的是所有的这些promises同时开始处理（就像我们没有使用<code>async/await</code>时那样）。</p><p>有一种模式可以缓解这个问题——通过将 <code>Promise</code> 对象存储在变量中来同时开始它们，然后等待它们全部执行完毕。如果想更加深入的了解，请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises#asyncawait%E7%9A%84%E7%BC%BA%E9%99%B7" target="_blank" rel="noreferrer">如何使用 Promise - 学习 Web 开发 | MDN (mozilla.org)</a></p><h2 id="对象方法扩展" tabindex="-1">对象方法扩展 <a class="header-anchor" href="#对象方法扩展" aria-label="Permalink to &quot;对象方法扩展&quot;">​</a></h2><h3 id="object-values-和-object-entries" tabindex="-1">Object.values 和 Object.entries <a class="header-anchor" href="#object-values-和-object-entries" aria-label="Permalink to &quot;Object.values 和 Object.entries&quot;">​</a></h3><h4 id="_0-object-keys-方法-以前的语法" tabindex="-1">0.Object.keys()方法 (以前的语法) <a class="header-anchor" href="#_0-object-keys-方法-以前的语法" aria-label="Permalink to &quot;0.Object.keys()方法 (以前的语法)&quot;">​</a></h4><ul><li><p>返回一个给定对象的所有可枚举属性的数组</p></li><li><p>返回键</p></li></ul><h4 id="_1-object-values-方法" tabindex="-1">1.Object.values()方法 <a class="header-anchor" href="#_1-object-values-方法" aria-label="Permalink to &quot;1.Object.values()方法&quot;">​</a></h4><ul><li>返回一个给定对象的所有可枚举属性值的数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</li><li>返回键的值</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jimmy&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  height</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">188</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// [ &#39;jimmy&#39;, 18, 188 ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2-object-entries-方法" tabindex="-1">2.Object.entries()方法 <a class="header-anchor" href="#_2-object-entries-方法" aria-label="Permalink to &quot;2.Object.entries()方法&quot;">​</a></h4><ul><li><p>返回一个给定对象自身可遍历属性 [key,value] 的数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键值对数组。</p></li><li><p>返回数组里面包裹数组，包裹的一个数组是键值对并排。</p></li><li><p>可使用Map获取数组里的值</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jimmy&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  height</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">188</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// [ [ &#39;name&#39;, &#39;jimmy&#39; ], [ &#39;age&#39;, 18 ], [ &#39;height&#39;, 188 ] ]</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">])); </span><span style="color:#7F848E;font-style:italic;">// [ [ &#39;0&#39;, 1 ], [ &#39;1&#39;, 2 ], [ &#39;2&#39;, 3 ] ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="综合对比代码例子" tabindex="-1">综合对比代码例子 <a class="header-anchor" href="#综合对比代码例子" aria-label="Permalink to &quot;综合对比代码例子&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> school</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;尚硅谷&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    cities</span><span style="color:#ABB2BF;">:[</span><span style="color:#98C379;">&#39;北京&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;上海&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;深圳&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">    xueke</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;前端&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;Java&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;大数据&#39;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&#39;运维&#39;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取对象所有的键</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">school</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取对象所有的值</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">values</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">school</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// entries</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">school</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建 Map</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> m</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Map</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">school</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">m</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;cities&#39;</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="object-getownpropertydescriptors" tabindex="-1">Object.getOwnPropertyDescriptors <a class="header-anchor" href="#object-getownpropertydescriptors" aria-label="Permalink to &quot;Object.getOwnPropertyDescriptors&quot;">​</a></h3><p>该方法返回：指定对象所有自身属性的描述对象，用来进行深层次对象的克隆</p><p>代码例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jimmy&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> desc</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyDescriptors</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">desc</span><span style="color:#ABB2BF;">);  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;jimmy&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    writable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: { </span></span>
<span class="line"><span style="color:#E06C75;">   value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E06C75;">   writable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E06C75;">   configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>上面打印结果中的</p><ul><li><code>value</code>表示当前对象的默认值</li><li><code>writable</code>表示对象属性是否可以修改</li><li><code>enumerable</code>表示当前这个属性是否可以出现在对象的枚举属性中</li><li><code>configurable</code>表示当前对象的属性能否用delete删除</li></ul><p>那这些对象的属性我们怎么设置和修改他们呢，我们可以使用es5的 <code>Object.defineProperty()</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">  value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jimmy&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  writable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">  value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">34</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  writable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// { name: &#39;jimmy&#39;, age: 34 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>接下来我们演示下，一些属性设置为false的情况</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">  value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jimmy&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  writable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// { name: &#39;jimmy&#39; }</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;chimmy&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// { name: &#39;jimmy&#39; }</span></span>
<span class="line"><span style="color:#C678DD;">delete</span><span style="color:#E5C07B;"> obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// { name: &#39;jimmy&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>和不能被删除，打印出来还是原来的对象。</p><p><strong>设置enumerable为false时</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">  value</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jimmy&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  writable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  configurable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  enumerable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// { }</span></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>当设置enumerable: false时，表示对象的属性不可被枚举，这时打印对象为空，遍历对象的键也为空。</p><h2 id="字符串方法的扩展" tabindex="-1">字符串方法的扩展 <a class="header-anchor" href="#字符串方法的扩展" aria-label="Permalink to &quot;字符串方法的扩展&quot;">​</a></h2><h3 id="string-prototype-padstart" tabindex="-1">String.prototype.padStart() <a class="header-anchor" href="#string-prototype-padstart" aria-label="Permalink to &quot;String.prototype.padStart()&quot;">​</a></h3><p><code>padStart()</code> ：把指定字符串填充到字符串头部，返回新字符串。</p><p><strong>返回值：</strong> 在原字符串<strong>开头</strong>填充指定的填充字符串直到目标长度所形成的新字符串。</p><p><strong>语法：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">targetLength</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">targetLength</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">padString</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>targetLength</strong>：当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</li><li><strong>padString（可选）</strong>：填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的默认值为 &quot; &quot;。</li></ul><p><strong>举例：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);         </span><span style="color:#7F848E;font-style:italic;">// &quot;       abc&quot;</span></span>
<span class="line"><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// &quot;foofoofabc&quot;</span></span>
<span class="line"><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;123465&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &quot;123abc&quot;</span></span>
<span class="line"><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#ABB2BF;">);     </span><span style="color:#7F848E;font-style:italic;">// &quot;00000abc&quot;</span></span>
<span class="line"><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);          </span><span style="color:#7F848E;font-style:italic;">// &quot;abc&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><p>日期格式化：yyyy-mm-dd的格式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> now</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> year</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getFullYear</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 月份和日期 如果是一位前面给它填充一个0</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> month</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMonth</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> day</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">now</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDate</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">year</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">month</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">day</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">year</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">month</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">-</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">day</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;"> ) </span><span style="color:#7F848E;font-style:italic;">//输入今天的日期 2021-12-31</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>数字替换(手机号，银行卡号等）</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> tel</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;18781268679&#39;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> newTel</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tel</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">padStart</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tel</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;*&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">newTel</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// *******5678</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="string-prototype-padend" tabindex="-1">String.prototype.padEnd() <a class="header-anchor" href="#string-prototype-padend" aria-label="Permalink to &quot;String.prototype.padEnd()&quot;">​</a></h3><p><code>padEnd()</code> ：把指定字符串填充到字符串尾部，返回新字符串。（如果需要的话则重复填充）</p><p><strong>返回值：</strong> 返回在原字符串<strong>末尾</strong>填充指定的填充字符串直到目标长度所形成的新字符串。</p><p><strong>语法：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">targetLength</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">targetLength</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">padString</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><strong>targetLength</strong>：当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</li><li><strong>padString（可选）</strong>：填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断。此参数的缺省值为 &quot; &quot;。</li></ul><p><strong>举例：</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);          </span><span style="color:#7F848E;font-style:italic;">// &quot;abc       &quot;</span></span>
<span class="line"><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;">);   </span><span style="color:#7F848E;font-style:italic;">// &quot;abcfoofoof&quot;</span></span>
<span class="line"><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;123456&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &quot;abc123&quot;</span></span>
<span class="line"><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">padEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);           </span><span style="color:#7F848E;font-style:italic;">// &quot;abc&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="应用场景-1" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-1" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><p>在JS前端我们处理时间戳的时候单位是ms毫秒，但是，后端同学返回的时间戳则不一样是毫秒，可能只有10位，以s秒为单位。所以，我们在前端处理这个时间戳的时候，保险起见，要先做一个13位的补全，保证单位是毫秒。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 伪代码</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getTime</span><span style="color:#ABB2BF;">()) </span><span style="color:#7F848E;font-style:italic;">// 时间戳 13位的</span></span>
<span class="line"><span style="color:#E06C75;">timestamp</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> +</span><span style="color:#61AFEF;">String</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timestamp</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">padEnd</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="trailing-commas-尾后逗号" tabindex="-1"><code>Trailing commas</code> 尾后逗号 <a class="header-anchor" href="#trailing-commas-尾后逗号" aria-label="Permalink to &quot;\`Trailing commas\` 尾后逗号&quot;">​</a></h2><p>如果你想要添加新的属性，并且在上一行已经使用了尾后逗号，你可以仅仅添加新的一行，而不需要修改上一行。</p><p>⚠️ JSON 不允许尾后逗号</p><p><strong>举例：</strong></p><p>字面量中的尾后逗号</p><ul><li><p>对象</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#D19A66;">  1</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#D19A66;">  2</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>函数中的尾后逗号</p><ul><li><p>参数定义</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">,) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">,) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>函数调用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">,)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>不合法的尾后逗号</p><p>不含参数或者在剩余参数后面加逗号，都是不合法的尾后逗号</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(,) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">(,) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;">(,)</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">,) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">,) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>解构中的尾后逗号</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">,] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>JSON中的尾后逗号</p><p>JSON中不允许出现尾后逗号</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;[1, 2, 3,]&quot;</span><span style="color:#ABB2BF;">)  </span><span style="color:#7F848E;font-style:italic;">// ❌</span></span>
<span class="line"><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;{&quot;a&quot;: 1,}&#39;</span><span style="color:#ABB2BF;">)   </span><span style="color:#7F848E;font-style:italic;">// ❌</span></span>
<span class="line"><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;[1, 2, 3]&quot;</span><span style="color:#ABB2BF;">)   </span><span style="color:#7F848E;font-style:italic;">// ✅</span></span>
<span class="line"><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;{&quot;a&quot;: 1}&#39;</span><span style="color:#ABB2BF;">)    </span><span style="color:#7F848E;font-style:italic;">// ✅</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="第二" tabindex="-1">第二 <a class="header-anchor" href="#第二" aria-label="Permalink to &quot;第二&quot;">​</a></h4><p>ES8 允许函数的最后一个参数有尾逗号（Trailing comma）。 此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> clownsEverywhere</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    param1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    param2</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">clownsEverywhere</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">    &#39;foo&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &#39;bar&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码中，如果在param2或bar后面加一个逗号，就会报错。</p><p>如果像上面这样，将参数写成多行（即每个参数占据一行），以后修改代码的时候，想为函数clownsEverywhere添加第三个参数，或者调整参数的次序，就势必要在原来最后一个参数后面添加一个逗号。这对于版本管理系统来说，就会显示添加逗号的那一行也发生了变动。这看上去有点冗余，因此新的语法允许定义和调用时，尾部直接可以加上一个逗号。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> clownsEverywhere</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    param1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic;">    param2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">clownsEverywhere</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">    &#39;foo&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">    &#39;bar&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这样的规定也使得，函数参数与数组和对象的尾逗号规则，保持一致了。</p>`,105)]))}const F=n(e,[["render",o]]);export{b as __pageData,F as default};
