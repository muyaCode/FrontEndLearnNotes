import{_ as e,c as l,o as i,ah as r}from"./chunks/framework.DqD713j2.js";const c=JSON.parse('{"title":"浏览器工作原理","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Web协议和其他原理/浏览器工作原理.md","filePath":"Document/Web协议和其他原理/浏览器工作原理.md","lastUpdated":1750954157000}'),o={name:"Document/Web协议和其他原理/浏览器工作原理.md"};function t(n,a,h,p,s,u){return i(),l("div",null,a[0]||(a[0]=[r('<h1 id="浏览器工作原理" tabindex="-1">浏览器工作原理 <a class="header-anchor" href="#浏览器工作原理" aria-label="Permalink to &quot;浏览器工作原理&quot;">​</a></h1><p><strong>具体看面试笔记文档：/Document/前端面试相关/底层原理面试题/浏览器原理</strong>：</p><p><a href="https://muyacode.github.io/FrontEndLearnNotes/Document/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E9%9D%A2%E8%AF%95%E9%A2%98/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">浏览器原理 | 牡涯前端学习笔记 (muyacode.github.io)</a></p><h2 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h2><h3 id="浏览器历史" tabindex="-1">浏览器历史 <a class="header-anchor" href="#浏览器历史" aria-label="Permalink to &quot;浏览器历史&quot;">​</a></h3><p>1.1991 年，世界第一个浏览器 WorldWideWeb (后改为 Nexus)，功能简单，不支持图片</p><p>2.1993 年，Mosaic 浏览器出现，可以显示图片，为了区分浏览器是否能显示图片，出现了 UserAgent</p><p>3.1994 年，Mozilla 浏览器出现，也就是后来大名鼎鼎的网景浏览器 Netscape，它的 UserAgent 为 Mozilla/1.0</p><p>4.1995 年 IE 浏览器出现，为了抢夺市场，UserAgent 为 Mozilla/1.22</p><p>5.1998 年，网景浏览器失利，成立 Mozilla 组织</p><p>6.2003 年，网景公司解散，Mozilla 基金会成立，这个组织推进了后来的 Firefox</p><p>7.Mozilla 开发了 Geoko，变成了 Firefox，它的 UserAgentMozilla/5.0</p><p>8.群雄并起，众多公司的浏览器的 UserAgent 上都带有 Mozilla</p><p>9.chrome 和 safari 出现，占有了很大份额</p><h3 id="查看用户代理" tabindex="-1">查看用户代理 <a class="header-anchor" href="#查看用户代理" aria-label="Permalink to &quot;查看用户代理&quot;">​</a></h3><p>1 打开 chrome 浏览器的控制台</p><p>2.在控制台中输入 navigator.userAgent</p><p>3 会发现类似字符串 Mozilla/5.0 (Macintosh; Intel Mac 0S X 10_12_1) AppleWebkit/537.36 (KHTMLlike Gecko)Chrome/64.0.3282.186 Safari/537.36</p><h3 id="用户代理的作用" tabindex="-1">用户代理的作用 <a class="header-anchor" href="#用户代理的作用" aria-label="Permalink to &quot;用户代理的作用&quot;">​</a></h3><p>1.判断浏览器类型，采用兼容方案</p><p>2.判断是否为移动端</p><p>3.标识 H5 容器，方便调用 H5 容器特定接口</p><p>4.要注意 userAgent 伪装成本很低，不要过于依赖</p><h3 id="内核" tabindex="-1">内核 <a class="header-anchor" href="#内核" aria-label="Permalink to &quot;内核&quot;">​</a></h3><p>对于操作系统来说，内核是操作系统的核心，是第一层基于硬件的软件扩充，提供最核心最基础的服务。</p><p>应用程序通过内核进行系统调用来使用计算机的硬件，内核代码简洁高效，并且基本没有 bug，由于是最底层的服务，一点微小的错误也会造成整个系统的崩淡。好处当然也显而易见，基于一个稳定的内核，开发者可以构建适合不同场景的操作系统和应用软件。</p><p>对于浏览器来说，同样存在浏览内核，与操作系统内核相似，浏览器内核需要提供 API 给浏览器开发者使用，同时提供最核心的功能，如加载和渲染网页，调用操作系统所提供的服务。</p><p>对于浏览器厂商来说，高效使用和开发浏览器内核是核心问题。对于 web 开发者来说，理解浏览器内核的基本机制，才能开发出高性能的 web 应用</p><h2 id="浏览器内核知识" tabindex="-1">浏览器内核知识 <a class="header-anchor" href="#浏览器内核知识" aria-label="Permalink to &quot;浏览器内核知识&quot;">​</a></h2><h3 id="浏览器内核定义" tabindex="-1">浏览器内核定义 <a class="header-anchor" href="#浏览器内核定义" aria-label="Permalink to &quot;浏览器内核定义&quot;">​</a></h3><p>我们可以初步认为浏览器中负责将表示页面的字符转变成可视化的图像的模块就是浏览器内核。</p><h2 id="浏览器页面渲染流程" tabindex="-1">浏览器页面渲染流程 <a class="header-anchor" href="#浏览器页面渲染流程" aria-label="Permalink to &quot;浏览器页面渲染流程&quot;">​</a></h2><ul><li>1.DNS 解析(多级缓存)</li><li>2.请求 (TCP 建连、HTTP 报文)</li><li>3.解析 (解压、缓存处理、引用资源)</li><li>4.构建: DOM 树(节点显隐、层次结构)</li><li>5.构建:CSSOM 树(CSS 优先级)</li><li>6.构建: Render 树 (CSS 匹配规则)</li><li>7.脚本：文档状态(阻塞和延迟、内联和外联)</li><li>8.渲染页面</li></ul><h3 id="从-url-输入的到浏览器加载-问题" tabindex="-1">从”URL 输入的到浏览器加载“问题 <a class="header-anchor" href="#从-url-输入的到浏览器加载-问题" aria-label="Permalink to &quot;从”URL 输入的到浏览器加载“问题&quot;">​</a></h3><p>我们将输入 URL 到远程内容返回之前的阶段略过，从“Response”开始</p><p>使用 Node.js 的 TCP 模块来获取，远程主机究竟给我们返回了什么：</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/411656922" target="_blank" rel="noreferrer">一文搞懂如何使用 Node.js 进行 TCP 网络通信 - 知乎 (zhihu.com)</a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="chromium-架构" tabindex="-1">Chromium 架构 <a class="header-anchor" href="#chromium-架构" aria-label="Permalink to &quot;Chromium 架构&quot;">​</a></h2><p>基于 webkit 内核就可以构建浏览器应用，了解著名的 chromium 浏览器对我们的 web 开发也有很多启发。 几个问题:</p><ul><li>1.除去 webkit 内核完成的功能，浏览器的工作有哪些?</li><li>2.进程是什么?</li><li>3.IPC 是什么?</li><li>4.线程是什么?</li><li>5.线程同步是什么?</li></ul><h3 id="现代浏览器的工作" tabindex="-1">现代浏览器的工作 <a class="header-anchor" href="#现代浏览器的工作" aria-label="Permalink to &quot;现代浏览器的工作&quot;">​</a></h3><ul><li>资源管理：</li><li>多页面管理：也就是多个标签页的管理.</li><li>插件和扩展：如 fash，油猴，chrome 扩展程序</li><li>账户和同步</li><li>安全机制</li><li>多系统支持</li></ul><h3 id="进程和线程" tabindex="-1">进程和线程 <a class="header-anchor" href="#进程和线程" aria-label="Permalink to &quot;进程和线程&quot;">​</a></h3><ul><li>进程：对 CPU，主存，10 设备的抽象，操作系统对一个正在运行的程序的抽象。</li><li>线程：组成进程的执行单元</li><li>进程通信：进程间传输数据(交换信息)</li><li>线程同步:</li></ul><h3 id="进程通讯的方式" tabindex="-1">进程通讯的方式 <a class="header-anchor" href="#进程通讯的方式" aria-label="Permalink to &quot;进程通讯的方式&quot;">​</a></h3><h3 id="线程同步的方式" tabindex="-1">线程同步的方式 <a class="header-anchor" href="#线程同步的方式" aria-label="Permalink to &quot;线程同步的方式&quot;">​</a></h3><h3 id="chromium-的多进程架构" tabindex="-1">chromium 的多进程架构 <a class="header-anchor" href="#chromium-的多进程架构" aria-label="Permalink to &quot;chromium 的多进程架构&quot;">​</a></h3><p>主要进程介绍:</p><ul><li>Browser 进程:主进程，负责浏览器界面，页面管理等</li><li>Renderer 进程:渲染程</li><li>NPAPI 插件进程</li><li>GPU 进程:当 GPU 硬件加速打开时才会创建</li></ul><p>多进程架构的目的所在：</p><ul><li>1.职责分离，故障范围小</li><li>2.隔离性</li><li>3.性能</li></ul><h2 id="repaint-reflow" tabindex="-1">Repaint + Reflow <a class="header-anchor" href="#repaint-reflow" aria-label="Permalink to &quot;Repaint + Reflow&quot;">​</a></h2><p>Repaint: 皮肤类外观改变引发的重新渲染，如背景色</p><p>Reflow: 位置、大小、盒模型等发生变化需要重新布局</p><p>常见的诱因：</p><ul><li>页面滚动</li><li>页面缩放</li><li>添加样式</li><li>操作作 DOM(属性、样式、增删节点)</li><li>计算宽高位置等</li></ul>',57)]))}const m=e(o,[["render",t]]);export{c as __pageData,m as default};
