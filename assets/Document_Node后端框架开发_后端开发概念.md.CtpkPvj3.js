import{_ as e,c as l,o as r,ah as o}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"后端开发概念","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/后端开发概念.md","filePath":"Document/Node后端框架开发/后端开发概念.md","lastUpdated":1750954157000}'),i={name:"Document/Node后端框架开发/后端开发概念.md"};function n(t,a,s,p,d,h){return r(),l("div",null,a[0]||(a[0]=[o('<h1 id="后端开发概念" tabindex="-1">后端开发概念 <a class="header-anchor" href="#后端开发概念" aria-label="Permalink to &quot;后端开发概念&quot;">​</a></h1><h2 id="服务器" tabindex="-1">服务器 <a class="header-anchor" href="#服务器" aria-label="Permalink to &quot;服务器&quot;">​</a></h2><p>文本网站服务器：专门对外提供Web网页资源的服务器</p><p>API接口服务器：专门对外提供 API 接口 的服务器</p><h2 id="nodemon安装" tabindex="-1">nodemon安装 <a class="header-anchor" href="#nodemon安装" aria-label="Permalink to &quot;nodemon安装&quot;">​</a></h2><p>作用：保存项目后运行自动重启项目，不需要手动重启</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#D19A66;"> -g</span><span style="color:#98C379;"> nodemon</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>启动</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">nodemon</span><span style="color:#98C379;"> xxx.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h2><h3 id="mysql-免费-收费" tabindex="-1">MySQL (免费+收费) <a class="header-anchor" href="#mysql-免费-收费" aria-label="Permalink to &quot;MySQL (免费+收费)&quot;">​</a></h3><ul><li><p>目前使用最广泛、流行度最高的开源免费数据库；Community + Enterprise</p></li><li><p>安装</p></li><li><p>基本使用</p><ul><li><p>1.使用 MySQL Workbench 管理数据库</p></li><li><p>DataType 数据类型</p></li><li><p>表字段的特殊标识</p></li><li><p>SQL语句</p><ul><li><p><a href="https://www.w3school.com.cn/sql/sql_syntax.asp" target="_blank" rel="noreferrer">https://www.w3school.com.cn/sql/sql_syntax.asp</a></p></li><li><p><a href="https://www.runoob.com/sql/sql-select.html" target="_blank" rel="noreferrer">https://www.runoob.com/sql/sql-select.html</a></p></li></ul></li></ul></li></ul><h3 id="oracle-数据库-收费" tabindex="-1">Oracle 数据库(收费) <a class="header-anchor" href="#oracle-数据库-收费" aria-label="Permalink to &quot;Oracle 数据库(收费)&quot;">​</a></h3><h3 id="sql-server-数据库-收费" tabindex="-1">SQL Server 数据库(收费) <a class="header-anchor" href="#sql-server-数据库-收费" aria-label="Permalink to &quot;SQL Server 数据库(收费)&quot;">​</a></h3><h3 id="mongodb-数据库-免费-收费" tabindex="-1">Mongodb 数据库 (免费+收费) <a class="header-anchor" href="#mongodb-数据库-免费-收费" aria-label="Permalink to &quot;Mongodb 数据库 (免费+收费)&quot;">​</a></h3><p>(Community + Enterprise)</p><h2 id="web开发模式" tabindex="-1">Web开发模式 <a class="header-anchor" href="#web开发模式" aria-label="Permalink to &quot;Web开发模式&quot;">​</a></h2><h3 id="_1-基于服务端渲染的-传统-web-开发模式" tabindex="-1">1.基于服务端渲染的 传统 Web 开发模式 <a class="header-anchor" href="#_1-基于服务端渲染的-传统-web-开发模式" aria-label="Permalink to &quot;1.基于服务端渲染的 传统 Web 开发模式&quot;">​</a></h3><p>服务端渲染的概念：服务器发送给客户端的 HTML 页面 ，是在服务器通过字符串的拼接，动态生成的。因此，客户端不需要使用 Ajax 这样的技术额外请求页面的数据</p><p>服务端渲染的优缺点</p><h4 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li><p>前端耗时少。因为服务器端负责动态生成html内容，浏览器只需要直接渲染页面即可，尤其是移动端，更省电</p></li><li><p>有利于SEO。因为服务器端响应的是完整的 HTML 页面内容，所以爬虫更容易爬取获得信息，更有利于 SEO。</p></li></ul><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li><p>占用服务端资源。既服务器端完成 HTML 页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力</p></li><li><p>不利于前后端分离，开发效率低。使用服务器渲染，则无法进行分工合作，尤其对于前端复杂度高的项目，不利于项目高效开发</p></li></ul><h3 id="_2-基于前后端分离的-新型-web-开发模式" tabindex="-1">2.基于前后端分离的 新型 Web 开发模式 <a class="header-anchor" href="#_2-基于前后端分离的-新型-web-开发模式" aria-label="Permalink to &quot;2.基于前后端分离的 新型 Web 开发模式&quot;">​</a></h3><p>前后端分离的概念：前后端分离的开发模式，依赖于Ajax 技术的广泛应用。简而言之，前后端分离的 Web 开发模式，就是后端只负责提供 API 接口 ，前端使用 Ajax 调用接口的开发模式</p><h4 id="优点-1" tabindex="-1">优点 <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点&quot;">​</a></h4><ul><li><p>1.开发体验好，前端专注于UI页面的开发，后端专注于api的开发，且前端有更多的选择性。</p></li><li><p>2.用户体验好、Ajax 技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新</p></li><li><p>3.减轻了服务端的渲染压力。因为页面最终是在每个用户的浏览器中生成的。</p></li></ul><h4 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>不利于 SEO 。 因为完整的 HTML 页面 需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息 <ul><li>解决方案：利用Vue、React 等前端框架 的SSR (server side render)技术能够很好的解决 SEO 问题</li></ul></li></ul><h2 id="身份认证机制" tabindex="-1">身份认证机制 <a class="header-anchor" href="#身份认证机制" aria-label="Permalink to &quot;身份认证机制&quot;">​</a></h2><h2 id="使用apidoc文档神器-快速生成api文档" tabindex="-1">使用apidoc文档神器， 快速生成api文档 <a class="header-anchor" href="#使用apidoc文档神器-快速生成api文档" aria-label="Permalink to &quot;使用apidoc文档神器， 快速生成api文档&quot;">​</a></h2><ul><li><p>1.安装全局模块apidoc</p><ul><li>npm install apidoc -g</li></ul></li><li><p>2.修改接口的注释</p></li></ul><h2 id="部署api服务到服务器" tabindex="-1">部署api服务到服务器 <a class="header-anchor" href="#部署api服务到服务器" aria-label="Permalink to &quot;部署api服务到服务器&quot;">​</a></h2><h2 id="本地电脑配置服务器" tabindex="-1">本地电脑配置服务器 <a class="header-anchor" href="#本地电脑配置服务器" aria-label="Permalink to &quot;本地电脑配置服务器&quot;">​</a></h2><ul><li><p>花生壳软件内网穿透，或路由器自带的映射</p></li><li><p><a href="https://docs.fuyeor.com/idle-laptop-as-server/" target="_blank" rel="noreferrer">https://docs.fuyeor.com/idle-laptop-as-server/</a></p></li></ul>',36)]))}const b=e(i,[["render",n]]);export{u as __pageData,b as default};
