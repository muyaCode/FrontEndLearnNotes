import{_ as n,c as l,o as a,ah as e}from"./chunks/framework.DqD713j2.js";const d=JSON.parse('{"title":"TypeScript 声明和配置文件","description":"","frontmatter":{},"headers":[],"relativePath":"Document/TypeScript/TypeScript配置文件/TypeScript配置文件.md","filePath":"Document/TypeScript/TypeScript配置文件/TypeScript配置文件.md","lastUpdated":1750954157000}'),p={name:"Document/TypeScript/TypeScript配置文件/TypeScript配置文件.md"};function o(t,s,r,c,i,u){return a(),l("div",null,s[0]||(s[0]=[e(`<h1 id="typescript-声明和配置文件" tabindex="-1">TypeScript 声明和配置文件 <a class="header-anchor" href="#typescript-声明和配置文件" aria-label="Permalink to &quot;TypeScript 声明和配置文件&quot;">​</a></h1><p>(tsconfig.json)配置文件官网文档：<a href="https://www.typescriptlang.org/zh/tsconfig" target="_blank" rel="noreferrer">https://www.typescriptlang.org/zh/tsconfig</a></p><p>中文配置文档：<a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html" target="_blank" rel="noreferrer">https://www.tslang.cn/docs/handbook/tsconfig-json.html</a></p><hr><h2 id="声明文件" tabindex="-1">声明文件 <a class="header-anchor" href="#声明文件" aria-label="Permalink to &quot;声明文件&quot;">​</a></h2><p><strong>声明文件文档</strong>：<a href="https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html" target="_blank" rel="noreferrer">https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html</a></p><p><strong>@types 官方声明文件库</strong>：<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/" target="_blank" rel="noreferrer">https://github.com/DefinitelyTyped/DefinitelyTyped/</a></p><p><strong>@types 搜索的声明库</strong>：<a href="https://www.typescriptlang.org/dt/search?search=" target="_blank" rel="noreferrer">https://www.typescriptlang.org/dt/search?search=</a></p><h2 id="配置详解" tabindex="-1">配置详解 <a class="header-anchor" href="#配置详解" aria-label="Permalink to &quot;配置详解&quot;">​</a></h2><p><code>tsconfig.json</code> 是放在项目根目录，用来配置一些编译选项等。</p><p>当我们使用 tsc 命令编译项目，且没有指定输入文件时，编译器就会去查找 tsconfig.json 文件。如果在当前目录没找到，就会逐级向父文件夹查找。我们也可以通过在 tsc 命令中加上–project 参数，来指定一个包含 tsconfig.json 文件的目录。如果命令行上指定了输入文件时，tsconfig.json 的配置会被忽略。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 直接在项目根目录下执行tsc命令，会自动根据tsconfig.json配置项编译</span></span>
<span class="line"><span style="color:#61AFEF;">tsc</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 指定要编译的项目，即tsconfig.json所在文件目录</span></span>
<span class="line"><span style="color:#61AFEF;">tsc</span><span style="color:#D19A66;"> --project</span><span style="color:#98C379;"> ./dir/project</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 指定要编译的文件，忽略tsconfig.json文件配置</span></span>
<span class="line"><span style="color:#61AFEF;">tsc</span><span style="color:#98C379;"> ./src/main.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>接下来我们看一下 tsconfig.json 里都有哪些可配置项。tsconfig.json 文件里有几个主要的配置项：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;compileOnSave&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;files&quot;</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;include&quot;</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;exclude&quot;</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;extends&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">: {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们来逐个学习它们的作用，以及可配置的值：</p><p>[1] <code>compileOnSave</code></p><p>compileOnSave 的值是 true 或 false。如果设为 true，在我们编辑了项目中文件保存的时候，编辑器会根据 tsconfig.json 的配置重新生成文件，不过这个要编辑器支持。</p><p>[2] <code>files</code></p><p>files 可以配置一个数组列表，里面包含指定文件的相对或绝对路径。编译器在编译的时候只会编译包含在 files 中列出的文件。如果不指定，则取决于有没有设置 include 选项；如果没有 include 选项，则默认会编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用<code>*</code>、<code>?</code>、<code>**/</code>等通配符。</p><p>[3] <code>include</code></p><p>include 也可以指定要编译的路径列表，但和 files 的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符。比如<code>&quot;./src&quot;</code>即表示要编译 src 文件夹下的所有文件以及子文件夹的文件。</p><p>[4] <code>exclude</code></p><p>exclude 表示要排除的、不编译的文件，它也可以指定一个列表，规则和 include 一样，可以是文件可以是文件夹，可以是相对路径或绝对路径，可以使用通配符。</p><p>[5] <code>extends</code></p><p>extends 可以通过指定一个其它的 tsconfig.json 文件路径，来继承这个配置文件里的配置，继承来的文件配置会覆盖当前文件定义的配置。TS 在 3.2 版本开始，支持继承一个来自 Node.js 包的 tsconfig.json 配置文件。</p><p>[6] <code>compilerOptions</code></p><p>最后要讲的这个 compilerOptions 是重点了，它用来设置编译选项。因为它包含很多的可配置项，下面我们来看下 compilerOptions 里的所有可配项：</p><p>我们先来看第一类，一些比较基本的配置：</p><ul><li>target</li></ul><p>target 用于指定编译之后的版本目标，可选值有：<code>ES3(默认值)</code>、<code>ES5</code>、<code>ES2015</code>、<code>ES2016</code>、<code>ES2017</code>、<code>ESNEXT</code>。如果不配置 target 项，默认是讲代码转译为 ES3 的版本，如果设为 ESNEXT，则为最新 ES 规范版本。</p><ul><li>module</li></ul><p>module 用来指定要使用的模块标准，可选值有<code>commonjs</code>、<code>amd</code>、<code>system</code>、<code>umd</code>、<code>es2015(或写 es6)</code>。如果不设置 module 选项，则如果 target 设为 ES6，那么 module 默认值为 ES6，否则是 commonjs。</p><ul><li>lib</li></ul><p>lib 用于指定要包含在编译中的库文件。如果你要使用一些 ES6 的新语法，你需要引入 ES6 这个库，或者也可以写 ES2015。如果没有指定 lib 配置，默认会加载一些库，而加载什么库是受 target 影响的。如果 target 为 ES5，默认包含的库有<code>DOM</code>、<code>ES5</code>和<code>ScriptHost</code>；如果 target 是 ES6，默认引入的库有<code>DOM</code>、<code>ES6</code>、<code>DOM.Iterable</code>和<code>ScriptHost</code>。</p><ul><li>allowJs</li></ul><p>allowJs 设置的值为 true 或 false，用来指定是否允许编译 JS 文件，默认是 false，即不编译 JS 文件。</p><ul><li>checkJs</li></ul><p>checkJs 的值为 true 或 false，用来指定是否检查和报告 JS 文件中的错误，默认是 false。</p><ul><li>declaration</li></ul><p>declaration 的值为 true 或 false，用来指定是否在编译的时候生成响应的&quot;.d.ts&quot;声明文件。如果设为 true，编译每个 ts 文件之后会生成一个 js 文件和一个声明文件。但是 declaration 和 allowJs 不能同时设为 true。</p><ul><li>sourceMap</li></ul><p>sourceMap 的值为 true 或 false，用来指定编译时是否生成.map 文件。</p><ul><li>outFile</li></ul><p>outFile 用于指定将输出文件合并为一个文件，它的值为一个文件路径名，比如设置为<code>&quot;./dist/main.js&quot;</code>，则输出的文件为一个 main.js 文件。但是要注意，只有设置 module 的值为 amd 和 system 模块时才支持这个配置。</p><ul><li>outDir</li></ul><p>outDir 用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹。</p><ul><li>rootDir</li></ul><p>用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现 1 以 rootDir 的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译。</p><ul><li>removeComments</li></ul><p>removeComments 值为 true 或 false，用于指定是否将编译后的文件中的注释删掉，设为 true 的话即删掉注释，默认为 false。</p><ul><li>noEmit</li></ul><p>不生成编译文件，这个一般很少用了。</p><ul><li>importHelpers</li></ul><p>importHelpers 的值为 true 或 false，指定是否引入 tslib 里的辅助工具函数，默认 Wie。</p><ul><li>isolatedModules</li></ul><p>isolatedModules 的值为 true 或 false，指定是否将每个文件作为单独的模块，默认为 true，它不可以和 declaration 同时设定。</p><p>第二类是和严格类型检查相关的，开启了这些检查如果有错会报错：</p><ul><li>noImplicitAny</li></ul><p>noImplicitAny 的值为 true 或 false，如果我们没有为一些值设置明确的类型，编译器会默认这个值为 any 类型，如果将 noImplicitAny 设为 true，则如果没有设置明确的类型会报错，默认值为 false。</p><ul><li>alwaysStrict</li></ul><p>alwaysStrict 的值为 true 或 false，指定始终以严格模式检查每个模块，并且在编译之后的 JS 文件中加入&quot;use strict&quot;字符串，用来告诉浏览器该 JS 为严格模式。</p><ul><li>strictNullChecks</li></ul><p>strictNullChecks 的值为 true 或 false，当设为 true 时，null 和 undefined 值不能赋值给非这两种类型的值，别的类型的值也不能赋给它们。 除了 any 类型，还有个例外就是 undefined 可以赋值给 void 类型。</p><ul><li>strictFunctionTypes</li></ul><p>strictFunctionTypes 的值为 true 或 false，用来指定是否使用函数参数双向协变检查。还记得我们讲类型兼容性的时候讲过函数参数双向协变的这个例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> funcA</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#61AFEF;"> funcB</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">arg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">void</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E06C75;">funcA</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> funcB</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果开启了 strictFunctionTypes，这个赋值就会报错，默认为 false</p><ul><li>strictPropertyInitialization</li></ul><p>strictPropertyInitialization 的值为 true 或 false，设为 true 后会检查类的非 undefined 属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启 strictNullChecks，默认为 false。</p><ul><li>strictBindCallApply</li></ul><p>strictBindCallApply 的值为 true 或 false，设为 true 后会对 bind、call 和 apply 绑定方法参数的检测是严格检测的，如下面的例子：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">number</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> +</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> foo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// error Property &#39;1&#39; is missing in type &#39;[number]&#39; but required in type &#39;[number, string]&#39;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> foo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// error 不能将类型“number”分配给类型“string”</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> ccd</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> foo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// right</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> ccsd</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> foo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">apply</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// right</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>strict</li></ul><p>strict 的值为 true 或 false，用于指定是否启动所有类型检查，如果设为 true 则会同时开启前面这几个严格类型检查，默认为 false。</p><p>第三类为额外的一些检查，开启了这些检查如果有错会提示不会报错：</p><ul><li>noUnusedLocals</li></ul><p>noUnusedLocals 的值为 true 或 false，用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用 ESLint 可以在你书写代码的时候做提示，你可以配合使用。它的默认值为 false。</p><ul><li>noUnusedParameters</li></ul><p>noUnusedParameters 的值为 true 或 false，用于检查是否有在函数体中没有使用的参数，这个也可以配合 ESLint 来做检查，它默认是 false。</p><ul><li>noImplicitReturns</li></ul><p>noImplicitReturns 的值为 true 或 false，用于检查函数是否有返回值，设为 true 后，如果函数没有返回值则会提示，默认为 false。</p><ul><li>noFallthroughCasesInSwitch</li></ul><p>noFallthroughCasesInSwitch 的值为 true 或 false，用于检查 switch 中是否有 case 没有使用 break 跳出 switch，默认为 false。</p><p>接下来是模块解析相关的：</p><ul><li>moduleResolution</li></ul><p>moduleResolution 用于选择模块解析策略，有&quot;node&quot;和&quot;classic&quot;两种类型，我们在讲模块解析的时候已经讲过了。</p><ul><li>baseUrl</li></ul><p>baseUrl 用于设置解析非相对模块名称的基本目录，这个我们在讲《模块和命名空间》的“模块解析配置项”一节时已经讲过了，相对模块不会受 baseUrl 的影响。</p><ul><li>paths</li></ul><p>paths 用于设置模块名到基于 baseUrl 的路径映射，我们前面也讲过，比如这样配置：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;baseUrl&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 如果使用paths，必须设置baseUrl</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;paths&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;jquery&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;node_modules/jquery/dist/jquery&quot;</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// 此处映射是相对于&quot;baseUrl&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>还有当我们要为没有声明文件的第三方模块写声明文件时，我们可以先如下设置：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;baseUrl&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;.&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 如果使用paths，必须设置baseUrl</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;paths&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">			&quot;*&quot;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&quot;./node_modules/@types/*&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;./typings/*&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>然后在 tsconfig.json 文件所在的目录里建一个 typings 文件夹，然后为要写声明文件的模块建一个同名文件夹，比如我们要为 make-dir 这个模块写声明文件，那么就在 typings 文件夹下新建一个文件夹，命名为 make-dir，然后在 make-dir 文件夹新建一个 index.d.ts 声明文件来为这个模块补充声明。</p><ul><li>rootDirs</li></ul><p>rootDirs 可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径内容都放到一个文件夹中，我们在前面也学习了。</p><ul><li>typeRoots</li></ul><p>typeRoots 用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载。</p><ul><li>types</li></ul><p>types 用来指定需要包含的模块，只有在这里列出的模块声明文件才会被加载进来。</p><ul><li>allowSyntheticDefaultImports</li></ul><p>allowSyntheticDefaultImports 的值为 true 或 false，用来指定允许从没有默认导出的模块中默认导入。</p><p>接下来的是 source map 的一些配置项：</p><ul><li>sourceRoot</li></ul><p>sourceRoot 用于指定调试器应该找到 TypeScript 文件而不是源文件位置，这个值会被写进.map 文件里。</p><ul><li>mapRoot</li></ul><p>mapRoot 用于指定调试器找到映射文件而非生成文件的位置，指定 map 文件的根路径，该选项会影响.map 文件中的 sources 属性。</p><ul><li>inlineSourceMap</li></ul><p>inlineSourceMap 值为 true 或 false，指定是否将 map 文件的内容和 js 文件编译在同一个 js 文件中。如果设为 true，则 map 的内容会以<code>//# sourceMappingURL=</code>然后接 base64 字符串的形式插入在 js 文件底部。</p><ul><li>inlineSources</li></ul><p>inlineSources 的值是 true 或 false，用于指定是否进一步将.ts 文件的内容也包含到输出文件中。</p><p>最后还有两个其他的配置项：</p><ul><li>experimentalDecorators</li></ul><p>experimentalDecorators 的值是 true 或 false，用于指定是否启用实验性的装饰器特性，我们在讲装饰器的时候已经学习过了。</p><ul><li>emitDecoratorMetadata</li></ul><p>emitDecoratorMetadata 的值为 true 或 false，用于指定是否为装饰器提供元数据支持。关于元数据，也是 ES6 的新标准，可以通过 Reflect 提供的静态方法获取元数据，如果需要使用 Reflect 的一些方法，需要引入 ES2015.Reflect 这个库。</p><h1 id="其他库" tabindex="-1">其他库 <a class="header-anchor" href="#其他库" aria-label="Permalink to &quot;其他库&quot;">​</a></h1><p>zod：<a href="https://github.com/colinhacks/zod" target="_blank" rel="noreferrer">使用静态类型推断进行 TypeScript 优先架构验证</a></p><p>zod官网：<a href="https://zod.dev/" target="_blank" rel="noreferrer">zod.dev</a></p>`,119)]))}const B=n(p,[["render",o]]);export{d as __pageData,B as default};
