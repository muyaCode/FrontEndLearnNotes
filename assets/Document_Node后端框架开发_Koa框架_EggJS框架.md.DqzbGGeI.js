import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/01-egg%E5%9C%A8%E9%98%BF%E9%87%8C.BwCV-dal.png",o="/FrontEndLearnNotes/assets/02-Nodejs%E5%9C%A8%E9%98%BF%E9%87%8C.CHMYsldm.png",F=JSON.parse('{"title":"EggJs 框架","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Koa框架/EggJS框架.md","filePath":"Document/Node后端框架开发/Koa框架/EggJS框架.md","lastUpdated":1750954157000}'),t={name:"Document/Node后端框架开发/Koa框架/EggJS框架.md"};function r(c,s,B,i,y,b){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="eggjs-框架" tabindex="-1">EggJs 框架 <a class="header-anchor" href="#eggjs-框架" aria-label="Permalink to &quot;EggJs 框架&quot;">​</a></h1><h2 id="eggjs-介绍" tabindex="-1">EggJs 介绍 <a class="header-anchor" href="#eggjs-介绍" aria-label="Permalink to &quot;EggJs 介绍&quot;">​</a></h2><p>EggJs 是阿里为使用 Node.js &amp; Koa 构建更好的企业框架和应用程序而诞生</p><p>Egg 选择了 Koa 作为其基础框架，在它的模型基础上，进一步对它进行了一些增强</p><h3 id="egg-在阿里" tabindex="-1">Egg 在阿里 <a class="header-anchor" href="#egg-在阿里" aria-label="Permalink to &quot;Egg 在阿里&quot;">​</a></h3><p><img src="'+e+'" alt="01-egg在阿里.png"></p><h3 id="node-在阿里" tabindex="-1">Node 在阿里 <a class="header-anchor" href="#node-在阿里" aria-label="Permalink to &quot;Node 在阿里&quot;">​</a></h3><p><img src="'+o+`" alt="02-Nodejs在阿里.png"></p><h3 id="egg-特性" tabindex="-1">Egg 特性 <a class="header-anchor" href="#egg-特性" aria-label="Permalink to &quot;Egg 特性&quot;">​</a></h3><ul><li>提供基于 Egg <a href="https://www.eggjs.org/zh-CN/advanced/framework" target="_blank" rel="noreferrer">定制上层框架</a>的能力</li><li>高度可扩展的<a href="https://www.eggjs.org/zh-CN/basics/plugin" target="_blank" rel="noreferrer">插件机制</a></li><li>内置<a href="https://www.eggjs.org/zh-CN/advanced/cluster-client" target="_blank" rel="noreferrer">多进程管理</a></li><li><strong>基于  <a href="http://koajs.com/" target="_blank" rel="noreferrer">Koa</a>  开发，性能优异</strong></li><li>框架稳定，测试覆盖率高</li><li><a href="https://www.eggjs.org/zh-CN/intro/progressive" target="_blank" rel="noreferrer">渐进式开发</a></li></ul><h3 id="egg-优势" tabindex="-1">Egg 优势 <a class="header-anchor" href="#egg-优势" aria-label="Permalink to &quot;Egg 优势&quot;">​</a></h3><ul><li><p>1.Express 和 Koa 没有约束和规范, 会导致团队的沟通成本和项目的维护成本变高，EggJS 有约束和规范, 会大大降低团队的沟通成本和项目的维护成本</p><ul><li><p>什么是有约束和规范?</p><p>和 ESLint 检查 JS 代码一样, 有一套标准, 必须严格遵守这套标准 ,否则就会报错</p><p><a href="https://eggjs.org/zh-cn/basics/structure.html" target="_blank" rel="noreferrer">https://eggjs.org/zh-cn/basics/structure.html</a></p></li></ul></li><li><p>2.阿里内部大量企业级项目使用 egg 开发, 实践出真知</p></li><li><p>3.Node 社区 5 位国人核心贡献者 4 人在阿里, 技术有保障</p></li><li><p>4.阿里前端安全专家，负责 egg-security 等类库, 安全有保障</p></li></ul><h3 id="egg-开发遵循-mvc-规范-什么是-mvc" tabindex="-1">Egg 开发遵循 MVC 规范，什么是 MVC？ <a class="header-anchor" href="#egg-开发遵循-mvc-规范-什么是-mvc" aria-label="Permalink to &quot;Egg 开发遵循 MVC 规范，什么是 MVC？&quot;">​</a></h3><p>M(Model)：处理应用程序&#39;数据逻辑&#39;的部分(service)</p><p>V(View)：处理数据显示的部分(静态/动态网页)</p><p>C(Controller)：处理应用程序业务逻辑, 数据和页面的桥梁(controller)</p><p>推荐阅读: <a href="https://github.com/atian25/blog/issues/18" target="_blank" rel="noreferrer">https://github.com/atian25/blog/issues/18</a></p><h2 id="eggjs-相关网址文档" tabindex="-1">EggJS 相关网址文档 <a class="header-anchor" href="#eggjs-相关网址文档" aria-label="Permalink to &quot;EggJS 相关网址文档&quot;">​</a></h2><p>EggJs 官网：<a href="https://www.eggjs.org/zh-CN" target="_blank" rel="noreferrer">https://www.eggjs.org/zh-CN</a></p><p>EggJs 中文文档：<a href="https://www.eggjs.org/zh-CN/intro/quickstart" target="_blank" rel="noreferrer">https://www.eggjs.org/zh-CN/intro/quickstart</a></p><p>EggJs 开源 GitHub 地址：<a href="https://github.com/eggjs/egg" target="_blank" rel="noreferrer">https://github.com/eggjs/egg</a></p><h2 id="eggjs-实战-😁" tabindex="-1">EggJS 实战 😁 <a class="header-anchor" href="#eggjs-实战-😁" aria-label="Permalink to &quot;EggJS 实战 😁&quot;">​</a></h2><p>实战写完的 demo：<a href="https://github.com/muyaCode/egg-demo" target="_blank" rel="noreferrer">muyaCode/egg-demo: egg 项目练习 (github.com)</a></p><hr><p>看快速入门文档，脚手架初始化项目：<a href="https://www.eggjs.org/zh-CN/intro/quickstart" target="_blank" rel="noreferrer">快速入门 - Egg (eggjs.org)</a></p><h3 id="_1-eggjs-的项目结构" tabindex="-1">1.eggjs 的项目结构 <a class="header-anchor" href="#_1-eggjs-的项目结构" aria-label="Permalink to &quot;1.eggjs 的项目结构&quot;">​</a></h3><p>文档：<a href="https://www.eggjs.org/zh-CN/basics/structure" target="_blank" rel="noreferrer">目录结构 - Egg (eggjs.org)</a></p><p>项目需要根据官方目录结构规范开发，否则不能正常运行</p><hr><h3 id="_2-项目运行环境配置" tabindex="-1">2.项目运行环境配置 <a class="header-anchor" href="#_2-项目运行环境配置" aria-label="Permalink to &quot;2.项目运行环境配置&quot;">​</a></h3><p>文档：<a href="https://www.eggjs.org/zh-CN/basics/env" target="_blank" rel="noreferrer">运行环境 - Egg (eggjs.org)</a></p><hr><h3 id="_3-项目的安全策略配置-config-目录" tabindex="-1">3.项目的安全策略配置-config 目录 <a class="header-anchor" href="#_3-项目的安全策略配置-config-目录" aria-label="Permalink to &quot;3.项目的安全策略配置-config 目录&quot;">​</a></h3><p>config 配置-文档：<a href="https://www.eggjs.org/zh-CN/basics/config" target="_blank" rel="noreferrer">Config 配置 - Egg (eggjs.org)</a></p><p>EggJS 给我们提供了多种配置文件, 方便我们在不同的阶段中使用</p><ul><li><p>config.prod.js     // 只有线上环境会加载</p></li><li><p>config.test.js     // 只有测试环境会加载</p></li><li><p>config.local.js     // 只有开发环境会加载</p></li><li><p>config.default.js   // 所有环境都会加载</p></li></ul><p>如果出现同名的配置,，后面三个配置文件中的配置会覆盖 default 中的配置</p><hr><h4 id="如何设置当前环境" tabindex="-1">如何设置当前环境? <a class="header-anchor" href="#如何设置当前环境" aria-label="Permalink to &quot;如何设置当前环境?&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">EGG_SERVER_ENV</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> xxx</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行环境-配置文档：<a href="https://www.eggjs.org/zh-CN/basics/env" target="_blank" rel="noreferrer">运行环境 - Egg (eggjs.org)</a></p><h5 id="需要配合cross-env环境变量库使用" tabindex="-1">需要配合<code>cross-env</code>环境变量库使用 <a class="header-anchor" href="#需要配合cross-env环境变量库使用" aria-label="Permalink to &quot;需要配合\`cross-env\`环境变量库使用&quot;">​</a></h5><p>package.json 文件内配置：</p><p><code>egg-scripts start --daemon</code> 此命令可以查看应用部署文档：<a href="https://www.eggjs.org/zh-CN/core/deployment" target="_blank" rel="noreferrer">应用部署 - Egg (eggjs.org)</a></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;dev&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cross-env EGG_SERVER_ENV=dev egg-bin dev&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;prod&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cross-env EGG_SERVER_ENV=prod egg-scripts start --daemon&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;stop&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;egg-scripts stop&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>配合上面的 config 的各个配置文件，达到环境变量配置的作用</p><hr><p>安全配置-文档：<a href="https://www.eggjs.org/zh-CN/core/security" target="_blank" rel="noreferrer">安全 - Egg (eggjs.org)</a></p><hr><h3 id="_4-内置基础对象" tabindex="-1">4.内置基础对象 <a class="header-anchor" href="#_4-内置基础对象" aria-label="Permalink to &quot;4.内置基础对象&quot;">​</a></h3><p>文档：<a href="https://www.eggjs.org/zh-CN/basics/objects" target="_blank" rel="noreferrer">框架内置基础对象 - Egg (eggjs.org)</a></p><h3 id="_5-静态资源目录-app-public" tabindex="-1">5.静态资源目录-app/public <a class="header-anchor" href="#_5-静态资源目录-app-public" aria-label="Permalink to &quot;5.静态资源目录-app/public&quot;">​</a></h3><p>把静态资源放在<code>app/public</code>目录下，会自动解析</p><p>浏览器访问：<code>localhost:7001/public/login.html</code></p><p>项目内访问：</p><h3 id="_6-动态资源处理-模板渲染" tabindex="-1">6.动态资源处理-模板渲染 <a class="header-anchor" href="#_6-动态资源处理-模板渲染" aria-label="Permalink to &quot;6.动态资源处理-模板渲染&quot;">​</a></h3><p>模板渲染文档：<a href="https://www.eggjs.org/zh-CN/core/view" target="_blank" rel="noreferrer">View 模板渲染 - Egg (eggjs.org)</a></p><p>我们这里选择用 ejs 渲染模板插件</p><h4 id="_1-安装egg-view-ejs插件" tabindex="-1">1.安装<code>egg-view-ejs</code>插件 <a class="header-anchor" href="#_1-安装egg-view-ejs插件" aria-label="Permalink to &quot;1.安装\`egg-view-ejs\`插件&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> i</span><span style="color:#98C379;"> egg-view-ejs</span><span style="color:#D19A66;"> --save</span><span style="color:#D19A66;"> --legacy-peer-deps</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># --legacy-peer-deps：解决安装报错↓，插件不兼容</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># npm ERR! code ERESOLVE</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># npm ERR! ERESOLVE could not resolve</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2-在-config-目录下新建-plugin-js-写入配置" tabindex="-1">2.在 config 目录下新建 plugin.js-写入配置 <a class="header-anchor" href="#_2-在-config-目录下新建-plugin-js-写入配置" aria-label="Permalink to &quot;2.在 config 目录下新建 plugin.js-写入配置&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ejs</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">enable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">package</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;egg-view-ejs&quot;</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-在-config-default-js-中新增如下配置" tabindex="-1">3.在 config.default.js 中新增如下配置 <a class="header-anchor" href="#_3-在-config-default-js-中新增如下配置" aria-label="Permalink to &quot;3.在 config.default.js 中新增如下配置&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">view</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">mapping</span><span style="color:#ABB2BF;">: { </span><span style="color:#98C379;">&#39;.html&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ejs&#39;</span><span style="color:#ABB2BF;"> } },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_4-在-app-目录中新建-view-目录-将动态网页放到这个目录中" tabindex="-1">4.在 app 目录中新建 view 目录, 将动态网页放到这个目录中 <a class="header-anchor" href="#_4-在-app-目录中新建-view-目录-将动态网页放到这个目录中" aria-label="Permalink to &quot;4.在 app 目录中新建 view 目录, 将动态网页放到这个目录中&quot;">​</a></h4><p>文件：app/view/index.html</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;动态网页&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;我是动态网页&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#FFFFFF;">&lt;</span><span style="color:#ABB2BF;">%=msg%&gt;&lt;/</span><span style="color:#E06C75;">h2</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_5-在控制器中通过上下文-render-方法渲染" tabindex="-1">5.在控制器中通过上下文 render 方法渲染 <a class="header-anchor" href="#_5-在控制器中通过上下文-render-方法渲染" aria-label="Permalink to &quot;5.在控制器中通过上下文 render 方法渲染&quot;">​</a></h4><p>控制器中添加新方法：app/controller/home.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 模板渲染</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> getHome</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;index&#39;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;ejs模板渲染&#39;</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在路由中使用控制器方法渲染页面</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// ejs模板渲染引擎页面</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/home&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">controller</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">home</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getHome</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h3 id="_7-数据库操作和网络数据处理-服务-service" tabindex="-1">7.数据库操作和网络数据处理-服务（Service） <a class="header-anchor" href="#_7-数据库操作和网络数据处理-服务-service" aria-label="Permalink to &quot;7.数据库操作和网络数据处理-服务（Service）&quot;">​</a></h3><p>Service 文档：<a href="https://www.eggjs.org/zh-CN/basics/service" target="_blank" rel="noreferrer">服务（Service） - Egg (eggjs.org)</a></p><h4 id="_1-项目新建-app-service-目录" tabindex="-1">1.项目新建 app/service 目录 <a class="header-anchor" href="#_1-项目新建-app-service-目录" aria-label="Permalink to &quot;1.项目新建 app/service 目录&quot;">​</a></h4><p>目录下新建与控制器同名的服务方法模块 js</p><p><code>app/service/home.js</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// app/service/home.js</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Service</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">Service</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> HomeService</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Service</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	async</span><span style="color:#61AFEF;"> findNews</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 发送get不带参数的请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let response = await this.ctx.curl(&#39;http://127.0.0.1:3000/getUser&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 发送get带参数的请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let response = await this.ctx.curl(&#39;http://127.0.0.1:3000/getUser2?name=it666&amp;age=66&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 发送post不带参数的请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// let response = await this.ctx.curl(&#39;http://127.0.0.1:3000/getNews&#39;, {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		//     method: &#39;post&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 发送post带参数的请求</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">curl</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://localhost:3000/getNews2&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#E06C75;">			method</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;post&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">				name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lnj&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">				age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">33</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;HomeService&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> HomeService</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h4 id="_2-使用-service-的数据请求处理的服务方法" tabindex="-1">2.使用 service 的数据请求处理的服务方法 <a class="header-anchor" href="#_2-使用-service-的数据请求处理的服务方法" aria-label="Permalink to &quot;2.使用 service 的数据请求处理的服务方法&quot;">​</a></h4><p>控制器中新添加方法：app/controller/home.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> getNews</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">service</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">home</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findNews</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> data</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在路由中使用方法：app/router.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 数据处理</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/news&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">controller</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">home</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">getNews</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="service-注意点" tabindex="-1">service 注意点 <a class="header-anchor" href="#service-注意点" aria-label="Permalink to &quot;service 注意点&quot;">​</a></h4><ol><li><p>service 目录必须放在 app 目录中</p></li><li><p>service 目录支持多级目录, 如果是多级目录, 那么在调用的时候可以使用链式调用</p><ol><li><code>this.ctx.service.abc.def.text.xxx();</code></li></ol></li><li><p>service 中的 js 文件, 如果是以_或者首字母都是大写, 那么在调用的时候必须转换成驼峰命名</p><ol><li><p><code>get_user.js --- getUser</code></p></li><li><p><code>GetUser.js --- getUser</code></p></li></ol></li></ol><hr><h3 id="_8-处理-cookie-和-session" tabindex="-1">8.处理 Cookie 和 Session <a class="header-anchor" href="#_8-处理-cookie-和-session" aria-label="Permalink to &quot;8.处理 Cookie 和 Session&quot;">​</a></h3><p>文档：<a href="https://www.eggjs.org/zh-CN/core/cookie-and-session" target="_blank" rel="noreferrer">Cookie 与 Session - Egg (eggjs.org)</a></p><hr><h3 id="_9-处理日志" tabindex="-1">9.处理日志 <a class="header-anchor" href="#_9-处理日志" aria-label="Permalink to &quot;9.处理日志&quot;">​</a></h3><p>文档：<a href="https://www.eggjs.org/zh-CN/core/logger" target="_blank" rel="noreferrer">日志 - Egg (eggjs.org)</a></p><hr><h3 id="_10-定时任务" tabindex="-1">10.定时任务 <a class="header-anchor" href="#_10-定时任务" aria-label="Permalink to &quot;10.定时任务&quot;">​</a></h3><p>文档：<a href="https://www.eggjs.org/zh-CN/basics/schedule" target="_blank" rel="noreferrer">定时任务 - Egg (eggjs.org)</a></p><h4 id="eggjs-定时任务-计划任务" tabindex="-1">EggJS 定时任务(计划任务)? <a class="header-anchor" href="#eggjs-定时任务-计划任务" aria-label="Permalink to &quot;EggJS 定时任务(计划任务)?&quot;">​</a></h4><p>虽然我们通过框架开发的 Web 服务器是请求响应模型的，但是仍然还会有许多场景需要执行一些定时任务，例如：</p><ul><li><p>定时进行文件切割、临时文件删除。</p></li><li><p>定时上报应用状态。(例如监控系统, 时时监控系统有没有问题, 典型例子 MongoDB/Redis 集群选举)</p></li><li><p>定时从远程接口更新本地缓存。</p></li></ul><p>Egg 框架提供了一套机制来让定时任务的编写和维护更加优雅</p><h5 id="_1-定义定时任务" tabindex="-1">1.定义定时任务 <a class="header-anchor" href="#_1-定义定时任务" aria-label="Permalink to &quot;1.定义定时任务&quot;">​</a></h5><p>新建文件：<code>app/schedule/updateMessage.js</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Subscription</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">Subscription</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> UpdateCache</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Subscription</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 通过 schedule 属性来设置定时任务的执行间隔等配置</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#C678DD;"> get</span><span style="color:#61AFEF;"> schedule</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			interval</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;3s&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 间隔3秒执行一次</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;all&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//  all表示当前服务器上所有相同的Node进程都执行</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// subscribe 是真正定时任务执行时被运行的函数</span></span>
<span class="line"><span style="color:#C678DD;">	async</span><span style="color:#61AFEF;"> subscribe</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">curl</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://127.0.0.1:3000/getMsg&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> data</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Buffer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> UpdateCache</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>接下来<code>npm run dev</code>运行当前 egg 项目，定时任务便会定时执行定时任务<code>subscribe</code>方法</p><h5 id="_2-定时任务渲染到当前项目的模板引擎" tabindex="-1">2.定时任务渲染到当前项目的模板引擎 <a class="header-anchor" href="#_2-定时任务渲染到当前项目的模板引擎" aria-label="Permalink to &quot;2.定时任务渲染到当前项目的模板引擎&quot;">​</a></h5><p>控制器中添加方法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定时任务渲染方法</span></span>
<span class="line"><span style="color:#E06C75;">async</span><span style="color:#61AFEF;"> test</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">  await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">render</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;index&#39;</span><span style="color:#ABB2BF;">, { </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>添加路由：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定时任务路由</span></span>
<span class="line"><span style="color:#E5C07B;">router</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/test&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">controller</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">home</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">test</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h5 id="_3-启动自定义" tabindex="-1">3.启动自定义 <a class="header-anchor" href="#_3-启动自定义" aria-label="Permalink to &quot;3.启动自定义&quot;">​</a></h5><p>文档：<a href="https://www.eggjs.org/zh-CN/basics/app-start" target="_blank" rel="noreferrer">启动自定义 - Egg (eggjs.org)</a></p><h6 id="_1-项目根目录新建文件-app-js" tabindex="-1">1.项目根目录新建文件：app.js <a class="header-anchor" href="#_1-项目根目录新建文件-app-js" aria-label="Permalink to &quot;1.项目根目录新建文件：app.js&quot;">​</a></h6><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// app.js</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> AppBootHook</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">app</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">app</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 这个方法会在EggJS程序启动完毕之后执行</span></span>
<span class="line"><span style="color:#C678DD;">	async</span><span style="color:#61AFEF;"> serverDidReady</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 注意点: 这里传递的不是方法名称, 而是需要被执行的那个定时任务文件的名称</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">runSchedule</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;updateMessage&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> AppBootHook</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>然后<code>npm run dev</code>运行当前 egg 项目</p><hr><h3 id="_11-egg-框架扩展" tabindex="-1">11.Egg 框架扩展 <a class="header-anchor" href="#_11-egg-框架扩展" aria-label="Permalink to &quot;11.Egg 框架扩展&quot;">​</a></h3><p>在开发中，我们既可以使用已有的扩展 API 来方便开发，也可以对以上对象进行自定义扩展，进一步加强框架的功能</p><p>文档：<a href="https://www.eggjs.org/zh-CN/basics/extend" target="_blank" rel="noreferrer">框架扩展 - Egg (eggjs.org)</a></p><hr><h3 id="_12-egg-中间件" tabindex="-1">12.Egg 中间件 <a class="header-anchor" href="#_12-egg-中间件" aria-label="Permalink to &quot;12.Egg 中间件&quot;">​</a></h3><p>文档：<a href="https://www.eggjs.org/zh-CN/basics/middleware" target="_blank" rel="noreferrer">中间件（Middleware） - Egg (eggjs.org)</a></p><p>app/middleware 目录</p><hr><h3 id="_13-egg-操作数据库" tabindex="-1">13.Egg 操作数据库 <a class="header-anchor" href="#_13-egg-操作数据库" aria-label="Permalink to &quot;13.Egg 操作数据库&quot;">​</a></h3><p>MySQL：<a href="https://www.eggjs.org/zh-CN/tutorials/mysql" target="_blank" rel="noreferrer">MySQL - Egg (eggjs.org)</a></p><p>Sequelize：<a href="https://www.eggjs.org/zh-CN/tutorials/sequelize" target="_blank" rel="noreferrer">Sequelize - Egg (eggjs.org)</a></p><hr><h3 id="_14-csrf-安全防范" tabindex="-1">14.CSRF 安全防范 <a class="header-anchor" href="#_14-csrf-安全防范" aria-label="Permalink to &quot;14.CSRF 安全防范&quot;">​</a></h3><p>文档：<a href="https://www.eggjs.org/zh-CN/core/security#%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81-csrf-%E7%9A%84%E9%98%B2%E8%8C%83" target="_blank" rel="noreferrer">安全 - Egg (eggjs.org)</a></p><p>跨站请求伪造攻击</p><hr><h3 id="_15-数据校验" tabindex="-1">15.数据校验 <a class="header-anchor" href="#_15-数据校验" aria-label="Permalink to &quot;15.数据校验&quot;">​</a></h3><p>使用<code>egg-validate</code>库，npm 文档：<a href="https://www.npmjs.com/package/egg-validate" target="_blank" rel="noreferrer">egg-validate - npm (npmjs.com)</a></p><p>在<code>controller</code>控制器层校验前端传过来的表单数据：<a href="https://www.eggjs.org/zh-CN/basics/controller" target="_blank" rel="noreferrer">控制器（Controller） - Egg (eggjs.org)</a></p><hr><h3 id="_16-统一接口返回相应格式配置" tabindex="-1">16.统一接口返回相应格式配置 <a class="header-anchor" href="#_16-统一接口返回相应格式配置" aria-label="Permalink to &quot;16.统一接口返回相应格式配置&quot;">​</a></h3><p>框架扩展文档：<a href="https://www.eggjs.org/zh-CN/basics/extend" target="_blank" rel="noreferrer">框架扩展 - Egg (eggjs.org)</a></p><p>对 context 进行扩展：<a href="https://www.eggjs.org/zh-CN/basics/extend#context" target="_blank" rel="noreferrer">框架扩展#context - Egg (eggjs.org)</a></p><h4 id="_1-新建app-extend目录下的文件-app-extend-context-js" tabindex="-1">1.新建<code>app/extend</code>目录下的文件：app/extend/context.js <a class="header-anchor" href="#_1-新建app-extend目录下的文件-app-extend-context-js" aria-label="Permalink to &quot;1.新建\`app/extend\`目录下的文件：app/extend/context.js&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 请求成功返回</span></span>
<span class="line"><span style="color:#61AFEF;">	success</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;成功&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this 就是 ctx 对象，在其中可以调用 ctx 上的其他方法，或访问属性</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			code</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			msg</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 请求错误</span></span>
<span class="line"><span style="color:#61AFEF;">	error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 500</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;错误&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this 就是 ctx 对象，在其中可以调用 ctx 上的其他方法，或访问属性</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			code</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			msg</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="_2-定义请求成功和错误的状态码-app-extend-helper-js" tabindex="-1">2.定义请求成功和错误的状态码：app\\extend\\helper.js <a class="header-anchor" href="#_2-定义请求成功和错误的状态码-app-extend-helper-js" aria-label="Permalink to &quot;2.定义请求成功和错误的状态码：app\\extend\\helper.js&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	errorCode</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 成功状态码</span></span>
<span class="line"><span style="color:#D19A66;">		200</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求成功。客户端向服务器请求数据，服务器返回相关数据&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		201</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;资源创建成功。客户端向服务器提供数据，服务器创建资源&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		202</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求被接收。但处理尚未完成&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		204</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;客户端告知服务器删除一个资源，服务器移除它&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		206</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求成功。但是只有部分回应&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 错误状态码</span></span>
<span class="line"><span style="color:#D19A66;">		400</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求无效。数据不正确，请重试&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		401</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求没有权限。缺少API token，无效或者超时&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		403</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;用户得到授权，但是访问是被禁止的。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		404</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;发出的请求针对的是不存在的记录，服务器没有进行操作。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		406</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求失败。请求头部不一致，请重试&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		410</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求的资源被永久删除，且不会再得到的。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		422</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求失败。请验证参数&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 服务器错误状态码</span></span>
<span class="line"><span style="color:#D19A66;">		500</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;服务器发生错误，请检查服务器。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		502</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;网关错误&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		503</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;服务不可用，服务器暂时过载或维护。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		504</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;网关超时&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h4 id="_3-返回请求状态" tabindex="-1">3.返回请求状态 <a class="header-anchor" href="#_3-返回请求状态" aria-label="Permalink to &quot;3.返回请求状态&quot;">​</a></h4><p>控制器方法中返回错误状态码信息示例：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">success</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">res</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 抛出的错误会在cath内捕获</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;">{}</span><span style="color:#61AFEF;">cath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">){</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">400</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">helper</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">errorCode</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">400</span><span style="color:#ABB2BF;">]);}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h3 id="_17-用户密码加密工具方法" tabindex="-1">17.用户密码加密工具方法 <a class="header-anchor" href="#_17-用户密码加密工具方法" aria-label="Permalink to &quot;17.用户密码加密工具方法&quot;">​</a></h3><p>使用<code>crypto</code>库，写 md5 加密方法：app\\extend\\helper.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> crypto</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;crypto&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	errorCode</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 成功状态码</span></span>
<span class="line"><span style="color:#D19A66;">		200</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求成功。客户端向服务器请求数据，服务器返回相关数据&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		201</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;资源创建成功。客户端向服务器提供数据，服务器创建资源&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		202</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求被接收。但处理尚未完成&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		204</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;客户端告知服务器删除一个资源，服务器移除它&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		206</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求成功。但是只有部分回应&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 错误状态码</span></span>
<span class="line"><span style="color:#D19A66;">		400</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求无效。数据不正确，请重试&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		401</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求没有权限。缺少API token，无效或者超时&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		403</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;用户得到授权，但是访问是被禁止的。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		404</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;发出的请求针对的是不存在的记录，服务器没有进行操作。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		406</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求失败。请求头部不一致，请重试&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		410</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求的资源被永久删除，且不会再得到的。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		422</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求失败。请验证参数&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 服务器错误状态码</span></span>
<span class="line"><span style="color:#D19A66;">		500</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;服务器发生错误，请检查服务器。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		502</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;网关错误&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		503</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;服务不可用，服务器暂时过载或维护。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		504</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;网关超时&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// md5加密方法</span></span>
<span class="line"><span style="color:#61AFEF;">	_md5</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.指定加密方式</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> md5</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> crypto</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createHash</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;md5&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.指定需要加密的内容和加密之后输出的格式</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> md5</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 指定需要加密的内容</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">digest</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hex&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 指定加密之后输出的格式</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> hash</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 用户密码加密工具方法</span></span>
<span class="line"><span style="color:#61AFEF;">	generatePwd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		password</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> password</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_md5</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> hash</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>service 中调用方法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 调用用户密码加密方法</span></span>
<span class="line"><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">helper</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">generatePwd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h3 id="_18-防止重复注册" tabindex="-1">18.防止重复注册 <a class="header-anchor" href="#_18-防止重复注册" aria-label="Permalink to &quot;18.防止重复注册&quot;">​</a></h3><p>方式 1：数据库插入语句使用：UNIQUE</p><p>方式 2：插入数据前先查询是否已经有这个用户或者相同数据</p><p>抛出异常：throw new Error(&#39;当前用户已存在&#39;)</p><p>ctx 这边会捕获异常：ctx.error(400, e.message);</p><hr><h3 id="_19-实现登录" tabindex="-1">19.实现登录 <a class="header-anchor" href="#_19-实现登录" aria-label="Permalink to &quot;19.实现登录&quot;">​</a></h3><h4 id="_1-前端登录后-后端需要返回数据" tabindex="-1">1.前端登录后，后端需要返回数据 <a class="header-anchor" href="#_1-前端登录后-后端需要返回数据" aria-label="Permalink to &quot;1.前端登录后，后端需要返回数据&quot;">​</a></h4><h4 id="_2-实现登录保存状态-使用egg-redis库-egg-session-redis库-连接-redis-保存登录的-session" tabindex="-1">2.实现登录保存状态：使用<code>egg-redis</code>库+<code>egg-session-redis</code>库，连接 redis，保存登录的 session <a class="header-anchor" href="#_2-实现登录保存状态-使用egg-redis库-egg-session-redis库-连接-redis-保存登录的-session" aria-label="Permalink to &quot;2.实现登录保存状态：使用\`egg-redis\`库+\`egg-session-redis\`库，连接 redis，保存登录的 session&quot;">​</a></h4><p>egg-redis 的 npm 文档：<a href="https://www.npmjs.com/package/egg-redis" target="_blank" rel="noreferrer">egg-redis - npm (npmjs.com)</a></p><p>egg-session-redis 的 npm 文档：<a href="https://www.npmjs.com/package/egg-session-redis" target="_blank" rel="noreferrer">egg-session-redis - npm (npmjs.com)</a></p><h4 id="_3-配置插件" tabindex="-1">3.配置插件 <a class="header-anchor" href="#_3-配置插件" aria-label="Permalink to &quot;3.配置插件&quot;">​</a></h4><p><code>config\\plugin.js</code>中使用：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&#39;use strict&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/** </span><span style="color:#C678DD;font-style:italic;">@type</span><span style="color:#7F848E;font-style:italic;"> Egg.EggPlugin */</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    ajv </span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        enable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        package</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;egg-ajv&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    sequelize </span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        enable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        package</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;egg-sequelize&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    sessionRedis </span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        enable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        package</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;egg-session-redis&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    redis </span><span style="color:#ABB2BF;">: {</span></span>
<span class="line highlighted"><span style="color:#E06C75;">        enable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line highlighted"><span style="color:#E06C75;">        package</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;egg-redis&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="_4-数据库的连接配置-都是在config-config-default-js文件内" tabindex="-1">4.数据库的连接配置，都是在<code>config\\config.default.js</code>文件内 <a class="header-anchor" href="#_4-数据库的连接配置-都是在config-config-default-js文件内" aria-label="Permalink to &quot;4.数据库的连接配置，都是在\`config\\config.default.js\`文件内&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&#39;use strict&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#E5C07B;font-style:italic;"> {Egg.EggAppInfo}</span><span style="color:#E06C75;font-style:italic;"> appInfo</span><span style="color:#7F848E;font-style:italic;"> app info</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;font-style:italic;"> appInfo</span><span style="color:#C678DD;"> =&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * built-in config</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   * </span><span style="color:#C678DD;font-style:italic;">@type</span><span style="color:#E5C07B;font-style:italic;"> {Egg.EggAppConfig}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   **/</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> config</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // use for cookie sign key, should change to your own and keep security</span></span>
<span class="line"><span style="color:#E5C07B;">  config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keys</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> appInfo</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;_1592213709118_461&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // add your middleware config here</span></span>
<span class="line"><span style="color:#E5C07B;">  config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">middleware</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">  config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">ajv</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    keyword</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;schema&#39;</span><span style="color:#ABB2BF;">,  </span><span style="color:#7F848E;font-style:italic;">// to indicate the namespace and path of schemas, default as &#39;schema&#39;</span></span>
<span class="line"><span style="color:#E06C75;">    allErrors</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,    </span><span style="color:#7F848E;font-style:italic;">// required for custom error message</span></span>
<span class="line"><span style="color:#E06C75;">    jsonPointers</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,  </span><span style="color:#7F848E;font-style:italic;">// required for custom error message</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#E5C07B;">  config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sequelize</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      dialect</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;mysql&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3306</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      user</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;root&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      database</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;demo&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">  config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">redis</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#E06C75;">      client</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line highlighted"><span style="color:#E06C75;">          port</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">6379</span><span style="color:#ABB2BF;">,          </span><span style="color:#7F848E;font-style:italic;">// Redis port</span></span>
<span class="line highlighted"><span style="color:#E06C75;">          host</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;127.0.0.1&#39;</span><span style="color:#ABB2BF;">,   </span><span style="color:#7F848E;font-style:italic;">// Redis host</span></span>
<span class="line highlighted"><span style="color:#E06C75;">          password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line highlighted"><span style="color:#E06C75;">          db</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">      },</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // add your user config here</span></span>
<span class="line"><span style="color:#C678DD;">  const</span><span style="color:#E5C07B;"> userConfig</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // myAppName: &#39;egg&#39;,</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span><span style="color:#E06C75;">userConfig</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h4 id="_5-前端登录后传递过来参数-egg-session-redis库会注入上下文属性-ctx-session-user" tabindex="-1">5.前端登录后传递过来参数，<code>egg-session-redis</code>库会注入上下文属性：ctx.session.user <a class="header-anchor" href="#_5-前端登录后传递过来参数-egg-session-redis库会注入上下文属性-ctx-session-user" aria-label="Permalink to &quot;5.前端登录后传递过来参数，\`egg-session-redis\`库会注入上下文属性：ctx.session.user&quot;">​</a></h4><p>把 ctx.session.user 保存登录的用户</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">session</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">user</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> 前端登录后</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">后端查询到的登录的用户信息</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h3 id="_20-egg-项目测试-单元测试" tabindex="-1">20.Egg 项目测试：单元测试 <a class="header-anchor" href="#_20-egg-项目测试-单元测试" aria-label="Permalink to &quot;20.Egg 项目测试：单元测试&quot;">​</a></h3><h4 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h4><p>文档：<a href="https://www.eggjs.org/zh-CN/core/unittest" target="_blank" rel="noreferrer">单元测试 - Egg (eggjs.org)</a></p><h5 id="_1-什么是单元测试" tabindex="-1">1.什么是单元测试? <a class="header-anchor" href="#_1-什么是单元测试" aria-label="Permalink to &quot;1.什么是单元测试?&quot;">​</a></h5><p>单元测试是指对软件中的最小可测试单元进行检查和验证</p><h5 id="_2-什么是最小可测试单元" tabindex="-1">2.什么是最小可测试单元? <a class="header-anchor" href="#_2-什么是最小可测试单元" aria-label="Permalink to &quot;2.什么是最小可测试单元?&quot;">​</a></h5><p>一个函数, 一个类, 一个文件, 这些都可以称之为最小可测试单元</p><p>具体需要根据实际情况去判定其具体含义, 一般情况下我们以函数作为最小单元即可</p><h5 id="_3-单元测试有什么用" tabindex="-1">3.单元测试有什么用? <a class="header-anchor" href="#_3-单元测试有什么用" aria-label="Permalink to &quot;3.单元测试有什么用?&quot;">​</a></h5><ul><li><p>保证代码的正确性</p></li><li><p>保存程序的稳定性</p></li><li><p>增强自信心</p></li><li><p>公司领导要求(红绿灯)</p></li></ul><h5 id="_4-在-eggjs-中如何进行单元测试" tabindex="-1">4.在 EggJS 中如何进行单元测试 <a class="header-anchor" href="#_4-在-eggjs-中如何进行单元测试" aria-label="Permalink to &quot;4.在 EggJS 中如何进行单元测试&quot;">​</a></h5><h6 id="_4-1-eggjs-使用-mocha-测试框架和-power-assert-断言库来进行单元测试" tabindex="-1">4.1 EggJS 使用 Mocha 测试框架和 power-assert 断言库来进行单元测试 <a class="header-anchor" href="#_4-1-eggjs-使用-mocha-测试框架和-power-assert-断言库来进行单元测试" aria-label="Permalink to &quot;4.1 EggJS 使用 Mocha 测试框架和 power-assert 断言库来进行单元测试&quot;">​</a></h6><ul><li><p>Mocha：<a href="https://mochajs.org/" target="_blank" rel="noreferrer">https://mochajs.org/</a></p></li><li><p>作用 : 提供了编写测试代码的方法</p></li><li><p>power-assert: <a href="https://github.com/power-assert-js/power-assert" target="_blank" rel="noreferrer">https://github.com/power-assert-js/power-assert</a></p></li><li><p>作用 : 判断测试结果是否正确</p></li></ul><h6 id="_4-2-eggjs-还抽取了一个叫做-egg-mock-的辅助模块-配合-mocha-和-power-assert-进行测试" tabindex="-1">4.2 EggJS 还抽取了一个叫做 egg-mock 的辅助模块, 配合 Mocha 和 power-assert 进行测试 <a class="header-anchor" href="#_4-2-eggjs-还抽取了一个叫做-egg-mock-的辅助模块-配合-mocha-和-power-assert-进行测试" aria-label="Permalink to &quot;4.2 EggJS 还抽取了一个叫做 egg-mock 的辅助模块, 配合 Mocha 和 power-assert 进行测试&quot;">​</a></h6><ul><li><p>egg-mock:     <a href="https://www.npmjs.com/package/egg-mock" target="_blank" rel="noreferrer">https://www.npmjs.com/package/egg-mock</a></p></li><li><p>作用 : 帮助我们能够在单元测试中模拟 app, context, cookie, session, 网络请求等</p></li></ul><h6 id="_4-3-eggjs-规定了测试文件的存放路径和文件名称" tabindex="-1">4.3 EggJS 规定了测试文件的存放路径和文件名称 <a class="header-anchor" href="#_4-3-eggjs-规定了测试文件的存放路径和文件名称" aria-label="Permalink to &quot;4.3 EggJS 规定了测试文件的存放路径和文件名称&quot;">​</a></h6><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 测试文件的目录结构和文件名称 和 被测试文件的目录结构和名称必须一样</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 测试文件的文件名称增加.test后缀</span></span>
<span class="line"><span style="color:#56B6C2;">test</span></span>
<span class="line"><span style="color:#61AFEF;">    app</span></span>
<span class="line"><span style="color:#61AFEF;">    ├────</span></span>
<span class="line"><span style="color:#61AFEF;">       ├──</span><span style="color:#98C379;"> controller</span></span>
<span class="line"><span style="color:#61AFEF;">       │</span><span style="color:#98C379;">   └──</span><span style="color:#98C379;"> home.test.js</span></span>
<span class="line"><span style="color:#61AFEF;">       ├──</span><span style="color:#98C379;"> hello.test.js</span></span>
<span class="line"><span style="color:#61AFEF;">       └──</span><span style="color:#98C379;"> service</span></span>
<span class="line"><span style="color:#61AFEF;">           └──</span><span style="color:#98C379;"> user.test.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h6 id="_4-4-egg-项目运行测试文件" tabindex="-1">4.4 egg 项目运行测试文件 <a class="header-anchor" href="#_4-4-egg-项目运行测试文件" aria-label="Permalink to &quot;4.4 egg 项目运行测试文件&quot;">​</a></h6><p>EggJS 规定我们使用 egg-bin test 来运行我们编写的测试文件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">egg-bin</span><span style="color:#98C379;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h4 id="测试库模板和测试的生命周期" tabindex="-1">测试库模板和测试的生命周期 <a class="header-anchor" href="#测试库模板和测试的生命周期" aria-label="Permalink to &quot;测试库模板和测试的生命周期&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">app   :服务端实例对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">mock  :egg提供给我们的辅助模块对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">assert:断言库对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mock</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg-mock/bootstrap&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">在测试文件中一个describe函数就是一组相关的测试</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">也就是说我们需要把一组相关的测试写到一个describe函数中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">第一个参数: 这组测试的名称</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">第二个参数: 编写这组测试具体代码的地方</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* */</span></span>
<span class="line"><span style="color:#61AFEF;">describe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test/app/controller/user.test.js&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  在一个describe方法中的一个it就是一个测试用例</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  一个it可以用来测试一个方法(函数)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  第一个参数: 给当前的这个测试取的名称</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  第二个参数: 编写具体测试代码的函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  * */</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// it(&#39;should assert&#39;, () =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  Mocha测试库的生命周期钩子</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  单个测试用例的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  before -&gt; beforeEach -&gt; it -&gt; afterEach -&gt; after</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  多个测试用例</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  before -&gt; beforeEach -&gt; it -&gt; afterEach -&gt; beforeEach -&gt; it -&gt; afterEach -&gt; after</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  before -&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  beforeEach -&gt; it -&gt; afterEach</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  beforeEach -&gt; it -&gt; afterEach</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  beforeEach -&gt; it -&gt; afterEach</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  -&gt; after</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  生命周期钩子的作用:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  我们可以在测试用例执行之前去申请一些资源</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  我们可以在测试用例执行之后去释放申请的资源</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  例如: 我们需要测试数据库, 那么我们可以在测试之前往数据库中添加一些测试数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        然后在测试完成之后删除这些测试数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  * */</span></span>
<span class="line"><span style="color:#61AFEF;">	before</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;before&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	beforeEach</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;beforeEach&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;具体的测试用例&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;it&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;具体的测试用例&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;it&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;具体的测试用例&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;it&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	afterEach</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;afterEach&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	after</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;after&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><hr><h4 id="同步测试和异步测试" tabindex="-1">同步测试和异步测试 <a class="header-anchor" href="#同步测试和异步测试" aria-label="Permalink to &quot;同步测试和异步测试&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mock</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg-mock/bootstrap&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">describe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test/app/controller/user.test.js&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/*</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  Mocha: 同步测试和异步测试</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  * */</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;同步测试&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// console.log(&#39;it&#39;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 模拟了一个上下文</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mockContext</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			session</span><span style="color:#ABB2BF;">: { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lnj&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 希望上下文中有session, 并且保存了name, 并且name是lnj</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 以下代码的含义: 断定上下文中有session, session中有name,name取值是lnj</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">session</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;lnj&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;异步测试-promise&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">httpRequest</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/public/login.html&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">expect</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;异步测试-callback&quot;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">done</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">httpRequest</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/public/login.html&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">expect</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;异步测试-async+await&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">httpRequest</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/public/login.html&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">expect</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><hr><h4 id="测试控制器" tabindex="-1">测试控制器 <a class="header-anchor" href="#测试控制器" aria-label="Permalink to &quot;测试控制器&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mock</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg-mock/bootstrap&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">describe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test/app/controller/user.test.js&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试注册-成功&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mockCsrf</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;123@qq.com&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;abc123&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E06C75;"> app</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">httpRequest</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user/register&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试注册-用户名不符合预期&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mockCsrf</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;jonathan&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;abc123&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E06C75;"> app</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">httpRequest</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user/register&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 400</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试注册-密码不符合预期&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mockCsrf</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;234@qq.com&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;123&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> response</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E06C75;"> app</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">httpRequest</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/user/register&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 400</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 测试完成执行</span></span>
<span class="line"><span style="color:#61AFEF;">	after</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">model</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">truncate</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">force</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><hr><h4 id="测试-service" tabindex="-1">测试 Service <a class="header-anchor" href="#测试-service" aria-label="Permalink to &quot;测试 Service&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mock</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg-mock/bootstrap&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">describe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test/app/service/user.test.js&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试创建用户-成功&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 测试创建成功</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mockContext</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;123@qq.com&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;abc123&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> res</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">service</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">username</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;123@qq.com&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 测试用户名重复情况</span></span>
<span class="line"><span style="color:#C678DD;">		try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">			await</span><span style="color:#E5C07B;"> ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">service</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">			assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#61AFEF;">	after</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">model</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">destroy</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">truncate</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">force</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> });</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><hr><h4 id="测试-application" tabindex="-1">测试 Application <a class="header-anchor" href="#测试-application" aria-label="Permalink to &quot;测试 Application&quot;">​</a></h4><p>被测试文件：app/extend/application.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> cache</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> cache</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>测试文件：test\\app\\extend\\application.test.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mock</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg-mock/bootstrap&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">describe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test/app/extend/application.test.js&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试application&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;it666.com&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;name&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#98C379;"> &quot;it666.com&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><h4 id="测试-context" tabindex="-1">测试 Context <a class="header-anchor" href="#测试-context" aria-label="Permalink to &quot;测试 Context&quot;">​</a></h4><p>被测试文件：app\\extend\\context.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	success</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;成功&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this 就是 ctx 对象，在其中可以调用 ctx 上的其他方法，或访问属性</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			code</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			msg</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			data</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	error</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">code</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 500</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;错误&quot;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// this 就是 ctx 对象，在其中可以调用 ctx 上的其他方法，或访问属性</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">body</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			code</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">code</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">			msg</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>测试文件：test\\app\\extend\\context.test.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mock</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg-mock/bootstrap&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">describe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test/app/extend/context.test.js&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试context&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mockContext</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">code</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 500</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;错误&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><hr><h4 id="测试-request" tabindex="-1">测试 Request <a class="header-anchor" href="#测试-request" aria-label="Permalink to &quot;测试 Request&quot;">​</a></h4><p>被测试文件：app\\extend\\request.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	isChrome</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> userAgent</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;user-agent&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> userAgent</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">includes</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;chrome&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>被测试文件：test\\app\\extend\\request.test.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mock</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg-mock/bootstrap&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">describe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test/app/extend/request.test.js&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试request&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mockContext</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">			headers</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// &#39;user-agent&#39;:&#39;Chrome&#39;</span></span>
<span class="line"><span style="color:#98C379;">				&quot;user-agent&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Mozilla&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// assert(ctx.request.isChrome() === true);</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isChrome</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><hr><h4 id="测试-response" tabindex="-1">测试 Response <a class="header-anchor" href="#测试-response" aria-label="Permalink to &quot;测试 Response&quot;">​</a></h4><p>被测试文件：app\\extend\\response.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	isSuccess</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">status</span><span style="color:#56B6C2;"> ===</span><span style="color:#D19A66;"> 200</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>被测试文件：test\\app\\extend\\response.test.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mock</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg-mock/bootstrap&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">describe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test/app/extend/request.test.js&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试response&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mockContext</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isSuccess</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><h4 id="测试-helper" tabindex="-1">测试 Helper <a class="header-anchor" href="#测试-helper" aria-label="Permalink to &quot;测试 Helper&quot;">​</a></h4><p>被测试文件：app\\extend\\helper.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> crypto</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;crypto&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	errorCode</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 成功状态码</span></span>
<span class="line"><span style="color:#D19A66;">		200</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求成功。客户端向服务器请求数据，服务器返回相关数据&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		201</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;资源创建成功。客户端向服务器提供数据，服务器创建资源&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		202</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求被接收。但处理尚未完成&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		204</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;客户端告知服务器删除一个资源，服务器移除它&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		206</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求成功。但是只有部分回应&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 错误状态码</span></span>
<span class="line"><span style="color:#D19A66;">		400</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求无效。数据不正确，请重试&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		401</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求没有权限。缺少API token，无效或者超时&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		403</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;用户得到授权，但是访问是被禁止的。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		404</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;发出的请求针对的是不存在的记录，服务器没有进行操作。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		406</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求失败。请求头部不一致，请重试&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		410</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求的资源被永久删除，且不会再得到的。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		422</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;请求失败。请验证参数&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 服务器错误状态码</span></span>
<span class="line"><span style="color:#D19A66;">		500</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;服务器发生错误，请检查服务器。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		502</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;网关错误&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		503</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;服务不可用，服务器暂时过载或维护。&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">		504</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;网关超时&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	_md5</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 1.指定加密方式</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> md5</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> crypto</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createHash</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;md5&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 2.指定需要加密的内容和加密之后输出的格式</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> md5</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 指定需要加密的内容</span></span>
<span class="line"><span style="color:#ABB2BF;">			.</span><span style="color:#61AFEF;">digest</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hex&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 指定加密之后输出的格式</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> hash</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	generatePwd</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">		password</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> password</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">keys</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> hash</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">_md5</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">password</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#E06C75;"> hash</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>被测试文件：test\\app\\extend\\helper.test.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mock</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg-mock/bootstrap&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">describe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test/app/extend/helper.test.js&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试helper&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		let</span><span style="color:#E06C75;"> ctx</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mockContext</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">helper</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">generatePwd</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;123&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">!==</span><span style="color:#98C379;"> &quot;123&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><h4 id="测试-schedule" tabindex="-1">测试 schedule <a class="header-anchor" href="#测试-schedule" aria-label="Permalink to &quot;测试 schedule&quot;">​</a></h4><p>被测试文件，定时任务：app\\schedule\\updateMessage.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定时任务</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> Subscription</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#E06C75;">Subscription</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> UpdateCache</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Subscription</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 通过 schedule 属性来设置定时任务的执行间隔等配置</span></span>
<span class="line"><span style="color:#C678DD;">	static</span><span style="color:#C678DD;"> get</span><span style="color:#61AFEF;"> schedule</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">			interval</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;10s&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 间隔3秒执行一次</span></span>
<span class="line"><span style="color:#E06C75;">			type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;all&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">//  all表示当前服务器上所有相同的Node进程都执行</span></span>
<span class="line"><span style="color:#ABB2BF;">		};</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// subscribe 是真正定时任务执行时被运行的函数</span></span>
<span class="line"><span style="color:#C678DD;">	async</span><span style="color:#61AFEF;"> subscribe</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> \`lnj+</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// lnj+1 lnj+2</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> UpdateCache</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>被测试文件：test\\app\\schedule\\updateMessage.test.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;use strict&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mock</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">assert</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;egg-mock/bootstrap&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">describe</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;test/app/schedule/updateMessage.test.js&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	it</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;测试updateMessage&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">runSchedule</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;updateMessage&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;lnj+1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">runSchedule</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;updateMessage&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">		assert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">msg</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;lnj+2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	});</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><hr><h4 id="测试报告生成" tabindex="-1">测试报告生成 <a class="header-anchor" href="#测试报告生成" aria-label="Permalink to &quot;测试报告生成&quot;">​</a></h4><p>1.测试报告生成命令：package.json 的&quot;script&quot;内的命令：&quot;cov&quot;: &quot;egg-bin cov&quot;,</p><p>2.运行命令：<code>npm run cov</code></p><p>3.等待生成，会在项目生成<code>coverage</code>目录，把<code>coverage</code>目录下的<code>lcov-report</code>目录内的 index.html 打开</p><p>4.打开后就是看见各种测试报告</p><h2 id="egg-bag-framework" tabindex="-1">egg-bag-framework <a class="header-anchor" href="#egg-bag-framework" aria-label="Permalink to &quot;egg-bag-framework&quot;">​</a></h2><p><a href="https://juejin.cn/post/7321943946308976680" target="_blank" rel="noreferrer">都做前端开发了，接口自己还不会写嘛？💘 - 掘金 (juejin.cn)</a></p>`,248)]))}const A=n(t,[["render",r]]);export{F as __pageData,A as default};
