import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const d=JSON.parse('{"title":"Electron 开发踩坑","description":"","frontmatter":{},"headers":[],"relativePath":"Document/跨平台桌面端开发/Electron/Electron开发踩坑.md","filePath":"Document/跨平台桌面端开发/Electron/Electron开发踩坑.md","lastUpdated":1750954157000}'),e={name:"Document/跨平台桌面端开发/Electron/Electron开发踩坑.md"};function o(r,s,t,c,i,B){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="electron-开发踩坑" tabindex="-1">Electron 开发踩坑 <a class="header-anchor" href="#electron-开发踩坑" aria-label="Permalink to &quot;Electron 开发踩坑&quot;">​</a></h1><h2 id="浏览器安全策略-eval-阻止报错" tabindex="-1">浏览器安全策略 eval()阻止报错 <a class="header-anchor" href="#浏览器安全策略-eval-阻止报错" aria-label="Permalink to &quot;浏览器安全策略 eval()阻止报错&quot;">​</a></h2><p>把标签 onclick 事件，改成获取<code>id.addEventListener(&quot;click&quot;,()=&gt;{})</code>的方式监听事件</p><h2 id="process-is-not-defined-报错" tabindex="-1">process is not defined 报错 <a class="header-anchor" href="#process-is-not-defined-报错" aria-label="Permalink to &quot;process is not defined 报错&quot;">​</a></h2><p>1.main.js 文件 webPreferences:{}里面</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">webPreferences</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">  preload</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;preload.js&#39;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 加上以下两句：解决问题：process is not defined</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 才能使 require 和 process 等变量有效</span></span>
<span class="line"><span style="color:#E06C75;">  nodeIntegration</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 上面还是报错就再添加这行</span></span>
<span class="line"><span style="color:#E06C75;">  contextIsolation</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="lowdb-本地存储" tabindex="-1">lowdb 本地存储 <a class="header-anchor" href="#lowdb-本地存储" aria-label="Permalink to &quot;lowdb 本地存储&quot;">​</a></h2><h3 id="简述" tabindex="-1">简述 <a class="header-anchor" href="#简述" aria-label="Permalink to &quot;简述&quot;">​</a></h3><p><code>electron</code>应用在开发中，需要存储数据到本地，经历了两个版本，其方案都不太一样。</p><p>一开始考虑使用 cookie，在开发过程中没有任何问题，但是编译之后去使用，发现无法操作 cookie。原来在开发中直接 js 操作的的浏览器的 cookie，而在 electron 中需要交由底层的 nodejs 去操作本地的 cookie，<a href="https://www.electronjs.org/docs/api/cookies" target="_blank" rel="noreferrer">官方</a>说法是通过<code>Session</code>的<code>cookies</code>属性来访问<code>Cookies</code>的实例。但是我在实践过程中确实没有成功，然后随着需求变化，数据量变大，就直接放弃了这个方案。</p><p>当时用的<code>electron</code>版本是<code>9.0.0</code>，之后才用的方案是直接文件存储，即直接<code>fs</code>读与写，毫无问题。就是注意配置文件的存放位置。</p><p>现在再去使用<code>electron</code>，版本已经到了<code>11.0.0</code>。当我去使用<code>fs</code>读写时直接给我报错<code>fs.writeFile is not a function</code>，经过一天多的排错和查找，最终放弃该方案，当然我并没有找到原因和解决方案。最后决定使用<code>lowdb</code>去实现存储。</p><h3 id="官方文档" tabindex="-1">官方文档 <a class="header-anchor" href="#官方文档" aria-label="Permalink to &quot;官方文档&quot;">​</a></h3><h4 id="github-仓库" tabindex="-1">Github 仓库 <a class="header-anchor" href="#github-仓库" aria-label="Permalink to &quot;Github 仓库&quot;">​</a></h4><p><a href="https://github.com/typicode/lowdb" target="_blank" rel="noreferrer">https://github.com/typicode/lowdb</a></p><h4 id="官方介绍" tabindex="-1">官方介绍 <a class="header-anchor" href="#官方介绍" aria-label="Permalink to &quot;官方介绍&quot;">​</a></h4><p>Small JSON database for Node, Electron and the browser. Powered by Lodash. ⚡</p><h4 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h4><h5 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h5><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> lowdb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="增删改查实例" tabindex="-1">增删改查实例 <a class="header-anchor" href="#增删改查实例" aria-label="Permalink to &quot;增删改查实例&quot;">​</a></h5><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> low</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lowdb&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> FileSync</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lowdb/adapters/FileSync&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> adapter</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FileSync</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;db.json&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> db</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> low</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">adapter</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 默认初始化配置文件中</span></span>
<span class="line"><span style="color:#E5C07B;">db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defaults</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">posts</span><span style="color:#ABB2BF;">: [], </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;">: {}, </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> }).</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 增</span></span>
<span class="line"><span style="color:#E5C07B;">db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;posts&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lowdb is awesome&quot;</span><span style="color:#ABB2BF;"> }).</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 删</span></span>
<span class="line"><span style="color:#E5C07B;">db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;posts&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;low!&quot;</span><span style="color:#ABB2BF;"> }).</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 改</span></span>
<span class="line"><span style="color:#E5C07B;">db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;user.name&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;typicode&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 查</span></span>
<span class="line"><span style="color:#E5C07B;">db</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;posts[0].title&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">value</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="加密" tabindex="-1">加密 <a class="header-anchor" href="#加密" aria-label="Permalink to &quot;加密&quot;">​</a></h5><p>比较重要的是，<code>lowdb</code>本身支持对于配置文件的加密，但是需要自己去实现写加解密的函数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> adapter</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FileSync</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;db.json&quot;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#61AFEF;">	serialize</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#61AFEF;"> encrypt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stringify</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#61AFEF;">	deserialize</span><span style="color:#ABB2BF;">: (</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#E5C07B;"> JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">decrypt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)),</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如下加解密方式可以参考下：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> algorithm</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;aes-256-ctr&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> ENCRYPTION_KEY</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&lt;ENCRYPTION_KEY&gt;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#E5C07B;"> IV_LENGTH</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 16</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 加密</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> encrypt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">text</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> iv</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> crypto</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">randomBytes</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">IV_LENGTH</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> cipher</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> crypto</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createCipheriv</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">		algorithm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		Buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ENCRYPTION_KEY</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hex&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">		iv</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#E5C07B;">	cipher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAutoPadding</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> encrypted</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> cipher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">text</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">	encrypted</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">encrypted</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">cipher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">final</span><span style="color:#ABB2BF;">()]);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> iv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hex&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;:&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> encrypted</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hex&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解密</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> decrypt</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">text</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> textParts</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> text</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> iv</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">textParts</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shift</span><span style="color:#ABB2BF;">(), </span><span style="color:#98C379;">&quot;hex&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> encryptedText</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">textParts</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;:&quot;</span><span style="color:#ABB2BF;">), </span><span style="color:#98C379;">&quot;hex&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> decipher</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> crypto</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createDecipheriv</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">		algorithm</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">		Buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ENCRYPTION_KEY</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hex&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">		iv</span></span>
<span class="line"><span style="color:#ABB2BF;">	);</span></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> decrypted</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> decipher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">encryptedText</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">	decrypted</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Buffer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">concat</span><span style="color:#ABB2BF;">([</span><span style="color:#E06C75;">decrypted</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">decipher</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">final</span><span style="color:#ABB2BF;">()]);</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E5C07B;"> decrypted</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="mac-下窗口毛玻璃效果" tabindex="-1">mac 下窗口毛玻璃效果 <a class="header-anchor" href="#mac-下窗口毛玻璃效果" aria-label="Permalink to &quot;mac 下窗口毛玻璃效果&quot;">​</a></h2><h3 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h3><p>一直觉得毛玻璃样式很炫，而要在<code>electron</code>中实现，本来是需要自己去写样式的，我在开发之前也去了解了下，想看看有没有大佬已经实现了，不过确实发现了一个<a href="https://github.com/arkenthera/electron-vibrancy" target="_blank" rel="noreferrer">大佬的仓库</a>分享了毛玻璃组件，但是其 README 也提到了官方仓库对于<a href="https://github.com/electron/electron/pull/7898" target="_blank" rel="noreferrer">mac 的毛玻璃效果的 pr</a>，然后我去找了官方文档，已经有相关属性了，就很妙啊！</p><p>但是为什么标题要写“mac 下”下呢，因为这个属性只对 mac 有效。</p><h4 id="文档地址" tabindex="-1">文档地址 <a class="header-anchor" href="#文档地址" aria-label="Permalink to &quot;文档地址&quot;">​</a></h4><p><a href="https://www.electronjs.org/docs/api/browser-window" target="_blank" rel="noreferrer">https://www.electronjs.org/docs/api/browser-window</a></p><h3 id="相关属性" tabindex="-1">相关属性 <a class="header-anchor" href="#相关属性" aria-label="Permalink to &quot;相关属性&quot;">​</a></h3><ul><li><p><code>vibrancy</code> String (可选) - 窗口是否使用 vibrancy 动态效果, 仅 macOS 中有效. Can be <code>appearance-based</code>, <code>light</code>, <code>dark</code>, <code>titlebar</code>, <code>selection</code>, <code>menu</code>, <code>popover</code>, <code>sidebar</code>, <code>medium-light</code>, <code>ultra-dark</code>, <code>header</code>, <code>sheet</code>, <code>window</code>, <code>hud</code>, <code>fullscreen-ui</code>, <code>tooltip</code>, <code>content</code>, <code>under-window</code>, or <code>under-page</code>. Please note that using <code>frame: false</code> in combination with a vibrancy value requires that you use a non-default <code>titleBarStyle</code> as well. Also note that <code>appearance-based</code>, <code>light</code>, <code>dark</code>, <code>medium-light</code>, and <code>ultra-dark</code> have been deprecated and will be removed in an upcoming version of macOS.</p></li><li><p><code>visualEffectState</code>String (optional) - Specify how the material appearance should reflect window activity state on macOS. Must be used with the<code>vibrancy</code>property. 可能的值有</p><ul><li><code>followWindow</code> - 当窗口处于激活状态时，后台应自动显示为激活状态，当窗口处于非激活状态时，后台应自动显示为非激活状态。 This is the default.</li><li><code>active</code> - 后台应一直显示为激活状态。</li><li><code>inactive</code> - 后台应一直显示为非激活状态。</li></ul></li></ul><p>代码实现</p><p>有了官方 Buff 加持，使起来就很方便了。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// background.js</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> win</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BrowserWindow</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	width</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">800</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	height</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">600</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	vibrancy</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;dark&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// &#39;light&#39;, &#39;medium-light&#39; etc</span></span>
<span class="line"><span style="color:#E06C75;">	visualEffectState</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;active&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 这个参数不加的话，鼠标离开应用程序其背景就会变成白色</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>实现就是这么简单！</p><p>小伙伴儿们有兴趣的可以参考下我<a href="https://github.com/Kuari/QingKe" target="_blank" rel="noreferrer">这个项目</a>，使用的毛玻璃样式。</p><h2 id="tray-系统托盘" tabindex="-1">tray 系统托盘 <a class="header-anchor" href="#tray-系统托盘" aria-label="Permalink to &quot;tray 系统托盘&quot;">​</a></h2><h3 id="tray-系统托盘简述" tabindex="-1">tray 系统托盘简述 <a class="header-anchor" href="#tray-系统托盘简述" aria-label="Permalink to &quot;tray 系统托盘简述&quot;">​</a></h3><p>窗口最小化或者关闭的情况下，进程未退出，需要通过系统托盘来查看，当然还需要托盘菜单。这里就用最简单的菜单实现，加上点击事件触发。</p><h3 id="tray-系统托盘官方文档实现" tabindex="-1">tray 系统托盘官方文档实现 <a class="header-anchor" href="#tray-系统托盘官方文档实现" aria-label="Permalink to &quot;tray 系统托盘官方文档实现&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Menu</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Tray</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;electron&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> tray</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">whenReady</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	tray</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Tray</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/path/to/my/icon&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> contextMenu</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Menu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">buildFromTemplate</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Item1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;radio&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Item2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;radio&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Item3&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;radio&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">checked</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">		{ </span><span style="color:#E06C75;">label</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Item4&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;radio&quot;</span><span style="color:#ABB2BF;"> },</span></span>
<span class="line"><span style="color:#ABB2BF;">	]);</span></span>
<span class="line"><span style="color:#E5C07B;">	tray</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setToolTip</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;This is my application.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	tray</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContextMenu</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">contextMenu</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>代码实现</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> tray</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">whenReady</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> iconUrl</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">		process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;"> ===</span><span style="color:#98C379;"> &quot;development&quot;</span></span>
<span class="line"><span style="color:#C678DD;">			?</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;../build/favicon.ico&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			:</span><span style="color:#E5C07B;"> path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;favicon.ico&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">	tray</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Tray</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">nativeImage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createFromPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">iconUrl</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">	let</span><span style="color:#E06C75;"> trayMenuTemplate</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			label</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;显示/隐藏&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">			click</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">				return</span><span style="color:#E5C07B;"> win</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isVisible</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">?</span><span style="color:#E5C07B;"> win</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hide</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">:</span><span style="color:#E5C07B;"> win</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">		{</span></span>
<span class="line"><span style="color:#E06C75;">			label</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;退出&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">			click</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">quit</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			},</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	];</span></span>
<span class="line"><span style="color:#C678DD;">	const</span><span style="color:#E5C07B;"> contextMenu</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Menu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">buildFromTemplate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">trayMenuTemplate</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	tray</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setToolTip</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;kuari&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">	tray</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContextMenu</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">contextMenu</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h3><ul><li><a href="https://www.electronjs.org/docs/api/tray" target="_blank" rel="noreferrer">官方文档</a></li></ul><h2 id="禁止用户调整窗口大小" tabindex="-1">禁止用户调整窗口大小 <a class="header-anchor" href="#禁止用户调整窗口大小" aria-label="Permalink to &quot;禁止用户调整窗口大小&quot;">​</a></h2><h3 id="禁止用户调整窗口大小简述" tabindex="-1">禁止用户调整窗口大小简述 <a class="header-anchor" href="#禁止用户调整窗口大小简述" aria-label="Permalink to &quot;禁止用户调整窗口大小简述&quot;">​</a></h3><p>当想为程序设定一个固定的窗口大小时候，需要限制用户对程序窗口的大小进行拖动调整。但是使用官方的设定时候，在 mac 平台上可以禁用调整，当在 windows 平台上时候却依然可以。所以为了兼容两者，可以选择使用无边框来实现。</p><ul><li><code>resizable</code> Boolean (optional) - Whether window is resizable. 默认值为 <code>true</code>。</li></ul><h4 id="mac-系统" tabindex="-1">Mac 系统 <a class="header-anchor" href="#mac-系统" aria-label="Permalink to &quot;Mac 系统&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">win</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BrowserWindow</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	width</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">800</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	height</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">600</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	resizable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="windows" tabindex="-1">windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;windows&quot;">​</a></h4><ul><li>为了兼容，可选择都加上无边框</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">win</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BrowserWindow</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	width</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">800</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	height</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">600</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	frame</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	resizable</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>参考文档：<a href="https://www.electronjs.org/zh/docs/latest/api/browser-window" target="_blank" rel="noreferrer">BrowserWindow | Electron (electronjs.org)</a></p><h2 id="开发与编译后的文件路径问题" tabindex="-1">开发与编译后的文件路径问题 <a class="header-anchor" href="#开发与编译后的文件路径问题" aria-label="Permalink to &quot;开发与编译后的文件路径问题&quot;">​</a></h2><h2 id="去掉边框-无边框" tabindex="-1">去掉边框（无边框） <a class="header-anchor" href="#去掉边框-无边框" aria-label="Permalink to &quot;去掉边框（无边框）&quot;">​</a></h2><p>虽然并非出于直接实现无边框的需求，但是为了实现窗口的固定大小（设置固定值不可调整情况下，mac 是没问题的，但是 windows 一直可以调整大小）而设置了无边框。</p><p>background.js 窗口配置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">BrowserWindow</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;electron&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">win</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> BrowserWindow</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#E06C75;">	width</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">800</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	height</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">600</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	frame</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E5C07B;">win</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="无边框窗口拖动" tabindex="-1">无边框窗口拖动 <a class="header-anchor" href="#无边框窗口拖动" aria-label="Permalink to &quot;无边框窗口拖动&quot;">​</a></h2><h3 id="无边框窗口拖动简述" tabindex="-1">无边框窗口拖动简述 <a class="header-anchor" href="#无边框窗口拖动简述" aria-label="Permalink to &quot;无边框窗口拖动简述&quot;">​</a></h3><p>无边框的拖动本来很简单，只要对可以拖动的部分加上 <code>-webkit-app-region: drag;</code> 的样式即可。但是，当可拖动区域存在其他元素，如顶部菜单的搜索框，对 mac 是没有问题的，当在 windows 平台下拖动事件就会覆盖掉其他元素，因此需要对其他元素单独设置样式。</p><p>html 页面</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#D19A66;"> style</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;-webkit-app-region: drag&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#56B6C2;">	-webkit-app-region</span><span style="color:#ABB2BF;">: no-drag;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>CSS</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">.menu</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#56B6C2;">	-webkit-app-region</span><span style="color:#ABB2BF;">: drag;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">.menu-button</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#56B6C2;">	-webkit-app-region</span><span style="color:#ABB2BF;">: no-drag;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="自动全量更新" tabindex="-1">自动全量更新 <a class="header-anchor" href="#自动全量更新" aria-label="Permalink to &quot;自动全量更新&quot;">​</a></h2><p>最近完成一个 Redis GUI Client 开源项目——<a href="https://github.com/Kuari/RedFish" target="_blank" rel="noreferrer">RedFish</a>，经过了漫长的开发期，最后在准备上线<code>v 1.0.0</code>的时候，发现跨平台打包和自动化更新还挺麻烦的。当然打包这事儿吧，我再挖个坑......以及自动化更新也是个大坑，以及之前做了一个项目，期间经历了 N 多种更新方案（甲方那无处安放的需求...），包括 electron 的全量更新，electron-builder 的全量更新 ，也做了局部更新等等，再再挖个坑吧。</p><p>这次我先记录下最近用的这个<code>electron-builder</code>的<code>auto update</code>。由于是开源项目，项目中我用的是 github releases 发布版本的，所以当时选择方案时候尽可能原生支持 github。此文中也会介绍怎么使用自定义服务器进行更新。</p><h3 id="二-环境" tabindex="-1">二. 环境 <a class="header-anchor" href="#二-环境" aria-label="Permalink to &quot;二. 环境&quot;">​</a></h3><ul><li><strong>Node</strong>: 16.13.0</li><li><strong>electron</strong>: 13.0</li><li><strong>electron-builder</strong>: 23.0.3</li><li><strong>electron-updater</strong>: 5.0.1</li></ul><h3 id="三-官方示例" tabindex="-1">三. 官方示例 <a class="header-anchor" href="#三-官方示例" aria-label="Permalink to &quot;三. 官方示例&quot;">​</a></h3><p><strong>官网文档</strong>: <a href="https://www.electron.build/auto-update.html" target="_blank" rel="noreferrer">auto-update</a></p><p>主要代码如下：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">autoUpdater</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;electron-updater&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppUpdater</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">		const</span><span style="color:#E5C07B;"> log</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;electron-log&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">		log</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">transports</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">level</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;debug&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		autoUpdater</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">logger</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> log</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		autoUpdater</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkForUpdatesAndNotify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>哇喔，看上去整体就很简单！</p><h3 id="四-具体实现" tabindex="-1">四. 具体实现 <a class="header-anchor" href="#四-具体实现" aria-label="Permalink to &quot;四. 具体实现&quot;">​</a></h3><h4 id="_1-安装" tabindex="-1">1. 安装 <a class="header-anchor" href="#_1-安装" aria-label="Permalink to &quot;1. 安装&quot;">​</a></h4><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># npm</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> electron-updater</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># yarn</span></span>
<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> electron-updater</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_2-配置-publish" tabindex="-1">2. 配置 publish <a class="header-anchor" href="#_2-配置-publish" aria-label="Permalink to &quot;2. 配置 publish&quot;">​</a></h4><h5 id="github" tabindex="-1">github <a class="header-anchor" href="#github" aria-label="Permalink to &quot;github&quot;">​</a></h5><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;build&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;publish&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;provider&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;github&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;owner&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Kuari&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;repo&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;RedFish&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="自定义服务器" tabindex="-1">自定义服务器 <a class="header-anchor" href="#自定义服务器" aria-label="Permalink to &quot;自定义服务器&quot;">​</a></h5><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#98C379;">&quot;build&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;publish&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;provider&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;generic&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;url&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://your-domain.com/update&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_3-开启自动化更新" tabindex="-1">3. 开启自动化更新 <a class="header-anchor" href="#_3-开启自动化更新" aria-label="Permalink to &quot;3. 开启自动化更新&quot;">​</a></h4><p>可以看到官方代码中，引入了一个 electron 的日志的库。该库其实个人建议是非常必要的，其将自动更新的功能的检测、下载、更新等流程日志全部存储起来，方便你去进行排错。前段时间我就遇到一个事情，之前做的一个项目突然找到我，说版本升级有问题，虽然那个项目做的是做的增量更新，但是我有日志啊，直接从目标电脑拿到日志，告诉甲方是什么原因导致的，更新功能本身没有问题，应该如何避免这类问题等等。</p><p>如其名<code>checkForUpdatesAndNotify</code>所言，自动化更新时候会去检测版本，然后更新和通知。其更新方式是静默更新，打开客户端时去检测版本，需要更新时，会下载更新的包，然后在用户关闭客户端后进行更新和通知。</p><h5 id="不使用日志-开启自动化更新" tabindex="-1">不使用日志，开启自动化更新 <a class="header-anchor" href="#不使用日志-开启自动化更新" aria-label="Permalink to &quot;不使用日志，开启自动化更新&quot;">​</a></h5><p>配置<code>background.js</code>文件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">autoUpdater</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;electron-updater&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createWindow</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WEBPACK_DEV_SERVER_URL</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		createProtocol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Load the index.html when not in development</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> win</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loadURL</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;app://./index.html&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 加入此行，开启自动化更新</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> autoUpdater</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkForUpdatesAndNotify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h5 id="使用日志-开启自动化更新" tabindex="-1">使用日志，开启自动化更新 <a class="header-anchor" href="#使用日志-开启自动化更新" aria-label="Permalink to &quot;使用日志，开启自动化更新&quot;">​</a></h5><p>首先先安装日志所需要的库</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># npm</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> install</span><span style="color:#98C379;"> elecrton-log</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># yarn</span></span>
<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#98C379;"> add</span><span style="color:#98C379;"> electron-log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后配置<code>background.js</code>文件</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">autoUpdater</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;electron-updater&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> createWindow</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#C678DD;">	if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">WEBPACK_DEV_SERVER_URL</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">	} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">		createProtocol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// Load the index.html when not in development</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> win</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">loadURL</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;app://./index.html&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		// 加入此行，开启自动化更新</span></span>
<span class="line"><span style="color:#E5C07B;">		log</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">transports</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">level</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;debug&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">		autoUpdater</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">logger</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> log</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">		await</span><span style="color:#E5C07B;"> autoUpdater</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkForUpdatesAndNotify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>至于日志位置，就是<code>electron-log</code>本身使用的日志位置了，其路径如下：</p><ul><li><strong>on Linux:</strong> <code>~/.config/{app name}/logs/{process type}.log</code></li><li><strong>on macOS:</strong> <code>~/Library/Logs/{app name}/{process type}.log</code></li><li><strong>on Windows:</strong> <code>%USERPROFILE%\\AppData\\Roaming\\{app name}\\logs\\{process type}.log</code></li></ul><h4 id="_4-配置更新服务端" tabindex="-1">4. 配置更新服务端 <a class="header-anchor" href="#_4-配置更新服务端" aria-label="Permalink to &quot;4. 配置更新服务端&quot;">​</a></h4><p>那么一个很关键的问题在于，如何配置服务端让客户端知道它要更新呢？在配置了<code>publish</code>参数以后，electron 打包文件内会携带一个<code>latest.yml</code>文件，其名字会根据不同打包方式和平台等或有所不同，比如<code>latest-mac.yml</code>。</p><p>我们打开<code>latest.yml</code>，可以看到几个文件，其它参数我们目前暂且可以不用管，那是 autoUpdater 处理的。内包含的几个文件在打包后的文件夹内都能找到，我们只需要在服务端把<code>latest.yml</code>和其内涉及的几个文件全都放到服务端即可。放上去之后，当我们打开客户端，即可触发自动化检测。</p><p>但是如何触发版本更新呢？那也是简单的，就是修改<code>package.json</code>内的<code>version</code>参数，当服务端的<code>version</code>高于客户端时，便会触发自动化更新。在配置了<code>publish</code>参数后，除了<code>latest.yml</code>文件，客户端内也会有一个更新配置文件，内置打包时的版本号。</p><h4 id="_5-更新失败" tabindex="-1">5. 更新失败 <a class="header-anchor" href="#_5-更新失败" aria-label="Permalink to &quot;5. 更新失败&quot;">​</a></h4><p>更新可能不那么一帆风顺，所以如果遇到报错，我们可以打开上述的日志文件，看看到底是哪一步报错了，然后根据相关报错进行排错和调整。</p><h3 id="五-报错" tabindex="-1">五. 报错 <a class="header-anchor" href="#五-报错" aria-label="Permalink to &quot;五. 报错&quot;">​</a></h3><p><code>electron</code>升级到当前最新版（13.0.0），却在 mac 上打包时报错，报错内容如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">Exit</span><span style="color:#98C379;"> code:</span><span style="color:#98C379;"> ENOENT.</span><span style="color:#98C379;"> spawn</span><span style="color:#98C379;"> /usr/bin/python</span><span style="color:#98C379;"> ENOENT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该问题是由于 mac 系统升级后默认<code>python</code>命令是指向<code>python3</code>的，但是<code>vue-cli-plugin-electron-builder</code>是要求<code>python2</code>的，但是<code>electron-builder</code>是支持的，所以此处指定其使用<code>electron-builder v23.0.3</code>版本。</p><p>网上还有另一种解决方案就是将<code>python</code>重新指向<code>python2</code>，这种方案对于系统来说侵入性太强。我也考虑过起一个 python2 的 docker continer 然后临时指向，但是这样每次写代码还要设置下环境就很麻烦。</p><p>总体来说，还是觉得指定版本是最方便了。</p><p>解决方案就是在<code>package.json</code>中添加如下：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#E06C75;">	&quot;resolutions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">		&quot;vue-cli-plugin-electron-builder/electron-builder&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;^23.0.3&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="六-结语" tabindex="-1">六. 结语 <a class="header-anchor" href="#六-结语" aria-label="Permalink to &quot;六. 结语&quot;">​</a></h3><p>整体来说，使用 electron-builder 的 auto update 配置还是比较简单的。但是自动化更新离不开的一点就是打包，打包涉及的问题还是挺多的，比如 Mac 平台涉及 intel 和 M1 两个包，还有打包需要掏钱买开发者资格获取证书然后签名等，后期文章慢慢跟大家分享吧。</p><p>推荐两个参考项目，有需要可以看一看：</p><ul><li><a href="https://github.com/iffy/electron-updater-example" target="_blank" rel="noreferrer">electron-builder 官方 demo github 仓库</a></li><li>我自己的 Redis GUI Client 开源项目——<a href="https://github.com/Kuari/RedFish/releases/tag/v1.0.0" target="_blank" rel="noreferrer">RedFish 项目</a>，由于证书问题，目前已经完成了 Mac 平台的自动化更新，包含 Intel 和 M1</li></ul>`,121)]))}const u=n(e,[["render",o]]);export{d as __pageData,u as default};
