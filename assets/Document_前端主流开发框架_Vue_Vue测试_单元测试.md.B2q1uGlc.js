import{_ as t,c as a,o as r,ah as i}from"./chunks/framework.DqD713j2.js";const c=JSON.parse('{"title":"单元测试","description":"","frontmatter":{},"headers":[],"relativePath":"Document/前端主流开发框架/Vue/Vue测试/单元测试.md","filePath":"Document/前端主流开发框架/Vue/Vue测试/单元测试.md","lastUpdated":1750954157000}'),l={name:"Document/前端主流开发框架/Vue/Vue测试/单元测试.md"};function p(s,e,n,o,u,h){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h1><h2 id="单元测试的重要性" tabindex="-1">单元测试的重要性 <a class="header-anchor" href="#单元测试的重要性" aria-label="Permalink to &quot;单元测试的重要性&quot;">​</a></h2><ul><li>保证研发质量</li><li>提高项目的稳定性</li><li>提高开发速度</li></ul><h2 id="vue单元测试" tabindex="-1">Vue单元测试 <a class="header-anchor" href="#vue单元测试" aria-label="Permalink to &quot;Vue单元测试&quot;">​</a></h2><p>vue官网文档：<a href="https://cn.vuejs.org/guide/scaling-up/testing.html#unit-testing" target="_blank" rel="noreferrer">https://cn.vuejs.org/guide/scaling-up/testing.html#unit-testing</a></p><p>单元测试通常适用于独立的业务逻辑、组件、类、模块或函数，不涉及 UI 渲染、网络请求或其他环境问题</p><p>这些通常是与 Vue 无关的纯 JavaScript/TypeScript 模块。</p><p>一般来说，在 Vue 应用中为业务逻辑编写单元测试与使用其他框架的应用没有明显区别。</p><p>但有两种情况，你必须对 Vue 的特定功能进行单元测试：</p><p>1.组合式函数</p><p>2.组件</p><h2 id="单元测试方案" tabindex="-1">单元测试方案 <a class="header-anchor" href="#单元测试方案" aria-label="Permalink to &quot;单元测试方案&quot;">​</a></h2><h3 id="推荐方案" tabindex="-1">推荐方案 <a class="header-anchor" href="#推荐方案" aria-label="Permalink to &quot;推荐方案&quot;">​</a></h3><p>Vitest：<a href="https://vitest.dev/" target="_blank" rel="noreferrer">https://vitest.dev/</a></p><p>因为由 create-vue 创建的官方项目配置是基于 Vite 的，所以我们推荐你使用一个可以利用同一套 Vite 配置和转换管道的单元测试框架。Vitest 正是一个针对此目标设计的单元测试框架，它由 Vue / Vite 团队成员开发和维护。在 Vite 的项目集成它会非常简单，而且速度非常快。</p><h3 id="其他选择" tabindex="-1">其他选择 <a class="header-anchor" href="#其他选择" aria-label="Permalink to &quot;其他选择&quot;">​</a></h3><p>Peeky：<a href="https://peeky.dev/" target="_blank" rel="noreferrer">https://peeky.dev/</a></p><p>是另一速度极快的单元测试运行器，对 Vite 集成提供第一优先级支持。它也是由 Vue 核心团队成员创建的，并提供了一个基于图形用户界面（GUI）的测试界面。</p><p>Jest：<a href="https://jestjs.io/" target="_blank" rel="noreferrer">https://jestjs.io/</a></p><p>是一个广受欢迎的单元测试框架，并可通过 vite-jest 这个包在 Vite 中使用。不过，我们只推荐你在已有一套 Jest 测试配置、且需要迁移到基于 Vite 的项目时使用它，因为 Vitest 提供了更无缝的集成和更好的性能。</p><ul><li>mocha</li><li>@vue/test-utils</li><li>sinon</li></ul><h2 id="单元测试步骤" tabindex="-1">单元测试步骤 <a class="header-anchor" href="#单元测试步骤" aria-label="Permalink to &quot;单元测试步骤&quot;">​</a></h2><p>1.安装好相关单元测试库后，在vue项目中新建目录：tests/unit</p><p>2.创建以.spec.js结尾的测试文件：文件命名可以根据相关 业务逻辑、组件、类、模块或函数 等名字的 相同命名</p><p>3.开始写单元测试测试套件代码</p><p>import 导入需要单元测试的相关函数或组件...</p><p>导入测试库的函数</p><p>查看相关文档开始编写测试用例</p>',28)]))}const _=t(l,[["render",p]]);export{c as __pageData,_ as default};
