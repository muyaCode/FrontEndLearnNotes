import{_ as n,c as a,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const o="/FrontEndLearnNotes/assets/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E5%AE%9E%E4%BE%8B-%E5%8E%9F%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.D5ke9wpP.png",e="/FrontEndLearnNotes/assets/%E5%85%B3%E7%B3%BB.Ce91EWPr.png",t="/FrontEndLearnNotes/assets/%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE.B6zP7kj_.png",r="/FrontEndLearnNotes/assets/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%8C%87%E5%90%91%E6%94%B9%E5%8F%98.CZhcgai2.png",c="/FrontEndLearnNotes/assets/%E5%8E%9F%E5%9E%8B%E6%9C%80%E7%BB%88%E7%9A%84%E6%8C%87%E5%90%91.BVUjTbE7.png",B="/FrontEndLearnNotes/assets/%E5%8E%9F%E5%9E%8B%E6%8C%87%E5%90%91%E5%90%8E%E7%9A%84%E5%9B%BE%E8%A7%A3.6pnjGfJy.png",y="/FrontEndLearnNotes/assets/%E9%80%86%E6%8E%A8%E7%BB%A7%E6%89%BF%E7%9C%8B%E5%8E%9F%E5%9E%8B.C23ev5ba.png",d=JSON.parse('{"title":"JavaScript 面向对象编程","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/JavaScript高级/JavaScript面向对象编程.md","filePath":"Document/JavaScript笔记/JavaScript高级/JavaScript面向对象编程.md","lastUpdated":1750954157000}'),i={name:"Document/JavaScript笔记/JavaScript高级/JavaScript面向对象编程.md"};function F(b,s,A,u,C,E){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="javascript-面向对象编程" tabindex="-1">JavaScript 面向对象编程 <a class="header-anchor" href="#javascript-面向对象编程" aria-label="Permalink to &quot;JavaScript 面向对象编程&quot;">​</a></h1><h2 id="一、面向对象介绍" tabindex="-1">一、面向对象介绍 <a class="header-anchor" href="#一、面向对象介绍" aria-label="Permalink to &quot;一、面向对象介绍&quot;">​</a></h2><h3 id="什么是对象" tabindex="-1">什么是对象 <a class="header-anchor" href="#什么是对象" aria-label="Permalink to &quot;什么是对象&quot;">​</a></h3><blockquote><p>Everything is object （万物皆对象）</p></blockquote><p>对象到底是什么，我们可以从两次层次来理解。</p><p><strong>(1) 对象是单个事物的抽象。</strong></p><p>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p><p><strong>(2) 对象是一个容器，封装了属性（property）和方法（method）。</strong></p><p>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为 animal 对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p><p>在实际开发中，对象是一个抽象的概念，可以将其简单理解为：<strong>数据集或功能集</strong>。</p><p>ECMAScript-262 把对象定义为：<strong>无序属性的集合，其属性可以包含基本值、对象或者函数</strong>。 严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都 映射到一个值。</p><p>提示：每个对象都是基于一个引用类型创建的，这些类型可以是系统内置的原生类型，也可以是开发人员自定义的类型。</p><h3 id="什么是面向对象" tabindex="-1">什么是面向对象 <a class="header-anchor" href="#什么是面向对象" aria-label="Permalink to &quot;什么是面向对象&quot;">​</a></h3><blockquote><p>面向对象不是新的东西，它只是过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p></blockquote><p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。 它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p><p>在面向对象程序开发思想中，每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。 因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p><p>面向对象与面向过程：</p><ul><li>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</li><li>面向对象就是找一个对象，指挥得结果</li><li>面向对象将执行者转变成指挥者</li><li>面向对象不是面向过程的替代，而是面向过程的封装</li></ul><p>面向对象的特性：</p><ul><li>封装性</li><li>继承性</li><li>[多态性]</li></ul><p>扩展阅读：</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noreferrer">维基百科 - 面向对象程序设计</a></li><li><a href="https://www.zhihu.com/question/19854505" target="_blank" rel="noreferrer">知乎：如何用一句话说明什么是面向对象思想？</a></li><li><a href="https://www.zhihu.com/question/31021366" target="_blank" rel="noreferrer">知乎：什么是面向对象编程思想？</a></li></ul><hr><h3 id="程序中面向对象的基本体现" tabindex="-1">程序中面向对象的基本体现 <a class="header-anchor" href="#程序中面向对象的基本体现" aria-label="Permalink to &quot;程序中面向对象的基本体现&quot;">​</a></h3><p>在 JavaScript 中，所有数据类型都可以视为对象，当然也可以自定义对象。 自定义的对象数据类型就是面向对象中的类（ Class ）的概念。</p><p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p><p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个对象表示：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> std1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Michael&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">98</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> std2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Bob&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">81</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> printScore</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">student</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;姓名：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;  &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;成绩：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程， 而是 <code>Student</code> 这种数据类型应该被视为一个对象，这个对象拥有 <code>name</code> 和 <code>score</code> 这两个属性（Property）。 如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 <code>printScore</code> 消息，让对象自己把自己的数据打印出来。</p><p>抽象数据行为模板（Class）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">score</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> score</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printScore</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;姓名：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;  &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;成绩：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>根据模板创建具体实例对象（Instance）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> std1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Michael&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">98</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> std2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Bob&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">81</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>实例对象具有自己的具体行为（给对象发消息）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">std1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printScore</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// =&gt; 姓名：Michael  成绩：98</span></span>
<span class="line"><span style="color:#E5C07B;">std2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printScore</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// =&gt; 姓名：Bob  成绩 81</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。 Class 是一种抽象概念，比如我们定义的 Class——Student ，是指学生这个概念， 而实例（Instance）则是一个个具体的 Student ，比如， Michael 和 Bob 是两个具体的 Student 。</p><p>所以，面向对象的设计思想是：</p><ul><li>抽象出 Class</li><li>根据 Class 创建 Instance</li><li>指挥 Instance 得结果</li></ul><p>面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。</p><h2 id="二、创建对象的三种方式" tabindex="-1">二、创建对象的三种方式 <a class="header-anchor" href="#二、创建对象的三种方式" aria-label="Permalink to &quot;二、创建对象的三种方式&quot;">​</a></h2><h3 id="_1-简单方式-构造函数创建" tabindex="-1">1.简单方式：构造函数创建 <a class="header-anchor" href="#_1-简单方式-构造函数创建" aria-label="Permalink to &quot;1.简单方式：构造函数创建&quot;">​</a></h3><p>我们可以直接通过 <code>new Object()</code> 创建：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;Jack&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 18</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-简单方式-使用对象字面量来创建" tabindex="-1">2.简单方式：使用对象字面量来创建 <a class="header-anchor" href="#_2-简单方式-使用对象字面量来创建" aria-label="Permalink to &quot;2.简单方式：使用对象字面量来创建&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Jack&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	sayName</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>生成两个 <code>person</code> 实例对象</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> person1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Jack&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	sayName</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> person2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Mike&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">	age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	sayName</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>通过上面的代码我们不难看出，这样写的代码太过冗余，重复性太高。</p><h3 id="_3-简单方式的改进-工厂函数-自定义构造函数-三种写法" tabindex="-1">3.简单方式的改进：工厂函数（自定义构造函数），三种写法 <a class="header-anchor" href="#_3-简单方式的改进-工厂函数-自定义构造函数-三种写法" aria-label="Permalink to &quot;3.简单方式的改进：工厂函数（自定义构造函数），三种写法&quot;">​</a></h3><h4 id="_1-我们可以写一个函数-解决代码重复问题" tabindex="-1">1.我们可以写一个函数，解决代码重复问题 <a class="header-anchor" href="#_1-我们可以写一个函数-解决代码重复问题" aria-label="Permalink to &quot;1.我们可以写一个函数，解决代码重复问题&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createPerson</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">		name</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">		age</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">		sayName</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		},</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>然后生成实例对象：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createPerson</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Jack&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createPerson</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Mike&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-封装系统钩子函数new-object" tabindex="-1">2.封装系统钩子函数<code>new Object()</code> <a class="header-anchor" href="#_2-封装系统钩子函数new-object" aria-label="Permalink to &quot;2.封装系统钩子函数\`new Object()\`&quot;">​</a></h4><p>工厂模式:</p><ul><li>函数名是小写</li><li>有 new,</li><li>有返回值</li><li>new 之后的对象是当前的对象</li><li>直接调用函数就可以创建对象</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> createObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">	var</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Object</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">	obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;您好&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#C678DD;">	return</span><span style="color:#E06C75;"> obj</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>调用工厂函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> per</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> createObject</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3-封装字面量的自定义构造函数" tabindex="-1">3.封装字面量的自定义构造函数 <a class="header-anchor" href="#_3-封装字面量的自定义构造函数" aria-label="Permalink to &quot;3.封装字面量的自定义构造函数&quot;">​</a></h4><p>自定义构造函数:</p><ul><li>函数名是大写(首字母)</li><li>没有 new</li><li>没有返回值</li><li>this 是当前的对象</li><li>通过 new 的方式来创建对象</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;您好&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>实例化构造函数：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> per1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小红&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p>这样封装确实爽多了，通过工厂模式我们解决了创建多个相似对象代码冗余的问题，但却<strong>没有解决对象识别的问题（即怎样知道一个对象的类型）</strong>。</p><h2 id="三、自定义构造函数" tabindex="-1">三、自定义构造函数 <a class="header-anchor" href="#三、自定义构造函数" aria-label="Permalink to &quot;三、自定义构造函数&quot;">​</a></h2><p>内容引导：</p><ul><li>构造函数语法</li><li>分析构造函数</li><li>构造函数和实例对象的关系 <ul><li>实例的 constructor 属性</li><li>instanceof 操作符</li></ul></li><li>普通函数调用和构造函数调用的区别</li><li>构造函数的返回值</li><li>构造函数的静态成员和实例成员 <ul><li>函数也是对象</li><li>实例成员</li><li>静态成员</li></ul></li><li>构造函数的问题</li></ul><h3 id="更优雅的工厂函数-构造函数" tabindex="-1">更优雅的工厂函数：构造函数 <a class="header-anchor" href="#更优雅的工厂函数-构造函数" aria-label="Permalink to &quot;更优雅的工厂函数：构造函数&quot;">​</a></h3><p>一种更优雅的工厂函数就是下面这样，构造函数：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Jack&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// =&gt; Jack</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Mike&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">p2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// =&gt; Mike</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="解析构造函数代码的执行" tabindex="-1">解析构造函数代码的执行 <a class="header-anchor" href="#解析构造函数代码的执行" aria-label="Permalink to &quot;解析构造函数代码的执行&quot;">​</a></h3><p>在上面的示例中，<code>Person()</code> 函数取代了 <code>createPerson()</code> 函数，但是实现效果是一样的。 这是为什么呢？</p><p>我们注意到，<code>Person()</code> 中的代码与 <code>createPerson()</code> 有以下几点不同之处：</p><ul><li>没有显示的创建对象</li><li>直接将属性和方法赋给了 <code>this</code> 对象</li><li>没有 <code>return</code> 语句</li><li>函数名使用的是大写的 <code>Person</code></li></ul><p>而要创建 <code>Person</code> 实例，则必须使用 <code>new</code> 操作符。 以这种方式调用构造函数会经历以下 4 个步骤：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li><li>执行构造函数中的代码</li><li>返回新对象</li></ol><p>下面是具体的伪代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 当使用 new 操作符调用 Person() 的时候，实际上这里会先创建一个对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// var instance = {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 然后让内部的 this 指向 instance 对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// this = instance</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 接下来所有针对 this 的操作实际上操作的就是 instance</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// 在函数的结尾处会将 this 返回，也就是 instance</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	// return this</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="构造函数和实例对象的关系" tabindex="-1">构造函数和实例对象的关系 <a class="header-anchor" href="#构造函数和实例对象的关系" aria-label="Permalink to &quot;构造函数和实例对象的关系&quot;">​</a></h3><p>使用构造函数的好处不仅仅在于代码的简洁性，更重要的是我们可以识别对象的具体类型了。 在每一个实例对象中的<strong>proto</strong>中同时有一个 <code>constructor</code> 属性，该属性指向创建该实例的构造函数：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> Person</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> ===</span><span style="color:#E06C75;"> Person</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> p2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对象的 <code>constructor</code> 属性最初是用来标识对象类型的， 但是，如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p1</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p2</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="完整演示" tabindex="-1">完整演示 <a class="header-anchor" href="#完整演示" aria-label="Permalink to &quot;完整演示&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 自定义构造函数-----&gt;实例化对象</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;吃大蒜拌臭豆腐加榴莲酱&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 构造函数----&gt;创建对象</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> per</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小苏&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">38</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;女&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// per.eat();//吃</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实例对象是通过构造函数来创建</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实例对象会指向自己的构造函数(暂时理解,是错误的)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 把这个对象的结构显示出来</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">per</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Person</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实例对象的构造器(构造函数)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实例对象的构造器是指向Person的,结果是true,所以,这个实例对象per就是通过Person来创建的</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> Person</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> Person</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 构造函数</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Animal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 实例对象</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> dog</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Animal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;大黄&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dog</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 实例对象</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Animal</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 构造函数的名字</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> Person</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> Animal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 判断这个对象是不是这种数据类型</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> Animal</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">dog</span><span style="color:#C678DD;"> instanceof</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h4 id="实例对象跟构造函数的关系总结" tabindex="-1">实例对象跟构造函数的关系总结 <a class="header-anchor" href="#实例对象跟构造函数的关系总结" aria-label="Permalink to &quot;实例对象跟构造函数的关系总结&quot;">​</a></h4><ul><li>1.构造函数是根据具体的事物抽象出来的抽象模板</li><li>2.实例对象是根据抽象的构造函数模板得到的具体实例对象 <ul><li>实例对象是通过构造函数来创建的---创建的过程叫实例化</li></ul></li><li>3.每一个实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数 <ul><li>注意： <code>constructor</code> 是实例的属性的说法不严谨，具体后面的原型会讲到</li></ul></li><li>4.可以通过实例的 <code>constructor</code> 属性判断实例和构造函数之间的关系 <ul><li>注意：这种方式不严谨，推荐使用 <code>instanceof</code> 操作符（判断对象是不是这个数据类型），后面学原型会解释为什么</li></ul></li></ul><h3 id="构造函数的问题-缺点" tabindex="-1">构造函数的问题（缺点） <a class="header-anchor" href="#构造函数的问题-缺点" aria-label="Permalink to &quot;构造函数的问题（缺点）&quot;">​</a></h3><p>1.使用构造函数带来的最大的好处就是创建对象更方便了，但是其本身也存在一个<strong>浪费内存</strong>的问题：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;human&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lpz&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Jack&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在该示例中，从表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。</p><blockquote><p>那就是对于每一个实例对象，<code>type</code> 和 <code>sayHello</code> 都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p></blockquote><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayHello</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> p2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayHello</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对于这种问题我们可以<strong>把需要共享的函数定义到构造函数外部</strong>：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> sayHello</span><span style="color:#ABB2BF;"> = </span><span style="color:#61AFEF;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello &#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;human&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayHello</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sayHello</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;lpz&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Jack&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayHello</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> p2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayHello</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这样确实可以了。</p><p>2.但是如果有多个需要共享的函数的话就会<strong>造成全局命名空间冲突</strong>的问题。</p><p>你肯定想到了可以把多个函数放到一个对象中用来避免全局命名空间冲突的问题：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> fns</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">	sayHello</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#61AFEF;">	sayAge</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;human&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayHello</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fns</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayHello</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayAge</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> fns</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayAge</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;lpz&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Jack&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayHello</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> p2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayHello</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayAge</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> p2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sayAge</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>至此，我们利用自己的方式基本上解决了构造函数的内存浪费问题。</p><p>但是代码看起来还是那么的格格不入，那有没有更好的方式呢？就是使用<strong>原型</strong></p><h2 id="四、原型" tabindex="-1">四、原型 <a class="header-anchor" href="#四、原型" aria-label="Permalink to &quot;四、原型&quot;">​</a></h2><h3 id="上面-内存浪费-更好的解决方案-构造函数的-prototype属性" tabindex="-1">上面 内存浪费 更好的解决方案：构造函数的 <code>prototype</code>属性 <a class="header-anchor" href="#上面-内存浪费-更好的解决方案-构造函数的-prototype属性" aria-label="Permalink to &quot;上面 内存浪费 更好的解决方案：构造函数的 \`prototype\`属性&quot;">​</a></h3><blockquote><p>通过原型来添加方法，实现数据共享，节省内存空间</p></blockquote><p>Javascript 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。 这个对象的所有属性和方法，都会被构造函数的实例继承。</p><p>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过原型来添加方法，解决数据共享，节省内存空间</span></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;吃凉菜&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小红&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">p1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">eat</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> p2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">eat</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p2</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这时所有实例的 <code>type</code> 属性和 <code>sayName()</code> 方法， 其实都是同一个内存地址</p><h3 id="构造函数、实例、原型三者之间的关系" tabindex="-1">构造函数、实例、原型三者之间的关系 <a class="header-anchor" href="#构造函数、实例、原型三者之间的关系" aria-label="Permalink to &quot;构造函数、实例、原型三者之间的关系&quot;">​</a></h3><p>构造函数 Person 有属性：<code>Person.prototype</code></p><p>构造函数 Person 实例化 new Person() 得到 Person 实例对象</p><p>Person 实例对象<code>per</code> (Object)有 <code>__proto__</code>属性：<code>per.__proto__</code></p><p><code>__proto__</code>是 Object 上的一个属性</p><p>对象的 <code>__proto__</code> 保存着该对象的构造函数的 <code>prototype</code> 属性</p><p><img src="`+o+`" alt="构造函数-实例-原型之间的关系"></p><p>任何函数都具有一个 <code>prototype</code> 属性，叫原型，该属性是一个对象。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> F</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hi!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> F</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code>。</p><p>实例对象的<code>__proto__</code>和构造函数中的<code>prototype</code>是相等的---&gt;true</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> instance</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> F</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> F</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>__proto__</code> 也可以叫原型对象，也是一个对象，这个属性是给浏览器使用，不是标准的属性。</p><p>实例对象可以直接访问原型对象成员。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// =&gt; hi!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ul><li><p>对象实例化输出后，在浏览器会生成属性，<code>__proto__</code>，也是对象，原型</p></li><li><p>在代码中构造函数中有一个属性，<code>prototype</code>，也是对象，原型</p></li><li><p>上面两个对象是相等的：上面的代码结合</p><ul><li><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> F</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hi!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> instance</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> F</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> F</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// =&gt; true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">instance</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// =&gt; hi!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul></li></ul><blockquote><p>程序员写代码要使用：构造函数的实例的<code>prototype</code>原型对象属性 --&gt; 原型对象<code>prototype</code>指向原型对象构造器<code>constructor</code> --&gt; <code>constructor</code> 原型对象构造器再指向实例的构造函数（指向的都是相等==为 true）</p></blockquote><h3 id="原型关系总结" tabindex="-1">原型关系总结 <a class="header-anchor" href="#原型关系总结" aria-label="Permalink to &quot;原型关系总结&quot;">​</a></h3><ul><li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li><li>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</li><li>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 <code>__proto__</code></li><li>所有实例都直接或间接继承了原型对象的成员 <ul><li><strong>实例对象</strong>中有个属性，<code>__proto__</code>，也是对象，原型</li><li><strong>构造函数</strong>中有一个属性，<code>prototype</code>，也是对象，原型</li></ul></li><li>通过原型来添加方法，解决数据共享，节省内存空间</li></ul><hr><h3 id="属性成员的搜索原则-原型链" tabindex="-1">属性成员的搜索原则：原型链 <a class="header-anchor" href="#属性成员的搜索原则-原型链" aria-label="Permalink to &quot;属性成员的搜索原则：原型链&quot;">​</a></h3><p><img src="`+e+`" alt="关系.png"></p><p>了解了 <strong>构造函数-实例-原型对象</strong> 三者之间的关系后，接下来我们来解释一下为什么实例对象可以访问原型对象中的成员。</p><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ul><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ul><p>也就是说，在我们调用 <code>person1.sayName()</code> 的时候，会先后执行两次搜索：</p><ul><li>首先，解析器会问：“实例 person1 有 sayName 属性吗？”答：“没有。</li><li>”然后，它继续搜索，再问：“ person1 的原型有 sayName 属性吗？”答：“有。</li><li>”于是，它就读取那个保存在原型对象中的函数。</li><li>当我们调用 person2.sayName() 时，将会重现相同的搜索过程，得到相同的结果。</li></ul><p>而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p><p>总结：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul><h3 id="实例对象读写原型对象成员" tabindex="-1">实例对象读写原型对象成员 <a class="header-anchor" href="#实例对象读写原型对象成员" aria-label="Permalink to &quot;实例对象读写原型对象成员&quot;">​</a></h3><p>读取：</p><ul><li>先在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链的末端还没有找到，则返回 <code>undefined</code></li></ul><p>值类型成员写入（<code>实例对象.值类型成员 = xx</code>）：</p><ul><li>当实例期望重写原型对象中的某个普通数据成员时实际上会把该成员添加到自己身上</li><li>也就是说该行为实际上会屏蔽掉对原型对象成员的访问</li></ul><p>引用类型成员写入（<code>实例对象.引用类型成员 = xx</code>）：</p><ul><li>同上</li></ul><p>复杂类型修改（<code>实例对象.成员.xx = xx</code>）：</p><ul><li>同样会先在自己身上找该成员，如果自己身上找到则直接修改</li><li>如果自己身上找不到，则沿着原型链继续查找，如果找到则修改</li><li>如果一直到原型链的末端还没有找到该成员，则报错（<code>实例对象.undefined.xx = xx</code>）</li></ul><h3 id="更简单的原型语法" tabindex="-1">更简单的原型语法 <a class="header-anchor" href="#更简单的原型语法" aria-label="Permalink to &quot;更简单的原型语法&quot;">​</a></h3><p>我们注意到，前面例子中每添加一个属性和方法就要敲一遍 <code>Person.prototype</code> 。 为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">	type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;human&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">	sayHello</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;我叫&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;，我今年&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;岁了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在该示例中，我们将 <code>Person.prototype</code> 重置到了一个新的对象。 这样做的好处就是为 <code>Person.prototype</code> 添加成员简单了，但是也会带来一个问题，那就是原型对象丢失了 <code>constructor</code> 成员。</p><h4 id="所以-我们为了保持-constructor-的指向正确-建议的写法是" tabindex="-1">所以，我们为了保持 <code>constructor</code> 的指向正确，建议的写法是 <a class="header-anchor" href="#所以-我们为了保持-constructor-的指向正确-建议的写法是" aria-label="Permalink to &quot;所以，我们为了保持 \`constructor\` 的指向正确，建议的写法是&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sex</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line highlighted"><span style="color:#E06C75;">  constructor</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">Person</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// =&gt; 需要手动将 constructor 指向正确的构造函数</span></span>
<span class="line"><span style="color:#E06C75;">  type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;human&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">  sayHello</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我叫&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;，我今年&#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &#39;岁了&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> person</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;段飞&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHello</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="原型中的方法是可以相互访问" tabindex="-1">原型中的方法是可以相互访问 <a class="header-anchor" href="#原型中的方法是可以相互访问" aria-label="Permalink to &quot;原型中的方法是可以相互访问&quot;">​</a></h4><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;title&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //原型中的方法,是可以相互访问的</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> Animal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //原型中添加方法</span></span>
<span class="line"><span style="color:#E5C07B;">    Animal</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;动物吃东西&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#E5C07B;">    Animal</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;玩球&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#E5C07B;">    Animal</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;睡觉了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> dog</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Animal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小苏&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    dog</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //原型对象中的方法,可以相互调用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="原型链-实例对象使用的属性和方法的层层查找搜索" tabindex="-1">原型链：实例对象使用的属性和方法的层层查找搜索 <a class="header-anchor" href="#原型链-实例对象使用的属性和方法的层层查找搜索" aria-label="Permalink to &quot;原型链：实例对象使用的属性和方法的层层查找搜索&quot;">​</a></h3><blockquote><p>实例对象使用的属性或者方法，先在<strong>实例中</strong>查找，找到了则直接使用，找不到则，去<strong>实例对象</strong>的<code>__proto__</code>指向的<strong>构造函数</strong>的原型对象<code>prototype</code>中找，找到了则使用，找不到则报错</p></blockquote><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;title&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//年龄</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;构造函数中的吃&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				};</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;女&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;原型对象中的吃&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> per</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 打印的是：&quot;男&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">			per</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">per</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><hr><h3 id="原生对象的原型扩展" tabindex="-1">原生对象的原型扩展 <a class="header-anchor" href="#原生对象的原型扩展" aria-label="Permalink to &quot;原生对象的原型扩展&quot;">​</a></h3><p>所有函数都有 prototype 属性对象。</p><ul><li>Object.prototype</li><li>Function.prototype</li><li>Array.prototype</li><li>String.prototype</li><li>Number.prototype</li><li>Date.prototype</li><li>...</li></ul><h4 id="练习-为数组对象和字符串对象扩展原型方法" tabindex="-1">练习：为数组对象和字符串对象扩展原型方法 <a class="header-anchor" href="#练习-为数组对象和字符串对象扩展原型方法" aria-label="Permalink to &quot;练习：为数组对象和字符串对象扩展原型方法&quot;">​</a></h4><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;为内置对象添加原型方法&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 为内置对象添加原型方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    var arr=new Array(10,20,30,40,50);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    arr.join(&quot;|&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    console.dir(arr);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    var str=new String(&quot;哦,唛嘎的&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    str.indexOf(&quot;哦&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    console.dir(str);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    var dt=new Date();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    dt.getFullYear();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    console.dir(dt);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 实例中的方法如果没有,去创建该实例对象的构造函数的原型对象prototype中找</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 我们能否为系统的对象的原型中添加方法,相当于在改变源码</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 我希望字符串中有一个倒序字符串的方法</span></span>
<span class="line"><span style="color:#E5C07B;">			String</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">myReverse</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">--</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">				}</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;abcdefg&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			str</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">myReverse</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 为Array内置对象的原型对象中添加方法</span></span>
<span class="line"><span style="color:#E5C07B;">			Array</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mySort</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#C678DD;">				for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> j</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;"> 1</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">						if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">]) {</span></span>
<span class="line"><span style="color:#C678DD;">							var</span><span style="color:#E06C75;"> temp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">							this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">							this</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">j</span><span style="color:#56B6C2;"> +</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> temp</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">						} </span><span style="color:#7F848E;font-style:italic;">//end if</span></span>
<span class="line"><span style="color:#ABB2BF;">					} </span><span style="color:#7F848E;font-style:italic;">// end for</span></span>
<span class="line"><span style="color:#ABB2BF;">				} </span><span style="color:#7F848E;font-style:italic;">//end for</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> arr</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">56</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">78</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E5C07B;">			arr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mySort</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			String</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;哈哈,我又变帅了&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 字符串就有了打招呼的方法</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> str2</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;小杨&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">			str2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><h3 id="把局部变量变成全局变量" tabindex="-1">把局部变量变成全局变量 <a class="header-anchor" href="#把局部变量变成全局变量" aria-label="Permalink to &quot;把局部变量变成全局变量&quot;">​</a></h3><p>利用立即执行函数，把局部变量给 window 全局变量（立即执行函数的参数形参 传递暴露 数值给 window 全局对象实参）</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;把局部变量变成全局变量&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 函数的自调用---自调用函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 一次性的函数--声明的同时,直接调用了</span></span>
<span class="line"><span style="color:#ABB2BF;">			(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;函数&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 页面加载后.这个自调用函数的代码就执行完了</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// (function (形参) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//     var num = 10;</span><span style="color:#7F848E;font-style:italic;"> //局部变量</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// })(实参);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// console.log(num);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// *****把局部变量给window全局变量*****</span></span>
<span class="line"><span style="color:#ABB2BF;">			(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">win</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">				var</span><span style="color:#E06C75;"> num</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">//局部变量</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// js是一门动态类型的语言,对象没有属性,点了就有了</span></span>
<span class="line"><span style="color:#E5C07B;">				win</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			})(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 具体写法</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 简略写法：window可以省略</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>随机数原型对象赋值案例：贪吃蛇例子准备</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;随机数原型对象赋值全局对象&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 通过自调用函数产生一个随机数对象,在自调用函数外面,调用该随机数对象方法产生随机数</span></span>
<span class="line"><span style="color:#ABB2BF;">			(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">window</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 产生随机数的构造函数</span></span>
<span class="line"><span style="color:#C678DD;">				function</span><span style="color:#61AFEF;"> Random</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 在原型对象中添加方法</span></span>
<span class="line"><span style="color:#E5C07B;">				Random</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRandom</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">min</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">max</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">					return</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">floor</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">max</span><span style="color:#56B6C2;"> -</span><span style="color:#E06C75;"> min</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> min</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				// 把Random对象暴露给顶级对象window ---&gt; 外部可以直接使用这个对象</span></span>
<span class="line"><span style="color:#E5C07B;">				window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">Random</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> Random</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			})(</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 实例化随机数对象</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> rm</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Random</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 调用方法产生随机数</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">rm</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRandom</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 全局变量</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><hr><h3 id="原型对象的问题" tabindex="-1">原型对象的问题 <a class="header-anchor" href="#原型对象的问题" aria-label="Permalink to &quot;原型对象的问题&quot;">​</a></h3><ul><li>共享数组</li><li>共享对象</li></ul><p>如果真的希望可以被实例对象之间共享和修改这些共享数据那就不是问题。但是如果不希望实例之间共享和修改这些共享数据则就是问题。</p><p>一个更好的建议是，最好不要让实例之间互相共享这些数组或者对象成员，一旦修改的话会导致数据的走向很不明确而且难以维护。</p><h3 id="原型对象使用建议" tabindex="-1">原型对象使用建议 <a class="header-anchor" href="#原型对象使用建议" aria-label="Permalink to &quot;原型对象使用建议&quot;">​</a></h3><ul><li>私有成员（一般就是非函数成员）放到构造函数中</li><li>共享成员（一般就是函数）放到原型对象中</li><li>如果重置了 <code>prototype</code> 记得修正 <code>constructor</code> 的指向</li></ul><h2 id="五、原型及原型链" tabindex="-1">五、原型及原型链 <a class="header-anchor" href="#五、原型及原型链" aria-label="Permalink to &quot;五、原型及原型链&quot;">​</a></h2><p>演示代码：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;原型及原型链&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//使用对象----&gt;使用对象中的属性和对象中的方法,使用对象就要先有构造函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//构造函数</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//属性</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">				//在构造函数中的方法</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;吃好吃的&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				};</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//添加共享的属性</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;男&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//添加共享的方法</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;您好啊,怎么这么帅,就是这么帅&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//实例化对象,并初始化</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> per</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			per</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//如果想要使用一些属性和方法,并且属性的值在每个对象中都是一样的,方法在每个对象中的操作也都是一样,那么,为了共享数据,节省内存空间,是可以把属性和方法通过原型的方式进行赋值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">per</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//实例对象的结构</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Person</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//构造函数的结构</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//实例对象的原型__proto__和构造函数的原型prototype指向是相同的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//实例对象中的__proto__原型指向的是构造函数中的原型prototype</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//实例对象中__proto__是原型,浏览器使用的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//构造函数中的prototype是原型,程序员使用的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//原型链:是一种关系,实例对象和原型对象之间的关系,关系是通过原型(__proto__)来联系的</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>原型链的关系图解：实例对象和原型对象之间，通过原型<code>__proto__</code>联系</p><p><img src="`+t+`" alt="原型及原型链.png"></p><h4 id="function-和-object-的特殊性" tabindex="-1">Function 和 Object 的特殊性 <a class="header-anchor" href="#function-和-object-的特殊性" aria-label="Permalink to &quot;Function 和 Object 的特殊性&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Function object: 函数 对象，Test是构造函数</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Test</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const Test = new Function()</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_proto</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const obj = {};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//const obj = new Object();</span><span style="color:#7F848E;font-style:italic;"> // function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#E06C75;"> Object</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> ===</span><span style="color:#E5C07B;"> Function</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><hr><h3 id="原型链指向的改变" tabindex="-1">原型链指向的改变 <a class="header-anchor" href="#原型链指向的改变" aria-label="Permalink to &quot;原型链指向的改变&quot;">​</a></h3><p>原型指向可以改变</p><ul><li><p>实例对象的原型<strong>proto</strong>指向的是该对象所在的构造函数的原型对象</p></li><li><p>构造函数的原型对象(prototype)指向如果改变了,实例对象的原型(<strong>proto</strong>)指向也会发生改变</p></li><li><p>实例对象和原型对象之间的关系是通过<strong>proto</strong>原型来联系起来的，这个关系就是<strong>原型链</strong></p></li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;原型链指向的改变&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //构造函数中的this就是实例对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //原型对象中方法中的this就是实例对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    function Person(age) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//      this.age=age;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//      console.log(this);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    Person.prototype.eat=function () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//      console.log(this);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//      console.log(&quot;您吃了没,走着,吃点臭豆腐去&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    var per=new Person(10);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    per.eat();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//    console.log(per);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //人的构造函数</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //人的原型对象方法</span></span>
<span class="line"><span style="color:#E5C07B;">    Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;人的吃&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //学生的构造函数</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    Student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;嗨,小苏你好帅哦&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //学生的原型,指向了一个人的实例对象</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">    Student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> stu</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    stu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    stu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //原型指向可以改变</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //实例对象的原型__proto__指向的是该对象所在的构造函数的原型对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //构造函数的原型对象(prototype)指向如果改变了,实例对象的原型(__proto__)指向也会发生改变</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //原型的指向是可以改变的</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //实例对象和原型对象之间的关系是通过__proto__原型来联系起来的,这个关系就是原型链</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><p>图解：</p><p><img src="`+r+`" alt="原型链指向改变.png"></p><h4 id="总结-原型链的最终指向" tabindex="-1">总结：原型链的最终指向 <a class="header-anchor" href="#总结-原型链的最终指向" aria-label="Permalink to &quot;总结：原型链的最终指向&quot;">​</a></h4><p>原型链最终的指向是 Object 的 prototype 中的<strong>proto</strong>是 null</p><ol><li><p>实例对象中有<code>__proto__</code>原型</p></li><li><p>构造函数中有 prototype 原型</p></li><li><p>prototype 是对象，只要是对象就有对象的原型<code>__proto__</code></p></li><li><p>所以，prototype 这个对象中也有<code>__proto__</code>,那么指向了哪里</p></li><li><p>实例对象中的<code>__proto__</code>指向的是构造函数的 prototype</p></li><li><p>所以，prototype 这个对象中<code>__proto__</code>指向的应该是某个构造函数的原型 prototype</p></li><li><p>Person 的 prototype 中的<code>__proto__</code>的指向：</p><ol><li><p>console.log(Person.prototype.<strong>proto</strong>);</p></li><li><p>per 实例对象的 <code>__proto__</code> -------&gt; Person.prototype 的<code>__proto__</code> ----&gt; Object.prototype 的<code>__proto__</code>是 null</p></li></ol></li></ol><p>示例代码：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;原型链的最终指向&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;吃东西&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> per</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">per</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Person</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//实例对象中有__proto__原型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//构造函数中有prototype原型</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//prototype是对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//所以,prototype这个对象中也有__proto__,那么指向了哪里</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//实例对象中的__proto__指向的是构造函数的prototype</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//所以,prototype这个对象中__proto__指向的应该是某个构造函数的原型prototype</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//Person的prototype中的__proto__的指向</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//console.log(Person.prototype.__proto__);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//per实例对象的__proto__-------&gt;Person.prototype的__proto__----&gt;Object.prototype的__proto__是null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">__proto__</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>图例：</p><p><img src="`+c+`" alt="原型最终的指向.png"></p><hr><h3 id="原型指向改变如果再添加原型方法" tabindex="-1">原型指向改变如果再添加原型方法 <a class="header-anchor" href="#原型指向改变如果再添加原型方法" aria-label="Permalink to &quot;原型指向改变如果再添加原型方法&quot;">​</a></h3><p>代码示例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;原型指向改变如果再添加原型方法&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// ***** 1.先添加原型方法再改变原型指向 *****</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">    //人的构造函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    function Person(age) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//      this.age=age;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">    //人的原型中添加方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    Person.prototype.eat=function () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//      console.log(&quot;人正在吃东西&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">    //学生构造函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    function Student(sex) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//      this.sex=sex;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">    //学生的原型中添加方法----先在原型中添加方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    Student.prototype.sayHi=function () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//      console.log(&quot;您好哦&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">    //改变了原型对象的指向</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    Student.prototype=new Person(10);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    var stu=new Student(&quot;男&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    stu.eat();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    stu.sayHi();</span><span style="color:#7F848E;font-style:italic;"> // 先添加的sayHi()方法不能访问</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// ***** 2.先改变原型指向再添加原型方法 *****</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">    //人的构造函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    function Person(age) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//      this.age=age;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">    //人的原型中添加方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    Person.prototype.eat=function () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//      console.log(&quot;人正在吃东西&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">    //学生构造函数</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    function Student(sex) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//      this.sex=sex;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">    //改变了原型对象的指向</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    Student.prototype=new Person(10);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span><span style="color:#7F848E;font-style:italic;">    //学生的原型中添加方法----先在原型中添加方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    Student.prototype.sayHi=function () {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//      console.log(&quot;您好哦&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    var stu=new Student(&quot;男&quot;);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    stu.eat();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    stu.sayHi(); 后添加的sayHi()方法可以访问</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    console.dir(stu);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 原型指向改变后添加方法的正确使用</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 先-改变 prototype 指向</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">				eat</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">					console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;吃&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">				},</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 后-添加原型方法：如果放在[改变 prototype 指向]前面，就不能访问</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;您好&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> per</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			per</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 可以访问</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div><p><strong>1.先添加原型方法再改变原型指向</strong>：</p><p><img src="`+B+`" alt="原型指向后的图解.png"></p><p>先添加的 sayHi()方法不能访问</p><p><strong>2.先改变原型指向再添加原型方法</strong>：</p><p>后在原型添加的 sayHi()方法，可以访问</p><hr><h3 id="实例对象的属性和原型对象中的属性重名问题" tabindex="-1">实例对象的属性和原型对象中的属性重名问题 <a class="header-anchor" href="#实例对象的属性和原型对象中的属性重名问题" aria-label="Permalink to &quot;实例对象的属性和原型对象中的属性重名问题&quot;">​</a></h3><blockquote><p>通过实例对象<code>__proto__</code>不能改变原型对象中的属性值 想改变原型对象中属性的值：构造函数.原型对象 prototype.属性 = 值;</p></blockquote><p>示例代码：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;实例对象的属性和原型对象中的属性重名问题&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;女&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> per</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 因为JS是一门动态类型的语言,对象没有什么,只要点了,那么这个对象就有了这个东西：</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 就是说没有这个属性,只要对象.属性名字,对象就有这个属性了,但是,该属性没有赋值,所以,结果是:undefined</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">fdsfdsfsdfds</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">fsdfdsfds</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//实例对象访问这个属性,应该先从实例对象中找,找到了就直接用，找不到就去指向的原型对象中找,找到了就使用,找不到呢?=====</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//通过实例对象能否改变原型对象中的属性值?不能</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//就想改变原型对象中属性的值,怎么办?直接通过原型对象.属性=值;可以改变</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    Person.prototype.sex=&quot;哦唛嘎的&quot;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    per.sex=&quot;人&quot;;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    console.log(per.sex);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//    console.dir(per);</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="div-元素的原型链" tabindex="-1">div 元素的原型链 <a class="header-anchor" href="#div-元素的原型链" aria-label="Permalink to &quot;div 元素的原型链&quot;">​</a></h3><h4 id="div-的原型链" tabindex="-1">div 的原型链 <a class="header-anchor" href="#div-的原型链" aria-label="Permalink to &quot;div 的原型链&quot;">​</a></h4><p><code>divObj.__proto__</code>----&gt;<code>HTMLDivElement.prototype的__proto__</code>---&gt;<code>HTMLElement.prototype的__proto__</code>----&gt;<code>Element.prototype的__proto__----&gt;Node.prototype的__proto__</code>----&gt;<code>EventTarget.prototype的__proto__</code>----&gt;<code>Object.prototype</code>没有<code>__proto__</code>，所以，<code>Object.prototype</code>中的<code>__proto__</code>是<code>null</code></p><p>代码示例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;div元素的原型链&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//原型链:实例对象和原型对象之间的关系,通过__proto__来联系</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;dv&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> divObj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getElementById</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;dv&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">divObj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//divObj.__proto__----&gt;HTMLDivElement.prototype的__proto__---&gt;HTMLElement.prototype的__proto__----&gt;Element.prototype的__proto__----&gt;Node.prototype的__proto__----&gt;EventTarget.prototype的__proto__----&gt;Object.prototype没有__proto__,所以,Object.prototype中的__proto__是null</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><hr><h2 id="六-面向对象编程思想和应用" tabindex="-1">六：面向对象编程思想和应用 <a class="header-anchor" href="#六-面向对象编程思想和应用" aria-label="Permalink to &quot;六：面向对象编程思想和应用&quot;">​</a></h2><h3 id="面向对象的特性-封装、继承、多态" tabindex="-1">面向对象的特性：封装、继承、多态 <a class="header-anchor" href="#面向对象的特性-封装、继承、多态" aria-label="Permalink to &quot;面向对象的特性：封装、继承、多态&quot;">​</a></h3><ul><li>封装:就是包装 <ul><li>一个值存储在一个变量中--封装</li><li>一坨重复代码放在一个函数中--封装</li><li>一系列的属性放在一个对象中--封装</li><li>一些功能类似的函数(方法)放在一个对象中--封装</li><li>好多相类似的对象放在一个 js 文件中---封装</li></ul></li><li>继承是一种关系：父类级别与类级别的关系</li><li>多态： <ul><li>一个对象有不同的行为，或者是同一个行为针对不同的对象，产生不同的结果，要想有多态,就要先有继承，ES5 构造函数中可以模拟多态，但是不会去使用，也不会模拟</li></ul></li></ul><h3 id="es5-语法的构造函数实现面向对象编程" tabindex="-1">ES5 语法的构造函数实现面向对象编程 <a class="header-anchor" href="#es5-语法的构造函数实现面向对象编程" aria-label="Permalink to &quot;ES5 语法的构造函数实现面向对象编程&quot;">​</a></h3><h4 id="需求分析" tabindex="-1">需求分析 <a class="header-anchor" href="#需求分析" aria-label="Permalink to &quot;需求分析&quot;">​</a></h4><ul><li>根据需求，分析对象，找到对象有什么特征和行为，通过代码的方式来实现需求，要想实现这个需求，就要创建对象，要想创建对象，就应该显示有构造函数，然后通过构造函数来创建对象，通过对象调用属性和方法来实现相应的功能及需求</li><li>面向对象的思想适合于人的想法,编程起来会更加的方便，及后期的维护</li><li>面向对象的编程语言中有类(class)的概念(也是一种特殊的数据类型)，但是<strong>JS 的 ES5 语法不是面向对象的语言</strong>，JS 的 ES6 之后才有类(class)</li><li><strong>JS 的 ES5 语法</strong>构造函数语法可以模拟模拟类的概念(class)，来实现面向对象的思想编程</li></ul><h3 id="_1-通过对象原型实现继承" tabindex="-1">1.通过对象原型实现继承 <a class="header-anchor" href="#_1-通过对象原型实现继承" aria-label="Permalink to &quot;1.通过对象原型实现继承&quot;">​</a></h3><h4 id="什么是继承" tabindex="-1">什么是继承 <a class="header-anchor" href="#什么是继承" aria-label="Permalink to &quot;什么是继承&quot;">​</a></h4><ul><li><p>现实生活中的继承</p><ul><li>继承是一种关系：父类级别与类级别的关系</li></ul></li><li><p>程序中的继承</p><ul><li>继承: 首先继承是一种关系，类(class)与类之间的关系，JS 的 ES5 语法中没有类，ES6 才有，但是 ES5 的语法可以通过构造函数模拟类，然后通过原型来实现继承</li><li>继承也是为了数据共享，js 中的继承也是为了实现数据共享</li></ul></li></ul><h4 id="原型的作用" tabindex="-1">原型的作用 <a class="header-anchor" href="#原型的作用" aria-label="Permalink to &quot;原型的作用&quot;">​</a></h4><ul><li><p>原型作用之一：数据共享,节省内存空间</p></li><li><p>原型作用之二：为了实现继承</p></li></ul><h4 id="_1-构造函数的原型方法继承-拷贝继承-for-in" tabindex="-1">1.构造函数的原型方法继承：拷贝继承（for-in） <a class="header-anchor" href="#_1-构造函数的原型方法继承-拷贝继承-for-in" aria-label="Permalink to &quot;1.构造函数的原型方法继承：拷贝继承（for-in）&quot;">​</a></h4><p>为什么不使用简单的=等于赋值，因为赋值只是改变地址的指向，值都是指向同一内存空间，改一个值，另一个也会改变（浅拷贝）</p><p>下面的是拷贝继承是深拷贝：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;拷贝继承&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //拷贝继承；把一个对象中的属性或者方法直接复制到另一个对象中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">height</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;玩的好开心&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> obj2</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">{};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //Person的构造中有原型prototype,prototype就是一个对象,那么里面,age,sex,height,play都是该对象中的属性或者方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 原型对象拷贝继承原型对象成员</span></span>
<span class="line highlighted"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> key</span><span style="color:#C678DD;"> in</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">){</span></span>
<span class="line highlighted"><span style="color:#E06C75;">      obj2</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line highlighted"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">dir</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    obj2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h4 id="_2-第二种继承方式-原型继承" tabindex="-1">2.第二种继承方式：原型继承 <a class="header-anchor" href="#_2-第二种继承方式-原型继承" aria-label="Permalink to &quot;2.第二种继承方式：原型继承&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;human&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span></span>
<span class="line"><span style="color:#E5C07B;">  this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">  console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello &#39;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">  Person</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 利用原型的特性实现继承</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> s1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;张三&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">18</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">s1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">type</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// =&gt; human</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">s1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// =&gt; hello 张三</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>例子：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;学生和人构造函数继承例子&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 例子:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 人，都有姓名，性别，年龄，吃饭，睡觉，玩</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 学生，都有姓名，性别，年龄，成绩，吃饭，睡觉，玩，学习的行为</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// js中通过原型来实现继承</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 人 - 构造函数</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 人 - 构造函数原型上添加方法</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;人可以吃东西&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;人在睡觉&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#E5C07B;">			Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;生活就是不一样的玩法而已&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 学生 - 构造函数</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">score</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> score</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 改变学生的原型的指向即可==========&gt;学生和人已经发生关系</span></span>
<span class="line"><span style="color:#E5C07B;">			Student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			Student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">study</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;学习很累很累的哦.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			// 相同的代码太多，造成了代码的冗余(重复的代码)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> stu</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;下面的是人-构造函数对象中自己有的&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stu</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stu</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stu</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			stu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			stu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			stu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;下面的是学生-构造函数对象中自己有的&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stu</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			stu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">study</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><p>动物和狗继承案例：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;动物和狗继承案例&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//动物有名字,有体重,有吃东西的行为</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//小狗有名字,有体重,有毛色, 有吃东西的行为,还有咬人的行为</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//哈士奇名字,有体重,有毛色,性别, 有吃东西的行为,还有咬人的行为,逗主人开心的行为</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//动物的构造韩素</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> Animal</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">weight</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">weight</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> weight</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//动物的原型的方法</span></span>
<span class="line"><span style="color:#E5C07B;">			Animal</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;天天吃东西,就是吃&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//狗的构造函数</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> Dog</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">color</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> color</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			Dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Animal</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;哮天犬&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;50kg&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			Dog</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bitePerson</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;哼~汪汪~咬死你&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">			//哈士奇</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> ErHa</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			ErHa</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Dog</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;黑白色&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			ErHa</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">playHost</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">				console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">					&quot;哈哈~要坏衣服,要坏桌子,拆家..嘎嘎...好玩,开心不,惊喜不,意外不&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">				);</span></span>
<span class="line"><span style="color:#ABB2BF;">			};</span></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> erHa</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ErHa</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;雄性&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">erHa</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">erHa</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">weight</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">erHa</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">color</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			erHa</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			erHa</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bitePerson</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">			erHa</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">playHost</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><h4 id="_3-构造函数的属性继承-借用构造函数继承" tabindex="-1">3.构造函数的属性继承：借用构造函数继承 <a class="header-anchor" href="#_3-构造函数的属性继承-借用构造函数继承" aria-label="Permalink to &quot;3.构造函数的属性继承：借用构造函数继承&quot;">​</a></h4><ul><li><p>为了数据共享，<strong>改变原型指向</strong>，做到了继承---通过改变原型指向实现的继承</p><ul><li><p><strong>缺陷</strong>：因为改变原型指向的同时实现继承，直接初始化了属性，继承过来的属性的值都是一样的了，所以，这就是问题</p></li><li><p>只能重新调用对象的属性进行重新赋值，</p></li><li><p>改变原型指向缺点的<strong>解决方案</strong>：继承的时候，不用改变原型的指向，直接调用父级的构造函数的方式来为属性赋值就可以了------<strong>借用构造函数 👇</strong></p></li></ul></li><li><p><strong>借用构造函数</strong>：<code>构造函数名字.call(当前对象,属性,属性,属性....);</code></p><ul><li><p>解决了属性继承,并且值不重复的问题</p></li><li><p><strong>缺陷</strong>：父级类别中的方法不能继承</p></li></ul></li></ul><h5 id="借用构造函数继承示例-运用函数的-call-方法-person-call-this-name-age-sex-weight" tabindex="-1">借用构造函数继承示例，运用函数的 call 方法：<code>Person.call(this,name,age,sex,weight);</code> <a class="header-anchor" href="#借用构造函数继承示例-运用函数的-call-方法-person-call-this-name-age-sex-weight" aria-label="Permalink to &quot;借用构造函数继承示例，运用函数的 call 方法：\`Person.call(this,name,age,sex,weight);\`&quot;">​</a></h5><p>call 方法文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noreferrer">Function.prototype.call() - JavaScript | MDN (mozilla.org)</a></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;借用构造函数继承&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">weight</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">weight</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> weight</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;您好&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">weight</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">score</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 借用构造函数继承属性成员</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">      Person</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">weight</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> score</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 实例化输出打印</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> stu1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小明&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;10kg&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;100&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stu1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">weight</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> stu2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小红&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;女&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;20kg&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;120&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">weight</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> stu3</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小丽&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;妖&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;30kg&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;130&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stu3</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu3</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu3</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu3</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">weight</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">stu3</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h4 id="_4-组合继承-原型继承和借用构造函数继承-相结合" tabindex="-1">4.组合继承：原型继承和借用构造函数继承 相结合 <a class="header-anchor" href="#_4-组合继承-原型继承和借用构造函数继承-相结合" aria-label="Permalink to &quot;4.组合继承：原型继承和借用构造函数继承 相结合&quot;">​</a></h4><ul><li><p><strong>改变原型指向</strong>，做到了继承---通过改变原型指向实现的继承</p><ul><li><strong>缺陷</strong>：只能继承父类的方法</li></ul></li><li><p><strong>借用构造函数</strong>：<code>构造函数名字.call(当前对象,属性,属性,属性....);</code></p><ul><li><strong>缺陷</strong>：只能继承父类的属性</li></ul></li></ul><p>两种方式结合，相辅相成：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;&quot;原型继承&quot;和&quot;借用构造函数继承&quot;相结合&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //原型实现继承</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //借用构造函数实现继承</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //组合继承:原型继承+借用构造函数继承</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E5C07B;">    Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;阿涅哈斯诶呦&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#C678DD;">    function</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">sex</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">score</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      //借用构造函数:属性值重复的问题</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">      Person</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">      this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //改变原型指向----继承</span></span>
<span class="line highlighted"><span style="color:#E5C07B;">    Student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Person</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;">//不传值</span></span>
<span class="line"><span style="color:#E5C07B;">    Student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#E5C07B;">      console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;吃东西&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> stu</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小黑&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;男&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;100分&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stu</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">stu</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">stu</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">stu</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    stu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    stu</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    var</span><span style="color:#E06C75;"> stu2</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Student</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小黑黑&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;男人&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;1010分&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">score</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayHi</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    stu2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">eat</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //属性和方法都被继承了</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h4 id="逆推继承看原型" tabindex="-1">逆推继承看原型 <a class="header-anchor" href="#逆推继承看原型" aria-label="Permalink to &quot;逆推继承看原型&quot;">​</a></h4><p><img src="`+y+`" alt="逆推继承看原型.png"></p><p>代码：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;逆推继承看原型&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> F1</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> F2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			F2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> F1</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">			function</span><span style="color:#61AFEF;"> F3</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">age</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">			F3</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> F2</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">			var</span><span style="color:#E06C75;"> f3</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> F3</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">			console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">f3</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="es6-的-class-类的面向对象编程" tabindex="-1">ES6 的 class 类的面向对象编程 <a class="header-anchor" href="#es6-的-class-类的面向对象编程" aria-label="Permalink to &quot;ES6 的 class 类的面向对象编程&quot;">​</a></h2><p>视频：<a href="https://www.bilibili.com/video/BV1i54y1v7bE/?spm_id_from=333.999.0.0&amp;vd_source=5f0c99b3deddffe219938763769b15ac" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1i54y1v7bE/?spm_id_from=333.999.0.0&amp;vd_source=5f0c99b3deddffe219938763769b15ac</a></p><h3 id="面向对象编程总结" tabindex="-1">面向对象编程总结 <a class="header-anchor" href="#面向对象编程总结" aria-label="Permalink to &quot;面向对象编程总结&quot;">​</a></h3><h4 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h4><ol><li><p>原型作用：数据共享 ，目的是：为了节省内存空间</p></li><li><p>原型作用：继承 - 目的是：为了节省内存空间</p></li><li><p>原型继承：改变原型的指向</p></li><li><p>借用构造函数继承：主要解决属性的问题</p></li><li><p>组合继承：原型继承+借用构造函数继承，既能解决属性问题,又能解决方法问题</p></li><li><p>拷贝继承：就是把对象中需要共享的属性或者犯法,直接遍历的方式复制到另一个对象中</p></li></ol>`,264)]))}const g=n(i,[["render",F]]);export{d as __pageData,g as default};
