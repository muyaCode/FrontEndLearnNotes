import{_ as a,c as s,o as n,ah as r}from"./chunks/framework.DqD713j2.js";const l="/FrontEndLearnNotes/assets/640.DxVUK1yW.webp",b=JSON.parse('{"title":"Wasmer简介和资源","description":"","frontmatter":{},"headers":[],"relativePath":"Document/其他前端包管理工具/Wasmer/Wasmer简介和资源.md","filePath":"Document/其他前端包管理工具/Wasmer/Wasmer简介和资源.md","lastUpdated":1750954157000}'),p={name:"Document/其他前端包管理工具/Wasmer/Wasmer简介和资源.md"};function i(t,e,o,c,d,u){return n(),s("div",null,e[0]||(e[0]=[r('<h1 id="wasmer简介和资源" tabindex="-1">Wasmer简介和资源 <a class="header-anchor" href="#wasmer简介和资源" aria-label="Permalink to &quot;Wasmer简介和资源&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>WinterJS 是一个非常快速的兼容 WinterCG 的 Javascript 运行时，用 Rust 编写，使用 SpiderMonkey 引擎执行 JavaScript，并使用 Tokio 处理底层 HTTP 请求和 JS 事件循环。WinterJS 运行时也可以编译为 WebAssembly，因此是第一个可以在 Wasmer Edge 中完全运行的生产级运行时。</p><p>在 WinterJS 1.0 ：</p><ul><li>飞快的速度（比 Bun、WorkerD 和 Node 更快！）</li><li>WinterJS 现在完全兼容* WinterCG 规范</li><li>Cloudflare API 兼容性</li><li>Web 框架支持：Next.js（支持 React 服务器组件！）、Hono、Astro、SvelteKit 等</li></ul><h2 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h2><h3 id="飞快的速度" tabindex="-1">飞快的速度 <a class="header-anchor" href="#飞快的速度" aria-label="Permalink to &quot;飞快的速度&quot;">​</a></h3><p>WinterJS 1.0 在本地执行时能够处理 150,000 个请求/秒（使用 WASIX 编译为 Wasm 后为 20,000 个请求/秒）。</p><p>截至今日，WinterJS 比 Bun（117,000 请求/秒）、WorkerD（40,000 请求/秒）和 Node（75,000 请求/秒）处理更多的请求/秒（请参见基准测试）。</p><p><img src="'+l+`" alt="图片"></p><h3 id="wintercg-兼容性" tabindex="-1">WinterCG 兼容性 <a class="header-anchor" href="#wintercg-兼容性" aria-label="Permalink to &quot;WinterCG 兼容性&quot;">​</a></h3><p>WinterCG 是负责定义一组全局类和函数的机构之一，这些类和函数需要存在才能在一组基础架构上正确运行工作负载。</p><p>自我们首次公告以来，我们已经添加了对完整一套 API 的支持，包括：</p><ul><li>Data fetching:<code>fetch</code>、<code>URL</code>、<code>Request</code>、<code>Response</code></li><li>Files:<code>Blob</code>、<code>File</code></li><li>Streams:<code>ReadableStream</code>、<code>WritableStream</code>、<code>TransformStream*</code></li><li>Text Encoders:<code>TextEncoder</code>、<code>TextEncoderStream</code>、<code>atob</code>、<code>btoa</code></li><li>Cryptography:<code>crypto*</code></li></ul><p><em><strong>注意：变换流中的反压和一些（非常见的）加密算法尚未实现。</strong></em></p><h3 id="cloudflare-api-兼容性" tabindex="-1">Cloudflare API 兼容性 <a class="header-anchor" href="#cloudflare-api-兼容性" aria-label="Permalink to &quot;Cloudflare API 兼容性&quot;">​</a></h3><p>我们希望确保大多数前端框架在 WinterJS 中都能无缝运行，无需额外处理。因此，我们有两个选择：</p><ul><li>为每个前端框架创建全新的集成</li><li>加入一个现有的提案</li></ul><p>经过对 Deno、Cloudflare 和 Fastly 适配器的深入分析，我们意识到最强大的选择是 Cloudflare，因为它已经支持了其他 API 框架的大部分功能，并且可能是最常用的。因此，我们决定采用 Cloudflare API 兼容性。</p><p>为了支持 Cloudflare Worker 的工作负载，我们着手解决了四个主要方面的问题：</p><ul><li>通过 import 语法支持 ES 模块</li><li>通过 Node.js 兼容性 API 支持</li><li>通过node:async_hooks 支持 AsyncLocalStorage</li><li>通过 _routes.json 支持调用路由</li><li>支持文件系统结构</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>_worker.js</span></span>
<span class="line"><span>index.html</span></span>
<span class="line"><span>mystaticimage.jpg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>支持 Cloudflare 的 WinterCG 自定义 fetch API</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>export default {</span></span>
<span class="line"><span> async fetch(request, env, ctx) {</span></span>
<span class="line"><span>  return new Response(&#39;Hello World!&#39;);</span></span>
<span class="line"><span> },</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>以及 env.ASSETS API，它允许通过 Rust 的超级优化的静态 Web 服务器直接提供静态资产，因此您可以执行：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>export default {</span></span>
<span class="line"><span>  async fetch(request, env) {</span></span>
<span class="line"><span>    const url = new URL(request.url);</span></span>
<span class="line"><span>    if (url.pathname.startsWith(&#39;/api/&#39;)) {</span></span>
<span class="line"><span>      // TODO: Add your custom /api/* logic here.</span></span>
<span class="line"><span>      return new Response(&#39;Ok&#39;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    // Otherwise, serve the static assets.</span></span>
<span class="line"><span>    // Without this, the Worker will error and no assets will be served.</span></span>
<span class="line"><span>    return env.ASSETS.fetch(request);</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><a href="https://developers.cloudflare.com/workers/runtime-apis/handlers/fetch/" target="_blank" rel="noreferrer">请在此处查看完整的自定义 Cloudflare fetch API：</a></p><p>在获得所有这些功能之后，我们几乎可以通过传递 <code>--mode=cloudflare </code>来运行任何其他网络框架。</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span>winterjs --mode=cloudflare output/static</span></span>
<span class="line"><span>  # OR (using WASIX)</span></span>
<span class="line"><span>wasmer run wasmer/winterjs --net --mapdir=output/static:/web -- --mode=cloudflare /web</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="现有-web-框架的兼容性" tabindex="-1">现有 Web 框架的兼容性 <a class="header-anchor" href="#现有-web-框架的兼容性" aria-label="Permalink to &quot;现有 Web 框架的兼容性&quot;">​</a></h3><p>由于与 Cloudflare Workers API 的新兼容性，我们现在完全支持以下框架，不仅可以提供框架生成的静态网站，还可以让这些框架进行服务器端渲染（SSR）：</p><ul><li>Next.js（应用模板，演示）</li><li>Next.js React 服务器组件（应用模板，演示）- 注意：服务器端获取缓存尚未实现</li><li>Hono（应用模板，演示）</li><li>Astro.build（应用模板，演示）</li><li>Remix.run（应用模板，演示）</li><li>Svelte（应用模板，演示）</li><li>Gatsby（应用模板，演示）</li><li>Nuxt（应用模板，演示）</li></ul><h3 id="支持-react-服务器组件" tabindex="-1">支持 React 服务器组件 <a class="header-anchor" href="#支持-react-服务器组件" aria-label="Permalink to &quot;支持 React 服务器组件&quot;">​</a></h3><p>我们取得的最具挑战性的成就之一是运行具有服务器组件支持的 Next.js 服务器，因此渲染可以完全在服务器端完成。</p><p>努力使 React 服务器组件完全可用有助于我们发现我们的流实现与规范存在一些细微但重要的差异。我们还意识到我们的获取实现有一些怪癖需要修复，但最终，在经过许多汗水和不眠之夜后，我们完全做到了！🎉</p><p>[您可以查看使用 React 服务器端组件的 Hacker News 演示：]（<a href="https://next-rsc-hn.wasmer.app/%EF%BC%89%EF%BC%88%E8%AF%B7%E6%B3%A8%E6%84%8F%EF%BC%8C%E5%9C%A8%E6%AD%A4%E6%BC%94%E7%A4%BA%E4%B8%AD%EF%BC%8C%E6%88%91%E4%BB%AC%E6%B2%A1%E6%9C%89%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%BC%93%E5%AD%98%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%97%B4%E5%8F%AF%E8%83%BD%E4%B8%8D%E6%98%AF%E6%9C%80%E5%BF%AB%E7%9A%84%EF%BC%89%E3%80%82" target="_blank" rel="noreferrer">https://next-rsc-hn.wasmer.app/）（请注意，在此演示中，我们没有在服务器端缓存获取结果，因此加载时间可能不是最快的）。</a></p><p>我们现在只差一小步就可以将我们的 Next.js 前端从 Vercel 迁移到 Wasmer Edge，成本更低，而且完全可以在本地重现。</p><p>即刻体验 Wasmer Edge！选择上述任一应用程序模板，在 Wasmer Edge 上部署您的第一个 WinterJS 应用程序，或按照 JS Worker 快速入门指南操作。</p><p>还有一个小细节…我们正在准备在 Wasm 空间中完全运行 JIT 编译的 JS 工作负载……敬请关注更多更新！</p><p>接下来是什么？WinterJS 1.0 只是开始。</p><p>在 Wasmer，我们正在开发一种新的边缘部署应用程序的方式，通过尝试边缘技术，为您的项目开启令人难以置信的新用例。</p><h2 id="网站资源" tabindex="-1">网站资源 <a class="header-anchor" href="#网站资源" aria-label="Permalink to &quot;网站资源&quot;">​</a></h2><p>开源地址：<a href="https://github.com/wasmerio/wasmer" target="_blank" rel="noreferrer">https://github.com/wasmerio/wasmer</a></p><p>官网：<a href="https://wasmer.io/" target="_blank" rel="noreferrer">https://wasmer.io/</a></p>`,44)]))}const h=a(p,[["render",i]]);export{b as __pageData,h as default};
