import{_ as t,c as s,o as r,ah as i}from"./chunks/framework.DqD713j2.js";const e="/FrontEndLearnNotes/assets/image-20240622070556068.BOGXdBdm.png",o="/FrontEndLearnNotes/assets/image-20240622070616548.Dzu02Rxu.png",p="/FrontEndLearnNotes/assets/image-20240622070651197.Df1_unvf.png",n="/FrontEndLearnNotes/assets/image-20240622070717396.BQh00YXz.png",l="/FrontEndLearnNotes/assets/image-20240622070753738.BbIGIsHb.png",g="/FrontEndLearnNotes/assets/image-20240622070818640.DuNqL5E2.png",c="/FrontEndLearnNotes/assets/image-20240622070840138.CJPm66CE.png",d="/FrontEndLearnNotes/assets/image-20240622071313590.eUgUc2KI.png",m="/FrontEndLearnNotes/assets/image-20240622071339675.5VCqNPsO.png",h="/FrontEndLearnNotes/assets/image-20240622071434372.BBSNKT8U.png",u="/FrontEndLearnNotes/assets/image-20240622071507326.DbIYO5IA.png",_="/FrontEndLearnNotes/assets/image-20240622071543341.C1VhpDXx.png",b="/FrontEndLearnNotes/assets/image-20240622071633293.8EmF1QIS.png",S="/FrontEndLearnNotes/assets/image-20240622071808221.BRb1QKbX.png",q="/FrontEndLearnNotes/assets/image-20240622071827099.Cu7sKo0i.png",L="/FrontEndLearnNotes/assets/image-20240622071903263.uG3P3SUL.png",f="/FrontEndLearnNotes/assets/image-20240622071917734.0Y3Ke0FP.png",B=JSON.parse('{"title":"Strapi无头内容管理系统","description":"","frontmatter":{},"headers":[],"relativePath":"Document/Node后端框架开发/Strapi无头内容管理系统.md","filePath":"Document/Node后端框架开发/Strapi无头内容管理系统.md","lastUpdated":1750954157000}'),P={name:"Document/Node后端框架开发/Strapi无头内容管理系统.md"};function E(N,a,Q,k,y,F){return r(),s("div",null,a[0]||(a[0]=[i('<h1 id="strapi无头内容管理系统" tabindex="-1">Strapi无头内容管理系统 <a class="header-anchor" href="#strapi无头内容管理系统" aria-label="Permalink to &quot;Strapi无头内容管理系统&quot;">​</a></h1><p>Strapi 是一个开源的 <strong>Headless CMS</strong>（无头内容管理系统）。它允许开发者通过自定义的方式快速构建、管理和分发内容。Strapi 提供了一个强大的后端 API，支持 <code>RESTful</code> 和 <code>GraphQL</code> 两种方式，使得开发者可以方便地将内容分发到任何设备或服务，无论是网站、移动应用还是 IoT 设备。</p><p>Strapi 的主要特点包括：</p><ul><li><strong>灵活性和可扩展性</strong>：通过自定义模型、API、插件等，Strapi 提供了极高的灵活性，可以满足各种业务需求。</li><li><strong>易于使用的 API</strong>：Strapi 提供了一个简洁、直观的 API，使得开发者可以轻松地与数据库进行交互。</li><li><strong>内容管理界面</strong>：Strapi 提供了一个易于使用的管理界面，使得用户可以轻松地创建、编辑和发布内容。</li><li><strong>多语言支持</strong>：Strapi 支持多种语言，包括中文、英语、法语、德语等。</li><li><strong>可扩展性</strong>：Strapi 具有高度的可扩展性，可以通过插件和自定义模块、插件来扩展其功能。</li><li><strong>社区支持</strong>：Strapi 拥有一个活跃的社区，提供了大量的文档、示例和插件，使得开发人员可以轻松地解决问题和扩展功能。</li></ul><p>主要适用场景：</p><ul><li><strong>多平台内容分发（</strong> 将内容分发到不同web、h5等不同平台 <strong>）</strong></li><li><strong>定制化 CMS 需求（</strong> 通过插件等扩展性高度定制 <strong>）</strong></li><li><strong>快速开发api（API</strong>管理界面能够大大加快开发速度，尤其是MVP（最小可行产品）阶段）</li></ul><h2 id="相关地址" tabindex="-1">相关地址 <a class="header-anchor" href="#相关地址" aria-label="Permalink to &quot;相关地址&quot;">​</a></h2><p>GitHub：<a href="https://github.com/strapi/strapi" target="_blank" rel="noreferrer">https://github.com/strapi/strapi</a></p><p>官网：<a href="https://strapi.io/" target="_blank" rel="noreferrer">https://strapi.io/</a></p><h2 id="strapi实战" tabindex="-1">strapi实战 <a class="header-anchor" href="#strapi实战" aria-label="Permalink to &quot;strapi实战&quot;">​</a></h2><h3 id="安装strapi" tabindex="-1">安装Strapi <a class="header-anchor" href="#安装strapi" aria-label="Permalink to &quot;安装Strapi&quot;">​</a></h3><p>（安装完后，自动执行了strapi start，其mysql、语言切换、权限配置等都内置到了<code>@strapi</code>包中）</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">yarn</span><span style="color:#E06C75;"> create</span><span style="color:#E06C75;"> strapi</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">app</span><span style="color:#E06C75;"> my</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">strapi</span><span style="color:#7F848E;font-style:italic;"> --quickstart</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>浏览器访问：<a href="http://localhost:1337/admin/" target="_blank" rel="noreferrer">http://localhost:1337/admin/</a></p><p>访问的界面：</p><p>strapi原本就支持国际化，我们来切换成中文再继续操作。</p><h3 id="语言切换" tabindex="-1">语言切换 <a class="header-anchor" href="#语言切换" aria-label="Permalink to &quot;语言切换&quot;">​</a></h3><p>1.设置国际化</p><p><img src="'+e+'" alt="image-20240622070556068"></p><p>2.个人设置中配置语言即可：</p><p><img src="'+o+'" alt="image-20240622070616548"></p><p>如果看不到&quot;中文(简体)&quot;选项，就在项目根目录下执行build并重启：<code>npm run build &amp;&amp; npm start</code>，再刷新页面应该就能看到了。注意<code>npm start</code>默认是生产环境的启动(只能使用表，无法创建表)、开发环境启动用<code>&quot;npm run develop&quot;</code></p><h3 id="strapi的基础使用" tabindex="-1">strapi的基础使用 <a class="header-anchor" href="#strapi的基础使用" aria-label="Permalink to &quot;strapi的基础使用&quot;">​</a></h3><p>在第一步完成的时候，其实数据库就已经搭建好了，我们只管建表、增加curd的接口即可</p><h4 id="_1-建表" tabindex="-1">1. 建表 <a class="header-anchor" href="#_1-建表" aria-label="Permalink to &quot;1. 建表&quot;">​</a></h4><p><img src="'+p+'" alt="image-20240622070651197"></p><p>设置字段、可以选择需要的类型：</p><p><img src="'+n+'" alt="image-20240622070717396"></p><p>在保存左边的按钮可以继续添加字段</p><p><img src="'+l+'" alt="image-20240622070753738"></p><p>blog字段、建模完成后，进入内容管理器给表插入数据</p><p><img src="'+g+'" alt="image-20240622070818640"></p><p><img src="'+c+'" alt="image-20240622070840138"></p><h4 id="_2-curd" tabindex="-1">2. curd <a class="header-anchor" href="#_2-curd" aria-label="Permalink to &quot;2. curd&quot;">​</a></h4><p>上面只是可视化的查看、插入数据，怎样才能变成api来进行curd了。</p><ul><li>设置API令牌，跟进提示操作</li></ul><p><img src="'+d+'" alt="image-20240622071313590"></p><p><img src="'+m+'" alt="image-20240622071339675"></p><ul><li>权限说明</li></ul><p>find GET请求 /api/blogs 查找所有数据</p><p>findone GET请求 /api/blogs/:id 查找单条数据</p><p>create POST请求 /api/blogs 创建数据</p><p>update PUT请求 /api/blogs/:id 更新数据</p><p>delete DELETE请求 /api/blogs/:id 删除数据</p><ul><li>postman调试</li></ul><p>先给blog公共权限，以便调试：</p><p><img src="'+h+'" alt="image-20240622071434372"></p><p>1.查找所有数据（find）</p><p><img src="'+u+'" alt="image-20240622071507326"></p><p>2.查找单条数据（findone）</p><p><img src="'+_+'" alt="image-20240622071543341"></p><p>3.更新修改数据（update）</p><p><img src="'+b+'" alt="image-20240622071633293"></p><p>4.删除数据（delete），返回被删除的数据</p><p><img src="'+S+'" alt="image-20240622071808221"></p><p>再次查看：</p><p><img src="'+q+'" alt="image-20240622071827099"></p><h3 id="strapi数据可视化、navicat辅助数据处理" tabindex="-1">strapi数据可视化、Navicat辅助数据处理 <a class="header-anchor" href="#strapi数据可视化、navicat辅助数据处理" aria-label="Permalink to &quot;strapi数据可视化、Navicat辅助数据处理&quot;">​</a></h3><p>Strapi 支持多种数据库，包括 MySQL、PostgreSQL、MongoDB 和 SQLite，并且具有高度的可扩展性和自定义性，可以满足不同项目的需求。（默认使用的是SQLite数据库）</p><p>我们也可以借助Navicat等第三个工具来实现可视化数据操作：</p><p><img src="'+L+'" alt="image-20240622071903263"></p><p><img src="'+f+'" alt="image-20240622071917734"></p><p>其用户名、密码默认都是strapi</p><h3 id="strapi数据迁移" tabindex="-1">strapi数据迁移 <a class="header-anchor" href="#strapi数据迁移" aria-label="Permalink to &quot;strapi数据迁移&quot;">​</a></h3><h4 id="sqlite数据库" tabindex="-1">SQLite数据库 <a class="header-anchor" href="#sqlite数据库" aria-label="Permalink to &quot;SQLite数据库&quot;">​</a></h4><p>如果你只是需要将SQLite数据库从一个环境迁移到另一个环境（比如从一个服务器迁移到另一个服务器），操作相对简单：</p><ol><li><strong>备份SQLite数据库文件</strong>：找到你的SQLite数据库文件（<strong>默认位置是项目根目录下的</strong> <strong>.tmp/data.db</strong>）并将其复制到安全的位置。</li><li><strong>迁移文件</strong>：将备份的数据库文件移动到新环境的相同位置。</li><li><strong>更新配置（如有必要）</strong> ：如果新环境中数据库文件的位置有变化，确保更新Strapi的数据库配置文件（./config/database.js）以反映新的文件路径。</li></ol><h4 id="sqlite到其他数据库系统" tabindex="-1">SQLite到其他数据库系统 <a class="header-anchor" href="#sqlite到其他数据库系统" aria-label="Permalink to &quot;SQLite到其他数据库系统&quot;">​</a></h4><p>如果你需要将SQLite数据库迁移到其他类型的数据库系统，比如PostgreSQL或MySQL，流程会更复杂一些：</p><ol><li><strong>导出SQLite数据</strong>：首先，你需要导出SQLite数据库中的数据。这可以通过多种工具完成，例如使用sqlite3命令行工具或一个图形界面工具（如DB Browser for SQLite）来导出数据为SQL文件。</li><li><strong>准备目标数据库</strong>：在目标数据库系统中创建一个新的数据库，为Strapi项目准备使用。</li><li><strong>修改Strapi的数据库配置</strong>：根据目标数据库类型，修改Strapi的数据库配置文件（./config/database.js）。你需要根据目标数据库系统的要求配置连接参数。</li><li><strong>导入数据到目标数据库</strong>：使用目标数据库系统的工具导入之前导出的数据。不同数据库系统的导入工具和命令会有所不同。例如，对于PostgreSQL，你可能会使用psql工具，对于MySQL，则可能使用mysql命令行工具。</li><li><strong>处理数据类型和结构差异</strong>：不同的数据库系统在数据类型和结构上可能会有所差异。在导入过程中，你可能需要手动调整SQL文件或在导入后调整数据库结构，尤其是对于关系和外键约束。</li><li><strong>测试</strong>：迁移完成后，彻底测试你的Strapi项目，确保数据正确无误，所有功能正常工作。</li></ol><h4 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h4><ul><li><strong>数据兼容性</strong>：在不同数据库系统之间迁移时，可能会遇到数据类型不兼容的问题，需要仔细处理。</li><li><strong>性能调优</strong>：迁移到新的数据库系统后，可能需要根据新的数据库特性进行调优以确保性能。</li><li><strong>备份</strong>：在进行任何迁移操作之前，总是确保已经备份了所有数据和配置。</li></ul><p>具体步骤可能会因你的具体需求和所使用的数据库系统而异。根据你的目标数据库系统，可能有特定的迁移工具和服务可以帮助简化迁移过程。</p><h2 id="建一套博客系统的api" tabindex="-1">建一套博客系统的API <a class="header-anchor" href="#建一套博客系统的api" aria-label="Permalink to &quot;建一套博客系统的API&quot;">​</a></h2><ol><li>安装启动（已安装可忽略）<code>yarn create strapi-app my-strapi --quickstart</code></li><li>在后台建表建模、设置字段</li><li>设置表的API调用权限</li><li>在需要用到的地方使用即可</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>上面我们了解了strapi的后台使用、curd操作、数据迁移等。相信大家都能快速掌握使用。我们无需基于<strong>ORM框架去搭建数据模型，也无需使用python、nestjs等后台框架去创建后台服务了。</strong> 这势必能大大提升我们的开发效率。</p>',77)]))}const I=t(P,[["render",E]]);export{B as __pageData,I as default};
