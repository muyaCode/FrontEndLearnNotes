import{_ as a,c as n,o as l,ah as p}from"./chunks/framework.DqD713j2.js";const u=JSON.parse('{"title":"JavaScript 的引擎的运行原理","description":"","frontmatter":{},"headers":[],"relativePath":"Document/JavaScript笔记/JavaScript的运行和原理/JavaScript的引擎的运行原理.md","filePath":"Document/JavaScript笔记/JavaScript的运行和原理/JavaScript的引擎的运行原理.md","lastUpdated":1750954157000}'),e={name:"Document/JavaScript笔记/JavaScript的运行和原理/JavaScript的引擎的运行原理.md"};function o(t,s,r,c,i,B){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="javascript-的引擎的运行原理" tabindex="-1">JavaScript 的引擎的运行原理 <a class="header-anchor" href="#javascript-的引擎的运行原理" aria-label="Permalink to &quot;JavaScript 的引擎的运行原理&quot;">​</a></h1><p><a href="https://notes.eatonphil.com/javascript-implementations.html" target="_blank" rel="noreferrer">JavaScript 引擎列表</a>：这个网页做了一个 JavaScript 引擎的不完整列表</p><p>JavaScript 任务事件循环可视化工具：<a href="https://www.jsv9000.app/" target="_blank" rel="noreferrer">https://www.jsv9000.app/</a></p><p>事件循环文章：<a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noreferrer">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p><h2 id="宏任务和微任务" tabindex="-1">宏任务和微任务 <a class="header-anchor" href="#宏任务和微任务" aria-label="Permalink to &quot;宏任务和微任务&quot;">​</a></h2><h3 id="宏任务" tabindex="-1">宏任务 <a class="header-anchor" href="#宏任务" aria-label="Permalink to &quot;宏任务&quot;">​</a></h3><ul><li>分类： <code>setTimeout()</code>、<code>setInterval()</code>、<code>requrestAnimationFrame</code></li><li>1.宏任务所处的队列就是宏任务队列</li><li>2.第一个宏任务队列中只有一个任务： 执行主线程的 js 代码</li><li>3.宏任务队列可以有多个</li><li>4.当宏任务队列的中的任务全部执行完以后，会查看是否有微任务队列。如果有先执行微任务队列中的所有任务，如果没有就查看是否有宏任务队列</li></ul><h3 id="微任务" tabindex="-1">微任务 <a class="header-anchor" href="#微任务" aria-label="Permalink to &quot;微任务&quot;">​</a></h3><ul><li>分类：<code>new Promise().then(回调)</code>、<code>process.nextTick</code></li><li>1.微任务所处的队列就是微任务队列</li><li>2.只有一个微任务队列</li><li>3.在上一个宏任务队列执行完毕后如果有微任务队列就会执行微任务队列中的所有任务</li></ul><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#D19A66;"> html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#D19A66;"> lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">meta</span><span style="color:#D19A66;"> charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Title&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">script</span><span style="color:#D19A66;"> type</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;text/javascript&quot;</span><span style="color:#D19A66;"> src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;main.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">	&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>main.js</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;----------------- start -----------------&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;setTimeout&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">	for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;"> &lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">		console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#61AFEF;">	resolve</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 修改promise实例对象的状态为成功的状态</span></span>
<span class="line"><span style="color:#ABB2BF;">}).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">	console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;promise实例成功回调执行&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;----------------- end -----------------&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h2><p>执行上下文(execute context) EC</p><p>执行上下文对象就是 this</p><p>理解：代码执行的环境</p><p>时机：代码正式执行之前会进入到执行环境</p><p>工作:</p><ul><li>1.创建变量对象： <ul><li>1）变量</li><li>2）函数及函数的参数</li><li>3）全局：window</li><li>4）局部：抽象但是确实存在</li></ul></li><li>2.确定 this 的指向 <ul><li>1）全局：this ---&gt; window</li><li>2）局部：this ---&gt; 调用其的对象</li></ul></li><li>3.创建作用域链 <ul><li>父级作用域链 + 当前的变量对象</li></ul></li><li>4.扩展</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">WCobj</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 变量对象： {变量，函数，函数的形参}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // scopeChain:父级作用域链 + 当前的变量对象</span></span>
<span class="line"><span style="color:#E06C75;">    this</span><span style="color:#ABB2BF;">:{window || </span><span style="color:#E06C75;">调用其的对象</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="js-引擎预处理-变量提升" tabindex="-1">JS 引擎预处理(变量提升) <a class="header-anchor" href="#js-引擎预处理-变量提升" aria-label="Permalink to &quot;JS 引擎预处理(变量提升)&quot;">​</a></h2><p>JS 引擎在代码正式执行之前会做一个预处理的工作:</p><p>1.收集变量</p><p>2.收集函数</p><p>依据:</p><p>var 将 var 后边的变量定义但是不赋值 var username = undefined;</p><p>function(){} 是提前定义了该函数</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">username</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 答案: undefined</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#E06C75;"> username</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &#39;kobe&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">fun</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 答案: 正常执行函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> fun</span><span style="color:#ABB2BF;">() {</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;fun()&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="javascript底层剖析" tabindex="-1">JavaScript底层剖析 <a class="header-anchor" href="#javascript底层剖析" aria-label="Permalink to &quot;JavaScript底层剖析&quot;">​</a></h2><h3 id="浏览器工作原理-和-v8引擎" tabindex="-1">浏览器工作原理 和 V8引擎 <a class="header-anchor" href="#浏览器工作原理-和-v8引擎" aria-label="Permalink to &quot;浏览器工作原理 和 V8引擎&quot;">​</a></h3><ul><li><p>浏览器的工作原理</p></li><li><p>浏览器渲染过程</p></li><li><p>认识JavaScript引擎</p></li><li><p>浏览器内核和JS引擎的关系</p></li><li><p>V8引擎的原理</p></li><li><p>V8引擎的架构</p></li><li><p>V8引擎的官方解析图</p></li><li><p>V8执行的细节</p></li></ul><h3 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h3><h3 id="函数、闭包" tabindex="-1">函数、闭包 <a class="header-anchor" href="#函数、闭包" aria-label="Permalink to &quot;函数、闭包&quot;">​</a></h3><h3 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h3><h3 id="一系列" tabindex="-1">一系列 <a class="header-anchor" href="#一系列" aria-label="Permalink to &quot;一系列&quot;">​</a></h3><ul><li><p>事件循环</p></li><li><p>微任务</p></li><li><p>宏任务</p></li><li><p>内存管理</p></li><li><p>Promise</p></li><li><p>await、asnyc</p></li><li><p>防抖、节流</p></li></ul>`,36)]))}const d=a(e,[["render",o]]);export{u as __pageData,d as default};
